
OF_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003028  08003028  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003028  08003028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08003044  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003044  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001192f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  00031964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00033fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d3  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea54  00000000  00000000  0004fdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9aa  00000000  00000000  0005e83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ec  00000000  00000000  000eb23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fe8 	.word	0x08002fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002fe8 	.word	0x08002fe8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_fdiv>:
 80002b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80002bc:	bf1e      	ittt	ne
 80002be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80002c2:	ea92 0f0c 	teqne	r2, ip
 80002c6:	ea93 0f0c 	teqne	r3, ip
 80002ca:	d069      	beq.n	80003a0 <__aeabi_fdiv+0xec>
 80002cc:	eba2 0203 	sub.w	r2, r2, r3
 80002d0:	ea80 0c01 	eor.w	ip, r0, r1
 80002d4:	0249      	lsls	r1, r1, #9
 80002d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80002da:	d037      	beq.n	800034c <__aeabi_fdiv+0x98>
 80002dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80002e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80002e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002ec:	428b      	cmp	r3, r1
 80002ee:	bf38      	it	cc
 80002f0:	005b      	lslcc	r3, r3, #1
 80002f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80002f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80002fa:	428b      	cmp	r3, r1
 80002fc:	bf24      	itt	cs
 80002fe:	1a5b      	subcs	r3, r3, r1
 8000300:	ea40 000c 	orrcs.w	r0, r0, ip
 8000304:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000308:	bf24      	itt	cs
 800030a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800030e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000312:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000316:	bf24      	itt	cs
 8000318:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800031c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000320:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000324:	bf24      	itt	cs
 8000326:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800032a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800032e:	011b      	lsls	r3, r3, #4
 8000330:	bf18      	it	ne
 8000332:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000336:	d1e0      	bne.n	80002fa <__aeabi_fdiv+0x46>
 8000338:	2afd      	cmp	r2, #253	; 0xfd
 800033a:	f63f af50 	bhi.w	80001de <__aeabi_fmul+0x92>
 800033e:	428b      	cmp	r3, r1
 8000340:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000350:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000354:	327f      	adds	r2, #127	; 0x7f
 8000356:	bfc2      	ittt	gt
 8000358:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800035c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000360:	4770      	bxgt	lr
 8000362:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000366:	f04f 0300 	mov.w	r3, #0
 800036a:	3a01      	subs	r2, #1
 800036c:	e737      	b.n	80001de <__aeabi_fmul+0x92>
 800036e:	f092 0f00 	teq	r2, #0
 8000372:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0040      	lsleq	r0, r0, #1
 800037a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800037e:	3a01      	subeq	r2, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fdiv+0xc2>
 8000382:	ea40 000c 	orr.w	r0, r0, ip
 8000386:	f093 0f00 	teq	r3, #0
 800038a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800038e:	bf02      	ittt	eq
 8000390:	0049      	lsleq	r1, r1, #1
 8000392:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000396:	3b01      	subeq	r3, #1
 8000398:	d0f9      	beq.n	800038e <__aeabi_fdiv+0xda>
 800039a:	ea41 010c 	orr.w	r1, r1, ip
 800039e:	e795      	b.n	80002cc <__aeabi_fdiv+0x18>
 80003a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003a4:	ea92 0f0c 	teq	r2, ip
 80003a8:	d108      	bne.n	80003bc <__aeabi_fdiv+0x108>
 80003aa:	0242      	lsls	r2, r0, #9
 80003ac:	f47f af7d 	bne.w	80002aa <__aeabi_fmul+0x15e>
 80003b0:	ea93 0f0c 	teq	r3, ip
 80003b4:	f47f af70 	bne.w	8000298 <__aeabi_fmul+0x14c>
 80003b8:	4608      	mov	r0, r1
 80003ba:	e776      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003bc:	ea93 0f0c 	teq	r3, ip
 80003c0:	d104      	bne.n	80003cc <__aeabi_fdiv+0x118>
 80003c2:	024b      	lsls	r3, r1, #9
 80003c4:	f43f af4c 	beq.w	8000260 <__aeabi_fmul+0x114>
 80003c8:	4608      	mov	r0, r1
 80003ca:	e76e      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80003d0:	bf18      	it	ne
 80003d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80003d6:	d1ca      	bne.n	800036e <__aeabi_fdiv+0xba>
 80003d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80003dc:	f47f af5c 	bne.w	8000298 <__aeabi_fmul+0x14c>
 80003e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80003e4:	f47f af3c 	bne.w	8000260 <__aeabi_fmul+0x114>
 80003e8:	e75f      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003ea:	bf00      	nop

080003ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <MX_DMA_Init+0x38>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_DMA_Init+0x38>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	200f      	movs	r0, #15
 8000410:	f000 fec5 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000414:	200f      	movs	r0, #15
 8000416:	f000 fede 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	4b38      	ldr	r3, [pc, #224]	; (8000520 <MX_GPIO_Init+0xf8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a37      	ldr	r2, [pc, #220]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000442:	f043 0310 	orr.w	r3, r3, #16
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b35      	ldr	r3, [pc, #212]	; (8000520 <MX_GPIO_Init+0xf8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0310 	and.w	r3, r3, #16
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b32      	ldr	r3, [pc, #200]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a31      	ldr	r2, [pc, #196]	; (8000520 <MX_GPIO_Init+0xf8>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <MX_GPIO_Init+0xf8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_GPIO_Init+0xf8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a25      	ldr	r2, [pc, #148]	; (8000520 <MX_GPIO_Init+0xf8>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	603b      	str	r3, [r7, #0]
 800049a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a2:	4820      	ldr	r0, [pc, #128]	; (8000524 <MX_GPIO_Init+0xfc>)
 80004a4:	f001 fa9a 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f248 0110 	movw	r1, #32784	; 0x8010
 80004ae:	481e      	ldr	r0, [pc, #120]	; (8000528 <MX_GPIO_Init+0x100>)
 80004b0:	f001 fa94 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2102      	movs	r1, #2
 80004b8:	481c      	ldr	r0, [pc, #112]	; (800052c <MX_GPIO_Init+0x104>)
 80004ba:	f001 fa8f 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_GPIO_Init+0xfc>)
 80004d8:	f001 f8fc 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80004dc:	f248 0310 	movw	r3, #32784	; 0x8010
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <MX_GPIO_Init+0x100>)
 80004f6:	f001 f8ed 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004fa:	2302      	movs	r3, #2
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <MX_GPIO_Init+0x104>)
 8000512:	f001 f8df 	bl	80016d4 <HAL_GPIO_Init>

}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if(huart->Instance == matek_of.huart_of.Instance) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_UART_RxCpltCallback+0x24>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d102      	bne.n	800054a <HAL_UART_RxCpltCallback+0x1a>
		matek_of.MatekRead2();
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <HAL_UART_RxCpltCallback+0x24>)
 8000546:	f000 f907 	bl	8000758 <_ZN7MatekOF10MatekRead2Ev>
	}

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	b08f      	sub	sp, #60	; 0x3c
 800055c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fce5 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f825 	bl	80005b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f7ff ff5f 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f7ff ff3f 	bl	80003ec <MX_DMA_Init>
  MX_TIM2_Init();
 800056e:	f000 fae3 	bl	8000b38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000572:	f000 fb2d 	bl	8000bd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000576:	f000 fb79 	bl	8000c6c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800057a:	f000 fc09 	bl	8000d90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  matek_of.begin(huart1);
 800057e:	4e0a      	ldr	r6, [pc, #40]	; (80005a8 <main+0x50>)
 8000580:	466d      	mov	r5, sp
 8000582:	f106 040c 	add.w	r4, r6, #12
 8000586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800058a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800058c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800058e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	602b      	str	r3, [r5, #0]
 8000596:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <main+0x54>)
 800059c:	f000 f8c4 	bl	8000728 <_ZN7MatekOF5beginE20__UART_HandleTypeDef>
  matek_of.MatekRead2();
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <main+0x54>)
 80005a2:	f000 f8d9 	bl	8000758 <_ZN7MatekOF10MatekRead2Ev>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x4e>
 80005a8:	200001f4 	.word	0x200001f4
 80005ac:	20000028 	.word	0x20000028

080005b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	; 0x40
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	2228      	movs	r2, #40	; 0x28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fd0a 	bl	8002fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fa07 	bl	8001a0c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800060e:	f000 f81e 	bl	800064e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc6d 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000642:	f000 f804 	bl	800064e <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3740      	adds	r7, #64	; 0x40
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000652:	b672      	cpsid	i
}
 8000654:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000656:	e7fe      	b.n	8000656 <Error_Handler+0x8>

08000658 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d107      	bne.n	8000678 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066e:	4293      	cmp	r3, r2
 8000670:	d102      	bne.n	8000678 <_Z41__static_initialization_and_destruction_0ii+0x20>
MatekOF matek_of;
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000674:	f000 f830 	bl	80006d8 <_ZN7MatekOFC1Ev>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d107      	bne.n	800068e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000684:	4293      	cmp	r3, r2
 8000686:	d102      	bne.n	800068e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800068a:	f000 f9d7 	bl	8000a3c <_ZN7MatekOFD1Ev>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028

0800069c <_GLOBAL__sub_I_matek_of>:
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
 80006a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ffd7 	bl	8000658 <_Z41__static_initialization_and_destruction_0ii>
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_GLOBAL__sub_D_matek_of>:
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ffcf 	bl	8000658 <_Z41__static_initialization_and_destruction_0ii>
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bfb8      	it	lt
 80006ca:	425b      	neglt	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <_ZN7MatekOFC1Ev>:
 *
 *  Created on: Apr 12, 2023
 *      Author: Kerim
 */

MatekOF::MatekOF() {};
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <_ZN7MatekOFC1Ev+0x48>)
 80006e4:	659a      	str	r2, [r3, #88]	; 0x58
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	490e      	ldr	r1, [pc, #56]	; (8000724 <_ZN7MatekOFC1Ev+0x4c>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd2d 	bl	800014c <__aeabi_fmul>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	221e      	movs	r2, #30
 80006fe:	661a      	str	r2, [r3, #96]	; 0x60
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f641 7201 	movw	r2, #7937	; 0x1f01
 8000706:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f641 7202 	movw	r2, #7938	; 0x1f02
 8000710:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	3c8ef34d 	.word	0x3c8ef34d
 8000724:	42280000 	.word	0x42280000

08000728 <_ZN7MatekOF5beginE20__UART_HandleTypeDef>:
	float range_m = (float)distance/1000.0;
	vel_x = of_msg_str.motion_x * 2 * range_m * tan(alpha/2) / W;
	vel_y = of_msg_str.motion_y * 2 * range_m * tan(alpha/2) / W;
}

void MatekOF::begin(UART_HandleTypeDef huart) {
 8000728:	b084      	sub	sp, #16
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	f107 0014 	add.w	r0, r7, #20
 8000736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	memcpy(&huart_of, &huart, sizeof(huart));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3310      	adds	r3, #16
 800073e:	f107 0114 	add.w	r1, r7, #20
 8000742:	2240      	movs	r2, #64	; 0x40
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc39 	bl	8002fbc <memcpy>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <_ZN7MatekOF10MatekRead2Ev>:

void MatekOF::MatekRead2() {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b091      	sub	sp, #68	; 0x44
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t start_index;
	uint8_t in_msg[18];
	for(int i=0; i<sizeof(matek_msg2); i++) {
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
 8000764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000766:	2b23      	cmp	r3, #35	; 0x23
 8000768:	d80e      	bhi.n	8000788 <_ZN7MatekOF10MatekRead2Ev+0x30>
		if(matek_msg2[i] == START_MSG) {
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800076e:	4413      	add	r3, r2
 8000770:	338c      	adds	r3, #140	; 0x8c
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b24      	cmp	r3, #36	; 0x24
 8000776:	d103      	bne.n	8000780 <_ZN7MatekOF10MatekRead2Ev+0x28>
				start_index = i;
 8000778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800077a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				break;
 800077e:	e003      	b.n	8000788 <_ZN7MatekOF10MatekRead2Ev+0x30>
	for(int i=0; i<sizeof(matek_msg2); i++) {
 8000780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000782:	3301      	adds	r3, #1
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
 8000786:	e7ed      	b.n	8000764 <_ZN7MatekOF10MatekRead2Ev+0xc>
			}
		}
	msg_type = matek_msg2[(start_index+5)%36] << 8 | matek_msg2[(start_index+4)%36];
 8000788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800078c:	1d59      	adds	r1, r3, #5
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <_ZN7MatekOF10MatekRead2Ev+0x1b4>)
 8000790:	fb83 2301 	smull	r2, r3, r3, r1
 8000794:	10da      	asrs	r2, r3, #3
 8000796:	17cb      	asrs	r3, r1, #31
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	4613      	mov	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	4413      	add	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	1aca      	subs	r2, r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b218      	sxth	r0, r3
 80007b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007b4:	1d19      	adds	r1, r3, #4
 80007b6:	4b55      	ldr	r3, [pc, #340]	; (800090c <_ZN7MatekOF10MatekRead2Ev+0x1b4>)
 80007b8:	fb83 2301 	smull	r2, r3, r3, r1
 80007bc:	10da      	asrs	r2, r3, #3
 80007be:	17cb      	asrs	r3, r1, #31
 80007c0:	1ad2      	subs	r2, r2, r3
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	1aca      	subs	r2, r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4303      	orrs	r3, r0
 80007d8:	b21b      	sxth	r3, r3
 80007da:	b29a      	uxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	if(msg_type == rng_msg) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d137      	bne.n	8000862 <_ZN7MatekOF10MatekRead2Ev+0x10a>
		for(int i=start_index; i<start_index+14; i++) {
 80007f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
 80007f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007fc:	330d      	adds	r3, #13
 80007fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000800:	429a      	cmp	r2, r3
 8000802:	dc1c      	bgt.n	800083e <_ZN7MatekOF10MatekRead2Ev+0xe6>
			in_msg[i - start_index] = matek_msg2[i%36];
 8000804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <_ZN7MatekOF10MatekRead2Ev+0x1b4>)
 8000808:	fb83 2301 	smull	r2, r3, r3, r1
 800080c:	10da      	asrs	r2, r3, #3
 800080e:	17cb      	asrs	r3, r1, #31
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	1aca      	subs	r2, r1, r3
 800081c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000822:	1acb      	subs	r3, r1, r3
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	440a      	add	r2, r1
 8000828:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800082c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000830:	440b      	add	r3, r1
 8000832:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(int i=start_index; i<start_index+14; i++) {
 8000836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000838:	3301      	adds	r3, #1
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
 800083c:	e7dc      	b.n	80007f8 <_ZN7MatekOF10MatekRead2Ev+0xa0>
		}
		int32_t meas_dist  = MatekDecodeRange(in_msg);
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f863 	bl	8000910 <_ZN7MatekOF16MatekDecodeRangeEPh>
 800084a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(CheckRange(meas_dist)) {
 800084c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f8b7 	bl	80009c2 <_ZN7MatekOF10CheckRangeEl>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d04a      	beq.n	80008f0 <_ZN7MatekOF10MatekRead2Ev+0x198>
			distance = meas_dist;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	e046      	b.n	80008f0 <_ZN7MatekOF10MatekRead2Ev+0x198>
		}
		//payload_size = matek_msg[7] << 8 | matek_msg[6];

	}

	else if(msg_type == flow_msg) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800086e:	429a      	cmp	r2, r3
 8000870:	d13e      	bne.n	80008f0 <_ZN7MatekOF10MatekRead2Ev+0x198>
		for(int i=start_index; i<start_index+18; i++) {
 8000872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
 8000878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800087c:	3311      	adds	r3, #17
 800087e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000880:	429a      	cmp	r2, r3
 8000882:	dc1c      	bgt.n	80008be <_ZN7MatekOF10MatekRead2Ev+0x166>
			in_msg[i - start_index] = matek_msg2[i%36];
 8000884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <_ZN7MatekOF10MatekRead2Ev+0x1b4>)
 8000888:	fb83 2301 	smull	r2, r3, r3, r1
 800088c:	10da      	asrs	r2, r3, #3
 800088e:	17cb      	asrs	r3, r1, #31
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	1aca      	subs	r2, r1, r3
 800089c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80008a2:	1acb      	subs	r3, r1, r3
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	440a      	add	r2, r1
 80008a8:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80008ac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008b0:	440b      	add	r3, r1
 80008b2:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(int i=start_index; i<start_index+18; i++) {
 80008b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b8:	3301      	adds	r3, #1
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
 80008bc:	e7dc      	b.n	8000878 <_ZN7MatekOF10MatekRead2Ev+0x120>
		}
		OF_Msg of_msg_proto = MatekDecodeOF(in_msg);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	f107 0218 	add.w	r2, r7, #24
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f840 	bl	800094e <_ZN7MatekOF13MatekDecodeOFEPh>
		if(CheckMotion(of_msg_proto)) {
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f88b 	bl	80009f0 <_ZN7MatekOF11CheckMotionE6OF_Msg>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d007      	beq.n	80008f0 <_ZN7MatekOF10MatekRead2Ev+0x198>
			of_msg_str = of_msg_proto;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	461c      	mov	r4, r3
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			//Pix2Meter();
		}
	}
	HAL_UART_Receive_DMA(&huart_of, (uint8_t*)matek_msg2, 36);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f103 0010 	add.w	r0, r3, #16
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	338c      	adds	r3, #140	; 0x8c
 80008fa:	2224      	movs	r2, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	f001 ff57 	bl	80027b0 <HAL_UART_Receive_DMA>
}
 8000902:	bf00      	nop
 8000904:	3744      	adds	r7, #68	; 0x44
 8000906:	46bd      	mov	sp, r7
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	bf00      	nop
 800090c:	38e38e39 	.word	0x38e38e39

08000910 <_ZN7MatekOF16MatekDecodeRangeEPh>:

		HAL_UART_Receive_DMA (&huart_of, (uint8_t*)&inChar, 1);
}


int32_t MatekOF::MatekDecodeRange(uint8_t* msg) {
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  int32_t distance = msg[9] | msg[10] << 8 | msg[11] << 16 | msg[12] << 24 ;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3309      	adds	r3, #9
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	330a      	adds	r3, #10
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	431a      	orrs	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	330b      	adds	r3, #11
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	041b      	lsls	r3, r3, #16
 8000934:	431a      	orrs	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	330c      	adds	r3, #12
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	061b      	lsls	r3, r3, #24
 800093e:	4313      	orrs	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  return distance;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_ZN7MatekOF13MatekDecodeOFEPh>:

OF_Msg MatekOF::MatekDecodeOF(uint8_t* msg) {
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  OF_Msg of_msg;
  of_msg.quality = msg[8];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7a1a      	ldrb	r2, [r3, #8]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	701a      	strb	r2, [r3, #0]
  of_msg.motion_x = msg[9] | msg[10] << 8 | msg[11] << 16 | msg[12] << 24;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3309      	adds	r3, #9
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	330a      	adds	r3, #10
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	330b      	adds	r3, #11
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	330c      	adds	r3, #12
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	061b      	lsls	r3, r3, #24
 8000986:	431a      	orrs	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	605a      	str	r2, [r3, #4]
  of_msg.motion_y = msg[13] | msg[14] << 8 | msg[15] << 16 | msg[16] << 24 ;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	330d      	adds	r3, #13
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	330e      	adds	r3, #14
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	431a      	orrs	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	330f      	adds	r3, #15
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	041b      	lsls	r3, r3, #16
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3310      	adds	r3, #16
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	061b      	lsls	r3, r3, #24
 80009b0:	431a      	orrs	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	609a      	str	r2, [r3, #8]
  return of_msg;
 80009b6:	bf00      	nop
}
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_ZN7MatekOF10CheckRangeEl>:

bool MatekOF::CheckRange(int32_t range) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
	bool range_ok;
	if(range <0 || range > 2000) {
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db03      	blt.n	80009da <_ZN7MatekOF10CheckRangeEl+0x18>
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009d8:	dd02      	ble.n	80009e0 <_ZN7MatekOF10CheckRangeEl+0x1e>
		range_ok = false;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <_ZN7MatekOF10CheckRangeEl+0x22>
	}

	else {
		range_ok = true;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
	}

	return range_ok;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <_ZN7MatekOF11CheckMotionE6OF_Msg>:

bool MatekOF::CheckMotion(OF_Msg of_msg) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	4638      	mov	r0, r7
 80009fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	bool mot_ok;
	if(abs(of_msg.motion_x) > 500 || abs(of_msg.motion_y) > 500) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe5b 	bl	80006bc <_ZSt3absl>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a0c:	dc07      	bgt.n	8000a1e <_ZN7MatekOF11CheckMotionE6OF_Msg+0x2e>
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe53 	bl	80006bc <_ZSt3absl>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a1c:	dd01      	ble.n	8000a22 <_ZN7MatekOF11CheckMotionE6OF_Msg+0x32>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <_ZN7MatekOF11CheckMotionE6OF_Msg+0x34>
 8000a22:	2300      	movs	r3, #0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <_ZN7MatekOF11CheckMotionE6OF_Msg+0x3e>
		mot_ok = false;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	75fb      	strb	r3, [r7, #23]
 8000a2c:	e001      	b.n	8000a32 <_ZN7MatekOF11CheckMotionE6OF_Msg+0x42>
	}

	else {
		mot_ok = true;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
	}

	return mot_ok;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZN7MatekOFD1Ev>:

MatekOF::~MatekOF() {};
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 fa5d 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA1_Channel5_IRQHandler+0x10>)
 8000b0a:	f000 fcaf 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001b0 	.word	0x200001b0

08000b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART1_IRQHandler+0x10>)
 8000b1e:	f001 fec7 	bl	80028b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001f4 	.word	0x200001f4

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b5e:	2247      	movs	r2, #71	; 0x47
 8000b60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b7e:	f001 fb5f 	bl	8002240 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b88:	f7ff fd61 	bl	800064e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000b9a:	f001 fba0 	bl	80022de <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ba4:	f7ff fd53 	bl	800064e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_TIM2_Init+0x94>)
 8000bb6:	f001 fd4f 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f7ff fd45 	bl	800064e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000168 	.word	0x20000168

08000bd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <MX_TIM3_Init+0x98>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000bf4:	2247      	movs	r2, #71	; 0x47
 8000bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c14:	f001 fb14 	bl	8002240 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f7ff fd16 	bl	800064e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c30:	f001 fb55 	bl	80022de <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f7ff fd08 	bl	800064e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_TIM3_Init+0x94>)
 8000c4c:	f001 fd04 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c56:	f7ff fcfa 	bl	800064e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000120 	.word	0x20000120
 8000c68:	40000400 	.word	0x40000400

08000c6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_TIM4_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000c90:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000cb2:	f001 fac5 	bl	8002240 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cbc:	f7ff fcc7 	bl	800064e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000cce:	f001 fb06 	bl	80022de <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cd8:	f7ff fcb9 	bl	800064e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_TIM4_Init+0x94>)
 8000cea:	f001 fcb5 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f7ff fcab 	bl	800064e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000d8 	.word	0x200000d8
 8000d04:	40000800 	.word	0x40000800

08000d08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d10c      	bne.n	8000d34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d32:	e022      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_TIM_Base_MspInit+0x80>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10c      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
}
 8000d56:	e010      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_TIM_Base_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10b      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_TIM_Base_MspInit+0x7c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40000400 	.word	0x40000400
 8000d8c:	40000800 	.word	0x40000800

08000d90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART1_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f001 fca4 	bl	8002714 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f7ff fc3c 	bl	800064e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001f4 	.word	0x200001f4
 8000de0:	40013800 	.word	0x40013800

08000de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0xe8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d15f      	bne.n	8000ec4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <HAL_UART_MspInit+0xf0>)
 8000e4a:	f000 fc43 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0xf0>)
 8000e64:	f000 fc36 	bl	80016d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_UART_MspInit+0xf8>)
 8000e6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e8e:	2220      	movs	r2, #32
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e9a:	f000 f9b7 	bl	800120c <HAL_DMA_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ea4:	f7ff fbd3 	bl	800064e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f000 f970 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ebe:	2025      	movs	r0, #37	; 0x25
 8000ec0:	f000 f989 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	200001b0 	.word	0x200001b0
 8000edc:	40020058 	.word	0x40020058

08000ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ee0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ee2:	e003      	b.n	8000eec <LoopCopyDataInit>

08000ee4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ee6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ee8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eea:	3104      	adds	r1, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ef0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ef4:	d3f6      	bcc.n	8000ee4 <CopyDataInit>
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ef8:	e002      	b.n	8000f00 <LoopFillZerobss>

08000efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000efc:	f842 3b04 	str.w	r3, [r2], #4

08000f00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f04:	d3f9      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f06:	f7ff fe11 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f002 f833 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fb23 	bl	8000558 <main>
  bx lr
 8000f12:	4770      	bx	lr
  ldr r3, =_sidata
 8000f14:	08003038 	.word	0x08003038
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f24:	20000238 	.word	0x20000238

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f923 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fd82 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f93b 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f903 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000234 	.word	0x20000234

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000234 	.word	0x20000234

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4906      	ldr	r1, [pc, #24]	; (8001088 <__NVIC_EnableIRQ+0x34>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff90 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff2d 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff42 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff90 	bl	80010e0 <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5f 	bl	800108c <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff35 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e043      	b.n	80012aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_DMA_Init+0xa8>)
 800122a:	4413      	add	r3, r2
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_DMA_Init+0xac>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_DMA_Init+0xb0>)
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	bffdfff8 	.word	0xbffdfff8
 80012b8:	cccccccd 	.word	0xcccccccd
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Start_IT+0x20>
 80012dc:	2302      	movs	r3, #2
 80012de:	e04a      	b.n	8001376 <HAL_DMA_Start_IT+0xb6>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d13a      	bne.n	8001368 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f9ae 	bl	8001678 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 020e 	orr.w	r2, r2, #14
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e00f      	b.n	8001356 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0204 	bic.w	r2, r2, #4
 8001344:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 020a 	orr.w	r2, r2, #10
 8001354:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0201 	orr.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e005      	b.n	8001374 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001370:	2302      	movs	r3, #2
 8001372:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001374:	7dfb      	ldrb	r3, [r7, #23]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001392:	2b02      	cmp	r3, #2
 8001394:	d005      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2204      	movs	r2, #4
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e051      	b.n	8001446 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 020e 	bic.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_DMA_Abort_IT+0xd0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d029      	beq.n	8001420 <HAL_DMA_Abort_IT+0xa0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	; (8001454 <HAL_DMA_Abort_IT+0xd4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d022      	beq.n	800141c <HAL_DMA_Abort_IT+0x9c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_DMA_Abort_IT+0xd8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d01a      	beq.n	8001416 <HAL_DMA_Abort_IT+0x96>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_DMA_Abort_IT+0xdc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_Abort_IT+0x90>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_DMA_Abort_IT+0xe0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00a      	beq.n	800140a <HAL_DMA_Abort_IT+0x8a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_DMA_Abort_IT+0xe4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d102      	bne.n	8001404 <HAL_DMA_Abort_IT+0x84>
 80013fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001402:	e00e      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	e00b      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 800140a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140e:	e008      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	e005      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	e002      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 800141c:	2310      	movs	r3, #16
 800141e:	e000      	b.n	8001422 <HAL_DMA_Abort_IT+0xa2>
 8001420:	2301      	movs	r3, #1
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_DMA_Abort_IT+0xe8>)
 8001424:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	4798      	blx	r3
    } 
  }
  return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020008 	.word	0x40020008
 8001454:	4002001c 	.word	0x4002001c
 8001458:	40020030 	.word	0x40020030
 800145c:	40020044 	.word	0x40020044
 8001460:	40020058 	.word	0x40020058
 8001464:	4002006c 	.word	0x4002006c
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	2204      	movs	r2, #4
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d04f      	beq.n	8001534 <HAL_DMA_IRQHandler+0xc8>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	d04a      	beq.n	8001534 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_DMA_IRQHandler+0x1f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d029      	beq.n	800151a <HAL_DMA_IRQHandler+0xae>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_DMA_IRQHandler+0x1f4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_IRQHandler+0xaa>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_DMA_IRQHandler+0x1f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01a      	beq.n	8001510 <HAL_DMA_IRQHandler+0xa4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a62      	ldr	r2, [pc, #392]	; (8001668 <HAL_DMA_IRQHandler+0x1fc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d012      	beq.n	800150a <HAL_DMA_IRQHandler+0x9e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_DMA_IRQHandler+0x200>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x98>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_DMA_IRQHandler+0x204>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d102      	bne.n	80014fe <HAL_DMA_IRQHandler+0x92>
 80014f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fc:	e00e      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 80014fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001502:	e00b      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001508:	e008      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 800150a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800150e:	e005      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	e002      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	e000      	b.n	800151c <HAL_DMA_IRQHandler+0xb0>
 800151a:	2304      	movs	r3, #4
 800151c:	4a55      	ldr	r2, [pc, #340]	; (8001674 <HAL_DMA_IRQHandler+0x208>)
 800151e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8094 	beq.w	8001652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001532:	e08e      	b.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2202      	movs	r2, #2
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d056      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x186>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d051      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10b      	bne.n	8001574 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020a 	bic.w	r2, r2, #10
 800156a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_DMA_IRQHandler+0x1f0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d029      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x166>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a37      	ldr	r2, [pc, #220]	; (8001660 <HAL_DMA_IRQHandler+0x1f4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d022      	beq.n	80015ce <HAL_DMA_IRQHandler+0x162>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a35      	ldr	r2, [pc, #212]	; (8001664 <HAL_DMA_IRQHandler+0x1f8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x15c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a34      	ldr	r2, [pc, #208]	; (8001668 <HAL_DMA_IRQHandler+0x1fc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d012      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x156>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_DMA_IRQHandler+0x200>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00a      	beq.n	80015bc <HAL_DMA_IRQHandler+0x150>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DMA_IRQHandler+0x204>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d102      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x14a>
 80015b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015b4:	e00e      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ba:	e00b      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c0:	e008      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c6:	e005      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015cc:	e002      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015ce:	2320      	movs	r3, #32
 80015d0:	e000      	b.n	80015d4 <HAL_DMA_IRQHandler+0x168>
 80015d2:	2302      	movs	r3, #2
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_DMA_IRQHandler+0x208>)
 80015d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d034      	beq.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f0:	e02f      	b.n	8001652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2208      	movs	r2, #8
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d028      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d023      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    }
  }
  return;
 8001652:	bf00      	nop
 8001654:	bf00      	nop
}
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020008 	.word	0x40020008
 8001660:	4002001c 	.word	0x4002001c
 8001664:	40020030 	.word	0x40020030
 8001668:	40020044 	.word	0x40020044
 800166c:	40020058 	.word	0x40020058
 8001670:	4002006c 	.word	0x4002006c
 8001674:	40020000 	.word	0x40020000

08001678 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d108      	bne.n	80016b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b6:	e007      	b.n	80016c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e169      	b.n	80019bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8158 	bne.w	80019b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a9a      	ldr	r2, [pc, #616]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d05e      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001710:	4a98      	ldr	r2, [pc, #608]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d875      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001716:	4a98      	ldr	r2, [pc, #608]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d058      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 800171c:	4a96      	ldr	r2, [pc, #600]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d86f      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001722:	4a96      	ldr	r2, [pc, #600]	; (800197c <HAL_GPIO_Init+0x2a8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d052      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001728:	4a94      	ldr	r2, [pc, #592]	; (800197c <HAL_GPIO_Init+0x2a8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d869      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800172e:	4a94      	ldr	r2, [pc, #592]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04c      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001734:	4a92      	ldr	r2, [pc, #584]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d863      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800173a:	4a92      	ldr	r2, [pc, #584]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d046      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d85d      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d82a      	bhi.n	80017a0 <HAL_GPIO_Init+0xcc>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d859      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_GPIO_Init+0x80>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017a9 	.word	0x080017a9
 800175c:	080017bb 	.word	0x080017bb
 8001760:	080017fd 	.word	0x080017fd
 8001764:	08001803 	.word	0x08001803
 8001768:	08001803 	.word	0x08001803
 800176c:	08001803 	.word	0x08001803
 8001770:	08001803 	.word	0x08001803
 8001774:	08001803 	.word	0x08001803
 8001778:	08001803 	.word	0x08001803
 800177c:	08001803 	.word	0x08001803
 8001780:	08001803 	.word	0x08001803
 8001784:	08001803 	.word	0x08001803
 8001788:	08001803 	.word	0x08001803
 800178c:	08001803 	.word	0x08001803
 8001790:	08001803 	.word	0x08001803
 8001794:	08001803 	.word	0x08001803
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	4a79      	ldr	r2, [pc, #484]	; (8001988 <HAL_GPIO_Init+0x2b4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017a6:	e02c      	b.n	8001802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e029      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	3304      	adds	r3, #4
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e024      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	3308      	adds	r3, #8
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e01f      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	330c      	adds	r3, #12
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e01a      	b.n	8001804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017d6:	2304      	movs	r3, #4
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e013      	b.n	8001804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	611a      	str	r2, [r3, #16]
          break;
 80017ee:	e009      	b.n	8001804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	615a      	str	r2, [r3, #20]
          break;
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x130>
          break;
 8001802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d801      	bhi.n	800180e <HAL_GPIO_Init+0x13a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d802      	bhi.n	8001820 <HAL_GPIO_Init+0x14c>
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x152>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3b08      	subs	r3, #8
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b1 	beq.w	80019b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001854:	4b4d      	ldr	r3, [pc, #308]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x2b8>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a40      	ldr	r2, [pc, #256]	; (8001994 <HAL_GPIO_Init+0x2c0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_GPIO_Init+0x2c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3e      	ldr	r2, [pc, #248]	; (800199c <HAL_GPIO_Init+0x2c8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x2cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1e0>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1ee>
 80018c0:	2300      	movs	r3, #0
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d2:	492f      	ldr	r1, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2bc>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	492c      	ldr	r1, [pc, #176]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4928      	ldr	r1, [pc, #160]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	491e      	ldr	r1, [pc, #120]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4918      	ldr	r1, [pc, #96]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4914      	ldr	r1, [pc, #80]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d021      	beq.n	80019a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e021      	b.n	80019b6 <HAL_GPIO_Init+0x2e2>
 8001972:	bf00      	nop
 8001974:	10320000 	.word	0x10320000
 8001978:	10310000 	.word	0x10310000
 800197c:	10220000 	.word	0x10220000
 8001980:	10210000 	.word	0x10210000
 8001984:	10120000 	.word	0x10120000
 8001988:	10110000 	.word	0x10110000
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000
 80019a0:	40011400 	.word	0x40011400
 80019a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4909      	ldr	r1, [pc, #36]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f47f ae8e 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	372c      	adds	r7, #44	; 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e26c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d112      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b89      	ldr	r3, [pc, #548]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e246      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x76>
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b78      	ldr	r3, [pc, #480]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xbc>
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a71      	ldr	r2, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa78 	bl	8000fdc <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa74 	bl	8000fdc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1fa      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe4>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fa64 	bl	8000fdc <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fa60 	bl	8000fdc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1e6      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x10c>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1ba      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa19 	bl	8000fdc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa15 	bl	8000fdc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e19b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9f8 	bl	8000fdc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f9f4 	bl	8000fdc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e17a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03a      	beq.n	8001c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff f9d8 	bl	8000fdc <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff f9d4 	bl	8000fdc <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e15a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fad8 	bl	8002204 <RCC_Delay>
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f9be 	bl	8000fdc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	e00f      	b.n	8001c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff f9ba 	bl	8000fdc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e140      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420000 	.word	0x42420000
 8001c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e9      	bne.n	8001c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a6 	beq.w	8001dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a93      	ldr	r2, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d118      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f97b 	bl	8000fdc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7ff f977 	bl	8000fdc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x312>
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e02d      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	e01c      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x356>
 8001d48:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e00b      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f92b 	bl	8000fdc <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f927 	bl	8000fdc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0ab      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ee      	beq.n	8001d8a <HAL_RCC_OscConfig+0x37e>
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f915 	bl	8000fdc <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff f911 	bl	8000fdc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e095      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8081 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d061      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d146      	bne.n	8001e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f8e5 	bl	8000fdc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f8e1 	bl	8000fdc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e067      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a19      	ldr	r1, [r3, #32]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f8b5 	bl	8000fdc <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff f8b1 	bl	8000fdc <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e037      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x46a>
 8001e94:	e02f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f89e 	bl	8000fdc <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f89a 	bl	8000fdc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e020      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x498>
 8001ec2:	e018      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420060 	.word	0x42420060

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffee 	bl	8000fdc <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe ffea 	bl	8000fdc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff4c 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003010 	.word	0x08003010
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b490      	push	{r4, r7}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e8:	1d3c      	adds	r4, r7, #4
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020f0:	f240 2301 	movw	r3, #513	; 0x201
 80020f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x46>
 800211e:	e02d      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	623b      	str	r3, [r7, #32]
      break;
 8002124:	e02d      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002132:	4413      	add	r3, r2
 8002134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c5b      	lsrs	r3, r3, #17
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002152:	4413      	add	r3, r2
 8002154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	623b      	str	r3, [r7, #32]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	6a3b      	ldr	r3, [r7, #32]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc90      	pop	{r4, r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	08003000 	.word	0x08003000
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	003d0900 	.word	0x003d0900

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff2 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003020 	.word	0x08003020

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08003020 	.word	0x08003020

08002204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <RCC_Delay+0x34>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <RCC_Delay+0x38>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a5b      	lsrs	r3, r3, #9
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002220:	bf00      	nop
  }
  while (Delay --);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <RCC_Delay+0x1c>
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000000 	.word	0x20000000
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e041      	b.n	80022d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fd4e 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 f8f2 	bl	8002468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_ConfigClockSource+0x18>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0b3      	b.n	800245e <HAL_TIM_ConfigClockSource+0x180>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002314:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	d03e      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xd0>
 8002330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002334:	f200 8087 	bhi.w	8002446 <HAL_TIM_ConfigClockSource+0x168>
 8002338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233c:	f000 8085 	beq.w	800244a <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d87f      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 8002346:	2b70      	cmp	r3, #112	; 0x70
 8002348:	d01a      	beq.n	8002380 <HAL_TIM_ConfigClockSource+0xa2>
 800234a:	2b70      	cmp	r3, #112	; 0x70
 800234c:	d87b      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 800234e:	2b60      	cmp	r3, #96	; 0x60
 8002350:	d050      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x116>
 8002352:	2b60      	cmp	r3, #96	; 0x60
 8002354:	d877      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 8002356:	2b50      	cmp	r3, #80	; 0x50
 8002358:	d03c      	beq.n	80023d4 <HAL_TIM_ConfigClockSource+0xf6>
 800235a:	2b50      	cmp	r3, #80	; 0x50
 800235c:	d873      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d058      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0x136>
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d86f      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 8002366:	2b30      	cmp	r3, #48	; 0x30
 8002368:	d064      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x156>
 800236a:	2b30      	cmp	r3, #48	; 0x30
 800236c:	d86b      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 800236e:	2b20      	cmp	r3, #32
 8002370:	d060      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x156>
 8002372:	2b20      	cmp	r3, #32
 8002374:	d867      	bhi.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d05c      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x156>
 800237a:	2b10      	cmp	r3, #16
 800237c:	d05a      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800237e:	e062      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f000 f943 	bl	800261a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]
      break;
 80023ac:	e04e      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 f92c 	bl	800261a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d0:	609a      	str	r2, [r3, #8]
      break;
 80023d2:	e03b      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f000 f8a3 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2150      	movs	r1, #80	; 0x50
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f8fa 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 80023f2:	e02b      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	461a      	mov	r2, r3
 8002402:	f000 f8c1 	bl	8002588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2160      	movs	r1, #96	; 0x60
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f8ea 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 8002412:	e01b      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	461a      	mov	r2, r3
 8002422:	f000 f883 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f8da 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 8002432:	e00b      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 f8d1 	bl	80025e6 <TIM_ITRx_SetConfig>
        break;
 8002444:	e002      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800244a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <TIM_Base_SetConfig+0xb8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00b      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a26      	ldr	r2, [pc, #152]	; (8002524 <TIM_Base_SetConfig+0xbc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <TIM_Base_SetConfig+0xc0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <TIM_Base_SetConfig+0xb8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a19      	ldr	r2, [pc, #100]	; (8002524 <TIM_Base_SetConfig+0xbc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <TIM_Base_SetConfig+0xc0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <TIM_Base_SetConfig+0xb8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d103      	bne.n	8002510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	615a      	str	r2, [r3, #20]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800

0800252c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0201 	bic.w	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 030a 	bic.w	r3, r3, #10
 8002568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	621a      	str	r2, [r3, #32]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f023 0210 	bic.w	r2, r3, #16
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	031b      	lsls	r3, r3, #12
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	621a      	str	r2, [r3, #32]
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	f043 0307 	orr.w	r3, r3, #7
 8002608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800266c:	2302      	movs	r3, #2
 800266e:	e046      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d009      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a10      	ldr	r2, [pc, #64]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800

08002714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e03f      	b.n	80027a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fb52 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fb7d 	bl	8002e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800276c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800278c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d166      	bne.n	8002898 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_UART_Receive_DMA+0x26>
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e05f      	b.n	800289a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_UART_Receive_DMA+0x38>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e058      	b.n	800289a <HAL_UART_Receive_DMA+0xea>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2222      	movs	r2, #34	; 0x22
 8002806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_UART_Receive_DMA+0xf4>)
 8002810:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_UART_Receive_DMA+0xf8>)
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_UART_Receive_DMA+0xfc>)
 8002820:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3304      	adds	r3, #4
 800283a:	4619      	mov	r1, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f7fe fd3d 	bl	80012c0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002872:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08002ae7 	.word	0x08002ae7
 80028a8:	08002b4f 	.word	0x08002b4f
 80028ac:	08002b6b 	.word	0x08002b6b

080028b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_UART_IRQHandler+0x52>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa2c 	bl	8002d58 <UART_Receive_IT>
      return;
 8002900:	e0d0      	b.n	8002aa4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80b0 	beq.w	8002a6a <HAL_UART_IRQHandler+0x1ba>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_UART_IRQHandler+0x70>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a5 	beq.w	8002a6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_UART_IRQHandler+0x90>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_UART_IRQHandler+0xb0>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	f043 0202 	orr.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_UART_IRQHandler+0xd0>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00f      	beq.n	80029aa <HAL_UART_IRQHandler+0xfa>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_UART_IRQHandler+0xee>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	f043 0208 	orr.w	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d077      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_UART_IRQHandler+0x11c>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9c6 	bl	8002d58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_UART_IRQHandler+0x144>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d031      	beq.n	8002a58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f917 	bl	8002c28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_UART_IRQHandler+0x1fc>)
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fca7 	bl	8001380 <HAL_DMA_Abort_IT>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a42:	4610      	mov	r0, r2
 8002a44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a46:	e00e      	b.n	8002a66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f843 	bl	8002ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4e:	e00a      	b.n	8002a66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f83f 	bl	8002ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a56:	e006      	b.n	8002a66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f83b 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a64:	e01d      	b.n	8002aa2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a66:	bf00      	nop
    return;
 8002a68:	e01b      	b.n	8002aa2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_UART_IRQHandler+0x1d6>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f903 	bl	8002c8a <UART_Transmit_IT>
    return;
 8002a84:	e00e      	b.n	8002aa4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x1f4>
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f944 	bl	8002d28 <UART_EndTransmit_IT>
    return;
 8002aa0:	e000      	b.n	8002aa4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002aa2:	bf00      	nop
  }
}
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08002c63 	.word	0x08002c63

08002ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11e      	bne.n	8002b40 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b16:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b36:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7fd fcf5 	bl	8000530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff ffb0 	bl	8002ac2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b21      	cmp	r3, #33	; 0x21
 8002b9c:	d108      	bne.n	8002bb0 <UART_DMAError+0x46>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002baa:	68b8      	ldr	r0, [r7, #8]
 8002bac:	f000 f827 	bl	8002bfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b22      	cmp	r3, #34	; 0x22
 8002bd0:	d108      	bne.n	8002be4 <UART_DMAError+0x7a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bde:	68b8      	ldr	r0, [r7, #8]
 8002be0:	f000 f822 	bl	8002c28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	f043 0210 	orr.w	r2, r3, #16
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f7ff ff6f 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c14:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff ff29 	bl	8002ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b21      	cmp	r3, #33	; 0x21
 8002c9c:	d13e      	bne.n	8002d1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d114      	bne.n	8002cd2 <UART_Transmit_IT+0x48>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d110      	bne.n	8002cd2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	621a      	str	r2, [r3, #32]
 8002cd0:	e008      	b.n	8002ce4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	1c59      	adds	r1, r3, #1
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6211      	str	r1, [r2, #32]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff feb1 	bl	8002ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b22      	cmp	r3, #34	; 0x22
 8002d6a:	d170      	bne.n	8002e4e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d117      	bne.n	8002da6 <UART_Receive_IT+0x4e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d113      	bne.n	8002da6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e026      	b.n	8002df4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d007      	beq.n	8002dca <UART_Receive_IT+0x72>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <UART_Receive_IT+0x80>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e008      	b.n	8002dea <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4619      	mov	r1, r3
 8002e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d120      	bne.n	8002e4a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0220 	bic.w	r2, r2, #32
 8002e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fd fb75 	bl	8000530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e002      	b.n	8002e50 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e92:	f023 030c 	bic.w	r3, r3, #12
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <UART_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ec0:	f7ff f98c 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f7ff f974 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <UART_SetConfig+0x118>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	0119      	lsls	r1, r3, #4
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <UART_SetConfig+0x118>)
 8002f06:	fba3 0302 	umull	r0, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2064      	movs	r0, #100	; 0x64
 8002f0e:	fb00 f303 	mul.w	r3, r0, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	3332      	adds	r3, #50	; 0x32
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <UART_SetConfig+0x118>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f24:	4419      	add	r1, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <UART_SetConfig+0x118>)
 8002f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2064      	movs	r0, #100	; 0x64
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	440a      	add	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	51eb851f 	.word	0x51eb851f

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2600      	movs	r6, #0
 8002f78:	4d0c      	ldr	r5, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	f000 f830 	bl	8002fe8 <_init>
 8002f88:	2600      	movs	r6, #0
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003028 	.word	0x08003028
 8002fb0:	08003028 	.word	0x08003028
 8002fb4:	08003028 	.word	0x08003028
 8002fb8:	08003030 	.word	0x08003030

08002fbc <memcpy>:
 8002fbc:	440a      	add	r2, r1
 8002fbe:	4291      	cmp	r1, r2
 8002fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fc4:	d100      	bne.n	8002fc8 <memcpy+0xc>
 8002fc6:	4770      	bx	lr
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fce:	4291      	cmp	r1, r2
 8002fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fd4:	d1f9      	bne.n	8002fca <memcpy+0xe>
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <memset>:
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4402      	add	r2, r0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <memset+0xa>
 8002fe0:	4770      	bx	lr
 8002fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe6:	e7f9      	b.n	8002fdc <memset+0x4>

08002fe8 <_init>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr

08002ff4 <_fini>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr
