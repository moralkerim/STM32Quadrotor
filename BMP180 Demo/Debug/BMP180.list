
BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004638  08004638  00014638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004698  08004698  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004698  08004698  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004698  08004698  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08004710  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004710  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c8c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f5  00000000  00000000  00026d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00028120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00028808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018485  00000000  00000000  00028e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a95  00000000  00000000  000412f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822e2  00000000  00000000  00049d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000cc0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004620 	.word	0x08004620

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004620 	.word	0x08004620

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80010ca:	2332      	movs	r3, #50	; 0x32
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	22d0      	movs	r2, #208	; 0xd0
 80010da:	21ef      	movs	r1, #239	; 0xef
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <read_chip_id+0x3c>)
 80010de:	f001 f9c1 	bl	8002464 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b55      	cmp	r3, #85	; 0x55
 80010e6:	d001      	beq.n	80010ec <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000008c 	.word	0x2000008c

080010fc <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d81a      	bhi.n	8001148 <set_oss+0x4c>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <set_oss+0x1c>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001129 	.word	0x08001129
 800111c:	08001131 	.word	0x08001131
 8001120:	08001139 	.word	0x08001139
 8001124:	08001141 	.word	0x08001141
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2205      	movs	r2, #5
 800112c:	705a      	strb	r2, [r3, #1]
			break;
 800112e:	e00f      	b.n	8001150 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2208      	movs	r2, #8
 8001134:	705a      	strb	r2, [r3, #1]
			break;
 8001136:	e00b      	b.n	8001150 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	220e      	movs	r2, #14
 800113c:	705a      	strb	r2, [r3, #1]
			break;
 800113e:	e007      	b.n	8001150 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	221a      	movs	r2, #26
 8001144:	705a      	strb	r2, [r3, #1]
			break;
 8001146:	e003      	b.n	8001150 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2208      	movs	r2, #8
 800114c:	705a      	strb	r2, [r3, #1]
			break;
 800114e:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001160:	2332      	movs	r3, #50	; 0x32
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2302      	movs	r3, #2
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	22f4      	movs	r2, #244	; 0xf4
 8001172:	21ee      	movs	r1, #238	; 0xee
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <set_oss+0x88>)
 8001176:	f001 f87b 	bl	8002270 <HAL_I2C_Mem_Write>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000008c 	.word	0x2000008c

08001188 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80011b6:	2332      	movs	r3, #50	; 0x32
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2316      	movs	r3, #22
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	22aa      	movs	r2, #170	; 0xaa
 80011c8:	21ef      	movs	r1, #239	; 0xef
 80011ca:	4827      	ldr	r0, [pc, #156]	; (8001268 <read_calib_data+0xe0>)
 80011cc:	f001 f94a 	bl	8002464 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011d6:	e03c      	b.n	8001252 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80011d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	3328      	adds	r3, #40	; 0x28
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b219      	sxth	r1, r3
 80011ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ee:	3328      	adds	r3, #40	; 0x28
 80011f0:	443b      	add	r3, r7
 80011f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4403      	add	r3, r0
 8001202:	430a      	orrs	r2, r1
 8001204:	b212      	sxth	r2, r2
 8001206:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2da      	uxtb	r2, r3
 8001220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	440b      	add	r3, r1
 800122a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001242:	2302      	movs	r3, #2
 8001244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	3301      	adds	r3, #1
 800124e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001256:	2b0b      	cmp	r3, #11
 8001258:	d9be      	bls.n	80011d8 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800125e:	4618      	mov	r0, r3
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000008c 	.word	0x2000008c

0800126c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f003 f9c8 	bl	8004610 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001280:	687c      	ldr	r4, [r7, #4]
 8001282:	f7ff ff1b 	bl	80010bc <read_chip_id>
 8001286:	4603      	mov	r3, r0
 8001288:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	687c      	ldr	r4, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff79 	bl	8001188 <read_calib_data>
 8001296:	4603      	mov	r3, r0
 8001298:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, ULTRA_HIGH_RESOLUTION);       // set oversampling settings
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3338      	adds	r3, #56	; 0x38
 80012a0:	2103      	movs	r1, #3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff2a 	bl	80010fc <set_oss>
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}

080012b0 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 80012b6:	232e      	movs	r3, #46	; 0x2e
 80012b8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012ba:	2332      	movs	r3, #50	; 0x32
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	22f4      	movs	r2, #244	; 0xf4
 80012ca:	21ee      	movs	r1, #238	; 0xee
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <get_ut+0x50>)
 80012ce:	f000 ffcf 	bl	8002270 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 80012d2:	2005      	movs	r0, #5
 80012d4:	f000 fbfc 	bl	8001ad0 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80012d8:	2332      	movs	r3, #50	; 0x32
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2302      	movs	r3, #2
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	22f6      	movs	r2, #246	; 0xf6
 80012e8:	21ef      	movs	r1, #239	; 0xef
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <get_ut+0x50>)
 80012ec:	f001 f8ba 	bl	8002464 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	797a      	ldrb	r2, [r7, #5]
 80012f6:	4313      	orrs	r3, r2
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000008c 	.word	0x2000008c

08001304 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fea6 	bl	8001070 <__aeabi_f2iz>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	895b      	ldrh	r3, [r3, #10]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	8912      	ldrh	r2, [r2, #8]
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	13db      	asrs	r3, r3, #15
 8001336:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800133e:	02da      	lsls	r2, r3, #11
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001346:	4619      	mov	r1, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	440b      	add	r3, r1
 800134c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001350:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	441a      	add	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	3308      	adds	r3, #8
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fc69 	bl	8000c3c <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <get_temp+0xa4>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fcb8 	bl	8000ce4 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <get_temp+0xa8>)
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fe5a 	bl	8001034 <__aeabi_fcmple>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <get_temp+0x90>
 8001386:	490a      	ldr	r1, [pc, #40]	; (80013b0 <get_temp+0xac>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fe5d 	bl	8001048 <__aeabi_fcmpge>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	3dcccccd 	.word	0x3dcccccd
 80013ac:	c2200000 	.word	0xc2200000
 80013b0:	42aa0000 	.word	0x42aa0000

080013b4 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <get_up+0x7c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	813b      	strh	r3, [r7, #8]
 80013c2:	2300      	movs	r3, #0
 80013c4:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 80013ca:	2334      	movs	r3, #52	; 0x34
 80013cc:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80013ce:	2332      	movs	r3, #50	; 0x32
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	22f4      	movs	r2, #244	; 0xf4
 80013e0:	21ee      	movs	r1, #238	; 0xee
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <get_up+0x80>)
 80013e4:	f000 ff44 	bl	8002270 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fb70 	bl	8001ad0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80013f0:	2332      	movs	r3, #50	; 0x32
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2303      	movs	r3, #3
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	22f6      	movs	r2, #246	; 0xf6
 8001402:	21ef      	movs	r1, #239	; 0xef
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <get_up+0x80>)
 8001406:	f001 f82d 	bl	8002464 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800140a:	7a3b      	ldrb	r3, [r7, #8]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	7a7b      	ldrb	r3, [r7, #9]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4413      	add	r3, r2
 8001414:	7aba      	ldrb	r2, [r7, #10]
 8001416:	441a      	add	r2, r3
 8001418:	793b      	ldrb	r3, [r7, #4]
 800141a:	f1c3 0308 	rsb	r3, r3, #8
 800141e:	fa42 f303 	asr.w	r3, r2, r3
 8001422:	60fb      	str	r3, [r7, #12]
	return up;
 8001424:	68fb      	ldr	r3, [r7, #12]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	08004638 	.word	0x08004638
 8001434:	2000008c 	.word	0x2000008c

08001438 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001438:	b084      	sub	sp, #16
 800143a:	b480      	push	{r7}
 800143c:	b089      	sub	sp, #36	; 0x24
 800143e:	af00      	add	r7, sp, #0
 8001440:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001444:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001452:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001456:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001458:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fb03 f303 	mul.w	r3, r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	da01      	bge.n	800146c <get_pressure+0x34>
 8001468:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800146c:	131b      	asrs	r3, r3, #12
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	da01      	bge.n	800147a <get_pressure+0x42>
 8001476:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800147a:	12db      	asrs	r3, r3, #11
 800147c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800147e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001482:	461a      	mov	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	da01      	bge.n	8001492 <get_pressure+0x5a>
 800148e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001492:	12db      	asrs	r3, r3, #11
 8001494:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800149e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80014ac:	4093      	lsls	r3, r2
 80014ae:	3302      	adds	r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da00      	bge.n	80014b6 <get_pressure+0x7e>
 80014b4:	3303      	adds	r3, #3
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80014ba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014be:	461a      	mov	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da02      	bge.n	80014d0 <get_pressure+0x98>
 80014ca:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80014ce:	331f      	adds	r3, #31
 80014d0:	135b      	asrs	r3, r3, #13
 80014d2:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80014d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80014d8:	461a      	mov	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fb03 f303 	mul.w	r3, r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da01      	bge.n	80014e8 <get_pressure+0xb0>
 80014e4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014e8:	131b      	asrs	r3, r3, #12
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da02      	bge.n	80014f8 <get_pressure+0xc0>
 80014f2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014f6:	33ff      	adds	r3, #255	; 0xff
 80014f8:	141b      	asrs	r3, r3, #16
 80014fa:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	3302      	adds	r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <get_pressure+0xd2>
 8001508:	3303      	adds	r3, #3
 800150a:	109b      	asrs	r3, r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800150e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001510:	461a      	mov	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	0bdb      	lsrs	r3, r3, #15
 800151e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800152c:	4611      	mov	r1, r2
 800152e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001532:	410a      	asrs	r2, r1
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db06      	blt.n	800154e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	005a      	lsls	r2, r3, #1
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	e005      	b.n	800155a <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da00      	bge.n	8001562 <get_pressure+0x12a>
 8001560:	33ff      	adds	r3, #255	; 0xff
 8001562:	121b      	asrs	r3, r3, #8
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da00      	bge.n	800156e <get_pressure+0x136>
 800156c:	33ff      	adds	r3, #255	; 0xff
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f640 32de 	movw	r2, #3038	; 0xbde
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <get_pressure+0x152>
 8001584:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001588:	33ff      	adds	r3, #255	; 0xff
 800158a:	141b      	asrs	r3, r3, #16
 800158c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <get_pressure+0x194>)
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	da02      	bge.n	80015a0 <get_pressure+0x168>
 800159a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800159e:	33ff      	adds	r3, #255	; 0xff
 80015a0:	141b      	asrs	r3, r3, #16
 80015a2:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <get_pressure+0x17c>
 80015b2:	330f      	adds	r3, #15
 80015b4:	111b      	asrs	r3, r3, #4
 80015b6:	461a      	mov	r2, r3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	61fb      	str	r3, [r7, #28]

	return p;
 80015be:	69fb      	ldr	r3, [r7, #28]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	b004      	add	sp, #16
 80015ca:	4770      	bx	lr
 80015cc:	ffffe343 	.word	0xffffe343

080015d0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb2a 	bl	8000c3c <__aeabi_i2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4923      	ldr	r1, [pc, #140]	; (8001678 <get_altitude+0xa8>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fc2d 	bl	8000e4c <__aeabi_fdiv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff0f 	bl	8000418 <__aeabi_f2d>
 80015fa:	a31b      	add	r3, pc, #108	; (adr r3, 8001668 <get_altitude+0x98>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f002 f8f8 	bl	80037f4 <pow>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	491b      	ldr	r1, [pc, #108]	; (800167c <get_altitude+0xac>)
 800160e:	f7fe fda3 	bl	8000158 <__aeabi_dsub>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	a315      	add	r3, pc, #84	; (adr r3, 8001670 <get_altitude+0xa0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff f9fc 	bl	8000a28 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001634:	4912      	ldr	r1, [pc, #72]	; (8001680 <get_altitude+0xb0>)
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fcfc 	bl	8001034 <__aeabi_fcmple>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <get_altitude+0x80>
 8001642:	4910      	ldr	r1, [pc, #64]	; (8001684 <get_altitude+0xb4>)
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff fcff 	bl	8001048 <__aeabi_fcmpge>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2205      	movs	r2, #5
 8001654:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	ccd9456c 	.word	0xccd9456c
 800166c:	3fc85b95 	.word	0x3fc85b95
 8001670:	00000000 	.word	0x00000000
 8001674:	40e5a540 	.word	0x40e5a540
 8001678:	47c5e680 	.word	0x47c5e680
 800167c:	3ff00000 	.word	0x3ff00000
 8001680:	c3fa0000 	.word	0xc3fa0000
 8001684:	460ca000 	.word	0x460ca000

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b08d      	sub	sp, #52	; 0x34
 800168c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f000 f9bd 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f83f 	bl	8001714 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f000 f8c1 	bl	800181c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800169a:	f000 f88b 	bl	80017b4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  bmp_init(&bmp);
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <main+0x84>)
 80016a0:	f7ff fde4 	bl	800126c <bmp_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bmp.uncomp.temp = get_ut ();
 80016a4:	f7ff fe04 	bl	80012b0 <get_ut>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fac6 	bl	8000c3c <__aeabi_i2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <main+0x84>)
 80016b4:	6193      	str	r3, [r2, #24]
	  bmp.data.temp = get_temp (&bmp);
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <main+0x84>)
 80016b8:	f7ff fe24 	bl	8001304 <get_temp>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <main+0x84>)
 80016c0:	6293      	str	r3, [r2, #40]	; 0x28
	  bmp.uncomp.press = get_up (bmp.oss);
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <main+0x84>)
 80016c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016c6:	f7ff fe75 	bl	80013b4 <get_up>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <main+0x84>)
 80016ce:	61d3      	str	r3, [r2, #28]
	  bmp.data.press = get_pressure (bmp);
 80016d0:	4e0e      	ldr	r6, [pc, #56]	; (800170c <main+0x84>)
 80016d2:	466d      	mov	r5, sp
 80016d4:	f106 0410 	add.w	r4, r6, #16
 80016d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016ec:	f7ff fea4 	bl	8001438 <get_pressure>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <main+0x84>)
 80016f4:	62d3      	str	r3, [r2, #44]	; 0x2c
	  bmp.data.altitude = get_altitude (&bmp);
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <main+0x84>)
 80016f8:	f7ff ff6a 	bl	80015d0 <get_altitude>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <main+0x84>)
 8001700:	6353      	str	r3, [r2, #52]	; 0x34

	  alt = bmp.data.altitude;
 8001702:	4b02      	ldr	r3, [pc, #8]	; (800170c <main+0x84>)
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	4a02      	ldr	r2, [pc, #8]	; (8001710 <main+0x88>)
 8001708:	6013      	str	r3, [r2, #0]
	  bmp.uncomp.temp = get_ut ();
 800170a:	e7cb      	b.n	80016a4 <main+0x1c>
 800170c:	200000e0 	.word	0x200000e0
 8001710:	2000011c 	.word	0x2000011c

08001714 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2228      	movs	r2, #40	; 0x28
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f002 ff74 	bl	8004610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001744:	2301      	movs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001752:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fc43 	bl	8002fe8 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001772:	f000 f881 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	2302      	movs	r3, #2
 800177c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2102      	movs	r1, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f001 feab 	bl	80034ec <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80017a6:	f000 f867 	bl	8001878 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3740      	adds	r7, #64	; 0x40
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <_ZL12MX_I2C1_Initv+0x60>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <_ZL12MX_I2C1_Initv+0x64>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <_ZL12MX_I2C1_Initv+0x5c>)
 80017f2:	f000 fbf9 	bl	8001fe8 <HAL_I2C_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001806:	f000 f837 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000008c 	.word	0x2000008c
 8001814:	40005400 	.word	0x40005400
 8001818:	00061a80 	.word	0x00061a80

0800181c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_ZL12MX_GPIO_Initv+0x58>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_MspInit+0x5c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_MspInit+0x5c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_MspInit+0x60>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_MspInit+0x60>)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_I2C_MspInit+0x70>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d123      	bne.n	8001950 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_I2C_MspInit+0x74>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_I2C_MspInit+0x74>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_I2C_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <HAL_I2C_MspInit+0x78>)
 8001934:	f000 f9d4 	bl	8001ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_I2C_MspInit+0x74>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_I2C_MspInit+0x74>)
 800193e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001942:	61d3      	str	r3, [r2, #28]
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_I2C_MspInit+0x74>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010c00 	.word	0x40010c00

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019aa:	f000 f875 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
	...

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	; (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e6:	f7ff ffe4 	bl	80019b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 fded 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fe4b 	bl	8001688 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019fc:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8001a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a04:	20000124 	.word	0x20000124

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f92b 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff ff2c 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f935 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f90b 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000120 	.word	0x20000120

08001abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_GetTick+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000120 	.word	0x20000120

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffe0 	bl	8001abc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff90 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff49 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff5e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffb0 	bl	8001c34 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e169      	b.n	8001fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8158 	bne.w	8001fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d1c:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d875      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d058      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d28:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d86f      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d2e:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d052      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d869      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d3a:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04c      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d40:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d863      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d46:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d046      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d4c:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d85d      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d82a      	bhi.n	8001dac <HAL_GPIO_Init+0xcc>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d859      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_GPIO_Init+0x80>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001e09 	.word	0x08001e09
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001e0f 	.word	0x08001e0f
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e0f 	.word	0x08001e0f
 8001d8c:	08001e0f 	.word	0x08001e0f
 8001d90:	08001e0f 	.word	0x08001e0f
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e0f 	.word	0x08001e0f
 8001da0:	08001e0f 	.word	0x08001e0f
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	4a79      	ldr	r2, [pc, #484]	; (8001f94 <HAL_GPIO_Init+0x2b4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db2:	e02c      	b.n	8001e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e029      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e024      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e01f      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e01a      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	2304      	movs	r3, #4
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e013      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	611a      	str	r2, [r3, #16]
          break;
 8001dfa:	e009      	b.n	8001e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	615a      	str	r2, [r3, #20]
          break;
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          break;
 8001e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d801      	bhi.n	8001e1a <HAL_GPIO_Init+0x13a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_Init+0x13e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d802      	bhi.n	8001e2c <HAL_GPIO_Init+0x14c>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x152>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	210f      	movs	r1, #15
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80b1 	beq.w	8001fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_GPIO_Init+0x2c0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_GPIO_Init+0x2cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1e0>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ede:	492f      	ldr	r1, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	492c      	ldr	r1, [pc, #176]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	491e      	ldr	r1, [pc, #120]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d021      	beq.n	8001fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x2e2>
 8001f7e:	bf00      	nop
 8001f80:	10320000 	.word	0x10320000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	10110000 	.word	0x10110000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ae8e 	bne.w	8001cf4 <HAL_GPIO_Init+0x14>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e12b      	b.n	8002252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fc6a 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800204c:	f001 fba0 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a81      	ldr	r2, [pc, #516]	; (800225c <HAL_I2C_Init+0x274>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d807      	bhi.n	800206c <HAL_I2C_Init+0x84>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a80      	ldr	r2, [pc, #512]	; (8002260 <HAL_I2C_Init+0x278>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e006      	b.n	800207a <HAL_I2C_Init+0x92>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a7d      	ldr	r2, [pc, #500]	; (8002264 <HAL_I2C_Init+0x27c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0e7      	b.n	8002252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a78      	ldr	r2, [pc, #480]	; (8002268 <HAL_I2C_Init+0x280>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_I2C_Init+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d802      	bhi.n	80020bc <HAL_I2C_Init+0xd4>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	e009      	b.n	80020d0 <HAL_I2C_Init+0xe8>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a69      	ldr	r2, [pc, #420]	; (800226c <HAL_I2C_Init+0x284>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	495c      	ldr	r1, [pc, #368]	; (800225c <HAL_I2C_Init+0x274>)
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d819      	bhi.n	8002124 <HAL_I2C_Init+0x13c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e59      	subs	r1, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002104:	400b      	ands	r3, r1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_I2C_Init+0x138>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e59      	subs	r1, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fbb1 f3f3 	udiv	r3, r1, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	e051      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e04f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <HAL_I2C_Init+0x168>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_I2C_Init+0x18e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x196>
 800217a:	2301      	movs	r3, #1
 800217c:	e022      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <HAL_I2C_Init+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e58      	subs	r0, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	440b      	add	r3, r1
 8002194:	fbb0 f3f3 	udiv	r3, r0, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e58      	subs	r0, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	0099      	lsls	r1, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6911      	ldr	r1, [r2, #16]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	430b      	orrs	r3, r1
 8002206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	000186a0 	.word	0x000186a0
 8002260:	001e847f 	.word	0x001e847f
 8002264:	003d08ff 	.word	0x003d08ff
 8002268:	431bde83 	.word	0x431bde83
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	817b      	strh	r3, [r7, #10]
 8002282:	460b      	mov	r3, r1
 8002284:	813b      	strh	r3, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800228a:	f7ff fc17 	bl	8001abc <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	f040 80d9 	bne.w	8002450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2319      	movs	r3, #25
 80022a4:	2201      	movs	r2, #1
 80022a6:	496d      	ldr	r1, [pc, #436]	; (800245c <HAL_I2C_Mem_Write+0x1ec>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fcc1 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0cc      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Mem_Write+0x56>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0c5      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d007      	beq.n	80022ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2221      	movs	r2, #33	; 0x21
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_I2C_Mem_Write+0x1f0>)
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232e:	88f8      	ldrh	r0, [r7, #6]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	8979      	ldrh	r1, [r7, #10]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4603      	mov	r3, r0
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 faf8 	bl	8002934 <I2C_RequestMemoryWrite>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d052      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e081      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fd42 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_I2C_Mem_Write+0x180>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1aa      	bne.n	800234e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fd2e 	bl	8002e5e <I2C_WaitOnBTFFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b04      	cmp	r3, #4
 800240e:	d107      	bne.n	8002420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e016      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000

08002464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	460b      	mov	r3, r1
 8002478:	813b      	strh	r3, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff fb1b 	bl	8001abc <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 8244 	bne.w	800291e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	4982      	ldr	r1, [pc, #520]	; (80026a8 <HAL_I2C_Mem_Read+0x244>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fbc5 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e237      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Read+0x5a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e230      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2222      	movs	r2, #34	; 0x22
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a62      	ldr	r2, [pc, #392]	; (80026ac <HAL_I2C_Mem_Read+0x248>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fa92 	bl	8002a60 <I2C_RequestMemoryRead>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1ec      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e1c0      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11e      	bne.n	80025bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800258e:	b672      	cpsid	i
}
 8002590:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b8:	b662      	cpsie	i
}
 80025ba:	e035      	b.n	8002628 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11e      	bne.n	8002602 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d4:	b672      	cpsid	i
}
 80025d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025fe:	b662      	cpsie	i
}
 8002600:	e012      	b.n	8002628 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002628:	e166      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b03      	cmp	r3, #3
 8002630:	f200 811f 	bhi.w	8002872 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b01      	cmp	r3, #1
 800263a:	d123      	bne.n	8002684 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fc4d 	bl	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e167      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002682:	e139      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b02      	cmp	r3, #2
 800268a:	d152      	bne.n	8002732 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	2200      	movs	r2, #0
 8002694:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_I2C_Mem_Read+0x24c>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 faca 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e13c      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
 80026a6:	bf00      	nop
 80026a8:	00100002 	.word	0x00100002
 80026ac:	ffff0000 	.word	0xffff0000
 80026b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026fa:	b662      	cpsie	i
}
 80026fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002730:	e0e2      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	2200      	movs	r2, #0
 800273a:	497b      	ldr	r1, [pc, #492]	; (8002928 <HAL_I2C_Mem_Read+0x4c4>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa77 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0e9      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800275c:	b672      	cpsid	i
}
 800275e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_I2C_Mem_Read+0x4c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_I2C_Mem_Read+0x4cc>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a1a      	lsrs	r2, r3, #8
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00da      	lsls	r2, r3, #3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d118      	bne.n	80027ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
}
 80027dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e09a      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d1d9      	bne.n	80027ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800283a:	b662      	cpsie	i
}
 800283c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002870:	e042      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fb32 	bl	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e04c      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d118      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f ae94 	bne.w	800262a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00010004 	.word	0x00010004
 800292c:	20000000 	.word	0x20000000
 8002930:	14f8b589 	.word	0x14f8b589

08002934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2200      	movs	r2, #0
 8002966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f960 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d103      	bne.n	800298e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e05f      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	492d      	ldr	r1, [pc, #180]	; (8002a5c <I2C_RequestMemoryWrite+0x128>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f998 	bl	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e04c      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fa02 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d107      	bne.n	80029f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02b      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a00:	893b      	ldrh	r3, [r7, #8]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e021      	b.n	8002a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f9dc 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e005      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8c2 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d103      	bne.n	8002aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0aa      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	4952      	ldr	r1, [pc, #328]	; (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f8fa 	bl	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e097      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f964 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e076      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e021      	b.n	8002b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f93e 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e050      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	6a39      	ldr	r1, [r7, #32]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f923 	bl	8002ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d107      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e035      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f82b 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bee:	d103      	bne.n	8002bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e013      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bfc:	897b      	ldrh	r3, [r7, #10]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f863 	bl	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	e025      	b.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d021      	beq.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe ff37 	bl	8001abc <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e023      	b.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10d      	bne.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	e00c      	b.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d0b6      	beq.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cec:	e051      	b.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d123      	bne.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f043 0204 	orr.w	r2, r3, #4
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e046      	b.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d021      	beq.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe feb5 	bl	8001abc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e020      	b.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10c      	bne.n	8002db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	e00b      	b.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d18d      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de8:	e02d      	b.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8ce 	bl	8002f8c <I2C_IsAcknowledgeFailed>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02d      	b.n	8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d021      	beq.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe fe5b 	bl	8001abc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e007      	b.n	8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d1ca      	bne.n	8002dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e6a:	e02d      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f88d 	bl	8002f8c <I2C_IsAcknowledgeFailed>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02d      	b.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d021      	beq.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e84:	f7fe fe1a 	bl	8001abc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e007      	b.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d1ca      	bne.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eec:	e042      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d119      	bne.n	8002f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0210 	mvn.w	r2, #16
 8002f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e029      	b.n	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f30:	f7fe fdc4 	bl	8001abc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d1b5      	bne.n	8002eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d11b      	bne.n	8002fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e272      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8087 	beq.w	8003116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003008:	4b92      	ldr	r3, [pc, #584]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b04      	cmp	r3, #4
 8003012:	d00c      	beq.n	800302e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003014:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d112      	bne.n	8003046 <HAL_RCC_OscConfig+0x5e>
 8003020:	4b8c      	ldr	r3, [pc, #560]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d10b      	bne.n	8003046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302e:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06c      	beq.n	8003114 <HAL_RCC_OscConfig+0x12c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d168      	bne.n	8003114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e24c      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x76>
 8003050:	4b80      	ldr	r3, [pc, #512]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a7f      	ldr	r2, [pc, #508]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e02e      	b.n	80030bc <HAL_RCC_OscConfig+0xd4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x98>
 8003066:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7a      	ldr	r2, [pc, #488]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b78      	ldr	r3, [pc, #480]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a77      	ldr	r2, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xd4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0xbc>
 800308a:	4b72      	ldr	r3, [pc, #456]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a71      	ldr	r2, [pc, #452]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6f      	ldr	r3, [pc, #444]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6e      	ldr	r2, [pc, #440]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xd4>
 80030a4:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6a      	ldr	r2, [pc, #424]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a67      	ldr	r2, [pc, #412]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fcfa 	bl	8001abc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fcf6 	bl	8001abc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e200      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xe4>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fce6 	bl	8001abc <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fce2 	bl	8001abc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1ec      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x10c>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003122:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800312e:	4b49      	ldr	r3, [pc, #292]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x18c>
 800313a:	4b46      	ldr	r3, [pc, #280]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x176>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c0      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4939      	ldr	r1, [pc, #228]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fc9b 	bl	8001abc <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe fc97 	bl	8001abc <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a1      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4927      	ldr	r1, [pc, #156]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCC_OscConfig+0x270>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fc7a 	bl	8001abc <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe fc76 	bl	8001abc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e180      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03a      	beq.n	800326c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d019      	beq.n	8003232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_RCC_OscConfig+0x274>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe fc5a 	bl	8001abc <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe fc56 	bl	8001abc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e160      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCC_OscConfig+0x26c>)
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800322a:	2001      	movs	r0, #1
 800322c:	f000 fac4 	bl	80037b8 <RCC_Delay>
 8003230:	e01c      	b.n	800326c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_RCC_OscConfig+0x274>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fe fc40 	bl	8001abc <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323e:	e00f      	b.n	8003260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe fc3c 	bl	8001abc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d908      	bls.n	8003260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e146      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	42420000 	.word	0x42420000
 800325c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	4b92      	ldr	r3, [pc, #584]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e9      	bne.n	8003240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a6 	beq.w	80033c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b8b      	ldr	r3, [pc, #556]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b88      	ldr	r3, [pc, #544]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4a87      	ldr	r2, [pc, #540]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	61d3      	str	r3, [r2, #28]
 8003296:	4b85      	ldr	r3, [pc, #532]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <HAL_RCC_OscConfig+0x4c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b7f      	ldr	r3, [pc, #508]	; (80034b0 <HAL_RCC_OscConfig+0x4c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7e      	ldr	r2, [pc, #504]	; (80034b0 <HAL_RCC_OscConfig+0x4c8>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fe fbfd 	bl	8001abc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7fe fbf9 	bl	8001abc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e103      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <HAL_RCC_OscConfig+0x4c8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x312>
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	4a6e      	ldr	r2, [pc, #440]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6213      	str	r3, [r2, #32]
 80032f8:	e02d      	b.n	8003356 <HAL_RCC_OscConfig+0x36e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x334>
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a66      	ldr	r2, [pc, #408]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	e01c      	b.n	8003356 <HAL_RCC_OscConfig+0x36e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d10c      	bne.n	800333e <HAL_RCC_OscConfig+0x356>
 8003324:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6213      	str	r3, [r2, #32]
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a5d      	ldr	r2, [pc, #372]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e00b      	b.n	8003356 <HAL_RCC_OscConfig+0x36e>
 800333e:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a5a      	ldr	r2, [pc, #360]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6213      	str	r3, [r2, #32]
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d015      	beq.n	800338a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe fbad 	bl	8001abc <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe fba9 	bl	8001abc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0b1      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RCC_OscConfig+0x37e>
 8003388:	e014      	b.n	80033b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe fb97 	bl	8001abc <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fb93 	bl	8001abc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e09b      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	4b40      	ldr	r3, [pc, #256]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ee      	bne.n	8003392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d061      	beq.n	80034a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d146      	bne.n	8003472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fb67 	bl	8001abc <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fb63 	bl	8001abc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e06d      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d108      	bne.n	800342c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4921      	ldr	r1, [pc, #132]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342c:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a19      	ldr	r1, [r3, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	430b      	orrs	r3, r1
 800343e:	491b      	ldr	r1, [pc, #108]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe fb37 	bl	8001abc <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003452:	f7fe fb33 	bl	8001abc <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e03d      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x46a>
 8003470:	e035      	b.n	80034de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fb20 	bl	8001abc <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe fb1c 	bl	8001abc <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e026      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_OscConfig+0x4c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x498>
 800349e:	e01e      	b.n	80034de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e019      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40007000 	.word	0x40007000
 80034b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x500>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d0      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 0207 	bic.w	r2, r3, #7
 8003516:	4965      	ldr	r1, [pc, #404]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800356a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d040      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e073      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4936      	ldr	r1, [pc, #216]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fe fa6e 	bl	8001abc <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fe fa6a 	bl	8001abc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e053      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d210      	bcs.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 0207 	bic.w	r2, r3, #7
 8003622:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4602      	mov	r2, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	490a      	ldr	r1, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	5ccb      	ldrb	r3, [r1, r3]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f9cc 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	0800464c 	.word	0x0800464c
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004

080036c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b490      	push	{r4, r7}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_GetSysClockFreq+0xac>)
 80036c8:	1d3c      	adds	r4, r7, #4
 80036ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036d0:	f240 2301 	movw	r3, #513	; 0x201
 80036d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d002      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x40>
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x46>
 80036fe:	e02b      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003702:	623b      	str	r3, [r7, #32]
      break;
 8003704:	e02b      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3328      	adds	r3, #40	; 0x28
 8003710:	443b      	add	r3, r7
 8003712:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003716:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0c5b      	lsrs	r3, r3, #17
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	3328      	adds	r3, #40	; 0x28
 800372e:	443b      	add	r3, r7
 8003730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	e004      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	623b      	str	r3, [r7, #32]
      break;
 8003756:	e002      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800375a:	623b      	str	r3, [r7, #32]
      break;
 800375c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375e:	6a3b      	ldr	r3, [r7, #32]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc90      	pop	{r4, r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	0800463c 	.word	0x0800463c
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	003d0900 	.word	0x003d0900

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_RCC_GetHCLKFreq+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000000 	.word	0x20000000

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003794:	f7ff fff2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800465c 	.word	0x0800465c

080037b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <RCC_Delay+0x34>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <RCC_Delay+0x38>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a5b      	lsrs	r3, r3, #9
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037d4:	bf00      	nop
  }
  while (Delay --);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e5a      	subs	r2, r3, #1
 80037da:	60fa      	str	r2, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f9      	bne.n	80037d4 <RCC_Delay+0x1c>
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000000 	.word	0x20000000
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <pow>:
 80037f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f8:	4614      	mov	r4, r2
 80037fa:	461d      	mov	r5, r3
 80037fc:	4680      	mov	r8, r0
 80037fe:	4689      	mov	r9, r1
 8003800:	f000 f862 	bl	80038c8 <__ieee754_pow>
 8003804:	4622      	mov	r2, r4
 8003806:	4606      	mov	r6, r0
 8003808:	460f      	mov	r7, r1
 800380a:	462b      	mov	r3, r5
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fd f8f4 	bl	80009fc <__aeabi_dcmpun>
 8003814:	bbc8      	cbnz	r0, 800388a <pow+0x96>
 8003816:	2200      	movs	r2, #0
 8003818:	2300      	movs	r3, #0
 800381a:	4640      	mov	r0, r8
 800381c:	4649      	mov	r1, r9
 800381e:	f7fd f8bb 	bl	8000998 <__aeabi_dcmpeq>
 8003822:	b1b8      	cbz	r0, 8003854 <pow+0x60>
 8003824:	2200      	movs	r2, #0
 8003826:	2300      	movs	r3, #0
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fd f8b4 	bl	8000998 <__aeabi_dcmpeq>
 8003830:	2800      	cmp	r0, #0
 8003832:	d141      	bne.n	80038b8 <pow+0xc4>
 8003834:	4620      	mov	r0, r4
 8003836:	4629      	mov	r1, r5
 8003838:	f000 fe3b 	bl	80044b2 <finite>
 800383c:	b328      	cbz	r0, 800388a <pow+0x96>
 800383e:	2200      	movs	r2, #0
 8003840:	2300      	movs	r3, #0
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fd f8b1 	bl	80009ac <__aeabi_dcmplt>
 800384a:	b1f0      	cbz	r0, 800388a <pow+0x96>
 800384c:	f000 feb6 	bl	80045bc <__errno>
 8003850:	2322      	movs	r3, #34	; 0x22
 8003852:	e019      	b.n	8003888 <pow+0x94>
 8003854:	4630      	mov	r0, r6
 8003856:	4639      	mov	r1, r7
 8003858:	f000 fe2b 	bl	80044b2 <finite>
 800385c:	b9c8      	cbnz	r0, 8003892 <pow+0x9e>
 800385e:	4640      	mov	r0, r8
 8003860:	4649      	mov	r1, r9
 8003862:	f000 fe26 	bl	80044b2 <finite>
 8003866:	b1a0      	cbz	r0, 8003892 <pow+0x9e>
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f000 fe21 	bl	80044b2 <finite>
 8003870:	b178      	cbz	r0, 8003892 <pow+0x9e>
 8003872:	4632      	mov	r2, r6
 8003874:	463b      	mov	r3, r7
 8003876:	4630      	mov	r0, r6
 8003878:	4639      	mov	r1, r7
 800387a:	f7fd f8bf 	bl	80009fc <__aeabi_dcmpun>
 800387e:	2800      	cmp	r0, #0
 8003880:	d0e4      	beq.n	800384c <pow+0x58>
 8003882:	f000 fe9b 	bl	80045bc <__errno>
 8003886:	2321      	movs	r3, #33	; 0x21
 8003888:	6003      	str	r3, [r0, #0]
 800388a:	4630      	mov	r0, r6
 800388c:	4639      	mov	r1, r7
 800388e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003892:	2200      	movs	r2, #0
 8003894:	2300      	movs	r3, #0
 8003896:	4630      	mov	r0, r6
 8003898:	4639      	mov	r1, r7
 800389a:	f7fd f87d 	bl	8000998 <__aeabi_dcmpeq>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d0f3      	beq.n	800388a <pow+0x96>
 80038a2:	4640      	mov	r0, r8
 80038a4:	4649      	mov	r1, r9
 80038a6:	f000 fe04 	bl	80044b2 <finite>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d0ed      	beq.n	800388a <pow+0x96>
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f000 fdfe 	bl	80044b2 <finite>
 80038b6:	e7c8      	b.n	800384a <pow+0x56>
 80038b8:	2600      	movs	r6, #0
 80038ba:	4f01      	ldr	r7, [pc, #4]	; (80038c0 <pow+0xcc>)
 80038bc:	e7e5      	b.n	800388a <pow+0x96>
 80038be:	bf00      	nop
 80038c0:	3ff00000 	.word	0x3ff00000
 80038c4:	00000000 	.word	0x00000000

080038c8 <__ieee754_pow>:
 80038c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038cc:	b093      	sub	sp, #76	; 0x4c
 80038ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80038d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80038da:	4689      	mov	r9, r1
 80038dc:	ea56 0102 	orrs.w	r1, r6, r2
 80038e0:	4680      	mov	r8, r0
 80038e2:	d111      	bne.n	8003908 <__ieee754_pow+0x40>
 80038e4:	1803      	adds	r3, r0, r0
 80038e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80038ea:	4152      	adcs	r2, r2
 80038ec:	4299      	cmp	r1, r3
 80038ee:	4b82      	ldr	r3, [pc, #520]	; (8003af8 <__ieee754_pow+0x230>)
 80038f0:	4193      	sbcs	r3, r2
 80038f2:	f080 84b9 	bcs.w	8004268 <__ieee754_pow+0x9a0>
 80038f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f7fc fc2d 	bl	800015c <__adddf3>
 8003902:	4683      	mov	fp, r0
 8003904:	468c      	mov	ip, r1
 8003906:	e06f      	b.n	80039e8 <__ieee754_pow+0x120>
 8003908:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <__ieee754_pow+0x234>)
 800390a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800390e:	429c      	cmp	r4, r3
 8003910:	464d      	mov	r5, r9
 8003912:	4682      	mov	sl, r0
 8003914:	dc06      	bgt.n	8003924 <__ieee754_pow+0x5c>
 8003916:	d101      	bne.n	800391c <__ieee754_pow+0x54>
 8003918:	2800      	cmp	r0, #0
 800391a:	d1ec      	bne.n	80038f6 <__ieee754_pow+0x2e>
 800391c:	429e      	cmp	r6, r3
 800391e:	dc01      	bgt.n	8003924 <__ieee754_pow+0x5c>
 8003920:	d10f      	bne.n	8003942 <__ieee754_pow+0x7a>
 8003922:	b172      	cbz	r2, 8003942 <__ieee754_pow+0x7a>
 8003924:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003928:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800392c:	ea55 050a 	orrs.w	r5, r5, sl
 8003930:	d1e1      	bne.n	80038f6 <__ieee754_pow+0x2e>
 8003932:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003936:	18db      	adds	r3, r3, r3
 8003938:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800393c:	4152      	adcs	r2, r2
 800393e:	429d      	cmp	r5, r3
 8003940:	e7d5      	b.n	80038ee <__ieee754_pow+0x26>
 8003942:	2d00      	cmp	r5, #0
 8003944:	da39      	bge.n	80039ba <__ieee754_pow+0xf2>
 8003946:	4b6e      	ldr	r3, [pc, #440]	; (8003b00 <__ieee754_pow+0x238>)
 8003948:	429e      	cmp	r6, r3
 800394a:	dc52      	bgt.n	80039f2 <__ieee754_pow+0x12a>
 800394c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003950:	429e      	cmp	r6, r3
 8003952:	f340 849c 	ble.w	800428e <__ieee754_pow+0x9c6>
 8003956:	1533      	asrs	r3, r6, #20
 8003958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800395c:	2b14      	cmp	r3, #20
 800395e:	dd0f      	ble.n	8003980 <__ieee754_pow+0xb8>
 8003960:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003964:	fa22 f103 	lsr.w	r1, r2, r3
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	4293      	cmp	r3, r2
 800396e:	f040 848e 	bne.w	800428e <__ieee754_pow+0x9c6>
 8003972:	f001 0101 	and.w	r1, r1, #1
 8003976:	f1c1 0302 	rsb	r3, r1, #2
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	b182      	cbz	r2, 80039a0 <__ieee754_pow+0xd8>
 800397e:	e05d      	b.n	8003a3c <__ieee754_pow+0x174>
 8003980:	2a00      	cmp	r2, #0
 8003982:	d159      	bne.n	8003a38 <__ieee754_pow+0x170>
 8003984:	f1c3 0314 	rsb	r3, r3, #20
 8003988:	fa46 f103 	asr.w	r1, r6, r3
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	42b3      	cmp	r3, r6
 8003992:	f040 8479 	bne.w	8004288 <__ieee754_pow+0x9c0>
 8003996:	f001 0101 	and.w	r1, r1, #1
 800399a:	f1c1 0302 	rsb	r3, r1, #2
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <__ieee754_pow+0x23c>)
 80039a2:	429e      	cmp	r6, r3
 80039a4:	d132      	bne.n	8003a0c <__ieee754_pow+0x144>
 80039a6:	2f00      	cmp	r7, #0
 80039a8:	f280 846a 	bge.w	8004280 <__ieee754_pow+0x9b8>
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	2000      	movs	r0, #0
 80039b2:	4954      	ldr	r1, [pc, #336]	; (8003b04 <__ieee754_pow+0x23c>)
 80039b4:	f7fc feb2 	bl	800071c <__aeabi_ddiv>
 80039b8:	e7a3      	b.n	8003902 <__ieee754_pow+0x3a>
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2a00      	cmp	r2, #0
 80039c0:	d13c      	bne.n	8003a3c <__ieee754_pow+0x174>
 80039c2:	4b4e      	ldr	r3, [pc, #312]	; (8003afc <__ieee754_pow+0x234>)
 80039c4:	429e      	cmp	r6, r3
 80039c6:	d1eb      	bne.n	80039a0 <__ieee754_pow+0xd8>
 80039c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80039cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80039d0:	ea53 030a 	orrs.w	r3, r3, sl
 80039d4:	f000 8448 	beq.w	8004268 <__ieee754_pow+0x9a0>
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <__ieee754_pow+0x240>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	dd0b      	ble.n	80039f6 <__ieee754_pow+0x12e>
 80039de:	2f00      	cmp	r7, #0
 80039e0:	f2c0 8448 	blt.w	8004274 <__ieee754_pow+0x9ac>
 80039e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80039e8:	4658      	mov	r0, fp
 80039ea:	4661      	mov	r1, ip
 80039ec:	b013      	add	sp, #76	; 0x4c
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	2302      	movs	r3, #2
 80039f4:	e7e2      	b.n	80039bc <__ieee754_pow+0xf4>
 80039f6:	2f00      	cmp	r7, #0
 80039f8:	f04f 0b00 	mov.w	fp, #0
 80039fc:	f04f 0c00 	mov.w	ip, #0
 8003a00:	daf2      	bge.n	80039e8 <__ieee754_pow+0x120>
 8003a02:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003a06:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003a0a:	e7ed      	b.n	80039e8 <__ieee754_pow+0x120>
 8003a0c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003a10:	d106      	bne.n	8003a20 <__ieee754_pow+0x158>
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	f7fc fd55 	bl	80004c8 <__aeabi_dmul>
 8003a1e:	e770      	b.n	8003902 <__ieee754_pow+0x3a>
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <__ieee754_pow+0x244>)
 8003a22:	429f      	cmp	r7, r3
 8003a24:	d10a      	bne.n	8003a3c <__ieee754_pow+0x174>
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	db08      	blt.n	8003a3c <__ieee754_pow+0x174>
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	b013      	add	sp, #76	; 0x4c
 8003a30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	f000 bc5e 	b.w	80042f4 <__ieee754_sqrt>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	4649      	mov	r1, r9
 8003a40:	f000 fd34 	bl	80044ac <fabs>
 8003a44:	4683      	mov	fp, r0
 8003a46:	468c      	mov	ip, r1
 8003a48:	f1ba 0f00 	cmp.w	sl, #0
 8003a4c:	d128      	bne.n	8003aa0 <__ieee754_pow+0x1d8>
 8003a4e:	b124      	cbz	r4, 8003a5a <__ieee754_pow+0x192>
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <__ieee754_pow+0x23c>)
 8003a52:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d122      	bne.n	8003aa0 <__ieee754_pow+0x1d8>
 8003a5a:	2f00      	cmp	r7, #0
 8003a5c:	da07      	bge.n	8003a6e <__ieee754_pow+0x1a6>
 8003a5e:	465a      	mov	r2, fp
 8003a60:	4663      	mov	r3, ip
 8003a62:	2000      	movs	r0, #0
 8003a64:	4927      	ldr	r1, [pc, #156]	; (8003b04 <__ieee754_pow+0x23c>)
 8003a66:	f7fc fe59 	bl	800071c <__aeabi_ddiv>
 8003a6a:	4683      	mov	fp, r0
 8003a6c:	468c      	mov	ip, r1
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	daba      	bge.n	80039e8 <__ieee754_pow+0x120>
 8003a72:	9b00      	ldr	r3, [sp, #0]
 8003a74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003a78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003a7c:	4323      	orrs	r3, r4
 8003a7e:	d108      	bne.n	8003a92 <__ieee754_pow+0x1ca>
 8003a80:	465a      	mov	r2, fp
 8003a82:	4663      	mov	r3, ip
 8003a84:	4658      	mov	r0, fp
 8003a86:	4661      	mov	r1, ip
 8003a88:	f7fc fb66 	bl	8000158 <__aeabi_dsub>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	e790      	b.n	80039b4 <__ieee754_pow+0xec>
 8003a92:	9b00      	ldr	r3, [sp, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d1a7      	bne.n	80039e8 <__ieee754_pow+0x120>
 8003a98:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003a9c:	469c      	mov	ip, r3
 8003a9e:	e7a3      	b.n	80039e8 <__ieee754_pow+0x120>
 8003aa0:	0feb      	lsrs	r3, r5, #31
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8003aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003aa8:	9b00      	ldr	r3, [sp, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	d104      	bne.n	8003ab8 <__ieee754_pow+0x1f0>
 8003aae:	4642      	mov	r2, r8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	e7e7      	b.n	8003a88 <__ieee754_pow+0x1c0>
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <__ieee754_pow+0x248>)
 8003aba:	429e      	cmp	r6, r3
 8003abc:	f340 80f6 	ble.w	8003cac <__ieee754_pow+0x3e4>
 8003ac0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003ac4:	429e      	cmp	r6, r3
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <__ieee754_pow+0x240>)
 8003ac8:	dd09      	ble.n	8003ade <__ieee754_pow+0x216>
 8003aca:	429c      	cmp	r4, r3
 8003acc:	dc0c      	bgt.n	8003ae8 <__ieee754_pow+0x220>
 8003ace:	2f00      	cmp	r7, #0
 8003ad0:	da0c      	bge.n	8003aec <__ieee754_pow+0x224>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	b013      	add	sp, #76	; 0x4c
 8003ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f000 bce2 	b.w	80044a2 <__math_oflow>
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	dbf5      	blt.n	8003ace <__ieee754_pow+0x206>
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <__ieee754_pow+0x23c>)
 8003ae4:	429c      	cmp	r4, r3
 8003ae6:	dd15      	ble.n	8003b14 <__ieee754_pow+0x24c>
 8003ae8:	2f00      	cmp	r7, #0
 8003aea:	dcf2      	bgt.n	8003ad2 <__ieee754_pow+0x20a>
 8003aec:	2000      	movs	r0, #0
 8003aee:	b013      	add	sp, #76	; 0x4c
 8003af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	f000 bcd0 	b.w	8004498 <__math_uflow>
 8003af8:	fff00000 	.word	0xfff00000
 8003afc:	7ff00000 	.word	0x7ff00000
 8003b00:	433fffff 	.word	0x433fffff
 8003b04:	3ff00000 	.word	0x3ff00000
 8003b08:	3fefffff 	.word	0x3fefffff
 8003b0c:	3fe00000 	.word	0x3fe00000
 8003b10:	41e00000 	.word	0x41e00000
 8003b14:	4661      	mov	r1, ip
 8003b16:	2200      	movs	r2, #0
 8003b18:	4658      	mov	r0, fp
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <__ieee754_pow+0x3d0>)
 8003b1c:	f7fc fb1c 	bl	8000158 <__aeabi_dsub>
 8003b20:	a355      	add	r3, pc, #340	; (adr r3, 8003c78 <__ieee754_pow+0x3b0>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	4604      	mov	r4, r0
 8003b28:	460d      	mov	r5, r1
 8003b2a:	f7fc fccd 	bl	80004c8 <__aeabi_dmul>
 8003b2e:	a354      	add	r3, pc, #336	; (adr r3, 8003c80 <__ieee754_pow+0x3b8>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	4606      	mov	r6, r0
 8003b36:	460f      	mov	r7, r1
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7fc fcc4 	bl	80004c8 <__aeabi_dmul>
 8003b40:	2200      	movs	r2, #0
 8003b42:	4682      	mov	sl, r0
 8003b44:	468b      	mov	fp, r1
 8003b46:	4620      	mov	r0, r4
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <__ieee754_pow+0x3d4>)
 8003b4c:	f7fc fcbc 	bl	80004c8 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	a14c      	add	r1, pc, #304	; (adr r1, 8003c88 <__ieee754_pow+0x3c0>)
 8003b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b5a:	f7fc fafd 	bl	8000158 <__aeabi_dsub>
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	f7fc fcb1 	bl	80004c8 <__aeabi_dmul>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	494c      	ldr	r1, [pc, #304]	; (8003ca0 <__ieee754_pow+0x3d8>)
 8003b6e:	f7fc faf3 	bl	8000158 <__aeabi_dsub>
 8003b72:	4622      	mov	r2, r4
 8003b74:	462b      	mov	r3, r5
 8003b76:	4680      	mov	r8, r0
 8003b78:	4689      	mov	r9, r1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc fca3 	bl	80004c8 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4640      	mov	r0, r8
 8003b88:	4649      	mov	r1, r9
 8003b8a:	f7fc fc9d 	bl	80004c8 <__aeabi_dmul>
 8003b8e:	a340      	add	r3, pc, #256	; (adr r3, 8003c90 <__ieee754_pow+0x3c8>)
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f7fc fc98 	bl	80004c8 <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4650      	mov	r0, sl
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	f7fc fada 	bl	8000158 <__aeabi_dsub>
 8003ba4:	f04f 0a00 	mov.w	sl, #0
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4604      	mov	r4, r0
 8003bae:	460d      	mov	r5, r1
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	4639      	mov	r1, r7
 8003bb4:	f7fc fad2 	bl	800015c <__adddf3>
 8003bb8:	4632      	mov	r2, r6
 8003bba:	463b      	mov	r3, r7
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	468b      	mov	fp, r1
 8003bc0:	f7fc faca 	bl	8000158 <__aeabi_dsub>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fac4 	bl	8000158 <__aeabi_dsub>
 8003bd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003bd4:	9b00      	ldr	r3, [sp, #0]
 8003bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f04f 0600 	mov.w	r6, #0
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	bf0c      	ite	eq
 8003be6:	4b2f      	ldreq	r3, [pc, #188]	; (8003ca4 <__ieee754_pow+0x3dc>)
 8003be8:	4b2b      	ldrne	r3, [pc, #172]	; (8003c98 <__ieee754_pow+0x3d0>)
 8003bea:	4604      	mov	r4, r0
 8003bec:	460d      	mov	r5, r1
 8003bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf6:	4632      	mov	r2, r6
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	f7fc faad 	bl	8000158 <__aeabi_dsub>
 8003bfe:	4652      	mov	r2, sl
 8003c00:	465b      	mov	r3, fp
 8003c02:	f7fc fc61 	bl	80004c8 <__aeabi_dmul>
 8003c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c0a:	4680      	mov	r8, r0
 8003c0c:	4689      	mov	r9, r1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc fc59 	bl	80004c8 <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	f7fc fa9d 	bl	800015c <__adddf3>
 8003c22:	4632      	mov	r2, r6
 8003c24:	463b      	mov	r3, r7
 8003c26:	4680      	mov	r8, r0
 8003c28:	4689      	mov	r9, r1
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	f7fc fc4b 	bl	80004c8 <__aeabi_dmul>
 8003c32:	4604      	mov	r4, r0
 8003c34:	460d      	mov	r5, r1
 8003c36:	460b      	mov	r3, r1
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c42:	f7fc fa8b 	bl	800015c <__adddf3>
 8003c46:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <__ieee754_pow+0x3e0>)
 8003c48:	4682      	mov	sl, r0
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	460f      	mov	r7, r1
 8003c4e:	460e      	mov	r6, r1
 8003c50:	f340 82e5 	ble.w	800421e <__ieee754_pow+0x956>
 8003c54:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003c58:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003c5c:	4303      	orrs	r3, r0
 8003c5e:	f000 81df 	beq.w	8004020 <__ieee754_pow+0x758>
 8003c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f7fc fe9f 	bl	80009ac <__aeabi_dcmplt>
 8003c6e:	3800      	subs	r0, #0
 8003c70:	bf18      	it	ne
 8003c72:	2001      	movne	r0, #1
 8003c74:	e72e      	b.n	8003ad4 <__ieee754_pow+0x20c>
 8003c76:	bf00      	nop
 8003c78:	60000000 	.word	0x60000000
 8003c7c:	3ff71547 	.word	0x3ff71547
 8003c80:	f85ddf44 	.word	0xf85ddf44
 8003c84:	3e54ae0b 	.word	0x3e54ae0b
 8003c88:	55555555 	.word	0x55555555
 8003c8c:	3fd55555 	.word	0x3fd55555
 8003c90:	652b82fe 	.word	0x652b82fe
 8003c94:	3ff71547 	.word	0x3ff71547
 8003c98:	3ff00000 	.word	0x3ff00000
 8003c9c:	3fd00000 	.word	0x3fd00000
 8003ca0:	3fe00000 	.word	0x3fe00000
 8003ca4:	bff00000 	.word	0xbff00000
 8003ca8:	408fffff 	.word	0x408fffff
 8003cac:	4bd2      	ldr	r3, [pc, #840]	; (8003ff8 <__ieee754_pow+0x730>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	402b      	ands	r3, r5
 8003cb2:	b943      	cbnz	r3, 8003cc6 <__ieee754_pow+0x3fe>
 8003cb4:	4658      	mov	r0, fp
 8003cb6:	4661      	mov	r1, ip
 8003cb8:	4bd0      	ldr	r3, [pc, #832]	; (8003ffc <__ieee754_pow+0x734>)
 8003cba:	f7fc fc05 	bl	80004c8 <__aeabi_dmul>
 8003cbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003cc2:	4683      	mov	fp, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	1523      	asrs	r3, r4, #20
 8003cc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ccc:	4413      	add	r3, r2
 8003cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cd0:	4bcb      	ldr	r3, [pc, #812]	; (8004000 <__ieee754_pow+0x738>)
 8003cd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003cd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003ce0:	dd08      	ble.n	8003cf4 <__ieee754_pow+0x42c>
 8003ce2:	4bc8      	ldr	r3, [pc, #800]	; (8004004 <__ieee754_pow+0x73c>)
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	f340 8199 	ble.w	800401c <__ieee754_pow+0x754>
 8003cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	00f3      	lsls	r3, r6, #3
 8003cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8003cfa:	4bc3      	ldr	r3, [pc, #780]	; (8004008 <__ieee754_pow+0x740>)
 8003cfc:	4658      	mov	r0, fp
 8003cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d06:	4629      	mov	r1, r5
 8003d08:	461a      	mov	r2, r3
 8003d0a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f7fc fa22 	bl	8000158 <__aeabi_dsub>
 8003d14:	46da      	mov	sl, fp
 8003d16:	462b      	mov	r3, r5
 8003d18:	4652      	mov	r2, sl
 8003d1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003d1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d22:	f7fc fa1b 	bl	800015c <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	49b7      	ldr	r1, [pc, #732]	; (800400c <__ieee754_pow+0x744>)
 8003d2e:	f7fc fcf5 	bl	800071c <__aeabi_ddiv>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d3a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d3e:	f7fc fbc3 	bl	80004c8 <__aeabi_dmul>
 8003d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d46:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003d4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2200      	movs	r2, #0
 8003d52:	46ab      	mov	fp, r5
 8003d54:	106d      	asrs	r5, r5, #1
 8003d56:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003d60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003d64:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	f7fc fbaa 	bl	80004c8 <__aeabi_dmul>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d7c:	f7fc f9ec 	bl	8000158 <__aeabi_dsub>
 8003d80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	4620      	mov	r0, r4
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	f7fc f9e4 	bl	8000158 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4650      	mov	r0, sl
 8003d96:	4659      	mov	r1, fp
 8003d98:	f7fc f9de 	bl	8000158 <__aeabi_dsub>
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	f7fc fb92 	bl	80004c8 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc f9d4 	bl	8000158 <__aeabi_dsub>
 8003db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003db4:	f7fc fb88 	bl	80004c8 <__aeabi_dmul>
 8003db8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f7fc fb80 	bl	80004c8 <__aeabi_dmul>
 8003dc8:	a379      	add	r3, pc, #484	; (adr r3, 8003fb0 <__ieee754_pow+0x6e8>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	4604      	mov	r4, r0
 8003dd0:	460d      	mov	r5, r1
 8003dd2:	f7fc fb79 	bl	80004c8 <__aeabi_dmul>
 8003dd6:	a378      	add	r3, pc, #480	; (adr r3, 8003fb8 <__ieee754_pow+0x6f0>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc f9be 	bl	800015c <__adddf3>
 8003de0:	4622      	mov	r2, r4
 8003de2:	462b      	mov	r3, r5
 8003de4:	f7fc fb70 	bl	80004c8 <__aeabi_dmul>
 8003de8:	a375      	add	r3, pc, #468	; (adr r3, 8003fc0 <__ieee754_pow+0x6f8>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc f9b5 	bl	800015c <__adddf3>
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f7fc fb67 	bl	80004c8 <__aeabi_dmul>
 8003dfa:	a373      	add	r3, pc, #460	; (adr r3, 8003fc8 <__ieee754_pow+0x700>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc f9ac 	bl	800015c <__adddf3>
 8003e04:	4622      	mov	r2, r4
 8003e06:	462b      	mov	r3, r5
 8003e08:	f7fc fb5e 	bl	80004c8 <__aeabi_dmul>
 8003e0c:	a370      	add	r3, pc, #448	; (adr r3, 8003fd0 <__ieee754_pow+0x708>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc f9a3 	bl	800015c <__adddf3>
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	f7fc fb55 	bl	80004c8 <__aeabi_dmul>
 8003e1e:	a36e      	add	r3, pc, #440	; (adr r3, 8003fd8 <__ieee754_pow+0x710>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc f99a 	bl	800015c <__adddf3>
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	462b      	mov	r3, r5
 8003e30:	4620      	mov	r0, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc fb48 	bl	80004c8 <__aeabi_dmul>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	4639      	mov	r1, r7
 8003e40:	f7fc fb42 	bl	80004c8 <__aeabi_dmul>
 8003e44:	4604      	mov	r4, r0
 8003e46:	460d      	mov	r5, r1
 8003e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	f7fc f984 	bl	800015c <__adddf3>
 8003e54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e58:	f7fc fb36 	bl	80004c8 <__aeabi_dmul>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f7fc f97c 	bl	800015c <__adddf3>
 8003e64:	4642      	mov	r2, r8
 8003e66:	4606      	mov	r6, r0
 8003e68:	460f      	mov	r7, r1
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	4649      	mov	r1, r9
 8003e70:	f7fc fb2a 	bl	80004c8 <__aeabi_dmul>
 8003e74:	2200      	movs	r2, #0
 8003e76:	4b66      	ldr	r3, [pc, #408]	; (8004010 <__ieee754_pow+0x748>)
 8003e78:	4682      	mov	sl, r0
 8003e7a:	468b      	mov	fp, r1
 8003e7c:	f7fc f96e 	bl	800015c <__adddf3>
 8003e80:	4632      	mov	r2, r6
 8003e82:	463b      	mov	r3, r7
 8003e84:	f7fc f96a 	bl	800015c <__adddf3>
 8003e88:	2400      	movs	r4, #0
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4640      	mov	r0, r8
 8003e92:	4649      	mov	r1, r9
 8003e94:	f7fc fb18 	bl	80004c8 <__aeabi_dmul>
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	4689      	mov	r9, r1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <__ieee754_pow+0x748>)
 8003ea4:	f7fc f958 	bl	8000158 <__aeabi_dsub>
 8003ea8:	4652      	mov	r2, sl
 8003eaa:	465b      	mov	r3, fp
 8003eac:	f7fc f954 	bl	8000158 <__aeabi_dsub>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc f94e 	bl	8000158 <__aeabi_dsub>
 8003ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ec0:	f7fc fb02 	bl	80004c8 <__aeabi_dmul>
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	460f      	mov	r7, r1
 8003eca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ece:	462b      	mov	r3, r5
 8003ed0:	f7fc fafa 	bl	80004c8 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc f93e 	bl	800015c <__adddf3>
 8003ee0:	2400      	movs	r4, #0
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4640      	mov	r0, r8
 8003eec:	4649      	mov	r1, r9
 8003eee:	f7fc f935 	bl	800015c <__adddf3>
 8003ef2:	a33b      	add	r3, pc, #236	; (adr r3, 8003fe0 <__ieee754_pow+0x718>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	4620      	mov	r0, r4
 8003efa:	460d      	mov	r5, r1
 8003efc:	f7fc fae4 	bl	80004c8 <__aeabi_dmul>
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7fc f924 	bl	8000158 <__aeabi_dsub>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc f91e 	bl	8000158 <__aeabi_dsub>
 8003f1c:	a332      	add	r3, pc, #200	; (adr r3, 8003fe8 <__ieee754_pow+0x720>)
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f7fc fad1 	bl	80004c8 <__aeabi_dmul>
 8003f26:	a332      	add	r3, pc, #200	; (adr r3, 8003ff0 <__ieee754_pow+0x728>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc fac8 	bl	80004c8 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	4639      	mov	r1, r7
 8003f40:	f7fc f90c 	bl	800015c <__adddf3>
 8003f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <__ieee754_pow+0x74c>)
 8003f48:	f04f 0a00 	mov.w	sl, #0
 8003f4c:	4413      	add	r3, r2
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc f903 	bl	800015c <__adddf3>
 8003f56:	4680      	mov	r8, r0
 8003f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f5a:	4689      	mov	r9, r1
 8003f5c:	f7fc fa4a 	bl	80003f4 <__aeabi_i2d>
 8003f60:	4604      	mov	r4, r0
 8003f62:	460d      	mov	r5, r1
 8003f64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <__ieee754_pow+0x750>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f6e:	4642      	mov	r2, r8
 8003f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f74:	464b      	mov	r3, r9
 8003f76:	f7fc f8f1 	bl	800015c <__adddf3>
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	f7fc f8ed 	bl	800015c <__adddf3>
 8003f82:	4622      	mov	r2, r4
 8003f84:	462b      	mov	r3, r5
 8003f86:	f7fc f8e9 	bl	800015c <__adddf3>
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	4650      	mov	r0, sl
 8003f90:	468b      	mov	fp, r1
 8003f92:	f7fc f8e1 	bl	8000158 <__aeabi_dsub>
 8003f96:	4632      	mov	r2, r6
 8003f98:	463b      	mov	r3, r7
 8003f9a:	f7fc f8dd 	bl	8000158 <__aeabi_dsub>
 8003f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fa2:	f7fc f8d9 	bl	8000158 <__aeabi_dsub>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	e60d      	b.n	8003bcc <__ieee754_pow+0x304>
 8003fb0:	4a454eef 	.word	0x4a454eef
 8003fb4:	3fca7e28 	.word	0x3fca7e28
 8003fb8:	93c9db65 	.word	0x93c9db65
 8003fbc:	3fcd864a 	.word	0x3fcd864a
 8003fc0:	a91d4101 	.word	0xa91d4101
 8003fc4:	3fd17460 	.word	0x3fd17460
 8003fc8:	518f264d 	.word	0x518f264d
 8003fcc:	3fd55555 	.word	0x3fd55555
 8003fd0:	db6fabff 	.word	0xdb6fabff
 8003fd4:	3fdb6db6 	.word	0x3fdb6db6
 8003fd8:	33333303 	.word	0x33333303
 8003fdc:	3fe33333 	.word	0x3fe33333
 8003fe0:	e0000000 	.word	0xe0000000
 8003fe4:	3feec709 	.word	0x3feec709
 8003fe8:	dc3a03fd 	.word	0xdc3a03fd
 8003fec:	3feec709 	.word	0x3feec709
 8003ff0:	145b01f5 	.word	0x145b01f5
 8003ff4:	be3e2fe0 	.word	0xbe3e2fe0
 8003ff8:	7ff00000 	.word	0x7ff00000
 8003ffc:	43400000 	.word	0x43400000
 8004000:	0003988e 	.word	0x0003988e
 8004004:	000bb679 	.word	0x000bb679
 8004008:	08004668 	.word	0x08004668
 800400c:	3ff00000 	.word	0x3ff00000
 8004010:	40080000 	.word	0x40080000
 8004014:	08004688 	.word	0x08004688
 8004018:	08004678 	.word	0x08004678
 800401c:	2601      	movs	r6, #1
 800401e:	e66a      	b.n	8003cf6 <__ieee754_pow+0x42e>
 8004020:	a39d      	add	r3, pc, #628	; (adr r3, 8004298 <__ieee754_pow+0x9d0>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f7fc f897 	bl	800015c <__adddf3>
 800402e:	4622      	mov	r2, r4
 8004030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004034:	462b      	mov	r3, r5
 8004036:	4650      	mov	r0, sl
 8004038:	4639      	mov	r1, r7
 800403a:	f7fc f88d 	bl	8000158 <__aeabi_dsub>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004046:	f7fc fccf 	bl	80009e8 <__aeabi_dcmpgt>
 800404a:	2800      	cmp	r0, #0
 800404c:	f47f ae09 	bne.w	8003c62 <__ieee754_pow+0x39a>
 8004050:	4aa3      	ldr	r2, [pc, #652]	; (80042e0 <__ieee754_pow+0xa18>)
 8004052:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004056:	4293      	cmp	r3, r2
 8004058:	f340 8101 	ble.w	800425e <__ieee754_pow+0x996>
 800405c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004060:	2000      	movs	r0, #0
 8004062:	151b      	asrs	r3, r3, #20
 8004064:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004068:	fa4a f303 	asr.w	r3, sl, r3
 800406c:	4433      	add	r3, r6
 800406e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004072:	4f9c      	ldr	r7, [pc, #624]	; (80042e4 <__ieee754_pow+0xa1c>)
 8004074:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004078:	4117      	asrs	r7, r2
 800407a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800407e:	ea23 0107 	bic.w	r1, r3, r7
 8004082:	f1c2 0214 	rsb	r2, r2, #20
 8004086:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800408a:	460b      	mov	r3, r1
 800408c:	fa4a fa02 	asr.w	sl, sl, r2
 8004090:	2e00      	cmp	r6, #0
 8004092:	4602      	mov	r2, r0
 8004094:	4629      	mov	r1, r5
 8004096:	4620      	mov	r0, r4
 8004098:	bfb8      	it	lt
 800409a:	f1ca 0a00 	rsblt	sl, sl, #0
 800409e:	f7fc f85b 	bl	8000158 <__aeabi_dsub>
 80040a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040aa:	2400      	movs	r4, #0
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	f7fc f854 	bl	800015c <__adddf3>
 80040b4:	a37a      	add	r3, pc, #488	; (adr r3, 80042a0 <__ieee754_pow+0x9d8>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	4620      	mov	r0, r4
 80040bc:	460d      	mov	r5, r1
 80040be:	f7fc fa03 	bl	80004c8 <__aeabi_dmul>
 80040c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c6:	4606      	mov	r6, r0
 80040c8:	460f      	mov	r7, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc f843 	bl	8000158 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc f83d 	bl	8000158 <__aeabi_dsub>
 80040de:	a372      	add	r3, pc, #456	; (adr r3, 80042a8 <__ieee754_pow+0x9e0>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f7fc f9f0 	bl	80004c8 <__aeabi_dmul>
 80040e8:	a371      	add	r3, pc, #452	; (adr r3, 80042b0 <__ieee754_pow+0x9e8>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	4680      	mov	r8, r0
 80040f0:	4689      	mov	r9, r1
 80040f2:	4620      	mov	r0, r4
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7fc f9e7 	bl	80004c8 <__aeabi_dmul>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4640      	mov	r0, r8
 8004100:	4649      	mov	r1, r9
 8004102:	f7fc f82b 	bl	800015c <__adddf3>
 8004106:	4604      	mov	r4, r0
 8004108:	460d      	mov	r5, r1
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4630      	mov	r0, r6
 8004110:	4639      	mov	r1, r7
 8004112:	f7fc f823 	bl	800015c <__adddf3>
 8004116:	4632      	mov	r2, r6
 8004118:	463b      	mov	r3, r7
 800411a:	4680      	mov	r8, r0
 800411c:	4689      	mov	r9, r1
 800411e:	f7fc f81b 	bl	8000158 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	f7fc f815 	bl	8000158 <__aeabi_dsub>
 800412e:	4642      	mov	r2, r8
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	464b      	mov	r3, r9
 8004136:	4640      	mov	r0, r8
 8004138:	4649      	mov	r1, r9
 800413a:	f7fc f9c5 	bl	80004c8 <__aeabi_dmul>
 800413e:	a35e      	add	r3, pc, #376	; (adr r3, 80042b8 <__ieee754_pow+0x9f0>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	4604      	mov	r4, r0
 8004146:	460d      	mov	r5, r1
 8004148:	f7fc f9be 	bl	80004c8 <__aeabi_dmul>
 800414c:	a35c      	add	r3, pc, #368	; (adr r3, 80042c0 <__ieee754_pow+0x9f8>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc f801 	bl	8000158 <__aeabi_dsub>
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f7fc f9b5 	bl	80004c8 <__aeabi_dmul>
 800415e:	a35a      	add	r3, pc, #360	; (adr r3, 80042c8 <__ieee754_pow+0xa00>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fb fffa 	bl	800015c <__adddf3>
 8004168:	4622      	mov	r2, r4
 800416a:	462b      	mov	r3, r5
 800416c:	f7fc f9ac 	bl	80004c8 <__aeabi_dmul>
 8004170:	a357      	add	r3, pc, #348	; (adr r3, 80042d0 <__ieee754_pow+0xa08>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fb ffef 	bl	8000158 <__aeabi_dsub>
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	f7fc f9a3 	bl	80004c8 <__aeabi_dmul>
 8004182:	a355      	add	r3, pc, #340	; (adr r3, 80042d8 <__ieee754_pow+0xa10>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fb ffe8 	bl	800015c <__adddf3>
 800418c:	4622      	mov	r2, r4
 800418e:	462b      	mov	r3, r5
 8004190:	f7fc f99a 	bl	80004c8 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fb ffdc 	bl	8000158 <__aeabi_dsub>
 80041a0:	4604      	mov	r4, r0
 80041a2:	460d      	mov	r5, r1
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	f7fc f98c 	bl	80004c8 <__aeabi_dmul>
 80041b0:	2200      	movs	r2, #0
 80041b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fb ffcb 	bl	8000158 <__aeabi_dsub>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ca:	f7fc faa7 	bl	800071c <__aeabi_ddiv>
 80041ce:	4632      	mov	r2, r6
 80041d0:	4604      	mov	r4, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	463b      	mov	r3, r7
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	f7fc f975 	bl	80004c8 <__aeabi_dmul>
 80041de:	4632      	mov	r2, r6
 80041e0:	463b      	mov	r3, r7
 80041e2:	f7fb ffbb 	bl	800015c <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fb ffb3 	bl	8000158 <__aeabi_dsub>
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	f7fb ffaf 	bl	8000158 <__aeabi_dsub>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	2000      	movs	r0, #0
 8004200:	4939      	ldr	r1, [pc, #228]	; (80042e8 <__ieee754_pow+0xa20>)
 8004202:	f7fb ffa9 	bl	8000158 <__aeabi_dsub>
 8004206:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800420a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800420e:	da29      	bge.n	8004264 <__ieee754_pow+0x99c>
 8004210:	4652      	mov	r2, sl
 8004212:	f000 f955 	bl	80044c0 <scalbn>
 8004216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800421a:	f7ff bbfe 	b.w	8003a1a <__ieee754_pow+0x152>
 800421e:	4b33      	ldr	r3, [pc, #204]	; (80042ec <__ieee754_pow+0xa24>)
 8004220:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004224:	429f      	cmp	r7, r3
 8004226:	f77f af13 	ble.w	8004050 <__ieee754_pow+0x788>
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <__ieee754_pow+0xa28>)
 800422c:	440b      	add	r3, r1
 800422e:	4303      	orrs	r3, r0
 8004230:	d009      	beq.n	8004246 <__ieee754_pow+0x97e>
 8004232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004236:	2200      	movs	r2, #0
 8004238:	2300      	movs	r3, #0
 800423a:	f7fc fbb7 	bl	80009ac <__aeabi_dcmplt>
 800423e:	3800      	subs	r0, #0
 8004240:	bf18      	it	ne
 8004242:	2001      	movne	r0, #1
 8004244:	e453      	b.n	8003aee <__ieee754_pow+0x226>
 8004246:	4622      	mov	r2, r4
 8004248:	462b      	mov	r3, r5
 800424a:	f7fb ff85 	bl	8000158 <__aeabi_dsub>
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	f7fc fbbf 	bl	80009d4 <__aeabi_dcmpge>
 8004256:	2800      	cmp	r0, #0
 8004258:	f43f aefa 	beq.w	8004050 <__ieee754_pow+0x788>
 800425c:	e7e9      	b.n	8004232 <__ieee754_pow+0x96a>
 800425e:	f04f 0a00 	mov.w	sl, #0
 8004262:	e720      	b.n	80040a6 <__ieee754_pow+0x7de>
 8004264:	4621      	mov	r1, r4
 8004266:	e7d6      	b.n	8004216 <__ieee754_pow+0x94e>
 8004268:	f04f 0b00 	mov.w	fp, #0
 800426c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80042e8 <__ieee754_pow+0xa20>
 8004270:	f7ff bbba 	b.w	80039e8 <__ieee754_pow+0x120>
 8004274:	f04f 0b00 	mov.w	fp, #0
 8004278:	f04f 0c00 	mov.w	ip, #0
 800427c:	f7ff bbb4 	b.w	80039e8 <__ieee754_pow+0x120>
 8004280:	4640      	mov	r0, r8
 8004282:	4649      	mov	r1, r9
 8004284:	f7ff bb3d 	b.w	8003902 <__ieee754_pow+0x3a>
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	f7ff bb89 	b.w	80039a0 <__ieee754_pow+0xd8>
 800428e:	2300      	movs	r3, #0
 8004290:	f7ff bb73 	b.w	800397a <__ieee754_pow+0xb2>
 8004294:	f3af 8000 	nop.w
 8004298:	652b82fe 	.word	0x652b82fe
 800429c:	3c971547 	.word	0x3c971547
 80042a0:	00000000 	.word	0x00000000
 80042a4:	3fe62e43 	.word	0x3fe62e43
 80042a8:	fefa39ef 	.word	0xfefa39ef
 80042ac:	3fe62e42 	.word	0x3fe62e42
 80042b0:	0ca86c39 	.word	0x0ca86c39
 80042b4:	be205c61 	.word	0xbe205c61
 80042b8:	72bea4d0 	.word	0x72bea4d0
 80042bc:	3e663769 	.word	0x3e663769
 80042c0:	c5d26bf1 	.word	0xc5d26bf1
 80042c4:	3ebbbd41 	.word	0x3ebbbd41
 80042c8:	af25de2c 	.word	0xaf25de2c
 80042cc:	3f11566a 	.word	0x3f11566a
 80042d0:	16bebd93 	.word	0x16bebd93
 80042d4:	3f66c16c 	.word	0x3f66c16c
 80042d8:	5555553e 	.word	0x5555553e
 80042dc:	3fc55555 	.word	0x3fc55555
 80042e0:	3fe00000 	.word	0x3fe00000
 80042e4:	000fffff 	.word	0x000fffff
 80042e8:	3ff00000 	.word	0x3ff00000
 80042ec:	4090cbff 	.word	0x4090cbff
 80042f0:	3f6f3400 	.word	0x3f6f3400

080042f4 <__ieee754_sqrt>:
 80042f4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004450 <__ieee754_sqrt+0x15c>
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	ea3c 0c01 	bics.w	ip, ip, r1
 8004300:	4606      	mov	r6, r0
 8004302:	460d      	mov	r5, r1
 8004304:	460c      	mov	r4, r1
 8004306:	460a      	mov	r2, r1
 8004308:	4607      	mov	r7, r0
 800430a:	4603      	mov	r3, r0
 800430c:	d10f      	bne.n	800432e <__ieee754_sqrt+0x3a>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	f7fc f8d9 	bl	80004c8 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4630      	mov	r0, r6
 800431c:	4629      	mov	r1, r5
 800431e:	f7fb ff1d 	bl	800015c <__adddf3>
 8004322:	4606      	mov	r6, r0
 8004324:	460d      	mov	r5, r1
 8004326:	4630      	mov	r0, r6
 8004328:	4629      	mov	r1, r5
 800432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800432e:	2900      	cmp	r1, #0
 8004330:	dc0e      	bgt.n	8004350 <__ieee754_sqrt+0x5c>
 8004332:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004336:	ea5c 0707 	orrs.w	r7, ip, r7
 800433a:	d0f4      	beq.n	8004326 <__ieee754_sqrt+0x32>
 800433c:	b141      	cbz	r1, 8004350 <__ieee754_sqrt+0x5c>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	f7fb ff09 	bl	8000158 <__aeabi_dsub>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	f7fc f9e7 	bl	800071c <__aeabi_ddiv>
 800434e:	e7e8      	b.n	8004322 <__ieee754_sqrt+0x2e>
 8004350:	1521      	asrs	r1, r4, #20
 8004352:	d075      	beq.n	8004440 <__ieee754_sqrt+0x14c>
 8004354:	07cc      	lsls	r4, r1, #31
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800435e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004362:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004366:	bf5e      	ittt	pl
 8004368:	0fd9      	lsrpl	r1, r3, #31
 800436a:	005b      	lslpl	r3, r3, #1
 800436c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004370:	0fd9      	lsrs	r1, r3, #31
 8004372:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004376:	2516      	movs	r5, #22
 8004378:	4620      	mov	r0, r4
 800437a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800437e:	107f      	asrs	r7, r7, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	1846      	adds	r6, r0, r1
 8004384:	4296      	cmp	r6, r2
 8004386:	bfde      	ittt	le
 8004388:	1b92      	suble	r2, r2, r6
 800438a:	1870      	addle	r0, r6, r1
 800438c:	1864      	addle	r4, r4, r1
 800438e:	0052      	lsls	r2, r2, #1
 8004390:	3d01      	subs	r5, #1
 8004392:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004396:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800439a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800439e:	d1f0      	bne.n	8004382 <__ieee754_sqrt+0x8e>
 80043a0:	4629      	mov	r1, r5
 80043a2:	f04f 0e20 	mov.w	lr, #32
 80043a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80043aa:	4282      	cmp	r2, r0
 80043ac:	eb06 0c05 	add.w	ip, r6, r5
 80043b0:	dc02      	bgt.n	80043b8 <__ieee754_sqrt+0xc4>
 80043b2:	d113      	bne.n	80043dc <__ieee754_sqrt+0xe8>
 80043b4:	459c      	cmp	ip, r3
 80043b6:	d811      	bhi.n	80043dc <__ieee754_sqrt+0xe8>
 80043b8:	f1bc 0f00 	cmp.w	ip, #0
 80043bc:	eb0c 0506 	add.w	r5, ip, r6
 80043c0:	da43      	bge.n	800444a <__ieee754_sqrt+0x156>
 80043c2:	2d00      	cmp	r5, #0
 80043c4:	db41      	blt.n	800444a <__ieee754_sqrt+0x156>
 80043c6:	f100 0801 	add.w	r8, r0, #1
 80043ca:	1a12      	subs	r2, r2, r0
 80043cc:	4640      	mov	r0, r8
 80043ce:	459c      	cmp	ip, r3
 80043d0:	bf88      	it	hi
 80043d2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80043d6:	eba3 030c 	sub.w	r3, r3, ip
 80043da:	4431      	add	r1, r6
 80043dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80043e0:	f1be 0e01 	subs.w	lr, lr, #1
 80043e4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80043e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80043f0:	d1db      	bne.n	80043aa <__ieee754_sqrt+0xb6>
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d006      	beq.n	8004404 <__ieee754_sqrt+0x110>
 80043f6:	1c48      	adds	r0, r1, #1
 80043f8:	bf0b      	itete	eq
 80043fa:	4671      	moveq	r1, lr
 80043fc:	3101      	addne	r1, #1
 80043fe:	3401      	addeq	r4, #1
 8004400:	f021 0101 	bicne.w	r1, r1, #1
 8004404:	1063      	asrs	r3, r4, #1
 8004406:	0849      	lsrs	r1, r1, #1
 8004408:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800440c:	07e2      	lsls	r2, r4, #31
 800440e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004412:	bf48      	it	mi
 8004414:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004418:	460e      	mov	r6, r1
 800441a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800441e:	e782      	b.n	8004326 <__ieee754_sqrt+0x32>
 8004420:	0ada      	lsrs	r2, r3, #11
 8004422:	3815      	subs	r0, #21
 8004424:	055b      	lsls	r3, r3, #21
 8004426:	2a00      	cmp	r2, #0
 8004428:	d0fa      	beq.n	8004420 <__ieee754_sqrt+0x12c>
 800442a:	02d5      	lsls	r5, r2, #11
 800442c:	d50a      	bpl.n	8004444 <__ieee754_sqrt+0x150>
 800442e:	f1c1 0420 	rsb	r4, r1, #32
 8004432:	fa23 f404 	lsr.w	r4, r3, r4
 8004436:	1e4d      	subs	r5, r1, #1
 8004438:	408b      	lsls	r3, r1
 800443a:	4322      	orrs	r2, r4
 800443c:	1b41      	subs	r1, r0, r5
 800443e:	e789      	b.n	8004354 <__ieee754_sqrt+0x60>
 8004440:	4608      	mov	r0, r1
 8004442:	e7f0      	b.n	8004426 <__ieee754_sqrt+0x132>
 8004444:	0052      	lsls	r2, r2, #1
 8004446:	3101      	adds	r1, #1
 8004448:	e7ef      	b.n	800442a <__ieee754_sqrt+0x136>
 800444a:	4680      	mov	r8, r0
 800444c:	e7bd      	b.n	80043ca <__ieee754_sqrt+0xd6>
 800444e:	bf00      	nop
 8004450:	7ff00000 	.word	0x7ff00000

08004454 <with_errno>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	4616      	mov	r6, r2
 800445c:	f000 f8ae 	bl	80045bc <__errno>
 8004460:	4629      	mov	r1, r5
 8004462:	6006      	str	r6, [r0, #0]
 8004464:	4620      	mov	r0, r4
 8004466:	bd70      	pop	{r4, r5, r6, pc}

08004468 <xflow>:
 8004468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446a:	4615      	mov	r5, r2
 800446c:	461c      	mov	r4, r3
 800446e:	b180      	cbz	r0, 8004492 <xflow+0x2a>
 8004470:	4610      	mov	r0, r2
 8004472:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004476:	e9cd 0100 	strd	r0, r1, [sp]
 800447a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800447e:	4628      	mov	r0, r5
 8004480:	4621      	mov	r1, r4
 8004482:	f7fc f821 	bl	80004c8 <__aeabi_dmul>
 8004486:	2222      	movs	r2, #34	; 0x22
 8004488:	b003      	add	sp, #12
 800448a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800448e:	f7ff bfe1 	b.w	8004454 <with_errno>
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	e7ee      	b.n	8004476 <xflow+0xe>

08004498 <__math_uflow>:
 8004498:	2200      	movs	r2, #0
 800449a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800449e:	f7ff bfe3 	b.w	8004468 <xflow>

080044a2 <__math_oflow>:
 80044a2:	2200      	movs	r2, #0
 80044a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80044a8:	f7ff bfde 	b.w	8004468 <xflow>

080044ac <fabs>:
 80044ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80044b0:	4770      	bx	lr

080044b2 <finite>:
 80044b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80044b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80044ba:	0fc0      	lsrs	r0, r0, #31
 80044bc:	4770      	bx	lr
	...

080044c0 <scalbn>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
 80044ca:	4617      	mov	r7, r2
 80044cc:	460b      	mov	r3, r1
 80044ce:	b996      	cbnz	r6, 80044f6 <scalbn+0x36>
 80044d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80044d4:	4303      	orrs	r3, r0
 80044d6:	d039      	beq.n	800454c <scalbn+0x8c>
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <scalbn+0xe8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	f7fb fff4 	bl	80004c8 <__aeabi_dmul>
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <scalbn+0xec>)
 80044e2:	4604      	mov	r4, r0
 80044e4:	429f      	cmp	r7, r3
 80044e6:	460d      	mov	r5, r1
 80044e8:	da0f      	bge.n	800450a <scalbn+0x4a>
 80044ea:	a32b      	add	r3, pc, #172	; (adr r3, 8004598 <scalbn+0xd8>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fb ffea 	bl	80004c8 <__aeabi_dmul>
 80044f4:	e006      	b.n	8004504 <scalbn+0x44>
 80044f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80044fa:	4296      	cmp	r6, r2
 80044fc:	d10a      	bne.n	8004514 <scalbn+0x54>
 80044fe:	4602      	mov	r2, r0
 8004500:	f7fb fe2c 	bl	800015c <__adddf3>
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
 8004508:	e020      	b.n	800454c <scalbn+0x8c>
 800450a:	460b      	mov	r3, r1
 800450c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004510:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004514:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004518:	19b9      	adds	r1, r7, r6
 800451a:	4291      	cmp	r1, r2
 800451c:	dd0e      	ble.n	800453c <scalbn+0x7c>
 800451e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004522:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004526:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800452a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800452e:	4820      	ldr	r0, [pc, #128]	; (80045b0 <scalbn+0xf0>)
 8004530:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004534:	a31a      	add	r3, pc, #104	; (adr r3, 80045a0 <scalbn+0xe0>)
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	e7d9      	b.n	80044f0 <scalbn+0x30>
 800453c:	2900      	cmp	r1, #0
 800453e:	dd08      	ble.n	8004552 <scalbn+0x92>
 8004540:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004548:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004552:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004556:	da12      	bge.n	800457e <scalbn+0xbe>
 8004558:	f24c 3350 	movw	r3, #50000	; 0xc350
 800455c:	429f      	cmp	r7, r3
 800455e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004562:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004566:	dcdc      	bgt.n	8004522 <scalbn+0x62>
 8004568:	a30b      	add	r3, pc, #44	; (adr r3, 8004598 <scalbn+0xd8>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004572:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004576:	480f      	ldr	r0, [pc, #60]	; (80045b4 <scalbn+0xf4>)
 8004578:	f041 011f 	orr.w	r1, r1, #31
 800457c:	e7b8      	b.n	80044f0 <scalbn+0x30>
 800457e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004582:	3136      	adds	r1, #54	; 0x36
 8004584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004588:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800458c:	4620      	mov	r0, r4
 800458e:	4629      	mov	r1, r5
 8004590:	2200      	movs	r2, #0
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <scalbn+0xf8>)
 8004594:	e7ac      	b.n	80044f0 <scalbn+0x30>
 8004596:	bf00      	nop
 8004598:	c2f8f359 	.word	0xc2f8f359
 800459c:	01a56e1f 	.word	0x01a56e1f
 80045a0:	8800759c 	.word	0x8800759c
 80045a4:	7e37e43c 	.word	0x7e37e43c
 80045a8:	43500000 	.word	0x43500000
 80045ac:	ffff3cb0 	.word	0xffff3cb0
 80045b0:	8800759c 	.word	0x8800759c
 80045b4:	c2f8f359 	.word	0xc2f8f359
 80045b8:	3c900000 	.word	0x3c900000

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000000c 	.word	0x2000000c

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	2600      	movs	r6, #0
 80045cc:	4d0c      	ldr	r5, [pc, #48]	; (8004600 <__libc_init_array+0x38>)
 80045ce:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045d0:	1b64      	subs	r4, r4, r5
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	f000 f822 	bl	8004620 <_init>
 80045dc:	2600      	movs	r6, #0
 80045de:	4d0a      	ldr	r5, [pc, #40]	; (8004608 <__libc_init_array+0x40>)
 80045e0:	4c0a      	ldr	r4, [pc, #40]	; (800460c <__libc_init_array+0x44>)
 80045e2:	1b64      	subs	r4, r4, r5
 80045e4:	10a4      	asrs	r4, r4, #2
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08004698 	.word	0x08004698
 8004604:	08004698 	.word	0x08004698
 8004608:	08004698 	.word	0x08004698
 800460c:	0800469c 	.word	0x0800469c

08004610 <memset>:
 8004610:	4603      	mov	r3, r0
 8004612:	4402      	add	r2, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	f803 1b01 	strb.w	r1, [r3], #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <_init>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr

0800462c <_fini>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr
