
NRF_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004418  08004418  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004418  08004418  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004418  08004418  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004420  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000098  080044b8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080044b8  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9f5  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df8  00000000  00000000  0002aab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018149  00000000  00000000  0002db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9b7  00000000  00000000  00045cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a920  00000000  00000000  00050668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000daf88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  000dafdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e54 	.word	0x08003e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003e54 	.word	0x08003e54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b39      	ldr	r3, [pc, #228]	; (8000258 <MX_GPIO_Init+0xfc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a38      	ldr	r2, [pc, #224]	; (8000258 <MX_GPIO_Init+0xfc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b36      	ldr	r3, [pc, #216]	; (8000258 <MX_GPIO_Init+0xfc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b33      	ldr	r3, [pc, #204]	; (8000258 <MX_GPIO_Init+0xfc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a32      	ldr	r2, [pc, #200]	; (8000258 <MX_GPIO_Init+0xfc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b30      	ldr	r3, [pc, #192]	; (8000258 <MX_GPIO_Init+0xfc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b2d      	ldr	r3, [pc, #180]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a2c      	ldr	r2, [pc, #176]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b27      	ldr	r3, [pc, #156]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a26      	ldr	r2, [pc, #152]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b24      	ldr	r3, [pc, #144]	; (8000258 <MX_GPIO_Init+0xfc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4821      	ldr	r0, [pc, #132]	; (800025c <MX_GPIO_Init+0x100>)
 80001d8:	f001 fe60 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f243 0102 	movw	r1, #12290	; 0x3002
 80001e2:	481f      	ldr	r0, [pc, #124]	; (8000260 <MX_GPIO_Init+0x104>)
 80001e4:	f001 fe5a 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ee:	481d      	ldr	r0, [pc, #116]	; (8000264 <MX_GPIO_Init+0x108>)
 80001f0:	f001 fe54 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2302      	movs	r3, #2
 8000204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4619      	mov	r1, r3
 800020c:	4813      	ldr	r0, [pc, #76]	; (800025c <MX_GPIO_Init+0x100>)
 800020e:	f001 fcc1 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8000212:	f243 0302 	movw	r3, #12290	; 0x3002
 8000216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000218:	2301      	movs	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021c:	2300      	movs	r3, #0
 800021e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000220:	2302      	movs	r3, #2
 8000222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <MX_GPIO_Init+0x104>)
 800022c:	f001 fcb2 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000236:	2301      	movs	r3, #1
 8000238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023e:	2302      	movs	r3, #2
 8000240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <MX_GPIO_Init+0x108>)
 800024a:	f001 fca3 	bl	8001b94 <HAL_GPIO_Init>

}
 800024e:	bf00      	nop
 8000250:	3720      	adds	r7, #32
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000
 800025c:	40011000 	.word	0x40011000
 8000260:	40010c00 	.word	0x40010c00
 8000264:	40010800 	.word	0x40010800

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026a:	b09b      	sub	sp, #108	; 0x6c
 800026c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f001 fb27 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f861 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f7ff ff71 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800027a:	f001 fa85 	bl	8001788 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800027e:	f001 f96d 	bl	800155c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8000282:	4c26      	ldr	r4, [pc, #152]	; (800031c <main+0xb4>)
 8000284:	4668      	mov	r0, sp
 8000286:	1d23      	adds	r3, r4, #4
 8000288:	2254      	movs	r2, #84	; 0x54
 800028a:	4619      	mov	r1, r3
 800028c:	f003 f9a0 	bl	80035d0 <memcpy>
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	4821      	ldr	r0, [pc, #132]	; (8000320 <main+0xb8>)
 800029c:	f000 f9d0 	bl	8000640 <NRF24_begin>
	NRF24_stopListening();
 80002a0:	f000 faae 	bl	8000800 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <main+0xbc>)
 80002a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002aa:	4610      	mov	r0, r2
 80002ac:	4619      	mov	r1, r3
 80002ae:	f000 fb07 	bl	80008c0 <NRF24_openWritingPipe>

	nrf24_DebugUART_Init(huart1);
 80002b2:	4e1d      	ldr	r6, [pc, #116]	; (8000328 <main+0xc0>)
 80002b4:	466d      	mov	r5, sp
 80002b6:	f106 0410 	add.w	r4, r6, #16
 80002ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80002ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002ce:	f001 f929 	bl	8001524 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 fb7e 	bl	80009d4 <NRF24_setAutoAck>
	NRF24_setChannel(34);
 80002d8:	2022      	movs	r0, #34	; 0x22
 80002da:	f000 fb30 	bl	800093e <NRF24_setChannel>
	char test_data[] = "Testing...";
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <main+0xc4>)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e4:	c303      	stmia	r3!, {r0, r1}
 80002e6:	801a      	strh	r2, [r3, #0]
 80002e8:	3302      	adds	r3, #2
 80002ea:	0c12      	lsrs	r2, r2, #16
 80002ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)&test_data, sizeof(test_data), 5);
 80002ee:	1d39      	adds	r1, r7, #4
 80002f0:	2305      	movs	r3, #5
 80002f2:	220b      	movs	r2, #11
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <main+0xc0>)
 80002f6:	f002 ffd6 	bl	80032a6 <HAL_UART_Transmit>
	printRadioSettings();
 80002fa:	f000 fceb 	bl	8000cd4 <printRadioSettings>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		NRF24_write(myTxData, 32);
 80002fe:	2120      	movs	r1, #32
 8000300:	480b      	ldr	r0, [pc, #44]	; (8000330 <main+0xc8>)
 8000302:	f000 fa89 	bl	8000818 <NRF24_write>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <main+0xcc>)
 800030c:	f001 fdde 	bl	8001ecc <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f001 fb36 	bl	8001984 <HAL_Delay>
		NRF24_write(myTxData, 32);
 8000318:	e7f1      	b.n	80002fe <main+0x96>
 800031a:	bf00      	nop
 800031c:	20000168 	.word	0x20000168
 8000320:	40010c00 	.word	0x40010c00
 8000324:	20000000 	.word	0x20000000
 8000328:	200001c0 	.word	0x200001c0
 800032c:	08003e6c 	.word	0x08003e6c
 8000330:	20000008 	.word	0x20000008
 8000334:	40011000 	.word	0x40011000

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f950 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fdbd 	bl	8001f00 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f819 	bl	80003c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f828 	bl	8002400 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f804 	bl	80003c2 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c6:	b672      	cpsid	i
}
 80003c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ca:	e7fe      	b.n	80003ca <Error_Handler+0x8>

080003cc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <NRF24_DelayMicroSeconds+0x38>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <NRF24_DelayMicroSeconds+0x3c>)
 80003de:	fba2 2303 	umull	r2, r3, r2, r3
 80003e2:	0c9a      	lsrs	r2, r3, #18
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80003ec:	bf00      	nop
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	1e5a      	subs	r2, r3, #1
 80003f2:	60fa      	str	r2, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1fa      	bne.n	80003ee <NRF24_DelayMicroSeconds+0x22>
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	20000028 	.word	0x20000028
 8000408:	165e9f81 	.word	0x165e9f81

0800040c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <NRF24_csn+0x20>
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <NRF24_csn+0x38>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <NRF24_csn+0x3c>)
 8000420:	8811      	ldrh	r1, [r2, #0]
 8000422:	2201      	movs	r2, #1
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fd39 	bl	8001e9c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800042a:	e007      	b.n	800043c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <NRF24_csn+0x38>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <NRF24_csn+0x3c>)
 8000432:	8811      	ldrh	r1, [r2, #0]
 8000434:	2200      	movs	r2, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fd30 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000bc 	.word	0x200000bc
 8000448:	200000c0 	.word	0x200000c0

0800044c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <NRF24_ce+0x20>
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <NRF24_ce+0x38>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <NRF24_ce+0x3c>)
 8000460:	8811      	ldrh	r1, [r2, #0]
 8000462:	2201      	movs	r2, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fd19 	bl	8001e9c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800046a:	e007      	b.n	800047c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <NRF24_ce+0x38>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <NRF24_ce+0x3c>)
 8000472:	8811      	ldrh	r1, [r2, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fd10 	bl	8001e9c <HAL_GPIO_WritePin>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000bc 	.word	0x200000bc
 8000488:	200000c2 	.word	0x200000c2

0800048c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff ffb8 	bl	800040c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	f003 031f 	and.w	r3, r3, #31
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80004a6:	f107 010c 	add.w	r1, r7, #12
 80004aa:	2364      	movs	r3, #100	; 0x64
 80004ac:	2201      	movs	r2, #1
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <NRF24_read_register+0x4c>)
 80004b0:	f002 f9c4 	bl	800283c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	1c59      	adds	r1, r3, #1
 80004ba:	2364      	movs	r3, #100	; 0x64
 80004bc:	2201      	movs	r2, #1
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <NRF24_read_register+0x4c>)
 80004c0:	f002 faf8 	bl	8002ab4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80004c4:	7b7b      	ldrb	r3, [r7, #13]
 80004c6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff ff9f 	bl	800040c <NRF24_csn>
	return retData;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000c4 	.word	0x200000c4

080004dc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff ff8d 	bl	800040c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f003 031f 	and.w	r3, r3, #31
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2201      	movs	r2, #1
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <NRF24_read_registerN+0x4c>)
 8000506:	f002 f999 	bl	800283c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	b29a      	uxth	r2, r3
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	6839      	ldr	r1, [r7, #0]
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <NRF24_read_registerN+0x4c>)
 8000514:	f002 face 	bl	8002ab4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff77 	bl	800040c <NRF24_csn>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000c4 	.word	0x200000c4

0800052c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff65 	bl	800040c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	b2db      	uxtb	r3, r3
 800054a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000550:	f107 010c 	add.w	r1, r7, #12
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	2202      	movs	r2, #2
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <NRF24_write_register+0x40>)
 800055a:	f002 f96f 	bl	800283c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff54 	bl	800040c <NRF24_csn>
}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000c4 	.word	0x200000c4

08000570 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ff43 	bl	800040c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	b2db      	uxtb	r3, r3
 800058e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000590:	f107 010c 	add.w	r1, r7, #12
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <NRF24_write_registerN+0x4c>)
 800059a:	f002 f94f 	bl	800283c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	6839      	ldr	r1, [r7, #0]
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <NRF24_write_registerN+0x4c>)
 80005a8:	f002 f948 	bl	800283c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ff2d 	bl	800040c <NRF24_csn>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000c4 	.word	0x200000c4

080005c0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ff1d 	bl	800040c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80005d6:	f107 010f 	add.w	r1, r7, #15
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	2201      	movs	r2, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <NRF24_write_payload+0x40>)
 80005e0:	f002 f92c 	bl	800283c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <NRF24_write_payload+0x40>)
 80005ee:	f002 f925 	bl	800283c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ff0a 	bl	800040c <NRF24_csn>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000c4 	.word	0x200000c4

08000604 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000608:	21ff      	movs	r1, #255	; 0xff
 800060a:	20e1      	movs	r0, #225	; 0xe1
 800060c:	f7ff ff8e 	bl	800052c <NRF24_write_register>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000618:	21ff      	movs	r1, #255	; 0xff
 800061a:	20e2      	movs	r0, #226	; 0xe2
 800061c:	f7ff ff86 	bl	800052c <NRF24_write_register>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800062a:	2007      	movs	r0, #7
 800062c:	f7ff ff2e 	bl	800048c <NRF24_read_register>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000634:	79fb      	ldrb	r3, [r7, #7]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000640:	b082      	sub	sp, #8
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
 8000650:	4613      	mov	r3, r2
 8000652:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000654:	4b66      	ldr	r3, [pc, #408]	; (80007f0 <NRF24_begin+0x1b0>)
 8000656:	4618      	mov	r0, r3
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2258      	movs	r2, #88	; 0x58
 800065e:	4619      	mov	r1, r3
 8000660:	f002 ffb6 	bl	80035d0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000664:	4a63      	ldr	r2, [pc, #396]	; (80007f4 <NRF24_begin+0x1b4>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800066a:	4a63      	ldr	r2, [pc, #396]	; (80007f8 <NRF24_begin+0x1b8>)
 800066c:	887b      	ldrh	r3, [r7, #2]
 800066e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000670:	4a62      	ldr	r2, [pc, #392]	; (80007fc <NRF24_begin+0x1bc>)
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fec8 	bl	800040c <NRF24_csn>
	NRF24_ce(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff fee5 	bl	800044c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000682:	2005      	movs	r0, #5
 8000684:	f001 f97e 	bl	8001984 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000688:	2108      	movs	r1, #8
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff4e 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000690:	213f      	movs	r1, #63	; 0x3f
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff ff4a 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000698:	2103      	movs	r1, #3
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ff46 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80006a0:	2103      	movs	r1, #3
 80006a2:	2003      	movs	r0, #3
 80006a4:	f7ff ff42 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80006a8:	2103      	movs	r1, #3
 80006aa:	2004      	movs	r0, #4
 80006ac:	f7ff ff3e 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80006b0:	2102      	movs	r1, #2
 80006b2:	2005      	movs	r0, #5
 80006b4:	f7ff ff3a 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80006b8:	210f      	movs	r1, #15
 80006ba:	2006      	movs	r0, #6
 80006bc:	f7ff ff36 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80006c0:	210e      	movs	r1, #14
 80006c2:	2007      	movs	r0, #7
 80006c4:	f7ff ff32 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80006c8:	2100      	movs	r1, #0
 80006ca:	2008      	movs	r0, #8
 80006cc:	f7ff ff2e 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2009      	movs	r0, #9
 80006d4:	f7ff ff2a 	bl	800052c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80006d8:	23e7      	movs	r3, #231	; 0xe7
 80006da:	733b      	strb	r3, [r7, #12]
 80006dc:	23e7      	movs	r3, #231	; 0xe7
 80006de:	72fb      	strb	r3, [r7, #11]
 80006e0:	23e7      	movs	r3, #231	; 0xe7
 80006e2:	72bb      	strb	r3, [r7, #10]
 80006e4:	23e7      	movs	r3, #231	; 0xe7
 80006e6:	727b      	strb	r3, [r7, #9]
 80006e8:	23e7      	movs	r3, #231	; 0xe7
 80006ea:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2205      	movs	r2, #5
 80006f2:	4619      	mov	r1, r3
 80006f4:	200a      	movs	r0, #10
 80006f6:	f7ff ff3b 	bl	8000570 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80006fa:	23c2      	movs	r3, #194	; 0xc2
 80006fc:	733b      	strb	r3, [r7, #12]
 80006fe:	23c2      	movs	r3, #194	; 0xc2
 8000700:	72fb      	strb	r3, [r7, #11]
 8000702:	23c2      	movs	r3, #194	; 0xc2
 8000704:	72bb      	strb	r3, [r7, #10]
 8000706:	23c2      	movs	r3, #194	; 0xc2
 8000708:	727b      	strb	r3, [r7, #9]
 800070a:	23c2      	movs	r3, #194	; 0xc2
 800070c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2205      	movs	r2, #5
 8000714:	4619      	mov	r1, r3
 8000716:	200b      	movs	r0, #11
 8000718:	f7ff ff2a 	bl	8000570 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800071c:	21c3      	movs	r1, #195	; 0xc3
 800071e:	200c      	movs	r0, #12
 8000720:	f7ff ff04 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000724:	21c4      	movs	r1, #196	; 0xc4
 8000726:	200d      	movs	r0, #13
 8000728:	f7ff ff00 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800072c:	21c5      	movs	r1, #197	; 0xc5
 800072e:	200e      	movs	r0, #14
 8000730:	f7ff fefc 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000734:	21c6      	movs	r1, #198	; 0xc6
 8000736:	200f      	movs	r0, #15
 8000738:	f7ff fef8 	bl	800052c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800073c:	23e7      	movs	r3, #231	; 0xe7
 800073e:	733b      	strb	r3, [r7, #12]
 8000740:	23e7      	movs	r3, #231	; 0xe7
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	23e7      	movs	r3, #231	; 0xe7
 8000746:	72bb      	strb	r3, [r7, #10]
 8000748:	23e7      	movs	r3, #231	; 0xe7
 800074a:	727b      	strb	r3, [r7, #9]
 800074c:	23e7      	movs	r3, #231	; 0xe7
 800074e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2205      	movs	r2, #5
 8000756:	4619      	mov	r1, r3
 8000758:	2010      	movs	r0, #16
 800075a:	f7ff ff09 	bl	8000570 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800075e:	2100      	movs	r1, #0
 8000760:	2011      	movs	r0, #17
 8000762:	f7ff fee3 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000766:	2100      	movs	r1, #0
 8000768:	2012      	movs	r0, #18
 800076a:	f7ff fedf 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800076e:	2100      	movs	r1, #0
 8000770:	2013      	movs	r0, #19
 8000772:	f7ff fedb 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000776:	2100      	movs	r1, #0
 8000778:	2014      	movs	r0, #20
 800077a:	f7ff fed7 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800077e:	2100      	movs	r1, #0
 8000780:	2015      	movs	r0, #21
 8000782:	f7ff fed3 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000786:	2100      	movs	r1, #0
 8000788:	2016      	movs	r0, #22
 800078a:	f7ff fecf 	bl	800052c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800078e:	f000 fa87 	bl	8000ca0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	201c      	movs	r0, #28
 8000796:	f7ff fec9 	bl	800052c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800079a:	2100      	movs	r1, #0
 800079c:	201d      	movs	r0, #29
 800079e:	f7ff fec5 	bl	800052c <NRF24_write_register>
	printRadioSettings();
 80007a2:	f000 fa97 	bl	8000cd4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80007a6:	210f      	movs	r1, #15
 80007a8:	200f      	movs	r0, #15
 80007aa:	f000 f8ad 	bl	8000908 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f925 	bl	80009fe <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f95b 	bl	8000a70 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 f99e 	bl	8000afc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80007c0:	f000 f8f0 	bl	80009a4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80007c4:	2020      	movs	r0, #32
 80007c6:	f000 f8cf 	bl	8000968 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80007ca:	f000 fa60 	bl	8000c8e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80007ce:	204c      	movs	r0, #76	; 0x4c
 80007d0:	f000 f8b5 	bl	800093e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80007d4:	f7ff ff16 	bl	8000604 <NRF24_flush_tx>
	NRF24_flush_rx();
 80007d8:	f7ff ff1c 	bl	8000614 <NRF24_flush_rx>

	NRF24_powerDown();
 80007dc:	f000 f9b6 	bl	8000b4c <NRF24_powerDown>

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ea:	b002      	add	sp, #8
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000c4 	.word	0x200000c4
 80007f4:	200000bc 	.word	0x200000bc
 80007f8:	200000c0 	.word	0x200000c0
 80007fc:	200000c2 	.word	0x200000c2

08000800 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fe21 	bl	800044c <NRF24_ce>
	NRF24_flush_tx();
 800080a:	f7ff fefb 	bl	8000604 <NRF24_flush_tx>
	NRF24_flush_rx();
 800080e:	f7ff ff01 	bl	8000614 <NRF24_flush_rx>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000824:	f000 fa33 	bl	8000c8e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	4619      	mov	r1, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f9cc 	bl	8000bca <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000832:	f001 f89d 	bl	8001970 <HAL_GetTick>
 8000836:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000838:	230a      	movs	r3, #10
 800083a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800083c:	f107 030d 	add.w	r3, r7, #13
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	2008      	movs	r0, #8
 8000846:	f7ff fe49 	bl	80004dc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800084a:	f7ff feeb 	bl	8000624 <NRF24_get_status>
 800084e:	4603      	mov	r3, r0
 8000850:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000858:	2b00      	cmp	r3, #0
 800085a:	d107      	bne.n	800086c <NRF24_write+0x54>
 800085c:	f001 f888 	bl	8001970 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8e7      	bhi.n	800083c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800086c:	f107 010b 	add.w	r1, r7, #11
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <NRF24_write+0x90>)
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f9d6 	bl	8000c28 <NRF24_whatHappened>
	retStatus = tx_ok;
 800087c:	7b3b      	ldrb	r3, [r7, #12]
 800087e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <NRF24_write+0x90>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000888:	f000 f884 	bl	8000994 <NRF24_getDynamicPayloadSize>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <NRF24_write+0x94>)
 8000892:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000894:	f000 f80c 	bl	80008b0 <NRF24_available>
	NRF24_flush_tx();
 8000898:	f7ff feb4 	bl	8000604 <NRF24_flush_tx>
	return retStatus;
 800089c:	7bbb      	ldrb	r3, [r7, #14]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000b4 	.word	0x200000b4
 80008ac:	200000b5 	.word	0x200000b5

080008b0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f958 	bl	8000b6a <NRF24_availablePipe>
 80008ba:	4603      	mov	r3, r0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	bd80      	pop	{r7, pc}

080008c0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80008ca:	463b      	mov	r3, r7
 80008cc:	2205      	movs	r2, #5
 80008ce:	4619      	mov	r1, r3
 80008d0:	200a      	movs	r0, #10
 80008d2:	f7ff fe4d 	bl	8000570 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80008d6:	463b      	mov	r3, r7
 80008d8:	2205      	movs	r2, #5
 80008da:	4619      	mov	r1, r3
 80008dc:	2010      	movs	r0, #16
 80008de:	f7ff fe47 	bl	8000570 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80008e2:	2320      	movs	r3, #32
 80008e4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <NRF24_openWritingPipe+0x44>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	4293      	cmp	r3, r2
 80008ee:	bf28      	it	cs
 80008f0:	4613      	movcs	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	2011      	movs	r0, #17
 80008f8:	f7ff fe18 	bl	800052c <NRF24_write_register>
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000b6 	.word	0x200000b6

08000908 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	b25b      	sxtb	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b25b      	sxtb	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	2004      	movs	r0, #4
 8000932:	f7ff fdfb 	bl	800052c <NRF24_write_register>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000948:	237f      	movs	r3, #127	; 0x7f
 800094a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4293      	cmp	r3, r2
 8000952:	bf28      	it	cs
 8000954:	4613      	movcs	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	2005      	movs	r0, #5
 800095c:	f7ff fde6 	bl	800052c <NRF24_write_register>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000972:	2320      	movs	r3, #32
 8000974:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4293      	cmp	r3, r2
 800097c:	bf28      	it	cs
 800097e:	4613      	movcs	r3, r2
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b03      	ldr	r3, [pc, #12]	; (8000990 <NRF24_setPayloadSize+0x28>)
 8000984:	701a      	strb	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200000b6 	.word	0x200000b6

08000994 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000998:	2060      	movs	r0, #96	; 0x60
 800099a:	f7ff fd77 	bl	800048c <NRF24_read_register>
 800099e:	4603      	mov	r3, r0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80009a8:	201d      	movs	r0, #29
 80009aa:	f7ff fd6f 	bl	800048c <NRF24_read_register>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f023 0304 	bic.w	r3, r3, #4
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	201d      	movs	r0, #29
 80009ba:	f7ff fdb7 	bl	800052c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80009be:	2100      	movs	r1, #0
 80009c0:	201c      	movs	r0, #28
 80009c2:	f7ff fdb3 	bl	800052c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80009c6:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <NRF24_disableDynamicPayloads+0x2c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000b7 	.word	0x200000b7

080009d4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80009e4:	213f      	movs	r1, #63	; 0x3f
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fda0 	bl	800052c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80009ec:	e003      	b.n	80009f6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fd9b 	bl	800052c <NRF24_write_register>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f7ff fd3f 	bl	800048c <NRF24_read_register>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	f023 0306 	bic.w	r3, r3, #6
 8000a18:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d104      	bne.n	8000a2a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f043 0306 	orr.w	r3, r3, #6
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e019      	b.n	8000a5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d104      	bne.n	8000a3a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e011      	b.n	8000a5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d104      	bne.n	8000a4a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e009      	b.n	8000a5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d103      	bne.n	8000a5e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	f043 0306 	orr.w	r3, r3, #6
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	4619      	mov	r1, r3
 8000a62:	2006      	movs	r0, #6
 8000a64:	f7ff fd62 	bl	800052c <NRF24_write_register>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f7ff fd04 	bl	800048c <NRF24_read_register>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <NRF24_setDataRate+0x88>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a94:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d107      	bne.n	8000aac <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <NRF24_setDataRate+0x88>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	73bb      	strb	r3, [r7, #14]
 8000aaa:	e00d      	b.n	8000ac8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d107      	bne.n	8000ac2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <NRF24_setDataRate+0x88>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	73bb      	strb	r3, [r7, #14]
 8000ac0:	e002      	b.n	8000ac8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <NRF24_setDataRate+0x88>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	4619      	mov	r1, r3
 8000acc:	2006      	movs	r0, #6
 8000ace:	f7ff fd2d 	bl	800052c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff fcda 	bl	800048c <NRF24_read_register>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d102      	bne.n	8000ae8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e002      	b.n	8000aee <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <NRF24_setDataRate+0x88>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000b8 	.word	0x200000b8

08000afc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fcc0 	bl	800048c <NRF24_read_register>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f023 030c 	bic.w	r3, r3, #12
 8000b12:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00f      	beq.n	8000b3a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d104      	bne.n	8000b2a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e007      	b.n	8000b3a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fcf4 	bl	800052c <NRF24_write_register>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fc9b 	bl	800048c <NRF24_read_register>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f023 0302 	bic.w	r3, r3, #2
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fce3 	bl	800052c <NRF24_write_register>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b72:	f7ff fd57 	bl	8000624 <NRF24_get_status>
 8000b76:	4603      	mov	r3, r0
 8000b78:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf14      	ite	ne
 8000b84:	2301      	movne	r3, #1
 8000b86:	2300      	moveq	r3, #0
 8000b88:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d017      	beq.n	8000bc0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	085b      	lsrs	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	2007      	movs	r0, #7
 8000baa:	f7ff fcbf 	bl	800052c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000bb8:	2120      	movs	r1, #32
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f7ff fcb6 	bl	800052c <NRF24_write_register>
    }
  }
  return result;
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fc38 	bl	800044c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fc55 	bl	800048c <NRF24_read_register>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f023 0301 	bic.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fc9a 	bl	800052c <NRF24_write_register>
  NRF24_ce(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fc27 	bl	800044c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000bfe:	2096      	movs	r0, #150	; 0x96
 8000c00:	f7ff fbe4 	bl	80003cc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	4619      	mov	r1, r3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fcd9 	bl	80005c0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fc1c 	bl	800044c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000c14:	200f      	movs	r0, #15
 8000c16:	f7ff fbd9 	bl	80003cc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fc16 	bl	800044c <NRF24_ce>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000c34:	f7ff fcf6 	bl	8000624 <NRF24_get_status>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000c42:	2170      	movs	r1, #112	; 0x70
 8000c44:	2007      	movs	r0, #7
 8000c46:	f7ff fc71 	bl	800052c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bf14      	ite	ne
 8000c54:	2301      	movne	r3, #1
 8000c56:	2300      	moveq	r3, #0
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	701a      	strb	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000c92:	2170      	movs	r1, #112	; 0x70
 8000c94:	2007      	movs	r0, #7
 8000c96:	f7ff fc49 	bl	800052c <NRF24_write_register>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fbb0 	bl	800040c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000cac:	2350      	movs	r3, #80	; 0x50
 8000cae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000cb0:	2373      	movs	r3, #115	; 0x73
 8000cb2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000cb4:	1d39      	adds	r1, r7, #4
 8000cb6:	2364      	movs	r3, #100	; 0x64
 8000cb8:	2202      	movs	r2, #2
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <NRF24_ACTIVATE_cmd+0x30>)
 8000cbc:	f001 fdbe 	bl	800283c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fba3 	bl	800040c <NRF24_csn>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c4 	.word	0x200000c4

08000cd4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b0a1      	sub	sp, #132	; 0x84
 8000cd8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	49c3      	ldr	r1, [pc, #780]	; (8000fec <printRadioSettings+0x318>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fc8b 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa2e 	bl	800014c <strlen>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	f107 0108 	add.w	r1, r7, #8
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	48bd      	ldr	r0, [pc, #756]	; (8000ff0 <printRadioSettings+0x31c>)
 8000cfc:	f002 fad3 	bl	80032a6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fbc3 	bl	800048c <NRF24_read_register>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000d0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <printRadioSettings+0x5e>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	49b2      	ldr	r1, [pc, #712]	; (8000ff4 <printRadioSettings+0x320>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 fc66 	bl	80035fc <siprintf>
 8000d30:	e00c      	b.n	8000d4c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	49b0      	ldr	r1, [pc, #704]	; (8000ff8 <printRadioSettings+0x324>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fc5f 	bl	80035fc <siprintf>
 8000d3e:	e005      	b.n	8000d4c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	49ad      	ldr	r1, [pc, #692]	; (8000ffc <printRadioSettings+0x328>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fc58 	bl	80035fc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff f9fb 	bl	800014c <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	f107 0108 	add.w	r1, r7, #8
 8000d5e:	230a      	movs	r3, #10
 8000d60:	48a3      	ldr	r0, [pc, #652]	; (8000ff0 <printRadioSettings+0x31c>)
 8000d62:	f002 faa0 	bl	80032a6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fb90 	bl	800048c <NRF24_read_register>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d76:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bfcc      	ite	gt
 8000d7e:	2301      	movgt	r3, #1
 8000d80:	2300      	movle	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d8a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfcc      	ite	gt
 8000d92:	2301      	movgt	r3, #1
 8000d94:	2300      	movle	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d9e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bfcc      	ite	gt
 8000da6:	2301      	movgt	r3, #1
 8000da8:	2300      	movle	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bfcc      	ite	gt
 8000dba:	2301      	movgt	r3, #1
 8000dbc:	2300      	movle	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dc6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bfcc      	ite	gt
 8000dce:	2301      	movgt	r3, #1
 8000dd0:	2300      	movle	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dda:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bfcc      	ite	gt
 8000de2:	2301      	movgt	r3, #1
 8000de4:	2300      	movle	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f107 0008 	add.w	r0, r7, #8
 8000dec:	9303      	str	r3, [sp, #12]
 8000dee:	9402      	str	r4, [sp, #8]
 8000df0:	9101      	str	r1, [sp, #4]
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	4633      	mov	r3, r6
 8000df6:	462a      	mov	r2, r5
 8000df8:	4981      	ldr	r1, [pc, #516]	; (8001000 <printRadioSettings+0x32c>)
 8000dfa:	f002 fbff 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9a2 	bl	800014c <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f107 0108 	add.w	r1, r7, #8
 8000e10:	230a      	movs	r3, #10
 8000e12:	4877      	ldr	r0, [pc, #476]	; (8000ff0 <printRadioSettings+0x31c>)
 8000e14:	f002 fa47 	bl	80032a6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff fb37 	bl	800048c <NRF24_read_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e28:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bfcc      	ite	gt
 8000e30:	2301      	movgt	r3, #1
 8000e32:	2300      	movle	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e3c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bfcc      	ite	gt
 8000e44:	2301      	movgt	r3, #1
 8000e46:	2300      	movle	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e50:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfcc      	ite	gt
 8000e58:	2301      	movgt	r3, #1
 8000e5a:	2300      	movle	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e64:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bfcc      	ite	gt
 8000e6c:	2301      	movgt	r3, #1
 8000e6e:	2300      	movle	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e78:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bfcc      	ite	gt
 8000e80:	2301      	movgt	r3, #1
 8000e82:	2300      	movle	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e8c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bfcc      	ite	gt
 8000e94:	2301      	movgt	r3, #1
 8000e96:	2300      	movle	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f107 0008 	add.w	r0, r7, #8
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9402      	str	r4, [sp, #8]
 8000ea2:	9101      	str	r1, [sp, #4]
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	4633      	mov	r3, r6
 8000ea8:	462a      	mov	r2, r5
 8000eaa:	4956      	ldr	r1, [pc, #344]	; (8001004 <printRadioSettings+0x330>)
 8000eac:	f002 fba6 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f949 	bl	800014c <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f107 0108 	add.w	r1, r7, #8
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	484a      	ldr	r0, [pc, #296]	; (8000ff0 <printRadioSettings+0x31c>)
 8000ec6:	f002 f9ee 	bl	80032a6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f7ff fade 	bl	800048c <NRF24_read_register>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000ee4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4946      	ldr	r1, [pc, #280]	; (8001008 <printRadioSettings+0x334>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fb84 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f927 	bl	800014c <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f107 0108 	add.w	r1, r7, #8
 8000f06:	230a      	movs	r3, #10
 8000f08:	4839      	ldr	r0, [pc, #228]	; (8000ff0 <printRadioSettings+0x31c>)
 8000f0a:	f002 f9cc 	bl	80032a6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f7ff fabc 	bl	800048c <NRF24_read_register>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000f1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4939      	ldr	r1, [pc, #228]	; (800100c <printRadioSettings+0x338>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fb67 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f90a 	bl	800014c <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	230a      	movs	r3, #10
 8000f42:	482b      	ldr	r0, [pc, #172]	; (8000ff0 <printRadioSettings+0x31c>)
 8000f44:	f002 f9af 	bl	80032a6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f7ff fa9f 	bl	800048c <NRF24_read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <printRadioSettings+0x29a>
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	492a      	ldr	r1, [pc, #168]	; (8001010 <printRadioSettings+0x33c>)
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fb48 	bl	80035fc <siprintf>
 8000f6c:	e005      	b.n	8000f7a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4928      	ldr	r1, [pc, #160]	; (8001014 <printRadioSettings+0x340>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fb41 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f8e4 	bl	800014c <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f107 0108 	add.w	r1, r7, #8
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <printRadioSettings+0x31c>)
 8000f90:	f002 f989 	bl	80032a6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f98:	f003 0306 	and.w	r3, r3, #6
 8000f9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000fa0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000faa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <printRadioSettings+0x2ec>
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4918      	ldr	r1, [pc, #96]	; (8001018 <printRadioSettings+0x344>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fb1f 	bl	80035fc <siprintf>
 8000fbe:	e03b      	b.n	8001038 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000fc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <printRadioSettings+0x302>
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <printRadioSettings+0x348>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fb14 	bl	80035fc <siprintf>
 8000fd4:	e030      	b.n	8001038 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000fd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d122      	bne.n	8001024 <printRadioSettings+0x350>
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	490f      	ldr	r1, [pc, #60]	; (8001020 <printRadioSettings+0x34c>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fb09 	bl	80035fc <siprintf>
 8000fea:	e025      	b.n	8001038 <printRadioSettings+0x364>
 8000fec:	08003e78 	.word	0x08003e78
 8000ff0:	2000011c 	.word	0x2000011c
 8000ff4:	08003eac 	.word	0x08003eac
 8000ff8:	08003ec8 	.word	0x08003ec8
 8000ffc:	08003ee4 	.word	0x08003ee4
 8001000:	08003ef8 	.word	0x08003ef8
 8001004:	08003f3c 	.word	0x08003f3c
 8001008:	08003f88 	.word	0x08003f88
 800100c:	08003fa4 	.word	0x08003fa4
 8001010:	08003fb8 	.word	0x08003fb8
 8001014:	08003fd0 	.word	0x08003fd0
 8001018:	08003fe8 	.word	0x08003fe8
 800101c:	08003ffc 	.word	0x08003ffc
 8001020:	08004010 	.word	0x08004010
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001028:	2b03      	cmp	r3, #3
 800102a:	d105      	bne.n	8001038 <printRadioSettings+0x364>
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	49d7      	ldr	r1, [pc, #860]	; (8001390 <printRadioSettings+0x6bc>)
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fae2 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f885 	bl	800014c <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0108 	add.w	r1, r7, #8
 800104a:	230a      	movs	r3, #10
 800104c:	48d1      	ldr	r0, [pc, #836]	; (8001394 <printRadioSettings+0x6c0>)
 800104e:	f002 f92a 	bl	80032a6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001052:	463b      	mov	r3, r7
 8001054:	2205      	movs	r2, #5
 8001056:	4619      	mov	r1, r3
 8001058:	200a      	movs	r0, #10
 800105a:	f7ff fa3f 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	461c      	mov	r4, r3
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	461d      	mov	r5, r3
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	787a      	ldrb	r2, [r7, #1]
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	f107 0008 	add.w	r0, r7, #8
 8001070:	9102      	str	r1, [sp, #8]
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	462b      	mov	r3, r5
 8001078:	4622      	mov	r2, r4
 800107a:	49c7      	ldr	r1, [pc, #796]	; (8001398 <printRadioSettings+0x6c4>)
 800107c:	f002 fabe 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f861 	bl	800014c <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	230a      	movs	r3, #10
 8001094:	48bf      	ldr	r0, [pc, #764]	; (8001394 <printRadioSettings+0x6c0>)
 8001096:	f002 f906 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800109a:	463b      	mov	r3, r7
 800109c:	2205      	movs	r2, #5
 800109e:	4619      	mov	r1, r3
 80010a0:	200b      	movs	r0, #11
 80010a2:	f7ff fa1b 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	461c      	mov	r4, r3
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	461d      	mov	r5, r3
 80010ae:	78bb      	ldrb	r3, [r7, #2]
 80010b0:	787a      	ldrb	r2, [r7, #1]
 80010b2:	7839      	ldrb	r1, [r7, #0]
 80010b4:	f107 0008 	add.w	r0, r7, #8
 80010b8:	9102      	str	r1, [sp, #8]
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	462b      	mov	r3, r5
 80010c0:	4622      	mov	r2, r4
 80010c2:	49b6      	ldr	r1, [pc, #728]	; (800139c <printRadioSettings+0x6c8>)
 80010c4:	f002 fa9a 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f83d 	bl	800014c <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f107 0108 	add.w	r1, r7, #8
 80010da:	230a      	movs	r3, #10
 80010dc:	48ad      	ldr	r0, [pc, #692]	; (8001394 <printRadioSettings+0x6c0>)
 80010de:	f002 f8e2 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80010e2:	463b      	mov	r3, r7
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	200c      	movs	r0, #12
 80010ea:	f7ff f9f7 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010ee:	783b      	ldrb	r3, [r7, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	49aa      	ldr	r1, [pc, #680]	; (80013a0 <printRadioSettings+0x6cc>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fa7f 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f822 	bl	800014c <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f107 0108 	add.w	r1, r7, #8
 8001110:	230a      	movs	r3, #10
 8001112:	48a0      	ldr	r0, [pc, #640]	; (8001394 <printRadioSettings+0x6c0>)
 8001114:	f002 f8c7 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001118:	463b      	mov	r3, r7
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	200d      	movs	r0, #13
 8001120:	f7ff f9dc 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001124:	783b      	ldrb	r3, [r7, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	499d      	ldr	r1, [pc, #628]	; (80013a4 <printRadioSettings+0x6d0>)
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fa64 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f807 	bl	800014c <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	f107 0108 	add.w	r1, r7, #8
 8001146:	230a      	movs	r3, #10
 8001148:	4892      	ldr	r0, [pc, #584]	; (8001394 <printRadioSettings+0x6c0>)
 800114a:	f002 f8ac 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800114e:	463b      	mov	r3, r7
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	200e      	movs	r0, #14
 8001156:	f7ff f9c1 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800115a:	783b      	ldrb	r3, [r7, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4991      	ldr	r1, [pc, #580]	; (80013a8 <printRadioSettings+0x6d4>)
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fa49 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f7fe ffec 	bl	800014c <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f107 0108 	add.w	r1, r7, #8
 800117c:	230a      	movs	r3, #10
 800117e:	4885      	ldr	r0, [pc, #532]	; (8001394 <printRadioSettings+0x6c0>)
 8001180:	f002 f891 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001184:	463b      	mov	r3, r7
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	200f      	movs	r0, #15
 800118c:	f7ff f9a6 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001190:	783b      	ldrb	r3, [r7, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4984      	ldr	r1, [pc, #528]	; (80013ac <printRadioSettings+0x6d8>)
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fa2e 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7fe ffd1 	bl	800014c <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	230a      	movs	r3, #10
 80011b4:	4877      	ldr	r0, [pc, #476]	; (8001394 <printRadioSettings+0x6c0>)
 80011b6:	f002 f876 	bl	80032a6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80011ba:	463b      	mov	r3, r7
 80011bc:	2205      	movs	r2, #5
 80011be:	4619      	mov	r1, r3
 80011c0:	2010      	movs	r0, #16
 80011c2:	f7ff f98b 	bl	80004dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80011c6:	793b      	ldrb	r3, [r7, #4]
 80011c8:	461c      	mov	r4, r3
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	461d      	mov	r5, r3
 80011ce:	78bb      	ldrb	r3, [r7, #2]
 80011d0:	787a      	ldrb	r2, [r7, #1]
 80011d2:	7839      	ldrb	r1, [r7, #0]
 80011d4:	f107 0008 	add.w	r0, r7, #8
 80011d8:	9102      	str	r1, [sp, #8]
 80011da:	9201      	str	r2, [sp, #4]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	462b      	mov	r3, r5
 80011e0:	4622      	mov	r2, r4
 80011e2:	4973      	ldr	r1, [pc, #460]	; (80013b0 <printRadioSettings+0x6dc>)
 80011e4:	f002 fa0a 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7fe ffad 	bl	800014c <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0108 	add.w	r1, r7, #8
 80011fa:	230a      	movs	r3, #10
 80011fc:	4865      	ldr	r0, [pc, #404]	; (8001394 <printRadioSettings+0x6c0>)
 80011fe:	f002 f852 	bl	80032a6 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001202:	2011      	movs	r0, #17
 8001204:	f7ff f942 	bl	800048c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800120e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4966      	ldr	r1, [pc, #408]	; (80013b4 <printRadioSettings+0x6e0>)
 800121c:	4618      	mov	r0, r3
 800121e:	f002 f9ed 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ff90 	bl	800014c <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0108 	add.w	r1, r7, #8
 8001234:	230a      	movs	r3, #10
 8001236:	4857      	ldr	r0, [pc, #348]	; (8001394 <printRadioSettings+0x6c0>)
 8001238:	f002 f835 	bl	80032a6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800123c:	2012      	movs	r0, #18
 800123e:	f7ff f925 	bl	800048c <NRF24_read_register>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4958      	ldr	r1, [pc, #352]	; (80013b8 <printRadioSettings+0x6e4>)
 8001256:	4618      	mov	r0, r3
 8001258:	f002 f9d0 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ff73 	bl	800014c <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	230a      	movs	r3, #10
 8001270:	4848      	ldr	r0, [pc, #288]	; (8001394 <printRadioSettings+0x6c0>)
 8001272:	f002 f818 	bl	80032a6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001276:	2013      	movs	r0, #19
 8001278:	f7ff f908 	bl	800048c <NRF24_read_register>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001282:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	494b      	ldr	r1, [pc, #300]	; (80013bc <printRadioSettings+0x6e8>)
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f9b3 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ff56 	bl	800014c <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0108 	add.w	r1, r7, #8
 80012a8:	230a      	movs	r3, #10
 80012aa:	483a      	ldr	r0, [pc, #232]	; (8001394 <printRadioSettings+0x6c0>)
 80012ac:	f001 fffb 	bl	80032a6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80012b0:	2014      	movs	r0, #20
 80012b2:	f7ff f8eb 	bl	800048c <NRF24_read_register>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	493d      	ldr	r1, [pc, #244]	; (80013c0 <printRadioSettings+0x6ec>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 f996 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff39 	bl	800014c <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0108 	add.w	r1, r7, #8
 80012e2:	230a      	movs	r3, #10
 80012e4:	482b      	ldr	r0, [pc, #172]	; (8001394 <printRadioSettings+0x6c0>)
 80012e6:	f001 ffde 	bl	80032a6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80012ea:	2015      	movs	r0, #21
 80012ec:	f7ff f8ce 	bl	800048c <NRF24_read_register>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4930      	ldr	r1, [pc, #192]	; (80013c4 <printRadioSettings+0x6f0>)
 8001304:	4618      	mov	r0, r3
 8001306:	f002 f979 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff1c 	bl	800014c <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	f107 0108 	add.w	r1, r7, #8
 800131c:	230a      	movs	r3, #10
 800131e:	481d      	ldr	r0, [pc, #116]	; (8001394 <printRadioSettings+0x6c0>)
 8001320:	f001 ffc1 	bl	80032a6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001324:	2016      	movs	r0, #22
 8001326:	f7ff f8b1 	bl	800048c <NRF24_read_register>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4922      	ldr	r1, [pc, #136]	; (80013c8 <printRadioSettings+0x6f4>)
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f95c 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe feff 	bl	800014c <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	f107 0108 	add.w	r1, r7, #8
 8001356:	230a      	movs	r3, #10
 8001358:	480e      	ldr	r0, [pc, #56]	; (8001394 <printRadioSettings+0x6c0>)
 800135a:	f001 ffa4 	bl	80032a6 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800135e:	201c      	movs	r0, #28
 8001360:	f7ff f894 	bl	800048c <NRF24_read_register>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800136a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800136e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfcc      	ite	gt
 8001376:	2301      	movgt	r3, #1
 8001378:	2300      	movle	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800137e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001382:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfcc      	ite	gt
 800138a:	2301      	movgt	r3, #1
 800138c:	2300      	movle	r3, #0
 800138e:	e01d      	b.n	80013cc <printRadioSettings+0x6f8>
 8001390:	08004024 	.word	0x08004024
 8001394:	2000011c 	.word	0x2000011c
 8001398:	08004038 	.word	0x08004038
 800139c:	08004068 	.word	0x08004068
 80013a0:	08004098 	.word	0x08004098
 80013a4:	080040c0 	.word	0x080040c0
 80013a8:	080040e8 	.word	0x080040e8
 80013ac:	08004110 	.word	0x08004110
 80013b0:	08004138 	.word	0x08004138
 80013b4:	08004164 	.word	0x08004164
 80013b8:	08004180 	.word	0x08004180
 80013bc:	0800419c 	.word	0x0800419c
 80013c0:	080041b8 	.word	0x080041b8
 80013c4:	080041d4 	.word	0x080041d4
 80013c8:	080041f0 	.word	0x080041f0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bfcc      	ite	gt
 80013dc:	2301      	movgt	r3, #1
 80013de:	2300      	movle	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bfcc      	ite	gt
 80013f0:	2301      	movgt	r3, #1
 80013f2:	2300      	movle	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001400:	2b00      	cmp	r3, #0
 8001402:	bfcc      	ite	gt
 8001404:	2301      	movgt	r3, #1
 8001406:	2300      	movle	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800140c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001410:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001414:	2b00      	cmp	r3, #0
 8001416:	bfcc      	ite	gt
 8001418:	2301      	movgt	r3, #1
 800141a:	2300      	movle	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f107 0008 	add.w	r0, r7, #8
 8001422:	9303      	str	r3, [sp, #12]
 8001424:	9402      	str	r4, [sp, #8]
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	4633      	mov	r3, r6
 800142c:	462a      	mov	r2, r5
 800142e:	4936      	ldr	r1, [pc, #216]	; (8001508 <printRadioSettings+0x834>)
 8001430:	f002 f8e4 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fe87 	bl	800014c <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f107 0108 	add.w	r1, r7, #8
 8001446:	230a      	movs	r3, #10
 8001448:	4830      	ldr	r0, [pc, #192]	; (800150c <printRadioSettings+0x838>)
 800144a:	f001 ff2c 	bl	80032a6 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800144e:	201d      	movs	r0, #29
 8001450:	f7ff f81c 	bl	800048c <NRF24_read_register>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <printRadioSettings+0x7a0>
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4929      	ldr	r1, [pc, #164]	; (8001510 <printRadioSettings+0x83c>)
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f8c5 	bl	80035fc <siprintf>
 8001472:	e005      	b.n	8001480 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4926      	ldr	r1, [pc, #152]	; (8001514 <printRadioSettings+0x840>)
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f8be 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fe61 	bl	800014c <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <printRadioSettings+0x838>)
 8001496:	f001 ff06 	bl	80032a6 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800149a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <printRadioSettings+0x7e0>
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	491b      	ldr	r1, [pc, #108]	; (8001518 <printRadioSettings+0x844>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 f8a5 	bl	80035fc <siprintf>
 80014b2:	e005      	b.n	80014c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4918      	ldr	r1, [pc, #96]	; (800151c <printRadioSettings+0x848>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f89e 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe41 	bl	800014c <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	230a      	movs	r3, #10
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <printRadioSettings+0x838>)
 80014d6:	f001 fee6 	bl	80032a6 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4910      	ldr	r1, [pc, #64]	; (8001520 <printRadioSettings+0x84c>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f88b 	bl	80035fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fe2e 	bl	800014c <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f107 0108 	add.w	r1, r7, #8
 80014f8:	230a      	movs	r3, #10
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <printRadioSettings+0x838>)
 80014fc:	f001 fed3 	bl	80032a6 <HAL_UART_Transmit>
}
 8001500:	bf00      	nop
 8001502:	3774      	adds	r7, #116	; 0x74
 8001504:	46bd      	mov	sp, r7
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	0800420c 	.word	0x0800420c
 800150c:	2000011c 	.word	0x2000011c
 8001510:	08004258 	.word	0x08004258
 8001514:	08004270 	.word	0x08004270
 8001518:	08004288 	.word	0x08004288
 800151c:	080042a4 	.word	0x080042a4
 8001520:	08003e78 	.word	0x08003e78

08001524 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001524:	b084      	sub	sp, #16
 8001526:	b4b0      	push	{r4, r5, r7}
 8001528:	af00      	add	r7, sp, #0
 800152a:	f107 040c 	add.w	r4, r7, #12
 800152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <nrf24_DebugUART_Init+0x34>)
 8001534:	461d      	mov	r5, r3
 8001536:	f107 040c 	add.w	r4, r7, #12
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800154a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bcb0      	pop	{r4, r5, r7}
 8001554:	b004      	add	sp, #16
 8001556:	4770      	bx	lr
 8001558:	2000011c 	.word	0x2000011c

0800155c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <MX_SPI1_Init+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800156c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001590:	2220      	movs	r2, #32
 8001592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015a8:	220a      	movs	r2, #10
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015ae:	f001 f8c1 	bl	8002734 <HAL_SPI_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b8:	f7fe ff03 	bl	80003c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000168 	.word	0x20000168
 80015c4:	40013000 	.word	0x40013000

080015c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <HAL_SPI_MspInit+0x88>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d12f      	bne.n	8001648 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 80015ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_SPI_MspInit+0x8c>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001618:	23a0      	movs	r3, #160	; 0xa0
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_SPI_MspInit+0x90>)
 800162c:	f000 fab2 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001630:	2340      	movs	r3, #64	; 0x40
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_SPI_MspInit+0x90>)
 8001644:	f000 faa6 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013000 	.word	0x40013000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_MspInit+0x5c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_MspInit+0x5c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6193      	str	r3, [r2, #24]
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_MspInit+0x5c>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x5c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_MspInit+0x5c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x5c>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_MspInit+0x60>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_MspInit+0x60>)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f921 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f001 ff1c 	bl	800357c <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20005000 	.word	0x20005000
 8001770:	00000400 	.word	0x00000400
 8001774:	2000015c 	.word	0x2000015c
 8001778:	20000218 	.word	0x20000218

0800177c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_USART1_UART_Init+0x50>)
 8001790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017c0:	f001 fd24 	bl	800320c <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ca:	f7fe fdfa 	bl	80003c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001c0 	.word	0x200001c0
 80017d8:	40013800 	.word	0x40013800

080017dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_UART_MspInit+0x8c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d131      	bne.n	8001860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_UART_MspInit+0x90>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_UART_MspInit+0x90>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_UART_MspInit+0x90>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_UART_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <HAL_UART_MspInit+0x94>)
 8001842:	f000 f9a7 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x94>)
 800185c:	f000 f99a 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013800 	.word	0x40013800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010800 	.word	0x40010800

08001874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001874:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001876:	e003      	b.n	8001880 <LoopCopyDataInit>

08001878 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800187a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800187c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800187e:	3104      	adds	r1, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001880:	480a      	ldr	r0, [pc, #40]	; (80018ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001884:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001886:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001888:	d3f6      	bcc.n	8001878 <CopyDataInit>
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800188c:	e002      	b.n	8001894 <LoopFillZerobss>

0800188e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001890:	f842 3b04 	str.w	r3, [r2], #4

08001894 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001896:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001898:	d3f9      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800189a:	f7ff ff6f 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189e:	f001 fe73 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a2:	f7fe fce1 	bl	8000268 <main>
  bx lr
 80018a6:	4770      	bx	lr
  ldr r3, =_sidata
 80018a8:	08004420 	.word	0x08004420
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018b0:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 80018b4:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 80018b8:	20000214 	.word	0x20000214

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x28>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f92b 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff febe 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f935 	bl	8001b7a <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f90b 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000028 	.word	0x20000028
 8001944:	20000030 	.word	0x20000030
 8001948:	2000002c 	.word	0x2000002c

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x1c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x20>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_IncTick+0x20>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000030 	.word	0x20000030
 800196c:	20000200 	.word	0x20000200

08001970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <HAL_GetTick+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	20000200 	.word	0x20000200

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fff0 	bl	8001970 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffe0 	bl	8001970 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000030 	.word	0x20000030

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff90 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff49 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e169      	b.n	8001e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8158 	bne.w	8001e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a9a      	ldr	r2, [pc, #616]	; (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a98      	ldr	r2, [pc, #608]	; (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d875      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a98      	ldr	r2, [pc, #608]	; (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bdc:	4a96      	ldr	r2, [pc, #600]	; (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d86f      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001be2:	4a96      	ldr	r2, [pc, #600]	; (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d052      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001be8:	4a94      	ldr	r2, [pc, #592]	; (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d869      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bee:	4a94      	ldr	r2, [pc, #592]	; (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04c      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bf4:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d863      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a92      	ldr	r2, [pc, #584]	; (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d046      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001c00:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d85d      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d82a      	bhi.n	8001c60 <HAL_GPIO_Init+0xcc>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d859      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_GPIO_Init+0x80>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c7b 	.word	0x08001c7b
 8001c20:	08001cbd 	.word	0x08001cbd
 8001c24:	08001cc3 	.word	0x08001cc3
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cc3 	.word	0x08001cc3
 8001c30:	08001cc3 	.word	0x08001cc3
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cc3 	.word	0x08001cc3
 8001c40:	08001cc3 	.word	0x08001cc3
 8001c44:	08001cc3 	.word	0x08001cc3
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cc3 	.word	0x08001cc3
 8001c50:	08001cc3 	.word	0x08001cc3
 8001c54:	08001cc3 	.word	0x08001cc3
 8001c58:	08001c71 	.word	0x08001c71
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	4a79      	ldr	r2, [pc, #484]	; (8001e48 <HAL_GPIO_Init+0x2b4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e029      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e024      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e01a      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e013      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e009      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e003      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          break;
 8001cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d801      	bhi.n	8001cce <HAL_GPIO_Init+0x13a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_Init+0x13e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_GPIO_Init+0x14c>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x152>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	210f      	movs	r1, #15
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80b1 	beq.w	8001e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <HAL_GPIO_Init+0x2c0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1e8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d80:	2300      	movs	r3, #0
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d92:	492f      	ldr	r1, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	492c      	ldr	r1, [pc, #176]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4928      	ldr	r1, [pc, #160]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	491e      	ldr	r1, [pc, #120]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4918      	ldr	r1, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4914      	ldr	r1, [pc, #80]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d021      	beq.n	8001e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
 8001e30:	e021      	b.n	8001e76 <HAL_GPIO_Init+0x2e2>
 8001e32:	bf00      	nop
 8001e34:	10320000 	.word	0x10320000
 8001e38:	10310000 	.word	0x10310000
 8001e3c:	10220000 	.word	0x10220000
 8001e40:	10210000 	.word	0x10210000
 8001e44:	10120000 	.word	0x10120000
 8001e48:	10110000 	.word	0x10110000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	3301      	adds	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae8e 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	372c      	adds	r7, #44	; 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43d9      	mvns	r1, r3
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e26c      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8087 	beq.w	800202e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d00c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f2c:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5e>
 8001f38:	4b8c      	ldr	r3, [pc, #560]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d10b      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06c      	beq.n	800202c <HAL_RCC_OscConfig+0x12c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d168      	bne.n	800202c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e246      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x76>
 8001f68:	4b80      	ldr	r3, [pc, #512]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a7f      	ldr	r2, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e02e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a77      	ldr	r2, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e01d      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0xbc>
 8001fa2:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a71      	ldr	r2, [pc, #452]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a67      	ldr	r2, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fcc8 	bl	8001970 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fcc4 	bl	8001970 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1fa      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe4>
 8002002:	e014      	b.n	800202e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fcb4 	bl	8001970 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff fcb0 	bl	8001970 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1e6      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x10c>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b08      	cmp	r3, #8
 8002050:	d11c      	bne.n	800208c <HAL_RCC_OscConfig+0x18c>
 8002052:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x176>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1ba      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4939      	ldr	r1, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	e03a      	b.n	8002102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fc69 	bl	8001970 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff fc65 	bl	8001970 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e19b      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fc48 	bl	8001970 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fc44 	bl	8001970 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e17a      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03a      	beq.n	8002184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d019      	beq.n	800214a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_RCC_OscConfig+0x274>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff fc28 	bl	8001970 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff fc24 	bl	8001970 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e15a      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fad8 	bl	80026f8 <RCC_Delay>
 8002148:	e01c      	b.n	8002184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x274>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff fc0e 	bl	8001970 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	e00f      	b.n	8002178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7ff fc0a 	bl	8001970 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d908      	bls.n	8002178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e140      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	42420000 	.word	0x42420000
 8002174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b9e      	ldr	r3, [pc, #632]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e9      	bne.n	8002158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80a6 	beq.w	80022de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b97      	ldr	r3, [pc, #604]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a93      	ldr	r2, [pc, #588]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]
 80021ae:	4b91      	ldr	r3, [pc, #580]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	4b8e      	ldr	r3, [pc, #568]	; (80023f8 <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ca:	4b8b      	ldr	r3, [pc, #556]	; (80023f8 <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a8a      	ldr	r2, [pc, #552]	; (80023f8 <HAL_RCC_OscConfig+0x4f8>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fbcb 	bl	8001970 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7ff fbc7 	bl	8001970 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0fd      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <HAL_RCC_OscConfig+0x4f8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x312>
 8002204:	4b7b      	ldr	r3, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e02d      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x334>
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a72      	ldr	r2, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	e01c      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x356>
 800223c:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a6c      	ldr	r2, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a69      	ldr	r2, [pc, #420]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	e00b      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a63      	ldr	r2, [pc, #396]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fb7b 	bl	8001970 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff fb77 	bl	8001970 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0ab      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0ee      	beq.n	800227e <HAL_RCC_OscConfig+0x37e>
 80022a0:	e014      	b.n	80022cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fb65 	bl	8001970 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff fb61 	bl	8001970 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e095      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8081 	beq.w	80023ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d061      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d146      	bne.n	800238a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <HAL_RCC_OscConfig+0x4fc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fb35 	bl	8001970 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff fb31 	bl	8001970 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e067      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d108      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	492d      	ldr	r1, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a19      	ldr	r1, [r3, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	430b      	orrs	r3, r1
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x4fc>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7ff fb05 	bl	8001970 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff fb01 	bl	8001970 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e037      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x46a>
 8002388:	e02f      	b.n	80023ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <HAL_RCC_OscConfig+0x4fc>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff faee 	bl	8001970 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff faea 	bl	8001970 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e020      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x498>
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e013      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42420060 	.word	0x42420060

08002400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d0      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4965      	ldr	r1, [pc, #404]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800247e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d040      	beq.n	8002520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e073      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4936      	ldr	r1, [pc, #216]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fa3e 	bl	8001970 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7ff fa3a 	bl	8001970 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e053      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d210      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1cc>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f99c 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
 80025c8:	080043cc 	.word	0x080043cc
 80025cc:	20000028 	.word	0x20000028
 80025d0:	2000002c 	.word	0x2000002c

080025d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b490      	push	{r4, r7}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025dc:	1d3c      	adds	r4, r7, #4
 80025de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025e4:	f240 2301 	movw	r3, #513	; 0x201
 80025e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x40>
 800260e:	2b08      	cmp	r3, #8
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x46>
 8002612:	e02d      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	623b      	str	r3, [r7, #32]
      break;
 8002618:	e02d      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002626:	4413      	add	r3, r2
 8002628:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800262c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c5b      	lsrs	r3, r3, #17
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002646:	4413      	add	r3, r2
 8002648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800264c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002652:	fb02 f203 	mul.w	r2, r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	e004      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	623b      	str	r3, [r7, #32]
      break;
 800266e:	e002      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002672:	623b      	str	r3, [r7, #32]
      break;
 8002674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002676:	6a3b      	ldr	r3, [r7, #32]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc90      	pop	{r4, r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	080043bc 	.word	0x080043bc
 8002688:	40021000 	.word	0x40021000
 800268c:	007a1200 	.word	0x007a1200
 8002690:	003d0900 	.word	0x003d0900

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000028 	.word	0x20000028

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080043dc 	.word	0x080043dc

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffde 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	080043dc 	.word	0x080043dc

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000028 	.word	0x20000028
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e076      	b.n	8002834 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002756:	d009      	beq.n	800276c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	e005      	b.n	800276c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe ff1e 	bl	80015c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1a      	lsrs	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f002 0204 	and.w	r2, r2, #4
 8002812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_SPI_Transmit+0x22>
 800285a:	2302      	movs	r3, #2
 800285c:	e126      	b.n	8002aac <HAL_SPI_Transmit+0x270>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002866:	f7ff f883 	bl	8001970 <HAL_GetTick>
 800286a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002880:	e10b      	b.n	8002a9a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_SPI_Transmit+0x52>
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002892:	e102      	b.n	8002a9a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2203      	movs	r2, #3
 8002898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d10f      	bne.n	80028fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d007      	beq.n	800291a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002922:	d14b      	bne.n	80029bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_SPI_Transmit+0xf6>
 800292c:	8afb      	ldrh	r3, [r7, #22]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d13e      	bne.n	80029b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002956:	e02b      	b.n	80029b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d112      	bne.n	800298c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	1c9a      	adds	r2, r3, #2
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	86da      	strh	r2, [r3, #54]	; 0x36
 800298a:	e011      	b.n	80029b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298c:	f7fe fff0 	bl	8001970 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d803      	bhi.n	80029a4 <HAL_SPI_Transmit+0x168>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d102      	bne.n	80029aa <HAL_SPI_Transmit+0x16e>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029ae:	e074      	b.n	8002a9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ce      	bne.n	8002958 <HAL_SPI_Transmit+0x11c>
 80029ba:	e04c      	b.n	8002a56 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit+0x18e>
 80029c4:	8afb      	ldrh	r3, [r7, #22]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d140      	bne.n	8002a4c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029f0:	e02c      	b.n	8002a4c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d113      	bne.n	8002a28 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a26:	e011      	b.n	8002a4c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a28:	f7fe ffa2 	bl	8001970 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d803      	bhi.n	8002a40 <HAL_SPI_Transmit+0x204>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d102      	bne.n	8002a46 <HAL_SPI_Transmit+0x20a>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a4a:	e026      	b.n	8002a9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1cd      	bne.n	80029f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbb8 	bl	80031d0 <SPI_EndRxTxTransaction>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e000      	b.n	8002a9a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad0:	d112      	bne.n	8002af8 <HAL_SPI_Receive+0x44>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2204      	movs	r2, #4
 8002ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f8f1 	bl	8002cd6 <HAL_SPI_TransmitReceive>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e0ea      	b.n	8002cce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_Receive+0x52>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0e3      	b.n	8002cce <HAL_SPI_Receive+0x21a>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b0e:	f7fe ff2f 	bl	8001970 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b24:	e0ca      	b.n	8002cbc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Receive+0x7e>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b36:	e0c1      	b.n	8002cbc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d162      	bne.n	8002c8c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bc6:	e02e      	b.n	8002c26 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d115      	bne.n	8002c02 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f103 020c 	add.w	r2, r3, #12
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	7812      	ldrb	r2, [r2, #0]
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c00:	e011      	b.n	8002c26 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c02:	f7fe feb5 	bl	8001970 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d803      	bhi.n	8002c1a <HAL_SPI_Receive+0x166>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d102      	bne.n	8002c20 <HAL_SPI_Receive+0x16c>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c24:	e04a      	b.n	8002cbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1cb      	bne.n	8002bc8 <HAL_SPI_Receive+0x114>
 8002c30:	e031      	b.n	8002c96 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	1c9a      	adds	r2, r3, #2
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c66:	e011      	b.n	8002c8c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c68:	f7fe fe82 	bl	8001970 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d803      	bhi.n	8002c80 <HAL_SPI_Receive+0x1cc>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Receive+0x1d2>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c8a:	e017      	b.n	8002cbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cd      	bne.n	8002c32 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fa46 	bl	800312c <SPI_EndRxTransaction>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	75fb      	strb	r3, [r7, #23]
 8002cb8:	e000      	b.n	8002cbc <HAL_SPI_Receive+0x208>
  }

error :
 8002cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08c      	sub	sp, #48	; 0x30
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x26>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e18a      	b.n	8003012 <HAL_SPI_TransmitReceive+0x33c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d04:	f7fe fe34 	bl	8001970 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d00f      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x70>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2c:	d107      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x68>
 8002d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d44:	e15b      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x82>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x82>
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d5e:	e14e      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d003      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2205      	movs	r2, #5
 8002d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	887a      	ldrh	r2, [r7, #2]
 8002d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d007      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd0:	d178      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x10a>
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d166      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e04:	e053      	b.n	8002eae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11b      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x176>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x176>
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d113      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d119      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x1b8>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d014      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	1c9a      	adds	r2, r3, #2
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e8e:	f7fe fd6f 	bl	8001970 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d807      	bhi.n	8002eae <HAL_SPI_TransmitReceive+0x1d8>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d003      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002eac:	e0a7      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1a6      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x130>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1a1      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x130>
 8002ec2:	e07c      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0x1fc>
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d16b      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	330c      	adds	r3, #12
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	e057      	b.n	8002faa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11c      	bne.n	8002f42 <HAL_SPI_TransmitReceive+0x26c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d017      	beq.n	8002f42 <HAL_SPI_TransmitReceive+0x26c>
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d114      	bne.n	8002f42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d119      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x2ae>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d014      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f80:	2301      	movs	r3, #1
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f84:	f7fe fcf4 	bl	8001970 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d803      	bhi.n	8002f9c <HAL_SPI_TransmitReceive+0x2c6>
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d102      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x2cc>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fa8:	e029      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1a2      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x224>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d19d      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f904 	bl	80031d0 <SPI_EndRxTxTransaction>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fda:	e010      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e000      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800300e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003012:	4618      	mov	r0, r3
 8003014:	3730      	adds	r7, #48	; 0x30
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800302c:	f7fe fca0 	bl	8001970 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800303c:	f7fe fc98 	bl	8001970 <HAL_GetTick>
 8003040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	015b      	lsls	r3, r3, #5
 8003048:	0d1b      	lsrs	r3, r3, #20
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	e054      	b.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d050      	beq.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800305c:	f7fe fc88 	bl	8001970 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d111      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003094:	d004      	beq.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d107      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d10f      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e017      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d19b      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000028 	.word	0x20000028

0800312c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003140:	d111      	bne.n	8003166 <SPI_EndRxTransaction+0x3a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314a:	d004      	beq.n	8003156 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003154:	d107      	bne.n	8003166 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003164:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316e:	d117      	bne.n	80031a0 <SPI_EndRxTransaction+0x74>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d112      	bne.n	80031a0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	2101      	movs	r1, #1
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff ff49 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e013      	b.n	80031c8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ff36 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e000      	b.n	80031c8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff18 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e000      	b.n	8003204 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e03f      	b.n	800329e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fad2 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f905 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af02      	add	r7, sp, #8
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d17c      	bne.n	80033c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_UART_Transmit+0x2c>
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e075      	b.n	80033c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Transmit+0x3e>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e06e      	b.n	80033c2 <HAL_UART_Transmit+0x11c>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2221      	movs	r2, #33	; 0x21
 80032f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fb39 	bl	8001970 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d108      	bne.n	8003328 <HAL_UART_Transmit+0x82>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e003      	b.n	8003330 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003338:	e02a      	b.n	8003390 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f840 	bl	80033ca <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e036      	b.n	80033c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3302      	adds	r3, #2
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	e007      	b.n	8003382 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	3301      	adds	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1cf      	bne.n	800333a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f810 	bl	80033ca <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e006      	b.n	80033c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033da:	e02c      	b.n	8003436 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d028      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x30>
 80033ea:	f7fe fac1 	bl	8001970 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d21d      	bcs.n	8003436 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003408:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	429a      	cmp	r2, r3
 8003452:	d0c3      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800349a:	f023 030c 	bic.w	r3, r3, #12
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <UART_SetConfig+0x114>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7ff f902 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	e002      	b.n	80034d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7ff f8ea 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009a      	lsls	r2, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <UART_SetConfig+0x118>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	0119      	lsls	r1, r3, #4
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009a      	lsls	r2, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	fbb2 f2f3 	udiv	r2, r2, r3
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <UART_SetConfig+0x118>)
 800350e:	fba3 0302 	umull	r0, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2064      	movs	r0, #100	; 0x64
 8003516:	fb00 f303 	mul.w	r3, r0, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	3332      	adds	r3, #50	; 0x32
 8003520:	4a15      	ldr	r2, [pc, #84]	; (8003578 <UART_SetConfig+0x118>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352c:	4419      	add	r1, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009a      	lsls	r2, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <UART_SetConfig+0x118>)
 8003546:	fba3 0302 	umull	r0, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2064      	movs	r0, #100	; 0x64
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	3332      	adds	r3, #50	; 0x32
 8003558:	4a07      	ldr	r2, [pc, #28]	; (8003578 <UART_SetConfig+0x118>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	440a      	add	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40013800 	.word	0x40013800
 8003578:	51eb851f 	.word	0x51eb851f

0800357c <__errno>:
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <__errno+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000034 	.word	0x20000034

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2600      	movs	r6, #0
 800358c:	4d0c      	ldr	r5, [pc, #48]	; (80035c0 <__libc_init_array+0x38>)
 800358e:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	f000 fc5c 	bl	8003e54 <_init>
 800359c:	2600      	movs	r6, #0
 800359e:	4d0a      	ldr	r5, [pc, #40]	; (80035c8 <__libc_init_array+0x40>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <__libc_init_array+0x44>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08004418 	.word	0x08004418
 80035c4:	08004418 	.word	0x08004418
 80035c8:	08004418 	.word	0x08004418
 80035cc:	0800441c 	.word	0x0800441c

080035d0 <memcpy>:
 80035d0:	440a      	add	r2, r1
 80035d2:	4291      	cmp	r1, r2
 80035d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035d8:	d100      	bne.n	80035dc <memcpy+0xc>
 80035da:	4770      	bx	lr
 80035dc:	b510      	push	{r4, lr}
 80035de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035e8:	d1f9      	bne.n	80035de <memcpy+0xe>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <memset>:
 80035ec:	4603      	mov	r3, r0
 80035ee:	4402      	add	r2, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <siprintf>:
 80035fc:	b40e      	push	{r1, r2, r3}
 80035fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003602:	b500      	push	{lr}
 8003604:	b09c      	sub	sp, #112	; 0x70
 8003606:	ab1d      	add	r3, sp, #116	; 0x74
 8003608:	9002      	str	r0, [sp, #8]
 800360a:	9006      	str	r0, [sp, #24]
 800360c:	9107      	str	r1, [sp, #28]
 800360e:	9104      	str	r1, [sp, #16]
 8003610:	4808      	ldr	r0, [pc, #32]	; (8003634 <siprintf+0x38>)
 8003612:	4909      	ldr	r1, [pc, #36]	; (8003638 <siprintf+0x3c>)
 8003614:	f853 2b04 	ldr.w	r2, [r3], #4
 8003618:	9105      	str	r1, [sp, #20]
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	a902      	add	r1, sp, #8
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	f000 f868 	bl	80036f4 <_svfiprintf_r>
 8003624:	2200      	movs	r2, #0
 8003626:	9b02      	ldr	r3, [sp, #8]
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	b01c      	add	sp, #112	; 0x70
 800362c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003630:	b003      	add	sp, #12
 8003632:	4770      	bx	lr
 8003634:	20000034 	.word	0x20000034
 8003638:	ffff0208 	.word	0xffff0208

0800363c <__ssputs_r>:
 800363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	688e      	ldr	r6, [r1, #8]
 8003642:	4682      	mov	sl, r0
 8003644:	429e      	cmp	r6, r3
 8003646:	460c      	mov	r4, r1
 8003648:	4690      	mov	r8, r2
 800364a:	461f      	mov	r7, r3
 800364c:	d838      	bhi.n	80036c0 <__ssputs_r+0x84>
 800364e:	898a      	ldrh	r2, [r1, #12]
 8003650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003654:	d032      	beq.n	80036bc <__ssputs_r+0x80>
 8003656:	6825      	ldr	r5, [r4, #0]
 8003658:	6909      	ldr	r1, [r1, #16]
 800365a:	3301      	adds	r3, #1
 800365c:	eba5 0901 	sub.w	r9, r5, r1
 8003660:	6965      	ldr	r5, [r4, #20]
 8003662:	444b      	add	r3, r9
 8003664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800366c:	106d      	asrs	r5, r5, #1
 800366e:	429d      	cmp	r5, r3
 8003670:	bf38      	it	cc
 8003672:	461d      	movcc	r5, r3
 8003674:	0553      	lsls	r3, r2, #21
 8003676:	d531      	bpl.n	80036dc <__ssputs_r+0xa0>
 8003678:	4629      	mov	r1, r5
 800367a:	f000 fb45 	bl	8003d08 <_malloc_r>
 800367e:	4606      	mov	r6, r0
 8003680:	b950      	cbnz	r0, 8003698 <__ssputs_r+0x5c>
 8003682:	230c      	movs	r3, #12
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f8ca 3000 	str.w	r3, [sl]
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003698:	464a      	mov	r2, r9
 800369a:	6921      	ldr	r1, [r4, #16]
 800369c:	f7ff ff98 	bl	80035d0 <memcpy>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	6126      	str	r6, [r4, #16]
 80036ae:	444e      	add	r6, r9
 80036b0:	6026      	str	r6, [r4, #0]
 80036b2:	463e      	mov	r6, r7
 80036b4:	6165      	str	r5, [r4, #20]
 80036b6:	eba5 0509 	sub.w	r5, r5, r9
 80036ba:	60a5      	str	r5, [r4, #8]
 80036bc:	42be      	cmp	r6, r7
 80036be:	d900      	bls.n	80036c2 <__ssputs_r+0x86>
 80036c0:	463e      	mov	r6, r7
 80036c2:	4632      	mov	r2, r6
 80036c4:	4641      	mov	r1, r8
 80036c6:	6820      	ldr	r0, [r4, #0]
 80036c8:	f000 fab8 	bl	8003c3c <memmove>
 80036cc:	68a3      	ldr	r3, [r4, #8]
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	1b9b      	subs	r3, r3, r6
 80036d2:	4432      	add	r2, r6
 80036d4:	2000      	movs	r0, #0
 80036d6:	60a3      	str	r3, [r4, #8]
 80036d8:	6022      	str	r2, [r4, #0]
 80036da:	e7db      	b.n	8003694 <__ssputs_r+0x58>
 80036dc:	462a      	mov	r2, r5
 80036de:	f000 fb6d 	bl	8003dbc <_realloc_r>
 80036e2:	4606      	mov	r6, r0
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d1e1      	bne.n	80036ac <__ssputs_r+0x70>
 80036e8:	4650      	mov	r0, sl
 80036ea:	6921      	ldr	r1, [r4, #16]
 80036ec:	f000 fac0 	bl	8003c70 <_free_r>
 80036f0:	e7c7      	b.n	8003682 <__ssputs_r+0x46>
	...

080036f4 <_svfiprintf_r>:
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	4698      	mov	r8, r3
 80036fa:	898b      	ldrh	r3, [r1, #12]
 80036fc:	4607      	mov	r7, r0
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	460d      	mov	r5, r1
 8003702:	4614      	mov	r4, r2
 8003704:	b09d      	sub	sp, #116	; 0x74
 8003706:	d50e      	bpl.n	8003726 <_svfiprintf_r+0x32>
 8003708:	690b      	ldr	r3, [r1, #16]
 800370a:	b963      	cbnz	r3, 8003726 <_svfiprintf_r+0x32>
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	f000 fafb 	bl	8003d08 <_malloc_r>
 8003712:	6028      	str	r0, [r5, #0]
 8003714:	6128      	str	r0, [r5, #16]
 8003716:	b920      	cbnz	r0, 8003722 <_svfiprintf_r+0x2e>
 8003718:	230c      	movs	r3, #12
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	e0d1      	b.n	80038c6 <_svfiprintf_r+0x1d2>
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	616b      	str	r3, [r5, #20]
 8003726:	2300      	movs	r3, #0
 8003728:	9309      	str	r3, [sp, #36]	; 0x24
 800372a:	2320      	movs	r3, #32
 800372c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003730:	2330      	movs	r3, #48	; 0x30
 8003732:	f04f 0901 	mov.w	r9, #1
 8003736:	f8cd 800c 	str.w	r8, [sp, #12]
 800373a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038e0 <_svfiprintf_r+0x1ec>
 800373e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003742:	4623      	mov	r3, r4
 8003744:	469a      	mov	sl, r3
 8003746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800374a:	b10a      	cbz	r2, 8003750 <_svfiprintf_r+0x5c>
 800374c:	2a25      	cmp	r2, #37	; 0x25
 800374e:	d1f9      	bne.n	8003744 <_svfiprintf_r+0x50>
 8003750:	ebba 0b04 	subs.w	fp, sl, r4
 8003754:	d00b      	beq.n	800376e <_svfiprintf_r+0x7a>
 8003756:	465b      	mov	r3, fp
 8003758:	4622      	mov	r2, r4
 800375a:	4629      	mov	r1, r5
 800375c:	4638      	mov	r0, r7
 800375e:	f7ff ff6d 	bl	800363c <__ssputs_r>
 8003762:	3001      	adds	r0, #1
 8003764:	f000 80aa 	beq.w	80038bc <_svfiprintf_r+0x1c8>
 8003768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800376a:	445a      	add	r2, fp
 800376c:	9209      	str	r2, [sp, #36]	; 0x24
 800376e:	f89a 3000 	ldrb.w	r3, [sl]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80a2 	beq.w	80038bc <_svfiprintf_r+0x1c8>
 8003778:	2300      	movs	r3, #0
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003782:	f10a 0a01 	add.w	sl, sl, #1
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	9307      	str	r3, [sp, #28]
 800378a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378e:	931a      	str	r3, [sp, #104]	; 0x68
 8003790:	4654      	mov	r4, sl
 8003792:	2205      	movs	r2, #5
 8003794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003798:	4851      	ldr	r0, [pc, #324]	; (80038e0 <_svfiprintf_r+0x1ec>)
 800379a:	f000 fa41 	bl	8003c20 <memchr>
 800379e:	9a04      	ldr	r2, [sp, #16]
 80037a0:	b9d8      	cbnz	r0, 80037da <_svfiprintf_r+0xe6>
 80037a2:	06d0      	lsls	r0, r2, #27
 80037a4:	bf44      	itt	mi
 80037a6:	2320      	movmi	r3, #32
 80037a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ac:	0711      	lsls	r1, r2, #28
 80037ae:	bf44      	itt	mi
 80037b0:	232b      	movmi	r3, #43	; 0x2b
 80037b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ba:	2b2a      	cmp	r3, #42	; 0x2a
 80037bc:	d015      	beq.n	80037ea <_svfiprintf_r+0xf6>
 80037be:	4654      	mov	r4, sl
 80037c0:	2000      	movs	r0, #0
 80037c2:	f04f 0c0a 	mov.w	ip, #10
 80037c6:	9a07      	ldr	r2, [sp, #28]
 80037c8:	4621      	mov	r1, r4
 80037ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ce:	3b30      	subs	r3, #48	; 0x30
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d94e      	bls.n	8003872 <_svfiprintf_r+0x17e>
 80037d4:	b1b0      	cbz	r0, 8003804 <_svfiprintf_r+0x110>
 80037d6:	9207      	str	r2, [sp, #28]
 80037d8:	e014      	b.n	8003804 <_svfiprintf_r+0x110>
 80037da:	eba0 0308 	sub.w	r3, r0, r8
 80037de:	fa09 f303 	lsl.w	r3, r9, r3
 80037e2:	4313      	orrs	r3, r2
 80037e4:	46a2      	mov	sl, r4
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	e7d2      	b.n	8003790 <_svfiprintf_r+0x9c>
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	1d19      	adds	r1, r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	9103      	str	r1, [sp, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bfbb      	ittet	lt
 80037f6:	425b      	neglt	r3, r3
 80037f8:	f042 0202 	orrlt.w	r2, r2, #2
 80037fc:	9307      	strge	r3, [sp, #28]
 80037fe:	9307      	strlt	r3, [sp, #28]
 8003800:	bfb8      	it	lt
 8003802:	9204      	strlt	r2, [sp, #16]
 8003804:	7823      	ldrb	r3, [r4, #0]
 8003806:	2b2e      	cmp	r3, #46	; 0x2e
 8003808:	d10c      	bne.n	8003824 <_svfiprintf_r+0x130>
 800380a:	7863      	ldrb	r3, [r4, #1]
 800380c:	2b2a      	cmp	r3, #42	; 0x2a
 800380e:	d135      	bne.n	800387c <_svfiprintf_r+0x188>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	3402      	adds	r4, #2
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	9203      	str	r2, [sp, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038f0 <_svfiprintf_r+0x1fc>
 8003828:	2203      	movs	r2, #3
 800382a:	4650      	mov	r0, sl
 800382c:	7821      	ldrb	r1, [r4, #0]
 800382e:	f000 f9f7 	bl	8003c20 <memchr>
 8003832:	b140      	cbz	r0, 8003846 <_svfiprintf_r+0x152>
 8003834:	2340      	movs	r3, #64	; 0x40
 8003836:	eba0 000a 	sub.w	r0, r0, sl
 800383a:	fa03 f000 	lsl.w	r0, r3, r0
 800383e:	9b04      	ldr	r3, [sp, #16]
 8003840:	3401      	adds	r4, #1
 8003842:	4303      	orrs	r3, r0
 8003844:	9304      	str	r3, [sp, #16]
 8003846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384a:	2206      	movs	r2, #6
 800384c:	4825      	ldr	r0, [pc, #148]	; (80038e4 <_svfiprintf_r+0x1f0>)
 800384e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003852:	f000 f9e5 	bl	8003c20 <memchr>
 8003856:	2800      	cmp	r0, #0
 8003858:	d038      	beq.n	80038cc <_svfiprintf_r+0x1d8>
 800385a:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <_svfiprintf_r+0x1f4>)
 800385c:	bb1b      	cbnz	r3, 80038a6 <_svfiprintf_r+0x1b2>
 800385e:	9b03      	ldr	r3, [sp, #12]
 8003860:	3307      	adds	r3, #7
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	3308      	adds	r3, #8
 8003868:	9303      	str	r3, [sp, #12]
 800386a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800386c:	4433      	add	r3, r6
 800386e:	9309      	str	r3, [sp, #36]	; 0x24
 8003870:	e767      	b.n	8003742 <_svfiprintf_r+0x4e>
 8003872:	460c      	mov	r4, r1
 8003874:	2001      	movs	r0, #1
 8003876:	fb0c 3202 	mla	r2, ip, r2, r3
 800387a:	e7a5      	b.n	80037c8 <_svfiprintf_r+0xd4>
 800387c:	2300      	movs	r3, #0
 800387e:	f04f 0c0a 	mov.w	ip, #10
 8003882:	4619      	mov	r1, r3
 8003884:	3401      	adds	r4, #1
 8003886:	9305      	str	r3, [sp, #20]
 8003888:	4620      	mov	r0, r4
 800388a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800388e:	3a30      	subs	r2, #48	; 0x30
 8003890:	2a09      	cmp	r2, #9
 8003892:	d903      	bls.n	800389c <_svfiprintf_r+0x1a8>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0c5      	beq.n	8003824 <_svfiprintf_r+0x130>
 8003898:	9105      	str	r1, [sp, #20]
 800389a:	e7c3      	b.n	8003824 <_svfiprintf_r+0x130>
 800389c:	4604      	mov	r4, r0
 800389e:	2301      	movs	r3, #1
 80038a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a4:	e7f0      	b.n	8003888 <_svfiprintf_r+0x194>
 80038a6:	ab03      	add	r3, sp, #12
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	462a      	mov	r2, r5
 80038ac:	4638      	mov	r0, r7
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <_svfiprintf_r+0x1f8>)
 80038b0:	a904      	add	r1, sp, #16
 80038b2:	f3af 8000 	nop.w
 80038b6:	1c42      	adds	r2, r0, #1
 80038b8:	4606      	mov	r6, r0
 80038ba:	d1d6      	bne.n	800386a <_svfiprintf_r+0x176>
 80038bc:	89ab      	ldrh	r3, [r5, #12]
 80038be:	065b      	lsls	r3, r3, #25
 80038c0:	f53f af2c 	bmi.w	800371c <_svfiprintf_r+0x28>
 80038c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038c6:	b01d      	add	sp, #116	; 0x74
 80038c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038cc:	ab03      	add	r3, sp, #12
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	462a      	mov	r2, r5
 80038d2:	4638      	mov	r0, r7
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <_svfiprintf_r+0x1f8>)
 80038d6:	a904      	add	r1, sp, #16
 80038d8:	f000 f87c 	bl	80039d4 <_printf_i>
 80038dc:	e7eb      	b.n	80038b6 <_svfiprintf_r+0x1c2>
 80038de:	bf00      	nop
 80038e0:	080043e4 	.word	0x080043e4
 80038e4:	080043ee 	.word	0x080043ee
 80038e8:	00000000 	.word	0x00000000
 80038ec:	0800363d 	.word	0x0800363d
 80038f0:	080043ea 	.word	0x080043ea

080038f4 <_printf_common>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	4616      	mov	r6, r2
 80038fa:	4699      	mov	r9, r3
 80038fc:	688a      	ldr	r2, [r1, #8]
 80038fe:	690b      	ldr	r3, [r1, #16]
 8003900:	4607      	mov	r7, r0
 8003902:	4293      	cmp	r3, r2
 8003904:	bfb8      	it	lt
 8003906:	4613      	movlt	r3, r2
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390e:	460c      	mov	r4, r1
 8003910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003914:	b10a      	cbz	r2, 800391a <_printf_common+0x26>
 8003916:	3301      	adds	r3, #1
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	0699      	lsls	r1, r3, #26
 800391e:	bf42      	ittt	mi
 8003920:	6833      	ldrmi	r3, [r6, #0]
 8003922:	3302      	addmi	r3, #2
 8003924:	6033      	strmi	r3, [r6, #0]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	f015 0506 	ands.w	r5, r5, #6
 800392c:	d106      	bne.n	800393c <_printf_common+0x48>
 800392e:	f104 0a19 	add.w	sl, r4, #25
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	42ab      	cmp	r3, r5
 800393a:	dc28      	bgt.n	800398e <_printf_common+0x9a>
 800393c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003940:	1e13      	subs	r3, r2, #0
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	bf18      	it	ne
 8003946:	2301      	movne	r3, #1
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d42d      	bmi.n	80039a8 <_printf_common+0xb4>
 800394c:	4649      	mov	r1, r9
 800394e:	4638      	mov	r0, r7
 8003950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003954:	47c0      	blx	r8
 8003956:	3001      	adds	r0, #1
 8003958:	d020      	beq.n	800399c <_printf_common+0xa8>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	68e5      	ldr	r5, [r4, #12]
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf18      	it	ne
 8003966:	2500      	movne	r5, #0
 8003968:	6832      	ldr	r2, [r6, #0]
 800396a:	f04f 0600 	mov.w	r6, #0
 800396e:	68a3      	ldr	r3, [r4, #8]
 8003970:	bf08      	it	eq
 8003972:	1aad      	subeq	r5, r5, r2
 8003974:	6922      	ldr	r2, [r4, #16]
 8003976:	bf08      	it	eq
 8003978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800397c:	4293      	cmp	r3, r2
 800397e:	bfc4      	itt	gt
 8003980:	1a9b      	subgt	r3, r3, r2
 8003982:	18ed      	addgt	r5, r5, r3
 8003984:	341a      	adds	r4, #26
 8003986:	42b5      	cmp	r5, r6
 8003988:	d11a      	bne.n	80039c0 <_printf_common+0xcc>
 800398a:	2000      	movs	r0, #0
 800398c:	e008      	b.n	80039a0 <_printf_common+0xac>
 800398e:	2301      	movs	r3, #1
 8003990:	4652      	mov	r2, sl
 8003992:	4649      	mov	r1, r9
 8003994:	4638      	mov	r0, r7
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d103      	bne.n	80039a4 <_printf_common+0xb0>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	3501      	adds	r5, #1
 80039a6:	e7c4      	b.n	8003932 <_printf_common+0x3e>
 80039a8:	2030      	movs	r0, #48	; 0x30
 80039aa:	18e1      	adds	r1, r4, r3
 80039ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b6:	4422      	add	r2, r4
 80039b8:	3302      	adds	r3, #2
 80039ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039be:	e7c5      	b.n	800394c <_printf_common+0x58>
 80039c0:	2301      	movs	r3, #1
 80039c2:	4622      	mov	r2, r4
 80039c4:	4649      	mov	r1, r9
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c0      	blx	r8
 80039ca:	3001      	adds	r0, #1
 80039cc:	d0e6      	beq.n	800399c <_printf_common+0xa8>
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7d9      	b.n	8003986 <_printf_common+0x92>
	...

080039d4 <_printf_i>:
 80039d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	460c      	mov	r4, r1
 80039da:	7e27      	ldrb	r7, [r4, #24]
 80039dc:	4691      	mov	r9, r2
 80039de:	2f78      	cmp	r7, #120	; 0x78
 80039e0:	4680      	mov	r8, r0
 80039e2:	469a      	mov	sl, r3
 80039e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ea:	d807      	bhi.n	80039fc <_printf_i+0x28>
 80039ec:	2f62      	cmp	r7, #98	; 0x62
 80039ee:	d80a      	bhi.n	8003a06 <_printf_i+0x32>
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	f000 80d9 	beq.w	8003ba8 <_printf_i+0x1d4>
 80039f6:	2f58      	cmp	r7, #88	; 0x58
 80039f8:	f000 80a4 	beq.w	8003b44 <_printf_i+0x170>
 80039fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a04:	e03a      	b.n	8003a7c <_printf_i+0xa8>
 8003a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a0a:	2b15      	cmp	r3, #21
 8003a0c:	d8f6      	bhi.n	80039fc <_printf_i+0x28>
 8003a0e:	a001      	add	r0, pc, #4	; (adr r0, 8003a14 <_printf_i+0x40>)
 8003a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	080039fd 	.word	0x080039fd
 8003a20:	080039fd 	.word	0x080039fd
 8003a24:	080039fd 	.word	0x080039fd
 8003a28:	080039fd 	.word	0x080039fd
 8003a2c:	08003a81 	.word	0x08003a81
 8003a30:	080039fd 	.word	0x080039fd
 8003a34:	080039fd 	.word	0x080039fd
 8003a38:	080039fd 	.word	0x080039fd
 8003a3c:	080039fd 	.word	0x080039fd
 8003a40:	08003b8f 	.word	0x08003b8f
 8003a44:	08003ab1 	.word	0x08003ab1
 8003a48:	08003b71 	.word	0x08003b71
 8003a4c:	080039fd 	.word	0x080039fd
 8003a50:	080039fd 	.word	0x080039fd
 8003a54:	08003bb1 	.word	0x08003bb1
 8003a58:	080039fd 	.word	0x080039fd
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	080039fd 	.word	0x080039fd
 8003a64:	080039fd 	.word	0x080039fd
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	600a      	str	r2, [r1, #0]
 8003a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0a4      	b.n	8003bca <_printf_i+0x1f6>
 8003a80:	6825      	ldr	r5, [r4, #0]
 8003a82:	6808      	ldr	r0, [r1, #0]
 8003a84:	062e      	lsls	r6, r5, #24
 8003a86:	f100 0304 	add.w	r3, r0, #4
 8003a8a:	d50a      	bpl.n	8003aa2 <_printf_i+0xce>
 8003a8c:	6805      	ldr	r5, [r0, #0]
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	da03      	bge.n	8003a9c <_printf_i+0xc8>
 8003a94:	232d      	movs	r3, #45	; 0x2d
 8003a96:	426d      	negs	r5, r5
 8003a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	485e      	ldr	r0, [pc, #376]	; (8003c18 <_printf_i+0x244>)
 8003aa0:	e019      	b.n	8003ad6 <_printf_i+0x102>
 8003aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003aa6:	6805      	ldr	r5, [r0, #0]
 8003aa8:	600b      	str	r3, [r1, #0]
 8003aaa:	bf18      	it	ne
 8003aac:	b22d      	sxthne	r5, r5
 8003aae:	e7ef      	b.n	8003a90 <_printf_i+0xbc>
 8003ab0:	680b      	ldr	r3, [r1, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	1d18      	adds	r0, r3, #4
 8003ab6:	6008      	str	r0, [r1, #0]
 8003ab8:	0628      	lsls	r0, r5, #24
 8003aba:	d501      	bpl.n	8003ac0 <_printf_i+0xec>
 8003abc:	681d      	ldr	r5, [r3, #0]
 8003abe:	e002      	b.n	8003ac6 <_printf_i+0xf2>
 8003ac0:	0669      	lsls	r1, r5, #25
 8003ac2:	d5fb      	bpl.n	8003abc <_printf_i+0xe8>
 8003ac4:	881d      	ldrh	r5, [r3, #0]
 8003ac6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac8:	bf0c      	ite	eq
 8003aca:	2308      	moveq	r3, #8
 8003acc:	230a      	movne	r3, #10
 8003ace:	4852      	ldr	r0, [pc, #328]	; (8003c18 <_printf_i+0x244>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ad6:	6866      	ldr	r6, [r4, #4]
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	bfa8      	it	ge
 8003adc:	6821      	ldrge	r1, [r4, #0]
 8003ade:	60a6      	str	r6, [r4, #8]
 8003ae0:	bfa4      	itt	ge
 8003ae2:	f021 0104 	bicge.w	r1, r1, #4
 8003ae6:	6021      	strge	r1, [r4, #0]
 8003ae8:	b90d      	cbnz	r5, 8003aee <_printf_i+0x11a>
 8003aea:	2e00      	cmp	r6, #0
 8003aec:	d04d      	beq.n	8003b8a <_printf_i+0x1b6>
 8003aee:	4616      	mov	r6, r2
 8003af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003af4:	fb03 5711 	mls	r7, r3, r1, r5
 8003af8:	5dc7      	ldrb	r7, [r0, r7]
 8003afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003afe:	462f      	mov	r7, r5
 8003b00:	42bb      	cmp	r3, r7
 8003b02:	460d      	mov	r5, r1
 8003b04:	d9f4      	bls.n	8003af0 <_printf_i+0x11c>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d10b      	bne.n	8003b22 <_printf_i+0x14e>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	07df      	lsls	r7, r3, #31
 8003b0e:	d508      	bpl.n	8003b22 <_printf_i+0x14e>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	6861      	ldr	r1, [r4, #4]
 8003b14:	4299      	cmp	r1, r3
 8003b16:	bfde      	ittt	le
 8003b18:	2330      	movle	r3, #48	; 0x30
 8003b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b22:	1b92      	subs	r2, r2, r6
 8003b24:	6122      	str	r2, [r4, #16]
 8003b26:	464b      	mov	r3, r9
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f8cd a000 	str.w	sl, [sp]
 8003b30:	aa03      	add	r2, sp, #12
 8003b32:	f7ff fedf 	bl	80038f4 <_printf_common>
 8003b36:	3001      	adds	r0, #1
 8003b38:	d14c      	bne.n	8003bd4 <_printf_i+0x200>
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	b004      	add	sp, #16
 8003b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b44:	4834      	ldr	r0, [pc, #208]	; (8003c18 <_printf_i+0x244>)
 8003b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b4a:	680e      	ldr	r6, [r1, #0]
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b52:	061f      	lsls	r7, r3, #24
 8003b54:	600e      	str	r6, [r1, #0]
 8003b56:	d514      	bpl.n	8003b82 <_printf_i+0x1ae>
 8003b58:	07d9      	lsls	r1, r3, #31
 8003b5a:	bf44      	itt	mi
 8003b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b60:	6023      	strmi	r3, [r4, #0]
 8003b62:	b91d      	cbnz	r5, 8003b6c <_printf_i+0x198>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f023 0320 	bic.w	r3, r3, #32
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	e7af      	b.n	8003ad0 <_printf_i+0xfc>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	2378      	movs	r3, #120	; 0x78
 8003b7a:	4828      	ldr	r0, [pc, #160]	; (8003c1c <_printf_i+0x248>)
 8003b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b80:	e7e3      	b.n	8003b4a <_printf_i+0x176>
 8003b82:	065e      	lsls	r6, r3, #25
 8003b84:	bf48      	it	mi
 8003b86:	b2ad      	uxthmi	r5, r5
 8003b88:	e7e6      	b.n	8003b58 <_printf_i+0x184>
 8003b8a:	4616      	mov	r6, r2
 8003b8c:	e7bb      	b.n	8003b06 <_printf_i+0x132>
 8003b8e:	680b      	ldr	r3, [r1, #0]
 8003b90:	6826      	ldr	r6, [r4, #0]
 8003b92:	1d1d      	adds	r5, r3, #4
 8003b94:	6960      	ldr	r0, [r4, #20]
 8003b96:	600d      	str	r5, [r1, #0]
 8003b98:	0635      	lsls	r5, r6, #24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	d501      	bpl.n	8003ba2 <_printf_i+0x1ce>
 8003b9e:	6018      	str	r0, [r3, #0]
 8003ba0:	e002      	b.n	8003ba8 <_printf_i+0x1d4>
 8003ba2:	0671      	lsls	r1, r6, #25
 8003ba4:	d5fb      	bpl.n	8003b9e <_printf_i+0x1ca>
 8003ba6:	8018      	strh	r0, [r3, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4616      	mov	r6, r2
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	e7ba      	b.n	8003b26 <_printf_i+0x152>
 8003bb0:	680b      	ldr	r3, [r1, #0]
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	600a      	str	r2, [r1, #0]
 8003bb6:	681e      	ldr	r6, [r3, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	6862      	ldr	r2, [r4, #4]
 8003bbe:	f000 f82f 	bl	8003c20 <memchr>
 8003bc2:	b108      	cbz	r0, 8003bc8 <_printf_i+0x1f4>
 8003bc4:	1b80      	subs	r0, r0, r6
 8003bc6:	6060      	str	r0, [r4, #4]
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd2:	e7a8      	b.n	8003b26 <_printf_i+0x152>
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4640      	mov	r0, r8
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	47d0      	blx	sl
 8003bde:	3001      	adds	r0, #1
 8003be0:	d0ab      	beq.n	8003b3a <_printf_i+0x166>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	079b      	lsls	r3, r3, #30
 8003be6:	d413      	bmi.n	8003c10 <_printf_i+0x23c>
 8003be8:	68e0      	ldr	r0, [r4, #12]
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	4298      	cmp	r0, r3
 8003bee:	bfb8      	it	lt
 8003bf0:	4618      	movlt	r0, r3
 8003bf2:	e7a4      	b.n	8003b3e <_printf_i+0x16a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4632      	mov	r2, r6
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	47d0      	blx	sl
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d09b      	beq.n	8003b3a <_printf_i+0x166>
 8003c02:	3501      	adds	r5, #1
 8003c04:	68e3      	ldr	r3, [r4, #12]
 8003c06:	9903      	ldr	r1, [sp, #12]
 8003c08:	1a5b      	subs	r3, r3, r1
 8003c0a:	42ab      	cmp	r3, r5
 8003c0c:	dcf2      	bgt.n	8003bf4 <_printf_i+0x220>
 8003c0e:	e7eb      	b.n	8003be8 <_printf_i+0x214>
 8003c10:	2500      	movs	r5, #0
 8003c12:	f104 0619 	add.w	r6, r4, #25
 8003c16:	e7f5      	b.n	8003c04 <_printf_i+0x230>
 8003c18:	080043f5 	.word	0x080043f5
 8003c1c:	08004406 	.word	0x08004406

08003c20 <memchr>:
 8003c20:	4603      	mov	r3, r0
 8003c22:	b510      	push	{r4, lr}
 8003c24:	b2c9      	uxtb	r1, r1
 8003c26:	4402      	add	r2, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	d101      	bne.n	8003c32 <memchr+0x12>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e003      	b.n	8003c3a <memchr+0x1a>
 8003c32:	7804      	ldrb	r4, [r0, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	428c      	cmp	r4, r1
 8003c38:	d1f6      	bne.n	8003c28 <memchr+0x8>
 8003c3a:	bd10      	pop	{r4, pc}

08003c3c <memmove>:
 8003c3c:	4288      	cmp	r0, r1
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	eb01 0402 	add.w	r4, r1, r2
 8003c44:	d902      	bls.n	8003c4c <memmove+0x10>
 8003c46:	4284      	cmp	r4, r0
 8003c48:	4623      	mov	r3, r4
 8003c4a:	d807      	bhi.n	8003c5c <memmove+0x20>
 8003c4c:	1e43      	subs	r3, r0, #1
 8003c4e:	42a1      	cmp	r1, r4
 8003c50:	d008      	beq.n	8003c64 <memmove+0x28>
 8003c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c5a:	e7f8      	b.n	8003c4e <memmove+0x12>
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	4402      	add	r2, r0
 8003c60:	428a      	cmp	r2, r1
 8003c62:	d100      	bne.n	8003c66 <memmove+0x2a>
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c6e:	e7f7      	b.n	8003c60 <memmove+0x24>

08003c70 <_free_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	2900      	cmp	r1, #0
 8003c76:	d043      	beq.n	8003d00 <_free_r+0x90>
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f0c      	subs	r4, r1, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfb8      	it	lt
 8003c82:	18e4      	addlt	r4, r4, r3
 8003c84:	f000 f8d0 	bl	8003e28 <__malloc_lock>
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <_free_r+0x94>)
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	b933      	cbnz	r3, 8003c9e <_free_r+0x2e>
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	6014      	str	r4, [r2, #0]
 8003c94:	4628      	mov	r0, r5
 8003c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c9a:	f000 b8cb 	b.w	8003e34 <__malloc_unlock>
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	d90a      	bls.n	8003cb8 <_free_r+0x48>
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	1862      	adds	r2, r4, r1
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bf01      	itttt	eq
 8003caa:	681a      	ldreq	r2, [r3, #0]
 8003cac:	685b      	ldreq	r3, [r3, #4]
 8003cae:	1852      	addeq	r2, r2, r1
 8003cb0:	6022      	streq	r2, [r4, #0]
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	6004      	str	r4, [r0, #0]
 8003cb6:	e7ed      	b.n	8003c94 <_free_r+0x24>
 8003cb8:	461a      	mov	r2, r3
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	b10b      	cbz	r3, 8003cc2 <_free_r+0x52>
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	d9fa      	bls.n	8003cb8 <_free_r+0x48>
 8003cc2:	6811      	ldr	r1, [r2, #0]
 8003cc4:	1850      	adds	r0, r2, r1
 8003cc6:	42a0      	cmp	r0, r4
 8003cc8:	d10b      	bne.n	8003ce2 <_free_r+0x72>
 8003cca:	6820      	ldr	r0, [r4, #0]
 8003ccc:	4401      	add	r1, r0
 8003cce:	1850      	adds	r0, r2, r1
 8003cd0:	4283      	cmp	r3, r0
 8003cd2:	6011      	str	r1, [r2, #0]
 8003cd4:	d1de      	bne.n	8003c94 <_free_r+0x24>
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4401      	add	r1, r0
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	e7d8      	b.n	8003c94 <_free_r+0x24>
 8003ce2:	d902      	bls.n	8003cea <_free_r+0x7a>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	e7d4      	b.n	8003c94 <_free_r+0x24>
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1821      	adds	r1, r4, r0
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	bf01      	itttt	eq
 8003cf2:	6819      	ldreq	r1, [r3, #0]
 8003cf4:	685b      	ldreq	r3, [r3, #4]
 8003cf6:	1809      	addeq	r1, r1, r0
 8003cf8:	6021      	streq	r1, [r4, #0]
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	6054      	str	r4, [r2, #4]
 8003cfe:	e7c9      	b.n	8003c94 <_free_r+0x24>
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
 8003d02:	bf00      	nop
 8003d04:	20000160 	.word	0x20000160

08003d08 <_malloc_r>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	1ccd      	adds	r5, r1, #3
 8003d0c:	f025 0503 	bic.w	r5, r5, #3
 8003d10:	3508      	adds	r5, #8
 8003d12:	2d0c      	cmp	r5, #12
 8003d14:	bf38      	it	cc
 8003d16:	250c      	movcc	r5, #12
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	db01      	blt.n	8003d22 <_malloc_r+0x1a>
 8003d1e:	42a9      	cmp	r1, r5
 8003d20:	d903      	bls.n	8003d2a <_malloc_r+0x22>
 8003d22:	230c      	movs	r3, #12
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	2000      	movs	r0, #0
 8003d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2a:	f000 f87d 	bl	8003e28 <__malloc_lock>
 8003d2e:	4921      	ldr	r1, [pc, #132]	; (8003db4 <_malloc_r+0xac>)
 8003d30:	680a      	ldr	r2, [r1, #0]
 8003d32:	4614      	mov	r4, r2
 8003d34:	b99c      	cbnz	r4, 8003d5e <_malloc_r+0x56>
 8003d36:	4f20      	ldr	r7, [pc, #128]	; (8003db8 <_malloc_r+0xb0>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	b923      	cbnz	r3, 8003d46 <_malloc_r+0x3e>
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 f862 	bl	8003e08 <_sbrk_r>
 8003d44:	6038      	str	r0, [r7, #0]
 8003d46:	4629      	mov	r1, r5
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f000 f85d 	bl	8003e08 <_sbrk_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	d123      	bne.n	8003d9a <_malloc_r+0x92>
 8003d52:	230c      	movs	r3, #12
 8003d54:	4630      	mov	r0, r6
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	f000 f86c 	bl	8003e34 <__malloc_unlock>
 8003d5c:	e7e3      	b.n	8003d26 <_malloc_r+0x1e>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	1b5b      	subs	r3, r3, r5
 8003d62:	d417      	bmi.n	8003d94 <_malloc_r+0x8c>
 8003d64:	2b0b      	cmp	r3, #11
 8003d66:	d903      	bls.n	8003d70 <_malloc_r+0x68>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	441c      	add	r4, r3
 8003d6c:	6025      	str	r5, [r4, #0]
 8003d6e:	e004      	b.n	8003d7a <_malloc_r+0x72>
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	42a2      	cmp	r2, r4
 8003d74:	bf0c      	ite	eq
 8003d76:	600b      	streq	r3, [r1, #0]
 8003d78:	6053      	strne	r3, [r2, #4]
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f000 f85a 	bl	8003e34 <__malloc_unlock>
 8003d80:	f104 000b 	add.w	r0, r4, #11
 8003d84:	1d23      	adds	r3, r4, #4
 8003d86:	f020 0007 	bic.w	r0, r0, #7
 8003d8a:	1ac2      	subs	r2, r0, r3
 8003d8c:	d0cc      	beq.n	8003d28 <_malloc_r+0x20>
 8003d8e:	1a1b      	subs	r3, r3, r0
 8003d90:	50a3      	str	r3, [r4, r2]
 8003d92:	e7c9      	b.n	8003d28 <_malloc_r+0x20>
 8003d94:	4622      	mov	r2, r4
 8003d96:	6864      	ldr	r4, [r4, #4]
 8003d98:	e7cc      	b.n	8003d34 <_malloc_r+0x2c>
 8003d9a:	1cc4      	adds	r4, r0, #3
 8003d9c:	f024 0403 	bic.w	r4, r4, #3
 8003da0:	42a0      	cmp	r0, r4
 8003da2:	d0e3      	beq.n	8003d6c <_malloc_r+0x64>
 8003da4:	1a21      	subs	r1, r4, r0
 8003da6:	4630      	mov	r0, r6
 8003da8:	f000 f82e 	bl	8003e08 <_sbrk_r>
 8003dac:	3001      	adds	r0, #1
 8003dae:	d1dd      	bne.n	8003d6c <_malloc_r+0x64>
 8003db0:	e7cf      	b.n	8003d52 <_malloc_r+0x4a>
 8003db2:	bf00      	nop
 8003db4:	20000160 	.word	0x20000160
 8003db8:	20000164 	.word	0x20000164

08003dbc <_realloc_r>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	4607      	mov	r7, r0
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	460e      	mov	r6, r1
 8003dc4:	b921      	cbnz	r1, 8003dd0 <_realloc_r+0x14>
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dcc:	f7ff bf9c 	b.w	8003d08 <_malloc_r>
 8003dd0:	b922      	cbnz	r2, 8003ddc <_realloc_r+0x20>
 8003dd2:	f7ff ff4d 	bl	8003c70 <_free_r>
 8003dd6:	4625      	mov	r5, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ddc:	f000 f830 	bl	8003e40 <_malloc_usable_size_r>
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d20f      	bcs.n	8003e04 <_realloc_r+0x48>
 8003de4:	4621      	mov	r1, r4
 8003de6:	4638      	mov	r0, r7
 8003de8:	f7ff ff8e 	bl	8003d08 <_malloc_r>
 8003dec:	4605      	mov	r5, r0
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0f2      	beq.n	8003dd8 <_realloc_r+0x1c>
 8003df2:	4631      	mov	r1, r6
 8003df4:	4622      	mov	r2, r4
 8003df6:	f7ff fbeb 	bl	80035d0 <memcpy>
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f7ff ff37 	bl	8003c70 <_free_r>
 8003e02:	e7e9      	b.n	8003dd8 <_realloc_r+0x1c>
 8003e04:	4635      	mov	r5, r6
 8003e06:	e7e7      	b.n	8003dd8 <_realloc_r+0x1c>

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd fc7c 	bl	8001710 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000204 	.word	0x20000204

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 b811 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	2000020c 	.word	0x2000020c

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 b80c 	b.w	8003e52 <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	2000020c 	.word	0x2000020c

08003e40 <_malloc_usable_size_r>:
 8003e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e44:	1f18      	subs	r0, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfbc      	itt	lt
 8003e4a:	580b      	ldrlt	r3, [r1, r0]
 8003e4c:	18c0      	addlt	r0, r0, r3
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_acquire_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_release_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
