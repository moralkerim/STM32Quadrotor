
SD_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800bd60  0800bd60  0001bd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c628  0800c628  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800c628  0800c628  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c628  0800c628  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c628  0800c628  0001c628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c62c  0800c62c  0001c62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002438  20000088  0800c6b8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024c0  0800c6b8  000224c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd44  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cc  00000000  00000000  0002ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000304c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00031248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196bd  00000000  00000000  00031ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121bb  00000000  00000000  0004b565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a6c  00000000  00000000  0005d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e518c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b1c  00000000  00000000  000e51dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd44 	.word	0x0800bd44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800bd44 	.word	0x0800bd44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001126:	2300      	movs	r3, #0
 8001128:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800112a:	2332      	movs	r3, #50	; 0x32
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	22d0      	movs	r2, #208	; 0xd0
 800113a:	21ef      	movs	r1, #239	; 0xef
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <read_chip_id+0x3c>)
 800113e:	f002 f8d9 	bl	80032f4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b55      	cmp	r3, #85	; 0x55
 8001146:	d001      	beq.n	800114c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001148:	2301      	movs	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000a8 	.word	0x200000a8

0800115c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001168:	2300      	movs	r3, #0
 800116a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d81a      	bhi.n	80011a8 <set_oss+0x4c>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <set_oss+0x1c>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	08001191 	.word	0x08001191
 8001180:	08001199 	.word	0x08001199
 8001184:	080011a1 	.word	0x080011a1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2205      	movs	r2, #5
 800118c:	705a      	strb	r2, [r3, #1]
			break;
 800118e:	e00f      	b.n	80011b0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2208      	movs	r2, #8
 8001194:	705a      	strb	r2, [r3, #1]
			break;
 8001196:	e00b      	b.n	80011b0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	220e      	movs	r2, #14
 800119c:	705a      	strb	r2, [r3, #1]
			break;
 800119e:	e007      	b.n	80011b0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	221a      	movs	r2, #26
 80011a4:	705a      	strb	r2, [r3, #1]
			break;
 80011a6:	e003      	b.n	80011b0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2208      	movs	r2, #8
 80011ac:	705a      	strb	r2, [r3, #1]
			break;
 80011ae:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	019b      	lsls	r3, r3, #6
 80011ba:	70fb      	strb	r3, [r7, #3]
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80011c0:	2332      	movs	r3, #50	; 0x32
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2302      	movs	r3, #2
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	22f4      	movs	r2, #244	; 0xf4
 80011d2:	21ee      	movs	r1, #238	; 0xee
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <set_oss+0x88>)
 80011d6:	f001 ff93 	bl	8003100 <HAL_I2C_Mem_Write>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000a8 	.word	0x200000a8

080011e8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001216:	2332      	movs	r3, #50	; 0x32
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2316      	movs	r3, #22
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	22aa      	movs	r2, #170	; 0xaa
 8001228:	21ef      	movs	r1, #239	; 0xef
 800122a:	4827      	ldr	r0, [pc, #156]	; (80012c8 <read_calib_data+0xe0>)
 800122c:	f002 f862 	bl	80032f4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001236:	e03c      	b.n	80012b2 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3328      	adds	r3, #40	; 0x28
 8001240:	443b      	add	r3, r7
 8001242:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b219      	sxth	r1, r3
 800124a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800124e:	3328      	adds	r3, #40	; 0x28
 8001250:	443b      	add	r3, r7
 8001252:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001256:	b21a      	sxth	r2, r3
 8001258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4403      	add	r3, r0
 8001262:	430a      	orrs	r2, r1
 8001264:	b212      	sxth	r2, r2
 8001266:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2da      	uxtb	r2, r3
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	440b      	add	r3, r1
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80012a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b6:	2b0b      	cmp	r3, #11
 80012b8:	d9be      	bls.n	8001238 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80012ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000a8 	.word	0x200000a8

080012cc <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 faca 	bl	8008874 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80012e0:	687c      	ldr	r4, [r7, #4]
 80012e2:	f7ff ff1b 	bl	800111c <read_chip_id>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	687c      	ldr	r4, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff79 	bl	80011e8 <read_calib_data>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, ULTRA_HIGH_RESOLUTION);       // set oversampling settings
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3338      	adds	r3, #56	; 0x38
 8001300:	2103      	movs	r1, #3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff2a 	bl	800115c <set_oss>
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001316:	232e      	movs	r3, #46	; 0x2e
 8001318:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	22f4      	movs	r2, #244	; 0xf4
 800132a:	21ee      	movs	r1, #238	; 0xee
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <get_ut+0x50>)
 800132e:	f001 fee7 	bl	8003100 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001332:	2005      	movs	r0, #5
 8001334:	f001 fae2 	bl	80028fc <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001338:	2332      	movs	r3, #50	; 0x32
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2302      	movs	r3, #2
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	22f6      	movs	r2, #246	; 0xf6
 8001348:	21ef      	movs	r1, #239	; 0xef
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <get_ut+0x50>)
 800134c:	f001 ffd2 	bl	80032f4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001350:	793b      	ldrb	r3, [r7, #4]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	797a      	ldrb	r2, [r7, #5]
 8001356:	4313      	orrs	r3, r2
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000a8 	.word	0x200000a8

08001364 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fea6 	bl	80010d0 <__aeabi_f2iz>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	895b      	ldrh	r3, [r3, #10]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	8912      	ldrh	r2, [r2, #8]
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	13db      	asrs	r3, r3, #15
 8001396:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800139e:	02da      	lsls	r2, r3, #11
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013a6:	4619      	mov	r1, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	440b      	add	r3, r1
 80013ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b0:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	441a      	add	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	3308      	adds	r3, #8
 80013c2:	111b      	asrs	r3, r3, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc69 	bl	8000c9c <__aeabi_i2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <get_temp+0xa4>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcb8 	bl	8000d44 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <get_temp+0xa8>)
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fe5a 	bl	8001094 <__aeabi_fcmple>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <get_temp+0x90>
 80013e6:	490a      	ldr	r1, [pc, #40]	; (8001410 <get_temp+0xac>)
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fe5d 	bl	80010a8 <__aeabi_fcmpge>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2203      	movs	r2, #3
 80013f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	3dcccccd 	.word	0x3dcccccd
 800140c:	c2200000 	.word	0xc2200000
 8001410:	42aa0000 	.word	0x42aa0000

08001414 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af04      	add	r7, sp, #16
 800141a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <get_up+0x7c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	813b      	strh	r3, [r7, #8]
 8001422:	2300      	movs	r3, #0
 8001424:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800142a:	2334      	movs	r3, #52	; 0x34
 800142c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800142e:	2332      	movs	r3, #50	; 0x32
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	22f4      	movs	r2, #244	; 0xf4
 8001440:	21ee      	movs	r1, #238	; 0xee
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <get_up+0x80>)
 8001444:	f001 fe5c 	bl	8003100 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fa56 	bl	80028fc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001450:	2332      	movs	r3, #50	; 0x32
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2303      	movs	r3, #3
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	22f6      	movs	r2, #246	; 0xf6
 8001462:	21ef      	movs	r1, #239	; 0xef
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <get_up+0x80>)
 8001466:	f001 ff45 	bl	80032f4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	7a7b      	ldrb	r3, [r7, #9]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	4413      	add	r3, r2
 8001474:	7aba      	ldrb	r2, [r7, #10]
 8001476:	441a      	add	r2, r3
 8001478:	793b      	ldrb	r3, [r7, #4]
 800147a:	f1c3 0308 	rsb	r3, r3, #8
 800147e:	fa42 f303 	asr.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
	return up;
 8001484:	68fb      	ldr	r3, [r7, #12]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	0800bd60 	.word	0x0800bd60
 8001494:	200000a8 	.word	0x200000a8

08001498 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001498:	b084      	sub	sp, #16
 800149a:	b480      	push	{r7}
 800149c:	b089      	sub	sp, #36	; 0x24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80014a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80014b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014b6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80014b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014bc:	461a      	mov	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fb03 f303 	mul.w	r3, r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da01      	bge.n	80014cc <get_pressure+0x34>
 80014c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014cc:	131b      	asrs	r3, r3, #12
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da01      	bge.n	80014da <get_pressure+0x42>
 80014d6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014da:	12db      	asrs	r3, r3, #11
 80014dc:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80014de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014e2:	461a      	mov	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da01      	bge.n	80014f2 <get_pressure+0x5a>
 80014ee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014f2:	12db      	asrs	r3, r3, #11
 80014f4:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80014fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001502:	009a      	lsls	r2, r3, #2
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800150c:	4093      	lsls	r3, r2
 800150e:	3302      	adds	r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	da00      	bge.n	8001516 <get_pressure+0x7e>
 8001514:	3303      	adds	r3, #3
 8001516:	109b      	asrs	r3, r3, #2
 8001518:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800151a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800151e:	461a      	mov	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	da02      	bge.n	8001530 <get_pressure+0x98>
 800152a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800152e:	331f      	adds	r3, #31
 8001530:	135b      	asrs	r3, r3, #13
 8001532:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001534:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001538:	461a      	mov	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fb03 f303 	mul.w	r3, r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	da01      	bge.n	8001548 <get_pressure+0xb0>
 8001544:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001548:	131b      	asrs	r3, r3, #12
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	da02      	bge.n	8001558 <get_pressure+0xc0>
 8001552:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001556:	33ff      	adds	r3, #255	; 0xff
 8001558:	141b      	asrs	r3, r3, #16
 800155a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	3302      	adds	r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <get_pressure+0xd2>
 8001568:	3303      	adds	r3, #3
 800156a:	109b      	asrs	r3, r3, #2
 800156c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800156e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001570:	461a      	mov	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	0bdb      	lsrs	r3, r3, #15
 800157e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800158c:	4611      	mov	r1, r2
 800158e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001592:	410a      	asrs	r2, r1
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db06      	blt.n	80015ae <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	005a      	lsls	r2, r3, #1
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	e005      	b.n	80015ba <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da00      	bge.n	80015c2 <get_pressure+0x12a>
 80015c0:	33ff      	adds	r3, #255	; 0xff
 80015c2:	121b      	asrs	r3, r3, #8
 80015c4:	461a      	mov	r2, r3
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da00      	bge.n	80015ce <get_pressure+0x136>
 80015cc:	33ff      	adds	r3, #255	; 0xff
 80015ce:	121b      	asrs	r3, r3, #8
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f640 32de 	movw	r2, #3038	; 0xbde
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da02      	bge.n	80015ea <get_pressure+0x152>
 80015e4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015e8:	33ff      	adds	r3, #255	; 0xff
 80015ea:	141b      	asrs	r3, r3, #16
 80015ec:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <get_pressure+0x194>)
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da02      	bge.n	8001600 <get_pressure+0x168>
 80015fa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015fe:	33ff      	adds	r3, #255	; 0xff
 8001600:	141b      	asrs	r3, r3, #16
 8001602:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800160e:	2b00      	cmp	r3, #0
 8001610:	da00      	bge.n	8001614 <get_pressure+0x17c>
 8001612:	330f      	adds	r3, #15
 8001614:	111b      	asrs	r3, r3, #4
 8001616:	461a      	mov	r2, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	61fb      	str	r3, [r7, #28]

	return p;
 800161e:	69fb      	ldr	r3, [r7, #28]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	b004      	add	sp, #16
 800162a:	4770      	bx	lr
 800162c:	ffffe343 	.word	0xffffe343

08001630 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb2a 	bl	8000c9c <__aeabi_i2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4923      	ldr	r1, [pc, #140]	; (80016d8 <get_altitude+0xa8>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc2d 	bl	8000eac <__aeabi_fdiv>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fee7 	bl	8000428 <__aeabi_f2d>
 800165a:	a31b      	add	r3, pc, #108	; (adr r3, 80016c8 <get_altitude+0x98>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f009 fc8c 	bl	800af7c <pow>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	491b      	ldr	r1, [pc, #108]	; (80016dc <get_altitude+0xac>)
 800166e:	f7fe fd7b 	bl	8000168 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a315      	add	r3, pc, #84	; (adr r3, 80016d0 <get_altitude+0xa0>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ff2a 	bl	80004d8 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff f9fc 	bl	8000a88 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001694:	4912      	ldr	r1, [pc, #72]	; (80016e0 <get_altitude+0xb0>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fcfc 	bl	8001094 <__aeabi_fcmple>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <get_altitude+0x80>
 80016a2:	4910      	ldr	r1, [pc, #64]	; (80016e4 <get_altitude+0xb4>)
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff fcff 	bl	80010a8 <__aeabi_fcmpge>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2205      	movs	r2, #5
 80016b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	ccd9456c 	.word	0xccd9456c
 80016cc:	3fc85b95 	.word	0x3fc85b95
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40e5a540 	.word	0x40e5a540
 80016d8:	47c5e680 	.word	0x47c5e680
 80016dc:	3ff00000 	.word	0x3ff00000
 80016e0:	c3fa0000 	.word	0xc3fa0000
 80016e4:	460ca000 	.word	0x460ca000

080016e8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2110      	movs	r1, #16
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <SELECT+0x18>)
 80016f2:	f001 fb8f 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f001 f900 	bl	80028fc <HAL_Delay>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010800 	.word	0x40010800

08001704 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2110      	movs	r1, #16
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <DESELECT+0x18>)
 800170e:	f001 fb81 	bl	8002e14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f001 f8f2 	bl	80028fc <HAL_Delay>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010800 	.word	0x40010800

08001720 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800172a:	bf00      	nop
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <SPI_TxByte+0x30>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d1f8      	bne.n	800172c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800173a:	1df9      	adds	r1, r7, #7
 800173c:	2364      	movs	r3, #100	; 0x64
 800173e:	2201      	movs	r2, #1
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <SPI_TxByte+0x30>)
 8001742:	f003 f823 	bl	800478c <HAL_SPI_Transmit>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000fc 	.word	0x200000fc

08001754 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001760:	bf00      	nop
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <SPI_TxBuffer+0x30>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	d1f8      	bne.n	8001762 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <SPI_TxBuffer+0x30>)
 8001778:	f003 f808 	bl	800478c <HAL_SPI_Transmit>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000fc 	.word	0x200000fc

08001788 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001792:	bf00      	nop
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <SPI_RxByte+0x34>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1f8      	bne.n	8001794 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017a2:	1dba      	adds	r2, r7, #6
 80017a4:	1df9      	adds	r1, r7, #7
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <SPI_RxByte+0x34>)
 80017ae:	f003 f929 	bl	8004a04 <HAL_SPI_TransmitReceive>

	return data;
 80017b2:	79bb      	ldrb	r3, [r7, #6]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000fc 	.word	0x200000fc

080017c0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80017c8:	f7ff ffde 	bl	8001788 <SPI_RxByte>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <SD_ReadyWait+0x30>)
 80017e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017e8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80017ea:	f7ff ffcd 	bl	8001788 <SPI_RxByte>
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2bff      	cmp	r3, #255	; 0xff
 80017f6:	d004      	beq.n	8001802 <SD_ReadyWait+0x26>
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <SD_ReadyWait+0x30>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f3      	bne.n	80017ea <SD_ReadyWait+0xe>

	return res;
 8001802:	79fb      	ldrb	r3, [r7, #7]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20002272 	.word	0x20002272

08001810 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001816:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800181a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800181c:	f7ff ff72 	bl	8001704 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	e005      	b.n	8001832 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001826:	20ff      	movs	r0, #255	; 0xff
 8001828:	f7ff ff7a 	bl	8001720 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b09      	cmp	r3, #9
 8001836:	ddf6      	ble.n	8001826 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001838:	f7ff ff56 	bl	80016e8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001850:	2395      	movs	r3, #149	; 0x95
 8001852:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001854:	463b      	mov	r3, r7
 8001856:	2106      	movs	r1, #6
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff7b 	bl	8001754 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800185e:	e002      	b.n	8001866 <SD_PowerOn+0x56>
	{
		cnt--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001866:	f7ff ff8f 	bl	8001788 <SPI_RxByte>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <SD_PowerOn+0x66>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f4      	bne.n	8001860 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001876:	f7ff ff45 	bl	8001704 <DESELECT>
	SPI_TxByte(0XFF);
 800187a:	20ff      	movs	r0, #255	; 0xff
 800187c:	f7ff ff50 	bl	8001720 <SPI_TxByte>

	PowerFlag = 1;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <SD_PowerOn+0x80>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000a5 	.word	0x200000a5

08001894 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <SD_PowerOff+0x14>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200000a5 	.word	0x200000a5

080018ac <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return PowerFlag;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <SD_CheckPower+0x10>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	200000a5 	.word	0x200000a5

080018c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <SD_RxDataBlock+0x5c>)
 80018cc:	22c8      	movs	r2, #200	; 0xc8
 80018ce:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80018d0:	f7ff ff5a 	bl	8001788 <SPI_RxByte>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d104      	bne.n	80018e8 <SD_RxDataBlock+0x28>
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <SD_RxDataBlock+0x5c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f3      	bne.n	80018d0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2bfe      	cmp	r3, #254	; 0xfe
 80018ec:	d001      	beq.n	80018f2 <SD_RxDataBlock+0x32>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e00f      	b.n	8001912 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff61 	bl	80017c0 <SPI_RxBytePtr>
	} while(len--);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	603a      	str	r2, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f4      	bne.n	80018f2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001908:	f7ff ff3e 	bl	8001788 <SPI_RxByte>
	SPI_RxByte();
 800190c:	f7ff ff3c 	bl	8001788 <SPI_RxByte>

	return TRUE;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20002271 	.word	0x20002271

08001920 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001930:	f7ff ff54 	bl	80017dc <SD_ReadyWait>
 8001934:	4603      	mov	r3, r0
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d001      	beq.n	800193e <SD_TxDataBlock+0x1e>
 800193a:	2300      	movs	r3, #0
 800193c:	e02f      	b.n	800199e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff feed 	bl	8001720 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	2bfd      	cmp	r3, #253	; 0xfd
 800194a:	d020      	beq.n	800198e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800194c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff feff 	bl	8001754 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001956:	f7ff ff17 	bl	8001788 <SPI_RxByte>
		SPI_RxByte();
 800195a:	f7ff ff15 	bl	8001788 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800195e:	e00b      	b.n	8001978 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001960:	f7ff ff12 	bl	8001788 <SPI_RxByte>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b05      	cmp	r3, #5
 8001970:	d006      	beq.n	8001980 <SD_TxDataBlock+0x60>
			i++;
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	3301      	adds	r3, #1
 8001976:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d9f0      	bls.n	8001960 <SD_TxDataBlock+0x40>
 800197e:	e000      	b.n	8001982 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001980:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001982:	bf00      	nop
 8001984:	f7ff ff00 	bl	8001788 <SPI_RxByte>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0fa      	beq.n	8001984 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b05      	cmp	r3, #5
 8001996:	d101      	bne.n	800199c <SD_TxDataBlock+0x7c>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <SD_TxDataBlock+0x7e>

	return FALSE;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	6039      	str	r1, [r7, #0]
 80019b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80019b2:	f7ff ff13 	bl	80017dc <SD_ReadyWait>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2bff      	cmp	r3, #255	; 0xff
 80019ba:	d001      	beq.n	80019c0 <SD_SendCmd+0x1a>
 80019bc:	23ff      	movs	r3, #255	; 0xff
 80019be:	e042      	b.n	8001a46 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff feac 	bl	8001720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	0e1b      	lsrs	r3, r3, #24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fea6 	bl	8001720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fea0 	bl	8001720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe9a 	bl	8001720 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe95 	bl	8001720 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d102      	bne.n	8001a02 <SD_SendCmd+0x5c>
 80019fc:	2395      	movs	r3, #149	; 0x95
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e007      	b.n	8001a12 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b48      	cmp	r3, #72	; 0x48
 8001a06:	d102      	bne.n	8001a0e <SD_SendCmd+0x68>
 8001a08:	2387      	movs	r3, #135	; 0x87
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <SD_SendCmd+0x6c>
	else crc = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe83 	bl	8001720 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b4c      	cmp	r3, #76	; 0x4c
 8001a1e:	d101      	bne.n	8001a24 <SD_SendCmd+0x7e>
 8001a20:	f7ff feb2 	bl	8001788 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001a24:	230a      	movs	r3, #10
 8001a26:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001a28:	f7ff feae 	bl	8001788 <SPI_RxByte>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da05      	bge.n	8001a44 <SD_SendCmd+0x9e>
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f1      	bne.n	8001a28 <SD_SendCmd+0x82>

	return res;
 8001a44:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SD_disk_initialize+0x14>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d6      	b.n	8001c12 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001a64:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <SD_disk_initialize+0x1cc>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <SD_disk_initialize+0x2a>
 8001a72:	4b6a      	ldr	r3, [pc, #424]	; (8001c1c <SD_disk_initialize+0x1cc>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	e0cb      	b.n	8001c12 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001a7a:	f7ff fec9 	bl	8001810 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001a7e:	f7ff fe33 	bl	80016e8 <SELECT>

	/* check disk type */
	type = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001a86:	2100      	movs	r1, #0
 8001a88:	2040      	movs	r0, #64	; 0x40
 8001a8a:	f7ff ff8c 	bl	80019a6 <SD_SendCmd>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	f040 80a6 	bne.w	8001be2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <SD_disk_initialize+0x1d0>)
 8001a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001aa2:	2048      	movs	r0, #72	; 0x48
 8001aa4:	f7ff ff7f 	bl	80019a6 <SD_SendCmd>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d158      	bne.n	8001b60 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e00c      	b.n	8001ace <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001ab4:	7bfc      	ldrb	r4, [r7, #15]
 8001ab6:	f7ff fe67 	bl	8001788 <SPI_RxByte>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	f104 0310 	add.w	r3, r4, #16
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	3301      	adds	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d9ef      	bls.n	8001ab4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ad4:	7abb      	ldrb	r3, [r7, #10]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 8083 	bne.w	8001be2 <SD_disk_initialize+0x192>
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	2baa      	cmp	r3, #170	; 0xaa
 8001ae0:	d17f      	bne.n	8001be2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2077      	movs	r0, #119	; 0x77
 8001ae6:	f7ff ff5e 	bl	80019a6 <SD_SendCmd>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d807      	bhi.n	8001b00 <SD_disk_initialize+0xb0>
 8001af0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001af4:	2069      	movs	r0, #105	; 0x69
 8001af6:	f7ff ff56 	bl	80019a6 <SD_SendCmd>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <SD_disk_initialize+0x1d0>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1eb      	bne.n	8001ae2 <SD_disk_initialize+0x92>
 8001b0a:	e000      	b.n	8001b0e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <SD_disk_initialize+0x1d0>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d064      	beq.n	8001be2 <SD_disk_initialize+0x192>
 8001b18:	2100      	movs	r1, #0
 8001b1a:	207a      	movs	r0, #122	; 0x7a
 8001b1c:	f7ff ff43 	bl	80019a6 <SD_SendCmd>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d15d      	bne.n	8001be2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e00c      	b.n	8001b46 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001b2c:	7bfc      	ldrb	r4, [r7, #15]
 8001b2e:	f7ff fe2b 	bl	8001788 <SPI_RxByte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	f104 0310 	add.w	r3, r4, #16
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d9ef      	bls.n	8001b2c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001b4c:	7a3b      	ldrb	r3, [r7, #8]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SD_disk_initialize+0x10a>
 8001b56:	230c      	movs	r3, #12
 8001b58:	e000      	b.n	8001b5c <SD_disk_initialize+0x10c>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	73bb      	strb	r3, [r7, #14]
 8001b5e:	e040      	b.n	8001be2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001b60:	2100      	movs	r1, #0
 8001b62:	2077      	movs	r0, #119	; 0x77
 8001b64:	f7ff ff1f 	bl	80019a6 <SD_SendCmd>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d808      	bhi.n	8001b80 <SD_disk_initialize+0x130>
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2069      	movs	r0, #105	; 0x69
 8001b72:	f7ff ff18 	bl	80019a6 <SD_SendCmd>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d801      	bhi.n	8001b80 <SD_disk_initialize+0x130>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e000      	b.n	8001b82 <SD_disk_initialize+0x132>
 8001b80:	2301      	movs	r3, #1
 8001b82:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d10e      	bne.n	8001ba8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2077      	movs	r0, #119	; 0x77
 8001b8e:	f7ff ff0a 	bl	80019a6 <SD_SendCmd>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d80e      	bhi.n	8001bb6 <SD_disk_initialize+0x166>
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2069      	movs	r0, #105	; 0x69
 8001b9c:	f7ff ff03 	bl	80019a6 <SD_SendCmd>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <SD_disk_initialize+0x166>
 8001ba6:	e00d      	b.n	8001bc4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2041      	movs	r0, #65	; 0x41
 8001bac:	f7ff fefb 	bl	80019a6 <SD_SendCmd>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <SD_disk_initialize+0x1d0>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e1      	bne.n	8001b84 <SD_disk_initialize+0x134>
 8001bc0:	e000      	b.n	8001bc4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001bc2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <SD_disk_initialize+0x1d0>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <SD_disk_initialize+0x18e>
 8001bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd2:	2050      	movs	r0, #80	; 0x50
 8001bd4:	f7ff fee7 	bl	80019a6 <SD_SendCmd>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SD_disk_initialize+0x192>
 8001bde:	2300      	movs	r3, #0
 8001be0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <SD_disk_initialize+0x1d4>)
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001be8:	f7ff fd8c 	bl	8001704 <DESELECT>
	SPI_RxByte();
 8001bec:	f7ff fdcc 	bl	8001788 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <SD_disk_initialize+0x1cc>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <SD_disk_initialize+0x1cc>)
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	e001      	b.n	8001c0c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c08:	f7ff fe44 	bl	8001894 <SD_PowerOff>
	}

	return Stat;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <SD_disk_initialize+0x1cc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20002271 	.word	0x20002271
 8001c24:	200000a4 	.word	0x200000a4

08001c28 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SD_disk_status+0x14>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e002      	b.n	8001c42 <SD_disk_status+0x1a>
	return Stat;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <SD_disk_status+0x24>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000000 	.word	0x20000000

08001c50 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <SD_disk_read+0x1c>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <SD_disk_read+0x20>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e051      	b.n	8001d14 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <SD_disk_read+0xcc>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SD_disk_read+0x32>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e048      	b.n	8001d14 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <SD_disk_read+0xd0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <SD_disk_read+0x44>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	025b      	lsls	r3, r3, #9
 8001c92:	607b      	str	r3, [r7, #4]

	SELECT();
 8001c94:	f7ff fd28 	bl	80016e8 <SELECT>

	if (count == 1)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d111      	bne.n	8001cc2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	2051      	movs	r0, #81	; 0x51
 8001ca2:	f7ff fe80 	bl	80019a6 <SD_SendCmd>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d129      	bne.n	8001d00 <SD_disk_read+0xb0>
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb0:	68b8      	ldr	r0, [r7, #8]
 8001cb2:	f7ff fe05 	bl	80018c0 <SD_RxDataBlock>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d021      	beq.n	8001d00 <SD_disk_read+0xb0>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	e01e      	b.n	8001d00 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	2052      	movs	r0, #82	; 0x52
 8001cc6:	f7ff fe6e 	bl	80019a6 <SD_SendCmd>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d117      	bne.n	8001d00 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd4:	68b8      	ldr	r0, [r7, #8]
 8001cd6:	f7ff fdf3 	bl	80018c0 <SD_RxDataBlock>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <SD_disk_read+0xa6>
				buff += 512;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ce6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ed      	bne.n	8001cd0 <SD_disk_read+0x80>
 8001cf4:	e000      	b.n	8001cf8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001cf6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	204c      	movs	r0, #76	; 0x4c
 8001cfc:	f7ff fe53 	bl	80019a6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d00:	f7ff fd00 	bl	8001704 <DESELECT>
	SPI_RxByte();
 8001d04:	f7ff fd40 	bl	8001788 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bf14      	ite	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	2300      	moveq	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	200000a4 	.word	0x200000a4

08001d24 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <SD_disk_write+0x1c>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <SD_disk_write+0x20>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e06b      	b.n	8001e1c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <SD_disk_write+0x100>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SD_disk_write+0x32>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e062      	b.n	8001e1c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <SD_disk_write+0x100>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SD_disk_write+0x44>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e059      	b.n	8001e1c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <SD_disk_write+0x104>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <SD_disk_write+0x56>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	607b      	str	r3, [r7, #4]

	SELECT();
 8001d7a:	f7ff fcb5 	bl	80016e8 <SELECT>

	if (count == 1)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d110      	bne.n	8001da6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	2058      	movs	r0, #88	; 0x58
 8001d88:	f7ff fe0d 	bl	80019a6 <SD_SendCmd>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d13a      	bne.n	8001e08 <SD_disk_write+0xe4>
 8001d92:	21fe      	movs	r1, #254	; 0xfe
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f7ff fdc3 	bl	8001920 <SD_TxDataBlock>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d033      	beq.n	8001e08 <SD_disk_write+0xe4>
			count = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	e030      	b.n	8001e08 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <SD_disk_write+0x104>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001db2:	2100      	movs	r1, #0
 8001db4:	2077      	movs	r0, #119	; 0x77
 8001db6:	f7ff fdf6 	bl	80019a6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	2057      	movs	r0, #87	; 0x57
 8001dbe:	f7ff fdf2 	bl	80019a6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2059      	movs	r0, #89	; 0x59
 8001dc6:	f7ff fdee 	bl	80019a6 <SD_SendCmd>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11b      	bne.n	8001e08 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001dd0:	21fc      	movs	r1, #252	; 0xfc
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f7ff fda4 	bl	8001920 <SD_TxDataBlock>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <SD_disk_write+0xd0>
				buff += 512;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001de4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ee      	bne.n	8001dd0 <SD_disk_write+0xac>
 8001df2:	e000      	b.n	8001df6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001df4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001df6:	21fd      	movs	r1, #253	; 0xfd
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fd91 	bl	8001920 <SD_TxDataBlock>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e08:	f7ff fc7c 	bl	8001704 <DESELECT>
	SPI_RxByte();
 8001e0c:	f7ff fcbc 	bl	8001788 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000000 	.word	0x20000000
 8001e28:	200000a4 	.word	0x200000a4

08001e2c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b08b      	sub	sp, #44	; 0x2c
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	603a      	str	r2, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <SD_disk_ioctl+0x1e>
 8001e46:	2304      	movs	r3, #4
 8001e48:	e115      	b.n	8002076 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d124      	bne.n	8001ea0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d012      	beq.n	8001e84 <SD_disk_ioctl+0x58>
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	dc1a      	bgt.n	8001e98 <SD_disk_ioctl+0x6c>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <SD_disk_ioctl+0x40>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d006      	beq.n	8001e78 <SD_disk_ioctl+0x4c>
 8001e6a:	e015      	b.n	8001e98 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001e6c:	f7ff fd12 	bl	8001894 <SD_PowerOff>
			res = RES_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e76:	e0fc      	b.n	8002072 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001e78:	f7ff fcca 	bl	8001810 <SD_PowerOn>
			res = RES_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e82:	e0f6      	b.n	8002072 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	1c5c      	adds	r4, r3, #1
 8001e88:	f7ff fd10 	bl	80018ac <SD_CheckPower>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e96:	e0ec      	b.n	8002072 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e9e:	e0e8      	b.n	8002072 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ea0:	4b77      	ldr	r3, [pc, #476]	; (8002080 <SD_disk_ioctl+0x254>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SD_disk_ioctl+0x86>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0e1      	b.n	8002076 <SD_disk_ioctl+0x24a>

		SELECT();
 8001eb2:	f7ff fc19 	bl	80016e8 <SELECT>

		switch (ctrl)
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b0d      	cmp	r3, #13
 8001eba:	f200 80cb 	bhi.w	8002054 <SD_disk_ioctl+0x228>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <SD_disk_ioctl+0x98>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001fbf 	.word	0x08001fbf
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	08001faf 	.word	0x08001faf
 8001ed0:	08002055 	.word	0x08002055
 8001ed4:	08002055 	.word	0x08002055
 8001ed8:	08002055 	.word	0x08002055
 8001edc:	08002055 	.word	0x08002055
 8001ee0:	08002055 	.word	0x08002055
 8001ee4:	08002055 	.word	0x08002055
 8001ee8:	08002055 	.word	0x08002055
 8001eec:	08002055 	.word	0x08002055
 8001ef0:	08001fd1 	.word	0x08001fd1
 8001ef4:	08001ff5 	.word	0x08001ff5
 8001ef8:	08002019 	.word	0x08002019
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001efc:	2100      	movs	r1, #0
 8001efe:	2049      	movs	r0, #73	; 0x49
 8001f00:	f7ff fd51 	bl	80019a6 <SD_SendCmd>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80a8 	bne.w	800205c <SD_disk_ioctl+0x230>
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2110      	movs	r1, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fcd4 	bl	80018c0 <SD_RxDataBlock>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 809e 	beq.w	800205c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10e      	bne.n	8001f48 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f2a:	7d7b      	ldrb	r3, [r7, #21]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	7d3b      	ldrb	r3, [r7, #20]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	029a      	lsls	r2, r3, #10
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e02e      	b.n	8001fa6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f48:	7c7b      	ldrb	r3, [r7, #17]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	7dbb      	ldrb	r3, [r7, #22]
 8001f52:	09db      	lsrs	r3, r3, #7
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	7d7b      	ldrb	r3, [r7, #21]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0306 	and.w	r3, r3, #6
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f70:	7d3b      	ldrb	r3, [r7, #20]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	7cbb      	ldrb	r3, [r7, #18]
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f98:	8bfa      	ldrh	r2, [r7, #30]
 8001f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f9e:	3b09      	subs	r3, #9
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001fac:	e056      	b.n	800205c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001fbc:	e055      	b.n	800206a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001fbe:	f7ff fc0d 	bl	80017dc <SD_ReadyWait>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2bff      	cmp	r3, #255	; 0xff
 8001fc6:	d14b      	bne.n	8002060 <SD_disk_ioctl+0x234>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001fce:	e047      	b.n	8002060 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2049      	movs	r0, #73	; 0x49
 8001fd4:	f7ff fce7 	bl	80019a6 <SD_SendCmd>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d142      	bne.n	8002064 <SD_disk_ioctl+0x238>
 8001fde:	2110      	movs	r1, #16
 8001fe0:	6a38      	ldr	r0, [r7, #32]
 8001fe2:	f7ff fc6d 	bl	80018c0 <SD_RxDataBlock>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03b      	beq.n	8002064 <SD_disk_ioctl+0x238>
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ff2:	e037      	b.n	8002064 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	204a      	movs	r0, #74	; 0x4a
 8001ff8:	f7ff fcd5 	bl	80019a6 <SD_SendCmd>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d132      	bne.n	8002068 <SD_disk_ioctl+0x23c>
 8002002:	2110      	movs	r1, #16
 8002004:	6a38      	ldr	r0, [r7, #32]
 8002006:	f7ff fc5b 	bl	80018c0 <SD_RxDataBlock>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d02b      	beq.n	8002068 <SD_disk_ioctl+0x23c>
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002016:	e027      	b.n	8002068 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002018:	2100      	movs	r1, #0
 800201a:	207a      	movs	r0, #122	; 0x7a
 800201c:	f7ff fcc3 	bl	80019a6 <SD_SendCmd>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800202c:	e00b      	b.n	8002046 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800202e:	6a3c      	ldr	r4, [r7, #32]
 8002030:	1c63      	adds	r3, r4, #1
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	f7ff fba8 	bl	8001788 <SPI_RxByte>
 8002038:	4603      	mov	r3, r0
 800203a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800203c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002040:	3301      	adds	r3, #1
 8002042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800204a:	2b03      	cmp	r3, #3
 800204c:	d9ef      	bls.n	800202e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002054:	2304      	movs	r3, #4
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800205a:	e006      	b.n	800206a <SD_disk_ioctl+0x23e>
			break;
 800205c:	bf00      	nop
 800205e:	e004      	b.n	800206a <SD_disk_ioctl+0x23e>
			break;
 8002060:	bf00      	nop
 8002062:	e002      	b.n	800206a <SD_disk_ioctl+0x23e>
			break;
 8002064:	bf00      	nop
 8002066:	e000      	b.n	800206a <SD_disk_ioctl+0x23e>
			break;
 8002068:	bf00      	nop
		}

		DESELECT();
 800206a:	f7ff fb4b 	bl	8001704 <DESELECT>
		SPI_RxByte();
 800206e:	f7ff fb8b 	bl	8001788 <SPI_RxByte>
	}

	return res;
 8002072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002076:	4618      	mov	r0, r3
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e007      	b.n	80020a0 <clear_buffer+0x1c>
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <clear_buffer+0x30>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3301      	adds	r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b7f      	cmp	r3, #127	; 0x7f
 80020a4:	ddf4      	ble.n	8002090 <clear_buffer+0xc>
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200021f0 	.word	0x200021f0

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b08f      	sub	sp, #60	; 0x3c
 80020bc:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020be:	f000 fbbb 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c2:	f000 f899 	bl	80021f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c6:	f000 f941 	bl	800234c <MX_GPIO_Init>
  MX_SPI1_Init();
 80020ca:	f000 f909 	bl	80022e0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80020ce:	f002 fee1 	bl	8004e94 <MX_FATFS_Init>
  MX_I2C1_Init();
 80020d2:	f000 f8d7 	bl	8002284 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  bmp_init(&bmp);
 80020d6:	483f      	ldr	r0, [pc, #252]	; (80021d4 <main+0x11c>)
 80020d8:	f7ff f8f8 	bl	80012cc <bmp_init>

  //HAL_Delay (500);

  fresult = f_mount(&fs, "", 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	493e      	ldr	r1, [pc, #248]	; (80021d8 <main+0x120>)
 80020e0:	483e      	ldr	r0, [pc, #248]	; (80021dc <main+0x124>)
 80020e2:	f005 fbad 	bl	8007840 <f_mount>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <main+0x128>)
 80020ec:	701a      	strb	r2, [r3, #0]
	clear_buffer();*/

	/************* The following operation is using PUTS and GETS *********************/

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80020ee:	2213      	movs	r2, #19
 80020f0:	493c      	ldr	r1, [pc, #240]	; (80021e4 <main+0x12c>)
 80020f2:	483d      	ldr	r0, [pc, #244]	; (80021e8 <main+0x130>)
 80020f4:	f005 fbee 	bl	80078d4 <f_open>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <main+0x128>)
 80020fe:	701a      	strb	r2, [r3, #0]


	int count = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count < 100) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b63      	cmp	r3, #99	; 0x63
 8002108:	dc57      	bgt.n	80021ba <main+0x102>
		  bmp.uncomp.temp = get_ut ();
 800210a:	f7ff f901 	bl	8001310 <get_ut>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fdc3 	bl	8000c9c <__aeabi_i2f>
 8002116:	4603      	mov	r3, r0
 8002118:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <main+0x11c>)
 800211a:	6193      	str	r3, [r2, #24]
		  bmp.data.temp = get_temp (&bmp);
 800211c:	482d      	ldr	r0, [pc, #180]	; (80021d4 <main+0x11c>)
 800211e:	f7ff f921 	bl	8001364 <get_temp>
 8002122:	4603      	mov	r3, r0
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <main+0x11c>)
 8002126:	6293      	str	r3, [r2, #40]	; 0x28
		  bmp.uncomp.press = get_up (bmp.oss);
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <main+0x11c>)
 800212a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800212c:	f7ff f972 	bl	8001414 <get_up>
 8002130:	4603      	mov	r3, r0
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <main+0x11c>)
 8002134:	61d3      	str	r3, [r2, #28]
		  bmp.data.press = get_pressure (bmp);
 8002136:	4e27      	ldr	r6, [pc, #156]	; (80021d4 <main+0x11c>)
 8002138:	466d      	mov	r5, sp
 800213a:	f106 0410 	add.w	r4, r6, #16
 800213e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800214a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800214e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002152:	f7ff f9a1 	bl	8001498 <get_pressure>
 8002156:	4603      	mov	r3, r0
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <main+0x11c>)
 800215a:	62d3      	str	r3, [r2, #44]	; 0x2c
		  bmp.data.altitude = get_altitude (&bmp);
 800215c:	481d      	ldr	r0, [pc, #116]	; (80021d4 <main+0x11c>)
 800215e:	f7ff fa67 	bl	8001630 <get_altitude>
 8002162:	4603      	mov	r3, r0
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <main+0x11c>)
 8002166:	6353      	str	r3, [r2, #52]	; 0x34

		  gcvt(bmp.data.altitude, 5, buffer);
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <main+0x11c>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f95b 	bl	8000428 <__aeabi_f2d>
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <main+0x134>)
 8002174:	2205      	movs	r2, #5
 8002176:	f006 fb2f 	bl	80087d8 <gcvt>
		  /* Writing text */
		  f_puts(strcat(buffer, "\n"), &fil);
 800217a:	481c      	ldr	r0, [pc, #112]	; (80021ec <main+0x134>)
 800217c:	f7fd ffe8 	bl	8000150 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <main+0x134>)
 8002186:	4413      	add	r3, r2
 8002188:	4919      	ldr	r1, [pc, #100]	; (80021f0 <main+0x138>)
 800218a:	461a      	mov	r2, r3
 800218c:	460b      	mov	r3, r1
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	8013      	strh	r3, [r2, #0]
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <main+0x134>)
 8002194:	4914      	ldr	r1, [pc, #80]	; (80021e8 <main+0x130>)
 8002196:	4618      	mov	r0, r3
 8002198:	f006 fa23 	bl	80085e2 <f_puts>
		  clear_buffer();
 800219c:	f7ff ff72 	bl	8002084 <clear_buffer>

	  } else break;

	  count++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021aa:	4812      	ldr	r0, [pc, #72]	; (80021f4 <main+0x13c>)
 80021ac:	f000 fe4a 	bl	8002e44 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80021b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b4:	f000 fba2 	bl	80028fc <HAL_Delay>
	  if(count < 100) {
 80021b8:	e7a4      	b.n	8002104 <main+0x4c>
	  } else break;
 80021ba:	bf00      	nop

    /* USER CODE BEGIN 3 */
  }

	/* Close file */
	fresult = f_close(&fil);
 80021bc:	480a      	ldr	r0, [pc, #40]	; (80021e8 <main+0x130>)
 80021be:	f006 f9a8 	bl	8008512 <f_close>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <main+0x128>)
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d4:	20000154 	.word	0x20000154
 80021d8:	0800bd64 	.word	0x0800bd64
 80021dc:	20000190 	.word	0x20000190
 80021e0:	200021ec 	.word	0x200021ec
 80021e4:	0800bd68 	.word	0x0800bd68
 80021e8:	200011c0 	.word	0x200011c0
 80021ec:	200021f0 	.word	0x200021f0
 80021f0:	0800bd74 	.word	0x0800bd74
 80021f4:	40011000 	.word	0x40011000

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b090      	sub	sp, #64	; 0x40
 80021fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	2228      	movs	r2, #40	; 0x28
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f006 fb34 	bl	8008874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800221e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002228:	2301      	movs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222c:	2302      	movs	r3, #2
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002236:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fe19 	bl	8003e78 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800224c:	f000 f8ea 	bl	8002424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002250:	230f      	movs	r3, #15
 8002252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002254:	2302      	movs	r3, #2
 8002256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800225c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f002 f886 	bl	800437c <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002276:	f000 f8d5 	bl	8002424 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3740      	adds	r7, #64	; 0x40
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <MX_I2C1_Init+0x50>)
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <MX_I2C1_Init+0x54>)
 800228c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_I2C1_Init+0x50>)
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <MX_I2C1_Init+0x58>)
 8002292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_I2C1_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_I2C1_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_I2C1_Init+0x50>)
 80022c2:	f000 fdd9 	bl	8002e78 <HAL_I2C_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022cc:	f000 f8aa 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200000a8 	.word	0x200000a8
 80022d8:	40005400 	.word	0x40005400
 80022dc:	000186a0 	.word	0x000186a0

080022e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_SPI1_Init+0x64>)
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <MX_SPI1_Init+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_SPI1_Init+0x64>)
 80022ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_SPI1_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_SPI1_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI1_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI1_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_SPI1_Init+0x64>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI1_Init+0x64>)
 8002314:	2210      	movs	r2, #16
 8002316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_SPI1_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI1_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_SPI1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI1_Init+0x64>)
 800232c:	220a      	movs	r2, #10
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_SPI1_Init+0x64>)
 8002332:	f002 f9a7 	bl	8004684 <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800233c:	f000 f872 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200000fc 	.word	0x200000fc
 8002348:	40013000 	.word	0x40013000

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <MX_GPIO_Init+0xcc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <MX_GPIO_Init+0xcc>)
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <MX_GPIO_Init+0xcc>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <MX_GPIO_Init+0xcc>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <MX_GPIO_Init+0xcc>)
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <MX_GPIO_Init+0xcc>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MX_GPIO_Init+0xcc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <MX_GPIO_Init+0xcc>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <MX_GPIO_Init+0xcc>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <MX_GPIO_Init+0xcc>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <MX_GPIO_Init+0xcc>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <MX_GPIO_Init+0xcc>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c6:	4815      	ldr	r0, [pc, #84]	; (800241c <MX_GPIO_Init+0xd0>)
 80023c8:	f000 fd24 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2110      	movs	r1, #16
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <MX_GPIO_Init+0xd4>)
 80023d2:	f000 fd1f 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	480b      	ldr	r0, [pc, #44]	; (800241c <MX_GPIO_Init+0xd0>)
 80023f0:	f000 fb8c 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f4:	2310      	movs	r3, #16
 80023f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2302      	movs	r3, #2
 8002402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_GPIO_Init+0xd4>)
 800240c:	f000 fb7e 	bl	8002b0c <HAL_GPIO_Init>

}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	40011000 	.word	0x40011000
 8002420:	40010800 	.word	0x40010800

08002424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002428:	b672      	cpsid	i
}
 800242a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800242c:	e7fe      	b.n	800242c <Error_Handler+0x8>
	...

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_MspInit+0x5c>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_MspInit+0x5c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6193      	str	r3, [r2, #24]
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_MspInit+0x5c>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_MspInit+0x5c>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_MspInit+0x5c>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_MspInit+0x5c>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_MspInit+0x60>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_MspInit+0x60>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000

08002494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a15      	ldr	r2, [pc, #84]	; (8002504 <HAL_I2C_MspInit+0x70>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d123      	bne.n	80024fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a13      	ldr	r2, [pc, #76]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d0:	2312      	movs	r3, #18
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	4619      	mov	r1, r3
 80024de:	480b      	ldr	r0, [pc, #44]	; (800250c <HAL_I2C_MspInit+0x78>)
 80024e0:	f000 fb14 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ee:	61d3      	str	r3, [r2, #28]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_I2C_MspInit+0x74>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40005400 	.word	0x40005400
 8002508:	40021000 	.word	0x40021000
 800250c:	40010c00 	.word	0x40010c00

08002510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_SPI_MspInit+0x88>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12f      	bne.n	8002590 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_SPI_MspInit+0x8c>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_SPI_MspInit+0x8c>)
 8002536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_SPI_MspInit+0x8c>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_SPI_MspInit+0x8c>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <HAL_SPI_MspInit+0x8c>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_SPI_MspInit+0x8c>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002560:	23a0      	movs	r3, #160	; 0xa0
 8002562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	4619      	mov	r1, r3
 8002572:	480b      	ldr	r0, [pc, #44]	; (80025a0 <HAL_SPI_MspInit+0x90>)
 8002574:	f000 faca 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4619      	mov	r1, r3
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <HAL_SPI_MspInit+0x90>)
 800258c:	f000 fabe 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013000 	.word	0x40013000
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010800 	.word	0x40010800

080025a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <SDTimer_Handler+0x3c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <SDTimer_Handler+0x1c>
		Timer1--;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <SDTimer_Handler+0x3c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <SDTimer_Handler+0x3c>)
 80025be:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <SDTimer_Handler+0x40>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <SDTimer_Handler+0x34>
		Timer2--;
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <SDTimer_Handler+0x40>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <SDTimer_Handler+0x40>)
 80025d6:	701a      	strb	r2, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20002271 	.word	0x20002271
 80025e4:	20002272 	.word	0x20002272

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <SysTick_Handler+0x30>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <SysTick_Handler+0x30>)
 800263c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <SysTick_Handler+0x30>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b09      	cmp	r3, #9
 8002646:	d904      	bls.n	8002652 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Handler+0x30>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800264e:	f7ff ffa9 	bl	80025a4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f000 f937 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20002270 	.word	0x20002270

08002660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <_kill>:

int _kill(int pid, int sig)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002678:	f006 f8d2 	bl	8008820 <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	2216      	movs	r2, #22
 8002680:	601a      	str	r2, [r3, #0]
	return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_exit>:

void _exit (int status)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002696:	f04f 31ff 	mov.w	r1, #4294967295
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffe7 	bl	800266e <_kill>
	while (1) {}		/* Make sure we hang here */
 80026a0:	e7fe      	b.n	80026a0 <_exit+0x12>

080026a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00a      	b.n	80026ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026b4:	f3af 8000 	nop.w
 80026b8:	4601      	mov	r1, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf0      	blt.n	80026b4 <_read+0x12>
	}

return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e009      	b.n	8002702 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	60ba      	str	r2, [r7, #8]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf1      	blt.n	80026ee <_write+0x12>
	}
	return len;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_close>:

int _close(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273a:	605a      	str	r2, [r3, #4]
	return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <_isatty>:

int _isatty(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	return 1;
 8002750:	2301      	movs	r3, #1
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
	return 0;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f006 f83c 	bl	8008820 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20005000 	.word	0x20005000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	20002274 	.word	0x20002274
 80027dc:	200024c0 	.word	0x200024c0

080027e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ee:	490d      	ldr	r1, [pc, #52]	; (8002824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff ffe5 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f006 f809 	bl	800882c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800281a:	f7ff fc4d 	bl	80020b8 <main>
  bx lr
 800281e:	4770      	bx	lr
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002824:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002828:	0800c630 	.word	0x0800c630
  ldr r2, =_sbss
 800282c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002830:	200024c0 	.word	0x200024c0

08002834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC1_2_IRQHandler>
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f92b 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fdec 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f935 	bl	8002af2 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 f90b 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000004 	.word	0x20000004
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	20002278 	.word	0x20002278

080028e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20002278 	.word	0x20002278

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000000c 	.word	0x2000000c

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	; (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff90 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff49 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff5e 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff90 	bl	80029fc <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5f 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffb0 	bl	8002a60 <SysTick_Config>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b08b      	sub	sp, #44	; 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	e169      	b.n	8002df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b20:	2201      	movs	r2, #1
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8158 	bne.w	8002dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a9a      	ldr	r2, [pc, #616]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d05e      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b48:	4a98      	ldr	r2, [pc, #608]	; (8002dac <HAL_GPIO_Init+0x2a0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d875      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b4e:	4a98      	ldr	r2, [pc, #608]	; (8002db0 <HAL_GPIO_Init+0x2a4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d058      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b54:	4a96      	ldr	r2, [pc, #600]	; (8002db0 <HAL_GPIO_Init+0x2a4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d86f      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b5a:	4a96      	ldr	r2, [pc, #600]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d052      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b60:	4a94      	ldr	r2, [pc, #592]	; (8002db4 <HAL_GPIO_Init+0x2a8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d869      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b66:	4a94      	ldr	r2, [pc, #592]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04c      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b6c:	4a92      	ldr	r2, [pc, #584]	; (8002db8 <HAL_GPIO_Init+0x2ac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d863      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b72:	4a92      	ldr	r2, [pc, #584]	; (8002dbc <HAL_GPIO_Init+0x2b0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d046      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
 8002b78:	4a90      	ldr	r2, [pc, #576]	; (8002dbc <HAL_GPIO_Init+0x2b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d85d      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d82a      	bhi.n	8002bd8 <HAL_GPIO_Init+0xcc>
 8002b82:	2b12      	cmp	r3, #18
 8002b84:	d859      	bhi.n	8002c3a <HAL_GPIO_Init+0x12e>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_GPIO_Init+0x80>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002be1 	.word	0x08002be1
 8002b94:	08002bf3 	.word	0x08002bf3
 8002b98:	08002c35 	.word	0x08002c35
 8002b9c:	08002c3b 	.word	0x08002c3b
 8002ba0:	08002c3b 	.word	0x08002c3b
 8002ba4:	08002c3b 	.word	0x08002c3b
 8002ba8:	08002c3b 	.word	0x08002c3b
 8002bac:	08002c3b 	.word	0x08002c3b
 8002bb0:	08002c3b 	.word	0x08002c3b
 8002bb4:	08002c3b 	.word	0x08002c3b
 8002bb8:	08002c3b 	.word	0x08002c3b
 8002bbc:	08002c3b 	.word	0x08002c3b
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c3b 	.word	0x08002c3b
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c3b 	.word	0x08002c3b
 8002bd0:	08002be9 	.word	0x08002be9
 8002bd4:	08002bfd 	.word	0x08002bfd
 8002bd8:	4a79      	ldr	r2, [pc, #484]	; (8002dc0 <HAL_GPIO_Init+0x2b4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e029      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e024      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01f      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e01a      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e013      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e009      	b.n	8002c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x130>
          break;
 8002c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d801      	bhi.n	8002c46 <HAL_GPIO_Init+0x13a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_Init+0x13e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d802      	bhi.n	8002c58 <HAL_GPIO_Init+0x14c>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	e002      	b.n	8002c5e <HAL_GPIO_Init+0x152>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3b08      	subs	r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	210f      	movs	r1, #15
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80b1 	beq.w	8002dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x2b8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca4:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_GPIO_Init+0x2bc>)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <HAL_GPIO_Init+0x2c0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_GPIO_Init+0x1ec>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	; (8002dd0 <HAL_GPIO_Init+0x2c4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_GPIO_Init+0x1e8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <HAL_GPIO_Init+0x2c8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	; (8002dd8 <HAL_GPIO_Init+0x2cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_GPIO_Init+0x1e0>
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e004      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e002      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_GPIO_Init+0x1ee>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	f002 0203 	and.w	r2, r2, #3
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4093      	lsls	r3, r2
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d0a:	492f      	ldr	r1, [pc, #188]	; (8002dc8 <HAL_GPIO_Init+0x2bc>)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	492c      	ldr	r1, [pc, #176]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4928      	ldr	r1, [pc, #160]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	491e      	ldr	r1, [pc, #120]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4918      	ldr	r1, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	4914      	ldr	r1, [pc, #80]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_GPIO_Init+0x2d0>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
 8002da8:	e021      	b.n	8002dee <HAL_GPIO_Init+0x2e2>
 8002daa:	bf00      	nop
 8002dac:	10320000 	.word	0x10320000
 8002db0:	10310000 	.word	0x10310000
 8002db4:	10220000 	.word	0x10220000
 8002db8:	10210000 	.word	0x10210000
 8002dbc:	10120000 	.word	0x10120000
 8002dc0:	10110000 	.word	0x10110000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40010800 	.word	0x40010800
 8002dd0:	40010c00 	.word	0x40010c00
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4909      	ldr	r1, [pc, #36]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f47f ae8e 	bne.w	8002b20 <HAL_GPIO_Init+0x14>
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	372c      	adds	r7, #44	; 0x2c
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43d9      	mvns	r1, r3
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	400b      	ands	r3, r1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e12b      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff faf8 	bl	8002494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002edc:	f001 fba0 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a81      	ldr	r2, [pc, #516]	; (80030ec <HAL_I2C_Init+0x274>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d807      	bhi.n	8002efc <HAL_I2C_Init+0x84>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a80      	ldr	r2, [pc, #512]	; (80030f0 <HAL_I2C_Init+0x278>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bf94      	ite	ls
 8002ef4:	2301      	movls	r3, #1
 8002ef6:	2300      	movhi	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e006      	b.n	8002f0a <HAL_I2C_Init+0x92>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a7d      	ldr	r2, [pc, #500]	; (80030f4 <HAL_I2C_Init+0x27c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0e7      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a78      	ldr	r2, [pc, #480]	; (80030f8 <HAL_I2C_Init+0x280>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9b      	lsrs	r3, r3, #18
 8002f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a6a      	ldr	r2, [pc, #424]	; (80030ec <HAL_I2C_Init+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d802      	bhi.n	8002f4c <HAL_I2C_Init+0xd4>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	e009      	b.n	8002f60 <HAL_I2C_Init+0xe8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	4a69      	ldr	r2, [pc, #420]	; (80030fc <HAL_I2C_Init+0x284>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	3301      	adds	r3, #1
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	495c      	ldr	r1, [pc, #368]	; (80030ec <HAL_I2C_Init+0x274>)
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	d819      	bhi.n	8002fb4 <HAL_I2C_Init+0x13c>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e59      	subs	r1, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f94:	400b      	ands	r3, r1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_I2C_Init+0x138>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e59      	subs	r1, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fae:	e051      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e04f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_I2C_Init+0x168>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Init+0x18e>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Init+0x196>
 800300a:	2301      	movs	r3, #1
 800300c:	e022      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_I2C_Init+0x1bc>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e58      	subs	r0, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	440b      	add	r3, r1
 8003024:	fbb0 f3f3 	udiv	r3, r0, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6809      	ldr	r1, [r1, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6911      	ldr	r1, [r2, #16]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	000186a0 	.word	0x000186a0
 80030f0:	001e847f 	.word	0x001e847f
 80030f4:	003d08ff 	.word	0x003d08ff
 80030f8:	431bde83 	.word	0x431bde83
 80030fc:	10624dd3 	.word	0x10624dd3

08003100 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800311a:	f7ff fbe5 	bl	80028e8 <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 80d9 	bne.w	80032e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2319      	movs	r3, #25
 8003134:	2201      	movs	r2, #1
 8003136:	496d      	ldr	r1, [pc, #436]	; (80032ec <HAL_I2C_Mem_Write+0x1ec>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fcc1 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	e0cc      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Mem_Write+0x56>
 8003152:	2302      	movs	r3, #2
 8003154:	e0c5      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d007      	beq.n	800317c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2221      	movs	r2, #33	; 0x21
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <HAL_I2C_Mem_Write+0x1f0>)
 80031bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031be:	88f8      	ldrh	r0, [r7, #6]
 80031c0:	893a      	ldrh	r2, [r7, #8]
 80031c2:	8979      	ldrh	r1, [r7, #10]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4603      	mov	r3, r0
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 faf8 	bl	80037c4 <I2C_RequestMemoryWrite>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d052      	beq.n	8003280 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e081      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fd42 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d107      	bne.n	8003206 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06b      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d11b      	bne.n	8003280 <HAL_I2C_Mem_Write+0x180>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1aa      	bne.n	80031de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fd2e 	bl	8003cee <I2C_WaitOnBTFFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b04      	cmp	r3, #4
 800329e:	d107      	bne.n	80032b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e016      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	00100002 	.word	0x00100002
 80032f0:	ffff0000 	.word	0xffff0000

080032f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4603      	mov	r3, r0
 8003304:	817b      	strh	r3, [r7, #10]
 8003306:	460b      	mov	r3, r1
 8003308:	813b      	strh	r3, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003312:	f7ff fae9 	bl	80028e8 <HAL_GetTick>
 8003316:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	f040 8244 	bne.w	80037ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2319      	movs	r3, #25
 800332c:	2201      	movs	r2, #1
 800332e:	4982      	ldr	r1, [pc, #520]	; (8003538 <HAL_I2C_Mem_Read+0x244>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fbc5 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	e237      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2C_Mem_Read+0x5a>
 800334a:	2302      	movs	r3, #2
 800334c:	e230      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d007      	beq.n	8003374 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a62      	ldr	r2, [pc, #392]	; (800353c <HAL_I2C_Mem_Read+0x248>)
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b6:	88f8      	ldrh	r0, [r7, #6]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4603      	mov	r3, r0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa92 	bl	80038f0 <I2C_RequestMemoryRead>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1ec      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d113      	bne.n	8003406 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e1c0      	b.n	8003788 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11e      	bne.n	800344c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800341e:	b672      	cpsid	i
}
 8003420:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003448:	b662      	cpsie	i
}
 800344a:	e035      	b.n	80034b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b02      	cmp	r3, #2
 8003452:	d11e      	bne.n	8003492 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003462:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800348e:	b662      	cpsie	i
}
 8003490:	e012      	b.n	80034b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034b8:	e166      	b.n	8003788 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f200 811f 	bhi.w	8003702 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d123      	bne.n	8003514 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fc4d 	bl	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e167      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003512:	e139      	b.n	8003788 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b02      	cmp	r3, #2
 800351a:	d152      	bne.n	80035c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	2200      	movs	r2, #0
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <HAL_I2C_Mem_Read+0x24c>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 faca 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e13c      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000
 8003540:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003544:	b672      	cpsid	i
}
 8003546:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800358a:	b662      	cpsie	i
}
 800358c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c0:	e0e2      	b.n	8003788 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	497b      	ldr	r1, [pc, #492]	; (80037b8 <HAL_I2C_Mem_Read+0x4c4>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fa77 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0e9      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ec:	b672      	cpsid	i
}
 80035ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003622:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_I2C_Mem_Read+0x4c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_I2C_Mem_Read+0x4cc>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a1a      	lsrs	r2, r3, #8
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00da      	lsls	r2, r3, #3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	3b01      	subs	r3, #1
 8003640:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800366a:	b662      	cpsie	i
}
 800366c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e09a      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d1d9      	bne.n	800363c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ca:	b662      	cpsie	i
}
 80036cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003700:	e042      	b.n	8003788 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fb32 	bl	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e04c      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d118      	bne.n	8003788 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	f47f ae94 	bne.w	80034ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010004 	.word	0x00010004
 80037bc:	20000004 	.word	0x20000004
 80037c0:	14f8b589 	.word	0x14f8b589

080037c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f960 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003814:	d103      	bne.n	800381e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e05f      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6a3a      	ldr	r2, [r7, #32]
 8003836:	492d      	ldr	r1, [pc, #180]	; (80038ec <I2C_RequestMemoryWrite+0x128>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f998 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e04c      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa02 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02b      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]
 800389a:	e021      	b.n	80038e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9dc 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e005      	b.n	80038e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038d6:	893b      	ldrh	r3, [r7, #8]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	00010002 	.word	0x00010002

080038f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2200      	movs	r2, #0
 8003932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8c2 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003950:	d103      	bne.n	800395a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0aa      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800396c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	4952      	ldr	r1, [pc, #328]	; (8003abc <I2C_RequestMemoryRead+0x1cc>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f8fa 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e097      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f964 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e076      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	e021      	b.n	8003a1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f93e 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d107      	bne.n	8003a0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e050      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	6a39      	ldr	r1, [r7, #32]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f923 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d107      	bne.n	8003a44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e035      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f82b 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7e:	d103      	bne.n	8003a88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e013      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <I2C_RequestMemoryRead+0x1cc>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f863 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad0:	e025      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d021      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe ff05 	bl	80028e8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e023      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10d      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	e00c      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d0b6      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7c:	e051      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d123      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e046      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d021      	beq.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe fe83 	bl	80028e8 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e020      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10c      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e00b      	b.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d18d      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e02d      	b.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8ce 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02d      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe fe29 	bl	80028e8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d1ca      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cfa:	e02d      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f88d 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02d      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d021      	beq.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fe fde8 	bl	80028e8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d1ca      	bne.n	8003cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d7c:	e042      	b.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d119      	bne.n	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0210 	mvn.w	r2, #16
 8003d94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e029      	b.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7fe fd92 	bl	80028e8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d1b5      	bne.n	8003d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d11b      	bne.n	8003e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e272      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8087 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e98:	4b92      	ldr	r3, [pc, #584]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ea4:	4b8f      	ldr	r3, [pc, #572]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d112      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
 8003eb0:	4b8c      	ldr	r3, [pc, #560]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	4b89      	ldr	r3, [pc, #548]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d06c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d168      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e24c      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ede:	d106      	bne.n	8003eee <HAL_RCC_OscConfig+0x76>
 8003ee0:	4b80      	ldr	r3, [pc, #512]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a7f      	ldr	r2, [pc, #508]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e02e      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x98>
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0xbc>
 8003f1a:	4b72      	ldr	r3, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a71      	ldr	r2, [pc, #452]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f34:	4b6b      	ldr	r3, [pc, #428]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6a      	ldr	r2, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a67      	ldr	r2, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe fcc8 	bl	80028e8 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fcc4 	bl	80028e8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e200      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xe4>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fcb4 	bl	80028e8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fcb0 	bl	80028e8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1ec      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x10c>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fb2:	4b4c      	ldr	r3, [pc, #304]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fbe:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x18c>
 8003fca:	4b46      	ldr	r3, [pc, #280]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x176>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e1c0      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4939      	ldr	r1, [pc, #228]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	e03a      	b.n	800407a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x270>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fe fc69 	bl	80028e8 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401a:	f7fe fc65 	bl	80028e8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1a1      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4927      	ldr	r1, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_RCC_OscConfig+0x270>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe fc48 	bl	80028e8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fe fc44 	bl	80028e8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e180      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03a      	beq.n	80040fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <HAL_RCC_OscConfig+0x274>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004094:	f7fe fc28 	bl	80028e8 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fe fc24 	bl	80028e8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e160      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f000 fac4 	bl	8004648 <RCC_Delay>
 80040c0:	e01c      	b.n	80040fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_OscConfig+0x274>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7fe fc0e 	bl	80028e8 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ce:	e00f      	b.n	80040f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7fe fc0a 	bl	80028e8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d908      	bls.n	80040f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e146      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	42420000 	.word	0x42420000
 80040ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b92      	ldr	r3, [pc, #584]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e9      	bne.n	80040d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a6 	beq.w	8004256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b8b      	ldr	r3, [pc, #556]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	4b88      	ldr	r3, [pc, #544]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4a87      	ldr	r2, [pc, #540]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	61d3      	str	r3, [r2, #28]
 8004126:	4b85      	ldr	r3, [pc, #532]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b82      	ldr	r3, [pc, #520]	; (8004340 <HAL_RCC_OscConfig+0x4c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b7f      	ldr	r3, [pc, #508]	; (8004340 <HAL_RCC_OscConfig+0x4c8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7e      	ldr	r2, [pc, #504]	; (8004340 <HAL_RCC_OscConfig+0x4c8>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fe fbcb 	bl	80028e8 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fe fbc7 	bl	80028e8 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b64      	cmp	r3, #100	; 0x64
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e103      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b75      	ldr	r3, [pc, #468]	; (8004340 <HAL_RCC_OscConfig+0x4c8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x312>
 800417c:	4b6f      	ldr	r3, [pc, #444]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a6e      	ldr	r2, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	e02d      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x334>
 8004192:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a69      	ldr	r2, [pc, #420]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b67      	ldr	r3, [pc, #412]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a66      	ldr	r2, [pc, #408]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
 80041aa:	e01c      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_OscConfig+0x356>
 80041b4:	4b61      	ldr	r3, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4a60      	ldr	r2, [pc, #384]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	4b5e      	ldr	r3, [pc, #376]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4a5d      	ldr	r2, [pc, #372]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6213      	str	r3, [r2, #32]
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 80041ce:	4b5b      	ldr	r3, [pc, #364]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a5a      	ldr	r2, [pc, #360]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6213      	str	r3, [r2, #32]
 80041da:	4b58      	ldr	r3, [pc, #352]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a57      	ldr	r2, [pc, #348]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ee:	f7fe fb7b 	bl	80028e8 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe fb77 	bl	80028e8 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e0b1      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420c:	4b4b      	ldr	r3, [pc, #300]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCC_OscConfig+0x37e>
 8004218:	e014      	b.n	8004244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fe fb65 	bl	80028e8 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fe fb61 	bl	80028e8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e09b      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004238:	4b40      	ldr	r3, [pc, #256]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ee      	bne.n	8004222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b3c      	ldr	r3, [pc, #240]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4a3b      	ldr	r2, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8087 	beq.w	800436e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004260:	4b36      	ldr	r3, [pc, #216]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	d061      	beq.n	8004330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d146      	bne.n	8004302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fe fb35 	bl	80028e8 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004282:	f7fe fb31 	bl	80028e8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e06d      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d108      	bne.n	80042bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4921      	ldr	r1, [pc, #132]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042bc:	4b1f      	ldr	r3, [pc, #124]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a19      	ldr	r1, [r3, #32]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	430b      	orrs	r3, r1
 80042ce:	491b      	ldr	r1, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe fb05 	bl	80028e8 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe fb01 	bl	80028e8 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e03d      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x46a>
 8004300:	e035      	b.n	800436e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe faee 	bl	80028e8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe faea 	bl	80028e8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e026      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCC_OscConfig+0x4c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x498>
 800432e:	e01e      	b.n	800436e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e019      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x500>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000

0800437c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0d0      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004390:	4b6a      	ldr	r3, [pc, #424]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d910      	bls.n	80043c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b67      	ldr	r3, [pc, #412]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 0207 	bic.w	r2, r3, #7
 80043a6:	4965      	ldr	r1, [pc, #404]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0b8      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a58      	ldr	r2, [pc, #352]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f0:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80043f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043fc:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	494d      	ldr	r1, [pc, #308]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d040      	beq.n	800449c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d115      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e073      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e06b      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445a:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4936      	ldr	r1, [pc, #216]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800446c:	f7fe fa3c 	bl	80028e8 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	e00a      	b.n	800448a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004474:	f7fe fa38 	bl	80028e8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e053      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 020c 	and.w	r2, r3, #12
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	429a      	cmp	r2, r3
 800449a:	d1eb      	bne.n	8004474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d210      	bcs.n	80044cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0207 	bic.w	r2, r3, #7
 80044b2:	4922      	ldr	r1, [pc, #136]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e032      	b.n	8004532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	490e      	ldr	r1, [pc, #56]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800450a:	f000 f821 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800450e:	4602      	mov	r2, r0
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	490a      	ldr	r1, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x1cc>)
 8004524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x1d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f99a 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000
 8004540:	40021000 	.word	0x40021000
 8004544:	0800bdd0 	.word	0x0800bdd0
 8004548:	20000004 	.word	0x20000004
 800454c:	20000008 	.word	0x20000008

08004550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	b490      	push	{r4, r7}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCC_GetSysClockFreq+0xac>)
 8004558:	1d3c      	adds	r4, r7, #4
 800455a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800455c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004560:	f240 2301 	movw	r3, #513	; 0x201
 8004564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b04      	cmp	r3, #4
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x40>
 800458a:	2b08      	cmp	r3, #8
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x46>
 800458e:	e02b      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004592:	623b      	str	r3, [r7, #32]
      break;
 8004594:	e02b      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	0c9b      	lsrs	r3, r3, #18
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3328      	adds	r3, #40	; 0x28
 80045a0:	443b      	add	r3, r7
 80045a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d012      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	0c5b      	lsrs	r3, r3, #17
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	3328      	adds	r3, #40	; 0x28
 80045be:	443b      	add	r3, r7
 80045c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ca:	fb03 f202 	mul.w	r2, r3, r2
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e004      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	623b      	str	r3, [r7, #32]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ea:	623b      	str	r3, [r7, #32]
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc90      	pop	{r4, r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	0800bd78 	.word	0x0800bd78
 8004600:	40021000 	.word	0x40021000
 8004604:	007a1200 	.word	0x007a1200
 8004608:	003d0900 	.word	0x003d0900

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <HAL_RCC_GetHCLKFreq+0x10>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004624:	f7ff fff2 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000
 8004644:	0800bde0 	.word	0x0800bde0

08004648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <RCC_Delay+0x34>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <RCC_Delay+0x38>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a5b      	lsrs	r3, r3, #9
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004664:	bf00      	nop
  }
  while (Delay --);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	60fa      	str	r2, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <RCC_Delay+0x1c>
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	20000004 	.word	0x20000004
 8004680:	10624dd3 	.word	0x10624dd3

08004684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e076      	b.n	8004784 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a6:	d009      	beq.n	80046bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	61da      	str	r2, [r3, #28]
 80046ae:	e005      	b.n	80046bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fd ff1a 	bl	8002510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	ea42 0103 	orr.w	r1, r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	0c1a      	lsrs	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f002 0204 	and.w	r2, r2, #4
 8004762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Transmit+0x22>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e126      	b.n	80049fc <HAL_SPI_Transmit+0x270>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b6:	f7fe f897 	bl	80028e8 <HAL_GetTick>
 80047ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d002      	beq.n	80047d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
 80047ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047d0:	e10b      	b.n	80049ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Transmit+0x52>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047e2:	e102      	b.n	80049ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482a:	d10f      	bne.n	800484c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800484a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d007      	beq.n	800486a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004872:	d14b      	bne.n	800490c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit+0xf6>
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d13e      	bne.n	8004900 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a6:	e02b      	b.n	8004900 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d112      	bne.n	80048dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80048da:	e011      	b.n	8004900 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fe f804 	bl	80028e8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d803      	bhi.n	80048f4 <HAL_SPI_Transmit+0x168>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x16e>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048fe:	e074      	b.n	80049ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ce      	bne.n	80048a8 <HAL_SPI_Transmit+0x11c>
 800490a:	e04c      	b.n	80049a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SPI_Transmit+0x18e>
 8004914:	8afb      	ldrh	r3, [r7, #22]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d140      	bne.n	800499c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004940:	e02c      	b.n	800499c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d113      	bne.n	8004978 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	; 0x36
 8004976:	e011      	b.n	800499c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004978:	f7fd ffb6 	bl	80028e8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d803      	bhi.n	8004990 <HAL_SPI_Transmit+0x204>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x20a>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	77fb      	strb	r3, [r7, #31]
          goto error;
 800499a:	e026      	b.n	80049ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1cd      	bne.n	8004942 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fa54 	bl	8004e58 <SPI_EndRxTxTransaction>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e000      	b.n	80049ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80049e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	; 0x30
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a12:	2301      	movs	r3, #1
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x26>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e18a      	b.n	8004d40 <HAL_SPI_TransmitReceive+0x33c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a32:	f7fd ff59 	bl	80028e8 <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d00f      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x70>
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5a:	d107      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x68>
 8004a64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d003      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a72:	e15b      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x82>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x82>
 8004a80:	887b      	ldrh	r3, [r7, #2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a8c:	e14e      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d003      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afe:	d178      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x10a>
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d166      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b32:	e053      	b.n	8004bdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d11b      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x176>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x176>
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d113      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d119      	bne.n	8004bbc <HAL_SPI_TransmitReceive+0x1b8>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bbc:	f7fd fe94 	bl	80028e8 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d807      	bhi.n	8004bdc <HAL_SPI_TransmitReceive+0x1d8>
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d003      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bda:	e0a7      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1a6      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x130>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1a1      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x130>
 8004bf0:	e07c      	b.n	8004cec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x1fc>
 8004bfa:	8b7b      	ldrh	r3, [r7, #26]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d16b      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c26:	e057      	b.n	8004cd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d11c      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x26c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x26c>
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d114      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d119      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x2ae>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d014      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cb2:	f7fd fe19 	bl	80028e8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_TransmitReceive+0x2c6>
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x2cc>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cd6:	e029      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1a2      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x224>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d19d      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f8b1 	bl	8004e58 <SPI_EndRxTxTransaction>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d006      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d08:	e010      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	e000      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3730      	adds	r7, #48	; 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d58:	f7fd fdc6 	bl	80028e8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d68:	f7fd fdbe 	bl	80028e8 <HAL_GetTick>
 8004d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	015b      	lsls	r3, r3, #5
 8004d74:	0d1b      	lsrs	r3, r3, #20
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7e:	e054      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d050      	beq.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d88:	f7fd fdae 	bl	80028e8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d902      	bls.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d13d      	bne.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db6:	d111      	bne.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc0:	d004      	beq.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dca:	d107      	bne.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d10f      	bne.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e017      	b.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d19b      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000004 	.word	0x20000004

08004e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ff6a 	bl	8004d48 <SPI_WaitFlagStateUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e000      	b.n	8004e8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e98:	4904      	ldr	r1, [pc, #16]	; (8004eac <MX_FATFS_Init+0x18>)
 8004e9a:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <MX_FATFS_Init+0x1c>)
 8004e9c:	f003 fc24 	bl	80086e8 <FATFS_LinkDriver>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <MX_FATFS_Init+0x20>)
 8004ea6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20002280 	.word	0x20002280
 8004eb0:	20000010 	.word	0x20000010
 8004eb4:	2000227c 	.word	0x2000227c

08004eb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ebc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    return SD_disk_initialize (pdrv);
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc fdbc 	bl	8001a50 <SD_disk_initialize>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc fe99 	bl	8001c28 <SD_disk_status>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004f12:	7bf8      	ldrb	r0, [r7, #15]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	f7fc fe99 	bl	8001c50 <SD_disk_read>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004f3a:	7bf8      	ldrb	r0, [r7, #15]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	f7fc feef 	bl	8001d24 <SD_disk_write>
 8004f46:	4603      	mov	r3, r0
 8004f48:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	603a      	str	r2, [r7, #0]
 8004f5c:	71fb      	strb	r3, [r7, #7]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	79b9      	ldrb	r1, [r7, #6]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fc ff5f 	bl	8001e2c <SD_disk_ioctl>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <disk_status+0x30>)
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	79fa      	ldrb	r2, [r7, #7]
 8004f94:	4905      	ldr	r1, [pc, #20]	; (8004fac <disk_status+0x30>)
 8004f96:	440a      	add	r2, r1
 8004f98:	7a12      	ldrb	r2, [r2, #8]
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4798      	blx	r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200024a4 	.word	0x200024a4

08004fb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <disk_initialize+0x48>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d111      	bne.n	8004fec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4a0b      	ldr	r2, [pc, #44]	; (8004ff8 <disk_initialize+0x48>)
 8004fcc:	2101      	movs	r1, #1
 8004fce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <disk_initialize+0x48>)
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	79fa      	ldrb	r2, [r7, #7]
 8004fde:	4906      	ldr	r1, [pc, #24]	; (8004ff8 <disk_initialize+0x48>)
 8004fe0:	440a      	add	r2, r1
 8004fe2:	7a12      	ldrb	r2, [r2, #8]
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200024a4 	.word	0x200024a4

08004ffc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <disk_read+0x3c>)
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	689c      	ldr	r4, [r3, #8]
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <disk_read+0x3c>)
 800501c:	4413      	add	r3, r2
 800501e:	7a18      	ldrb	r0, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	47a0      	blx	r4
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
  return res;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}
 8005036:	bf00      	nop
 8005038:	200024a4 	.word	0x200024a4

0800503c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <disk_write+0x3c>)
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	68dc      	ldr	r4, [r3, #12]
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	4a07      	ldr	r2, [pc, #28]	; (8005078 <disk_write+0x3c>)
 800505c:	4413      	add	r3, r2
 800505e:	7a18      	ldrb	r0, [r3, #8]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	47a0      	blx	r4
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]
  return res;
 800506c:	7dfb      	ldrb	r3, [r7, #23]
}
 800506e:	4618      	mov	r0, r3
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	bf00      	nop
 8005078:	200024a4 	.word	0x200024a4

0800507c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	603a      	str	r2, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
 8005088:	460b      	mov	r3, r1
 800508a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <disk_ioctl+0x38>)
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	79fa      	ldrb	r2, [r7, #7]
 800509a:	4906      	ldr	r1, [pc, #24]	; (80050b4 <disk_ioctl+0x38>)
 800509c:	440a      	add	r2, r1
 800509e:	7a10      	ldrb	r0, [r2, #8]
 80050a0:	79b9      	ldrb	r1, [r7, #6]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	4798      	blx	r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200024a4 	.word	0x200024a4

080050b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80050cc:	e007      	b.n	80050de <mem_cpy+0x26>
		*d++ = *s++;
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	1c53      	adds	r3, r2, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	6179      	str	r1, [r7, #20]
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f2      	bne.n	80050ce <mem_cpy+0x16>
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005104:	e005      	b.n	8005112 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f4      	bne.n	8005106 <mem_set+0x12>
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005140:	bf00      	nop
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <mem_cmp+0x40>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	4619      	mov	r1, r3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	61ba      	str	r2, [r7, #24]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	1acb      	subs	r3, r1, r3
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0ec      	beq.n	8005142 <mem_cmp+0x1a>
	return r;
 8005168:	697b      	ldr	r3, [r7, #20]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3724      	adds	r7, #36	; 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800517e:	e002      	b.n	8005186 <chk_chr+0x12>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3301      	adds	r3, #1
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <chk_chr+0x26>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4293      	cmp	r3, r2
 8005198:	d1f2      	bne.n	8005180 <chk_chr+0xc>
	return *str;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	781b      	ldrb	r3, [r3, #0]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e03b      	b.n	8005234 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80051bc:	4931      	ldr	r1, [pc, #196]	; (8005284 <chk_lock+0xdc>)
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02c      	beq.n	800522a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80051d0:	492c      	ldr	r1, [pc, #176]	; (8005284 <chk_lock+0xdc>)
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d120      	bne.n	800522e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80051ec:	4925      	ldr	r1, [pc, #148]	; (8005284 <chk_lock+0xdc>)
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3304      	adds	r3, #4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005204:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005206:	429a      	cmp	r2, r3
 8005208:	d111      	bne.n	800522e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800520a:	491e      	ldr	r1, [pc, #120]	; (8005284 <chk_lock+0xdc>)
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3308      	adds	r3, #8
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005224:	429a      	cmp	r2, r3
 8005226:	d102      	bne.n	800522e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005228:	e007      	b.n	800523a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800522a:	2301      	movs	r3, #1
 800522c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d9c0      	bls.n	80051bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d109      	bne.n	8005254 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <chk_lock+0xa4>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d101      	bne.n	8005250 <chk_lock+0xa8>
 800524c:	2300      	movs	r3, #0
 800524e:	e013      	b.n	8005278 <chk_lock+0xd0>
 8005250:	2312      	movs	r3, #18
 8005252:	e011      	b.n	8005278 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <chk_lock+0xca>
 800525a:	490a      	ldr	r1, [pc, #40]	; (8005284 <chk_lock+0xdc>)
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	330a      	adds	r3, #10
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d101      	bne.n	8005276 <chk_lock+0xce>
 8005272:	2310      	movs	r3, #16
 8005274:	e000      	b.n	8005278 <chk_lock+0xd0>
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	2000228c 	.word	0x2000228c

08005288 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
 8005292:	e002      	b.n	800529a <enq_lock+0x12>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d809      	bhi.n	80052b4 <enq_lock+0x2c>
 80052a0:	490a      	ldr	r1, [pc, #40]	; (80052cc <enq_lock+0x44>)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ef      	bne.n	8005294 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	2000228c 	.word	0x2000228c

080052d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e02e      	b.n	800533e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80052e0:	4958      	ldr	r1, [pc, #352]	; (8005444 <inc_lock+0x174>)
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d11d      	bne.n	8005338 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80052fc:	4951      	ldr	r1, [pc, #324]	; (8005444 <inc_lock+0x174>)
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3304      	adds	r3, #4
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005314:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005316:	429a      	cmp	r2, r3
 8005318:	d10e      	bne.n	8005338 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800531a:	494a      	ldr	r1, [pc, #296]	; (8005444 <inc_lock+0x174>)
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	3308      	adds	r3, #8
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005332:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005334:	429a      	cmp	r2, r3
 8005336:	d006      	beq.n	8005346 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d9cd      	bls.n	80052e0 <inc_lock+0x10>
 8005344:	e000      	b.n	8005348 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005346:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d148      	bne.n	80053e0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e002      	b.n	800535a <inc_lock+0x8a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d809      	bhi.n	8005374 <inc_lock+0xa4>
 8005360:	4938      	ldr	r1, [pc, #224]	; (8005444 <inc_lock+0x174>)
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ef      	bne.n	8005354 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d101      	bne.n	800537e <inc_lock+0xae>
 800537a:	2300      	movs	r3, #0
 800537c:	e05d      	b.n	800543a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	482f      	ldr	r0, [pc, #188]	; (8005444 <inc_lock+0x174>)
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4403      	add	r3, r0
 8005394:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539c:	6899      	ldr	r1, [r3, #8]
 800539e:	4829      	ldr	r0, [pc, #164]	; (8005444 <inc_lock+0x174>)
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	3304      	adds	r3, #4
 80053ae:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	88d8      	ldrh	r0, [r3, #6]
 80053b8:	4922      	ldr	r1, [pc, #136]	; (8005444 <inc_lock+0x174>)
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3308      	adds	r3, #8
 80053c8:	4602      	mov	r2, r0
 80053ca:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80053cc:	491d      	ldr	r1, [pc, #116]	; (8005444 <inc_lock+0x174>)
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	330a      	adds	r3, #10
 80053dc:	2200      	movs	r2, #0
 80053de:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <inc_lock+0x130>
 80053e6:	4917      	ldr	r1, [pc, #92]	; (8005444 <inc_lock+0x174>)
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	330a      	adds	r3, #10
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <inc_lock+0x130>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e01c      	b.n	800543a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <inc_lock+0x14e>
 8005406:	490f      	ldr	r1, [pc, #60]	; (8005444 <inc_lock+0x174>)
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	330a      	adds	r3, #10
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	b299      	uxth	r1, r3
 800541c:	e001      	b.n	8005422 <inc_lock+0x152>
 800541e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005422:	4808      	ldr	r0, [pc, #32]	; (8005444 <inc_lock+0x174>)
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4403      	add	r3, r0
 8005430:	330a      	adds	r3, #10
 8005432:	460a      	mov	r2, r1
 8005434:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	2000228c 	.word	0x2000228c

08005448 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3b01      	subs	r3, #1
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d82e      	bhi.n	80054ba <dec_lock+0x72>
		n = Files[i].ctr;
 800545c:	491b      	ldr	r1, [pc, #108]	; (80054cc <dec_lock+0x84>)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	330a      	adds	r3, #10
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005470:	89fb      	ldrh	r3, [r7, #14]
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d101      	bne.n	800547c <dec_lock+0x34>
 8005478:	2300      	movs	r3, #0
 800547a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <dec_lock+0x40>
 8005482:	89fb      	ldrh	r3, [r7, #14]
 8005484:	3b01      	subs	r3, #1
 8005486:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005488:	4910      	ldr	r1, [pc, #64]	; (80054cc <dec_lock+0x84>)
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	330a      	adds	r3, #10
 8005498:	89fa      	ldrh	r2, [r7, #14]
 800549a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800549c:	89fb      	ldrh	r3, [r7, #14]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <dec_lock+0x6c>
 80054a2:	490a      	ldr	r1, [pc, #40]	; (80054cc <dec_lock+0x84>)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	737b      	strb	r3, [r7, #13]
 80054b8:	e001      	b.n	80054be <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80054ba:	2302      	movs	r3, #2
 80054bc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80054be:	7b7b      	ldrb	r3, [r7, #13]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000228c 	.word	0x2000228c

080054d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e016      	b.n	800550c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80054de:	4910      	ldr	r1, [pc, #64]	; (8005520 <clear_lock+0x50>)
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d108      	bne.n	8005506 <clear_lock+0x36>
 80054f4:	490a      	ldr	r1, [pc, #40]	; (8005520 <clear_lock+0x50>)
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d9e5      	bls.n	80054de <clear_lock+0xe>
	}
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	2000228c 	.word	0x2000228c

08005524 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d040      	beq.n	80055be <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554c:	7858      	ldrb	r0, [r3, #1]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	2301      	movs	r3, #1
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	f7ff fd72 	bl	800503c <disk_write>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <sync_window+0x40>
			res = FR_DISK_ERR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e02c      	b.n	80055be <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556a:	2200      	movs	r2, #0
 800556c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d21b      	bcs.n	80055be <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558c:	78db      	ldrb	r3, [r3, #3]
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	e012      	b.n	80055b8 <sync_window+0x94>
					wsect += fs->fsize;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4413      	add	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a6:	7858      	ldrb	r0, [r3, #1]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	2301      	movs	r3, #1
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	f7ff fd45 	bl	800503c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d8e9      	bhi.n	8005592 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d01e      	beq.n	8005622 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff9d 	bl	8005524 <sync_window>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d116      	bne.n	8005622 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	7858      	ldrb	r0, [r3, #1]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	2301      	movs	r3, #1
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	f7ff fcfb 	bl	8004ffc <disk_read>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800560c:	f04f 33ff 	mov.w	r3, #4294967295
 8005610:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561c:	461a      	mov	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff75 	bl	8005524 <sync_window>
 800563a:	4603      	mov	r3, r0
 800563c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 80ad 	bne.w	80057a0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b03      	cmp	r3, #3
 8005650:	f040 8098 	bne.w	8005784 <sync_fs+0x158>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565a:	795b      	ldrb	r3, [r3, #5]
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 8091 	bne.w	8005784 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566a:	895b      	ldrh	r3, [r3, #10]
 800566c:	461a      	mov	r2, r3
 800566e:	2100      	movs	r1, #0
 8005670:	f7ff fd40 	bl	80050f4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2255      	movs	r2, #85	; 0x55
 8005678:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	22aa      	movs	r2, #170	; 0xaa
 8005680:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2252      	movs	r2, #82	; 0x52
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2252      	movs	r2, #82	; 0x52
 800568e:	705a      	strb	r2, [r3, #1]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2261      	movs	r2, #97	; 0x61
 8005694:	709a      	strb	r2, [r3, #2]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2241      	movs	r2, #65	; 0x41
 800569a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2272      	movs	r2, #114	; 0x72
 80056a0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2272      	movs	r2, #114	; 0x72
 80056a8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2241      	movs	r2, #65	; 0x41
 80056b0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2261      	movs	r2, #97	; 0x61
 80056b8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	b29b      	uxth	r3, r3
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	b29b      	uxth	r3, r3
 8005724:	b2da      	uxtb	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2da      	uxtb	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	0e1b      	lsrs	r3, r3, #24
 8005748:	b2da      	uxtb	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005768:	7858      	ldrb	r0, [r3, #1]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	2301      	movs	r3, #1
 8005776:	f7ff fc61 	bl	800503c <disk_write>
			fs->fsi_flag = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005780:	2200      	movs	r2, #0
 8005782:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2200      	movs	r2, #0
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fc73 	bl	800507c <disk_ioctl>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	3b02      	subs	r3, #2
 80057b8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	3b02      	subs	r3, #2
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d301      	bcc.n	80057ce <clust2sect+0x24>
 80057ca:	2300      	movs	r3, #0
 80057cc:	e00c      	b.n	80057e8 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d4:	789b      	ldrb	r3, [r3, #2]
 80057d6:	461a      	mov	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	fb03 f202 	mul.w	r2, r3, r2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	4413      	add	r3, r2
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d906      	bls.n	8005810 <get_fat+0x1e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e0e4      	b.n	80059e0 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005816:	f04f 33ff 	mov.w	r3, #4294967295
 800581a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b03      	cmp	r3, #3
 8005826:	f000 8098 	beq.w	800595a <get_fat+0x168>
 800582a:	2b03      	cmp	r3, #3
 800582c:	f300 80ce 	bgt.w	80059cc <get_fat+0x1da>
 8005830:	2b01      	cmp	r3, #1
 8005832:	d002      	beq.n	800583a <get_fat+0x48>
 8005834:	2b02      	cmp	r3, #2
 8005836:	d05f      	beq.n	80058f8 <get_fat+0x106>
 8005838:	e0c8      	b.n	80059cc <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	4619      	mov	r1, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005860:	4413      	add	r3, r2
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff feaf 	bl	80055c8 <move_window>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 80b0 	bne.w	80059d2 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	60fa      	str	r2, [r7, #12]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800587e:	8952      	ldrh	r2, [r2, #10]
 8005880:	fbb3 f1f2 	udiv	r1, r3, r2
 8005884:	fb01 f202 	mul.w	r2, r1, r2
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	5cd3      	ldrb	r3, [r2, r3]
 800588e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	895b      	ldrh	r3, [r3, #10]
 80058a0:	4619      	mov	r1, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80058a8:	4413      	add	r3, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fe8b 	bl	80055c8 <move_window>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 808e 	bne.w	80059d6 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c0:	895b      	ldrh	r3, [r3, #10]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80058ca:	fb01 f202 	mul.w	r2, r1, r2
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	5cd3      	ldrb	r3, [r2, r3]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	461a      	mov	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <get_fat+0xfc>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	e002      	b.n	80058f4 <get_fat+0x102>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f4:	617b      	str	r3, [r7, #20]
			break;
 80058f6:	e073      	b.n	80059e0 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	895b      	ldrh	r3, [r3, #10]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	fbb3 f3f1 	udiv	r3, r3, r1
 8005914:	4413      	add	r3, r2
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fe55 	bl	80055c8 <move_window>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d15a      	bne.n	80059da <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800592e:	8952      	ldrh	r2, [r2, #10]
 8005930:	fbb3 f1f2 	udiv	r1, r3, r2
 8005934:	fb01 f202 	mul.w	r2, r1, r2
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3301      	adds	r3, #1
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b21a      	sxth	r2, r3
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b21b      	sxth	r3, r3
 8005950:	4313      	orrs	r3, r2
 8005952:	b21b      	sxth	r3, r3
 8005954:	b29b      	uxth	r3, r3
 8005956:	617b      	str	r3, [r7, #20]
			break;
 8005958:	e042      	b.n	80059e0 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005968:	895b      	ldrh	r3, [r3, #10]
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	b29b      	uxth	r3, r3
 800596e:	4619      	mov	r1, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	fbb3 f3f1 	udiv	r3, r3, r1
 8005976:	4413      	add	r3, r2
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fe24 	bl	80055c8 <move_window>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d12b      	bne.n	80059de <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005990:	8952      	ldrh	r2, [r2, #10]
 8005992:	fbb3 f1f2 	udiv	r1, r3, r2
 8005996:	fb01 f202 	mul.w	r2, r1, r2
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3303      	adds	r3, #3
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	061a      	lsls	r2, r3, #24
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3302      	adds	r3, #2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	4313      	orrs	r3, r2
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	3201      	adds	r2, #1
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	0212      	lsls	r2, r2, #8
 80059bc:	4313      	orrs	r3, r2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059c8:	617b      	str	r3, [r7, #20]
			break;
 80059ca:	e009      	b.n	80059e0 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e006      	b.n	80059e0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059d2:	bf00      	nop
 80059d4:	e004      	b.n	80059e0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059de:	bf00      	nop
		}
	}

	return val;
 80059e0:	697b      	ldr	r3, [r7, #20]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b088      	sub	sp, #32
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d906      	bls.n	8005a0a <put_fat+0x20>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <put_fat+0x26>
		res = FR_INT_ERR;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	77fb      	strb	r3, [r7, #31]
 8005a0e:	e13a      	b.n	8005c86 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	f000 80d0 	beq.w	8005bbe <put_fat+0x1d4>
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f300 8127 	bgt.w	8005c72 <put_fat+0x288>
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d003      	beq.n	8005a30 <put_fat+0x46>
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	f000 808f 	beq.w	8005b4c <put_fat+0x162>
 8005a2e:	e120      	b.n	8005c72 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	895b      	ldrh	r3, [r3, #10]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a56:	4413      	add	r3, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fdb4 	bl	80055c8 <move_window>
 8005a60:	4603      	mov	r3, r0
 8005a62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 8106 	bne.w	8005c78 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	617a      	str	r2, [r7, #20]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a78:	8952      	ldrh	r2, [r2, #10]
 8005a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a7e:	fb01 f202 	mul.w	r2, r1, r2
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <put_fat+0xc6>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	b25b      	sxtb	r3, r3
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	b25a      	sxtb	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e001      	b.n	8005ab4 <put_fat+0xca>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	2201      	movs	r2, #1
 8005ac0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	895b      	ldrh	r3, [r3, #10]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ada:	4413      	add	r3, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fd72 	bl	80055c8 <move_window>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 80c6 	bne.w	8005c7c <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af6:	895b      	ldrh	r3, [r3, #10]
 8005af8:	461a      	mov	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b00:	fb01 f202 	mul.w	r2, r1, r2
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <put_fat+0x134>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e00e      	b.n	8005b3c <put_fat+0x152>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f023 030f 	bic.w	r3, r3, #15
 8005b28:	b25a      	sxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	2201      	movs	r2, #1
 8005b48:	711a      	strb	r2, [r3, #4]
			break;
 8005b4a:	e09c      	b.n	8005c86 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	895b      	ldrh	r3, [r3, #10]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4619      	mov	r1, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b68:	4413      	add	r3, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fd2b 	bl	80055c8 <move_window>
 8005b72:	4603      	mov	r3, r0
 8005b74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8081 	bne.w	8005c80 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b88:	8952      	ldrh	r2, [r2, #10]
 8005b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b8e:	fb01 f202 	mul.w	r2, r1, r2
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3301      	adds	r3, #1
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	2201      	movs	r2, #1
 8005bba:	711a      	strb	r2, [r3, #4]
			break;
 8005bbc:	e063      	b.n	8005c86 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bda:	4413      	add	r3, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fcf2 	bl	80055c8 <move_window>
 8005be4:	4603      	mov	r3, r0
 8005be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005be8:	7ffb      	ldrb	r3, [r7, #31]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d14a      	bne.n	8005c84 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bf8:	8952      	ldrh	r2, [r2, #10]
 8005bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bfe:	fb01 f202 	mul.w	r2, r1, r2
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	061a      	lsls	r2, r3, #24
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	041b      	lsls	r3, r3, #16
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	3201      	adds	r2, #1
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	0212      	lsls	r2, r2, #8
 8005c24:	4313      	orrs	r3, r2
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0c1a      	lsrs	r2, r3, #16
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	3302      	adds	r3, #2
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0e1a      	lsrs	r2, r3, #24
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3303      	adds	r3, #3
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	711a      	strb	r2, [r3, #4]
			break;
 8005c70:	e009      	b.n	8005c86 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005c72:	2302      	movs	r3, #2
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e006      	b.n	8005c86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c78:	bf00      	nop
 8005c7a:	e004      	b.n	8005c86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c84:	bf00      	nop
		}
	}

	return res;
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d906      	bls.n	8005cae <remove_chain+0x1e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e049      	b.n	8005d48 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005cb8:	e03b      	b.n	8005d32 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff fd98 	bl	80057f2 <get_fat>
 8005cc2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d03b      	beq.n	8005d42 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d102      	bne.n	8005cd6 <remove_chain+0x46>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e038      	b.n	8005d48 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d102      	bne.n	8005ce4 <remove_chain+0x54>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e031      	b.n	8005d48 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff fe7e 	bl	80059ea <put_fat>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d126      	bne.n	8005d46 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d013      	beq.n	8005d2e <remove_chain+0x9e>
				fs->free_clust++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d16:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	795b      	ldrb	r3, [r3, #5]
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d3bc      	bcc.n	8005cba <remove_chain+0x2a>
 8005d40:	e002      	b.n	8005d48 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005d46:	bf00      	nop
		}
	}

	return res;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d111      	bne.n	8005d86 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <create_chain+0x2e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d31d      	bcc.n	8005dbc <create_chain+0x6a>
 8005d80:	2301      	movs	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e01a      	b.n	8005dbc <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fd32 	bl	80057f2 <get_fat>
 8005d8e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d801      	bhi.n	8005d9a <create_chain+0x48>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e07f      	b.n	8005e9a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d101      	bne.n	8005da6 <create_chain+0x54>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	e079      	b.n	8005e9a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d201      	bcs.n	8005db8 <create_chain+0x66>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	e070      	b.n	8005e9a <create_chain+0x148>
		scl = clst;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d307      	bcc.n	8005de4 <create_chain+0x92>
			ncl = 2;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d901      	bls.n	8005de4 <create_chain+0x92>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e05a      	b.n	8005e9a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fd03 	bl	80057f2 <get_fat>
 8005dec:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d002      	beq.n	8005e02 <create_chain+0xb0>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <create_chain+0xb4>
			return cs;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	e049      	b.n	8005e9a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d1d8      	bne.n	8005dc0 <create_chain+0x6e>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e043      	b.n	8005e9a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005e12:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005e14:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fde5 	bl	80059ea <put_fat>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <create_chain+0xec>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fdd8 	bl	80059ea <put_fat>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d121      	bne.n	8005e88 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d01c      	beq.n	8005e98 <create_chain+0x146>
			fs->free_clust--;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e6e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e76:	795b      	ldrb	r3, [r3, #5]
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e84:	715a      	strb	r2, [r3, #5]
 8005e86:	e007      	b.n	8005e98 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <create_chain+0x142>
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	e000      	b.n	8005e96 <create_chain+0x144>
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005e98:	697b      	ldr	r3, [r7, #20]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b087      	sub	sp, #28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec4:	895b      	ldrh	r3, [r3, #10]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eda:	7892      	ldrb	r2, [r2, #2]
 8005edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	613a      	str	r2, [r7, #16]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <clmt_clust+0x54>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e010      	b.n	8005f18 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d307      	bcc.n	8005f0e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f0c:	e7e9      	b.n	8005ee2 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005f0e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f36:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d009      	beq.n	8005f5c <dir_sdi+0x3a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d301      	bcc.n	8005f60 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e0aa      	b.n	80060b6 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d110      	bne.n	8005f88 <dir_sdi+0x66>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d107      	bne.n	8005f88 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	891b      	ldrh	r3, [r3, #8]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d301      	bcc.n	8005fa8 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e086      	b.n	80060b6 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e043      	b.n	8006042 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc6:	895b      	ldrh	r3, [r3, #10]
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005fe2:	e021      	b.n	8006028 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fbff 	bl	80057f2 <get_fat>
 8005ff4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d101      	bne.n	8006002 <dir_sdi+0xe0>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e059      	b.n	80060b6 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d909      	bls.n	800601c <dir_sdi+0xfa>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	429a      	cmp	r2, r3
 800601a:	d301      	bcc.n	8006020 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800601c:	2302      	movs	r3, #2
 800601e:	e04a      	b.n	80060b6 <dir_sdi+0x194>
			idx -= ic;
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	429a      	cmp	r2, r3
 800602e:	d2d9      	bcs.n	8005fe4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fbb5 	bl	80057aa <clust2sect>
 8006040:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	461a      	mov	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <dir_sdi+0x136>
 8006054:	2302      	movs	r3, #2
 8006056:	e02e      	b.n	80060b6 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	895b      	ldrh	r3, [r3, #10]
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800607c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006094:	895b      	ldrh	r3, [r3, #10]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	b29b      	uxth	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a2:	fb01 f202 	mul.w	r2, r1, r2
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	015b      	lsls	r3, r3, #5
 80060aa:	4403      	add	r3, r0
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060b2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80060be:	b590      	push	{r4, r7, lr}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ce:	88db      	ldrh	r3, [r3, #6]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <dir_next+0x2a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <dir_next+0x2e>
		return FR_NO_FILE;
 80060e8:	2304      	movs	r3, #4
 80060ea:	e12e      	b.n	800634a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	fbb3 f1f2 	udiv	r1, r3, r2
 8006106:	fb01 f202 	mul.w	r2, r1, r2
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	f040 80fa 	bne.w	8006306 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	3301      	adds	r3, #1
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006122:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10d      	bne.n	800614c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613c:	891b      	ldrh	r3, [r3, #8]
 800613e:	461a      	mov	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4293      	cmp	r3, r2
 8006144:	f0c0 80df 	bcc.w	8006306 <dir_next+0x248>
				return FR_NO_FILE;
 8006148:	2304      	movs	r3, #4
 800614a:	e0fe      	b.n	800634a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	895b      	ldrh	r3, [r3, #10]
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	fbb3 f3f2 	udiv	r3, r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006172:	7892      	ldrb	r2, [r2, #2]
 8006174:	3a01      	subs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80c4 	bne.w	8006306 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7ff fb2e 	bl	80057f2 <get_fat>
 8006196:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d801      	bhi.n	80061a2 <dir_next+0xe4>
 800619e:	2302      	movs	r3, #2
 80061a0:	e0d3      	b.n	800634a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d101      	bne.n	80061ae <dir_next+0xf0>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0cd      	b.n	800634a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	f0c0 808e 	bcc.w	80062e0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <dir_next+0x110>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e0bd      	b.n	800634a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff fdb6 	bl	8005d52 <create_chain>
 80061e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <dir_next+0x134>
 80061ee:	2307      	movs	r3, #7
 80061f0:	e0ab      	b.n	800634a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <dir_next+0x13e>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e0a6      	b.n	800634a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d101      	bne.n	8006208 <dir_next+0x14a>
 8006204:	2301      	movs	r3, #1
 8006206:	e0a0      	b.n	800634a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff f987 	bl	8005524 <sync_window>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <dir_next+0x162>
 800621c:	2301      	movs	r3, #1
 800621e:	e094      	b.n	800634a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	895b      	ldrh	r3, [r3, #10]
 8006238:	461a      	mov	r2, r3
 800623a:	2100      	movs	r1, #0
 800623c:	f7fe ff5a 	bl	80050f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624e:	681c      	ldr	r4, [r3, #0]
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	4610      	mov	r0, r2
 8006254:	f7ff faa9 	bl	80057aa <clust2sect>
 8006258:	4603      	mov	r3, r0
 800625a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800625e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	e021      	b.n	80062aa <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006272:	2201      	movs	r2, #1
 8006274:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff f950 	bl	8005524 <sync_window>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <dir_next+0x1d0>
 800628a:	2301      	movs	r3, #1
 800628c:	e05d      	b.n	800634a <dir_next+0x28c>
						dp->fs->winsect++;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800629a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800629c:	3201      	adds	r2, #1
 800629e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	3301      	adds	r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b6:	789b      	ldrb	r3, [r3, #2]
 80062b8:	461a      	mov	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4293      	cmp	r3, r2
 80062be:	d3d2      	bcc.n	8006266 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1acb      	subs	r3, r1, r3
 80062da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	461a      	mov	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6979      	ldr	r1, [r7, #20]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fa57 	bl	80057aa <clust2sect>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006304:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006328:	895b      	ldrh	r3, [r3, #10]
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	fbb3 f1f2 	udiv	r1, r3, r2
 8006336:	fb01 f202 	mul.w	r2, r1, r2
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	015b      	lsls	r3, r3, #5
 800633e:	4403      	add	r3, r0
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006346:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}

08006352 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fddf 	bl	8005f22 <dir_sdi>
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d135      	bne.n	80063da <dir_alloc+0x88>
		n = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7ff f91f 	bl	80055c8 <move_window>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d121      	bne.n	80063d8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2be5      	cmp	r3, #229	; 0xe5
 80063a0:	d006      	beq.n	80063b0 <dir_alloc+0x5e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d102      	bne.n	80063c4 <dir_alloc+0x72>
 80063be:	e00c      	b.n	80063da <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80063c0:	2300      	movs	r3, #0
 80063c2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80063c4:	2101      	movs	r1, #1
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe79 	bl	80060be <dir_next>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0cd      	beq.n	8006372 <dir_alloc+0x20>
 80063d6:	e000      	b.n	80063da <dir_alloc+0x88>
			if (res != FR_OK) break;
 80063d8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d101      	bne.n	80063e4 <dir_alloc+0x92>
 80063e0:	2307      	movs	r3, #7
 80063e2:	73fb      	strb	r3, [r7, #15]
	return res;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	331b      	adds	r3, #27
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21a      	sxth	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	331a      	adds	r3, #26
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b21b      	sxth	r3, r3
 800640a:	4313      	orrs	r3, r2
 800640c:	b21b      	sxth	r3, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d10f      	bne.n	800643e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	3315      	adds	r3, #21
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	b21a      	sxth	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	b21b      	sxth	r3, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	b21b      	sxth	r3, r3
 8006434:	b29b      	uxth	r3, r3
 8006436:	041b      	lsls	r3, r3, #16
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

	return cl;
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	331a      	adds	r3, #26
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	331b      	adds	r3, #27
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	0c1a      	lsrs	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3314      	adds	r3, #20
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	b29b      	uxth	r3, r3
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	b29a      	uxth	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3315      	adds	r3, #21
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
	...

08006498 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064aa:	1e5a      	subs	r2, r3, #1
 80064ac:	4613      	mov	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80064b8:	2300      	movs	r3, #0
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	2301      	movs	r3, #1
 80064be:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80064c0:	4a2b      	ldr	r2, [pc, #172]	; (8006570 <cmp_lfn+0xd8>)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4413      	add	r3, r2
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	4413      	add	r3, r2
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	b21a      	sxth	r2, r3
 80064d4:	4926      	ldr	r1, [pc, #152]	; (8006570 <cmp_lfn+0xd8>)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	440b      	add	r3, r1
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	440b      	add	r3, r1
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b21b      	sxth	r3, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b21b      	sxth	r3, r3
 80064ea:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80064ec:	89fb      	ldrh	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d019      	beq.n	8006526 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80064f2:	89bb      	ldrh	r3, [r7, #12]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 f941 	bl	800877c <ff_wtoupper>
 80064fa:	4603      	mov	r3, r0
 80064fc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2bfe      	cmp	r3, #254	; 0xfe
 8006502:	d80e      	bhi.n	8006522 <cmp_lfn+0x8a>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	617a      	str	r2, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f002 f932 	bl	800877c <ff_wtoupper>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	89fb      	ldrh	r3, [r7, #14]
 800651e:	4293      	cmp	r3, r2
 8006520:	d008      	beq.n	8006534 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006522:	2300      	movs	r3, #0
 8006524:	e01f      	b.n	8006566 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006526:	89bb      	ldrh	r3, [r7, #12]
 8006528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652c:	4293      	cmp	r3, r2
 800652e:	d001      	beq.n	8006534 <cmp_lfn+0x9c>
 8006530:	2300      	movs	r3, #0
 8006532:	e018      	b.n	8006566 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	3301      	adds	r3, #1
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b0c      	cmp	r3, #12
 800653e:	d9bf      	bls.n	80064c0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <cmp_lfn+0xcc>
 800654c:	89fb      	ldrh	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <cmp_lfn+0xcc>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <cmp_lfn+0xcc>
		return 0;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006564:	2301      	movs	r3, #1
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	0800be68 	.word	0x0800be68

08006574 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	460b      	mov	r3, r1
 8006584:	71fb      	strb	r3, [r7, #7]
 8006586:	4613      	mov	r3, r2
 8006588:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	330d      	adds	r3, #13
 800658e:	79ba      	ldrb	r2, [r7, #6]
 8006590:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	330b      	adds	r3, #11
 8006596:	220f      	movs	r2, #15
 8006598:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	330c      	adds	r3, #12
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	331a      	adds	r3, #26
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	331b      	adds	r3, #27
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	82fb      	strh	r3, [r7, #22]
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80065ca:	8afb      	ldrh	r3, [r7, #22]
 80065cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <fit_lfn+0x70>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	61fa      	str	r2, [r7, #28]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80065e4:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <fit_lfn+0xe4>)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	4413      	add	r3, r2
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	8afa      	ldrh	r2, [r7, #22]
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	8afb      	ldrh	r3, [r7, #22]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b299      	uxth	r1, r3
 80065fe:	4a16      	ldr	r2, [pc, #88]	; (8006658 <fit_lfn+0xe4>)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	4413      	add	r3, r2
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	4413      	add	r3, r2
 800660c:	b2ca      	uxtb	r2, r1
 800660e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006610:	8afb      	ldrh	r3, [r7, #22]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <fit_lfn+0xa8>
 8006616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800661a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	3301      	adds	r3, #1
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b0c      	cmp	r3, #12
 8006626:	d9d0      	bls.n	80065ca <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800662e:	4293      	cmp	r3, r2
 8006630:	d006      	beq.n	8006640 <fit_lfn+0xcc>
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <fit_lfn+0xd4>
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006646:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	79fa      	ldrb	r2, [r7, #7]
 800664c:	701a      	strb	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	3724      	adds	r7, #36	; 0x24
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr
 8006658:	0800be68 	.word	0x0800be68

0800665c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800666a:	220b      	movs	r2, #11
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7fe fd22 	bl	80050b8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d92b      	bls.n	80066d2 <gen_numname+0x76>
		sr = seq;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800667e:	e022      	b.n	80066c6 <gen_numname+0x6a>
			wc = *lfn++;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800668a:	2300      	movs	r3, #0
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
 800668e:	e017      	b.n	80066c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	005a      	lsls	r2, r3, #1
 8006694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	4413      	add	r3, r2
 800669c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800669e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <gen_numname+0x5e>
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80066b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80066b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	3301      	adds	r3, #1
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d9e4      	bls.n	8006690 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d8      	bne.n	8006680 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80066d2:	2307      	movs	r3, #7
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	3330      	adds	r3, #48	; 0x30
 80066e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80066e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ea:	2b39      	cmp	r3, #57	; 0x39
 80066ec:	d904      	bls.n	80066f8 <gen_numname+0x9c>
 80066ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f2:	3307      	adds	r3, #7
 80066f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80066fe:	3330      	adds	r3, #48	; 0x30
 8006700:	443b      	add	r3, r7
 8006702:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006706:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1df      	bne.n	80066d6 <gen_numname+0x7a>
	ns[i] = '~';
 8006716:	f107 0214 	add.w	r2, r7, #20
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	4413      	add	r3, r2
 800671e:	227e      	movs	r2, #126	; 0x7e
 8006720:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006722:	2300      	movs	r3, #0
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
 8006726:	e002      	b.n	800672e <gen_numname+0xd2>
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	3301      	adds	r3, #1
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	429a      	cmp	r2, r3
 8006734:	d205      	bcs.n	8006742 <gen_numname+0xe6>
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	4413      	add	r3, r2
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b20      	cmp	r3, #32
 8006740:	d1f2      	bne.n	8006728 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b07      	cmp	r3, #7
 8006746:	d807      	bhi.n	8006758 <gen_numname+0xfc>
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	62ba      	str	r2, [r7, #40]	; 0x28
 800674e:	3330      	adds	r3, #48	; 0x30
 8006750:	443b      	add	r3, r7
 8006752:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006756:	e000      	b.n	800675a <gen_numname+0xfe>
 8006758:	2120      	movs	r1, #32
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	627a      	str	r2, [r7, #36]	; 0x24
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	460a      	mov	r2, r1
 8006766:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b07      	cmp	r3, #7
 800676c:	d9e9      	bls.n	8006742 <gen_numname+0xe6>
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006784:	230b      	movs	r3, #11
 8006786:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	0852      	lsrs	r2, r2, #1
 800678e:	01db      	lsls	r3, r3, #7
 8006790:	4313      	orrs	r3, r2
 8006792:	b2da      	uxtb	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	6079      	str	r1, [r7, #4]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	4413      	add	r3, r2
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1ed      	bne.n	8006788 <sum_sfn+0x10>
	return sum;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fbad 	bl	8005f22 <dir_sdi>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <dir_find+0x1e>
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	e0b8      	b.n	8006948 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80067d6:	23ff      	movs	r3, #255	; 0xff
 80067d8:	753b      	strb	r3, [r7, #20]
 80067da:	7d3b      	ldrb	r3, [r7, #20]
 80067dc:	757b      	strb	r3, [r7, #21]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067e8:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7fe fee3 	bl	80055c8 <move_window>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f040 8097 	bne.w	800693c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800681e:	7dbb      	ldrb	r3, [r7, #22]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <dir_find+0x72>
 8006824:	2304      	movs	r3, #4
 8006826:	75fb      	strb	r3, [r7, #23]
 8006828:	e08d      	b.n	8006946 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	330b      	adds	r3, #11
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006834:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	2be5      	cmp	r3, #229	; 0xe5
 800683a:	d007      	beq.n	800684c <dir_find+0x94>
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <dir_find+0xa6>
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2b0f      	cmp	r3, #15
 800684a:	d008      	beq.n	800685e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800684c:	23ff      	movs	r3, #255	; 0xff
 800684e:	757b      	strb	r3, [r7, #21]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800685a:	849a      	strh	r2, [r3, #36]	; 0x24
 800685c:	e063      	b.n	8006926 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b0f      	cmp	r3, #15
 8006862:	d137      	bne.n	80068d4 <dir_find+0x11c>
				if (dp->lfn) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05a      	beq.n	8006926 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006870:	7dbb      	ldrb	r3, [r7, #22]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	7b5b      	ldrb	r3, [r3, #13]
 800687e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006880:	7dbb      	ldrb	r3, [r7, #22]
 8006882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006886:	75bb      	strb	r3, [r7, #22]
 8006888:	7dbb      	ldrb	r3, [r7, #22]
 800688a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006892:	88da      	ldrh	r2, [r3, #6]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689a:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800689c:	7dba      	ldrb	r2, [r7, #22]
 800689e:	7d7b      	ldrb	r3, [r7, #21]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d114      	bne.n	80068ce <dir_find+0x116>
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	330d      	adds	r3, #13
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	7d3a      	ldrb	r2, [r7, #20]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d10e      	bne.n	80068ce <dir_find+0x116>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	6939      	ldr	r1, [r7, #16]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff fdec 	bl	8006498 <cmp_lfn>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <dir_find+0x116>
 80068c6:	7d7b      	ldrb	r3, [r7, #21]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	e000      	b.n	80068d0 <dir_find+0x118>
 80068ce:	23ff      	movs	r3, #255	; 0xff
 80068d0:	757b      	strb	r3, [r7, #21]
 80068d2:	e028      	b.n	8006926 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80068d4:	7d7b      	ldrb	r3, [r7, #21]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d107      	bne.n	80068ea <dir_find+0x132>
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f7ff ff4c 	bl	8006778 <sum_sfn>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	7d3b      	ldrb	r3, [r7, #20]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02a      	beq.n	8006940 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	330b      	adds	r3, #11
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <dir_find+0x15e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	220b      	movs	r2, #11
 8006908:	4619      	mov	r1, r3
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f7fe fc0c 	bl	8005128 <mem_cmp>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006916:	23ff      	movs	r3, #255	; 0xff
 8006918:	757b      	strb	r3, [r7, #21]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006924:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006926:	2100      	movs	r1, #0
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fbc8 	bl	80060be <dir_next>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f43f af58 	beq.w	80067ea <dir_find+0x32>
 800693a:	e004      	b.n	8006946 <dir_find+0x18e>
		if (res != FR_OK) break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006944:	bf00      	nop

	return res;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	623b      	str	r3, [r7, #32]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	220c      	movs	r2, #12
 8006972:	6a39      	ldr	r1, [r7, #32]
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fb9f 	bl	80050b8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03b      	beq.n	80069fc <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	330b      	adds	r3, #11
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006998:	2301      	movs	r3, #1
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
 800699c:	e013      	b.n	80069c6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800699e:	f107 010c 	add.w	r1, r7, #12
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	6a38      	ldr	r0, [r7, #32]
 80069a8:	f7ff fe58 	bl	800665c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff03 	bl	80067b8 <dir_find>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80069b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	3301      	adds	r3, #1
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	2b63      	cmp	r3, #99	; 0x63
 80069ca:	d9e8      	bls.n	800699e <dir_register+0x4e>
 80069cc:	e000      	b.n	80069d0 <dir_register+0x80>
			if (res != FR_OK) break;
 80069ce:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d101      	bne.n	80069da <dir_register+0x8a>
 80069d6:	2307      	movs	r3, #7
 80069d8:	e0d8      	b.n	8006b8c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80069da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d002      	beq.n	80069e8 <dir_register+0x98>
 80069e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069e6:	e0d1      	b.n	8006b8c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	330b      	adds	r3, #11
 80069ec:	7dfa      	ldrb	r2, [r7, #23]
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	461a      	mov	r2, r3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d014      	beq.n	8006a30 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006a06:	2300      	movs	r3, #0
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	e002      	b.n	8006a12 <dir_register+0xc2>
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	3301      	adds	r3, #1
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f5      	bne.n	8006a0c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	3319      	adds	r3, #25
 8006a24:	4a5b      	ldr	r2, [pc, #364]	; (8006b94 <dir_register+0x244>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	e001      	b.n	8006a34 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006a30:	2301      	movs	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fc8b 	bl	8006352 <dir_alloc>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d15b      	bne.n	8006b02 <dir_register+0x1b2>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d055      	beq.n	8006b02 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fa5b 	bl	8005f22 <dir_sdi>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d143      	bne.n	8006b02 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fe78 	bl	8006778 <sum_sfn>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe fd92 	bl	80055c8 <move_window>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d126      	bne.n	8006b00 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab8:	6a18      	ldr	r0, [r3, #32]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac0:	6959      	ldr	r1, [r3, #20]
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	7efb      	ldrb	r3, [r7, #27]
 8006ac8:	f7ff fd54 	bl	8006574 <fit_lfn>
				dp->fs->wflag = 1;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad8:	2201      	movs	r2, #1
 8006ada:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff faed 	bl	80060be <dir_next>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <dir_register+0x1b2>
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	3b01      	subs	r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1c6      	bne.n	8006a8c <dir_register+0x13c>
 8006afe:	e000      	b.n	8006b02 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006b00:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d13e      	bne.n	8006b88 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7fe fd53 	bl	80055c8 <move_window>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d12b      	bne.n	8006b88 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fad9 	bl	80050f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b48:	6958      	ldr	r0, [r3, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	220b      	movs	r2, #11
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fe faaf 	bl	80050b8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	330b      	adds	r3, #11
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	f002 0218 	and.w	r2, r2, #24
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b84:	2201      	movs	r2, #1
 8006b86:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3730      	adds	r7, #48	; 0x30
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	4ec4ec4f 	.word	0x4ec4ec4f

08006b98 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	e002      	b.n	8006bb0 <create_name+0x18>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b2f      	cmp	r3, #47	; 0x2f
 8006bb6:	d0f8      	beq.n	8006baa <create_name+0x12>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8006bbe:	d0f4      	beq.n	8006baa <create_name+0x12>
	lfn = dp->lfn;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	61ba      	str	r2, [r7, #24]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be2:	2b1f      	cmp	r3, #31
 8006be4:	d92f      	bls.n	8006c46 <create_name+0xae>
 8006be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be8:	2b2f      	cmp	r3, #47	; 0x2f
 8006bea:	d02c      	beq.n	8006c46 <create_name+0xae>
 8006bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bee:	2b5c      	cmp	r3, #92	; 0x5c
 8006bf0:	d029      	beq.n	8006c46 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2bfe      	cmp	r3, #254	; 0xfe
 8006bf6:	d901      	bls.n	8006bfc <create_name+0x64>
			return FR_INVALID_NAME;
 8006bf8:	2306      	movs	r3, #6
 8006bfa:	e186      	b.n	8006f0a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c04:	2101      	movs	r1, #1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fd7e 	bl	8008708 <ff_convert>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <create_name+0x82>
 8006c16:	2306      	movs	r3, #6
 8006c18:	e177      	b.n	8006f0a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1e:	d809      	bhi.n	8006c34 <create_name+0x9c>
 8006c20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c22:	4619      	mov	r1, r3
 8006c24:	488e      	ldr	r0, [pc, #568]	; (8006e60 <create_name+0x2c8>)
 8006c26:	f7fe faa5 	bl	8005174 <chk_chr>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006c30:	2306      	movs	r3, #6
 8006c32:	e16a      	b.n	8006f0a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	617a      	str	r2, [r7, #20]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006c44:	e7c5      	b.n	8006bd2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c52:	2b1f      	cmp	r3, #31
 8006c54:	d801      	bhi.n	8006c5a <create_name+0xc2>
 8006c56:	2304      	movs	r3, #4
 8006c58:	e000      	b.n	8006c5c <create_name+0xc4>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006c60:	e011      	b.n	8006c86 <create_name+0xee>
		w = lfn[di - 1];
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d002      	beq.n	8006c80 <create_name+0xe8>
 8006c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7e:	d106      	bne.n	8006c8e <create_name+0xf6>
		di--;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ea      	bne.n	8006c62 <create_name+0xca>
 8006c8c:	e000      	b.n	8006c90 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006c8e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <create_name+0x102>
 8006c96:	2306      	movs	r3, #6
 8006c98:	e137      	b.n	8006f0a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	220b      	movs	r2, #11
 8006cb0:	2120      	movs	r1, #32
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fa1e 	bl	80050f4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e002      	b.n	8006cc4 <create_name+0x12c>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d0f5      	beq.n	8006cbe <create_name+0x126>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cde:	d0ee      	beq.n	8006cbe <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <create_name+0x162>
 8006ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cea:	f043 0303 	orr.w	r3, r3, #3
 8006cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006cf2:	e002      	b.n	8006cfa <create_name+0x162>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <create_name+0x17c>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d06:	3b01      	subs	r3, #1
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	2b2e      	cmp	r3, #46	; 0x2e
 8006d12:	d1ef      	bne.n	8006cf4 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006d14:	2300      	movs	r3, #0
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d1e:	2308      	movs	r3, #8
 8006d20:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	61ba      	str	r2, [r7, #24]
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8091 	beq.w	8006e5c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d006      	beq.n	8006d4e <create_name+0x1b6>
 8006d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d42:	2b2e      	cmp	r3, #46	; 0x2e
 8006d44:	d10a      	bne.n	8006d5c <create_name+0x1c4>
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d006      	beq.n	8006d5c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d52:	f043 0303 	orr.w	r3, r3, #3
 8006d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d5a:	e07e      	b.n	8006e5a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d203      	bcs.n	8006d6c <create_name+0x1d4>
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d123      	bne.n	8006db4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b0b      	cmp	r3, #11
 8006d70:	d106      	bne.n	8006d80 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d76:	f043 0303 	orr.w	r3, r3, #3
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d7e:	e076      	b.n	8006e6e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d005      	beq.n	8006d94 <create_name+0x1fc>
 8006d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d8c:	f043 0303 	orr.w	r3, r3, #3
 8006d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d867      	bhi.n	8006e6c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	2308      	movs	r3, #8
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	230b      	movs	r3, #11
 8006da6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006db2:	e052      	b.n	8006e5a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d914      	bls.n	8006de4 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 fca2 	bl	8008708 <ff_convert>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <create_name+0x240>
 8006dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd0:	3b80      	subs	r3, #128	; 0x80
 8006dd2:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <create_name+0x2cc>)
 8006dd4:	5cd3      	ldrb	r3, [r2, r3]
 8006dd6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ddc:	f043 0302 	orr.w	r3, r3, #2
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <create_name+0x262>
 8006dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dec:	4619      	mov	r1, r3
 8006dee:	481e      	ldr	r0, [pc, #120]	; (8006e68 <create_name+0x2d0>)
 8006df0:	f7fe f9c0 	bl	8005174 <chk_chr>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006dfa:	235f      	movs	r3, #95	; 0x5f
 8006dfc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e02:	f043 0303 	orr.w	r3, r3, #3
 8006e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e0a:	e01b      	b.n	8006e44 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d909      	bls.n	8006e26 <create_name+0x28e>
 8006e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e14:	2b5a      	cmp	r3, #90	; 0x5a
 8006e16:	d806      	bhi.n	8006e26 <create_name+0x28e>
					b |= 2;
 8006e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e1c:	f043 0302 	orr.w	r3, r3, #2
 8006e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e24:	e00e      	b.n	8006e44 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e28:	2b60      	cmp	r3, #96	; 0x60
 8006e2a:	d90b      	bls.n	8006e44 <create_name+0x2ac>
 8006e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2e:	2b7a      	cmp	r3, #122	; 0x7a
 8006e30:	d808      	bhi.n	8006e44 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e40:	3b20      	subs	r3, #32
 8006e42:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	6239      	str	r1, [r7, #32]
 8006e52:	4413      	add	r3, r2
 8006e54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006e5a:	e762      	b.n	8006d22 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006e5c:	bf00      	nop
 8006e5e:	e006      	b.n	8006e6e <create_name+0x2d6>
 8006e60:	0800bd88 	.word	0x0800bd88
 8006e64:	0800bde8 	.word	0x0800bde8
 8006e68:	0800bd94 	.word	0x0800bd94
			if (si > di) break;			/* No extension */
 8006e6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2be5      	cmp	r3, #229	; 0xe5
 8006e7a:	d105      	bne.n	8006e88 <create_name+0x2f0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2205      	movs	r2, #5
 8006e86:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d104      	bne.n	8006e98 <create_name+0x300>
 8006e8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	d005      	beq.n	8006eb0 <create_name+0x318>
 8006ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d105      	bne.n	8006ebc <create_name+0x324>
		cf |= NS_LFN;
 8006eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb4:	f043 0302 	orr.w	r3, r3, #2
 8006eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d117      	bne.n	8006ef8 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d105      	bne.n	8006ee0 <create_name+0x348>
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	f043 0310 	orr.w	r3, r3, #16
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ee4:	f003 030c 	and.w	r3, r3, #12
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d105      	bne.n	8006ef8 <create_name+0x360>
 8006eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef0:	f043 0308 	orr.w	r3, r3, #8
 8006ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	330b      	adds	r3, #11
 8006f02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f08:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop

08006f14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b2f      	cmp	r3, #47	; 0x2f
 8006f24:	d003      	beq.n	8006f2e <follow_path+0x1a>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b5c      	cmp	r3, #92	; 0x5c
 8006f2c:	d102      	bne.n	8006f34 <follow_path+0x20>
		path++;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b1f      	cmp	r3, #31
 8006f46:	d80c      	bhi.n	8006f62 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fe ffe9 	bl	8005f22 <dir_sdi>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6153      	str	r3, [r2, #20]
 8006f60:	e049      	b.n	8006ff6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f62:	463b      	mov	r3, r7
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fe16 	bl	8006b98 <create_name>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d13a      	bne.n	8006fec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fc1e 	bl	80067b8 <dir_find>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	7adb      	ldrb	r3, [r3, #11]
 8006f8a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d12b      	bne.n	8006ff0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d126      	bne.n	8006ff0 <follow_path+0xdc>
 8006fa2:	2305      	movs	r3, #5
 8006fa4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006fa6:	e023      	b.n	8006ff0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d120      	bne.n	8006ff4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	330b      	adds	r3, #11
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006fca:	2305      	movs	r3, #5
 8006fcc:	73fb      	strb	r3, [r7, #15]
 8006fce:	e012      	b.n	8006ff6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fa07 	bl	80063ee <ld_clust>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006fea:	e7ba      	b.n	8006f62 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <follow_path+0xe2>
				break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ff4:	bf00      	nop
		}
	}

	return res;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007008:	f04f 33ff 	mov.w	r3, #4294967295
 800700c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d031      	beq.n	800707a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e002      	b.n	8007024 <get_ldnumber+0x24>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3301      	adds	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b1f      	cmp	r3, #31
 800702a:	d903      	bls.n	8007034 <get_ldnumber+0x34>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b3a      	cmp	r3, #58	; 0x3a
 8007032:	d1f4      	bne.n	800701e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b3a      	cmp	r3, #58	; 0x3a
 800703a:	d11c      	bne.n	8007076 <get_ldnumber+0x76>
			tp = *path;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	60fa      	str	r2, [r7, #12]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	3b30      	subs	r3, #48	; 0x30
 800704c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b09      	cmp	r3, #9
 8007052:	d80e      	bhi.n	8007072 <get_ldnumber+0x72>
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	429a      	cmp	r2, r3
 800705a:	d10a      	bne.n	8007072 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <get_ldnumber+0x72>
					vol = (int)i;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	3301      	adds	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	e002      	b.n	800707c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800707a:	693b      	ldr	r3, [r7, #16]
}
 800707c:	4618      	mov	r0, r3
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
	...

08007088 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007098:	2200      	movs	r2, #0
 800709a:	711a      	strb	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a2:	461a      	mov	r2, r3
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fe fa8b 	bl	80055c8 <move_window>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <check_fs+0x34>
		return 3;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e04a      	b.n	8007152 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070c2:	3301      	adds	r3, #1
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	b21a      	sxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80070d0:	b21b      	sxth	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	4a21      	ldr	r2, [pc, #132]	; (800715c <check_fs+0xd4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d001      	beq.n	80070e0 <check_fs+0x58>
		return 2;
 80070dc:	2302      	movs	r3, #2
 80070de:	e038      	b.n	8007152 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3336      	adds	r3, #54	; 0x36
 80070e4:	3303      	adds	r3, #3
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	061a      	lsls	r2, r3, #24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3336      	adds	r3, #54	; 0x36
 80070ee:	3302      	adds	r3, #2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	4313      	orrs	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	3236      	adds	r2, #54	; 0x36
 80070fa:	3201      	adds	r2, #1
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	0212      	lsls	r2, r2, #8
 8007100:	4313      	orrs	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007108:	4313      	orrs	r3, r2
 800710a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <check_fs+0xd8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d101      	bne.n	8007118 <check_fs+0x90>
		return 0;
 8007114:	2300      	movs	r3, #0
 8007116:	e01c      	b.n	8007152 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3352      	adds	r3, #82	; 0x52
 800711c:	3303      	adds	r3, #3
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	061a      	lsls	r2, r3, #24
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3352      	adds	r3, #82	; 0x52
 8007126:	3302      	adds	r3, #2
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4313      	orrs	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	3252      	adds	r2, #82	; 0x52
 8007132:	3201      	adds	r2, #1
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	0212      	lsls	r2, r2, #8
 8007138:	4313      	orrs	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007140:	4313      	orrs	r3, r2
 8007142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007146:	4a06      	ldr	r2, [pc, #24]	; (8007160 <check_fs+0xd8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d101      	bne.n	8007150 <check_fs+0xc8>
		return 0;
 800714c:	2300      	movs	r3, #0
 800714e:	e000      	b.n	8007152 <check_fs+0xca>

	return 1;
 8007150:	2301      	movs	r3, #1
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	ffffaa55 	.word	0xffffaa55
 8007160:	00544146 	.word	0x00544146

08007164 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b096      	sub	sp, #88	; 0x58
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	f7ff ff41 	bl	8007000 <get_ldnumber>
 800717e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	da01      	bge.n	800718a <find_volume+0x26>
 8007186:	230b      	movs	r3, #11
 8007188:	e311      	b.n	80077ae <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800718a:	4a98      	ldr	r2, [pc, #608]	; (80073ec <find_volume+0x288>)
 800718c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007192:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <find_volume+0x3a>
 800719a:	230c      	movs	r3, #12
 800719c:	e307      	b.n	80077ae <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01c      	beq.n	80071ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd fedf 	bl	8004f7c <disk_status>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80071c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10c      	bne.n	80071ea <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <find_volume+0x82>
 80071d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80071e2:	230a      	movs	r3, #10
 80071e4:	e2e3      	b.n	80077ae <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80071e6:	2300      	movs	r3, #0
 80071e8:	e2e1      	b.n	80077ae <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	4618      	mov	r0, r3
 800720a:	f7fd fed1 	bl	8004fb0 <disk_initialize>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007220:	2303      	movs	r3, #3
 8007222:	e2c4      	b.n	80077ae <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <find_volume+0xd6>
 800722a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007236:	230a      	movs	r3, #10
 8007238:	e2b9      	b.n	80077ae <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007240:	7858      	ldrb	r0, [r3, #1]
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007248:	330a      	adds	r3, #10
 800724a:	461a      	mov	r2, r3
 800724c:	2102      	movs	r1, #2
 800724e:	f7fd ff15 	bl	800507c <disk_ioctl>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10d      	bne.n	8007274 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	895b      	ldrh	r3, [r3, #10]
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d306      	bcc.n	8007274 <find_volume+0x110>
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726c:	895b      	ldrh	r3, [r3, #10]
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d901      	bls.n	8007278 <find_volume+0x114>
 8007274:	2301      	movs	r3, #1
 8007276:	e29a      	b.n	80077ae <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800727c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800727e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007280:	f7ff ff02 	bl	8007088 <check_fs>
 8007284:	4603      	mov	r3, r0
 8007286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800728a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800728e:	2b01      	cmp	r3, #1
 8007290:	d153      	bne.n	800733a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007292:	2300      	movs	r3, #0
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
 8007296:	e028      	b.n	80072ea <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072a2:	4413      	add	r3, r2
 80072a4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	3304      	adds	r3, #4
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d012      	beq.n	80072d6 <find_volume+0x172>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	330b      	adds	r3, #11
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	061a      	lsls	r2, r3, #24
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	330a      	adds	r3, #10
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	4313      	orrs	r3, r2
 80072c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c4:	3209      	adds	r2, #9
 80072c6:	7812      	ldrb	r2, [r2, #0]
 80072c8:	0212      	lsls	r2, r2, #8
 80072ca:	4313      	orrs	r3, r2
 80072cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ce:	3208      	adds	r2, #8
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	e000      	b.n	80072d8 <find_volume+0x174>
 80072d6:	2200      	movs	r2, #0
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	3358      	adds	r3, #88	; 0x58
 80072de:	443b      	add	r3, r7
 80072e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	3301      	adds	r3, #1
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d9d3      	bls.n	8007298 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80072f0:	2300      	movs	r3, #0
 80072f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <find_volume+0x19c>
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	3b01      	subs	r3, #1
 80072fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	3358      	adds	r3, #88	; 0x58
 8007306:	443b      	add	r3, r7
 8007308:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <find_volume+0x1bc>
 8007314:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007318:	f7ff feb6 	bl	8007088 <check_fs>
 800731c:	4603      	mov	r3, r0
 800731e:	e000      	b.n	8007322 <find_volume+0x1be>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <find_volume+0x1d6>
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	3301      	adds	r3, #1
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b03      	cmp	r3, #3
 8007338:	d9e2      	bls.n	8007300 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800733a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800733e:	2b03      	cmp	r3, #3
 8007340:	d101      	bne.n	8007346 <find_volume+0x1e2>
 8007342:	2301      	movs	r3, #1
 8007344:	e233      	b.n	80077ae <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <find_volume+0x1ee>
 800734e:	230d      	movs	r3, #13
 8007350:	e22d      	b.n	80077ae <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	7b1b      	ldrb	r3, [r3, #12]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	b21a      	sxth	r2, r3
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	7adb      	ldrb	r3, [r3, #11]
 800735e:	b21b      	sxth	r3, r3
 8007360:	4313      	orrs	r3, r2
 8007362:	b21a      	sxth	r2, r3
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	895b      	ldrh	r3, [r3, #10]
 800736c:	b21b      	sxth	r3, r3
 800736e:	429a      	cmp	r2, r3
 8007370:	d001      	beq.n	8007376 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007372:	230d      	movs	r3, #13
 8007374:	e21b      	b.n	80077ae <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	7ddb      	ldrb	r3, [r3, #23]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	b21a      	sxth	r2, r3
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	7d9b      	ldrb	r3, [r3, #22]
 8007382:	b21b      	sxth	r3, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	b21b      	sxth	r3, r3
 8007388:	b29b      	uxth	r3, r3
 800738a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d112      	bne.n	80073b8 <find_volume+0x254>
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007398:	061a      	lsls	r2, r3, #24
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	4313      	orrs	r3, r2
 80073a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80073aa:	0212      	lsls	r2, r2, #8
 80073ac:	4313      	orrs	r3, r2
 80073ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80073b4:	4313      	orrs	r3, r2
 80073b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073be:	461a      	mov	r2, r3
 80073c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	7c1a      	ldrb	r2, [r3, #16]
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ce:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d6:	78db      	ldrb	r3, [r3, #3]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d009      	beq.n	80073f0 <find_volume+0x28c>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e2:	78db      	ldrb	r3, [r3, #3]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d003      	beq.n	80073f0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80073e8:	230d      	movs	r3, #13
 80073ea:	e1e0      	b.n	80077ae <find_volume+0x64a>
 80073ec:	20002284 	.word	0x20002284
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	7b5a      	ldrb	r2, [r3, #13]
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800740c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	789b      	ldrb	r3, [r3, #2]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00c      	beq.n	8007434 <find_volume+0x2d0>
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	461a      	mov	r2, r3
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742a:	789b      	ldrb	r3, [r3, #2]
 800742c:	3b01      	subs	r3, #1
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007434:	230d      	movs	r3, #13
 8007436:	e1ba      	b.n	80077ae <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	7c9b      	ldrb	r3, [r3, #18]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b21a      	sxth	r2, r3
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	7c5b      	ldrb	r3, [r3, #17]
 8007444:	b21b      	sxth	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b21b      	sxth	r3, r3
 800744a:	b29a      	uxth	r2, r3
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007452:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745a:	891b      	ldrh	r3, [r3, #8]
 800745c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007462:	8952      	ldrh	r2, [r2, #10]
 8007464:	0952      	lsrs	r2, r2, #5
 8007466:	b292      	uxth	r2, r2
 8007468:	fbb3 f1f2 	udiv	r1, r3, r2
 800746c:	fb01 f202 	mul.w	r2, r1, r2
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007478:	230d      	movs	r3, #13
 800747a:	e198      	b.n	80077ae <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	7d1b      	ldrb	r3, [r3, #20]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	b21a      	sxth	r2, r3
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	7cdb      	ldrb	r3, [r3, #19]
 8007488:	b21b      	sxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b21b      	sxth	r3, r3
 800748e:	b29b      	uxth	r3, r3
 8007490:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007494:	2b00      	cmp	r3, #0
 8007496:	d112      	bne.n	80074be <find_volume+0x35a>
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800749e:	061a      	lsls	r2, r3, #24
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	4313      	orrs	r3, r2
 80074aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ac:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80074b0:	0212      	lsls	r2, r2, #8
 80074b2:	4313      	orrs	r3, r2
 80074b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	7bdb      	ldrb	r3, [r3, #15]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	7b9b      	ldrb	r3, [r3, #14]
 80074ca:	b21b      	sxth	r3, r3
 80074cc:	4313      	orrs	r3, r2
 80074ce:	b21b      	sxth	r3, r3
 80074d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80074d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <find_volume+0x378>
 80074d8:	230d      	movs	r3, #13
 80074da:	e168      	b.n	80077ae <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80074dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e0:	4413      	add	r3, r2
 80074e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074e8:	8911      	ldrh	r1, [r2, #8]
 80074ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074f0:	8952      	ldrh	r2, [r2, #10]
 80074f2:	0952      	lsrs	r2, r2, #5
 80074f4:	b292      	uxth	r2, r2
 80074f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80074fa:	b292      	uxth	r2, r2
 80074fc:	4413      	add	r3, r2
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	429a      	cmp	r2, r3
 8007506:	d201      	bcs.n	800750c <find_volume+0x3a8>
 8007508:	230d      	movs	r3, #13
 800750a:	e150      	b.n	80077ae <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800750c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007514:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007518:	7892      	ldrb	r2, [r2, #2]
 800751a:	fbb3 f3f2 	udiv	r3, r3, r2
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <find_volume+0x3c6>
 8007526:	230d      	movs	r3, #13
 8007528:	e141      	b.n	80077ae <find_volume+0x64a>
	fmt = FS_FAT12;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007536:	4293      	cmp	r3, r2
 8007538:	d902      	bls.n	8007540 <find_volume+0x3dc>
 800753a:	2302      	movs	r3, #2
 800753c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007546:	4293      	cmp	r3, r2
 8007548:	d902      	bls.n	8007550 <find_volume+0x3ec>
 800754a:	2303      	movs	r3, #3
 800754c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	3302      	adds	r3, #2
 8007554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800755a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007562:	461a      	mov	r2, r3
 8007564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007566:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007568:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	4413      	add	r3, r2
 800756e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007574:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	4413      	add	r3, r2
 800757c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800757e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007582:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007588:	2b03      	cmp	r3, #3
 800758a:	d124      	bne.n	80075d6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007592:	891b      	ldrh	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <find_volume+0x438>
 8007598:	230d      	movs	r3, #13
 800759a:	e108      	b.n	80077ae <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075a2:	061a      	lsls	r2, r3, #24
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80075aa:	041b      	lsls	r3, r3, #16
 80075ac:	4313      	orrs	r3, r2
 80075ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80075b4:	0212      	lsls	r2, r2, #8
 80075b6:	4313      	orrs	r3, r2
 80075b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ba:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80075be:	4313      	orrs	r3, r2
 80075c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075c6:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	647b      	str	r3, [r7, #68]	; 0x44
 80075d4:	e02b      	b.n	800762e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075dc:	891b      	ldrh	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <find_volume+0x482>
 80075e2:	230d      	movs	r3, #13
 80075e4:	e0e3      	b.n	80077ae <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f0:	4413      	add	r3, r2
 80075f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075f8:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d105      	bne.n	800760e <find_volume+0x4aa>
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	e00e      	b.n	800762c <find_volume+0x4c8>
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	4613      	mov	r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4413      	add	r3, r2
 800761c:	085a      	lsrs	r2, r3, #1
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763c:	895b      	ldrh	r3, [r3, #10]
 800763e:	4619      	mov	r1, r3
 8007640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007642:	440b      	add	r3, r1
 8007644:	3b01      	subs	r3, #1
 8007646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007648:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800764c:	8949      	ldrh	r1, [r1, #10]
 800764e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007652:	429a      	cmp	r2, r3
 8007654:	d201      	bcs.n	800765a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007656:	230d      	movs	r3, #13
 8007658:	e0a9      	b.n	80077ae <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	6113      	str	r3, [r2, #16]
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007676:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767e:	2280      	movs	r2, #128	; 0x80
 8007680:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007682:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007686:	2b03      	cmp	r3, #3
 8007688:	d17a      	bne.n	8007780 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b21a      	sxth	r2, r3
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800769a:	b21b      	sxth	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b21b      	sxth	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d16d      	bne.n	8007780 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80076a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a6:	3301      	adds	r3, #1
 80076a8:	4619      	mov	r1, r3
 80076aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076ac:	f7fd ff8c 	bl	80055c8 <move_window>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d164      	bne.n	8007780 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076bc:	2200      	movs	r2, #0
 80076be:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	b21a      	sxth	r2, r3
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	4a38      	ldr	r2, [pc, #224]	; (80077b8 <find_volume+0x654>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d151      	bne.n	8007780 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	061a      	lsls	r2, r3, #24
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	789b      	ldrb	r3, [r3, #2]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	4313      	orrs	r3, r2
 80076ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ec:	7852      	ldrb	r2, [r2, #1]
 80076ee:	0212      	lsls	r2, r2, #8
 80076f0:	4313      	orrs	r3, r2
 80076f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	4a30      	ldr	r2, [pc, #192]	; (80077bc <find_volume+0x658>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d140      	bne.n	8007780 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007704:	061a      	lsls	r2, r3, #24
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	4313      	orrs	r3, r2
 8007710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007712:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007716:	0212      	lsls	r2, r2, #8
 8007718:	4313      	orrs	r3, r2
 800771a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007720:	4313      	orrs	r3, r2
 8007722:	4a27      	ldr	r2, [pc, #156]	; (80077c0 <find_volume+0x65c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d12b      	bne.n	8007780 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800772e:	061a      	lsls	r2, r3, #24
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	4313      	orrs	r3, r2
 800773a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007740:	0212      	lsls	r2, r2, #8
 8007742:	4313      	orrs	r3, r2
 8007744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007746:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800774a:	4313      	orrs	r3, r2
 800774c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800774e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007752:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800775a:	061a      	lsls	r2, r3, #24
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	4313      	orrs	r3, r2
 8007766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007768:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800776c:	0212      	lsls	r2, r2, #8
 800776e:	4313      	orrs	r3, r2
 8007770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007772:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007776:	4313      	orrs	r3, r2
 8007778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800777a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800777e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007786:	461a      	mov	r2, r3
 8007788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800778c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <find_volume+0x660>)
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <find_volume+0x660>)
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <find_volume+0x660>)
 800779c:	881a      	ldrh	r2, [r3, #0]
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80077a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077a8:	f7fd fe92 	bl	80054d0 <clear_lock>
#endif

	return FR_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3758      	adds	r7, #88	; 0x58
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	ffffaa55 	.word	0xffffaa55
 80077bc:	41615252 	.word	0x41615252
 80077c0:	61417272 	.word	0x61417272
 80077c4:	20002288 	.word	0x20002288

080077c8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02a      	beq.n	8007830 <validate+0x68>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d024      	beq.n	8007830 <validate+0x68>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <validate+0x68>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	88da      	ldrh	r2, [r3, #6]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	889b      	ldrh	r3, [r3, #4]
 800780e:	429a      	cmp	r2, r3
 8007810:	d10e      	bne.n	8007830 <validate+0x68>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd fbab 	bl	8004f7c <disk_status>
 8007826:	4603      	mov	r3, r0
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007830:	2309      	movs	r3, #9
 8007832:	e000      	b.n	8007836 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007852:	f107 0310 	add.w	r3, r7, #16
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fbd2 	bl	8007000 <get_ldnumber>
 800785c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	da01      	bge.n	8007868 <f_mount+0x28>
 8007864:	230b      	movs	r3, #11
 8007866:	e02f      	b.n	80078c8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <f_mount+0x90>)
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007870:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007878:	69b8      	ldr	r0, [r7, #24]
 800787a:	f7fd fe29 	bl	80054d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	490d      	ldr	r1, [pc, #52]	; (80078d0 <f_mount+0x90>)
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <f_mount+0x6e>
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d001      	beq.n	80078b2 <f_mount+0x72>
 80078ae:	2300      	movs	r3, #0
 80078b0:	e00a      	b.n	80078c8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80078b2:	f107 0108 	add.w	r1, r7, #8
 80078b6:	f107 030c 	add.w	r3, r7, #12
 80078ba:	2200      	movs	r2, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fc51 	bl	8007164 <find_volume>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3720      	adds	r7, #32
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20002284 	.word	0x20002284

080078d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078e2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80078e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078ea:	f843 1c50 	str.w	r1, [r3, #-80]
 80078ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078f2:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80078f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <f_open+0x32>
 8007902:	2309      	movs	r3, #9
 8007904:	e2f7      	b.n	8007ef6 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800790a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800790e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007912:	461a      	mov	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800791c:	461a      	mov	r2, r3
 800791e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007922:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800792e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007932:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	f107 0118 	add.w	r1, r7, #24
 8007940:	3910      	subs	r1, #16
 8007942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007946:	3b18      	subs	r3, #24
 8007948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fc09 	bl	8007164 <find_volume>
 8007952:	4603      	mov	r3, r0
 8007954:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007958:	f102 0217 	add.w	r2, r2, #23
 800795c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800795e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007962:	f103 0317 	add.w	r3, r3, #23
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f040 82bf 	bne.w	8007eec <f_open+0x618>
		INIT_BUF(dj);
 800796e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007972:	461a      	mov	r2, r3
 8007974:	f107 0318 	add.w	r3, r7, #24
 8007978:	3b04      	subs	r3, #4
 800797a:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800797e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007982:	461a      	mov	r2, r3
 8007984:	4bd4      	ldr	r3, [pc, #848]	; (8007cd8 <f_open+0x404>)
 8007986:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800798a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800798e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8007992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007996:	3b18      	subs	r3, #24
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff faba 	bl	8006f14 <follow_path>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079a6:	f102 0217 	add.w	r2, r2, #23
 80079aa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80079ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079b0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80079b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079b8:	f102 0210 	add.w	r2, r2, #16
 80079bc:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079c2:	f103 0317 	add.w	r3, r3, #23
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d126      	bne.n	8007a1a <f_open+0x146>
			if (!dir)	/* Default directory itself */
 80079cc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079d0:	f103 0310 	add.w	r3, r3, #16
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <f_open+0x114>
				res = FR_INVALID_NAME;
 80079da:	2306      	movs	r3, #6
 80079dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079e0:	f102 0217 	add.w	r2, r2, #23
 80079e4:	7013      	strb	r3, [r2, #0]
 80079e6:	e018      	b.n	8007a1a <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079ec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf14      	ite	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	2300      	moveq	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a04:	3b18      	subs	r3, #24
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd fbcd 	bl	80051a8 <chk_lock>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a14:	f102 0217 	add.w	r2, r2, #23
 8007a18:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a1e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a22:	f003 031c 	and.w	r3, r3, #28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 813c 	beq.w	8007ca4 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007a2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a30:	f103 0317 	add.w	r3, r3, #23
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d02e      	beq.n	8007a98 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a3e:	f103 0317 	add.w	r3, r3, #23
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d112      	bne.n	8007a6e <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a48:	f7fd fc1e 	bl	8005288 <enq_lock>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <f_open+0x18e>
 8007a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a56:	3b18      	subs	r3, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe ff79 	bl	8006950 <dir_register>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	e000      	b.n	8007a64 <f_open+0x190>
 8007a62:	2312      	movs	r3, #18
 8007a64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a68:	f102 0217 	add.w	r2, r2, #23
 8007a6c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a72:	461a      	mov	r2, r3
 8007a74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a78:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a7c:	f043 0308 	orr.w	r3, r3, #8
 8007a80:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a88:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007a8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a90:	f102 0210 	add.w	r2, r2, #16
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	e01f      	b.n	8007ad8 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a9c:	f103 0310 	add.w	r3, r3, #16
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330b      	adds	r3, #11
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f003 0311 	and.w	r3, r3, #17
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <f_open+0x1e8>
					res = FR_DENIED;
 8007aae:	2307      	movs	r3, #7
 8007ab0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ab4:	f102 0217 	add.w	r2, r2, #23
 8007ab8:	7013      	strb	r3, [r2, #0]
 8007aba:	e00d      	b.n	8007ad8 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ac0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <f_open+0x204>
						res = FR_EXIST;
 8007acc:	2308      	movs	r3, #8
 8007ace:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ad2:	f102 0217 	add.w	r2, r2, #23
 8007ad6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ad8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007adc:	f103 0317 	add.w	r3, r3, #23
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 8113 	bne.w	8007d0e <f_open+0x43a>
 8007ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 810a 	beq.w	8007d0e <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007afa:	f7fd f9dd 	bl	8004eb8 <get_fattime>
 8007afe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b02:	f103 030c 	add.w	r3, r3, #12
 8007b06:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007b08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b0c:	f103 0310 	add.w	r3, r3, #16
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330e      	adds	r3, #14
 8007b14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b18:	f102 020c 	add.w	r2, r2, #12
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b26:	f103 030c 	add.w	r3, r3, #12
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b36:	f103 0310 	add.w	r3, r3, #16
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330f      	adds	r3, #15
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b46:	f103 030c 	add.w	r3, r3, #12
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	0c1a      	lsrs	r2, r3, #16
 8007b4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b52:	f103 0310 	add.w	r3, r3, #16
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3310      	adds	r3, #16
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b62:	f103 030c 	add.w	r3, r3, #12
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	0e1a      	lsrs	r2, r3, #24
 8007b6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b6e:	f103 0310 	add.w	r3, r3, #16
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3311      	adds	r3, #17
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007b7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b7e:	f103 0310 	add.w	r3, r3, #16
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	330b      	adds	r3, #11
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007b8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b8e:	f103 0310 	add.w	r3, r3, #16
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	331c      	adds	r3, #28
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b9e:	f103 0310 	add.w	r3, r3, #16
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	331d      	adds	r3, #29
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bae:	f103 0310 	add.w	r3, r3, #16
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	331e      	adds	r3, #30
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bbe:	f103 0310 	add.w	r3, r3, #16
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	331f      	adds	r3, #31
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007bca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bce:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007bd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bd6:	f102 0210 	add.w	r2, r2, #16
 8007bda:	6811      	ldr	r1, [r2, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fc06 	bl	80063ee <ld_clust>
 8007be2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007be6:	f103 0308 	add.w	r3, r3, #8
 8007bea:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007bec:	2100      	movs	r1, #0
 8007bee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bf2:	f103 0310 	add.w	r3, r3, #16
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	f7fe fc27 	bl	800644a <st_clust>
				dj.fs->wflag = 1;
 8007bfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c00:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c08:	2201      	movs	r2, #1
 8007c0a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007c0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c10:	f103 0308 	add.w	r3, r3, #8
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d079      	beq.n	8007d0e <f_open+0x43a>
					dw = dj.fs->winsect;
 8007c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c1e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c2c:	f102 020c 	add.w	r2, r2, #12
 8007c30:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c36:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c3e:	f102 0208 	add.w	r2, r2, #8
 8007c42:	6811      	ldr	r1, [r2, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe f823 	bl	8005c90 <remove_chain>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c50:	f102 0217 	add.w	r2, r2, #23
 8007c54:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007c56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c5a:	f103 0317 	add.w	r3, r3, #23
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d154      	bne.n	8007d0e <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c68:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007c6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c70:	f103 0308 	add.w	r3, r3, #8
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c7c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007c7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c82:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c8a:	f102 020c 	add.w	r2, r2, #12
 8007c8e:	6811      	ldr	r1, [r2, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fc99 	bl	80055c8 <move_window>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c9c:	f102 0217 	add.w	r2, r2, #23
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	e034      	b.n	8007d0e <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007ca4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ca8:	f103 0317 	add.w	r3, r3, #23
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d12d      	bne.n	8007d0e <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007cb2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cb6:	f103 0310 	add.w	r3, r3, #16
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	330b      	adds	r3, #11
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <f_open+0x408>
					res = FR_NO_FILE;
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cce:	f102 0217 	add.w	r2, r2, #23
 8007cd2:	7013      	strb	r3, [r2, #0]
 8007cd4:	e01b      	b.n	8007d0e <f_open+0x43a>
 8007cd6:	bf00      	nop
 8007cd8:	200022a4 	.word	0x200022a4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ce0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <f_open+0x43a>
 8007cec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cf0:	f103 0310 	add.w	r3, r3, #16
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330b      	adds	r3, #11
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <f_open+0x43a>
						res = FR_DENIED;
 8007d02:	2307      	movs	r3, #7
 8007d04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d08:	f102 0217 	add.w	r2, r2, #23
 8007d0c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007d0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d12:	f103 0317 	add.w	r3, r3, #23
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d157      	bne.n	8007dcc <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d20:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007d2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d30:	461a      	mov	r2, r3
 8007d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d36:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d3a:	f043 0320 	orr.w	r3, r3, #32
 8007d3e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007d42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d46:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d54:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d5c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d62:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d70:	f103 0310 	add.w	r3, r3, #16
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d7c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf14      	ite	ne
 8007d88:	2301      	movne	r3, #1
 8007d8a:	2300      	moveq	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d94:	3b18      	subs	r3, #24
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fa99 	bl	80052d0 <inc_lock>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007da4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007db2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <f_open+0x4f8>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dc6:	f102 0217 	add.w	r2, r2, #23
 8007dca:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007dcc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dd0:	f103 0317 	add.w	r3, r3, #23
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 8088 	bne.w	8007eec <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8007ddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007de0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de8:	461a      	mov	r2, r3
 8007dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dee:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007df2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007df8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	2200      	movs	r2, #0
 8007e02:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007e04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e08:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e10:	f102 0210 	add.w	r2, r2, #16
 8007e14:	6811      	ldr	r1, [r2, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fae9 	bl	80063ee <ld_clust>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e22:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007e2c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e30:	f103 0310 	add.w	r3, r3, #16
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	331f      	adds	r3, #31
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	061a      	lsls	r2, r3, #24
 8007e3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e40:	f103 0310 	add.w	r3, r3, #16
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	331e      	adds	r3, #30
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e52:	f102 0210 	add.w	r2, r2, #16
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	321d      	adds	r2, #29
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	0212      	lsls	r2, r2, #8
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e64:	f102 0210 	add.w	r2, r2, #16
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	321c      	adds	r2, #28
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e74:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e7c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007e7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e82:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007e90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e94:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ea6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ebc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ec0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007ec4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ec8:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ece:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007edc:	88da      	ldrh	r2, [r3, #6]
 8007ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ee2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007eec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ef0:	f103 0317 	add.w	r3, r3, #23
 8007ef4:	781b      	ldrb	r3, [r3, #0]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop

08007f04 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fc53 	bl	80077c8 <validate>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <f_write+0x2c>
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	e21e      	b.n	800836e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f36:	79db      	ldrb	r3, [r3, #7]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	79db      	ldrb	r3, [r3, #7]
 8007f44:	e213      	b.n	800836e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4c:	799b      	ldrb	r3, [r3, #6]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007f56:	2307      	movs	r3, #7
 8007f58:	e209      	b.n	800836e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	f080 81d9 	bcs.w	8008326 <f_write+0x422>
 8007f74:	2300      	movs	r3, #0
 8007f76:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007f78:	e1d5      	b.n	8008326 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f8e:	8952      	ldrh	r2, [r2, #10]
 8007f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f94:	fb01 f202 	mul.w	r2, r1, r2
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 8169 	bne.w	8008272 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fb4:	8952      	ldrh	r2, [r2, #10]
 8007fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	789b      	ldrb	r3, [r3, #2]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	4013      	ands	r3, r2
 8007fd0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d15f      	bne.n	8008098 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d111      	bne.n	8008008 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d126      	bne.n	8008042 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fea7 	bl	8005d52 <create_chain>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24
 8008006:	e01c      	b.n	8008042 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4619      	mov	r1, r3
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7fd ff3f 	bl	8005ea2 <clmt_clust>
 8008024:	6278      	str	r0, [r7, #36]	; 0x24
 8008026:	e00c      	b.n	8008042 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fd fe89 	bl	8005d52 <create_chain>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8173 	beq.w	8008330 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b01      	cmp	r3, #1
 800804e:	d106      	bne.n	800805e <f_write+0x15a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008056:	2202      	movs	r2, #2
 8008058:	71da      	strb	r2, [r3, #7]
 800805a:	2302      	movs	r3, #2
 800805c:	e187      	b.n	800836e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008064:	d106      	bne.n	8008074 <f_write+0x170>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	2201      	movs	r2, #1
 800806e:	71da      	strb	r2, [r3, #7]
 8008070:	2301      	movs	r3, #1
 8008072:	e17c      	b.n	800836e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	461a      	mov	r2, r3
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d105      	bne.n	8008098 <f_write+0x194>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008092:	461a      	mov	r2, r3
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809e:	799b      	ldrb	r3, [r3, #6]
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d023      	beq.n	80080f0 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	7858      	ldrb	r0, [r3, #1]
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	2301      	movs	r3, #1
 80080c2:	f7fc ffbb 	bl	800503c <disk_write>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d2:	2201      	movs	r2, #1
 80080d4:	71da      	strb	r2, [r3, #7]
 80080d6:	2301      	movs	r3, #1
 80080d8:	e149      	b.n	800836e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e0:	799b      	ldrb	r3, [r3, #6]
 80080e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fd fb51 	bl	80057aa <clust2sect>
 8008108:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <f_write+0x21a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008116:	2202      	movs	r2, #2
 8008118:	71da      	strb	r2, [r3, #7]
 800811a:	2302      	movs	r3, #2
 800811c:	e127      	b.n	800836e <f_write+0x46a>
			sect += csect;
 800811e:	7dbb      	ldrb	r3, [r7, #22]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008132:	895b      	ldrh	r3, [r3, #10]
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	fbb3 f3f2 	udiv	r3, r3, r2
 800813c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d069      	beq.n	8008218 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008144:	7dba      	ldrb	r2, [r7, #22]
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008156:	7892      	ldrb	r2, [r2, #2]
 8008158:	4293      	cmp	r3, r2
 800815a:	d90a      	bls.n	8008172 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008168:	789b      	ldrb	r3, [r3, #2]
 800816a:	461a      	mov	r2, r3
 800816c:	7dbb      	ldrb	r3, [r7, #22]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	7858      	ldrb	r0, [r3, #1]
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	69b9      	ldr	r1, [r7, #24]
 8008186:	f7fc ff59 	bl	800503c <disk_write>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	2201      	movs	r2, #1
 8008198:	71da      	strb	r2, [r3, #7]
 800819a:	2301      	movs	r3, #1
 800819c:	e0e7      	b.n	800836e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	69fa      	ldr	r2, [r7, #28]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d926      	bls.n	80081fe <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081ca:	8952      	ldrh	r2, [r2, #10]
 80081cc:	fb02 f303 	mul.w	r3, r2, r3
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	18d1      	adds	r1, r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e0:	895b      	ldrh	r3, [r3, #10]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7fc ff68 	bl	80050b8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	799b      	ldrb	r3, [r3, #6]
 80081f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820a:	895b      	ldrh	r3, [r3, #10]
 800820c:	461a      	mov	r2, r3
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	623b      	str	r3, [r7, #32]
				continue;
 8008216:	e06e      	b.n	80082f6 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	429a      	cmp	r2, r3
 8008224:	d01f      	beq.n	8008266 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d215      	bcs.n	8008266 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008246:	7858      	ldrb	r0, [r3, #1]
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	2301      	movs	r3, #1
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	f7fc fed5 	bl	8004ffc <disk_read>
 8008252:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825e:	2201      	movs	r2, #1
 8008260:	71da      	strb	r2, [r3, #7]
 8008262:	2301      	movs	r3, #1
 8008264:	e083      	b.n	800836e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800826c:	461a      	mov	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827e:	895b      	ldrh	r3, [r3, #10]
 8008280:	4618      	mov	r0, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008296:	8952      	ldrh	r2, [r2, #10]
 8008298:	fbb3 f1f2 	udiv	r1, r3, r2
 800829c:	fb01 f202 	mul.w	r2, r1, r2
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	1ac3      	subs	r3, r0, r3
 80082a4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d901      	bls.n	80082b2 <f_write+0x3ae>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082c6:	8952      	ldrh	r2, [r2, #10]
 80082c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80082cc:	fb01 f202 	mul.w	r2, r1, r2
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fc feec 	bl	80050b8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	799b      	ldrb	r3, [r3, #6]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f4:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	4413      	add	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	4413      	add	r3, r2
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008310:	6093      	str	r3, [r2, #8]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	441a      	add	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f ae26 	bne.w	8007f7a <f_write+0x76>
 800832e:	e000      	b.n	8008332 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008330:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	429a      	cmp	r2, r3
 8008344:	d907      	bls.n	8008356 <f_write+0x452>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008354:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835c:	799b      	ldrb	r3, [r3, #6]
 800835e:	f043 0320 	orr.w	r3, r3, #32
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3728      	adds	r7, #40	; 0x28
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fa22 	bl	80077c8 <validate>
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 80bc 	bne.w	8008508 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008396:	799b      	ldrb	r3, [r3, #6]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80b3 	beq.w	8008508 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	799b      	ldrb	r3, [r3, #6]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01e      	beq.n	80083f0 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083be:	7858      	ldrb	r0, [r3, #1]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	2301      	movs	r3, #1
 80083cc:	f7fc fe36 	bl	800503c <disk_write>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80083d6:	2301      	movs	r3, #1
 80083d8:	e097      	b.n	800850a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e0:	799b      	ldrb	r3, [r3, #6]
 80083e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ee:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f7fd f8e0 	bl	80055c8 <move_window>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d17a      	bne.n	8008508 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	330b      	adds	r3, #11
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	330b      	adds	r3, #11
 8008426:	f042 0220 	orr.w	r2, r2, #32
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	331c      	adds	r3, #28
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	b29b      	uxth	r3, r3
 8008448:	0a1b      	lsrs	r3, r3, #8
 800844a:	b29a      	uxth	r2, r3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	331d      	adds	r3, #29
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	0c1a      	lsrs	r2, r3, #16
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	331e      	adds	r3, #30
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	0e1a      	lsrs	r2, r3, #24
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	331f      	adds	r3, #31
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	4619      	mov	r1, r3
 8008482:	6938      	ldr	r0, [r7, #16]
 8008484:	f7fd ffe1 	bl	800644a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008488:	f7fc fd16 	bl	8004eb8 <get_fattime>
 800848c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3316      	adds	r3, #22
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	b29b      	uxth	r3, r3
 800849c:	0a1b      	lsrs	r3, r3, #8
 800849e:	b29a      	uxth	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	3317      	adds	r3, #23
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0c1a      	lsrs	r2, r3, #16
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	3318      	adds	r3, #24
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	0e1a      	lsrs	r2, r3, #24
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	3319      	adds	r3, #25
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3312      	adds	r3, #18
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3313      	adds	r3, #19
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d6:	799b      	ldrb	r3, [r3, #6]
 80084d8:	f023 0320 	bic.w	r3, r3, #32
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f2:	2201      	movs	r2, #1
 80084f4:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fd f894 	bl	800562c <sync_fs>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008508:	7dfb      	ldrb	r3, [r7, #23]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff ff2b 	bl	8008376 <f_sync>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d119      	bne.n	800855e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff f94c 	bl	80077c8 <validate>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d111      	bne.n	800855e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	4618      	mov	r0, r3
 8008544:	f7fc ff80 	bl	8005448 <dec_lock>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d105      	bne.n	800855e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008558:	461a      	mov	r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	2b0a      	cmp	r3, #10
 8008578:	d103      	bne.n	8008582 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800857a:	210d      	movs	r1, #13
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fff3 	bl	8008568 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db25      	blt.n	80085da <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	60fa      	str	r2, [r7, #12]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4413      	add	r3, r2
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b3c      	cmp	r3, #60	; 0x3c
 80085a0:	dd12      	ble.n	80085c8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f103 010c 	add.w	r1, r3, #12
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	f7ff fca7 	bl	8007f04 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d101      	bne.n	80085c2 <putc_bfd+0x5a>
 80085be:	2300      	movs	r3, #0
 80085c0:	e001      	b.n	80085c6 <putc_bfd+0x5e>
 80085c2:	f04f 33ff 	mov.w	r3, #4294967295
 80085c6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	609a      	str	r2, [r3, #8]
 80085d8:	e000      	b.n	80085dc <putc_bfd+0x74>
	if (i < 0) return;
 80085da:	bf00      	nop
}
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80085e2:	b590      	push	{r4, r7, lr}
 80085e4:	b097      	sub	sp, #92	; 0x5c
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80085f8:	e009      	b.n	800860e <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff ffad 	bl	8008568 <putc_bfd>
	while (*str)			/* Put the string */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f1      	bne.n	80085fa <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	db15      	blt.n	8008648 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	461c      	mov	r4, r3
 8008622:	f107 0208 	add.w	r2, r7, #8
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	f103 010c 	add.w	r1, r3, #12
 800862e:	4613      	mov	r3, r2
 8008630:	4622      	mov	r2, r4
 8008632:	f7ff fc67 	bl	8007f04 <f_write>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4293      	cmp	r3, r2
 8008642:	d101      	bne.n	8008648 <f_puts+0x66>
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	e001      	b.n	800864c <f_puts+0x6a>
	return EOF;
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800864c:	4618      	mov	r0, r3
 800864e:	375c      	adds	r7, #92	; 0x5c
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}

08008654 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008662:	2301      	movs	r3, #1
 8008664:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800866a:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 800866c:	7a5b      	ldrb	r3, [r3, #9]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d831      	bhi.n	80086d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 8008676:	7a5b      	ldrb	r3, [r3, #9]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 800867e:	2100      	movs	r1, #0
 8008680:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008682:	4b18      	ldr	r3, [pc, #96]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 8008684:	7a5b      	ldrb	r3, [r3, #9]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	4a16      	ldr	r2, [pc, #88]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 8008694:	7a5b      	ldrb	r3, [r3, #9]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	461a      	mov	r2, r3
 800869a:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 800869c:	4413      	add	r3, r2
 800869e:	79fa      	ldrb	r2, [r7, #7]
 80086a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086a2:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 80086a4:	7a5b      	ldrb	r3, [r3, #9]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	b2d1      	uxtb	r1, r2
 80086ac:	4a0d      	ldr	r2, [pc, #52]	; (80086e4 <FATFS_LinkDriverEx+0x90>)
 80086ae:	7251      	strb	r1, [r2, #9]
 80086b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	3330      	adds	r3, #48	; 0x30
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3301      	adds	r3, #1
 80086c0:	223a      	movs	r2, #58	; 0x3a
 80086c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3302      	adds	r3, #2
 80086c8:	222f      	movs	r2, #47	; 0x2f
 80086ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3303      	adds	r3, #3
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	200024a4 	.word	0x200024a4

080086e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086f2:	2200      	movs	r2, #0
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff ffac 	bl	8008654 <FATFS_LinkDriverEx>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	2b7f      	cmp	r3, #127	; 0x7f
 8008718:	d802      	bhi.n	8008720 <ff_convert+0x18>
		c = chr;
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	81fb      	strh	r3, [r7, #14]
 800871e:	e025      	b.n	800876c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	2bff      	cmp	r3, #255	; 0xff
 800872a:	d805      	bhi.n	8008738 <ff_convert+0x30>
 800872c:	88fb      	ldrh	r3, [r7, #6]
 800872e:	3b80      	subs	r3, #128	; 0x80
 8008730:	4a11      	ldr	r2, [pc, #68]	; (8008778 <ff_convert+0x70>)
 8008732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008736:	e000      	b.n	800873a <ff_convert+0x32>
 8008738:	2300      	movs	r3, #0
 800873a:	81fb      	strh	r3, [r7, #14]
 800873c:	e016      	b.n	800876c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800873e:	2300      	movs	r3, #0
 8008740:	81fb      	strh	r3, [r7, #14]
 8008742:	e009      	b.n	8008758 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	4a0c      	ldr	r2, [pc, #48]	; (8008778 <ff_convert+0x70>)
 8008748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800874c:	88fa      	ldrh	r2, [r7, #6]
 800874e:	429a      	cmp	r2, r3
 8008750:	d006      	beq.n	8008760 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	3301      	adds	r3, #1
 8008756:	81fb      	strh	r3, [r7, #14]
 8008758:	89fb      	ldrh	r3, [r7, #14]
 800875a:	2b7f      	cmp	r3, #127	; 0x7f
 800875c:	d9f2      	bls.n	8008744 <ff_convert+0x3c>
 800875e:	e000      	b.n	8008762 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008760:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	3380      	adds	r3, #128	; 0x80
 8008766:	b29b      	uxth	r3, r3
 8008768:	b2db      	uxtb	r3, r3
 800876a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800876c:	89fb      	ldrh	r3, [r7, #14]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr
 8008778:	0800be78 	.word	0x0800be78

0800877c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e002      	b.n	8008792 <ff_wtoupper+0x16>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	4a0f      	ldr	r2, [pc, #60]	; (80087d0 <ff_wtoupper+0x54>)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <ff_wtoupper+0x30>
 800879e:	4a0c      	ldr	r2, [pc, #48]	; (80087d0 <ff_wtoupper+0x54>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d1ef      	bne.n	800878c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80087ac:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <ff_wtoupper+0x54>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <ff_wtoupper+0x46>
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <ff_wtoupper+0x58>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c0:	e000      	b.n	80087c4 <ff_wtoupper+0x48>
 80087c2:	88fb      	ldrh	r3, [r7, #6]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	0800bf78 	.word	0x0800bf78
 80087d4:	0800c158 	.word	0x0800c158

080087d8 <gcvt>:
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087da:	461c      	mov	r4, r3
 80087dc:	4615      	mov	r5, r2
 80087de:	2300      	movs	r3, #0
 80087e0:	2200      	movs	r2, #0
 80087e2:	b085      	sub	sp, #20
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	f7f8 f8e8 	bl	80009bc <__aeabi_dcmplt>
 80087ec:	4623      	mov	r3, r4
 80087ee:	b118      	cbz	r0, 80087f8 <gcvt+0x20>
 80087f0:	222d      	movs	r2, #45	; 0x2d
 80087f2:	3d01      	subs	r5, #1
 80087f4:	f803 2b01 	strb.w	r2, [r3], #1
 80087f8:	2267      	movs	r2, #103	; 0x67
 80087fa:	2100      	movs	r1, #0
 80087fc:	e9cd 5300 	strd	r5, r3, [sp]
 8008800:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008804:	4905      	ldr	r1, [pc, #20]	; (800881c <gcvt+0x44>)
 8008806:	4632      	mov	r2, r6
 8008808:	463b      	mov	r3, r7
 800880a:	6808      	ldr	r0, [r1, #0]
 800880c:	f000 f8b4 	bl	8008978 <_gcvt>
 8008810:	2800      	cmp	r0, #0
 8008812:	bf14      	ite	ne
 8008814:	4620      	movne	r0, r4
 8008816:	2000      	moveq	r0, #0
 8008818:	b005      	add	sp, #20
 800881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881c:	20000024 	.word	0x20000024

08008820 <__errno>:
 8008820:	4b01      	ldr	r3, [pc, #4]	; (8008828 <__errno+0x8>)
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000024 	.word	0x20000024

0800882c <__libc_init_array>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	2600      	movs	r6, #0
 8008830:	4d0c      	ldr	r5, [pc, #48]	; (8008864 <__libc_init_array+0x38>)
 8008832:	4c0d      	ldr	r4, [pc, #52]	; (8008868 <__libc_init_array+0x3c>)
 8008834:	1b64      	subs	r4, r4, r5
 8008836:	10a4      	asrs	r4, r4, #2
 8008838:	42a6      	cmp	r6, r4
 800883a:	d109      	bne.n	8008850 <__libc_init_array+0x24>
 800883c:	f003 fa82 	bl	800bd44 <_init>
 8008840:	2600      	movs	r6, #0
 8008842:	4d0a      	ldr	r5, [pc, #40]	; (800886c <__libc_init_array+0x40>)
 8008844:	4c0a      	ldr	r4, [pc, #40]	; (8008870 <__libc_init_array+0x44>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	42a6      	cmp	r6, r4
 800884c:	d105      	bne.n	800885a <__libc_init_array+0x2e>
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	f855 3b04 	ldr.w	r3, [r5], #4
 8008854:	4798      	blx	r3
 8008856:	3601      	adds	r6, #1
 8008858:	e7ee      	b.n	8008838 <__libc_init_array+0xc>
 800885a:	f855 3b04 	ldr.w	r3, [r5], #4
 800885e:	4798      	blx	r3
 8008860:	3601      	adds	r6, #1
 8008862:	e7f2      	b.n	800884a <__libc_init_array+0x1e>
 8008864:	0800c628 	.word	0x0800c628
 8008868:	0800c628 	.word	0x0800c628
 800886c:	0800c628 	.word	0x0800c628
 8008870:	0800c62c 	.word	0x0800c62c

08008874 <memset>:
 8008874:	4603      	mov	r3, r0
 8008876:	4402      	add	r2, r0
 8008878:	4293      	cmp	r3, r2
 800887a:	d100      	bne.n	800887e <memset+0xa>
 800887c:	4770      	bx	lr
 800887e:	f803 1b01 	strb.w	r1, [r3], #1
 8008882:	e7f9      	b.n	8008878 <memset+0x4>

08008884 <print_e>:
 8008884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008886:	b08b      	sub	sp, #44	; 0x2c
 8008888:	460d      	mov	r5, r1
 800888a:	a908      	add	r1, sp, #32
 800888c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800888e:	9104      	str	r1, [sp, #16]
 8008890:	a907      	add	r1, sp, #28
 8008892:	9103      	str	r1, [sp, #12]
 8008894:	a909      	add	r1, sp, #36	; 0x24
 8008896:	9102      	str	r1, [sp, #8]
 8008898:	1c71      	adds	r1, r6, #1
 800889a:	9101      	str	r1, [sp, #4]
 800889c:	2102      	movs	r1, #2
 800889e:	9100      	str	r1, [sp, #0]
 80088a0:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80088a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80088a6:	f000 fe2f 	bl	8009508 <_dtoa_r>
 80088aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80088ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b0:	4601      	mov	r1, r0
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d104      	bne.n	80088c0 <print_e+0x3c>
 80088b6:	4628      	mov	r0, r5
 80088b8:	f000 fd74 	bl	80093a4 <strcpy>
 80088bc:	b00b      	add	sp, #44	; 0x2c
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c0:	462b      	mov	r3, r5
 80088c2:	7800      	ldrb	r0, [r0, #0]
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	f803 0b01 	strb.w	r0, [r3], #1
 80088ca:	bfc8      	it	gt
 80088cc:	2401      	movgt	r4, #1
 80088ce:	202e      	movs	r0, #46	; 0x2e
 80088d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80088d4:	b10d      	cbz	r5, 80088da <print_e+0x56>
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	dc37      	bgt.n	800894a <print_e+0xc6>
 80088da:	2f67      	cmp	r7, #103	; 0x67
 80088dc:	d046      	beq.n	800896c <print_e+0xe8>
 80088de:	2f47      	cmp	r7, #71	; 0x47
 80088e0:	d046      	beq.n	8008970 <print_e+0xec>
 80088e2:	212e      	movs	r1, #46	; 0x2e
 80088e4:	2030      	movs	r0, #48	; 0x30
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	dc38      	bgt.n	800895c <print_e+0xd8>
 80088ea:	1e51      	subs	r1, r2, #1
 80088ec:	2900      	cmp	r1, #0
 80088ee:	bfa8      	it	ge
 80088f0:	222b      	movge	r2, #43	; 0x2b
 80088f2:	4618      	mov	r0, r3
 80088f4:	9109      	str	r1, [sp, #36]	; 0x24
 80088f6:	bfbe      	ittt	lt
 80088f8:	212d      	movlt	r1, #45	; 0x2d
 80088fa:	f1c2 0201 	rsblt	r2, r2, #1
 80088fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008900:	f800 7b02 	strb.w	r7, [r0], #2
 8008904:	bfa8      	it	ge
 8008906:	705a      	strbge	r2, [r3, #1]
 8008908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890a:	bfb8      	it	lt
 800890c:	7059      	strblt	r1, [r3, #1]
 800890e:	2a63      	cmp	r2, #99	; 0x63
 8008910:	dd0b      	ble.n	800892a <print_e+0xa6>
 8008912:	2164      	movs	r1, #100	; 0x64
 8008914:	fb92 f1f1 	sdiv	r1, r2, r1
 8008918:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800891c:	1cd8      	adds	r0, r3, #3
 800891e:	709c      	strb	r4, [r3, #2]
 8008920:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008924:	fb03 2201 	mla	r2, r3, r1, r2
 8008928:	9209      	str	r2, [sp, #36]	; 0x24
 800892a:	220a      	movs	r2, #10
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008932:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008936:	7001      	strb	r1, [r0, #0]
 8008938:	f06f 0109 	mvn.w	r1, #9
 800893c:	fb01 3302 	mla	r3, r1, r2, r3
 8008940:	3330      	adds	r3, #48	; 0x30
 8008942:	7043      	strb	r3, [r0, #1]
 8008944:	2300      	movs	r3, #0
 8008946:	7083      	strb	r3, [r0, #2]
 8008948:	e7b8      	b.n	80088bc <print_e+0x38>
 800894a:	b10c      	cbz	r4, 8008950 <print_e+0xcc>
 800894c:	f803 0b01 	strb.w	r0, [r3], #1
 8008950:	780c      	ldrb	r4, [r1, #0]
 8008952:	3e01      	subs	r6, #1
 8008954:	f803 4b01 	strb.w	r4, [r3], #1
 8008958:	2400      	movs	r4, #0
 800895a:	e7b9      	b.n	80088d0 <print_e+0x4c>
 800895c:	b10c      	cbz	r4, 8008962 <print_e+0xde>
 800895e:	f803 1b01 	strb.w	r1, [r3], #1
 8008962:	2400      	movs	r4, #0
 8008964:	f803 0b01 	strb.w	r0, [r3], #1
 8008968:	3e01      	subs	r6, #1
 800896a:	e7bc      	b.n	80088e6 <print_e+0x62>
 800896c:	2765      	movs	r7, #101	; 0x65
 800896e:	e7bc      	b.n	80088ea <print_e+0x66>
 8008970:	2745      	movs	r7, #69	; 0x45
 8008972:	e7ba      	b.n	80088ea <print_e+0x66>
 8008974:	0000      	movs	r0, r0
	...

08008978 <_gcvt>:
 8008978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800897c:	4690      	mov	r8, r2
 800897e:	461c      	mov	r4, r3
 8008980:	b08b      	sub	sp, #44	; 0x2c
 8008982:	4681      	mov	r9, r0
 8008984:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8008988:	2200      	movs	r2, #0
 800898a:	2300      	movs	r3, #0
 800898c:	4640      	mov	r0, r8
 800898e:	4621      	mov	r1, r4
 8008990:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008992:	f7f8 f813 	bl	80009bc <__aeabi_dcmplt>
 8008996:	b108      	cbz	r0, 800899c <_gcvt+0x24>
 8008998:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800899c:	2200      	movs	r2, #0
 800899e:	2300      	movs	r3, #0
 80089a0:	4640      	mov	r0, r8
 80089a2:	4621      	mov	r1, r4
 80089a4:	f7f8 f800 	bl	80009a8 <__aeabi_dcmpeq>
 80089a8:	b138      	cbz	r0, 80089ba <_gcvt+0x42>
 80089aa:	2330      	movs	r3, #48	; 0x30
 80089ac:	702b      	strb	r3, [r5, #0]
 80089ae:	2300      	movs	r3, #0
 80089b0:	706b      	strb	r3, [r5, #1]
 80089b2:	4628      	mov	r0, r5
 80089b4:	b00b      	add	sp, #44	; 0x2c
 80089b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ba:	4640      	mov	r0, r8
 80089bc:	a34c      	add	r3, pc, #304	; (adr r3, 8008af0 <_gcvt+0x178>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	4621      	mov	r1, r4
 80089c4:	f7f8 f804 	bl	80009d0 <__aeabi_dcmple>
 80089c8:	b160      	cbz	r0, 80089e4 <_gcvt+0x6c>
 80089ca:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80089ce:	3f01      	subs	r7, #1
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	4642      	mov	r2, r8
 80089d4:	4623      	mov	r3, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	4648      	mov	r0, r9
 80089da:	9602      	str	r6, [sp, #8]
 80089dc:	9700      	str	r7, [sp, #0]
 80089de:	f7ff ff51 	bl	8008884 <print_e>
 80089e2:	e7e6      	b.n	80089b2 <_gcvt+0x3a>
 80089e4:	4638      	mov	r0, r7
 80089e6:	f000 fc09 	bl	80091fc <_mprec_log10>
 80089ea:	4642      	mov	r2, r8
 80089ec:	4623      	mov	r3, r4
 80089ee:	f7f7 ffef 	bl	80009d0 <__aeabi_dcmple>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1e9      	bne.n	80089ca <_gcvt+0x52>
 80089f6:	ab09      	add	r3, sp, #36	; 0x24
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	ab08      	add	r3, sp, #32
 80089fc:	9303      	str	r3, [sp, #12]
 80089fe:	ab07      	add	r3, sp, #28
 8008a00:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8008a04:	2302      	movs	r3, #2
 8008a06:	4642      	mov	r2, r8
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	f000 fd7b 	bl	8009508 <_dtoa_r>
 8008a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a16:	9a07      	ldr	r2, [sp, #28]
 8008a18:	4601      	mov	r1, r0
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d00f      	beq.n	8008a3e <_gcvt+0xc6>
 8008a1e:	462b      	mov	r3, r5
 8008a20:	442f      	add	r7, r5
 8008a22:	4608      	mov	r0, r1
 8008a24:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008a28:	9a07      	ldr	r2, [sp, #28]
 8008a2a:	1afc      	subs	r4, r7, r3
 8008a2c:	f1bc 0f00 	cmp.w	ip, #0
 8008a30:	d001      	beq.n	8008a36 <_gcvt+0xbe>
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	dc07      	bgt.n	8008a46 <_gcvt+0xce>
 8008a36:	2100      	movs	r1, #0
 8008a38:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008a3c:	e00c      	b.n	8008a58 <_gcvt+0xe0>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 fcb0 	bl	80093a4 <strcpy>
 8008a44:	e7b5      	b.n	80089b2 <_gcvt+0x3a>
 8008a46:	3a01      	subs	r2, #1
 8008a48:	f803 cb01 	strb.w	ip, [r3], #1
 8008a4c:	9207      	str	r2, [sp, #28]
 8008a4e:	e7e8      	b.n	8008a22 <_gcvt+0xaa>
 8008a50:	2101      	movs	r1, #1
 8008a52:	f803 cb01 	strb.w	ip, [r3], #1
 8008a56:	3c01      	subs	r4, #1
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	4617      	mov	r7, r2
 8008a5c:	dc2a      	bgt.n	8008ab4 <_gcvt+0x13c>
 8008a5e:	b101      	cbz	r1, 8008a62 <_gcvt+0xea>
 8008a60:	9207      	str	r2, [sp, #28]
 8008a62:	b90e      	cbnz	r6, 8008a68 <_gcvt+0xf0>
 8008a64:	7802      	ldrb	r2, [r0, #0]
 8008a66:	b312      	cbz	r2, 8008aae <_gcvt+0x136>
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	bf04      	itt	eq
 8008a6c:	2230      	moveq	r2, #48	; 0x30
 8008a6e:	f803 2b01 	strbeq.w	r2, [r3], #1
 8008a72:	222e      	movs	r2, #46	; 0x2e
 8008a74:	4619      	mov	r1, r3
 8008a76:	2700      	movs	r7, #0
 8008a78:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	eba2 0c03 	sub.w	ip, r2, r3
 8008a84:	eb1c 0f01 	cmn.w	ip, r1
 8008a88:	d41c      	bmi.n	8008ac4 <_gcvt+0x14c>
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	f1c2 0100 	rsb	r1, r2, #0
 8008a90:	bfc8      	it	gt
 8008a92:	2100      	movgt	r1, #0
 8008a94:	f101 0c01 	add.w	ip, r1, #1
 8008a98:	4463      	add	r3, ip
 8008a9a:	440a      	add	r2, r1
 8008a9c:	b107      	cbz	r7, 8008aa0 <_gcvt+0x128>
 8008a9e:	9207      	str	r2, [sp, #28]
 8008aa0:	1e42      	subs	r2, r0, #1
 8008aa2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008aa6:	b109      	cbz	r1, 8008aac <_gcvt+0x134>
 8008aa8:	2c00      	cmp	r4, #0
 8008aaa:	dc0f      	bgt.n	8008acc <_gcvt+0x154>
 8008aac:	b9de      	cbnz	r6, 8008ae6 <_gcvt+0x16e>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	e77e      	b.n	80089b2 <_gcvt+0x3a>
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008aba:	dcc9      	bgt.n	8008a50 <_gcvt+0xd8>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d0d0      	beq.n	8008a62 <_gcvt+0xea>
 8008ac0:	9707      	str	r7, [sp, #28]
 8008ac2:	e7ce      	b.n	8008a62 <_gcvt+0xea>
 8008ac4:	2701      	movs	r7, #1
 8008ac6:	f801 ef01 	strb.w	lr, [r1, #1]!
 8008aca:	e7db      	b.n	8008a84 <_gcvt+0x10c>
 8008acc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad0:	3c01      	subs	r4, #1
 8008ad2:	e7e6      	b.n	8008aa2 <_gcvt+0x12a>
 8008ad4:	f802 6b01 	strb.w	r6, [r2], #1
 8008ad8:	1a81      	subs	r1, r0, r2
 8008ada:	2900      	cmp	r1, #0
 8008adc:	dcfa      	bgt.n	8008ad4 <_gcvt+0x15c>
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	bfa8      	it	ge
 8008ae2:	191b      	addge	r3, r3, r4
 8008ae4:	e7e3      	b.n	8008aae <_gcvt+0x136>
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	2630      	movs	r6, #48	; 0x30
 8008aea:	1918      	adds	r0, r3, r4
 8008aec:	e7f4      	b.n	8008ad8 <_gcvt+0x160>
 8008aee:	bf00      	nop
 8008af0:	eb1c432d 	.word	0xeb1c432d
 8008af4:	3f1a36e2 	.word	0x3f1a36e2

08008af8 <_Balloc>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	b976      	cbnz	r6, 8008b20 <_Balloc+0x28>
 8008b02:	2010      	movs	r0, #16
 8008b04:	f001 fb00 	bl	800a108 <malloc>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b0c:	b920      	cbnz	r0, 8008b18 <_Balloc+0x20>
 8008b0e:	2166      	movs	r1, #102	; 0x66
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <_Balloc+0x78>)
 8008b12:	4818      	ldr	r0, [pc, #96]	; (8008b74 <_Balloc+0x7c>)
 8008b14:	f000 fc4e 	bl	80093b4 <__assert_func>
 8008b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b1c:	6006      	str	r6, [r0, #0]
 8008b1e:	60c6      	str	r6, [r0, #12]
 8008b20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b22:	68f3      	ldr	r3, [r6, #12]
 8008b24:	b183      	cbz	r3, 8008b48 <_Balloc+0x50>
 8008b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b2e:	b9b8      	cbnz	r0, 8008b60 <_Balloc+0x68>
 8008b30:	2101      	movs	r1, #1
 8008b32:	fa01 f605 	lsl.w	r6, r1, r5
 8008b36:	1d72      	adds	r2, r6, #5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	0092      	lsls	r2, r2, #2
 8008b3c:	f000 fb7a 	bl	8009234 <_calloc_r>
 8008b40:	b160      	cbz	r0, 8008b5c <_Balloc+0x64>
 8008b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b46:	e00e      	b.n	8008b66 <_Balloc+0x6e>
 8008b48:	2221      	movs	r2, #33	; 0x21
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fb71 	bl	8009234 <_calloc_r>
 8008b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b54:	60f0      	str	r0, [r6, #12]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e4      	bne.n	8008b26 <_Balloc+0x2e>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	6802      	ldr	r2, [r0, #0]
 8008b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b66:	2300      	movs	r3, #0
 8008b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b6c:	e7f7      	b.n	8008b5e <_Balloc+0x66>
 8008b6e:	bf00      	nop
 8008b70:	0800c33c 	.word	0x0800c33c
 8008b74:	0800c353 	.word	0x0800c353

08008b78 <_Bfree>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b976      	cbnz	r6, 8008ba0 <_Bfree+0x28>
 8008b82:	2010      	movs	r0, #16
 8008b84:	f001 fac0 	bl	800a108 <malloc>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008b8c:	b920      	cbnz	r0, 8008b98 <_Bfree+0x20>
 8008b8e:	218a      	movs	r1, #138	; 0x8a
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <_Bfree+0x3c>)
 8008b92:	4809      	ldr	r0, [pc, #36]	; (8008bb8 <_Bfree+0x40>)
 8008b94:	f000 fc0e 	bl	80093b4 <__assert_func>
 8008b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b9c:	6006      	str	r6, [r0, #0]
 8008b9e:	60c6      	str	r6, [r0, #12]
 8008ba0:	b13c      	cbz	r4, 8008bb2 <_Bfree+0x3a>
 8008ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ba4:	6862      	ldr	r2, [r4, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bac:	6021      	str	r1, [r4, #0]
 8008bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	0800c33c 	.word	0x0800c33c
 8008bb8:	0800c353 	.word	0x0800c353

08008bbc <__multadd>:
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	461e      	mov	r6, r3
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	690d      	ldr	r5, [r1, #16]
 8008bca:	f101 0c14 	add.w	ip, r1, #20
 8008bce:	f8dc 3000 	ldr.w	r3, [ip]
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	b299      	uxth	r1, r3
 8008bd6:	fb02 6101 	mla	r1, r2, r1, r6
 8008bda:	0c1e      	lsrs	r6, r3, #16
 8008bdc:	0c0b      	lsrs	r3, r1, #16
 8008bde:	fb02 3306 	mla	r3, r2, r6, r3
 8008be2:	b289      	uxth	r1, r1
 8008be4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008be8:	4285      	cmp	r5, r0
 8008bea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bee:	f84c 1b04 	str.w	r1, [ip], #4
 8008bf2:	dcec      	bgt.n	8008bce <__multadd+0x12>
 8008bf4:	b30e      	cbz	r6, 8008c3a <__multadd+0x7e>
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	dc19      	bgt.n	8008c30 <__multadd+0x74>
 8008bfc:	6861      	ldr	r1, [r4, #4]
 8008bfe:	4638      	mov	r0, r7
 8008c00:	3101      	adds	r1, #1
 8008c02:	f7ff ff79 	bl	8008af8 <_Balloc>
 8008c06:	4680      	mov	r8, r0
 8008c08:	b928      	cbnz	r0, 8008c16 <__multadd+0x5a>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	21b5      	movs	r1, #181	; 0xb5
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <__multadd+0x84>)
 8008c10:	480c      	ldr	r0, [pc, #48]	; (8008c44 <__multadd+0x88>)
 8008c12:	f000 fbcf 	bl	80093b4 <__assert_func>
 8008c16:	6922      	ldr	r2, [r4, #16]
 8008c18:	f104 010c 	add.w	r1, r4, #12
 8008c1c:	3202      	adds	r2, #2
 8008c1e:	0092      	lsls	r2, r2, #2
 8008c20:	300c      	adds	r0, #12
 8008c22:	f001 fa79 	bl	800a118 <memcpy>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff ffa5 	bl	8008b78 <_Bfree>
 8008c2e:	4644      	mov	r4, r8
 8008c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c34:	3501      	adds	r5, #1
 8008c36:	615e      	str	r6, [r3, #20]
 8008c38:	6125      	str	r5, [r4, #16]
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	0800c3af 	.word	0x0800c3af
 8008c44:	0800c353 	.word	0x0800c353

08008c48 <__hi0bits>:
 8008c48:	0c02      	lsrs	r2, r0, #16
 8008c4a:	0412      	lsls	r2, r2, #16
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	b9ca      	cbnz	r2, 8008c84 <__hi0bits+0x3c>
 8008c50:	0403      	lsls	r3, r0, #16
 8008c52:	2010      	movs	r0, #16
 8008c54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c58:	bf04      	itt	eq
 8008c5a:	021b      	lsleq	r3, r3, #8
 8008c5c:	3008      	addeq	r0, #8
 8008c5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c62:	bf04      	itt	eq
 8008c64:	011b      	lsleq	r3, r3, #4
 8008c66:	3004      	addeq	r0, #4
 8008c68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c6c:	bf04      	itt	eq
 8008c6e:	009b      	lsleq	r3, r3, #2
 8008c70:	3002      	addeq	r0, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	db05      	blt.n	8008c82 <__hi0bits+0x3a>
 8008c76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c7a:	f100 0001 	add.w	r0, r0, #1
 8008c7e:	bf08      	it	eq
 8008c80:	2020      	moveq	r0, #32
 8008c82:	4770      	bx	lr
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7e5      	b.n	8008c54 <__hi0bits+0xc>

08008c88 <__lo0bits>:
 8008c88:	6803      	ldr	r3, [r0, #0]
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	f013 0007 	ands.w	r0, r3, #7
 8008c90:	d00b      	beq.n	8008caa <__lo0bits+0x22>
 8008c92:	07d9      	lsls	r1, r3, #31
 8008c94:	d421      	bmi.n	8008cda <__lo0bits+0x52>
 8008c96:	0798      	lsls	r0, r3, #30
 8008c98:	bf49      	itett	mi
 8008c9a:	085b      	lsrmi	r3, r3, #1
 8008c9c:	089b      	lsrpl	r3, r3, #2
 8008c9e:	2001      	movmi	r0, #1
 8008ca0:	6013      	strmi	r3, [r2, #0]
 8008ca2:	bf5c      	itt	pl
 8008ca4:	2002      	movpl	r0, #2
 8008ca6:	6013      	strpl	r3, [r2, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	b299      	uxth	r1, r3
 8008cac:	b909      	cbnz	r1, 8008cb2 <__lo0bits+0x2a>
 8008cae:	2010      	movs	r0, #16
 8008cb0:	0c1b      	lsrs	r3, r3, #16
 8008cb2:	b2d9      	uxtb	r1, r3
 8008cb4:	b909      	cbnz	r1, 8008cba <__lo0bits+0x32>
 8008cb6:	3008      	adds	r0, #8
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	0719      	lsls	r1, r3, #28
 8008cbc:	bf04      	itt	eq
 8008cbe:	091b      	lsreq	r3, r3, #4
 8008cc0:	3004      	addeq	r0, #4
 8008cc2:	0799      	lsls	r1, r3, #30
 8008cc4:	bf04      	itt	eq
 8008cc6:	089b      	lsreq	r3, r3, #2
 8008cc8:	3002      	addeq	r0, #2
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d403      	bmi.n	8008cd6 <__lo0bits+0x4e>
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	f100 0001 	add.w	r0, r0, #1
 8008cd4:	d003      	beq.n	8008cde <__lo0bits+0x56>
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	2000      	movs	r0, #0
 8008cdc:	4770      	bx	lr
 8008cde:	2020      	movs	r0, #32
 8008ce0:	4770      	bx	lr
	...

08008ce4 <__i2b>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	2101      	movs	r1, #1
 8008cea:	f7ff ff05 	bl	8008af8 <_Balloc>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	b928      	cbnz	r0, 8008cfe <__i2b+0x1a>
 8008cf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cf6:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <__i2b+0x24>)
 8008cf8:	4804      	ldr	r0, [pc, #16]	; (8008d0c <__i2b+0x28>)
 8008cfa:	f000 fb5b 	bl	80093b4 <__assert_func>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	6144      	str	r4, [r0, #20]
 8008d02:	6103      	str	r3, [r0, #16]
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	bf00      	nop
 8008d08:	0800c3af 	.word	0x0800c3af
 8008d0c:	0800c353 	.word	0x0800c353

08008d10 <__multiply>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	4691      	mov	r9, r2
 8008d16:	690a      	ldr	r2, [r1, #16]
 8008d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	bfbe      	ittt	lt
 8008d22:	460b      	movlt	r3, r1
 8008d24:	464c      	movlt	r4, r9
 8008d26:	4699      	movlt	r9, r3
 8008d28:	6927      	ldr	r7, [r4, #16]
 8008d2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	6861      	ldr	r1, [r4, #4]
 8008d32:	eb07 060a 	add.w	r6, r7, sl
 8008d36:	42b3      	cmp	r3, r6
 8008d38:	b085      	sub	sp, #20
 8008d3a:	bfb8      	it	lt
 8008d3c:	3101      	addlt	r1, #1
 8008d3e:	f7ff fedb 	bl	8008af8 <_Balloc>
 8008d42:	b930      	cbnz	r0, 8008d52 <__multiply+0x42>
 8008d44:	4602      	mov	r2, r0
 8008d46:	f240 115d 	movw	r1, #349	; 0x15d
 8008d4a:	4b43      	ldr	r3, [pc, #268]	; (8008e58 <__multiply+0x148>)
 8008d4c:	4843      	ldr	r0, [pc, #268]	; (8008e5c <__multiply+0x14c>)
 8008d4e:	f000 fb31 	bl	80093b4 <__assert_func>
 8008d52:	f100 0514 	add.w	r5, r0, #20
 8008d56:	462b      	mov	r3, r5
 8008d58:	2200      	movs	r2, #0
 8008d5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d5e:	4543      	cmp	r3, r8
 8008d60:	d321      	bcc.n	8008da6 <__multiply+0x96>
 8008d62:	f104 0314 	add.w	r3, r4, #20
 8008d66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d6a:	f109 0314 	add.w	r3, r9, #20
 8008d6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d72:	9202      	str	r2, [sp, #8]
 8008d74:	1b3a      	subs	r2, r7, r4
 8008d76:	3a15      	subs	r2, #21
 8008d78:	f022 0203 	bic.w	r2, r2, #3
 8008d7c:	3204      	adds	r2, #4
 8008d7e:	f104 0115 	add.w	r1, r4, #21
 8008d82:	428f      	cmp	r7, r1
 8008d84:	bf38      	it	cc
 8008d86:	2204      	movcc	r2, #4
 8008d88:	9201      	str	r2, [sp, #4]
 8008d8a:	9a02      	ldr	r2, [sp, #8]
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d80c      	bhi.n	8008dac <__multiply+0x9c>
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	dd03      	ble.n	8008d9e <__multiply+0x8e>
 8008d96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d059      	beq.n	8008e52 <__multiply+0x142>
 8008d9e:	6106      	str	r6, [r0, #16]
 8008da0:	b005      	add	sp, #20
 8008da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da6:	f843 2b04 	str.w	r2, [r3], #4
 8008daa:	e7d8      	b.n	8008d5e <__multiply+0x4e>
 8008dac:	f8b3 a000 	ldrh.w	sl, [r3]
 8008db0:	f1ba 0f00 	cmp.w	sl, #0
 8008db4:	d023      	beq.n	8008dfe <__multiply+0xee>
 8008db6:	46a9      	mov	r9, r5
 8008db8:	f04f 0c00 	mov.w	ip, #0
 8008dbc:	f104 0e14 	add.w	lr, r4, #20
 8008dc0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008dc4:	f8d9 1000 	ldr.w	r1, [r9]
 8008dc8:	fa1f fb82 	uxth.w	fp, r2
 8008dcc:	b289      	uxth	r1, r1
 8008dce:	fb0a 110b 	mla	r1, sl, fp, r1
 8008dd2:	4461      	add	r1, ip
 8008dd4:	f8d9 c000 	ldr.w	ip, [r9]
 8008dd8:	0c12      	lsrs	r2, r2, #16
 8008dda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dde:	fb0a c202 	mla	r2, sl, r2, ip
 8008de2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008de6:	b289      	uxth	r1, r1
 8008de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dec:	4577      	cmp	r7, lr
 8008dee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008df2:	f849 1b04 	str.w	r1, [r9], #4
 8008df6:	d8e3      	bhi.n	8008dc0 <__multiply+0xb0>
 8008df8:	9a01      	ldr	r2, [sp, #4]
 8008dfa:	f845 c002 	str.w	ip, [r5, r2]
 8008dfe:	9a03      	ldr	r2, [sp, #12]
 8008e00:	3304      	adds	r3, #4
 8008e02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e06:	f1b9 0f00 	cmp.w	r9, #0
 8008e0a:	d020      	beq.n	8008e4e <__multiply+0x13e>
 8008e0c:	46ae      	mov	lr, r5
 8008e0e:	f04f 0a00 	mov.w	sl, #0
 8008e12:	6829      	ldr	r1, [r5, #0]
 8008e14:	f104 0c14 	add.w	ip, r4, #20
 8008e18:	f8bc b000 	ldrh.w	fp, [ip]
 8008e1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e20:	b289      	uxth	r1, r1
 8008e22:	fb09 220b 	mla	r2, r9, fp, r2
 8008e26:	4492      	add	sl, r2
 8008e28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e2c:	f84e 1b04 	str.w	r1, [lr], #4
 8008e30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e34:	f8be 1000 	ldrh.w	r1, [lr]
 8008e38:	0c12      	lsrs	r2, r2, #16
 8008e3a:	fb09 1102 	mla	r1, r9, r2, r1
 8008e3e:	4567      	cmp	r7, ip
 8008e40:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e48:	d8e6      	bhi.n	8008e18 <__multiply+0x108>
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	50a9      	str	r1, [r5, r2]
 8008e4e:	3504      	adds	r5, #4
 8008e50:	e79b      	b.n	8008d8a <__multiply+0x7a>
 8008e52:	3e01      	subs	r6, #1
 8008e54:	e79d      	b.n	8008d92 <__multiply+0x82>
 8008e56:	bf00      	nop
 8008e58:	0800c3af 	.word	0x0800c3af
 8008e5c:	0800c353 	.word	0x0800c353

08008e60 <__pow5mult>:
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	4615      	mov	r5, r2
 8008e66:	f012 0203 	ands.w	r2, r2, #3
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	d007      	beq.n	8008e80 <__pow5mult+0x20>
 8008e70:	4c25      	ldr	r4, [pc, #148]	; (8008f08 <__pow5mult+0xa8>)
 8008e72:	3a01      	subs	r2, #1
 8008e74:	2300      	movs	r3, #0
 8008e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e7a:	f7ff fe9f 	bl	8008bbc <__multadd>
 8008e7e:	4607      	mov	r7, r0
 8008e80:	10ad      	asrs	r5, r5, #2
 8008e82:	d03d      	beq.n	8008f00 <__pow5mult+0xa0>
 8008e84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e86:	b97c      	cbnz	r4, 8008ea8 <__pow5mult+0x48>
 8008e88:	2010      	movs	r0, #16
 8008e8a:	f001 f93d 	bl	800a108 <malloc>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6270      	str	r0, [r6, #36]	; 0x24
 8008e92:	b928      	cbnz	r0, 8008ea0 <__pow5mult+0x40>
 8008e94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <__pow5mult+0xac>)
 8008e9a:	481d      	ldr	r0, [pc, #116]	; (8008f10 <__pow5mult+0xb0>)
 8008e9c:	f000 fa8a 	bl	80093b4 <__assert_func>
 8008ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ea4:	6004      	str	r4, [r0, #0]
 8008ea6:	60c4      	str	r4, [r0, #12]
 8008ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008eb0:	b94c      	cbnz	r4, 8008ec6 <__pow5mult+0x66>
 8008eb2:	f240 2171 	movw	r1, #625	; 0x271
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ff14 	bl	8008ce4 <__i2b>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	f04f 0900 	mov.w	r9, #0
 8008eca:	07eb      	lsls	r3, r5, #31
 8008ecc:	d50a      	bpl.n	8008ee4 <__pow5mult+0x84>
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff1c 	bl	8008d10 <__multiply>
 8008ed8:	4680      	mov	r8, r0
 8008eda:	4639      	mov	r1, r7
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff fe4b 	bl	8008b78 <_Bfree>
 8008ee2:	4647      	mov	r7, r8
 8008ee4:	106d      	asrs	r5, r5, #1
 8008ee6:	d00b      	beq.n	8008f00 <__pow5mult+0xa0>
 8008ee8:	6820      	ldr	r0, [r4, #0]
 8008eea:	b938      	cbnz	r0, 8008efc <__pow5mult+0x9c>
 8008eec:	4622      	mov	r2, r4
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7ff ff0d 	bl	8008d10 <__multiply>
 8008ef6:	6020      	str	r0, [r4, #0]
 8008ef8:	f8c0 9000 	str.w	r9, [r0]
 8008efc:	4604      	mov	r4, r0
 8008efe:	e7e4      	b.n	8008eca <__pow5mult+0x6a>
 8008f00:	4638      	mov	r0, r7
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f06:	bf00      	nop
 8008f08:	0800c4b0 	.word	0x0800c4b0
 8008f0c:	0800c33c 	.word	0x0800c33c
 8008f10:	0800c353 	.word	0x0800c353

08008f14 <__lshift>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	460c      	mov	r4, r1
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	4691      	mov	r9, r2
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	6849      	ldr	r1, [r1, #4]
 8008f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f2c:	f108 0601 	add.w	r6, r8, #1
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	db0b      	blt.n	8008f4c <__lshift+0x38>
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff fddf 	bl	8008af8 <_Balloc>
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	b948      	cbnz	r0, 8008f52 <__lshift+0x3e>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f44:	4b29      	ldr	r3, [pc, #164]	; (8008fec <__lshift+0xd8>)
 8008f46:	482a      	ldr	r0, [pc, #168]	; (8008ff0 <__lshift+0xdc>)
 8008f48:	f000 fa34 	bl	80093b4 <__assert_func>
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	e7ee      	b.n	8008f30 <__lshift+0x1c>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f100 0114 	add.w	r1, r0, #20
 8008f58:	f100 0210 	add.w	r2, r0, #16
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	4553      	cmp	r3, sl
 8008f60:	db37      	blt.n	8008fd2 <__lshift+0xbe>
 8008f62:	6920      	ldr	r0, [r4, #16]
 8008f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f68:	f104 0314 	add.w	r3, r4, #20
 8008f6c:	f019 091f 	ands.w	r9, r9, #31
 8008f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f78:	d02f      	beq.n	8008fda <__lshift+0xc6>
 8008f7a:	468a      	mov	sl, r1
 8008f7c:	f04f 0c00 	mov.w	ip, #0
 8008f80:	f1c9 0e20 	rsb	lr, r9, #32
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	fa02 f209 	lsl.w	r2, r2, r9
 8008f8a:	ea42 020c 	orr.w	r2, r2, ip
 8008f8e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	4298      	cmp	r0, r3
 8008f98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f9c:	d8f2      	bhi.n	8008f84 <__lshift+0x70>
 8008f9e:	1b03      	subs	r3, r0, r4
 8008fa0:	3b15      	subs	r3, #21
 8008fa2:	f023 0303 	bic.w	r3, r3, #3
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	f104 0215 	add.w	r2, r4, #21
 8008fac:	4290      	cmp	r0, r2
 8008fae:	bf38      	it	cc
 8008fb0:	2304      	movcc	r3, #4
 8008fb2:	f841 c003 	str.w	ip, [r1, r3]
 8008fb6:	f1bc 0f00 	cmp.w	ip, #0
 8008fba:	d001      	beq.n	8008fc0 <__lshift+0xac>
 8008fbc:	f108 0602 	add.w	r6, r8, #2
 8008fc0:	3e01      	subs	r6, #1
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	612e      	str	r6, [r5, #16]
 8008fc8:	f7ff fdd6 	bl	8008b78 <_Bfree>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	e7c1      	b.n	8008f5e <__lshift+0x4a>
 8008fda:	3904      	subs	r1, #4
 8008fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fe6:	d8f9      	bhi.n	8008fdc <__lshift+0xc8>
 8008fe8:	e7ea      	b.n	8008fc0 <__lshift+0xac>
 8008fea:	bf00      	nop
 8008fec:	0800c3af 	.word	0x0800c3af
 8008ff0:	0800c353 	.word	0x0800c353

08008ff4 <__mcmp>:
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	690a      	ldr	r2, [r1, #16]
 8008ff8:	6900      	ldr	r0, [r0, #16]
 8008ffa:	b530      	push	{r4, r5, lr}
 8008ffc:	1a80      	subs	r0, r0, r2
 8008ffe:	d10d      	bne.n	800901c <__mcmp+0x28>
 8009000:	3314      	adds	r3, #20
 8009002:	3114      	adds	r1, #20
 8009004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800900c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009014:	4295      	cmp	r5, r2
 8009016:	d002      	beq.n	800901e <__mcmp+0x2a>
 8009018:	d304      	bcc.n	8009024 <__mcmp+0x30>
 800901a:	2001      	movs	r0, #1
 800901c:	bd30      	pop	{r4, r5, pc}
 800901e:	42a3      	cmp	r3, r4
 8009020:	d3f4      	bcc.n	800900c <__mcmp+0x18>
 8009022:	e7fb      	b.n	800901c <__mcmp+0x28>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e7f8      	b.n	800901c <__mcmp+0x28>
	...

0800902c <__mdiff>:
 800902c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	460d      	mov	r5, r1
 8009032:	4607      	mov	r7, r0
 8009034:	4611      	mov	r1, r2
 8009036:	4628      	mov	r0, r5
 8009038:	4614      	mov	r4, r2
 800903a:	f7ff ffdb 	bl	8008ff4 <__mcmp>
 800903e:	1e06      	subs	r6, r0, #0
 8009040:	d111      	bne.n	8009066 <__mdiff+0x3a>
 8009042:	4631      	mov	r1, r6
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fd57 	bl	8008af8 <_Balloc>
 800904a:	4602      	mov	r2, r0
 800904c:	b928      	cbnz	r0, 800905a <__mdiff+0x2e>
 800904e:	f240 2132 	movw	r1, #562	; 0x232
 8009052:	4b3a      	ldr	r3, [pc, #232]	; (800913c <__mdiff+0x110>)
 8009054:	483a      	ldr	r0, [pc, #232]	; (8009140 <__mdiff+0x114>)
 8009056:	f000 f9ad 	bl	80093b4 <__assert_func>
 800905a:	2301      	movs	r3, #1
 800905c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009060:	4610      	mov	r0, r2
 8009062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009066:	bfa4      	itt	ge
 8009068:	4623      	movge	r3, r4
 800906a:	462c      	movge	r4, r5
 800906c:	4638      	mov	r0, r7
 800906e:	6861      	ldr	r1, [r4, #4]
 8009070:	bfa6      	itte	ge
 8009072:	461d      	movge	r5, r3
 8009074:	2600      	movge	r6, #0
 8009076:	2601      	movlt	r6, #1
 8009078:	f7ff fd3e 	bl	8008af8 <_Balloc>
 800907c:	4602      	mov	r2, r0
 800907e:	b918      	cbnz	r0, 8009088 <__mdiff+0x5c>
 8009080:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009084:	4b2d      	ldr	r3, [pc, #180]	; (800913c <__mdiff+0x110>)
 8009086:	e7e5      	b.n	8009054 <__mdiff+0x28>
 8009088:	f102 0814 	add.w	r8, r2, #20
 800908c:	46c2      	mov	sl, r8
 800908e:	f04f 0c00 	mov.w	ip, #0
 8009092:	6927      	ldr	r7, [r4, #16]
 8009094:	60c6      	str	r6, [r0, #12]
 8009096:	692e      	ldr	r6, [r5, #16]
 8009098:	f104 0014 	add.w	r0, r4, #20
 800909c:	f105 0914 	add.w	r9, r5, #20
 80090a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80090a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090a8:	3410      	adds	r4, #16
 80090aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80090ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80090b2:	fa1f f18b 	uxth.w	r1, fp
 80090b6:	448c      	add	ip, r1
 80090b8:	b299      	uxth	r1, r3
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	ebac 0101 	sub.w	r1, ip, r1
 80090c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090c8:	b289      	uxth	r1, r1
 80090ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80090ce:	454e      	cmp	r6, r9
 80090d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090d4:	f84a 3b04 	str.w	r3, [sl], #4
 80090d8:	d8e7      	bhi.n	80090aa <__mdiff+0x7e>
 80090da:	1b73      	subs	r3, r6, r5
 80090dc:	3b15      	subs	r3, #21
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	3515      	adds	r5, #21
 80090e4:	3304      	adds	r3, #4
 80090e6:	42ae      	cmp	r6, r5
 80090e8:	bf38      	it	cc
 80090ea:	2304      	movcc	r3, #4
 80090ec:	4418      	add	r0, r3
 80090ee:	4443      	add	r3, r8
 80090f0:	461e      	mov	r6, r3
 80090f2:	4605      	mov	r5, r0
 80090f4:	4575      	cmp	r5, lr
 80090f6:	d30e      	bcc.n	8009116 <__mdiff+0xea>
 80090f8:	f10e 0103 	add.w	r1, lr, #3
 80090fc:	1a09      	subs	r1, r1, r0
 80090fe:	f021 0103 	bic.w	r1, r1, #3
 8009102:	3803      	subs	r0, #3
 8009104:	4586      	cmp	lr, r0
 8009106:	bf38      	it	cc
 8009108:	2100      	movcc	r1, #0
 800910a:	4419      	add	r1, r3
 800910c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009110:	b18b      	cbz	r3, 8009136 <__mdiff+0x10a>
 8009112:	6117      	str	r7, [r2, #16]
 8009114:	e7a4      	b.n	8009060 <__mdiff+0x34>
 8009116:	f855 8b04 	ldr.w	r8, [r5], #4
 800911a:	fa1f f188 	uxth.w	r1, r8
 800911e:	4461      	add	r1, ip
 8009120:	140c      	asrs	r4, r1, #16
 8009122:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009126:	b289      	uxth	r1, r1
 8009128:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800912c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009130:	f846 1b04 	str.w	r1, [r6], #4
 8009134:	e7de      	b.n	80090f4 <__mdiff+0xc8>
 8009136:	3f01      	subs	r7, #1
 8009138:	e7e8      	b.n	800910c <__mdiff+0xe0>
 800913a:	bf00      	nop
 800913c:	0800c3af 	.word	0x0800c3af
 8009140:	0800c353 	.word	0x0800c353

08009144 <__d2b>:
 8009144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009148:	2101      	movs	r1, #1
 800914a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800914e:	4690      	mov	r8, r2
 8009150:	461d      	mov	r5, r3
 8009152:	f7ff fcd1 	bl	8008af8 <_Balloc>
 8009156:	4604      	mov	r4, r0
 8009158:	b930      	cbnz	r0, 8009168 <__d2b+0x24>
 800915a:	4602      	mov	r2, r0
 800915c:	f240 310a 	movw	r1, #778	; 0x30a
 8009160:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <__d2b+0xb0>)
 8009162:	4825      	ldr	r0, [pc, #148]	; (80091f8 <__d2b+0xb4>)
 8009164:	f000 f926 	bl	80093b4 <__assert_func>
 8009168:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800916c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009170:	bb2d      	cbnz	r5, 80091be <__d2b+0x7a>
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	f1b8 0300 	subs.w	r3, r8, #0
 8009178:	d026      	beq.n	80091c8 <__d2b+0x84>
 800917a:	4668      	mov	r0, sp
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	f7ff fd83 	bl	8008c88 <__lo0bits>
 8009182:	9900      	ldr	r1, [sp, #0]
 8009184:	b1f0      	cbz	r0, 80091c4 <__d2b+0x80>
 8009186:	9a01      	ldr	r2, [sp, #4]
 8009188:	f1c0 0320 	rsb	r3, r0, #32
 800918c:	fa02 f303 	lsl.w	r3, r2, r3
 8009190:	430b      	orrs	r3, r1
 8009192:	40c2      	lsrs	r2, r0
 8009194:	6163      	str	r3, [r4, #20]
 8009196:	9201      	str	r2, [sp, #4]
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf14      	ite	ne
 800919e:	2102      	movne	r1, #2
 80091a0:	2101      	moveq	r1, #1
 80091a2:	61a3      	str	r3, [r4, #24]
 80091a4:	6121      	str	r1, [r4, #16]
 80091a6:	b1c5      	cbz	r5, 80091da <__d2b+0x96>
 80091a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091ac:	4405      	add	r5, r0
 80091ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091b2:	603d      	str	r5, [r7, #0]
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4620      	mov	r0, r4
 80091b8:	b002      	add	sp, #8
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091c2:	e7d6      	b.n	8009172 <__d2b+0x2e>
 80091c4:	6161      	str	r1, [r4, #20]
 80091c6:	e7e7      	b.n	8009198 <__d2b+0x54>
 80091c8:	a801      	add	r0, sp, #4
 80091ca:	f7ff fd5d 	bl	8008c88 <__lo0bits>
 80091ce:	2101      	movs	r1, #1
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	6121      	str	r1, [r4, #16]
 80091d4:	6163      	str	r3, [r4, #20]
 80091d6:	3020      	adds	r0, #32
 80091d8:	e7e5      	b.n	80091a6 <__d2b+0x62>
 80091da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091e2:	6038      	str	r0, [r7, #0]
 80091e4:	6918      	ldr	r0, [r3, #16]
 80091e6:	f7ff fd2f 	bl	8008c48 <__hi0bits>
 80091ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80091ee:	6031      	str	r1, [r6, #0]
 80091f0:	e7e1      	b.n	80091b6 <__d2b+0x72>
 80091f2:	bf00      	nop
 80091f4:	0800c3af 	.word	0x0800c3af
 80091f8:	0800c353 	.word	0x0800c353

080091fc <_mprec_log10>:
 80091fc:	2817      	cmp	r0, #23
 80091fe:	b5d0      	push	{r4, r6, r7, lr}
 8009200:	4604      	mov	r4, r0
 8009202:	dc05      	bgt.n	8009210 <_mprec_log10+0x14>
 8009204:	4808      	ldr	r0, [pc, #32]	; (8009228 <_mprec_log10+0x2c>)
 8009206:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800920a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800920e:	bdd0      	pop	{r4, r6, r7, pc}
 8009210:	2000      	movs	r0, #0
 8009212:	2600      	movs	r6, #0
 8009214:	4905      	ldr	r1, [pc, #20]	; (800922c <_mprec_log10+0x30>)
 8009216:	4f06      	ldr	r7, [pc, #24]	; (8009230 <_mprec_log10+0x34>)
 8009218:	4632      	mov	r2, r6
 800921a:	463b      	mov	r3, r7
 800921c:	f7f7 f95c 	bl	80004d8 <__aeabi_dmul>
 8009220:	3c01      	subs	r4, #1
 8009222:	d1f9      	bne.n	8009218 <_mprec_log10+0x1c>
 8009224:	e7f3      	b.n	800920e <_mprec_log10+0x12>
 8009226:	bf00      	nop
 8009228:	0800c3e8 	.word	0x0800c3e8
 800922c:	3ff00000 	.word	0x3ff00000
 8009230:	40240000 	.word	0x40240000

08009234 <_calloc_r>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	fba1 5402 	umull	r5, r4, r1, r2
 800923a:	b934      	cbnz	r4, 800924a <_calloc_r+0x16>
 800923c:	4629      	mov	r1, r5
 800923e:	f000 f82d 	bl	800929c <_malloc_r>
 8009242:	4606      	mov	r6, r0
 8009244:	b928      	cbnz	r0, 8009252 <_calloc_r+0x1e>
 8009246:	4630      	mov	r0, r6
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	220c      	movs	r2, #12
 800924c:	2600      	movs	r6, #0
 800924e:	6002      	str	r2, [r0, #0]
 8009250:	e7f9      	b.n	8009246 <_calloc_r+0x12>
 8009252:	462a      	mov	r2, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff fb0d 	bl	8008874 <memset>
 800925a:	e7f4      	b.n	8009246 <_calloc_r+0x12>

0800925c <sbrk_aligned>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	4e0e      	ldr	r6, [pc, #56]	; (8009298 <sbrk_aligned+0x3c>)
 8009260:	460c      	mov	r4, r1
 8009262:	6831      	ldr	r1, [r6, #0]
 8009264:	4605      	mov	r5, r0
 8009266:	b911      	cbnz	r1, 800926e <sbrk_aligned+0x12>
 8009268:	f000 f88c 	bl	8009384 <_sbrk_r>
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f887 	bl	8009384 <_sbrk_r>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d00a      	beq.n	8009290 <sbrk_aligned+0x34>
 800927a:	1cc4      	adds	r4, r0, #3
 800927c:	f024 0403 	bic.w	r4, r4, #3
 8009280:	42a0      	cmp	r0, r4
 8009282:	d007      	beq.n	8009294 <sbrk_aligned+0x38>
 8009284:	1a21      	subs	r1, r4, r0
 8009286:	4628      	mov	r0, r5
 8009288:	f000 f87c 	bl	8009384 <_sbrk_r>
 800928c:	3001      	adds	r0, #1
 800928e:	d101      	bne.n	8009294 <sbrk_aligned+0x38>
 8009290:	f04f 34ff 	mov.w	r4, #4294967295
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	200024b4 	.word	0x200024b4

0800929c <_malloc_r>:
 800929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	1ccd      	adds	r5, r1, #3
 80092a2:	f025 0503 	bic.w	r5, r5, #3
 80092a6:	3508      	adds	r5, #8
 80092a8:	2d0c      	cmp	r5, #12
 80092aa:	bf38      	it	cc
 80092ac:	250c      	movcc	r5, #12
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	4607      	mov	r7, r0
 80092b2:	db01      	blt.n	80092b8 <_malloc_r+0x1c>
 80092b4:	42a9      	cmp	r1, r5
 80092b6:	d905      	bls.n	80092c4 <_malloc_r+0x28>
 80092b8:	230c      	movs	r3, #12
 80092ba:	2600      	movs	r6, #0
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	4630      	mov	r0, r6
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	4e2e      	ldr	r6, [pc, #184]	; (8009380 <_malloc_r+0xe4>)
 80092c6:	f000 ff35 	bl	800a134 <__malloc_lock>
 80092ca:	6833      	ldr	r3, [r6, #0]
 80092cc:	461c      	mov	r4, r3
 80092ce:	bb34      	cbnz	r4, 800931e <_malloc_r+0x82>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7ff ffc2 	bl	800925c <sbrk_aligned>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	4604      	mov	r4, r0
 80092dc:	d14d      	bne.n	800937a <_malloc_r+0xde>
 80092de:	6834      	ldr	r4, [r6, #0]
 80092e0:	4626      	mov	r6, r4
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d140      	bne.n	8009368 <_malloc_r+0xcc>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	4631      	mov	r1, r6
 80092ea:	4638      	mov	r0, r7
 80092ec:	eb04 0803 	add.w	r8, r4, r3
 80092f0:	f000 f848 	bl	8009384 <_sbrk_r>
 80092f4:	4580      	cmp	r8, r0
 80092f6:	d13a      	bne.n	800936e <_malloc_r+0xd2>
 80092f8:	6821      	ldr	r1, [r4, #0]
 80092fa:	3503      	adds	r5, #3
 80092fc:	1a6d      	subs	r5, r5, r1
 80092fe:	f025 0503 	bic.w	r5, r5, #3
 8009302:	3508      	adds	r5, #8
 8009304:	2d0c      	cmp	r5, #12
 8009306:	bf38      	it	cc
 8009308:	250c      	movcc	r5, #12
 800930a:	4638      	mov	r0, r7
 800930c:	4629      	mov	r1, r5
 800930e:	f7ff ffa5 	bl	800925c <sbrk_aligned>
 8009312:	3001      	adds	r0, #1
 8009314:	d02b      	beq.n	800936e <_malloc_r+0xd2>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	442b      	add	r3, r5
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	e00e      	b.n	800933c <_malloc_r+0xa0>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	1b52      	subs	r2, r2, r5
 8009322:	d41e      	bmi.n	8009362 <_malloc_r+0xc6>
 8009324:	2a0b      	cmp	r2, #11
 8009326:	d916      	bls.n	8009356 <_malloc_r+0xba>
 8009328:	1961      	adds	r1, r4, r5
 800932a:	42a3      	cmp	r3, r4
 800932c:	6025      	str	r5, [r4, #0]
 800932e:	bf18      	it	ne
 8009330:	6059      	strne	r1, [r3, #4]
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	bf08      	it	eq
 8009336:	6031      	streq	r1, [r6, #0]
 8009338:	5162      	str	r2, [r4, r5]
 800933a:	604b      	str	r3, [r1, #4]
 800933c:	4638      	mov	r0, r7
 800933e:	f104 060b 	add.w	r6, r4, #11
 8009342:	f000 fefd 	bl	800a140 <__malloc_unlock>
 8009346:	f026 0607 	bic.w	r6, r6, #7
 800934a:	1d23      	adds	r3, r4, #4
 800934c:	1af2      	subs	r2, r6, r3
 800934e:	d0b6      	beq.n	80092be <_malloc_r+0x22>
 8009350:	1b9b      	subs	r3, r3, r6
 8009352:	50a3      	str	r3, [r4, r2]
 8009354:	e7b3      	b.n	80092be <_malloc_r+0x22>
 8009356:	6862      	ldr	r2, [r4, #4]
 8009358:	42a3      	cmp	r3, r4
 800935a:	bf0c      	ite	eq
 800935c:	6032      	streq	r2, [r6, #0]
 800935e:	605a      	strne	r2, [r3, #4]
 8009360:	e7ec      	b.n	800933c <_malloc_r+0xa0>
 8009362:	4623      	mov	r3, r4
 8009364:	6864      	ldr	r4, [r4, #4]
 8009366:	e7b2      	b.n	80092ce <_malloc_r+0x32>
 8009368:	4634      	mov	r4, r6
 800936a:	6876      	ldr	r6, [r6, #4]
 800936c:	e7b9      	b.n	80092e2 <_malloc_r+0x46>
 800936e:	230c      	movs	r3, #12
 8009370:	4638      	mov	r0, r7
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	f000 fee4 	bl	800a140 <__malloc_unlock>
 8009378:	e7a1      	b.n	80092be <_malloc_r+0x22>
 800937a:	6025      	str	r5, [r4, #0]
 800937c:	e7de      	b.n	800933c <_malloc_r+0xa0>
 800937e:	bf00      	nop
 8009380:	200024b0 	.word	0x200024b0

08009384 <_sbrk_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	2300      	movs	r3, #0
 8009388:	4d05      	ldr	r5, [pc, #20]	; (80093a0 <_sbrk_r+0x1c>)
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	602b      	str	r3, [r5, #0]
 8009390:	f7f9 f9f0 	bl	8002774 <_sbrk>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_sbrk_r+0x1a>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_sbrk_r+0x1a>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	200024b8 	.word	0x200024b8

080093a4 <strcpy>:
 80093a4:	4603      	mov	r3, r0
 80093a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093aa:	f803 2b01 	strb.w	r2, [r3], #1
 80093ae:	2a00      	cmp	r2, #0
 80093b0:	d1f9      	bne.n	80093a6 <strcpy+0x2>
 80093b2:	4770      	bx	lr

080093b4 <__assert_func>:
 80093b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093b6:	4614      	mov	r4, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <__assert_func+0x2c>)
 80093bc:	4605      	mov	r5, r0
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68d8      	ldr	r0, [r3, #12]
 80093c2:	b14c      	cbz	r4, 80093d8 <__assert_func+0x24>
 80093c4:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <__assert_func+0x30>)
 80093c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093ca:	9100      	str	r1, [sp, #0]
 80093cc:	462b      	mov	r3, r5
 80093ce:	4906      	ldr	r1, [pc, #24]	; (80093e8 <__assert_func+0x34>)
 80093d0:	f000 fe88 	bl	800a0e4 <fiprintf>
 80093d4:	f001 fab0 	bl	800a938 <abort>
 80093d8:	4b04      	ldr	r3, [pc, #16]	; (80093ec <__assert_func+0x38>)
 80093da:	461c      	mov	r4, r3
 80093dc:	e7f3      	b.n	80093c6 <__assert_func+0x12>
 80093de:	bf00      	nop
 80093e0:	20000024 	.word	0x20000024
 80093e4:	0800c4bc 	.word	0x0800c4bc
 80093e8:	0800c4c9 	.word	0x0800c4c9
 80093ec:	0800c4f7 	.word	0x0800c4f7

080093f0 <quorem>:
 80093f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	6903      	ldr	r3, [r0, #16]
 80093f6:	690c      	ldr	r4, [r1, #16]
 80093f8:	4607      	mov	r7, r0
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	f2c0 8082 	blt.w	8009504 <quorem+0x114>
 8009400:	3c01      	subs	r4, #1
 8009402:	f100 0514 	add.w	r5, r0, #20
 8009406:	f101 0814 	add.w	r8, r1, #20
 800940a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009418:	3301      	adds	r3, #1
 800941a:	429a      	cmp	r2, r3
 800941c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009420:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009424:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009428:	d331      	bcc.n	800948e <quorem+0x9e>
 800942a:	f04f 0e00 	mov.w	lr, #0
 800942e:	4640      	mov	r0, r8
 8009430:	46ac      	mov	ip, r5
 8009432:	46f2      	mov	sl, lr
 8009434:	f850 2b04 	ldr.w	r2, [r0], #4
 8009438:	b293      	uxth	r3, r2
 800943a:	fb06 e303 	mla	r3, r6, r3, lr
 800943e:	0c12      	lsrs	r2, r2, #16
 8009440:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009444:	b29b      	uxth	r3, r3
 8009446:	fb06 e202 	mla	r2, r6, r2, lr
 800944a:	ebaa 0303 	sub.w	r3, sl, r3
 800944e:	f8dc a000 	ldr.w	sl, [ip]
 8009452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009456:	fa1f fa8a 	uxth.w	sl, sl
 800945a:	4453      	add	r3, sl
 800945c:	f8dc a000 	ldr.w	sl, [ip]
 8009460:	b292      	uxth	r2, r2
 8009462:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009466:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800946a:	b29b      	uxth	r3, r3
 800946c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009470:	4581      	cmp	r9, r0
 8009472:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009476:	f84c 3b04 	str.w	r3, [ip], #4
 800947a:	d2db      	bcs.n	8009434 <quorem+0x44>
 800947c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009480:	b92b      	cbnz	r3, 800948e <quorem+0x9e>
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	3b04      	subs	r3, #4
 8009486:	429d      	cmp	r5, r3
 8009488:	461a      	mov	r2, r3
 800948a:	d32f      	bcc.n	80094ec <quorem+0xfc>
 800948c:	613c      	str	r4, [r7, #16]
 800948e:	4638      	mov	r0, r7
 8009490:	f7ff fdb0 	bl	8008ff4 <__mcmp>
 8009494:	2800      	cmp	r0, #0
 8009496:	db25      	blt.n	80094e4 <quorem+0xf4>
 8009498:	4628      	mov	r0, r5
 800949a:	f04f 0c00 	mov.w	ip, #0
 800949e:	3601      	adds	r6, #1
 80094a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80094a4:	f8d0 e000 	ldr.w	lr, [r0]
 80094a8:	b28b      	uxth	r3, r1
 80094aa:	ebac 0303 	sub.w	r3, ip, r3
 80094ae:	fa1f f28e 	uxth.w	r2, lr
 80094b2:	4413      	add	r3, r2
 80094b4:	0c0a      	lsrs	r2, r1, #16
 80094b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094be:	b29b      	uxth	r3, r3
 80094c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094c4:	45c1      	cmp	r9, r8
 80094c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094ca:	f840 3b04 	str.w	r3, [r0], #4
 80094ce:	d2e7      	bcs.n	80094a0 <quorem+0xb0>
 80094d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094d8:	b922      	cbnz	r2, 80094e4 <quorem+0xf4>
 80094da:	3b04      	subs	r3, #4
 80094dc:	429d      	cmp	r5, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	d30a      	bcc.n	80094f8 <quorem+0x108>
 80094e2:	613c      	str	r4, [r7, #16]
 80094e4:	4630      	mov	r0, r6
 80094e6:	b003      	add	sp, #12
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	3b04      	subs	r3, #4
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d1cb      	bne.n	800948c <quorem+0x9c>
 80094f4:	3c01      	subs	r4, #1
 80094f6:	e7c6      	b.n	8009486 <quorem+0x96>
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	3b04      	subs	r3, #4
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	d1f0      	bne.n	80094e2 <quorem+0xf2>
 8009500:	3c01      	subs	r4, #1
 8009502:	e7eb      	b.n	80094dc <quorem+0xec>
 8009504:	2000      	movs	r0, #0
 8009506:	e7ee      	b.n	80094e6 <quorem+0xf6>

08009508 <_dtoa_r>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	4616      	mov	r6, r2
 800950e:	461f      	mov	r7, r3
 8009510:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009512:	b099      	sub	sp, #100	; 0x64
 8009514:	4605      	mov	r5, r0
 8009516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800951a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800951e:	b974      	cbnz	r4, 800953e <_dtoa_r+0x36>
 8009520:	2010      	movs	r0, #16
 8009522:	f000 fdf1 	bl	800a108 <malloc>
 8009526:	4602      	mov	r2, r0
 8009528:	6268      	str	r0, [r5, #36]	; 0x24
 800952a:	b920      	cbnz	r0, 8009536 <_dtoa_r+0x2e>
 800952c:	21ea      	movs	r1, #234	; 0xea
 800952e:	4ba8      	ldr	r3, [pc, #672]	; (80097d0 <_dtoa_r+0x2c8>)
 8009530:	48a8      	ldr	r0, [pc, #672]	; (80097d4 <_dtoa_r+0x2cc>)
 8009532:	f7ff ff3f 	bl	80093b4 <__assert_func>
 8009536:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800953a:	6004      	str	r4, [r0, #0]
 800953c:	60c4      	str	r4, [r0, #12]
 800953e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	b151      	cbz	r1, 800955a <_dtoa_r+0x52>
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	2301      	movs	r3, #1
 8009548:	4093      	lsls	r3, r2
 800954a:	604a      	str	r2, [r1, #4]
 800954c:	608b      	str	r3, [r1, #8]
 800954e:	4628      	mov	r0, r5
 8009550:	f7ff fb12 	bl	8008b78 <_Bfree>
 8009554:	2200      	movs	r2, #0
 8009556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	1e3b      	subs	r3, r7, #0
 800955c:	bfaf      	iteee	ge
 800955e:	2300      	movge	r3, #0
 8009560:	2201      	movlt	r2, #1
 8009562:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009566:	9305      	strlt	r3, [sp, #20]
 8009568:	bfa8      	it	ge
 800956a:	f8c8 3000 	strge.w	r3, [r8]
 800956e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009572:	4b99      	ldr	r3, [pc, #612]	; (80097d8 <_dtoa_r+0x2d0>)
 8009574:	bfb8      	it	lt
 8009576:	f8c8 2000 	strlt.w	r2, [r8]
 800957a:	ea33 0309 	bics.w	r3, r3, r9
 800957e:	d119      	bne.n	80095b4 <_dtoa_r+0xac>
 8009580:	f242 730f 	movw	r3, #9999	; 0x270f
 8009584:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800958c:	4333      	orrs	r3, r6
 800958e:	f000 857f 	beq.w	800a090 <_dtoa_r+0xb88>
 8009592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009594:	b953      	cbnz	r3, 80095ac <_dtoa_r+0xa4>
 8009596:	4b91      	ldr	r3, [pc, #580]	; (80097dc <_dtoa_r+0x2d4>)
 8009598:	e022      	b.n	80095e0 <_dtoa_r+0xd8>
 800959a:	4b91      	ldr	r3, [pc, #580]	; (80097e0 <_dtoa_r+0x2d8>)
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	3308      	adds	r3, #8
 80095a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	9803      	ldr	r0, [sp, #12]
 80095a6:	b019      	add	sp, #100	; 0x64
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	4b8b      	ldr	r3, [pc, #556]	; (80097dc <_dtoa_r+0x2d4>)
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	3303      	adds	r3, #3
 80095b2:	e7f5      	b.n	80095a0 <_dtoa_r+0x98>
 80095b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80095b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80095bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095c0:	2200      	movs	r2, #0
 80095c2:	2300      	movs	r3, #0
 80095c4:	f7f7 f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80095c8:	4680      	mov	r8, r0
 80095ca:	b158      	cbz	r0, 80095e4 <_dtoa_r+0xdc>
 80095cc:	2301      	movs	r3, #1
 80095ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8558 	beq.w	800a08a <_dtoa_r+0xb82>
 80095da:	4882      	ldr	r0, [pc, #520]	; (80097e4 <_dtoa_r+0x2dc>)
 80095dc:	6018      	str	r0, [r3, #0]
 80095de:	1e43      	subs	r3, r0, #1
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	e7df      	b.n	80095a4 <_dtoa_r+0x9c>
 80095e4:	ab16      	add	r3, sp, #88	; 0x58
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	ab17      	add	r3, sp, #92	; 0x5c
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4628      	mov	r0, r5
 80095ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095f2:	f7ff fda7 	bl	8009144 <__d2b>
 80095f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80095fa:	4683      	mov	fp, r0
 80095fc:	2c00      	cmp	r4, #0
 80095fe:	d07f      	beq.n	8009700 <_dtoa_r+0x1f8>
 8009600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009606:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800960a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800960e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009612:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009616:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800961a:	2200      	movs	r2, #0
 800961c:	4b72      	ldr	r3, [pc, #456]	; (80097e8 <_dtoa_r+0x2e0>)
 800961e:	f7f6 fda3 	bl	8000168 <__aeabi_dsub>
 8009622:	a365      	add	r3, pc, #404	; (adr r3, 80097b8 <_dtoa_r+0x2b0>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 ff56 	bl	80004d8 <__aeabi_dmul>
 800962c:	a364      	add	r3, pc, #400	; (adr r3, 80097c0 <_dtoa_r+0x2b8>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fd9b 	bl	800016c <__adddf3>
 8009636:	4606      	mov	r6, r0
 8009638:	4620      	mov	r0, r4
 800963a:	460f      	mov	r7, r1
 800963c:	f7f6 fee2 	bl	8000404 <__aeabi_i2d>
 8009640:	a361      	add	r3, pc, #388	; (adr r3, 80097c8 <_dtoa_r+0x2c0>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ff47 	bl	80004d8 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4630      	mov	r0, r6
 8009650:	4639      	mov	r1, r7
 8009652:	f7f6 fd8b 	bl	800016c <__adddf3>
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	f7f7 f9ed 	bl	8000a38 <__aeabi_d2iz>
 800965e:	2200      	movs	r2, #0
 8009660:	4682      	mov	sl, r0
 8009662:	2300      	movs	r3, #0
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f7 f9a8 	bl	80009bc <__aeabi_dcmplt>
 800966c:	b148      	cbz	r0, 8009682 <_dtoa_r+0x17a>
 800966e:	4650      	mov	r0, sl
 8009670:	f7f6 fec8 	bl	8000404 <__aeabi_i2d>
 8009674:	4632      	mov	r2, r6
 8009676:	463b      	mov	r3, r7
 8009678:	f7f7 f996 	bl	80009a8 <__aeabi_dcmpeq>
 800967c:	b908      	cbnz	r0, 8009682 <_dtoa_r+0x17a>
 800967e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009682:	f1ba 0f16 	cmp.w	sl, #22
 8009686:	d858      	bhi.n	800973a <_dtoa_r+0x232>
 8009688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800968c:	4b57      	ldr	r3, [pc, #348]	; (80097ec <_dtoa_r+0x2e4>)
 800968e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f7 f991 	bl	80009bc <__aeabi_dcmplt>
 800969a:	2800      	cmp	r0, #0
 800969c:	d04f      	beq.n	800973e <_dtoa_r+0x236>
 800969e:	2300      	movs	r3, #0
 80096a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80096a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80096a8:	1b1c      	subs	r4, r3, r4
 80096aa:	1e63      	subs	r3, r4, #1
 80096ac:	9309      	str	r3, [sp, #36]	; 0x24
 80096ae:	bf49      	itett	mi
 80096b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80096b4:	2300      	movpl	r3, #0
 80096b6:	9306      	strmi	r3, [sp, #24]
 80096b8:	2300      	movmi	r3, #0
 80096ba:	bf54      	ite	pl
 80096bc:	9306      	strpl	r3, [sp, #24]
 80096be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80096c0:	f1ba 0f00 	cmp.w	sl, #0
 80096c4:	db3d      	blt.n	8009742 <_dtoa_r+0x23a>
 80096c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80096cc:	4453      	add	r3, sl
 80096ce:	9309      	str	r3, [sp, #36]	; 0x24
 80096d0:	2300      	movs	r3, #0
 80096d2:	930a      	str	r3, [sp, #40]	; 0x28
 80096d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	f200 808c 	bhi.w	80097f4 <_dtoa_r+0x2ec>
 80096dc:	2b05      	cmp	r3, #5
 80096de:	bfc4      	itt	gt
 80096e0:	3b04      	subgt	r3, #4
 80096e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80096e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096e6:	bfc8      	it	gt
 80096e8:	2400      	movgt	r4, #0
 80096ea:	f1a3 0302 	sub.w	r3, r3, #2
 80096ee:	bfd8      	it	le
 80096f0:	2401      	movle	r4, #1
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	f200 808a 	bhi.w	800980c <_dtoa_r+0x304>
 80096f8:	e8df f003 	tbb	[pc, r3]
 80096fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8009700:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009704:	441c      	add	r4, r3
 8009706:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800970a:	2b20      	cmp	r3, #32
 800970c:	bfc3      	ittte	gt
 800970e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009712:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009716:	fa09 f303 	lslgt.w	r3, r9, r3
 800971a:	f1c3 0320 	rsble	r3, r3, #32
 800971e:	bfc6      	itte	gt
 8009720:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009724:	4318      	orrgt	r0, r3
 8009726:	fa06 f003 	lslle.w	r0, r6, r3
 800972a:	f7f6 fe5b 	bl	80003e4 <__aeabi_ui2d>
 800972e:	2301      	movs	r3, #1
 8009730:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009734:	3c01      	subs	r4, #1
 8009736:	9313      	str	r3, [sp, #76]	; 0x4c
 8009738:	e76f      	b.n	800961a <_dtoa_r+0x112>
 800973a:	2301      	movs	r3, #1
 800973c:	e7b2      	b.n	80096a4 <_dtoa_r+0x19c>
 800973e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009740:	e7b1      	b.n	80096a6 <_dtoa_r+0x19e>
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	eba3 030a 	sub.w	r3, r3, sl
 8009748:	9306      	str	r3, [sp, #24]
 800974a:	f1ca 0300 	rsb	r3, sl, #0
 800974e:	930a      	str	r3, [sp, #40]	; 0x28
 8009750:	2300      	movs	r3, #0
 8009752:	930e      	str	r3, [sp, #56]	; 0x38
 8009754:	e7be      	b.n	80096d4 <_dtoa_r+0x1cc>
 8009756:	2300      	movs	r3, #0
 8009758:	930b      	str	r3, [sp, #44]	; 0x2c
 800975a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800975c:	2b00      	cmp	r3, #0
 800975e:	dc58      	bgt.n	8009812 <_dtoa_r+0x30a>
 8009760:	f04f 0901 	mov.w	r9, #1
 8009764:	464b      	mov	r3, r9
 8009766:	f8cd 9020 	str.w	r9, [sp, #32]
 800976a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800976e:	2200      	movs	r2, #0
 8009770:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009772:	6042      	str	r2, [r0, #4]
 8009774:	2204      	movs	r2, #4
 8009776:	f102 0614 	add.w	r6, r2, #20
 800977a:	429e      	cmp	r6, r3
 800977c:	6841      	ldr	r1, [r0, #4]
 800977e:	d94e      	bls.n	800981e <_dtoa_r+0x316>
 8009780:	4628      	mov	r0, r5
 8009782:	f7ff f9b9 	bl	8008af8 <_Balloc>
 8009786:	9003      	str	r0, [sp, #12]
 8009788:	2800      	cmp	r0, #0
 800978a:	d14c      	bne.n	8009826 <_dtoa_r+0x31e>
 800978c:	4602      	mov	r2, r0
 800978e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009792:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <_dtoa_r+0x2e8>)
 8009794:	e6cc      	b.n	8009530 <_dtoa_r+0x28>
 8009796:	2301      	movs	r3, #1
 8009798:	e7de      	b.n	8009758 <_dtoa_r+0x250>
 800979a:	2300      	movs	r3, #0
 800979c:	930b      	str	r3, [sp, #44]	; 0x2c
 800979e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097a0:	eb0a 0903 	add.w	r9, sl, r3
 80097a4:	f109 0301 	add.w	r3, r9, #1
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	9308      	str	r3, [sp, #32]
 80097ac:	bfb8      	it	lt
 80097ae:	2301      	movlt	r3, #1
 80097b0:	e7dd      	b.n	800976e <_dtoa_r+0x266>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f2      	b.n	800979c <_dtoa_r+0x294>
 80097b6:	bf00      	nop
 80097b8:	636f4361 	.word	0x636f4361
 80097bc:	3fd287a7 	.word	0x3fd287a7
 80097c0:	8b60c8b3 	.word	0x8b60c8b3
 80097c4:	3fc68a28 	.word	0x3fc68a28
 80097c8:	509f79fb 	.word	0x509f79fb
 80097cc:	3fd34413 	.word	0x3fd34413
 80097d0:	0800c33c 	.word	0x0800c33c
 80097d4:	0800c507 	.word	0x0800c507
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	0800c501 	.word	0x0800c501
 80097e0:	0800c4f8 	.word	0x0800c4f8
 80097e4:	0800c506 	.word	0x0800c506
 80097e8:	3ff80000 	.word	0x3ff80000
 80097ec:	0800c3e8 	.word	0x0800c3e8
 80097f0:	0800c3af 	.word	0x0800c3af
 80097f4:	2401      	movs	r4, #1
 80097f6:	2300      	movs	r3, #0
 80097f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80097fa:	9322      	str	r3, [sp, #136]	; 0x88
 80097fc:	f04f 39ff 	mov.w	r9, #4294967295
 8009800:	2200      	movs	r2, #0
 8009802:	2312      	movs	r3, #18
 8009804:	f8cd 9020 	str.w	r9, [sp, #32]
 8009808:	9223      	str	r2, [sp, #140]	; 0x8c
 800980a:	e7b0      	b.n	800976e <_dtoa_r+0x266>
 800980c:	2301      	movs	r3, #1
 800980e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009810:	e7f4      	b.n	80097fc <_dtoa_r+0x2f4>
 8009812:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009816:	464b      	mov	r3, r9
 8009818:	f8cd 9020 	str.w	r9, [sp, #32]
 800981c:	e7a7      	b.n	800976e <_dtoa_r+0x266>
 800981e:	3101      	adds	r1, #1
 8009820:	6041      	str	r1, [r0, #4]
 8009822:	0052      	lsls	r2, r2, #1
 8009824:	e7a7      	b.n	8009776 <_dtoa_r+0x26e>
 8009826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009828:	9a03      	ldr	r2, [sp, #12]
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	2b0e      	cmp	r3, #14
 8009830:	f200 80a8 	bhi.w	8009984 <_dtoa_r+0x47c>
 8009834:	2c00      	cmp	r4, #0
 8009836:	f000 80a5 	beq.w	8009984 <_dtoa_r+0x47c>
 800983a:	f1ba 0f00 	cmp.w	sl, #0
 800983e:	dd34      	ble.n	80098aa <_dtoa_r+0x3a2>
 8009840:	4a9a      	ldr	r2, [pc, #616]	; (8009aac <_dtoa_r+0x5a4>)
 8009842:	f00a 030f 	and.w	r3, sl, #15
 8009846:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800984a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800984e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009852:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009856:	ea4f 142a 	mov.w	r4, sl, asr #4
 800985a:	d016      	beq.n	800988a <_dtoa_r+0x382>
 800985c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009860:	4b93      	ldr	r3, [pc, #588]	; (8009ab0 <_dtoa_r+0x5a8>)
 8009862:	2703      	movs	r7, #3
 8009864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009868:	f7f6 ff60 	bl	800072c <__aeabi_ddiv>
 800986c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009870:	f004 040f 	and.w	r4, r4, #15
 8009874:	4e8e      	ldr	r6, [pc, #568]	; (8009ab0 <_dtoa_r+0x5a8>)
 8009876:	b954      	cbnz	r4, 800988e <_dtoa_r+0x386>
 8009878:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800987c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009880:	f7f6 ff54 	bl	800072c <__aeabi_ddiv>
 8009884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009888:	e029      	b.n	80098de <_dtoa_r+0x3d6>
 800988a:	2702      	movs	r7, #2
 800988c:	e7f2      	b.n	8009874 <_dtoa_r+0x36c>
 800988e:	07e1      	lsls	r1, r4, #31
 8009890:	d508      	bpl.n	80098a4 <_dtoa_r+0x39c>
 8009892:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009896:	e9d6 2300 	ldrd	r2, r3, [r6]
 800989a:	f7f6 fe1d 	bl	80004d8 <__aeabi_dmul>
 800989e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098a2:	3701      	adds	r7, #1
 80098a4:	1064      	asrs	r4, r4, #1
 80098a6:	3608      	adds	r6, #8
 80098a8:	e7e5      	b.n	8009876 <_dtoa_r+0x36e>
 80098aa:	f000 80a5 	beq.w	80099f8 <_dtoa_r+0x4f0>
 80098ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b2:	f1ca 0400 	rsb	r4, sl, #0
 80098b6:	4b7d      	ldr	r3, [pc, #500]	; (8009aac <_dtoa_r+0x5a4>)
 80098b8:	f004 020f 	and.w	r2, r4, #15
 80098bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f7f6 fe08 	bl	80004d8 <__aeabi_dmul>
 80098c8:	2702      	movs	r7, #2
 80098ca:	2300      	movs	r3, #0
 80098cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d0:	4e77      	ldr	r6, [pc, #476]	; (8009ab0 <_dtoa_r+0x5a8>)
 80098d2:	1124      	asrs	r4, r4, #4
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	f040 8084 	bne.w	80099e2 <_dtoa_r+0x4da>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d2      	bne.n	8009884 <_dtoa_r+0x37c>
 80098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 808b 	beq.w	80099fc <_dtoa_r+0x4f4>
 80098e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80098ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098f2:	2200      	movs	r2, #0
 80098f4:	4b6f      	ldr	r3, [pc, #444]	; (8009ab4 <_dtoa_r+0x5ac>)
 80098f6:	f7f7 f861 	bl	80009bc <__aeabi_dcmplt>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d07e      	beq.n	80099fc <_dtoa_r+0x4f4>
 80098fe:	9b08      	ldr	r3, [sp, #32]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d07b      	beq.n	80099fc <_dtoa_r+0x4f4>
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	dd38      	ble.n	800997c <_dtoa_r+0x474>
 800990a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800990e:	2200      	movs	r2, #0
 8009910:	4b69      	ldr	r3, [pc, #420]	; (8009ab8 <_dtoa_r+0x5b0>)
 8009912:	f7f6 fde1 	bl	80004d8 <__aeabi_dmul>
 8009916:	464c      	mov	r4, r9
 8009918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009920:	3701      	adds	r7, #1
 8009922:	4638      	mov	r0, r7
 8009924:	f7f6 fd6e 	bl	8000404 <__aeabi_i2d>
 8009928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992c:	f7f6 fdd4 	bl	80004d8 <__aeabi_dmul>
 8009930:	2200      	movs	r2, #0
 8009932:	4b62      	ldr	r3, [pc, #392]	; (8009abc <_dtoa_r+0x5b4>)
 8009934:	f7f6 fc1a 	bl	800016c <__adddf3>
 8009938:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800993c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009940:	9611      	str	r6, [sp, #68]	; 0x44
 8009942:	2c00      	cmp	r4, #0
 8009944:	d15d      	bne.n	8009a02 <_dtoa_r+0x4fa>
 8009946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800994a:	2200      	movs	r2, #0
 800994c:	4b5c      	ldr	r3, [pc, #368]	; (8009ac0 <_dtoa_r+0x5b8>)
 800994e:	f7f6 fc0b 	bl	8000168 <__aeabi_dsub>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800995a:	4633      	mov	r3, r6
 800995c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800995e:	f7f7 f84b 	bl	80009f8 <__aeabi_dcmpgt>
 8009962:	2800      	cmp	r0, #0
 8009964:	f040 829c 	bne.w	8009ea0 <_dtoa_r+0x998>
 8009968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800996c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800996e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009972:	f7f7 f823 	bl	80009bc <__aeabi_dcmplt>
 8009976:	2800      	cmp	r0, #0
 8009978:	f040 8290 	bne.w	8009e9c <_dtoa_r+0x994>
 800997c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009980:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009986:	2b00      	cmp	r3, #0
 8009988:	f2c0 8152 	blt.w	8009c30 <_dtoa_r+0x728>
 800998c:	f1ba 0f0e 	cmp.w	sl, #14
 8009990:	f300 814e 	bgt.w	8009c30 <_dtoa_r+0x728>
 8009994:	4b45      	ldr	r3, [pc, #276]	; (8009aac <_dtoa_r+0x5a4>)
 8009996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800999a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800999e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80099a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f280 80db 	bge.w	8009b60 <_dtoa_r+0x658>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f300 80d7 	bgt.w	8009b60 <_dtoa_r+0x658>
 80099b2:	f040 8272 	bne.w	8009e9a <_dtoa_r+0x992>
 80099b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ba:	2200      	movs	r2, #0
 80099bc:	4b40      	ldr	r3, [pc, #256]	; (8009ac0 <_dtoa_r+0x5b8>)
 80099be:	f7f6 fd8b 	bl	80004d8 <__aeabi_dmul>
 80099c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c6:	f7f7 f80d 	bl	80009e4 <__aeabi_dcmpge>
 80099ca:	9c08      	ldr	r4, [sp, #32]
 80099cc:	4626      	mov	r6, r4
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f040 8248 	bne.w	8009e64 <_dtoa_r+0x95c>
 80099d4:	2331      	movs	r3, #49	; 0x31
 80099d6:	9f03      	ldr	r7, [sp, #12]
 80099d8:	f10a 0a01 	add.w	sl, sl, #1
 80099dc:	f807 3b01 	strb.w	r3, [r7], #1
 80099e0:	e244      	b.n	8009e6c <_dtoa_r+0x964>
 80099e2:	07e2      	lsls	r2, r4, #31
 80099e4:	d505      	bpl.n	80099f2 <_dtoa_r+0x4ea>
 80099e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099ea:	f7f6 fd75 	bl	80004d8 <__aeabi_dmul>
 80099ee:	2301      	movs	r3, #1
 80099f0:	3701      	adds	r7, #1
 80099f2:	1064      	asrs	r4, r4, #1
 80099f4:	3608      	adds	r6, #8
 80099f6:	e76d      	b.n	80098d4 <_dtoa_r+0x3cc>
 80099f8:	2702      	movs	r7, #2
 80099fa:	e770      	b.n	80098de <_dtoa_r+0x3d6>
 80099fc:	46d0      	mov	r8, sl
 80099fe:	9c08      	ldr	r4, [sp, #32]
 8009a00:	e78f      	b.n	8009922 <_dtoa_r+0x41a>
 8009a02:	9903      	ldr	r1, [sp, #12]
 8009a04:	4b29      	ldr	r3, [pc, #164]	; (8009aac <_dtoa_r+0x5a4>)
 8009a06:	4421      	add	r1, r4
 8009a08:	9112      	str	r1, [sp, #72]	; 0x48
 8009a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009a14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d055      	beq.n	8009ac8 <_dtoa_r+0x5c0>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	4929      	ldr	r1, [pc, #164]	; (8009ac4 <_dtoa_r+0x5bc>)
 8009a20:	f7f6 fe84 	bl	800072c <__aeabi_ddiv>
 8009a24:	463b      	mov	r3, r7
 8009a26:	4632      	mov	r2, r6
 8009a28:	f7f6 fb9e 	bl	8000168 <__aeabi_dsub>
 8009a2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a30:	9f03      	ldr	r7, [sp, #12]
 8009a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a36:	f7f6 ffff 	bl	8000a38 <__aeabi_d2iz>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	f7f6 fce2 	bl	8000404 <__aeabi_i2d>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a48:	f7f6 fb8e 	bl	8000168 <__aeabi_dsub>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	3430      	adds	r4, #48	; 0x30
 8009a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a5a:	f807 4b01 	strb.w	r4, [r7], #1
 8009a5e:	f7f6 ffad 	bl	80009bc <__aeabi_dcmplt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d174      	bne.n	8009b50 <_dtoa_r+0x648>
 8009a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	4911      	ldr	r1, [pc, #68]	; (8009ab4 <_dtoa_r+0x5ac>)
 8009a6e:	f7f6 fb7b 	bl	8000168 <__aeabi_dsub>
 8009a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a76:	f7f6 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f040 80b7 	bne.w	8009bee <_dtoa_r+0x6e6>
 8009a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a82:	429f      	cmp	r7, r3
 8009a84:	f43f af7a 	beq.w	800997c <_dtoa_r+0x474>
 8009a88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <_dtoa_r+0x5b0>)
 8009a90:	f7f6 fd22 	bl	80004d8 <__aeabi_dmul>
 8009a94:	2200      	movs	r2, #0
 8009a96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a9e:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <_dtoa_r+0x5b0>)
 8009aa0:	f7f6 fd1a 	bl	80004d8 <__aeabi_dmul>
 8009aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aa8:	e7c3      	b.n	8009a32 <_dtoa_r+0x52a>
 8009aaa:	bf00      	nop
 8009aac:	0800c3e8 	.word	0x0800c3e8
 8009ab0:	0800c3c0 	.word	0x0800c3c0
 8009ab4:	3ff00000 	.word	0x3ff00000
 8009ab8:	40240000 	.word	0x40240000
 8009abc:	401c0000 	.word	0x401c0000
 8009ac0:	40140000 	.word	0x40140000
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fd04 	bl	80004d8 <__aeabi_dmul>
 8009ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ad6:	9c03      	ldr	r4, [sp, #12]
 8009ad8:	9314      	str	r3, [sp, #80]	; 0x50
 8009ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ade:	f7f6 ffab 	bl	8000a38 <__aeabi_d2iz>
 8009ae2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ae4:	f7f6 fc8e 	bl	8000404 <__aeabi_i2d>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009af0:	f7f6 fb3a 	bl	8000168 <__aeabi_dsub>
 8009af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af6:	4606      	mov	r6, r0
 8009af8:	3330      	adds	r3, #48	; 0x30
 8009afa:	f804 3b01 	strb.w	r3, [r4], #1
 8009afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b00:	460f      	mov	r7, r1
 8009b02:	429c      	cmp	r4, r3
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	d124      	bne.n	8009b54 <_dtoa_r+0x64c>
 8009b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b0e:	4bb0      	ldr	r3, [pc, #704]	; (8009dd0 <_dtoa_r+0x8c8>)
 8009b10:	f7f6 fb2c 	bl	800016c <__adddf3>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d163      	bne.n	8009bec <_dtoa_r+0x6e4>
 8009b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b28:	2000      	movs	r0, #0
 8009b2a:	49a9      	ldr	r1, [pc, #676]	; (8009dd0 <_dtoa_r+0x8c8>)
 8009b2c:	f7f6 fb1c 	bl	8000168 <__aeabi_dsub>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 ff40 	bl	80009bc <__aeabi_dcmplt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f af1d 	beq.w	800997c <_dtoa_r+0x474>
 8009b42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b44:	1e7b      	subs	r3, r7, #1
 8009b46:	9314      	str	r3, [sp, #80]	; 0x50
 8009b48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009b4c:	2b30      	cmp	r3, #48	; 0x30
 8009b4e:	d0f8      	beq.n	8009b42 <_dtoa_r+0x63a>
 8009b50:	46c2      	mov	sl, r8
 8009b52:	e03b      	b.n	8009bcc <_dtoa_r+0x6c4>
 8009b54:	4b9f      	ldr	r3, [pc, #636]	; (8009dd4 <_dtoa_r+0x8cc>)
 8009b56:	f7f6 fcbf 	bl	80004d8 <__aeabi_dmul>
 8009b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b5e:	e7bc      	b.n	8009ada <_dtoa_r+0x5d2>
 8009b60:	9f03      	ldr	r7, [sp, #12]
 8009b62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 fddd 	bl	800072c <__aeabi_ddiv>
 8009b72:	f7f6 ff61 	bl	8000a38 <__aeabi_d2iz>
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7f6 fc44 	bl	8000404 <__aeabi_i2d>
 8009b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b80:	f7f6 fcaa 	bl	80004d8 <__aeabi_dmul>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 faec 	bl	8000168 <__aeabi_dsub>
 8009b90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009b94:	f807 6b01 	strb.w	r6, [r7], #1
 8009b98:	9e03      	ldr	r6, [sp, #12]
 8009b9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009b9e:	1bbe      	subs	r6, r7, r6
 8009ba0:	45b4      	cmp	ip, r6
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	d136      	bne.n	8009c16 <_dtoa_r+0x70e>
 8009ba8:	f7f6 fae0 	bl	800016c <__adddf3>
 8009bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4689      	mov	r9, r1
 8009bb4:	f7f6 ff20 	bl	80009f8 <__aeabi_dcmpgt>
 8009bb8:	bb58      	cbnz	r0, 8009c12 <_dtoa_r+0x70a>
 8009bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8009bc6:	b108      	cbz	r0, 8009bcc <_dtoa_r+0x6c4>
 8009bc8:	07e1      	lsls	r1, r4, #31
 8009bca:	d422      	bmi.n	8009c12 <_dtoa_r+0x70a>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	4659      	mov	r1, fp
 8009bd0:	f7fe ffd2 	bl	8008b78 <_Bfree>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	703b      	strb	r3, [r7, #0]
 8009bd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009bda:	f10a 0001 	add.w	r0, sl, #1
 8009bde:	6018      	str	r0, [r3, #0]
 8009be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f43f acde 	beq.w	80095a4 <_dtoa_r+0x9c>
 8009be8:	601f      	str	r7, [r3, #0]
 8009bea:	e4db      	b.n	80095a4 <_dtoa_r+0x9c>
 8009bec:	4627      	mov	r7, r4
 8009bee:	463b      	mov	r3, r7
 8009bf0:	461f      	mov	r7, r3
 8009bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf6:	2a39      	cmp	r2, #57	; 0x39
 8009bf8:	d107      	bne.n	8009c0a <_dtoa_r+0x702>
 8009bfa:	9a03      	ldr	r2, [sp, #12]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d1f7      	bne.n	8009bf0 <_dtoa_r+0x6e8>
 8009c00:	2230      	movs	r2, #48	; 0x30
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	f108 0801 	add.w	r8, r8, #1
 8009c08:	700a      	strb	r2, [r1, #0]
 8009c0a:	781a      	ldrb	r2, [r3, #0]
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	e79e      	b.n	8009b50 <_dtoa_r+0x648>
 8009c12:	46d0      	mov	r8, sl
 8009c14:	e7eb      	b.n	8009bee <_dtoa_r+0x6e6>
 8009c16:	2200      	movs	r2, #0
 8009c18:	4b6e      	ldr	r3, [pc, #440]	; (8009dd4 <_dtoa_r+0x8cc>)
 8009c1a:	f7f6 fc5d 	bl	80004d8 <__aeabi_dmul>
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4680      	mov	r8, r0
 8009c24:	4689      	mov	r9, r1
 8009c26:	f7f6 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d09b      	beq.n	8009b66 <_dtoa_r+0x65e>
 8009c2e:	e7cd      	b.n	8009bcc <_dtoa_r+0x6c4>
 8009c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	f000 80d0 	beq.w	8009dd8 <_dtoa_r+0x8d0>
 8009c38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c3a:	2a01      	cmp	r2, #1
 8009c3c:	f300 80ae 	bgt.w	8009d9c <_dtoa_r+0x894>
 8009c40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	f000 80a6 	beq.w	8009d94 <_dtoa_r+0x88c>
 8009c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c4e:	9f06      	ldr	r7, [sp, #24]
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	2101      	movs	r1, #1
 8009c54:	441a      	add	r2, r3
 8009c56:	9206      	str	r2, [sp, #24]
 8009c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	441a      	add	r2, r3
 8009c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c60:	f7ff f840 	bl	8008ce4 <__i2b>
 8009c64:	4606      	mov	r6, r0
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	dd0c      	ble.n	8009c84 <_dtoa_r+0x77c>
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dd09      	ble.n	8009c84 <_dtoa_r+0x77c>
 8009c70:	42bb      	cmp	r3, r7
 8009c72:	bfa8      	it	ge
 8009c74:	463b      	movge	r3, r7
 8009c76:	9a06      	ldr	r2, [sp, #24]
 8009c78:	1aff      	subs	r7, r7, r3
 8009c7a:	1ad2      	subs	r2, r2, r3
 8009c7c:	9206      	str	r2, [sp, #24]
 8009c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	9309      	str	r3, [sp, #36]	; 0x24
 8009c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c86:	b1f3      	cbz	r3, 8009cc6 <_dtoa_r+0x7be>
 8009c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80a8 	beq.w	8009de0 <_dtoa_r+0x8d8>
 8009c90:	2c00      	cmp	r4, #0
 8009c92:	dd10      	ble.n	8009cb6 <_dtoa_r+0x7ae>
 8009c94:	4631      	mov	r1, r6
 8009c96:	4622      	mov	r2, r4
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7ff f8e1 	bl	8008e60 <__pow5mult>
 8009c9e:	465a      	mov	r2, fp
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7ff f833 	bl	8008d10 <__multiply>
 8009caa:	4680      	mov	r8, r0
 8009cac:	4659      	mov	r1, fp
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f7fe ff62 	bl	8008b78 <_Bfree>
 8009cb4:	46c3      	mov	fp, r8
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	1b1a      	subs	r2, r3, r4
 8009cba:	d004      	beq.n	8009cc6 <_dtoa_r+0x7be>
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f7ff f8ce 	bl	8008e60 <__pow5mult>
 8009cc4:	4683      	mov	fp, r0
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f7ff f80b 	bl	8008ce4 <__i2b>
 8009cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f340 8086 	ble.w	8009de4 <_dtoa_r+0x8dc>
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7ff f8bf 	bl	8008e60 <__pow5mult>
 8009ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	dd7f      	ble.n	8009dea <_dtoa_r+0x8e2>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cf4:	6918      	ldr	r0, [r3, #16]
 8009cf6:	f7fe ffa7 	bl	8008c48 <__hi0bits>
 8009cfa:	f1c0 0020 	rsb	r0, r0, #32
 8009cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d00:	4418      	add	r0, r3
 8009d02:	f010 001f 	ands.w	r0, r0, #31
 8009d06:	f000 8092 	beq.w	8009e2e <_dtoa_r+0x926>
 8009d0a:	f1c0 0320 	rsb	r3, r0, #32
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	f340 808a 	ble.w	8009e28 <_dtoa_r+0x920>
 8009d14:	f1c0 001c 	rsb	r0, r0, #28
 8009d18:	9b06      	ldr	r3, [sp, #24]
 8009d1a:	4407      	add	r7, r0
 8009d1c:	4403      	add	r3, r0
 8009d1e:	9306      	str	r3, [sp, #24]
 8009d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d22:	4403      	add	r3, r0
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dd05      	ble.n	8009d38 <_dtoa_r+0x830>
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7ff f8ef 	bl	8008f14 <__lshift>
 8009d36:	4683      	mov	fp, r0
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dd05      	ble.n	8009d4a <_dtoa_r+0x842>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	461a      	mov	r2, r3
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7ff f8e6 	bl	8008f14 <__lshift>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d070      	beq.n	8009e32 <_dtoa_r+0x92a>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4658      	mov	r0, fp
 8009d54:	f7ff f94e 	bl	8008ff4 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	da6a      	bge.n	8009e32 <_dtoa_r+0x92a>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4659      	mov	r1, fp
 8009d60:	220a      	movs	r2, #10
 8009d62:	4628      	mov	r0, r5
 8009d64:	f7fe ff2a 	bl	8008bbc <__multadd>
 8009d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6a:	4683      	mov	fp, r0
 8009d6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 8194 	beq.w	800a09e <_dtoa_r+0xb96>
 8009d76:	4631      	mov	r1, r6
 8009d78:	2300      	movs	r3, #0
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7fe ff1d 	bl	8008bbc <__multadd>
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	4606      	mov	r6, r0
 8009d88:	f300 8093 	bgt.w	8009eb2 <_dtoa_r+0x9aa>
 8009d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	dc57      	bgt.n	8009e42 <_dtoa_r+0x93a>
 8009d92:	e08e      	b.n	8009eb2 <_dtoa_r+0x9aa>
 8009d94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d9a:	e757      	b.n	8009c4c <_dtoa_r+0x744>
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	1e5c      	subs	r4, r3, #1
 8009da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da2:	42a3      	cmp	r3, r4
 8009da4:	bfb7      	itett	lt
 8009da6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009da8:	1b1c      	subge	r4, r3, r4
 8009daa:	1ae2      	sublt	r2, r4, r3
 8009dac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009dae:	bfbe      	ittt	lt
 8009db0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009db2:	189b      	addlt	r3, r3, r2
 8009db4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009db6:	9b08      	ldr	r3, [sp, #32]
 8009db8:	bfb8      	it	lt
 8009dba:	2400      	movlt	r4, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfbb      	ittet	lt
 8009dc0:	9b06      	ldrlt	r3, [sp, #24]
 8009dc2:	9a08      	ldrlt	r2, [sp, #32]
 8009dc4:	9f06      	ldrge	r7, [sp, #24]
 8009dc6:	1a9f      	sublt	r7, r3, r2
 8009dc8:	bfac      	ite	ge
 8009dca:	9b08      	ldrge	r3, [sp, #32]
 8009dcc:	2300      	movlt	r3, #0
 8009dce:	e73f      	b.n	8009c50 <_dtoa_r+0x748>
 8009dd0:	3fe00000 	.word	0x3fe00000
 8009dd4:	40240000 	.word	0x40240000
 8009dd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009dda:	9f06      	ldr	r7, [sp, #24]
 8009ddc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009dde:	e742      	b.n	8009c66 <_dtoa_r+0x75e>
 8009de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de2:	e76b      	b.n	8009cbc <_dtoa_r+0x7b4>
 8009de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	dc19      	bgt.n	8009e1e <_dtoa_r+0x916>
 8009dea:	9b04      	ldr	r3, [sp, #16]
 8009dec:	b9bb      	cbnz	r3, 8009e1e <_dtoa_r+0x916>
 8009dee:	9b05      	ldr	r3, [sp, #20]
 8009df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df4:	b99b      	cbnz	r3, 8009e1e <_dtoa_r+0x916>
 8009df6:	9b05      	ldr	r3, [sp, #20]
 8009df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dfc:	0d1b      	lsrs	r3, r3, #20
 8009dfe:	051b      	lsls	r3, r3, #20
 8009e00:	b183      	cbz	r3, 8009e24 <_dtoa_r+0x91c>
 8009e02:	f04f 0801 	mov.w	r8, #1
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	9306      	str	r3, [sp, #24]
 8009e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0e:	3301      	adds	r3, #1
 8009e10:	9309      	str	r3, [sp, #36]	; 0x24
 8009e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f47f af6a 	bne.w	8009cee <_dtoa_r+0x7e6>
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	e76f      	b.n	8009cfe <_dtoa_r+0x7f6>
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	e7f6      	b.n	8009e12 <_dtoa_r+0x90a>
 8009e24:	4698      	mov	r8, r3
 8009e26:	e7f4      	b.n	8009e12 <_dtoa_r+0x90a>
 8009e28:	f43f af7d 	beq.w	8009d26 <_dtoa_r+0x81e>
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	301c      	adds	r0, #28
 8009e30:	e772      	b.n	8009d18 <_dtoa_r+0x810>
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dc36      	bgt.n	8009ea6 <_dtoa_r+0x99e>
 8009e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	dd33      	ble.n	8009ea6 <_dtoa_r+0x99e>
 8009e3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e42:	f1b9 0f00 	cmp.w	r9, #0
 8009e46:	d10d      	bne.n	8009e64 <_dtoa_r+0x95c>
 8009e48:	4621      	mov	r1, r4
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2205      	movs	r2, #5
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f7fe feb4 	bl	8008bbc <__multadd>
 8009e54:	4601      	mov	r1, r0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4658      	mov	r0, fp
 8009e5a:	f7ff f8cb 	bl	8008ff4 <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	f73f adb8 	bgt.w	80099d4 <_dtoa_r+0x4cc>
 8009e64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e66:	9f03      	ldr	r7, [sp, #12]
 8009e68:	ea6f 0a03 	mvn.w	sl, r3
 8009e6c:	f04f 0800 	mov.w	r8, #0
 8009e70:	4621      	mov	r1, r4
 8009e72:	4628      	mov	r0, r5
 8009e74:	f7fe fe80 	bl	8008b78 <_Bfree>
 8009e78:	2e00      	cmp	r6, #0
 8009e7a:	f43f aea7 	beq.w	8009bcc <_dtoa_r+0x6c4>
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	d005      	beq.n	8009e90 <_dtoa_r+0x988>
 8009e84:	45b0      	cmp	r8, r6
 8009e86:	d003      	beq.n	8009e90 <_dtoa_r+0x988>
 8009e88:	4641      	mov	r1, r8
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7fe fe74 	bl	8008b78 <_Bfree>
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	f7fe fe70 	bl	8008b78 <_Bfree>
 8009e98:	e698      	b.n	8009bcc <_dtoa_r+0x6c4>
 8009e9a:	2400      	movs	r4, #0
 8009e9c:	4626      	mov	r6, r4
 8009e9e:	e7e1      	b.n	8009e64 <_dtoa_r+0x95c>
 8009ea0:	46c2      	mov	sl, r8
 8009ea2:	4626      	mov	r6, r4
 8009ea4:	e596      	b.n	80099d4 <_dtoa_r+0x4cc>
 8009ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80fd 	beq.w	800a0ac <_dtoa_r+0xba4>
 8009eb2:	2f00      	cmp	r7, #0
 8009eb4:	dd05      	ble.n	8009ec2 <_dtoa_r+0x9ba>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	463a      	mov	r2, r7
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f7ff f82a 	bl	8008f14 <__lshift>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	f1b8 0f00 	cmp.w	r8, #0
 8009ec6:	d05c      	beq.n	8009f82 <_dtoa_r+0xa7a>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	6871      	ldr	r1, [r6, #4]
 8009ecc:	f7fe fe14 	bl	8008af8 <_Balloc>
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	b928      	cbnz	r0, 8009ee0 <_dtoa_r+0x9d8>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009eda:	4b7f      	ldr	r3, [pc, #508]	; (800a0d8 <_dtoa_r+0xbd0>)
 8009edc:	f7ff bb28 	b.w	8009530 <_dtoa_r+0x28>
 8009ee0:	6932      	ldr	r2, [r6, #16]
 8009ee2:	f106 010c 	add.w	r1, r6, #12
 8009ee6:	3202      	adds	r2, #2
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	300c      	adds	r0, #12
 8009eec:	f000 f914 	bl	800a118 <memcpy>
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f7ff f80d 	bl	8008f14 <__lshift>
 8009efa:	46b0      	mov	r8, r6
 8009efc:	4606      	mov	r6, r0
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	444b      	add	r3, r9
 8009f08:	930a      	str	r3, [sp, #40]	; 0x28
 8009f0a:	9b04      	ldr	r3, [sp, #16]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	9309      	str	r3, [sp, #36]	; 0x24
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	4621      	mov	r1, r4
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4658      	mov	r0, fp
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	f7ff fa68 	bl	80093f0 <quorem>
 8009f20:	4603      	mov	r3, r0
 8009f22:	4641      	mov	r1, r8
 8009f24:	3330      	adds	r3, #48	; 0x30
 8009f26:	9006      	str	r0, [sp, #24]
 8009f28:	4658      	mov	r0, fp
 8009f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f2c:	f7ff f862 	bl	8008ff4 <__mcmp>
 8009f30:	4632      	mov	r2, r6
 8009f32:	4681      	mov	r9, r0
 8009f34:	4621      	mov	r1, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7ff f878 	bl	800902c <__mdiff>
 8009f3c:	68c2      	ldr	r2, [r0, #12]
 8009f3e:	4607      	mov	r7, r0
 8009f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f42:	bb02      	cbnz	r2, 8009f86 <_dtoa_r+0xa7e>
 8009f44:	4601      	mov	r1, r0
 8009f46:	4658      	mov	r0, fp
 8009f48:	f7ff f854 	bl	8008ff4 <__mcmp>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f50:	4639      	mov	r1, r7
 8009f52:	4628      	mov	r0, r5
 8009f54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009f58:	f7fe fe0e 	bl	8008b78 <_Bfree>
 8009f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f60:	9f08      	ldr	r7, [sp, #32]
 8009f62:	ea43 0102 	orr.w	r1, r3, r2
 8009f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6c:	d10d      	bne.n	8009f8a <_dtoa_r+0xa82>
 8009f6e:	2b39      	cmp	r3, #57	; 0x39
 8009f70:	d029      	beq.n	8009fc6 <_dtoa_r+0xabe>
 8009f72:	f1b9 0f00 	cmp.w	r9, #0
 8009f76:	dd01      	ble.n	8009f7c <_dtoa_r+0xa74>
 8009f78:	9b06      	ldr	r3, [sp, #24]
 8009f7a:	3331      	adds	r3, #49	; 0x31
 8009f7c:	9a04      	ldr	r2, [sp, #16]
 8009f7e:	7013      	strb	r3, [r2, #0]
 8009f80:	e776      	b.n	8009e70 <_dtoa_r+0x968>
 8009f82:	4630      	mov	r0, r6
 8009f84:	e7b9      	b.n	8009efa <_dtoa_r+0x9f2>
 8009f86:	2201      	movs	r2, #1
 8009f88:	e7e2      	b.n	8009f50 <_dtoa_r+0xa48>
 8009f8a:	f1b9 0f00 	cmp.w	r9, #0
 8009f8e:	db06      	blt.n	8009f9e <_dtoa_r+0xa96>
 8009f90:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009f92:	ea41 0909 	orr.w	r9, r1, r9
 8009f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f98:	ea59 0101 	orrs.w	r1, r9, r1
 8009f9c:	d120      	bne.n	8009fe0 <_dtoa_r+0xad8>
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	ddec      	ble.n	8009f7c <_dtoa_r+0xa74>
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	9308      	str	r3, [sp, #32]
 8009faa:	f7fe ffb3 	bl	8008f14 <__lshift>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4683      	mov	fp, r0
 8009fb2:	f7ff f81f 	bl	8008ff4 <__mcmp>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	9b08      	ldr	r3, [sp, #32]
 8009fba:	dc02      	bgt.n	8009fc2 <_dtoa_r+0xaba>
 8009fbc:	d1de      	bne.n	8009f7c <_dtoa_r+0xa74>
 8009fbe:	07da      	lsls	r2, r3, #31
 8009fc0:	d5dc      	bpl.n	8009f7c <_dtoa_r+0xa74>
 8009fc2:	2b39      	cmp	r3, #57	; 0x39
 8009fc4:	d1d8      	bne.n	8009f78 <_dtoa_r+0xa70>
 8009fc6:	2339      	movs	r3, #57	; 0x39
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	7013      	strb	r3, [r2, #0]
 8009fcc:	463b      	mov	r3, r7
 8009fce:	461f      	mov	r7, r3
 8009fd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	2a39      	cmp	r2, #57	; 0x39
 8009fd8:	d050      	beq.n	800a07c <_dtoa_r+0xb74>
 8009fda:	3201      	adds	r2, #1
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e747      	b.n	8009e70 <_dtoa_r+0x968>
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	dd03      	ble.n	8009fec <_dtoa_r+0xae4>
 8009fe4:	2b39      	cmp	r3, #57	; 0x39
 8009fe6:	d0ee      	beq.n	8009fc6 <_dtoa_r+0xabe>
 8009fe8:	3301      	adds	r3, #1
 8009fea:	e7c7      	b.n	8009f7c <_dtoa_r+0xa74>
 8009fec:	9a08      	ldr	r2, [sp, #32]
 8009fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ff0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ff4:	428a      	cmp	r2, r1
 8009ff6:	d02a      	beq.n	800a04e <_dtoa_r+0xb46>
 8009ff8:	4659      	mov	r1, fp
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	220a      	movs	r2, #10
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7fe fddc 	bl	8008bbc <__multadd>
 800a004:	45b0      	cmp	r8, r6
 800a006:	4683      	mov	fp, r0
 800a008:	f04f 0300 	mov.w	r3, #0
 800a00c:	f04f 020a 	mov.w	r2, #10
 800a010:	4641      	mov	r1, r8
 800a012:	4628      	mov	r0, r5
 800a014:	d107      	bne.n	800a026 <_dtoa_r+0xb1e>
 800a016:	f7fe fdd1 	bl	8008bbc <__multadd>
 800a01a:	4680      	mov	r8, r0
 800a01c:	4606      	mov	r6, r0
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	3301      	adds	r3, #1
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	e775      	b.n	8009f12 <_dtoa_r+0xa0a>
 800a026:	f7fe fdc9 	bl	8008bbc <__multadd>
 800a02a:	4631      	mov	r1, r6
 800a02c:	4680      	mov	r8, r0
 800a02e:	2300      	movs	r3, #0
 800a030:	220a      	movs	r2, #10
 800a032:	4628      	mov	r0, r5
 800a034:	f7fe fdc2 	bl	8008bbc <__multadd>
 800a038:	4606      	mov	r6, r0
 800a03a:	e7f0      	b.n	800a01e <_dtoa_r+0xb16>
 800a03c:	f1b9 0f00 	cmp.w	r9, #0
 800a040:	bfcc      	ite	gt
 800a042:	464f      	movgt	r7, r9
 800a044:	2701      	movle	r7, #1
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	9a03      	ldr	r2, [sp, #12]
 800a04c:	4417      	add	r7, r2
 800a04e:	4659      	mov	r1, fp
 800a050:	2201      	movs	r2, #1
 800a052:	4628      	mov	r0, r5
 800a054:	9308      	str	r3, [sp, #32]
 800a056:	f7fe ff5d 	bl	8008f14 <__lshift>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4683      	mov	fp, r0
 800a05e:	f7fe ffc9 	bl	8008ff4 <__mcmp>
 800a062:	2800      	cmp	r0, #0
 800a064:	dcb2      	bgt.n	8009fcc <_dtoa_r+0xac4>
 800a066:	d102      	bne.n	800a06e <_dtoa_r+0xb66>
 800a068:	9b08      	ldr	r3, [sp, #32]
 800a06a:	07db      	lsls	r3, r3, #31
 800a06c:	d4ae      	bmi.n	8009fcc <_dtoa_r+0xac4>
 800a06e:	463b      	mov	r3, r7
 800a070:	461f      	mov	r7, r3
 800a072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a076:	2a30      	cmp	r2, #48	; 0x30
 800a078:	d0fa      	beq.n	800a070 <_dtoa_r+0xb68>
 800a07a:	e6f9      	b.n	8009e70 <_dtoa_r+0x968>
 800a07c:	9a03      	ldr	r2, [sp, #12]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d1a5      	bne.n	8009fce <_dtoa_r+0xac6>
 800a082:	2331      	movs	r3, #49	; 0x31
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	e779      	b.n	8009f7e <_dtoa_r+0xa76>
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <_dtoa_r+0xbd4>)
 800a08c:	f7ff baa8 	b.w	80095e0 <_dtoa_r+0xd8>
 800a090:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a092:	2b00      	cmp	r3, #0
 800a094:	f47f aa81 	bne.w	800959a <_dtoa_r+0x92>
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <_dtoa_r+0xbd8>)
 800a09a:	f7ff baa1 	b.w	80095e0 <_dtoa_r+0xd8>
 800a09e:	f1b9 0f00 	cmp.w	r9, #0
 800a0a2:	dc03      	bgt.n	800a0ac <_dtoa_r+0xba4>
 800a0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	f73f aecb 	bgt.w	8009e42 <_dtoa_r+0x93a>
 800a0ac:	9f03      	ldr	r7, [sp, #12]
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4658      	mov	r0, fp
 800a0b2:	f7ff f99d 	bl	80093f0 <quorem>
 800a0b6:	9a03      	ldr	r2, [sp, #12]
 800a0b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0bc:	f807 3b01 	strb.w	r3, [r7], #1
 800a0c0:	1aba      	subs	r2, r7, r2
 800a0c2:	4591      	cmp	r9, r2
 800a0c4:	ddba      	ble.n	800a03c <_dtoa_r+0xb34>
 800a0c6:	4659      	mov	r1, fp
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7fe fd75 	bl	8008bbc <__multadd>
 800a0d2:	4683      	mov	fp, r0
 800a0d4:	e7eb      	b.n	800a0ae <_dtoa_r+0xba6>
 800a0d6:	bf00      	nop
 800a0d8:	0800c3af 	.word	0x0800c3af
 800a0dc:	0800c505 	.word	0x0800c505
 800a0e0:	0800c4f8 	.word	0x0800c4f8

0800a0e4 <fiprintf>:
 800a0e4:	b40e      	push	{r1, r2, r3}
 800a0e6:	b503      	push	{r0, r1, lr}
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	ab03      	add	r3, sp, #12
 800a0ec:	4805      	ldr	r0, [pc, #20]	; (800a104 <fiprintf+0x20>)
 800a0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f2:	6800      	ldr	r0, [r0, #0]
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	f000 f899 	bl	800a22c <_vfiprintf_r>
 800a0fa:	b002      	add	sp, #8
 800a0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a100:	b003      	add	sp, #12
 800a102:	4770      	bx	lr
 800a104:	20000024 	.word	0x20000024

0800a108 <malloc>:
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <malloc+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f7ff b8c5 	b.w	800929c <_malloc_r>
 800a112:	bf00      	nop
 800a114:	20000024 	.word	0x20000024

0800a118 <memcpy>:
 800a118:	440a      	add	r2, r1
 800a11a:	4291      	cmp	r1, r2
 800a11c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a120:	d100      	bne.n	800a124 <memcpy+0xc>
 800a122:	4770      	bx	lr
 800a124:	b510      	push	{r4, lr}
 800a126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12a:	4291      	cmp	r1, r2
 800a12c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a130:	d1f9      	bne.n	800a126 <memcpy+0xe>
 800a132:	bd10      	pop	{r4, pc}

0800a134 <__malloc_lock>:
 800a134:	4801      	ldr	r0, [pc, #4]	; (800a13c <__malloc_lock+0x8>)
 800a136:	f000 bdbb 	b.w	800acb0 <__retarget_lock_acquire_recursive>
 800a13a:	bf00      	nop
 800a13c:	200024bc 	.word	0x200024bc

0800a140 <__malloc_unlock>:
 800a140:	4801      	ldr	r0, [pc, #4]	; (800a148 <__malloc_unlock+0x8>)
 800a142:	f000 bdb6 	b.w	800acb2 <__retarget_lock_release_recursive>
 800a146:	bf00      	nop
 800a148:	200024bc 	.word	0x200024bc

0800a14c <_free_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4605      	mov	r5, r0
 800a150:	2900      	cmp	r1, #0
 800a152:	d040      	beq.n	800a1d6 <_free_r+0x8a>
 800a154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a158:	1f0c      	subs	r4, r1, #4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfb8      	it	lt
 800a15e:	18e4      	addlt	r4, r4, r3
 800a160:	f7ff ffe8 	bl	800a134 <__malloc_lock>
 800a164:	4a1c      	ldr	r2, [pc, #112]	; (800a1d8 <_free_r+0x8c>)
 800a166:	6813      	ldr	r3, [r2, #0]
 800a168:	b933      	cbnz	r3, 800a178 <_free_r+0x2c>
 800a16a:	6063      	str	r3, [r4, #4]
 800a16c:	6014      	str	r4, [r2, #0]
 800a16e:	4628      	mov	r0, r5
 800a170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a174:	f7ff bfe4 	b.w	800a140 <__malloc_unlock>
 800a178:	42a3      	cmp	r3, r4
 800a17a:	d908      	bls.n	800a18e <_free_r+0x42>
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	1821      	adds	r1, r4, r0
 800a180:	428b      	cmp	r3, r1
 800a182:	bf01      	itttt	eq
 800a184:	6819      	ldreq	r1, [r3, #0]
 800a186:	685b      	ldreq	r3, [r3, #4]
 800a188:	1809      	addeq	r1, r1, r0
 800a18a:	6021      	streq	r1, [r4, #0]
 800a18c:	e7ed      	b.n	800a16a <_free_r+0x1e>
 800a18e:	461a      	mov	r2, r3
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	b10b      	cbz	r3, 800a198 <_free_r+0x4c>
 800a194:	42a3      	cmp	r3, r4
 800a196:	d9fa      	bls.n	800a18e <_free_r+0x42>
 800a198:	6811      	ldr	r1, [r2, #0]
 800a19a:	1850      	adds	r0, r2, r1
 800a19c:	42a0      	cmp	r0, r4
 800a19e:	d10b      	bne.n	800a1b8 <_free_r+0x6c>
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	4401      	add	r1, r0
 800a1a4:	1850      	adds	r0, r2, r1
 800a1a6:	4283      	cmp	r3, r0
 800a1a8:	6011      	str	r1, [r2, #0]
 800a1aa:	d1e0      	bne.n	800a16e <_free_r+0x22>
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4401      	add	r1, r0
 800a1b2:	6011      	str	r1, [r2, #0]
 800a1b4:	6053      	str	r3, [r2, #4]
 800a1b6:	e7da      	b.n	800a16e <_free_r+0x22>
 800a1b8:	d902      	bls.n	800a1c0 <_free_r+0x74>
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	e7d6      	b.n	800a16e <_free_r+0x22>
 800a1c0:	6820      	ldr	r0, [r4, #0]
 800a1c2:	1821      	adds	r1, r4, r0
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	bf01      	itttt	eq
 800a1c8:	6819      	ldreq	r1, [r3, #0]
 800a1ca:	685b      	ldreq	r3, [r3, #4]
 800a1cc:	1809      	addeq	r1, r1, r0
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6063      	str	r3, [r4, #4]
 800a1d2:	6054      	str	r4, [r2, #4]
 800a1d4:	e7cb      	b.n	800a16e <_free_r+0x22>
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	200024b0 	.word	0x200024b0

0800a1dc <__sfputc_r>:
 800a1dc:	6893      	ldr	r3, [r2, #8]
 800a1de:	b410      	push	{r4}
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	6093      	str	r3, [r2, #8]
 800a1e6:	da07      	bge.n	800a1f8 <__sfputc_r+0x1c>
 800a1e8:	6994      	ldr	r4, [r2, #24]
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	db01      	blt.n	800a1f2 <__sfputc_r+0x16>
 800a1ee:	290a      	cmp	r1, #10
 800a1f0:	d102      	bne.n	800a1f8 <__sfputc_r+0x1c>
 800a1f2:	bc10      	pop	{r4}
 800a1f4:	f000 bae0 	b.w	800a7b8 <__swbuf_r>
 800a1f8:	6813      	ldr	r3, [r2, #0]
 800a1fa:	1c58      	adds	r0, r3, #1
 800a1fc:	6010      	str	r0, [r2, #0]
 800a1fe:	7019      	strb	r1, [r3, #0]
 800a200:	4608      	mov	r0, r1
 800a202:	bc10      	pop	{r4}
 800a204:	4770      	bx	lr

0800a206 <__sfputs_r>:
 800a206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	4614      	mov	r4, r2
 800a20e:	18d5      	adds	r5, r2, r3
 800a210:	42ac      	cmp	r4, r5
 800a212:	d101      	bne.n	800a218 <__sfputs_r+0x12>
 800a214:	2000      	movs	r0, #0
 800a216:	e007      	b.n	800a228 <__sfputs_r+0x22>
 800a218:	463a      	mov	r2, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	f7ff ffdc 	bl	800a1dc <__sfputc_r>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d1f3      	bne.n	800a210 <__sfputs_r+0xa>
 800a228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a22c <_vfiprintf_r>:
 800a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a230:	460d      	mov	r5, r1
 800a232:	4614      	mov	r4, r2
 800a234:	4698      	mov	r8, r3
 800a236:	4606      	mov	r6, r0
 800a238:	b09d      	sub	sp, #116	; 0x74
 800a23a:	b118      	cbz	r0, 800a244 <_vfiprintf_r+0x18>
 800a23c:	6983      	ldr	r3, [r0, #24]
 800a23e:	b90b      	cbnz	r3, 800a244 <_vfiprintf_r+0x18>
 800a240:	f000 fc98 	bl	800ab74 <__sinit>
 800a244:	4b89      	ldr	r3, [pc, #548]	; (800a46c <_vfiprintf_r+0x240>)
 800a246:	429d      	cmp	r5, r3
 800a248:	d11b      	bne.n	800a282 <_vfiprintf_r+0x56>
 800a24a:	6875      	ldr	r5, [r6, #4]
 800a24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24e:	07d9      	lsls	r1, r3, #31
 800a250:	d405      	bmi.n	800a25e <_vfiprintf_r+0x32>
 800a252:	89ab      	ldrh	r3, [r5, #12]
 800a254:	059a      	lsls	r2, r3, #22
 800a256:	d402      	bmi.n	800a25e <_vfiprintf_r+0x32>
 800a258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25a:	f000 fd29 	bl	800acb0 <__retarget_lock_acquire_recursive>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	071b      	lsls	r3, r3, #28
 800a262:	d501      	bpl.n	800a268 <_vfiprintf_r+0x3c>
 800a264:	692b      	ldr	r3, [r5, #16]
 800a266:	b9eb      	cbnz	r3, 800a2a4 <_vfiprintf_r+0x78>
 800a268:	4629      	mov	r1, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	f000 faf6 	bl	800a85c <__swsetup_r>
 800a270:	b1c0      	cbz	r0, 800a2a4 <_vfiprintf_r+0x78>
 800a272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a274:	07dc      	lsls	r4, r3, #31
 800a276:	d50e      	bpl.n	800a296 <_vfiprintf_r+0x6a>
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	b01d      	add	sp, #116	; 0x74
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	4b7b      	ldr	r3, [pc, #492]	; (800a470 <_vfiprintf_r+0x244>)
 800a284:	429d      	cmp	r5, r3
 800a286:	d101      	bne.n	800a28c <_vfiprintf_r+0x60>
 800a288:	68b5      	ldr	r5, [r6, #8]
 800a28a:	e7df      	b.n	800a24c <_vfiprintf_r+0x20>
 800a28c:	4b79      	ldr	r3, [pc, #484]	; (800a474 <_vfiprintf_r+0x248>)
 800a28e:	429d      	cmp	r5, r3
 800a290:	bf08      	it	eq
 800a292:	68f5      	ldreq	r5, [r6, #12]
 800a294:	e7da      	b.n	800a24c <_vfiprintf_r+0x20>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	0598      	lsls	r0, r3, #22
 800a29a:	d4ed      	bmi.n	800a278 <_vfiprintf_r+0x4c>
 800a29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29e:	f000 fd08 	bl	800acb2 <__retarget_lock_release_recursive>
 800a2a2:	e7e9      	b.n	800a278 <_vfiprintf_r+0x4c>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f04f 0901 	mov.w	r9, #1
 800a2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a478 <_vfiprintf_r+0x24c>
 800a2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	469a      	mov	sl, r3
 800a2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c8:	b10a      	cbz	r2, 800a2ce <_vfiprintf_r+0xa2>
 800a2ca:	2a25      	cmp	r2, #37	; 0x25
 800a2cc:	d1f9      	bne.n	800a2c2 <_vfiprintf_r+0x96>
 800a2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d2:	d00b      	beq.n	800a2ec <_vfiprintf_r+0xc0>
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff93 	bl	800a206 <__sfputs_r>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f000 80aa 	beq.w	800a43a <_vfiprintf_r+0x20e>
 800a2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e8:	445a      	add	r2, fp
 800a2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 80a2 	beq.w	800a43a <_vfiprintf_r+0x20e>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a300:	f10a 0a01 	add.w	sl, sl, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a30c:	931a      	str	r3, [sp, #104]	; 0x68
 800a30e:	4654      	mov	r4, sl
 800a310:	2205      	movs	r2, #5
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	4858      	ldr	r0, [pc, #352]	; (800a478 <_vfiprintf_r+0x24c>)
 800a318:	f000 fd32 	bl	800ad80 <memchr>
 800a31c:	9a04      	ldr	r2, [sp, #16]
 800a31e:	b9d8      	cbnz	r0, 800a358 <_vfiprintf_r+0x12c>
 800a320:	06d1      	lsls	r1, r2, #27
 800a322:	bf44      	itt	mi
 800a324:	2320      	movmi	r3, #32
 800a326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a32a:	0713      	lsls	r3, r2, #28
 800a32c:	bf44      	itt	mi
 800a32e:	232b      	movmi	r3, #43	; 0x2b
 800a330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b2a      	cmp	r3, #42	; 0x2a
 800a33a:	d015      	beq.n	800a368 <_vfiprintf_r+0x13c>
 800a33c:	4654      	mov	r4, sl
 800a33e:	2000      	movs	r0, #0
 800a340:	f04f 0c0a 	mov.w	ip, #10
 800a344:	9a07      	ldr	r2, [sp, #28]
 800a346:	4621      	mov	r1, r4
 800a348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a34c:	3b30      	subs	r3, #48	; 0x30
 800a34e:	2b09      	cmp	r3, #9
 800a350:	d94e      	bls.n	800a3f0 <_vfiprintf_r+0x1c4>
 800a352:	b1b0      	cbz	r0, 800a382 <_vfiprintf_r+0x156>
 800a354:	9207      	str	r2, [sp, #28]
 800a356:	e014      	b.n	800a382 <_vfiprintf_r+0x156>
 800a358:	eba0 0308 	sub.w	r3, r0, r8
 800a35c:	fa09 f303 	lsl.w	r3, r9, r3
 800a360:	4313      	orrs	r3, r2
 800a362:	46a2      	mov	sl, r4
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	e7d2      	b.n	800a30e <_vfiprintf_r+0xe2>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	1d19      	adds	r1, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	9103      	str	r1, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfbb      	ittet	lt
 800a374:	425b      	neglt	r3, r3
 800a376:	f042 0202 	orrlt.w	r2, r2, #2
 800a37a:	9307      	strge	r3, [sp, #28]
 800a37c:	9307      	strlt	r3, [sp, #28]
 800a37e:	bfb8      	it	lt
 800a380:	9204      	strlt	r2, [sp, #16]
 800a382:	7823      	ldrb	r3, [r4, #0]
 800a384:	2b2e      	cmp	r3, #46	; 0x2e
 800a386:	d10c      	bne.n	800a3a2 <_vfiprintf_r+0x176>
 800a388:	7863      	ldrb	r3, [r4, #1]
 800a38a:	2b2a      	cmp	r3, #42	; 0x2a
 800a38c:	d135      	bne.n	800a3fa <_vfiprintf_r+0x1ce>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	3402      	adds	r4, #2
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	9203      	str	r2, [sp, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfb8      	it	lt
 800a39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a47c <_vfiprintf_r+0x250>
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	7821      	ldrb	r1, [r4, #0]
 800a3ac:	f000 fce8 	bl	800ad80 <memchr>
 800a3b0:	b140      	cbz	r0, 800a3c4 <_vfiprintf_r+0x198>
 800a3b2:	2340      	movs	r3, #64	; 0x40
 800a3b4:	eba0 000a 	sub.w	r0, r0, sl
 800a3b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	3401      	adds	r4, #1
 800a3c0:	4303      	orrs	r3, r0
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	482d      	ldr	r0, [pc, #180]	; (800a480 <_vfiprintf_r+0x254>)
 800a3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3d0:	f000 fcd6 	bl	800ad80 <memchr>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d03f      	beq.n	800a458 <_vfiprintf_r+0x22c>
 800a3d8:	4b2a      	ldr	r3, [pc, #168]	; (800a484 <_vfiprintf_r+0x258>)
 800a3da:	bb1b      	cbnz	r3, 800a424 <_vfiprintf_r+0x1f8>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	3307      	adds	r3, #7
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	443b      	add	r3, r7
 800a3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ee:	e767      	b.n	800a2c0 <_vfiprintf_r+0x94>
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f8:	e7a5      	b.n	800a346 <_vfiprintf_r+0x11a>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f04f 0c0a 	mov.w	ip, #10
 800a400:	4619      	mov	r1, r3
 800a402:	3401      	adds	r4, #1
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	4620      	mov	r0, r4
 800a408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40c:	3a30      	subs	r2, #48	; 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d903      	bls.n	800a41a <_vfiprintf_r+0x1ee>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0c5      	beq.n	800a3a2 <_vfiprintf_r+0x176>
 800a416:	9105      	str	r1, [sp, #20]
 800a418:	e7c3      	b.n	800a3a2 <_vfiprintf_r+0x176>
 800a41a:	4604      	mov	r4, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a422:	e7f0      	b.n	800a406 <_vfiprintf_r+0x1da>
 800a424:	ab03      	add	r3, sp, #12
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	462a      	mov	r2, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	4b16      	ldr	r3, [pc, #88]	; (800a488 <_vfiprintf_r+0x25c>)
 800a42e:	a904      	add	r1, sp, #16
 800a430:	f3af 8000 	nop.w
 800a434:	4607      	mov	r7, r0
 800a436:	1c78      	adds	r0, r7, #1
 800a438:	d1d6      	bne.n	800a3e8 <_vfiprintf_r+0x1bc>
 800a43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a43c:	07d9      	lsls	r1, r3, #31
 800a43e:	d405      	bmi.n	800a44c <_vfiprintf_r+0x220>
 800a440:	89ab      	ldrh	r3, [r5, #12]
 800a442:	059a      	lsls	r2, r3, #22
 800a444:	d402      	bmi.n	800a44c <_vfiprintf_r+0x220>
 800a446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a448:	f000 fc33 	bl	800acb2 <__retarget_lock_release_recursive>
 800a44c:	89ab      	ldrh	r3, [r5, #12]
 800a44e:	065b      	lsls	r3, r3, #25
 800a450:	f53f af12 	bmi.w	800a278 <_vfiprintf_r+0x4c>
 800a454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a456:	e711      	b.n	800a27c <_vfiprintf_r+0x50>
 800a458:	ab03      	add	r3, sp, #12
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	462a      	mov	r2, r5
 800a45e:	4630      	mov	r0, r6
 800a460:	4b09      	ldr	r3, [pc, #36]	; (800a488 <_vfiprintf_r+0x25c>)
 800a462:	a904      	add	r1, sp, #16
 800a464:	f000 f882 	bl	800a56c <_printf_i>
 800a468:	e7e4      	b.n	800a434 <_vfiprintf_r+0x208>
 800a46a:	bf00      	nop
 800a46c:	0800c5b8 	.word	0x0800c5b8
 800a470:	0800c5d8 	.word	0x0800c5d8
 800a474:	0800c598 	.word	0x0800c598
 800a478:	0800c562 	.word	0x0800c562
 800a47c:	0800c568 	.word	0x0800c568
 800a480:	0800c56c 	.word	0x0800c56c
 800a484:	00000000 	.word	0x00000000
 800a488:	0800a207 	.word	0x0800a207

0800a48c <_printf_common>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	4616      	mov	r6, r2
 800a492:	4699      	mov	r9, r3
 800a494:	688a      	ldr	r2, [r1, #8]
 800a496:	690b      	ldr	r3, [r1, #16]
 800a498:	4607      	mov	r7, r0
 800a49a:	4293      	cmp	r3, r2
 800a49c:	bfb8      	it	lt
 800a49e:	4613      	movlt	r3, r2
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4ac:	b10a      	cbz	r2, 800a4b2 <_printf_common+0x26>
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	6033      	str	r3, [r6, #0]
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	0699      	lsls	r1, r3, #26
 800a4b6:	bf42      	ittt	mi
 800a4b8:	6833      	ldrmi	r3, [r6, #0]
 800a4ba:	3302      	addmi	r3, #2
 800a4bc:	6033      	strmi	r3, [r6, #0]
 800a4be:	6825      	ldr	r5, [r4, #0]
 800a4c0:	f015 0506 	ands.w	r5, r5, #6
 800a4c4:	d106      	bne.n	800a4d4 <_printf_common+0x48>
 800a4c6:	f104 0a19 	add.w	sl, r4, #25
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	6832      	ldr	r2, [r6, #0]
 800a4ce:	1a9b      	subs	r3, r3, r2
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	dc28      	bgt.n	800a526 <_printf_common+0x9a>
 800a4d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4d8:	1e13      	subs	r3, r2, #0
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	bf18      	it	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	0692      	lsls	r2, r2, #26
 800a4e2:	d42d      	bmi.n	800a540 <_printf_common+0xb4>
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ec:	47c0      	blx	r8
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d020      	beq.n	800a534 <_printf_common+0xa8>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	68e5      	ldr	r5, [r4, #12]
 800a4f6:	f003 0306 	and.w	r3, r3, #6
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	bf18      	it	ne
 800a4fe:	2500      	movne	r5, #0
 800a500:	6832      	ldr	r2, [r6, #0]
 800a502:	f04f 0600 	mov.w	r6, #0
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	bf08      	it	eq
 800a50a:	1aad      	subeq	r5, r5, r2
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	bf08      	it	eq
 800a510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a514:	4293      	cmp	r3, r2
 800a516:	bfc4      	itt	gt
 800a518:	1a9b      	subgt	r3, r3, r2
 800a51a:	18ed      	addgt	r5, r5, r3
 800a51c:	341a      	adds	r4, #26
 800a51e:	42b5      	cmp	r5, r6
 800a520:	d11a      	bne.n	800a558 <_printf_common+0xcc>
 800a522:	2000      	movs	r0, #0
 800a524:	e008      	b.n	800a538 <_printf_common+0xac>
 800a526:	2301      	movs	r3, #1
 800a528:	4652      	mov	r2, sl
 800a52a:	4649      	mov	r1, r9
 800a52c:	4638      	mov	r0, r7
 800a52e:	47c0      	blx	r8
 800a530:	3001      	adds	r0, #1
 800a532:	d103      	bne.n	800a53c <_printf_common+0xb0>
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53c:	3501      	adds	r5, #1
 800a53e:	e7c4      	b.n	800a4ca <_printf_common+0x3e>
 800a540:	2030      	movs	r0, #48	; 0x30
 800a542:	18e1      	adds	r1, r4, r3
 800a544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a54e:	4422      	add	r2, r4
 800a550:	3302      	adds	r3, #2
 800a552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a556:	e7c5      	b.n	800a4e4 <_printf_common+0x58>
 800a558:	2301      	movs	r3, #1
 800a55a:	4622      	mov	r2, r4
 800a55c:	4649      	mov	r1, r9
 800a55e:	4638      	mov	r0, r7
 800a560:	47c0      	blx	r8
 800a562:	3001      	adds	r0, #1
 800a564:	d0e6      	beq.n	800a534 <_printf_common+0xa8>
 800a566:	3601      	adds	r6, #1
 800a568:	e7d9      	b.n	800a51e <_printf_common+0x92>
	...

0800a56c <_printf_i>:
 800a56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	7e0f      	ldrb	r7, [r1, #24]
 800a572:	4691      	mov	r9, r2
 800a574:	2f78      	cmp	r7, #120	; 0x78
 800a576:	4680      	mov	r8, r0
 800a578:	460c      	mov	r4, r1
 800a57a:	469a      	mov	sl, r3
 800a57c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a582:	d807      	bhi.n	800a594 <_printf_i+0x28>
 800a584:	2f62      	cmp	r7, #98	; 0x62
 800a586:	d80a      	bhi.n	800a59e <_printf_i+0x32>
 800a588:	2f00      	cmp	r7, #0
 800a58a:	f000 80d9 	beq.w	800a740 <_printf_i+0x1d4>
 800a58e:	2f58      	cmp	r7, #88	; 0x58
 800a590:	f000 80a4 	beq.w	800a6dc <_printf_i+0x170>
 800a594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a59c:	e03a      	b.n	800a614 <_printf_i+0xa8>
 800a59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5a2:	2b15      	cmp	r3, #21
 800a5a4:	d8f6      	bhi.n	800a594 <_printf_i+0x28>
 800a5a6:	a101      	add	r1, pc, #4	; (adr r1, 800a5ac <_printf_i+0x40>)
 800a5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5ac:	0800a605 	.word	0x0800a605
 800a5b0:	0800a619 	.word	0x0800a619
 800a5b4:	0800a595 	.word	0x0800a595
 800a5b8:	0800a595 	.word	0x0800a595
 800a5bc:	0800a595 	.word	0x0800a595
 800a5c0:	0800a595 	.word	0x0800a595
 800a5c4:	0800a619 	.word	0x0800a619
 800a5c8:	0800a595 	.word	0x0800a595
 800a5cc:	0800a595 	.word	0x0800a595
 800a5d0:	0800a595 	.word	0x0800a595
 800a5d4:	0800a595 	.word	0x0800a595
 800a5d8:	0800a727 	.word	0x0800a727
 800a5dc:	0800a649 	.word	0x0800a649
 800a5e0:	0800a709 	.word	0x0800a709
 800a5e4:	0800a595 	.word	0x0800a595
 800a5e8:	0800a595 	.word	0x0800a595
 800a5ec:	0800a749 	.word	0x0800a749
 800a5f0:	0800a595 	.word	0x0800a595
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a595 	.word	0x0800a595
 800a5fc:	0800a595 	.word	0x0800a595
 800a600:	0800a711 	.word	0x0800a711
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	1d1a      	adds	r2, r3, #4
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	602a      	str	r2, [r5, #0]
 800a60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a614:	2301      	movs	r3, #1
 800a616:	e0a4      	b.n	800a762 <_printf_i+0x1f6>
 800a618:	6820      	ldr	r0, [r4, #0]
 800a61a:	6829      	ldr	r1, [r5, #0]
 800a61c:	0606      	lsls	r6, r0, #24
 800a61e:	f101 0304 	add.w	r3, r1, #4
 800a622:	d50a      	bpl.n	800a63a <_printf_i+0xce>
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	2e00      	cmp	r6, #0
 800a62a:	da03      	bge.n	800a634 <_printf_i+0xc8>
 800a62c:	232d      	movs	r3, #45	; 0x2d
 800a62e:	4276      	negs	r6, r6
 800a630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a634:	230a      	movs	r3, #10
 800a636:	485e      	ldr	r0, [pc, #376]	; (800a7b0 <_printf_i+0x244>)
 800a638:	e019      	b.n	800a66e <_printf_i+0x102>
 800a63a:	680e      	ldr	r6, [r1, #0]
 800a63c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	bf18      	it	ne
 800a644:	b236      	sxthne	r6, r6
 800a646:	e7ef      	b.n	800a628 <_printf_i+0xbc>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1d19      	adds	r1, r3, #4
 800a64e:	6029      	str	r1, [r5, #0]
 800a650:	0601      	lsls	r1, r0, #24
 800a652:	d501      	bpl.n	800a658 <_printf_i+0xec>
 800a654:	681e      	ldr	r6, [r3, #0]
 800a656:	e002      	b.n	800a65e <_printf_i+0xf2>
 800a658:	0646      	lsls	r6, r0, #25
 800a65a:	d5fb      	bpl.n	800a654 <_printf_i+0xe8>
 800a65c:	881e      	ldrh	r6, [r3, #0]
 800a65e:	2f6f      	cmp	r7, #111	; 0x6f
 800a660:	bf0c      	ite	eq
 800a662:	2308      	moveq	r3, #8
 800a664:	230a      	movne	r3, #10
 800a666:	4852      	ldr	r0, [pc, #328]	; (800a7b0 <_printf_i+0x244>)
 800a668:	2100      	movs	r1, #0
 800a66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a66e:	6865      	ldr	r5, [r4, #4]
 800a670:	2d00      	cmp	r5, #0
 800a672:	bfa8      	it	ge
 800a674:	6821      	ldrge	r1, [r4, #0]
 800a676:	60a5      	str	r5, [r4, #8]
 800a678:	bfa4      	itt	ge
 800a67a:	f021 0104 	bicge.w	r1, r1, #4
 800a67e:	6021      	strge	r1, [r4, #0]
 800a680:	b90e      	cbnz	r6, 800a686 <_printf_i+0x11a>
 800a682:	2d00      	cmp	r5, #0
 800a684:	d04d      	beq.n	800a722 <_printf_i+0x1b6>
 800a686:	4615      	mov	r5, r2
 800a688:	fbb6 f1f3 	udiv	r1, r6, r3
 800a68c:	fb03 6711 	mls	r7, r3, r1, r6
 800a690:	5dc7      	ldrb	r7, [r0, r7]
 800a692:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a696:	4637      	mov	r7, r6
 800a698:	42bb      	cmp	r3, r7
 800a69a:	460e      	mov	r6, r1
 800a69c:	d9f4      	bls.n	800a688 <_printf_i+0x11c>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d10b      	bne.n	800a6ba <_printf_i+0x14e>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	07de      	lsls	r6, r3, #31
 800a6a6:	d508      	bpl.n	800a6ba <_printf_i+0x14e>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	6861      	ldr	r1, [r4, #4]
 800a6ac:	4299      	cmp	r1, r3
 800a6ae:	bfde      	ittt	le
 800a6b0:	2330      	movle	r3, #48	; 0x30
 800a6b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6ba:	1b52      	subs	r2, r2, r5
 800a6bc:	6122      	str	r2, [r4, #16]
 800a6be:	464b      	mov	r3, r9
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	f8cd a000 	str.w	sl, [sp]
 800a6c8:	aa03      	add	r2, sp, #12
 800a6ca:	f7ff fedf 	bl	800a48c <_printf_common>
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d14c      	bne.n	800a76c <_printf_i+0x200>
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	b004      	add	sp, #16
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	4834      	ldr	r0, [pc, #208]	; (800a7b0 <_printf_i+0x244>)
 800a6de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6e2:	6829      	ldr	r1, [r5, #0]
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6ea:	6029      	str	r1, [r5, #0]
 800a6ec:	061d      	lsls	r5, r3, #24
 800a6ee:	d514      	bpl.n	800a71a <_printf_i+0x1ae>
 800a6f0:	07df      	lsls	r7, r3, #31
 800a6f2:	bf44      	itt	mi
 800a6f4:	f043 0320 	orrmi.w	r3, r3, #32
 800a6f8:	6023      	strmi	r3, [r4, #0]
 800a6fa:	b91e      	cbnz	r6, 800a704 <_printf_i+0x198>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	f023 0320 	bic.w	r3, r3, #32
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	2310      	movs	r3, #16
 800a706:	e7af      	b.n	800a668 <_printf_i+0xfc>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	f043 0320 	orr.w	r3, r3, #32
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	2378      	movs	r3, #120	; 0x78
 800a712:	4828      	ldr	r0, [pc, #160]	; (800a7b4 <_printf_i+0x248>)
 800a714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a718:	e7e3      	b.n	800a6e2 <_printf_i+0x176>
 800a71a:	0659      	lsls	r1, r3, #25
 800a71c:	bf48      	it	mi
 800a71e:	b2b6      	uxthmi	r6, r6
 800a720:	e7e6      	b.n	800a6f0 <_printf_i+0x184>
 800a722:	4615      	mov	r5, r2
 800a724:	e7bb      	b.n	800a69e <_printf_i+0x132>
 800a726:	682b      	ldr	r3, [r5, #0]
 800a728:	6826      	ldr	r6, [r4, #0]
 800a72a:	1d18      	adds	r0, r3, #4
 800a72c:	6961      	ldr	r1, [r4, #20]
 800a72e:	6028      	str	r0, [r5, #0]
 800a730:	0635      	lsls	r5, r6, #24
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	d501      	bpl.n	800a73a <_printf_i+0x1ce>
 800a736:	6019      	str	r1, [r3, #0]
 800a738:	e002      	b.n	800a740 <_printf_i+0x1d4>
 800a73a:	0670      	lsls	r0, r6, #25
 800a73c:	d5fb      	bpl.n	800a736 <_printf_i+0x1ca>
 800a73e:	8019      	strh	r1, [r3, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	4615      	mov	r5, r2
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	e7ba      	b.n	800a6be <_printf_i+0x152>
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	2100      	movs	r1, #0
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	681d      	ldr	r5, [r3, #0]
 800a752:	6862      	ldr	r2, [r4, #4]
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fb13 	bl	800ad80 <memchr>
 800a75a:	b108      	cbz	r0, 800a760 <_printf_i+0x1f4>
 800a75c:	1b40      	subs	r0, r0, r5
 800a75e:	6060      	str	r0, [r4, #4]
 800a760:	6863      	ldr	r3, [r4, #4]
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	2300      	movs	r3, #0
 800a766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a76a:	e7a8      	b.n	800a6be <_printf_i+0x152>
 800a76c:	462a      	mov	r2, r5
 800a76e:	4649      	mov	r1, r9
 800a770:	4640      	mov	r0, r8
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	47d0      	blx	sl
 800a776:	3001      	adds	r0, #1
 800a778:	d0ab      	beq.n	800a6d2 <_printf_i+0x166>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	079b      	lsls	r3, r3, #30
 800a77e:	d413      	bmi.n	800a7a8 <_printf_i+0x23c>
 800a780:	68e0      	ldr	r0, [r4, #12]
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	4298      	cmp	r0, r3
 800a786:	bfb8      	it	lt
 800a788:	4618      	movlt	r0, r3
 800a78a:	e7a4      	b.n	800a6d6 <_printf_i+0x16a>
 800a78c:	2301      	movs	r3, #1
 800a78e:	4632      	mov	r2, r6
 800a790:	4649      	mov	r1, r9
 800a792:	4640      	mov	r0, r8
 800a794:	47d0      	blx	sl
 800a796:	3001      	adds	r0, #1
 800a798:	d09b      	beq.n	800a6d2 <_printf_i+0x166>
 800a79a:	3501      	adds	r5, #1
 800a79c:	68e3      	ldr	r3, [r4, #12]
 800a79e:	9903      	ldr	r1, [sp, #12]
 800a7a0:	1a5b      	subs	r3, r3, r1
 800a7a2:	42ab      	cmp	r3, r5
 800a7a4:	dcf2      	bgt.n	800a78c <_printf_i+0x220>
 800a7a6:	e7eb      	b.n	800a780 <_printf_i+0x214>
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	f104 0619 	add.w	r6, r4, #25
 800a7ae:	e7f5      	b.n	800a79c <_printf_i+0x230>
 800a7b0:	0800c573 	.word	0x0800c573
 800a7b4:	0800c584 	.word	0x0800c584

0800a7b8 <__swbuf_r>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	460e      	mov	r6, r1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b118      	cbz	r0, 800a7ca <__swbuf_r+0x12>
 800a7c2:	6983      	ldr	r3, [r0, #24]
 800a7c4:	b90b      	cbnz	r3, 800a7ca <__swbuf_r+0x12>
 800a7c6:	f000 f9d5 	bl	800ab74 <__sinit>
 800a7ca:	4b21      	ldr	r3, [pc, #132]	; (800a850 <__swbuf_r+0x98>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d12b      	bne.n	800a828 <__swbuf_r+0x70>
 800a7d0:	686c      	ldr	r4, [r5, #4]
 800a7d2:	69a3      	ldr	r3, [r4, #24]
 800a7d4:	60a3      	str	r3, [r4, #8]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	071a      	lsls	r2, r3, #28
 800a7da:	d52f      	bpl.n	800a83c <__swbuf_r+0x84>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	b36b      	cbz	r3, 800a83c <__swbuf_r+0x84>
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	6820      	ldr	r0, [r4, #0]
 800a7e4:	b2f6      	uxtb	r6, r6
 800a7e6:	1ac0      	subs	r0, r0, r3
 800a7e8:	6963      	ldr	r3, [r4, #20]
 800a7ea:	4637      	mov	r7, r6
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	dc04      	bgt.n	800a7fa <__swbuf_r+0x42>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f92a 	bl	800aa4c <_fflush_r>
 800a7f8:	bb30      	cbnz	r0, 800a848 <__swbuf_r+0x90>
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	701e      	strb	r6, [r3, #0]
 800a80a:	6963      	ldr	r3, [r4, #20]
 800a80c:	4283      	cmp	r3, r0
 800a80e:	d004      	beq.n	800a81a <__swbuf_r+0x62>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	07db      	lsls	r3, r3, #31
 800a814:	d506      	bpl.n	800a824 <__swbuf_r+0x6c>
 800a816:	2e0a      	cmp	r6, #10
 800a818:	d104      	bne.n	800a824 <__swbuf_r+0x6c>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4628      	mov	r0, r5
 800a81e:	f000 f915 	bl	800aa4c <_fflush_r>
 800a822:	b988      	cbnz	r0, 800a848 <__swbuf_r+0x90>
 800a824:	4638      	mov	r0, r7
 800a826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <__swbuf_r+0x9c>)
 800a82a:	429c      	cmp	r4, r3
 800a82c:	d101      	bne.n	800a832 <__swbuf_r+0x7a>
 800a82e:	68ac      	ldr	r4, [r5, #8]
 800a830:	e7cf      	b.n	800a7d2 <__swbuf_r+0x1a>
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <__swbuf_r+0xa0>)
 800a834:	429c      	cmp	r4, r3
 800a836:	bf08      	it	eq
 800a838:	68ec      	ldreq	r4, [r5, #12]
 800a83a:	e7ca      	b.n	800a7d2 <__swbuf_r+0x1a>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 f80c 	bl	800a85c <__swsetup_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	d0cb      	beq.n	800a7e0 <__swbuf_r+0x28>
 800a848:	f04f 37ff 	mov.w	r7, #4294967295
 800a84c:	e7ea      	b.n	800a824 <__swbuf_r+0x6c>
 800a84e:	bf00      	nop
 800a850:	0800c5b8 	.word	0x0800c5b8
 800a854:	0800c5d8 	.word	0x0800c5d8
 800a858:	0800c598 	.word	0x0800c598

0800a85c <__swsetup_r>:
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <__swsetup_r+0xcc>)
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	4606      	mov	r6, r0
 800a864:	460c      	mov	r4, r1
 800a866:	b125      	cbz	r5, 800a872 <__swsetup_r+0x16>
 800a868:	69ab      	ldr	r3, [r5, #24]
 800a86a:	b913      	cbnz	r3, 800a872 <__swsetup_r+0x16>
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f981 	bl	800ab74 <__sinit>
 800a872:	4b2e      	ldr	r3, [pc, #184]	; (800a92c <__swsetup_r+0xd0>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d10f      	bne.n	800a898 <__swsetup_r+0x3c>
 800a878:	686c      	ldr	r4, [r5, #4]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a880:	0719      	lsls	r1, r3, #28
 800a882:	d42c      	bmi.n	800a8de <__swsetup_r+0x82>
 800a884:	06dd      	lsls	r5, r3, #27
 800a886:	d411      	bmi.n	800a8ac <__swsetup_r+0x50>
 800a888:	2309      	movs	r3, #9
 800a88a:	6033      	str	r3, [r6, #0]
 800a88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	e03e      	b.n	800a916 <__swsetup_r+0xba>
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <__swsetup_r+0xd4>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <__swsetup_r+0x46>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7eb      	b.n	800a87a <__swsetup_r+0x1e>
 800a8a2:	4b24      	ldr	r3, [pc, #144]	; (800a934 <__swsetup_r+0xd8>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7e6      	b.n	800a87a <__swsetup_r+0x1e>
 800a8ac:	0758      	lsls	r0, r3, #29
 800a8ae:	d512      	bpl.n	800a8d6 <__swsetup_r+0x7a>
 800a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8b2:	b141      	cbz	r1, 800a8c6 <__swsetup_r+0x6a>
 800a8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	d002      	beq.n	800a8c2 <__swsetup_r+0x66>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fc45 	bl	800a14c <_free_r>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6063      	str	r3, [r4, #4]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f043 0308 	orr.w	r3, r3, #8
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	b94b      	cbnz	r3, 800a8f6 <__swsetup_r+0x9a>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ec:	d003      	beq.n	800a8f6 <__swsetup_r+0x9a>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 fa05 	bl	800ad00 <__smakebuf_r>
 800a8f6:	89a0      	ldrh	r0, [r4, #12]
 800a8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8fc:	f010 0301 	ands.w	r3, r0, #1
 800a900:	d00a      	beq.n	800a918 <__swsetup_r+0xbc>
 800a902:	2300      	movs	r3, #0
 800a904:	60a3      	str	r3, [r4, #8]
 800a906:	6963      	ldr	r3, [r4, #20]
 800a908:	425b      	negs	r3, r3
 800a90a:	61a3      	str	r3, [r4, #24]
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	b943      	cbnz	r3, 800a922 <__swsetup_r+0xc6>
 800a910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a914:	d1ba      	bne.n	800a88c <__swsetup_r+0x30>
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	0781      	lsls	r1, r0, #30
 800a91a:	bf58      	it	pl
 800a91c:	6963      	ldrpl	r3, [r4, #20]
 800a91e:	60a3      	str	r3, [r4, #8]
 800a920:	e7f4      	b.n	800a90c <__swsetup_r+0xb0>
 800a922:	2000      	movs	r0, #0
 800a924:	e7f7      	b.n	800a916 <__swsetup_r+0xba>
 800a926:	bf00      	nop
 800a928:	20000024 	.word	0x20000024
 800a92c:	0800c5b8 	.word	0x0800c5b8
 800a930:	0800c5d8 	.word	0x0800c5d8
 800a934:	0800c598 	.word	0x0800c598

0800a938 <abort>:
 800a938:	2006      	movs	r0, #6
 800a93a:	b508      	push	{r3, lr}
 800a93c:	f000 fa56 	bl	800adec <raise>
 800a940:	2001      	movs	r0, #1
 800a942:	f7f7 fea4 	bl	800268e <_exit>
	...

0800a948 <__sflush_r>:
 800a948:	898a      	ldrh	r2, [r1, #12]
 800a94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94c:	4605      	mov	r5, r0
 800a94e:	0710      	lsls	r0, r2, #28
 800a950:	460c      	mov	r4, r1
 800a952:	d457      	bmi.n	800aa04 <__sflush_r+0xbc>
 800a954:	684b      	ldr	r3, [r1, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	dc04      	bgt.n	800a964 <__sflush_r+0x1c>
 800a95a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc01      	bgt.n	800a964 <__sflush_r+0x1c>
 800a960:	2000      	movs	r0, #0
 800a962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a966:	2e00      	cmp	r6, #0
 800a968:	d0fa      	beq.n	800a960 <__sflush_r+0x18>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a970:	682f      	ldr	r7, [r5, #0]
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	d032      	beq.n	800a9dc <__sflush_r+0x94>
 800a976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	075a      	lsls	r2, r3, #29
 800a97c:	d505      	bpl.n	800a98a <__sflush_r+0x42>
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	1ac0      	subs	r0, r0, r3
 800a982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a984:	b10b      	cbz	r3, 800a98a <__sflush_r+0x42>
 800a986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a988:	1ac0      	subs	r0, r0, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	4602      	mov	r2, r0
 800a98e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a990:	4628      	mov	r0, r5
 800a992:	6a21      	ldr	r1, [r4, #32]
 800a994:	47b0      	blx	r6
 800a996:	1c43      	adds	r3, r0, #1
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	d106      	bne.n	800a9aa <__sflush_r+0x62>
 800a99c:	6829      	ldr	r1, [r5, #0]
 800a99e:	291d      	cmp	r1, #29
 800a9a0:	d82c      	bhi.n	800a9fc <__sflush_r+0xb4>
 800a9a2:	4a29      	ldr	r2, [pc, #164]	; (800aa48 <__sflush_r+0x100>)
 800a9a4:	40ca      	lsrs	r2, r1
 800a9a6:	07d6      	lsls	r6, r2, #31
 800a9a8:	d528      	bpl.n	800a9fc <__sflush_r+0xb4>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6062      	str	r2, [r4, #4]
 800a9ae:	6922      	ldr	r2, [r4, #16]
 800a9b0:	04d9      	lsls	r1, r3, #19
 800a9b2:	6022      	str	r2, [r4, #0]
 800a9b4:	d504      	bpl.n	800a9c0 <__sflush_r+0x78>
 800a9b6:	1c42      	adds	r2, r0, #1
 800a9b8:	d101      	bne.n	800a9be <__sflush_r+0x76>
 800a9ba:	682b      	ldr	r3, [r5, #0]
 800a9bc:	b903      	cbnz	r3, 800a9c0 <__sflush_r+0x78>
 800a9be:	6560      	str	r0, [r4, #84]	; 0x54
 800a9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9c2:	602f      	str	r7, [r5, #0]
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d0cb      	beq.n	800a960 <__sflush_r+0x18>
 800a9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	d002      	beq.n	800a9d6 <__sflush_r+0x8e>
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f7ff fbbb 	bl	800a14c <_free_r>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9da:	e7c2      	b.n	800a962 <__sflush_r+0x1a>
 800a9dc:	6a21      	ldr	r1, [r4, #32]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b0      	blx	r6
 800a9e4:	1c41      	adds	r1, r0, #1
 800a9e6:	d1c7      	bne.n	800a978 <__sflush_r+0x30>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0c4      	beq.n	800a978 <__sflush_r+0x30>
 800a9ee:	2b1d      	cmp	r3, #29
 800a9f0:	d001      	beq.n	800a9f6 <__sflush_r+0xae>
 800a9f2:	2b16      	cmp	r3, #22
 800a9f4:	d101      	bne.n	800a9fa <__sflush_r+0xb2>
 800a9f6:	602f      	str	r7, [r5, #0]
 800a9f8:	e7b2      	b.n	800a960 <__sflush_r+0x18>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	e7ae      	b.n	800a962 <__sflush_r+0x1a>
 800aa04:	690f      	ldr	r7, [r1, #16]
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	d0aa      	beq.n	800a960 <__sflush_r+0x18>
 800aa0a:	0793      	lsls	r3, r2, #30
 800aa0c:	bf18      	it	ne
 800aa0e:	2300      	movne	r3, #0
 800aa10:	680e      	ldr	r6, [r1, #0]
 800aa12:	bf08      	it	eq
 800aa14:	694b      	ldreq	r3, [r1, #20]
 800aa16:	1bf6      	subs	r6, r6, r7
 800aa18:	600f      	str	r7, [r1, #0]
 800aa1a:	608b      	str	r3, [r1, #8]
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	dd9f      	ble.n	800a960 <__sflush_r+0x18>
 800aa20:	4633      	mov	r3, r6
 800aa22:	463a      	mov	r2, r7
 800aa24:	4628      	mov	r0, r5
 800aa26:	6a21      	ldr	r1, [r4, #32]
 800aa28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa2c:	47e0      	blx	ip
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	dc06      	bgt.n	800aa40 <__sflush_r+0xf8>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3c:	81a3      	strh	r3, [r4, #12]
 800aa3e:	e790      	b.n	800a962 <__sflush_r+0x1a>
 800aa40:	4407      	add	r7, r0
 800aa42:	1a36      	subs	r6, r6, r0
 800aa44:	e7ea      	b.n	800aa1c <__sflush_r+0xd4>
 800aa46:	bf00      	nop
 800aa48:	20400001 	.word	0x20400001

0800aa4c <_fflush_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	690b      	ldr	r3, [r1, #16]
 800aa50:	4605      	mov	r5, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	b913      	cbnz	r3, 800aa5c <_fflush_r+0x10>
 800aa56:	2500      	movs	r5, #0
 800aa58:	4628      	mov	r0, r5
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	b118      	cbz	r0, 800aa66 <_fflush_r+0x1a>
 800aa5e:	6983      	ldr	r3, [r0, #24]
 800aa60:	b90b      	cbnz	r3, 800aa66 <_fflush_r+0x1a>
 800aa62:	f000 f887 	bl	800ab74 <__sinit>
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <_fflush_r+0x6c>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d11b      	bne.n	800aaa4 <_fflush_r+0x58>
 800aa6c:	686c      	ldr	r4, [r5, #4]
 800aa6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0ef      	beq.n	800aa56 <_fflush_r+0xa>
 800aa76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa78:	07d0      	lsls	r0, r2, #31
 800aa7a:	d404      	bmi.n	800aa86 <_fflush_r+0x3a>
 800aa7c:	0599      	lsls	r1, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_fflush_r+0x3a>
 800aa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa82:	f000 f915 	bl	800acb0 <__retarget_lock_acquire_recursive>
 800aa86:	4628      	mov	r0, r5
 800aa88:	4621      	mov	r1, r4
 800aa8a:	f7ff ff5d 	bl	800a948 <__sflush_r>
 800aa8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa90:	4605      	mov	r5, r0
 800aa92:	07da      	lsls	r2, r3, #31
 800aa94:	d4e0      	bmi.n	800aa58 <_fflush_r+0xc>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	059b      	lsls	r3, r3, #22
 800aa9a:	d4dd      	bmi.n	800aa58 <_fflush_r+0xc>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f000 f908 	bl	800acb2 <__retarget_lock_release_recursive>
 800aaa2:	e7d9      	b.n	800aa58 <_fflush_r+0xc>
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <_fflush_r+0x70>)
 800aaa6:	429c      	cmp	r4, r3
 800aaa8:	d101      	bne.n	800aaae <_fflush_r+0x62>
 800aaaa:	68ac      	ldr	r4, [r5, #8]
 800aaac:	e7df      	b.n	800aa6e <_fflush_r+0x22>
 800aaae:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <_fflush_r+0x74>)
 800aab0:	429c      	cmp	r4, r3
 800aab2:	bf08      	it	eq
 800aab4:	68ec      	ldreq	r4, [r5, #12]
 800aab6:	e7da      	b.n	800aa6e <_fflush_r+0x22>
 800aab8:	0800c5b8 	.word	0x0800c5b8
 800aabc:	0800c5d8 	.word	0x0800c5d8
 800aac0:	0800c598 	.word	0x0800c598

0800aac4 <std>:
 800aac4:	2300      	movs	r3, #0
 800aac6:	b510      	push	{r4, lr}
 800aac8:	4604      	mov	r4, r0
 800aaca:	e9c0 3300 	strd	r3, r3, [r0]
 800aace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aad2:	6083      	str	r3, [r0, #8]
 800aad4:	8181      	strh	r1, [r0, #12]
 800aad6:	6643      	str	r3, [r0, #100]	; 0x64
 800aad8:	81c2      	strh	r2, [r0, #14]
 800aada:	6183      	str	r3, [r0, #24]
 800aadc:	4619      	mov	r1, r3
 800aade:	2208      	movs	r2, #8
 800aae0:	305c      	adds	r0, #92	; 0x5c
 800aae2:	f7fd fec7 	bl	8008874 <memset>
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <std+0x38>)
 800aae8:	6224      	str	r4, [r4, #32]
 800aaea:	6263      	str	r3, [r4, #36]	; 0x24
 800aaec:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <std+0x3c>)
 800aaee:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaf0:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <std+0x40>)
 800aaf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <std+0x44>)
 800aaf6:	6323      	str	r3, [r4, #48]	; 0x30
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	bf00      	nop
 800aafc:	0800ae25 	.word	0x0800ae25
 800ab00:	0800ae47 	.word	0x0800ae47
 800ab04:	0800ae7f 	.word	0x0800ae7f
 800ab08:	0800aea3 	.word	0x0800aea3

0800ab0c <_cleanup_r>:
 800ab0c:	4901      	ldr	r1, [pc, #4]	; (800ab14 <_cleanup_r+0x8>)
 800ab0e:	f000 b8af 	b.w	800ac70 <_fwalk_reent>
 800ab12:	bf00      	nop
 800ab14:	0800aa4d 	.word	0x0800aa4d

0800ab18 <__sfmoreglue>:
 800ab18:	2268      	movs	r2, #104	; 0x68
 800ab1a:	b570      	push	{r4, r5, r6, lr}
 800ab1c:	1e4d      	subs	r5, r1, #1
 800ab1e:	4355      	muls	r5, r2
 800ab20:	460e      	mov	r6, r1
 800ab22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab26:	f7fe fbb9 	bl	800929c <_malloc_r>
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	b140      	cbz	r0, 800ab40 <__sfmoreglue+0x28>
 800ab2e:	2100      	movs	r1, #0
 800ab30:	e9c0 1600 	strd	r1, r6, [r0]
 800ab34:	300c      	adds	r0, #12
 800ab36:	60a0      	str	r0, [r4, #8]
 800ab38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab3c:	f7fd fe9a 	bl	8008874 <memset>
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}

0800ab44 <__sfp_lock_acquire>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__sfp_lock_acquire+0x8>)
 800ab46:	f000 b8b3 	b.w	800acb0 <__retarget_lock_acquire_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	200024bd 	.word	0x200024bd

0800ab50 <__sfp_lock_release>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__sfp_lock_release+0x8>)
 800ab52:	f000 b8ae 	b.w	800acb2 <__retarget_lock_release_recursive>
 800ab56:	bf00      	nop
 800ab58:	200024bd 	.word	0x200024bd

0800ab5c <__sinit_lock_acquire>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__sinit_lock_acquire+0x8>)
 800ab5e:	f000 b8a7 	b.w	800acb0 <__retarget_lock_acquire_recursive>
 800ab62:	bf00      	nop
 800ab64:	200024be 	.word	0x200024be

0800ab68 <__sinit_lock_release>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__sinit_lock_release+0x8>)
 800ab6a:	f000 b8a2 	b.w	800acb2 <__retarget_lock_release_recursive>
 800ab6e:	bf00      	nop
 800ab70:	200024be 	.word	0x200024be

0800ab74 <__sinit>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	4604      	mov	r4, r0
 800ab78:	f7ff fff0 	bl	800ab5c <__sinit_lock_acquire>
 800ab7c:	69a3      	ldr	r3, [r4, #24]
 800ab7e:	b11b      	cbz	r3, 800ab88 <__sinit+0x14>
 800ab80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab84:	f7ff bff0 	b.w	800ab68 <__sinit_lock_release>
 800ab88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab8e:	4b13      	ldr	r3, [pc, #76]	; (800abdc <__sinit+0x68>)
 800ab90:	4a13      	ldr	r2, [pc, #76]	; (800abe0 <__sinit+0x6c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	bf08      	it	eq
 800ab9a:	2301      	moveq	r3, #1
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bf08      	it	eq
 800aba0:	61a3      	streq	r3, [r4, #24]
 800aba2:	f000 f81f 	bl	800abe4 <__sfp>
 800aba6:	6060      	str	r0, [r4, #4]
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 f81b 	bl	800abe4 <__sfp>
 800abae:	60a0      	str	r0, [r4, #8]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 f817 	bl	800abe4 <__sfp>
 800abb6:	2200      	movs	r2, #0
 800abb8:	2104      	movs	r1, #4
 800abba:	60e0      	str	r0, [r4, #12]
 800abbc:	6860      	ldr	r0, [r4, #4]
 800abbe:	f7ff ff81 	bl	800aac4 <std>
 800abc2:	2201      	movs	r2, #1
 800abc4:	2109      	movs	r1, #9
 800abc6:	68a0      	ldr	r0, [r4, #8]
 800abc8:	f7ff ff7c 	bl	800aac4 <std>
 800abcc:	2202      	movs	r2, #2
 800abce:	2112      	movs	r1, #18
 800abd0:	68e0      	ldr	r0, [r4, #12]
 800abd2:	f7ff ff77 	bl	800aac4 <std>
 800abd6:	2301      	movs	r3, #1
 800abd8:	61a3      	str	r3, [r4, #24]
 800abda:	e7d1      	b.n	800ab80 <__sinit+0xc>
 800abdc:	0800c338 	.word	0x0800c338
 800abe0:	0800ab0d 	.word	0x0800ab0d

0800abe4 <__sfp>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	4607      	mov	r7, r0
 800abe8:	f7ff ffac 	bl	800ab44 <__sfp_lock_acquire>
 800abec:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <__sfp+0x84>)
 800abee:	681e      	ldr	r6, [r3, #0]
 800abf0:	69b3      	ldr	r3, [r6, #24]
 800abf2:	b913      	cbnz	r3, 800abfa <__sfp+0x16>
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff ffbd 	bl	800ab74 <__sinit>
 800abfa:	3648      	adds	r6, #72	; 0x48
 800abfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	d503      	bpl.n	800ac0c <__sfp+0x28>
 800ac04:	6833      	ldr	r3, [r6, #0]
 800ac06:	b30b      	cbz	r3, 800ac4c <__sfp+0x68>
 800ac08:	6836      	ldr	r6, [r6, #0]
 800ac0a:	e7f7      	b.n	800abfc <__sfp+0x18>
 800ac0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac10:	b9d5      	cbnz	r5, 800ac48 <__sfp+0x64>
 800ac12:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <__sfp+0x88>)
 800ac14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac18:	60e3      	str	r3, [r4, #12]
 800ac1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac1c:	f000 f847 	bl	800acae <__retarget_lock_init_recursive>
 800ac20:	f7ff ff96 	bl	800ab50 <__sfp_lock_release>
 800ac24:	2208      	movs	r2, #8
 800ac26:	4629      	mov	r1, r5
 800ac28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac30:	6025      	str	r5, [r4, #0]
 800ac32:	61a5      	str	r5, [r4, #24]
 800ac34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac38:	f7fd fe1c 	bl	8008874 <memset>
 800ac3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac44:	4620      	mov	r0, r4
 800ac46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac48:	3468      	adds	r4, #104	; 0x68
 800ac4a:	e7d9      	b.n	800ac00 <__sfp+0x1c>
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff ff62 	bl	800ab18 <__sfmoreglue>
 800ac54:	4604      	mov	r4, r0
 800ac56:	6030      	str	r0, [r6, #0]
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1d5      	bne.n	800ac08 <__sfp+0x24>
 800ac5c:	f7ff ff78 	bl	800ab50 <__sfp_lock_release>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	e7ee      	b.n	800ac44 <__sfp+0x60>
 800ac66:	bf00      	nop
 800ac68:	0800c338 	.word	0x0800c338
 800ac6c:	ffff0001 	.word	0xffff0001

0800ac70 <_fwalk_reent>:
 800ac70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac74:	4606      	mov	r6, r0
 800ac76:	4688      	mov	r8, r1
 800ac78:	2700      	movs	r7, #0
 800ac7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac82:	f1b9 0901 	subs.w	r9, r9, #1
 800ac86:	d505      	bpl.n	800ac94 <_fwalk_reent+0x24>
 800ac88:	6824      	ldr	r4, [r4, #0]
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d1f7      	bne.n	800ac7e <_fwalk_reent+0xe>
 800ac8e:	4638      	mov	r0, r7
 800ac90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac94:	89ab      	ldrh	r3, [r5, #12]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d907      	bls.n	800acaa <_fwalk_reent+0x3a>
 800ac9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	d003      	beq.n	800acaa <_fwalk_reent+0x3a>
 800aca2:	4629      	mov	r1, r5
 800aca4:	4630      	mov	r0, r6
 800aca6:	47c0      	blx	r8
 800aca8:	4307      	orrs	r7, r0
 800acaa:	3568      	adds	r5, #104	; 0x68
 800acac:	e7e9      	b.n	800ac82 <_fwalk_reent+0x12>

0800acae <__retarget_lock_init_recursive>:
 800acae:	4770      	bx	lr

0800acb0 <__retarget_lock_acquire_recursive>:
 800acb0:	4770      	bx	lr

0800acb2 <__retarget_lock_release_recursive>:
 800acb2:	4770      	bx	lr

0800acb4 <__swhatbuf_r>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	460e      	mov	r6, r1
 800acb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbc:	4614      	mov	r4, r2
 800acbe:	2900      	cmp	r1, #0
 800acc0:	461d      	mov	r5, r3
 800acc2:	b096      	sub	sp, #88	; 0x58
 800acc4:	da08      	bge.n	800acd8 <__swhatbuf_r+0x24>
 800acc6:	2200      	movs	r2, #0
 800acc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	061a      	lsls	r2, r3, #24
 800acd0:	d410      	bmi.n	800acf4 <__swhatbuf_r+0x40>
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	e00e      	b.n	800acf6 <__swhatbuf_r+0x42>
 800acd8:	466a      	mov	r2, sp
 800acda:	f000 f909 	bl	800aef0 <_fstat_r>
 800acde:	2800      	cmp	r0, #0
 800ace0:	dbf1      	blt.n	800acc6 <__swhatbuf_r+0x12>
 800ace2:	9a01      	ldr	r2, [sp, #4]
 800ace4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ace8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acec:	425a      	negs	r2, r3
 800acee:	415a      	adcs	r2, r3
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	e7ee      	b.n	800acd2 <__swhatbuf_r+0x1e>
 800acf4:	2340      	movs	r3, #64	; 0x40
 800acf6:	2000      	movs	r0, #0
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	b016      	add	sp, #88	; 0x58
 800acfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad00 <__smakebuf_r>:
 800ad00:	898b      	ldrh	r3, [r1, #12]
 800ad02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad04:	079d      	lsls	r5, r3, #30
 800ad06:	4606      	mov	r6, r0
 800ad08:	460c      	mov	r4, r1
 800ad0a:	d507      	bpl.n	800ad1c <__smakebuf_r+0x1c>
 800ad0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	6123      	str	r3, [r4, #16]
 800ad14:	2301      	movs	r3, #1
 800ad16:	6163      	str	r3, [r4, #20]
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	466a      	mov	r2, sp
 800ad1e:	ab01      	add	r3, sp, #4
 800ad20:	f7ff ffc8 	bl	800acb4 <__swhatbuf_r>
 800ad24:	9900      	ldr	r1, [sp, #0]
 800ad26:	4605      	mov	r5, r0
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f7fe fab7 	bl	800929c <_malloc_r>
 800ad2e:	b948      	cbnz	r0, 800ad44 <__smakebuf_r+0x44>
 800ad30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad34:	059a      	lsls	r2, r3, #22
 800ad36:	d4ef      	bmi.n	800ad18 <__smakebuf_r+0x18>
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	f043 0302 	orr.w	r3, r3, #2
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	e7e3      	b.n	800ad0c <__smakebuf_r+0xc>
 800ad44:	4b0d      	ldr	r3, [pc, #52]	; (800ad7c <__smakebuf_r+0x7c>)
 800ad46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	6020      	str	r0, [r4, #0]
 800ad4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	9b00      	ldr	r3, [sp, #0]
 800ad54:	6120      	str	r0, [r4, #16]
 800ad56:	6163      	str	r3, [r4, #20]
 800ad58:	9b01      	ldr	r3, [sp, #4]
 800ad5a:	b15b      	cbz	r3, 800ad74 <__smakebuf_r+0x74>
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad62:	f000 f8d7 	bl	800af14 <_isatty_r>
 800ad66:	b128      	cbz	r0, 800ad74 <__smakebuf_r+0x74>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f023 0303 	bic.w	r3, r3, #3
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	89a0      	ldrh	r0, [r4, #12]
 800ad76:	4305      	orrs	r5, r0
 800ad78:	81a5      	strh	r5, [r4, #12]
 800ad7a:	e7cd      	b.n	800ad18 <__smakebuf_r+0x18>
 800ad7c:	0800ab0d 	.word	0x0800ab0d

0800ad80 <memchr>:
 800ad80:	4603      	mov	r3, r0
 800ad82:	b510      	push	{r4, lr}
 800ad84:	b2c9      	uxtb	r1, r1
 800ad86:	4402      	add	r2, r0
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	d101      	bne.n	800ad92 <memchr+0x12>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	e003      	b.n	800ad9a <memchr+0x1a>
 800ad92:	7804      	ldrb	r4, [r0, #0]
 800ad94:	3301      	adds	r3, #1
 800ad96:	428c      	cmp	r4, r1
 800ad98:	d1f6      	bne.n	800ad88 <memchr+0x8>
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <_raise_r>:
 800ad9c:	291f      	cmp	r1, #31
 800ad9e:	b538      	push	{r3, r4, r5, lr}
 800ada0:	4604      	mov	r4, r0
 800ada2:	460d      	mov	r5, r1
 800ada4:	d904      	bls.n	800adb0 <_raise_r+0x14>
 800ada6:	2316      	movs	r3, #22
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adb2:	b112      	cbz	r2, 800adba <_raise_r+0x1e>
 800adb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb8:	b94b      	cbnz	r3, 800adce <_raise_r+0x32>
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 f830 	bl	800ae20 <_getpid_r>
 800adc0:	462a      	mov	r2, r5
 800adc2:	4601      	mov	r1, r0
 800adc4:	4620      	mov	r0, r4
 800adc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adca:	f000 b817 	b.w	800adfc <_kill_r>
 800adce:	2b01      	cmp	r3, #1
 800add0:	d00a      	beq.n	800ade8 <_raise_r+0x4c>
 800add2:	1c59      	adds	r1, r3, #1
 800add4:	d103      	bne.n	800adde <_raise_r+0x42>
 800add6:	2316      	movs	r3, #22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	2001      	movs	r0, #1
 800addc:	e7e7      	b.n	800adae <_raise_r+0x12>
 800adde:	2400      	movs	r4, #0
 800ade0:	4628      	mov	r0, r5
 800ade2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ade6:	4798      	blx	r3
 800ade8:	2000      	movs	r0, #0
 800adea:	e7e0      	b.n	800adae <_raise_r+0x12>

0800adec <raise>:
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <raise+0xc>)
 800adee:	4601      	mov	r1, r0
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	f7ff bfd3 	b.w	800ad9c <_raise_r>
 800adf6:	bf00      	nop
 800adf8:	20000024 	.word	0x20000024

0800adfc <_kill_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	2300      	movs	r3, #0
 800ae00:	4d06      	ldr	r5, [pc, #24]	; (800ae1c <_kill_r+0x20>)
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	4611      	mov	r1, r2
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	f7f7 fc30 	bl	800266e <_kill>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d102      	bne.n	800ae18 <_kill_r+0x1c>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	b103      	cbz	r3, 800ae18 <_kill_r+0x1c>
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200024b8 	.word	0x200024b8

0800ae20 <_getpid_r>:
 800ae20:	f7f7 bc1e 	b.w	8002660 <_getpid>

0800ae24 <__sread>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	f000 f894 	bl	800af58 <_read_r>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	bfab      	itete	ge
 800ae34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae36:	89a3      	ldrhlt	r3, [r4, #12]
 800ae38:	181b      	addge	r3, r3, r0
 800ae3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae3e:	bfac      	ite	ge
 800ae40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae42:	81a3      	strhlt	r3, [r4, #12]
 800ae44:	bd10      	pop	{r4, pc}

0800ae46 <__swrite>:
 800ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	461f      	mov	r7, r3
 800ae4c:	898b      	ldrh	r3, [r1, #12]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	05db      	lsls	r3, r3, #23
 800ae52:	460c      	mov	r4, r1
 800ae54:	4616      	mov	r6, r2
 800ae56:	d505      	bpl.n	800ae64 <__swrite+0x1e>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae60:	f000 f868 	bl	800af34 <_lseek_r>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	4632      	mov	r2, r6
 800ae68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	4628      	mov	r0, r5
 800ae70:	463b      	mov	r3, r7
 800ae72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7a:	f000 b817 	b.w	800aeac <_write_r>

0800ae7e <__sseek>:
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	460c      	mov	r4, r1
 800ae82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae86:	f000 f855 	bl	800af34 <_lseek_r>
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	bf15      	itete	ne
 800ae90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae9a:	81a3      	strheq	r3, [r4, #12]
 800ae9c:	bf18      	it	ne
 800ae9e:	81a3      	strhne	r3, [r4, #12]
 800aea0:	bd10      	pop	{r4, pc}

0800aea2 <__sclose>:
 800aea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea6:	f000 b813 	b.w	800aed0 <_close_r>
	...

0800aeac <_write_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_write_r+0x20>)
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f7 fc0e 	bl	80026dc <_write>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_write_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_write_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	200024b8 	.word	0x200024b8

0800aed0 <_close_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	2300      	movs	r3, #0
 800aed4:	4d05      	ldr	r5, [pc, #20]	; (800aeec <_close_r+0x1c>)
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f7 fc1a 	bl	8002714 <_close>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_close_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_close_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	200024b8 	.word	0x200024b8

0800aef0 <_fstat_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	2300      	movs	r3, #0
 800aef4:	4d06      	ldr	r5, [pc, #24]	; (800af10 <_fstat_r+0x20>)
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f7 fc14 	bl	800272a <_fstat>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_fstat_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_fstat_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	200024b8 	.word	0x200024b8

0800af14 <_isatty_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	2300      	movs	r3, #0
 800af18:	4d05      	ldr	r5, [pc, #20]	; (800af30 <_isatty_r+0x1c>)
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f7 fc12 	bl	8002748 <_isatty>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_isatty_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_isatty_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	200024b8 	.word	0x200024b8

0800af34 <_lseek_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	4611      	mov	r1, r2
 800af3c:	2200      	movs	r2, #0
 800af3e:	4d05      	ldr	r5, [pc, #20]	; (800af54 <_lseek_r+0x20>)
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f7 fc0a 	bl	800275c <_lseek>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_lseek_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_lseek_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	200024b8 	.word	0x200024b8

0800af58 <_read_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	2200      	movs	r2, #0
 800af62:	4d05      	ldr	r5, [pc, #20]	; (800af78 <_read_r+0x20>)
 800af64:	602a      	str	r2, [r5, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	f7f7 fb9b 	bl	80026a2 <_read>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_read_r+0x1e>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_read_r+0x1e>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	200024b8 	.word	0x200024b8

0800af7c <pow>:
 800af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af80:	4614      	mov	r4, r2
 800af82:	461d      	mov	r5, r3
 800af84:	4680      	mov	r8, r0
 800af86:	4689      	mov	r9, r1
 800af88:	f000 f862 	bl	800b050 <__ieee754_pow>
 800af8c:	4622      	mov	r2, r4
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	462b      	mov	r3, r5
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 fd38 	bl	8000a0c <__aeabi_dcmpun>
 800af9c:	bbc8      	cbnz	r0, 800b012 <pow+0x96>
 800af9e:	2200      	movs	r2, #0
 800afa0:	2300      	movs	r3, #0
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	f7f5 fcff 	bl	80009a8 <__aeabi_dcmpeq>
 800afaa:	b1b8      	cbz	r0, 800afdc <pow+0x60>
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d141      	bne.n	800b040 <pow+0xc4>
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f000 fe3b 	bl	800bc3a <finite>
 800afc4:	b328      	cbz	r0, 800b012 <pow+0x96>
 800afc6:	2200      	movs	r2, #0
 800afc8:	2300      	movs	r3, #0
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	f7f5 fcf5 	bl	80009bc <__aeabi_dcmplt>
 800afd2:	b1f0      	cbz	r0, 800b012 <pow+0x96>
 800afd4:	f7fd fc24 	bl	8008820 <__errno>
 800afd8:	2322      	movs	r3, #34	; 0x22
 800afda:	e019      	b.n	800b010 <pow+0x94>
 800afdc:	4630      	mov	r0, r6
 800afde:	4639      	mov	r1, r7
 800afe0:	f000 fe2b 	bl	800bc3a <finite>
 800afe4:	b9c8      	cbnz	r0, 800b01a <pow+0x9e>
 800afe6:	4640      	mov	r0, r8
 800afe8:	4649      	mov	r1, r9
 800afea:	f000 fe26 	bl	800bc3a <finite>
 800afee:	b1a0      	cbz	r0, 800b01a <pow+0x9e>
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f000 fe21 	bl	800bc3a <finite>
 800aff8:	b178      	cbz	r0, 800b01a <pow+0x9e>
 800affa:	4632      	mov	r2, r6
 800affc:	463b      	mov	r3, r7
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	f7f5 fd03 	bl	8000a0c <__aeabi_dcmpun>
 800b006:	2800      	cmp	r0, #0
 800b008:	d0e4      	beq.n	800afd4 <pow+0x58>
 800b00a:	f7fd fc09 	bl	8008820 <__errno>
 800b00e:	2321      	movs	r3, #33	; 0x21
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 fcc1 	bl	80009a8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	d0f3      	beq.n	800b012 <pow+0x96>
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f000 fe04 	bl	800bc3a <finite>
 800b032:	2800      	cmp	r0, #0
 800b034:	d0ed      	beq.n	800b012 <pow+0x96>
 800b036:	4620      	mov	r0, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	f000 fdfe 	bl	800bc3a <finite>
 800b03e:	e7c8      	b.n	800afd2 <pow+0x56>
 800b040:	2600      	movs	r6, #0
 800b042:	4f01      	ldr	r7, [pc, #4]	; (800b048 <pow+0xcc>)
 800b044:	e7e5      	b.n	800b012 <pow+0x96>
 800b046:	bf00      	nop
 800b048:	3ff00000 	.word	0x3ff00000
 800b04c:	00000000 	.word	0x00000000

0800b050 <__ieee754_pow>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	b093      	sub	sp, #76	; 0x4c
 800b056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b05a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b05e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b062:	4689      	mov	r9, r1
 800b064:	ea56 0102 	orrs.w	r1, r6, r2
 800b068:	4680      	mov	r8, r0
 800b06a:	d111      	bne.n	800b090 <__ieee754_pow+0x40>
 800b06c:	1803      	adds	r3, r0, r0
 800b06e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b072:	4152      	adcs	r2, r2
 800b074:	4299      	cmp	r1, r3
 800b076:	4b82      	ldr	r3, [pc, #520]	; (800b280 <__ieee754_pow+0x230>)
 800b078:	4193      	sbcs	r3, r2
 800b07a:	f080 84b9 	bcs.w	800b9f0 <__ieee754_pow+0x9a0>
 800b07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 f871 	bl	800016c <__adddf3>
 800b08a:	4683      	mov	fp, r0
 800b08c:	468c      	mov	ip, r1
 800b08e:	e06f      	b.n	800b170 <__ieee754_pow+0x120>
 800b090:	4b7c      	ldr	r3, [pc, #496]	; (800b284 <__ieee754_pow+0x234>)
 800b092:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b096:	429c      	cmp	r4, r3
 800b098:	464d      	mov	r5, r9
 800b09a:	4682      	mov	sl, r0
 800b09c:	dc06      	bgt.n	800b0ac <__ieee754_pow+0x5c>
 800b09e:	d101      	bne.n	800b0a4 <__ieee754_pow+0x54>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1ec      	bne.n	800b07e <__ieee754_pow+0x2e>
 800b0a4:	429e      	cmp	r6, r3
 800b0a6:	dc01      	bgt.n	800b0ac <__ieee754_pow+0x5c>
 800b0a8:	d10f      	bne.n	800b0ca <__ieee754_pow+0x7a>
 800b0aa:	b172      	cbz	r2, 800b0ca <__ieee754_pow+0x7a>
 800b0ac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b0b0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b0b4:	ea55 050a 	orrs.w	r5, r5, sl
 800b0b8:	d1e1      	bne.n	800b07e <__ieee754_pow+0x2e>
 800b0ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b0be:	18db      	adds	r3, r3, r3
 800b0c0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b0c4:	4152      	adcs	r2, r2
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	e7d5      	b.n	800b076 <__ieee754_pow+0x26>
 800b0ca:	2d00      	cmp	r5, #0
 800b0cc:	da39      	bge.n	800b142 <__ieee754_pow+0xf2>
 800b0ce:	4b6e      	ldr	r3, [pc, #440]	; (800b288 <__ieee754_pow+0x238>)
 800b0d0:	429e      	cmp	r6, r3
 800b0d2:	dc52      	bgt.n	800b17a <__ieee754_pow+0x12a>
 800b0d4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b0d8:	429e      	cmp	r6, r3
 800b0da:	f340 849c 	ble.w	800ba16 <__ieee754_pow+0x9c6>
 800b0de:	1533      	asrs	r3, r6, #20
 800b0e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b0e4:	2b14      	cmp	r3, #20
 800b0e6:	dd0f      	ble.n	800b108 <__ieee754_pow+0xb8>
 800b0e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b0ec:	fa22 f103 	lsr.w	r1, r2, r3
 800b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 848e 	bne.w	800ba16 <__ieee754_pow+0x9c6>
 800b0fa:	f001 0101 	and.w	r1, r1, #1
 800b0fe:	f1c1 0302 	rsb	r3, r1, #2
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	b182      	cbz	r2, 800b128 <__ieee754_pow+0xd8>
 800b106:	e05d      	b.n	800b1c4 <__ieee754_pow+0x174>
 800b108:	2a00      	cmp	r2, #0
 800b10a:	d159      	bne.n	800b1c0 <__ieee754_pow+0x170>
 800b10c:	f1c3 0314 	rsb	r3, r3, #20
 800b110:	fa46 f103 	asr.w	r1, r6, r3
 800b114:	fa01 f303 	lsl.w	r3, r1, r3
 800b118:	42b3      	cmp	r3, r6
 800b11a:	f040 8479 	bne.w	800ba10 <__ieee754_pow+0x9c0>
 800b11e:	f001 0101 	and.w	r1, r1, #1
 800b122:	f1c1 0302 	rsb	r3, r1, #2
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4b58      	ldr	r3, [pc, #352]	; (800b28c <__ieee754_pow+0x23c>)
 800b12a:	429e      	cmp	r6, r3
 800b12c:	d132      	bne.n	800b194 <__ieee754_pow+0x144>
 800b12e:	2f00      	cmp	r7, #0
 800b130:	f280 846a 	bge.w	800ba08 <__ieee754_pow+0x9b8>
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	2000      	movs	r0, #0
 800b13a:	4954      	ldr	r1, [pc, #336]	; (800b28c <__ieee754_pow+0x23c>)
 800b13c:	f7f5 faf6 	bl	800072c <__aeabi_ddiv>
 800b140:	e7a3      	b.n	800b08a <__ieee754_pow+0x3a>
 800b142:	2300      	movs	r3, #0
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	2a00      	cmp	r2, #0
 800b148:	d13c      	bne.n	800b1c4 <__ieee754_pow+0x174>
 800b14a:	4b4e      	ldr	r3, [pc, #312]	; (800b284 <__ieee754_pow+0x234>)
 800b14c:	429e      	cmp	r6, r3
 800b14e:	d1eb      	bne.n	800b128 <__ieee754_pow+0xd8>
 800b150:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b154:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b158:	ea53 030a 	orrs.w	r3, r3, sl
 800b15c:	f000 8448 	beq.w	800b9f0 <__ieee754_pow+0x9a0>
 800b160:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <__ieee754_pow+0x240>)
 800b162:	429c      	cmp	r4, r3
 800b164:	dd0b      	ble.n	800b17e <__ieee754_pow+0x12e>
 800b166:	2f00      	cmp	r7, #0
 800b168:	f2c0 8448 	blt.w	800b9fc <__ieee754_pow+0x9ac>
 800b16c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b170:	4658      	mov	r0, fp
 800b172:	4661      	mov	r1, ip
 800b174:	b013      	add	sp, #76	; 0x4c
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	2302      	movs	r3, #2
 800b17c:	e7e2      	b.n	800b144 <__ieee754_pow+0xf4>
 800b17e:	2f00      	cmp	r7, #0
 800b180:	f04f 0b00 	mov.w	fp, #0
 800b184:	f04f 0c00 	mov.w	ip, #0
 800b188:	daf2      	bge.n	800b170 <__ieee754_pow+0x120>
 800b18a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b18e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b192:	e7ed      	b.n	800b170 <__ieee754_pow+0x120>
 800b194:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b198:	d106      	bne.n	800b1a8 <__ieee754_pow+0x158>
 800b19a:	4642      	mov	r2, r8
 800b19c:	464b      	mov	r3, r9
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	f7f5 f999 	bl	80004d8 <__aeabi_dmul>
 800b1a6:	e770      	b.n	800b08a <__ieee754_pow+0x3a>
 800b1a8:	4b3a      	ldr	r3, [pc, #232]	; (800b294 <__ieee754_pow+0x244>)
 800b1aa:	429f      	cmp	r7, r3
 800b1ac:	d10a      	bne.n	800b1c4 <__ieee754_pow+0x174>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	db08      	blt.n	800b1c4 <__ieee754_pow+0x174>
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	b013      	add	sp, #76	; 0x4c
 800b1b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	f000 bc5e 	b.w	800ba7c <__ieee754_sqrt>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f000 fd34 	bl	800bc34 <fabs>
 800b1cc:	4683      	mov	fp, r0
 800b1ce:	468c      	mov	ip, r1
 800b1d0:	f1ba 0f00 	cmp.w	sl, #0
 800b1d4:	d128      	bne.n	800b228 <__ieee754_pow+0x1d8>
 800b1d6:	b124      	cbz	r4, 800b1e2 <__ieee754_pow+0x192>
 800b1d8:	4b2c      	ldr	r3, [pc, #176]	; (800b28c <__ieee754_pow+0x23c>)
 800b1da:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d122      	bne.n	800b228 <__ieee754_pow+0x1d8>
 800b1e2:	2f00      	cmp	r7, #0
 800b1e4:	da07      	bge.n	800b1f6 <__ieee754_pow+0x1a6>
 800b1e6:	465a      	mov	r2, fp
 800b1e8:	4663      	mov	r3, ip
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	4927      	ldr	r1, [pc, #156]	; (800b28c <__ieee754_pow+0x23c>)
 800b1ee:	f7f5 fa9d 	bl	800072c <__aeabi_ddiv>
 800b1f2:	4683      	mov	fp, r0
 800b1f4:	468c      	mov	ip, r1
 800b1f6:	2d00      	cmp	r5, #0
 800b1f8:	daba      	bge.n	800b170 <__ieee754_pow+0x120>
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b200:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b204:	4323      	orrs	r3, r4
 800b206:	d108      	bne.n	800b21a <__ieee754_pow+0x1ca>
 800b208:	465a      	mov	r2, fp
 800b20a:	4663      	mov	r3, ip
 800b20c:	4658      	mov	r0, fp
 800b20e:	4661      	mov	r1, ip
 800b210:	f7f4 ffaa 	bl	8000168 <__aeabi_dsub>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	e790      	b.n	800b13c <__ieee754_pow+0xec>
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d1a7      	bne.n	800b170 <__ieee754_pow+0x120>
 800b220:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b224:	469c      	mov	ip, r3
 800b226:	e7a3      	b.n	800b170 <__ieee754_pow+0x120>
 800b228:	0feb      	lsrs	r3, r5, #31
 800b22a:	3b01      	subs	r3, #1
 800b22c:	930c      	str	r3, [sp, #48]	; 0x30
 800b22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	4313      	orrs	r3, r2
 800b234:	d104      	bne.n	800b240 <__ieee754_pow+0x1f0>
 800b236:	4642      	mov	r2, r8
 800b238:	464b      	mov	r3, r9
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	e7e7      	b.n	800b210 <__ieee754_pow+0x1c0>
 800b240:	4b15      	ldr	r3, [pc, #84]	; (800b298 <__ieee754_pow+0x248>)
 800b242:	429e      	cmp	r6, r3
 800b244:	f340 80f6 	ble.w	800b434 <__ieee754_pow+0x3e4>
 800b248:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b24c:	429e      	cmp	r6, r3
 800b24e:	4b10      	ldr	r3, [pc, #64]	; (800b290 <__ieee754_pow+0x240>)
 800b250:	dd09      	ble.n	800b266 <__ieee754_pow+0x216>
 800b252:	429c      	cmp	r4, r3
 800b254:	dc0c      	bgt.n	800b270 <__ieee754_pow+0x220>
 800b256:	2f00      	cmp	r7, #0
 800b258:	da0c      	bge.n	800b274 <__ieee754_pow+0x224>
 800b25a:	2000      	movs	r0, #0
 800b25c:	b013      	add	sp, #76	; 0x4c
 800b25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b262:	f000 bce2 	b.w	800bc2a <__math_oflow>
 800b266:	429c      	cmp	r4, r3
 800b268:	dbf5      	blt.n	800b256 <__ieee754_pow+0x206>
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <__ieee754_pow+0x23c>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	dd15      	ble.n	800b29c <__ieee754_pow+0x24c>
 800b270:	2f00      	cmp	r7, #0
 800b272:	dcf2      	bgt.n	800b25a <__ieee754_pow+0x20a>
 800b274:	2000      	movs	r0, #0
 800b276:	b013      	add	sp, #76	; 0x4c
 800b278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	f000 bcd0 	b.w	800bc20 <__math_uflow>
 800b280:	fff00000 	.word	0xfff00000
 800b284:	7ff00000 	.word	0x7ff00000
 800b288:	433fffff 	.word	0x433fffff
 800b28c:	3ff00000 	.word	0x3ff00000
 800b290:	3fefffff 	.word	0x3fefffff
 800b294:	3fe00000 	.word	0x3fe00000
 800b298:	41e00000 	.word	0x41e00000
 800b29c:	4661      	mov	r1, ip
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4658      	mov	r0, fp
 800b2a2:	4b5f      	ldr	r3, [pc, #380]	; (800b420 <__ieee754_pow+0x3d0>)
 800b2a4:	f7f4 ff60 	bl	8000168 <__aeabi_dsub>
 800b2a8:	a355      	add	r3, pc, #340	; (adr r3, 800b400 <__ieee754_pow+0x3b0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	f7f5 f911 	bl	80004d8 <__aeabi_dmul>
 800b2b6:	a354      	add	r3, pc, #336	; (adr r3, 800b408 <__ieee754_pow+0x3b8>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 f908 	bl	80004d8 <__aeabi_dmul>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4b54      	ldr	r3, [pc, #336]	; (800b424 <__ieee754_pow+0x3d4>)
 800b2d4:	f7f5 f900 	bl	80004d8 <__aeabi_dmul>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	a14c      	add	r1, pc, #304	; (adr r1, 800b410 <__ieee754_pow+0x3c0>)
 800b2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e2:	f7f4 ff41 	bl	8000168 <__aeabi_dsub>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	f7f5 f8f5 	bl	80004d8 <__aeabi_dmul>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	494c      	ldr	r1, [pc, #304]	; (800b428 <__ieee754_pow+0x3d8>)
 800b2f6:	f7f4 ff37 	bl	8000168 <__aeabi_dsub>
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 f8e7 	bl	80004d8 <__aeabi_dmul>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f5 f8e1 	bl	80004d8 <__aeabi_dmul>
 800b316:	a340      	add	r3, pc, #256	; (adr r3, 800b418 <__ieee754_pow+0x3c8>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f7f5 f8dc 	bl	80004d8 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4650      	mov	r0, sl
 800b326:	4659      	mov	r1, fp
 800b328:	f7f4 ff1e 	bl	8000168 <__aeabi_dsub>
 800b32c:	f04f 0a00 	mov.w	sl, #0
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f4 ff16 	bl	800016c <__adddf3>
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	4650      	mov	r0, sl
 800b346:	468b      	mov	fp, r1
 800b348:	f7f4 ff0e 	bl	8000168 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4620      	mov	r0, r4
 800b352:	4629      	mov	r1, r5
 800b354:	f7f4 ff08 	bl	8000168 <__aeabi_dsub>
 800b358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b35c:	9b00      	ldr	r3, [sp, #0]
 800b35e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b360:	3b01      	subs	r3, #1
 800b362:	4313      	orrs	r3, r2
 800b364:	f04f 0600 	mov.w	r6, #0
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	bf0c      	ite	eq
 800b36e:	4b2f      	ldreq	r3, [pc, #188]	; (800b42c <__ieee754_pow+0x3dc>)
 800b370:	4b2b      	ldrne	r3, [pc, #172]	; (800b420 <__ieee754_pow+0x3d0>)
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37a:	e9cd 2300 	strd	r2, r3, [sp]
 800b37e:	4632      	mov	r2, r6
 800b380:	463b      	mov	r3, r7
 800b382:	f7f4 fef1 	bl	8000168 <__aeabi_dsub>
 800b386:	4652      	mov	r2, sl
 800b388:	465b      	mov	r3, fp
 800b38a:	f7f5 f8a5 	bl	80004d8 <__aeabi_dmul>
 800b38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b392:	4680      	mov	r8, r0
 800b394:	4689      	mov	r9, r1
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f5 f89d 	bl	80004d8 <__aeabi_dmul>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f4 fee1 	bl	800016c <__adddf3>
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	f7f5 f88f 	bl	80004d8 <__aeabi_dmul>
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	460d      	mov	r5, r1
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b3ca:	f7f4 fecf 	bl	800016c <__adddf3>
 800b3ce:	4b18      	ldr	r3, [pc, #96]	; (800b430 <__ieee754_pow+0x3e0>)
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	460e      	mov	r6, r1
 800b3d8:	f340 82e5 	ble.w	800b9a6 <__ieee754_pow+0x956>
 800b3dc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b3e0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b3e4:	4303      	orrs	r3, r0
 800b3e6:	f000 81df 	beq.w	800b7a8 <__ieee754_pow+0x758>
 800b3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f7f5 fae3 	bl	80009bc <__aeabi_dcmplt>
 800b3f6:	3800      	subs	r0, #0
 800b3f8:	bf18      	it	ne
 800b3fa:	2001      	movne	r0, #1
 800b3fc:	e72e      	b.n	800b25c <__ieee754_pow+0x20c>
 800b3fe:	bf00      	nop
 800b400:	60000000 	.word	0x60000000
 800b404:	3ff71547 	.word	0x3ff71547
 800b408:	f85ddf44 	.word	0xf85ddf44
 800b40c:	3e54ae0b 	.word	0x3e54ae0b
 800b410:	55555555 	.word	0x55555555
 800b414:	3fd55555 	.word	0x3fd55555
 800b418:	652b82fe 	.word	0x652b82fe
 800b41c:	3ff71547 	.word	0x3ff71547
 800b420:	3ff00000 	.word	0x3ff00000
 800b424:	3fd00000 	.word	0x3fd00000
 800b428:	3fe00000 	.word	0x3fe00000
 800b42c:	bff00000 	.word	0xbff00000
 800b430:	408fffff 	.word	0x408fffff
 800b434:	4bd2      	ldr	r3, [pc, #840]	; (800b780 <__ieee754_pow+0x730>)
 800b436:	2200      	movs	r2, #0
 800b438:	402b      	ands	r3, r5
 800b43a:	b943      	cbnz	r3, 800b44e <__ieee754_pow+0x3fe>
 800b43c:	4658      	mov	r0, fp
 800b43e:	4661      	mov	r1, ip
 800b440:	4bd0      	ldr	r3, [pc, #832]	; (800b784 <__ieee754_pow+0x734>)
 800b442:	f7f5 f849 	bl	80004d8 <__aeabi_dmul>
 800b446:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b44a:	4683      	mov	fp, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	1523      	asrs	r3, r4, #20
 800b450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b454:	4413      	add	r3, r2
 800b456:	930b      	str	r3, [sp, #44]	; 0x2c
 800b458:	4bcb      	ldr	r3, [pc, #812]	; (800b788 <__ieee754_pow+0x738>)
 800b45a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b45e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b462:	429c      	cmp	r4, r3
 800b464:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b468:	dd08      	ble.n	800b47c <__ieee754_pow+0x42c>
 800b46a:	4bc8      	ldr	r3, [pc, #800]	; (800b78c <__ieee754_pow+0x73c>)
 800b46c:	429c      	cmp	r4, r3
 800b46e:	f340 8199 	ble.w	800b7a4 <__ieee754_pow+0x754>
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b478:	3301      	adds	r3, #1
 800b47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b47c:	2600      	movs	r6, #0
 800b47e:	00f3      	lsls	r3, r6, #3
 800b480:	930d      	str	r3, [sp, #52]	; 0x34
 800b482:	4bc3      	ldr	r3, [pc, #780]	; (800b790 <__ieee754_pow+0x740>)
 800b484:	4658      	mov	r0, fp
 800b486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b48a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b48e:	4629      	mov	r1, r5
 800b490:	461a      	mov	r2, r3
 800b492:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b496:	4623      	mov	r3, r4
 800b498:	f7f4 fe66 	bl	8000168 <__aeabi_dsub>
 800b49c:	46da      	mov	sl, fp
 800b49e:	462b      	mov	r3, r5
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b4a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4aa:	f7f4 fe5f 	bl	800016c <__adddf3>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	49b7      	ldr	r1, [pc, #732]	; (800b794 <__ieee754_pow+0x744>)
 800b4b6:	f7f5 f939 	bl	800072c <__aeabi_ddiv>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b4c6:	f7f5 f807 	bl	80004d8 <__aeabi_dmul>
 800b4ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b4d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	46ab      	mov	fp, r5
 800b4dc:	106d      	asrs	r5, r5, #1
 800b4de:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b4e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b4ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	f7f4 ffee 	bl	80004d8 <__aeabi_dmul>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b504:	f7f4 fe30 	bl	8000168 <__aeabi_dsub>
 800b508:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b50c:	4606      	mov	r6, r0
 800b50e:	460f      	mov	r7, r1
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fe28 	bl	8000168 <__aeabi_dsub>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4650      	mov	r0, sl
 800b51e:	4659      	mov	r1, fp
 800b520:	f7f4 fe22 	bl	8000168 <__aeabi_dsub>
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	f7f4 ffd6 	bl	80004d8 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fe18 	bl	8000168 <__aeabi_dsub>
 800b538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b53c:	f7f4 ffcc 	bl	80004d8 <__aeabi_dmul>
 800b540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b544:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b548:	4610      	mov	r0, r2
 800b54a:	4619      	mov	r1, r3
 800b54c:	f7f4 ffc4 	bl	80004d8 <__aeabi_dmul>
 800b550:	a379      	add	r3, pc, #484	; (adr r3, 800b738 <__ieee754_pow+0x6e8>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	f7f4 ffbd 	bl	80004d8 <__aeabi_dmul>
 800b55e:	a378      	add	r3, pc, #480	; (adr r3, 800b740 <__ieee754_pow+0x6f0>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f4 fe02 	bl	800016c <__adddf3>
 800b568:	4622      	mov	r2, r4
 800b56a:	462b      	mov	r3, r5
 800b56c:	f7f4 ffb4 	bl	80004d8 <__aeabi_dmul>
 800b570:	a375      	add	r3, pc, #468	; (adr r3, 800b748 <__ieee754_pow+0x6f8>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f4 fdf9 	bl	800016c <__adddf3>
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f4 ffab 	bl	80004d8 <__aeabi_dmul>
 800b582:	a373      	add	r3, pc, #460	; (adr r3, 800b750 <__ieee754_pow+0x700>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fdf0 	bl	800016c <__adddf3>
 800b58c:	4622      	mov	r2, r4
 800b58e:	462b      	mov	r3, r5
 800b590:	f7f4 ffa2 	bl	80004d8 <__aeabi_dmul>
 800b594:	a370      	add	r3, pc, #448	; (adr r3, 800b758 <__ieee754_pow+0x708>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f4 fde7 	bl	800016c <__adddf3>
 800b59e:	4622      	mov	r2, r4
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	f7f4 ff99 	bl	80004d8 <__aeabi_dmul>
 800b5a6:	a36e      	add	r3, pc, #440	; (adr r3, 800b760 <__ieee754_pow+0x710>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7f4 fdde 	bl	800016c <__adddf3>
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	462b      	mov	r3, r5
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f4 ff8c 	bl	80004d8 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f4 ff86 	bl	80004d8 <__aeabi_dmul>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	f7f4 fdc8 	bl	800016c <__adddf3>
 800b5dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5e0:	f7f4 ff7a 	bl	80004d8 <__aeabi_dmul>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	f7f4 fdc0 	bl	800016c <__adddf3>
 800b5ec:	4642      	mov	r2, r8
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f4 ff6e 	bl	80004d8 <__aeabi_dmul>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4b66      	ldr	r3, [pc, #408]	; (800b798 <__ieee754_pow+0x748>)
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	f7f4 fdb2 	bl	800016c <__adddf3>
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	f7f4 fdae 	bl	800016c <__adddf3>
 800b610:	2400      	movs	r4, #0
 800b612:	460d      	mov	r5, r1
 800b614:	4622      	mov	r2, r4
 800b616:	460b      	mov	r3, r1
 800b618:	4640      	mov	r0, r8
 800b61a:	4649      	mov	r1, r9
 800b61c:	f7f4 ff5c 	bl	80004d8 <__aeabi_dmul>
 800b620:	2200      	movs	r2, #0
 800b622:	4680      	mov	r8, r0
 800b624:	4689      	mov	r9, r1
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	4b5b      	ldr	r3, [pc, #364]	; (800b798 <__ieee754_pow+0x748>)
 800b62c:	f7f4 fd9c 	bl	8000168 <__aeabi_dsub>
 800b630:	4652      	mov	r2, sl
 800b632:	465b      	mov	r3, fp
 800b634:	f7f4 fd98 	bl	8000168 <__aeabi_dsub>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f4 fd92 	bl	8000168 <__aeabi_dsub>
 800b644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b648:	f7f4 ff46 	bl	80004d8 <__aeabi_dmul>
 800b64c:	4622      	mov	r2, r4
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ff3e 	bl	80004d8 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f4 fd82 	bl	800016c <__adddf3>
 800b668:	2400      	movs	r4, #0
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f4 fd79 	bl	800016c <__adddf3>
 800b67a:	a33b      	add	r3, pc, #236	; (adr r3, 800b768 <__ieee754_pow+0x718>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	4620      	mov	r0, r4
 800b682:	460d      	mov	r5, r1
 800b684:	f7f4 ff28 	bl	80004d8 <__aeabi_dmul>
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fd68 	bl	8000168 <__aeabi_dsub>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4630      	mov	r0, r6
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f4 fd62 	bl	8000168 <__aeabi_dsub>
 800b6a4:	a332      	add	r3, pc, #200	; (adr r3, 800b770 <__ieee754_pow+0x720>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 ff15 	bl	80004d8 <__aeabi_dmul>
 800b6ae:	a332      	add	r3, pc, #200	; (adr r3, 800b778 <__ieee754_pow+0x728>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	f7f4 ff0c 	bl	80004d8 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f4 fd50 	bl	800016c <__adddf3>
 800b6cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ce:	4b33      	ldr	r3, [pc, #204]	; (800b79c <__ieee754_pow+0x74c>)
 800b6d0:	f04f 0a00 	mov.w	sl, #0
 800b6d4:	4413      	add	r3, r2
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fd47 	bl	800016c <__adddf3>
 800b6de:	4680      	mov	r8, r0
 800b6e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	f7f4 fe8e 	bl	8000404 <__aeabi_i2d>
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ee:	4b2c      	ldr	r3, [pc, #176]	; (800b7a0 <__ieee754_pow+0x750>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6f6:	4642      	mov	r2, r8
 800b6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	f7f4 fd35 	bl	800016c <__adddf3>
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	f7f4 fd31 	bl	800016c <__adddf3>
 800b70a:	4622      	mov	r2, r4
 800b70c:	462b      	mov	r3, r5
 800b70e:	f7f4 fd2d 	bl	800016c <__adddf3>
 800b712:	4622      	mov	r2, r4
 800b714:	462b      	mov	r3, r5
 800b716:	4650      	mov	r0, sl
 800b718:	468b      	mov	fp, r1
 800b71a:	f7f4 fd25 	bl	8000168 <__aeabi_dsub>
 800b71e:	4632      	mov	r2, r6
 800b720:	463b      	mov	r3, r7
 800b722:	f7f4 fd21 	bl	8000168 <__aeabi_dsub>
 800b726:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b72a:	f7f4 fd1d 	bl	8000168 <__aeabi_dsub>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	e60d      	b.n	800b354 <__ieee754_pow+0x304>
 800b738:	4a454eef 	.word	0x4a454eef
 800b73c:	3fca7e28 	.word	0x3fca7e28
 800b740:	93c9db65 	.word	0x93c9db65
 800b744:	3fcd864a 	.word	0x3fcd864a
 800b748:	a91d4101 	.word	0xa91d4101
 800b74c:	3fd17460 	.word	0x3fd17460
 800b750:	518f264d 	.word	0x518f264d
 800b754:	3fd55555 	.word	0x3fd55555
 800b758:	db6fabff 	.word	0xdb6fabff
 800b75c:	3fdb6db6 	.word	0x3fdb6db6
 800b760:	33333303 	.word	0x33333303
 800b764:	3fe33333 	.word	0x3fe33333
 800b768:	e0000000 	.word	0xe0000000
 800b76c:	3feec709 	.word	0x3feec709
 800b770:	dc3a03fd 	.word	0xdc3a03fd
 800b774:	3feec709 	.word	0x3feec709
 800b778:	145b01f5 	.word	0x145b01f5
 800b77c:	be3e2fe0 	.word	0xbe3e2fe0
 800b780:	7ff00000 	.word	0x7ff00000
 800b784:	43400000 	.word	0x43400000
 800b788:	0003988e 	.word	0x0003988e
 800b78c:	000bb679 	.word	0x000bb679
 800b790:	0800c5f8 	.word	0x0800c5f8
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	40080000 	.word	0x40080000
 800b79c:	0800c618 	.word	0x0800c618
 800b7a0:	0800c608 	.word	0x0800c608
 800b7a4:	2601      	movs	r6, #1
 800b7a6:	e66a      	b.n	800b47e <__ieee754_pow+0x42e>
 800b7a8:	a39d      	add	r3, pc, #628	; (adr r3, 800ba20 <__ieee754_pow+0x9d0>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 fcdb 	bl	800016c <__adddf3>
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7bc:	462b      	mov	r3, r5
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f4 fcd1 	bl	8000168 <__aeabi_dsub>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ce:	f7f5 f913 	bl	80009f8 <__aeabi_dcmpgt>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f47f ae09 	bne.w	800b3ea <__ieee754_pow+0x39a>
 800b7d8:	4aa3      	ldr	r2, [pc, #652]	; (800ba68 <__ieee754_pow+0xa18>)
 800b7da:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	f340 8101 	ble.w	800b9e6 <__ieee754_pow+0x996>
 800b7e4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	151b      	asrs	r3, r3, #20
 800b7ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b7f0:	fa4a f303 	asr.w	r3, sl, r3
 800b7f4:	4433      	add	r3, r6
 800b7f6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b7fa:	4f9c      	ldr	r7, [pc, #624]	; (800ba6c <__ieee754_pow+0xa1c>)
 800b7fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b800:	4117      	asrs	r7, r2
 800b802:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b806:	ea23 0107 	bic.w	r1, r3, r7
 800b80a:	f1c2 0214 	rsb	r2, r2, #20
 800b80e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b812:	460b      	mov	r3, r1
 800b814:	fa4a fa02 	asr.w	sl, sl, r2
 800b818:	2e00      	cmp	r6, #0
 800b81a:	4602      	mov	r2, r0
 800b81c:	4629      	mov	r1, r5
 800b81e:	4620      	mov	r0, r4
 800b820:	bfb8      	it	lt
 800b822:	f1ca 0a00 	rsblt	sl, sl, #0
 800b826:	f7f4 fc9f 	bl	8000168 <__aeabi_dsub>
 800b82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b832:	2400      	movs	r4, #0
 800b834:	4642      	mov	r2, r8
 800b836:	464b      	mov	r3, r9
 800b838:	f7f4 fc98 	bl	800016c <__adddf3>
 800b83c:	a37a      	add	r3, pc, #488	; (adr r3, 800ba28 <__ieee754_pow+0x9d8>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	4620      	mov	r0, r4
 800b844:	460d      	mov	r5, r1
 800b846:	f7f4 fe47 	bl	80004d8 <__aeabi_dmul>
 800b84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	4620      	mov	r0, r4
 800b854:	4629      	mov	r1, r5
 800b856:	f7f4 fc87 	bl	8000168 <__aeabi_dsub>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f4 fc81 	bl	8000168 <__aeabi_dsub>
 800b866:	a372      	add	r3, pc, #456	; (adr r3, 800ba30 <__ieee754_pow+0x9e0>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f7f4 fe34 	bl	80004d8 <__aeabi_dmul>
 800b870:	a371      	add	r3, pc, #452	; (adr r3, 800ba38 <__ieee754_pow+0x9e8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	4680      	mov	r8, r0
 800b878:	4689      	mov	r9, r1
 800b87a:	4620      	mov	r0, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7f4 fe2b 	bl	80004d8 <__aeabi_dmul>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fc6f 	bl	800016c <__adddf3>
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 fc67 	bl	800016c <__adddf3>
 800b89e:	4632      	mov	r2, r6
 800b8a0:	463b      	mov	r3, r7
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	4689      	mov	r9, r1
 800b8a6:	f7f4 fc5f 	bl	8000168 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fc59 	bl	8000168 <__aeabi_dsub>
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	464b      	mov	r3, r9
 800b8be:	4640      	mov	r0, r8
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	f7f4 fe09 	bl	80004d8 <__aeabi_dmul>
 800b8c6:	a35e      	add	r3, pc, #376	; (adr r3, 800ba40 <__ieee754_pow+0x9f0>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	f7f4 fe02 	bl	80004d8 <__aeabi_dmul>
 800b8d4:	a35c      	add	r3, pc, #368	; (adr r3, 800ba48 <__ieee754_pow+0x9f8>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f7f4 fc45 	bl	8000168 <__aeabi_dsub>
 800b8de:	4622      	mov	r2, r4
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	f7f4 fdf9 	bl	80004d8 <__aeabi_dmul>
 800b8e6:	a35a      	add	r3, pc, #360	; (adr r3, 800ba50 <__ieee754_pow+0xa00>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f4 fc3e 	bl	800016c <__adddf3>
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	462b      	mov	r3, r5
 800b8f4:	f7f4 fdf0 	bl	80004d8 <__aeabi_dmul>
 800b8f8:	a357      	add	r3, pc, #348	; (adr r3, 800ba58 <__ieee754_pow+0xa08>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fc33 	bl	8000168 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	f7f4 fde7 	bl	80004d8 <__aeabi_dmul>
 800b90a:	a355      	add	r3, pc, #340	; (adr r3, 800ba60 <__ieee754_pow+0xa10>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fc2c 	bl	800016c <__adddf3>
 800b914:	4622      	mov	r2, r4
 800b916:	462b      	mov	r3, r5
 800b918:	f7f4 fdde 	bl	80004d8 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4640      	mov	r0, r8
 800b922:	4649      	mov	r1, r9
 800b924:	f7f4 fc20 	bl	8000168 <__aeabi_dsub>
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f4 fdd0 	bl	80004d8 <__aeabi_dmul>
 800b938:	2200      	movs	r2, #0
 800b93a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b93e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fc0f 	bl	8000168 <__aeabi_dsub>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b952:	f7f4 feeb 	bl	800072c <__aeabi_ddiv>
 800b956:	4632      	mov	r2, r6
 800b958:	4604      	mov	r4, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	463b      	mov	r3, r7
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fdb9 	bl	80004d8 <__aeabi_dmul>
 800b966:	4632      	mov	r2, r6
 800b968:	463b      	mov	r3, r7
 800b96a:	f7f4 fbff 	bl	800016c <__adddf3>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fbf7 	bl	8000168 <__aeabi_dsub>
 800b97a:	4642      	mov	r2, r8
 800b97c:	464b      	mov	r3, r9
 800b97e:	f7f4 fbf3 	bl	8000168 <__aeabi_dsub>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	2000      	movs	r0, #0
 800b988:	4939      	ldr	r1, [pc, #228]	; (800ba70 <__ieee754_pow+0xa20>)
 800b98a:	f7f4 fbed 	bl	8000168 <__aeabi_dsub>
 800b98e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b992:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b996:	da29      	bge.n	800b9ec <__ieee754_pow+0x99c>
 800b998:	4652      	mov	r2, sl
 800b99a:	f000 f955 	bl	800bc48 <scalbn>
 800b99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9a2:	f7ff bbfe 	b.w	800b1a2 <__ieee754_pow+0x152>
 800b9a6:	4b33      	ldr	r3, [pc, #204]	; (800ba74 <__ieee754_pow+0xa24>)
 800b9a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b9ac:	429f      	cmp	r7, r3
 800b9ae:	f77f af13 	ble.w	800b7d8 <__ieee754_pow+0x788>
 800b9b2:	4b31      	ldr	r3, [pc, #196]	; (800ba78 <__ieee754_pow+0xa28>)
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4303      	orrs	r3, r0
 800b9b8:	d009      	beq.n	800b9ce <__ieee754_pow+0x97e>
 800b9ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f7f4 fffb 	bl	80009bc <__aeabi_dcmplt>
 800b9c6:	3800      	subs	r0, #0
 800b9c8:	bf18      	it	ne
 800b9ca:	2001      	movne	r0, #1
 800b9cc:	e453      	b.n	800b276 <__ieee754_pow+0x226>
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	f7f4 fbc9 	bl	8000168 <__aeabi_dsub>
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	f7f5 f803 	bl	80009e4 <__aeabi_dcmpge>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f43f aefa 	beq.w	800b7d8 <__ieee754_pow+0x788>
 800b9e4:	e7e9      	b.n	800b9ba <__ieee754_pow+0x96a>
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	e720      	b.n	800b82e <__ieee754_pow+0x7de>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	e7d6      	b.n	800b99e <__ieee754_pow+0x94e>
 800b9f0:	f04f 0b00 	mov.w	fp, #0
 800b9f4:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ba70 <__ieee754_pow+0xa20>
 800b9f8:	f7ff bbba 	b.w	800b170 <__ieee754_pow+0x120>
 800b9fc:	f04f 0b00 	mov.w	fp, #0
 800ba00:	f04f 0c00 	mov.w	ip, #0
 800ba04:	f7ff bbb4 	b.w	800b170 <__ieee754_pow+0x120>
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7ff bb3d 	b.w	800b08a <__ieee754_pow+0x3a>
 800ba10:	9200      	str	r2, [sp, #0]
 800ba12:	f7ff bb89 	b.w	800b128 <__ieee754_pow+0xd8>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f7ff bb73 	b.w	800b102 <__ieee754_pow+0xb2>
 800ba1c:	f3af 8000 	nop.w
 800ba20:	652b82fe 	.word	0x652b82fe
 800ba24:	3c971547 	.word	0x3c971547
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	3fe62e43 	.word	0x3fe62e43
 800ba30:	fefa39ef 	.word	0xfefa39ef
 800ba34:	3fe62e42 	.word	0x3fe62e42
 800ba38:	0ca86c39 	.word	0x0ca86c39
 800ba3c:	be205c61 	.word	0xbe205c61
 800ba40:	72bea4d0 	.word	0x72bea4d0
 800ba44:	3e663769 	.word	0x3e663769
 800ba48:	c5d26bf1 	.word	0xc5d26bf1
 800ba4c:	3ebbbd41 	.word	0x3ebbbd41
 800ba50:	af25de2c 	.word	0xaf25de2c
 800ba54:	3f11566a 	.word	0x3f11566a
 800ba58:	16bebd93 	.word	0x16bebd93
 800ba5c:	3f66c16c 	.word	0x3f66c16c
 800ba60:	5555553e 	.word	0x5555553e
 800ba64:	3fc55555 	.word	0x3fc55555
 800ba68:	3fe00000 	.word	0x3fe00000
 800ba6c:	000fffff 	.word	0x000fffff
 800ba70:	3ff00000 	.word	0x3ff00000
 800ba74:	4090cbff 	.word	0x4090cbff
 800ba78:	3f6f3400 	.word	0x3f6f3400

0800ba7c <__ieee754_sqrt>:
 800ba7c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bbd8 <__ieee754_sqrt+0x15c>
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	ea3c 0c01 	bics.w	ip, ip, r1
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	460a      	mov	r2, r1
 800ba90:	4607      	mov	r7, r0
 800ba92:	4603      	mov	r3, r0
 800ba94:	d10f      	bne.n	800bab6 <__ieee754_sqrt+0x3a>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	f7f4 fd1d 	bl	80004d8 <__aeabi_dmul>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4629      	mov	r1, r5
 800baa6:	f7f4 fb61 	bl	800016c <__adddf3>
 800baaa:	4606      	mov	r6, r0
 800baac:	460d      	mov	r5, r1
 800baae:	4630      	mov	r0, r6
 800bab0:	4629      	mov	r1, r5
 800bab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab6:	2900      	cmp	r1, #0
 800bab8:	dc0e      	bgt.n	800bad8 <__ieee754_sqrt+0x5c>
 800baba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800babe:	ea5c 0707 	orrs.w	r7, ip, r7
 800bac2:	d0f4      	beq.n	800baae <__ieee754_sqrt+0x32>
 800bac4:	b141      	cbz	r1, 800bad8 <__ieee754_sqrt+0x5c>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	f7f4 fb4d 	bl	8000168 <__aeabi_dsub>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	f7f4 fe2b 	bl	800072c <__aeabi_ddiv>
 800bad6:	e7e8      	b.n	800baaa <__ieee754_sqrt+0x2e>
 800bad8:	1521      	asrs	r1, r4, #20
 800bada:	d075      	beq.n	800bbc8 <__ieee754_sqrt+0x14c>
 800badc:	07cc      	lsls	r4, r1, #31
 800bade:	f04f 0400 	mov.w	r4, #0
 800bae2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bae6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800baea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800baee:	bf5e      	ittt	pl
 800baf0:	0fd9      	lsrpl	r1, r3, #31
 800baf2:	005b      	lslpl	r3, r3, #1
 800baf4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800baf8:	0fd9      	lsrs	r1, r3, #31
 800bafa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bafe:	2516      	movs	r5, #22
 800bb00:	4620      	mov	r0, r4
 800bb02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb06:	107f      	asrs	r7, r7, #1
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	1846      	adds	r6, r0, r1
 800bb0c:	4296      	cmp	r6, r2
 800bb0e:	bfde      	ittt	le
 800bb10:	1b92      	suble	r2, r2, r6
 800bb12:	1870      	addle	r0, r6, r1
 800bb14:	1864      	addle	r4, r4, r1
 800bb16:	0052      	lsls	r2, r2, #1
 800bb18:	3d01      	subs	r5, #1
 800bb1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bb1e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb26:	d1f0      	bne.n	800bb0a <__ieee754_sqrt+0x8e>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f04f 0e20 	mov.w	lr, #32
 800bb2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bb32:	4282      	cmp	r2, r0
 800bb34:	eb06 0c05 	add.w	ip, r6, r5
 800bb38:	dc02      	bgt.n	800bb40 <__ieee754_sqrt+0xc4>
 800bb3a:	d113      	bne.n	800bb64 <__ieee754_sqrt+0xe8>
 800bb3c:	459c      	cmp	ip, r3
 800bb3e:	d811      	bhi.n	800bb64 <__ieee754_sqrt+0xe8>
 800bb40:	f1bc 0f00 	cmp.w	ip, #0
 800bb44:	eb0c 0506 	add.w	r5, ip, r6
 800bb48:	da43      	bge.n	800bbd2 <__ieee754_sqrt+0x156>
 800bb4a:	2d00      	cmp	r5, #0
 800bb4c:	db41      	blt.n	800bbd2 <__ieee754_sqrt+0x156>
 800bb4e:	f100 0801 	add.w	r8, r0, #1
 800bb52:	1a12      	subs	r2, r2, r0
 800bb54:	4640      	mov	r0, r8
 800bb56:	459c      	cmp	ip, r3
 800bb58:	bf88      	it	hi
 800bb5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bb5e:	eba3 030c 	sub.w	r3, r3, ip
 800bb62:	4431      	add	r1, r6
 800bb64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bb68:	f1be 0e01 	subs.w	lr, lr, #1
 800bb6c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bb70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bb78:	d1db      	bne.n	800bb32 <__ieee754_sqrt+0xb6>
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	d006      	beq.n	800bb8c <__ieee754_sqrt+0x110>
 800bb7e:	1c48      	adds	r0, r1, #1
 800bb80:	bf0b      	itete	eq
 800bb82:	4671      	moveq	r1, lr
 800bb84:	3101      	addne	r1, #1
 800bb86:	3401      	addeq	r4, #1
 800bb88:	f021 0101 	bicne.w	r1, r1, #1
 800bb8c:	1063      	asrs	r3, r4, #1
 800bb8e:	0849      	lsrs	r1, r1, #1
 800bb90:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bb94:	07e2      	lsls	r2, r4, #31
 800bb96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bb9a:	bf48      	it	mi
 800bb9c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bba0:	460e      	mov	r6, r1
 800bba2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bba6:	e782      	b.n	800baae <__ieee754_sqrt+0x32>
 800bba8:	0ada      	lsrs	r2, r3, #11
 800bbaa:	3815      	subs	r0, #21
 800bbac:	055b      	lsls	r3, r3, #21
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d0fa      	beq.n	800bba8 <__ieee754_sqrt+0x12c>
 800bbb2:	02d5      	lsls	r5, r2, #11
 800bbb4:	d50a      	bpl.n	800bbcc <__ieee754_sqrt+0x150>
 800bbb6:	f1c1 0420 	rsb	r4, r1, #32
 800bbba:	fa23 f404 	lsr.w	r4, r3, r4
 800bbbe:	1e4d      	subs	r5, r1, #1
 800bbc0:	408b      	lsls	r3, r1
 800bbc2:	4322      	orrs	r2, r4
 800bbc4:	1b41      	subs	r1, r0, r5
 800bbc6:	e789      	b.n	800badc <__ieee754_sqrt+0x60>
 800bbc8:	4608      	mov	r0, r1
 800bbca:	e7f0      	b.n	800bbae <__ieee754_sqrt+0x132>
 800bbcc:	0052      	lsls	r2, r2, #1
 800bbce:	3101      	adds	r1, #1
 800bbd0:	e7ef      	b.n	800bbb2 <__ieee754_sqrt+0x136>
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	e7bd      	b.n	800bb52 <__ieee754_sqrt+0xd6>
 800bbd6:	bf00      	nop
 800bbd8:	7ff00000 	.word	0x7ff00000

0800bbdc <with_errno>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	f7fc fe1c 	bl	8008820 <__errno>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	6006      	str	r6, [r0, #0]
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}

0800bbf0 <xflow>:
 800bbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf2:	4615      	mov	r5, r2
 800bbf4:	461c      	mov	r4, r3
 800bbf6:	b180      	cbz	r0, 800bc1a <xflow+0x2a>
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbfe:	e9cd 0100 	strd	r0, r1, [sp]
 800bc02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc06:	4628      	mov	r0, r5
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f7f4 fc65 	bl	80004d8 <__aeabi_dmul>
 800bc0e:	2222      	movs	r2, #34	; 0x22
 800bc10:	b003      	add	sp, #12
 800bc12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc16:	f7ff bfe1 	b.w	800bbdc <with_errno>
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	e7ee      	b.n	800bbfe <xflow+0xe>

0800bc20 <__math_uflow>:
 800bc20:	2200      	movs	r2, #0
 800bc22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc26:	f7ff bfe3 	b.w	800bbf0 <xflow>

0800bc2a <__math_oflow>:
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bc30:	f7ff bfde 	b.w	800bbf0 <xflow>

0800bc34 <fabs>:
 800bc34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc38:	4770      	bx	lr

0800bc3a <finite>:
 800bc3a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bc3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc42:	0fc0      	lsrs	r0, r0, #31
 800bc44:	4770      	bx	lr
	...

0800bc48 <scalbn>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	4617      	mov	r7, r2
 800bc54:	460b      	mov	r3, r1
 800bc56:	b996      	cbnz	r6, 800bc7e <scalbn+0x36>
 800bc58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc5c:	4303      	orrs	r3, r0
 800bc5e:	d039      	beq.n	800bcd4 <scalbn+0x8c>
 800bc60:	4b33      	ldr	r3, [pc, #204]	; (800bd30 <scalbn+0xe8>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	f7f4 fc38 	bl	80004d8 <__aeabi_dmul>
 800bc68:	4b32      	ldr	r3, [pc, #200]	; (800bd34 <scalbn+0xec>)
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	429f      	cmp	r7, r3
 800bc6e:	460d      	mov	r5, r1
 800bc70:	da0f      	bge.n	800bc92 <scalbn+0x4a>
 800bc72:	a32b      	add	r3, pc, #172	; (adr r3, 800bd20 <scalbn+0xd8>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f7f4 fc2e 	bl	80004d8 <__aeabi_dmul>
 800bc7c:	e006      	b.n	800bc8c <scalbn+0x44>
 800bc7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bc82:	4296      	cmp	r6, r2
 800bc84:	d10a      	bne.n	800bc9c <scalbn+0x54>
 800bc86:	4602      	mov	r2, r0
 800bc88:	f7f4 fa70 	bl	800016c <__adddf3>
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	460d      	mov	r5, r1
 800bc90:	e020      	b.n	800bcd4 <scalbn+0x8c>
 800bc92:	460b      	mov	r3, r1
 800bc94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc98:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800bc9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800bca0:	19b9      	adds	r1, r7, r6
 800bca2:	4291      	cmp	r1, r2
 800bca4:	dd0e      	ble.n	800bcc4 <scalbn+0x7c>
 800bca6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bcaa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bcae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bcb2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bcb6:	4820      	ldr	r0, [pc, #128]	; (800bd38 <scalbn+0xf0>)
 800bcb8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bcbc:	a31a      	add	r3, pc, #104	; (adr r3, 800bd28 <scalbn+0xe0>)
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	e7d9      	b.n	800bc78 <scalbn+0x30>
 800bcc4:	2900      	cmp	r1, #0
 800bcc6:	dd08      	ble.n	800bcda <scalbn+0x92>
 800bcc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcda:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800bcde:	da12      	bge.n	800bd06 <scalbn+0xbe>
 800bce0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bce4:	429f      	cmp	r7, r3
 800bce6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800bcea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800bcee:	dcdc      	bgt.n	800bcaa <scalbn+0x62>
 800bcf0:	a30b      	add	r3, pc, #44	; (adr r3, 800bd20 <scalbn+0xd8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800bcfa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800bcfe:	480f      	ldr	r0, [pc, #60]	; (800bd3c <scalbn+0xf4>)
 800bd00:	f041 011f 	orr.w	r1, r1, #31
 800bd04:	e7b8      	b.n	800bc78 <scalbn+0x30>
 800bd06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd0a:	3136      	adds	r1, #54	; 0x36
 800bd0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <scalbn+0xf8>)
 800bd1c:	e7ac      	b.n	800bc78 <scalbn+0x30>
 800bd1e:	bf00      	nop
 800bd20:	c2f8f359 	.word	0xc2f8f359
 800bd24:	01a56e1f 	.word	0x01a56e1f
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	43500000 	.word	0x43500000
 800bd34:	ffff3cb0 	.word	0xffff3cb0
 800bd38:	8800759c 	.word	0x8800759c
 800bd3c:	c2f8f359 	.word	0xc2f8f359
 800bd40:	3c900000 	.word	0x3c900000

0800bd44 <_init>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_fini>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr
