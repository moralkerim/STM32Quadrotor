
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08013d20  08013d20  00023d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014440  08014440  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08014440  08014440  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014440  08014440  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014440  08014440  00024440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014448  08014448  00024448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08014450  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000078  080144c4  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001954  080144c4  00031954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028675  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b15  00000000  00000000  00058712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0005d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0005e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e364  00000000  00000000  0005fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aad4  00000000  00000000  0007dd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095480  00000000  00000000  00098838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012dcb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006928  00000000  00000000  0012dd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08013d08 	.word	0x08013d08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08013d08 	.word	0x08013d08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HMC5883L_initialize+0x44>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001194:	2378      	movs	r3, #120	; 0x78
 8001196:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HMC5883L_initialize+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b299      	uxth	r1, r3
 800119e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HMC5883L_initialize+0x48>)
 80011b2:	f006 f941 	bl	8007438 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f80c 	bl	80011d4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f829 	bl	8001214 <HMC5883L_setMode>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000094 	.word	0x20000094
 80011d0:	200008b8 	.word	0x200008b8

080011d4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HMC5883L_setGain+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HMC5883L_setGain+0x3c>)
 8001200:	f006 f91a 	bl	8007438 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000094 	.word	0x20000094
 8001210:	200008b8 	.word	0x200008b8

08001214 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HMC5883L_setMode+0x3c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b299      	uxth	r1, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2202      	movs	r2, #2
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HMC5883L_setMode+0x40>)
 800123c:	f006 f8fc 	bl	8007438 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HMC5883L_setMode+0x44>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000094 	.word	0x20000094
 8001254:	200008b8 	.word	0x200008b8
 8001258:	2000009e 	.word	0x2000009e

0800125c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HMC5883L_getMagData+0x84>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2306      	movs	r3, #6
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <HMC5883L_getMagData+0x8c>)
 8001282:	f006 f9d3 	bl	800762c <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HMC5883L_getMagData+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HMC5883L_getMagData+0x38>
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ffc0 	bl	8001214 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HMC5883L_getMagData+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000094 	.word	0x20000094
 80012e4:	20000098 	.word	0x20000098
 80012e8:	200008b8 	.word	0x200008b8
 80012ec:	2000009e 	.word	0x2000009e

080012f0 <getDataAt>:
   @returns the specified data as a string
*/



char *getDataAt (char * str, const char * delim, int pos) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b8      	sub	sp, #224	; 0xe0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	char *token;
	char copy[200] = "\0"; // modify size for larger strings
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	22c4      	movs	r2, #196	; 0xc4
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f011 fc35 	bl	8012b78 <memset>

	strcpy(copy, str);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f011 fc37 	bl	8012b88 <strcpy>
	token = strtok(copy, delim);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f011 fc39 	bl	8012b98 <strtok>
 8001326:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001330:	e00a      	b.n	8001348 <getDataAt+0x58>
		token = strtok(NULL, delim);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	2000      	movs	r0, #0
 8001336:	f011 fc2f 	bl	8012b98 <strtok>
 800133a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800133e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001348:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbef      	blt.n	8001332 <getDataAt+0x42>
	}
	return token;
 8001352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8001356:	4618      	mov	r0, r3
 8001358:	37e0      	adds	r7, #224	; 0xe0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <pow2>:


double pow2(long number, int pow2er) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b08a      	sub	sp, #40	; 0x28
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]

	if(pow2er > 0) {
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd20      	ble.n	80013b0 <pow2+0x52>
		double result=number;
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff f848 	bl	8000404 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	e00f      	b.n	80013a2 <pow2+0x44>
			result *= number;
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f83e 	bl	8000404 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbeb      	blt.n	8001382 <pow2+0x24>
		}
		return result;
 80013aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ae:	e023      	b.n	80013f8 <pow2+0x9a>
	}

	else {
		double result=1/number;
 80013b0:	2201      	movs	r2, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f823 	bl	8000404 <__aeabi_i2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00f      	b.n	80013ec <pow2+0x8e>
				result /= number;
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f819 	bl	8000404 <__aeabi_i2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f9a7 	bl	800072c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dceb      	bgt.n	80013cc <pow2+0x6e>
			}
		return result;
 80013f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}



}
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga) {
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b08e      	sub	sp, #56	; 0x38
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]

	char buffer[12];

	strcpy(buffer, getDataAt(GGAbuffer, ",", 5));
 8001410:	2205      	movs	r2, #5
 8001412:	4983      	ldr	r1, [pc, #524]	; (8001620 <decodeGGA+0x21c>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff6b 	bl	80012f0 <getDataAt>
 800141a:	4602      	mov	r2, r0
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f011 fbb0 	bl	8012b88 <strcpy>
	if (buffer[0] == '1' || buffer[0] == '2' || buffer[0] == '6')   // 0 indicates no fix yet
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	2b31      	cmp	r3, #49	; 0x31
 800142c:	d005      	beq.n	800143a <decodeGGA+0x36>
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d002      	beq.n	800143a <decodeGGA+0x36>
 8001434:	7b3b      	ldrb	r3, [r7, #12]
 8001436:	2b36      	cmp	r3, #54	; 0x36
 8001438:	d11e      	bne.n	8001478 <decodeGGA+0x74>
	{
		gga->isfixValid = 1;   // fix available
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
	gga->tim.min = min;
	gga->tim.sec = atoi(buffer)%100;
*/
	/***************** Get LATITUDE  **********************/

	memset(buffer, '\0', 12);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	220c      	movs	r2, #12
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f011 fb95 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 1));
 800144e:	2201      	movs	r2, #1
 8001450:	4973      	ldr	r1, [pc, #460]	; (8001620 <decodeGGA+0x21c>)
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4c 	bl	80012f0 <getDataAt>
 8001458:	4602      	mov	r2, r0
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f011 fb91 	bl	8012b88 <strcpy>

	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fe70 	bl	8000150 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	2b05      	cmp	r3, #5
 8001474:	d905      	bls.n	8001482 <decodeGGA+0x7e>
 8001476:	e006      	b.n	8001486 <decodeGGA+0x82>
		gga->isfixValid = 0;   // If the fix is not available
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800147e:	2301      	movs	r3, #1
 8001480:	e22d      	b.n	80018de <decodeGGA+0x4da>
	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001482:	2302      	movs	r3, #2
 8001484:	e22b      	b.n	80018de <decodeGGA+0x4da>

	int16_t num = (atoi(buffer));   	// change the buffer to a number. It will only convert up to decimal
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4618      	mov	r0, r3
 800148c:	f011 fb38 	bl	8012b00 <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	867b      	strh	r3, [r7, #50]	; 0x32
	int dd = num/100;					// extract the degrees
 8001494:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001498:	4a62      	ldr	r2, [pc, #392]	; (8001624 <decodeGGA+0x220>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int mmint = num%100;				// extract the integer part of minutes
 80014a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <decodeGGA+0x220>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1151      	asrs	r1, r2, #5
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	1a8a      	subs	r2, r1, r2
 80014b8:	2164      	movs	r1, #100	; 0x64
 80014ba:	fb01 f202 	mul.w	r2, r1, r2
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
	int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014c8:	e00d      	b.n	80014e6 <decodeGGA+0xe2>
		if(j > strlen(buffer)) return 2;
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe3e 	bl	8000150 <strlen>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	429a      	cmp	r2, r3
 80014da:	d201      	bcs.n	80014e0 <decodeGGA+0xdc>
 80014dc:	2302      	movs	r3, #2
 80014de:	e1fe      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	3301      	adds	r3, #1
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b2e      	cmp	r3, #46	; 0x2e
 80014f2:	d1ea      	bne.n	80014ca <decodeGGA+0xc6>
	}
	j++;
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	3301      	adds	r3, #1
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
	int declen = (strlen(buffer))-j;  	// calculate the number of digit after decimal
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe26 	bl	8000150 <strlen>
 8001504:	4602      	mov	r2, r0
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
	int mmdec = atoi ((char *) buffer+j);  // extract the decimal part of minutes
 800150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f011 faf3 	bl	8012b00 <atoi>
 800151a:	6238      	str	r0, [r7, #32]
	float lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;	// combine minutes and convert to degrees
 800151c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800151e:	f7fe ff71 	bl	8000404 <__aeabi_i2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001528:	f7fe ff6c 	bl	8000404 <__aeabi_i2d>
 800152c:	4680      	mov	r8, r0
 800152e:	4689      	mov	r9, r1
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	f7fe ff67 	bl	8000404 <__aeabi_i2d>
 8001536:	4682      	mov	sl, r0
 8001538:	468b      	mov	fp, r1
 800153a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153c:	200a      	movs	r0, #10
 800153e:	f7ff ff0e 	bl	800135e <pow2>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4650      	mov	r0, sl
 8001548:	4659      	mov	r1, fp
 800154a:	f7ff f8ef 	bl	800072c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4640      	mov	r0, r8
 8001554:	4649      	mov	r1, r9
 8001556:	f7fe fe09 	bl	800016c <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <decodeGGA+0x224>)
 8001568:	f7ff f8e0 	bl	800072c <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe fdfa 	bl	800016c <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa82 	bl	8000a88 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	61fb      	str	r3, [r7, #28]
	gga->lcation.latitude = lat;  		// save the latitude data into the structure
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	601a      	str	r2, [r3, #0]

	gga->lcation.NS = *getDataAt(GGAbuffer, ",", 2);  // save the N/S into the structure
 800158e:	2202      	movs	r2, #2
 8001590:	4923      	ldr	r1, [pc, #140]	; (8001620 <decodeGGA+0x21c>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feac 	bl	80012f0 <getDataAt>
 8001598:	4603      	mov	r3, r0
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	711a      	strb	r2, [r3, #4]


	/***********************  GET LONGITUDE **********************/

	memset(buffer, '\0', 12);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	220c      	movs	r2, #12
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f011 fae5 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 3));
 80015ae:	2203      	movs	r2, #3
 80015b0:	491b      	ldr	r1, [pc, #108]	; (8001620 <decodeGGA+0x21c>)
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe9c 	bl	80012f0 <getDataAt>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f011 fae1 	bl	8012b88 <strcpy>

	num = (atoi(buffer));  	// change the buffer to the number. It will only convert up to decimal
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4618      	mov	r0, r3
 80015cc:	f011 fa98 	bl	8012b00 <atoi>
 80015d0:	4603      	mov	r3, r0
 80015d2:	867b      	strh	r3, [r7, #50]	; 0x32
	dd = num/100;			// extract the degrees
 80015d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <decodeGGA+0x220>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1152      	asrs	r2, r2, #5
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	mmint = num%100;		// extract the integer part of minutes
 80015e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <decodeGGA+0x220>)
 80015ee:	fb82 1203 	smull	r1, r2, r2, r3
 80015f2:	1151      	asrs	r1, r2, #5
 80015f4:	17da      	asrs	r2, r3, #31
 80015f6:	1a8a      	subs	r2, r1, r2
 80015f8:	2164      	movs	r1, #100	; 0x64
 80015fa:	fb01 f202 	mul.w	r2, r1, r2
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	j = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001608:	e013      	b.n	8001632 <decodeGGA+0x22e>
		if(j > strlen(buffer)) return 2;
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fd9e 	bl	8000150 <strlen>
 8001614:	4602      	mov	r2, r0
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <decodeGGA+0x228>
 800161c:	2302      	movs	r3, #2
 800161e:	e15e      	b.n	80018de <decodeGGA+0x4da>
 8001620:	08013d20 	.word	0x08013d20
 8001624:	51eb851f 	.word	0x51eb851f
 8001628:	404e0000 	.word	0x404e0000
		j++;   	// Figure out how many digits before the decimal
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	3301      	adds	r3, #1
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b2e      	cmp	r3, #46	; 0x2e
 800163e:	d1e4      	bne.n	800160a <decodeGGA+0x206>
	}
	j++;
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	3301      	adds	r3, #1
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;  		// calculate the number of digit after decimal
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fd80 	bl	8000150 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
	mmdec = atoi ((char *) buffer+j);  	// extract the decimal part of minutes
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	4413      	add	r3, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f011 fa4d 	bl	8012b00 <atoi>
 8001666:	6238      	str	r0, [r7, #32]
	lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;  // combine minutes and convert to degrees
 8001668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800166a:	f7fe fecb 	bl	8000404 <__aeabi_i2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001674:	f7fe fec6 	bl	8000404 <__aeabi_i2d>
 8001678:	4680      	mov	r8, r0
 800167a:	4689      	mov	r9, r1
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f7fe fec1 	bl	8000404 <__aeabi_i2d>
 8001682:	4682      	mov	sl, r0
 8001684:	468b      	mov	fp, r1
 8001686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001688:	200a      	movs	r0, #10
 800168a:	f7ff fe68 	bl	800135e <pow2>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4650      	mov	r0, sl
 8001694:	4659      	mov	r1, fp
 8001696:	f7ff f849 	bl	800072c <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe fd63 	bl	800016c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <decodeGGA+0x4e4>)
 80016b4:	f7ff f83a 	bl	800072c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fd54 	bl	800016c <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9dc 	bl	8000a88 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	61fb      	str	r3, [r7, #28]
	gga->lcation.longitude = lat;  // save the longitude data into the structure
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	609a      	str	r2, [r3, #8]

	gga->lcation.EW = *getDataAt(GGAbuffer, ",", 4);  // save the E/W into the structure
 80016da:	2204      	movs	r2, #4
 80016dc:	4983      	ldr	r1, [pc, #524]	; (80018ec <decodeGGA+0x4e8>)
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fe06 	bl	80012f0 <getDataAt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	731a      	strb	r2, [r3, #12]

	/***************** NUMMBER OF SATELLITES  *********************/

	strcpy(buffer, getDataAt(GGAbuffer, ",", 6));
 80016ec:	2206      	movs	r2, #6
 80016ee:	497f      	ldr	r1, [pc, #508]	; (80018ec <decodeGGA+0x4e8>)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fdfd 	bl	80012f0 <getDataAt>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f011 fa42 	bl	8012b88 <strcpy>

	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f011 f9f9 	bl	8012b00 <atoi>
 800170e:	4602      	mov	r2, r0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28

	/***************** HDOP  *********************/

	memset(buffer, '\0', 12);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	220c      	movs	r2, #12
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f011 fa2b 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 7));
 8001722:	2207      	movs	r2, #7
 8001724:	4971      	ldr	r1, [pc, #452]	; (80018ec <decodeGGA+0x4e8>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fde2 	bl	80012f0 <getDataAt>
 800172c:	4602      	mov	r2, r0
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f011 fa27 	bl	8012b88 <strcpy>

	num = (atoi(buffer));
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4618      	mov	r0, r3
 8001740:	f011 f9de 	bl	8012b00 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800174c:	e00d      	b.n	800176a <decodeGGA+0x366>
		if(j > strlen(buffer)) return 2;
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4602      	mov	r2, r0
 800175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175c:	429a      	cmp	r2, r3
 800175e:	d201      	bcs.n	8001764 <decodeGGA+0x360>
 8001760:	2302      	movs	r3, #2
 8001762:	e0bc      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3301      	adds	r3, #1
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800176a:	f107 020c 	add.w	r2, r7, #12
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2e      	cmp	r3, #46	; 0x2e
 8001776:	d1ea      	bne.n	800174e <decodeGGA+0x34a>
	}
	j++;
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	3301      	adds	r3, #1
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fce4 	bl	8000150 <strlen>
 8001788:	4602      	mov	r2, r0
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
	int dec = atoi ((char *) buffer+j);
 8001790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001792:	f107 020c 	add.w	r2, r7, #12
 8001796:	4413      	add	r3, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f011 f9b1 	bl	8012b00 <atoi>
 800179e:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 80017a0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe2d 	bl	8000404 <__aeabi_i2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff fdcf 	bl	800135e <pow2>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe ffb0 	bl	800072c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fcca 	bl	800016c <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f952 	bl	8000a88 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	61fb      	str	r3, [r7, #28]
	gga->HDOP = lat;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c

	/*************** ALTITUDE CALCULATION ********************/

	memset(buffer, '\0', 12);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	220c      	movs	r2, #12
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f011 f9be 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 8));
 80017fc:	2208      	movs	r2, #8
 80017fe:	493b      	ldr	r1, [pc, #236]	; (80018ec <decodeGGA+0x4e8>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fd75 	bl	80012f0 <getDataAt>
 8001806:	4602      	mov	r2, r0
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f011 f9ba 	bl	8012b88 <strcpy>

	num = (atoi(buffer));
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4618      	mov	r0, r3
 800181a:	f011 f971 	bl	8012b00 <atoi>
 800181e:	4603      	mov	r3, r0
 8001820:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001826:	e00d      	b.n	8001844 <decodeGGA+0x440>
		if(j > strlen(buffer)) return 2;
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fc8f 	bl	8000150 <strlen>
 8001832:	4602      	mov	r2, r0
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	429a      	cmp	r2, r3
 8001838:	d201      	bcs.n	800183e <decodeGGA+0x43a>
 800183a:	2302      	movs	r3, #2
 800183c:	e04f      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	3301      	adds	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001844:	f107 020c 	add.w	r2, r7, #12
 8001848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b2e      	cmp	r3, #46	; 0x2e
 8001850:	d1ea      	bne.n	8001828 <decodeGGA+0x424>
	}
	j++;
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	3301      	adds	r3, #1
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fc77 	bl	8000150 <strlen>
 8001862:	4602      	mov	r2, r0
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
	dec = atoi ((char *) buffer+j);
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	4413      	add	r3, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f011 f944 	bl	8012b00 <atoi>
 8001878:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 800187a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f7fe fdbb 	bl	8000404 <__aeabi_i2d>
 800188e:	4680      	mov	r8, r0
 8001890:	4689      	mov	r9, r1
 8001892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001894:	200a      	movs	r0, #10
 8001896:	f7ff fd62 	bl	800135e <pow2>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4640      	mov	r0, r8
 80018a0:	4649      	mov	r1, r9
 80018a2:	f7fe ff43 	bl	800072c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fc5d 	bl	800016c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f8e5 	bl	8000a88 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	61fb      	str	r3, [r7, #28]
	gga->alt.altitude = lat;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	621a      	str	r2, [r3, #32]

	gga->alt.unit = *getDataAt(GGAbuffer, ",", 9);
 80018c8:	2209      	movs	r2, #9
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <decodeGGA+0x4e8>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fd0f 	bl	80012f0 <getDataAt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80018dc:	2300      	movs	r3, #0

}
 80018de:	4618      	mov	r0, r3
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e8:	404e0000 	.word	0x404e0000
 80018ec:	08013d20 	.word	0x08013d20

080018f0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc) {
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b08e      	sub	sp, #56	; 0x38
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]

	char buffer[12];

	if (*getDataAt(RMCbuffer, ",", 1) == 'A') rmc->isValid = 1; // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80018fc:	2201      	movs	r2, #1
 80018fe:	4985      	ldr	r1, [pc, #532]	; (8001b14 <decodeRMC+0x224>)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fcf5 	bl	80012f0 <getDataAt>
 8001906:	4603      	mov	r3, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b41      	cmp	r3, #65	; 0x41
 800190c:	d118      	bne.n	8001940 <decodeRMC+0x50>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
	else {
		rmc->isValid = 0;
		return 1;
	}

	memset(buffer, '\0', 12);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	220c      	movs	r2, #12
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f011 f92b 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 6));
 8001922:	2206      	movs	r2, #6
 8001924:	497b      	ldr	r1, [pc, #492]	; (8001b14 <decodeRMC+0x224>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fce2 	bl	80012f0 <getDataAt>
 800192c:	4602      	mov	r2, r0
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f011 f927 	bl	8012b88 <strcpy>

	int j = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800193e:	e012      	b.n	8001966 <decodeRMC+0x76>
		rmc->isValid = 0;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
		return 1;
 8001946:	2301      	movs	r3, #1
 8001948:	e0df      	b.n	8001b0a <decodeRMC+0x21a>
		if(j > strlen(buffer)) return 2;
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fbfe 	bl	8000150 <strlen>
 8001954:	4602      	mov	r2, r0
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	429a      	cmp	r2, r3
 800195a:	d201      	bcs.n	8001960 <decodeRMC+0x70>
 800195c:	2302      	movs	r3, #2
 800195e:	e0d4      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   // same as above
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b2e      	cmp	r3, #46	; 0x2e
 8001972:	d1ea      	bne.n	800194a <decodeRMC+0x5a>
	}

	if (strlen (buffer) > j) {          // if the speed have some valid data
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4602      	mov	r2, r0
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	429a      	cmp	r2, r3
 8001984:	d942      	bls.n	8001a0c <decodeRMC+0x11c>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f011 f8b8 	bl	8012b00 <atoi>
 8001990:	4603      	mov	r3, r0
 8001992:	867b      	strh	r3, [r7, #50]	; 0x32
		j++;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3301      	adds	r3, #1
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fbd6 	bl	8000150 <strlen>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	f107 0208 	add.w	r2, r7, #8
 80019b2:	4413      	add	r3, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f011 f8a3 	bl	8012b00 <atoi>
 80019ba:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow2(10, (declen)));
 80019bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd1f 	bl	8000404 <__aeabi_i2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019cc:	f7fe fd1a 	bl	8000404 <__aeabi_i2d>
 80019d0:	4680      	mov	r8, r0
 80019d2:	4689      	mov	r9, r1
 80019d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019d6:	200a      	movs	r0, #10
 80019d8:	f7ff fcc1 	bl	800135e <pow2>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4640      	mov	r0, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	f7fe fea2 	bl	800072c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4620      	mov	r0, r4
 80019ee:	4629      	mov	r1, r5
 80019f0:	f7fe fbbc 	bl	800016c <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f844 	bl	8000a88 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e003      	b.n	8001a14 <decodeRMC+0x124>
	}
	else rmc->speed = 0;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]

	// Get Course

	memset(buffer, '\0', 12);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	220c      	movs	r2, #12
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f011 f8ab 	bl	8012b78 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 7));
 8001a22:	2207      	movs	r2, #7
 8001a24:	493b      	ldr	r1, [pc, #236]	; (8001b14 <decodeRMC+0x224>)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fc62 	bl	80012f0 <getDataAt>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f011 f8a7 	bl	8012b88 <strcpy>

	j = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a3e:	e00d      	b.n	8001a5c <decodeRMC+0x16c>
		if(j > strlen(buffer)) return 2;
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fb83 	bl	8000150 <strlen>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d201      	bcs.n	8001a56 <decodeRMC+0x166>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e059      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   	// Figure out how many digits before the decimal
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b2e      	cmp	r3, #46	; 0x2e
 8001a68:	d1ea      	bne.n	8001a40 <decodeRMC+0x150>
	}

	if (strlen (buffer) > j){  // if the course have some data
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fb6e 	bl	8000150 <strlen>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d942      	bls.n	8001b02 <decodeRMC+0x212>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f011 f83d 	bl	8012b00 <atoi>
 8001a86:	4603      	mov	r3, r0
 8001a88:	847b      	strh	r3, [r7, #34]	; 0x22
		j++;
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fb5b 	bl	8000150 <strlen>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f011 f828 	bl	8012b00 <atoi>
 8001ab0:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow2(10, (declen)));
 8001ab2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fca4 	bl	8000404 <__aeabi_i2d>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f7fe fc9f 	bl	8000404 <__aeabi_i2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	69f9      	ldr	r1, [r7, #28]
 8001acc:	200a      	movs	r0, #10
 8001ace:	f7ff fc46 	bl	800135e <pow2>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fe27 	bl	800072c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fb41 	bl	800016c <__adddf3>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe ffc9 	bl	8000a88 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	e003      	b.n	8001b0a <decodeRMC+0x21a>
	}
	else rmc->course = 0;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
		rmc->date.Mon = mon;
		rmc->date.Yr = yr;
	}
	return 0;
	*/
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3738      	adds	r7, #56	; 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b14:	08013d20 	.word	0x08013d20

08001b18 <getGPSData>:


void getGPSData (GPSSTRUCT *gpsData) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	char GGA[100];
	char RMC[100];
	unsigned int tail = GetTail ();
 8001b20:	f000 f97a 	bl	8001e18 <GetTail>
 8001b24:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	unsigned int head = GetHead ();
 8001b28:	f000 f99a 	bl	8001e60 <GetHead>
 8001b2c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	ring_buffer* buf_prev = GetRxBuf ();
 8001b30:	f000 f97e 	bl	8001e30 <GetRxBuf>
 8001b34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	unsigned long _gga_time = gga_time;
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <getGPSData+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


	if (Wait_for("GGA")) {
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <getGPSData+0xb0>)
 8001b42:	f000 f999 	bl	8001e78 <Wait_for>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d019      	beq.n	8001b80 <getGPSData+0x68>
		gga_time = HAL_GetTick();
 8001b4c:	f004 f94c 	bl	8005de8 <HAL_GetTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <getGPSData+0xac>)
 8001b54:	6013      	str	r3, [r2, #0]
		gga_time_dif = gga_time - _gga_time;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <getGPSData+0xac>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <getGPSData+0xb4>)
 8001b62:	6013      	str	r3, [r2, #0]
		Copy_upto("*", GGA);
 8001b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <getGPSData+0xb8>)
 8001b6c:	f000 f8de 	bl	8001d2c <Copy_upto>
		decodeGGA(GGA, &gpsData->ggastruct);
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fc43 	bl	8001404 <decodeGGA>
 8001b7e:	e003      	b.n	8001b88 <getGPSData+0x70>
	}

	else {
		//SetTail(tail);
		//SetHead(head);
		SetRxBuf(buf_prev);
 8001b80:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001b84:	f000 f95e 	bl	8001e44 <SetRxBuf>
	}



	if (Wait_for("RMC")) {
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <getGPSData+0xbc>)
 8001b8a:	f000 f975 	bl	8001e78 <Wait_for>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <getGPSData+0x9c>
		Copy_upto("*", RMC);
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <getGPSData+0xb8>)
 8001b9c:	f000 f8c6 	bl	8001d2c <Copy_upto>
		decodeRMC(RMC, &gpsData->rmcstruct);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe9f 	bl	80018f0 <decodeRMC>


	//Uart_flush();
	//return;

}
 8001bb2:	e003      	b.n	8001bbc <getGPSData+0xa4>
		SetRxBuf(buf_prev);
 8001bb4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001bb8:	f000 f944 	bl	8001e44 <SetRxBuf>
}
 8001bbc:	bf00      	nop
 8001bbe:	37e0      	adds	r7, #224	; 0xe0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200018c0 	.word	0x200018c0
 8001bc8:	08013d24 	.word	0x08013d24
 8001bcc:	200018c4 	.word	0x200018c4
 8001bd0:	08013d28 	.word	0x08013d28
 8001bd4:	08013d2c 	.word	0x08013d2c

08001bd8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <Ringbuf_init+0x38>)
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <Ringbuf_init+0x3c>)
 8001be0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <Ringbuf_init+0x40>)
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <Ringbuf_init+0x44>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Ringbuf_init+0x48>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <Ringbuf_init+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Ringbuf_init+0x48>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <Ringbuf_init+0x48>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	60da      	str	r2, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20001938 	.word	0x20001938
 8001c14:	200000a0 	.word	0x200000a0
 8001c18:	20001934 	.word	0x20001934
 8001c1c:	200004a8 	.word	0x200004a8
 8001c20:	20000aac 	.word	0x20000aac

08001c24 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d009      	beq.n	8001c5e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	79f9      	ldrb	r1, [r7, #7]
 8001c54:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <Uart_read+0x54>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <Uart_read+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d102      	bne.n	8001c88 <Uart_read+0x20>
  {
    return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e013      	b.n	8001cb0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <Uart_read+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <Uart_read+0x54>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <Uart_read+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <Uart_read+0x54>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001caa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 8001cae:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001938 	.word	0x20001938

08001cc0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20001938 	.word	0x20001938

08001cf4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <Uart_peek+0x34>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Uart_peek+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d102      	bne.n	8001d12 <Uart_peek+0x1e>
  {
    return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e006      	b.n	8001d20 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <Uart_peek+0x34>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <Uart_peek+0x34>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20001938 	.word	0x20001938

08001d2c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fa08 	bl	8000150 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001d48:	e01e      	b.n	8001d88 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <Copy_upto+0xe4>)
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <Copy_upto+0xe4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	4403      	add	r3, r0
 8001d5c:	5c8a      	ldrb	r2, [r1, r2]
 8001d5e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <Copy_upto+0xe4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <Copy_upto+0xe4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			indx++;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001d7c:	bf00      	nop
 8001d7e:	f7ff ff9f 	bl	8001cc0 <IsDataAvailable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0fa      	beq.n	8001d7e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001d88:	f7ff ffb4 	bl	8001cf4 <Uart_peek>
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d1d7      	bne.n	8001d4a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001d9a:	e01d      	b.n	8001dd8 <Copy_upto+0xac>
	{
		so_far++;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001da2:	f7ff ff61 	bl	8001c68 <Uart_read>
 8001da6:	4601      	mov	r1, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	613a      	str	r2, [r7, #16]
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d101      	bne.n	8001dc4 <Copy_upto+0x98>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e020      	b.n	8001e06 <Copy_upto+0xda>
		timeout = TIMEOUT_DEF;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <Copy_upto+0xe8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001dca:	f7ff ff79 	bl	8001cc0 <IsDataAvailable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <Copy_upto+0xac>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e016      	b.n	8001e06 <Copy_upto+0xda>
	while (Uart_peek() == string [so_far])
 8001dd8:	f7ff ff8c 	bl	8001cf4 <Uart_peek>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d0d8      	beq.n	8001d9c <Copy_upto+0x70>
	}

	if (so_far != len)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d002      	beq.n	8001df8 <Copy_upto+0xcc>
	{
		so_far = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
		goto again;
 8001df6:	e7a7      	b.n	8001d48 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d101      	bne.n	8001e04 <Copy_upto+0xd8>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <Copy_upto+0xda>
	else return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20001938 	.word	0x20001938
 8001e14:	2000193c 	.word	0x2000193c

08001e18 <GetTail>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions

unsigned int GetTail () {
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return _rx_buffer->tail;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <GetTail+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404

}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20001938 	.word	0x20001938

08001e30 <GetRxBuf>:

ring_buffer* GetRxBuf () {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return _rx_buffer;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <GetRxBuf+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]

}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20001938 	.word	0x20001938

08001e44 <SetRxBuf>:

void SetRxBuf(ring_buffer* buf) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	_rx_buffer = buf;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <SetRxBuf+0x18>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20001938 	.word	0x20001938

08001e60 <GetHead>:


unsigned int GetHead () {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return _rx_buffer->head;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <GetHead+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20001938 	.word	0x20001938

08001e78 <Wait_for>:
	_rx_buffer->head = _head;

}

int Wait_for (char *string)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	int so_far = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe f963 	bl	8000150 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <Wait_for+0xe4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
	if ((IsDataAvailable())) {  // let's wait for the data to show up
 8001e94:	f7ff ff14 	bl	8001cc0 <IsDataAvailable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d058      	beq.n	8001f50 <Wait_for+0xd8>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001e9e:	e017      	b.n	8001ed0 <Wait_for+0x58>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <Wait_for+0xe8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <Wait_for+0xe8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d00b      	beq.n	8001ecc <Wait_for+0x54>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <Wait_for+0xe8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <Wait_for+0xe8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ec6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001eca:	e001      	b.n	8001ed0 <Wait_for+0x58>
		}

		else
		{
			//Uart_flush();
			return 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e040      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001ed0:	f7ff ff10 	bl	8001cf4 <Uart_peek>
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d1de      	bne.n	8001ea0 <Wait_for+0x28>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001ee2:	e01d      	b.n	8001f20 <Wait_for+0xa8>
	{
		// now we will peek for the other letters too
		so_far++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <Wait_for+0xe8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <Wait_for+0xe8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001efc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <Wait_for+0x94>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e022      	b.n	8001f52 <Wait_for+0xda>
		timeout = TIMEOUT_DEF;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <Wait_for+0xe4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001f12:	f7ff fed5 	bl	8001cc0 <IsDataAvailable>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <Wait_for+0xa8>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e018      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001f20:	f7ff fee8 	bl	8001cf4 <Uart_peek>
 8001f24:	4601      	mov	r1, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	d0d8      	beq.n	8001ee4 <Wait_for+0x6c>
	}

	if (so_far != len)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d002      	beq.n	8001f40 <Wait_for+0xc8>
	{
		so_far = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f3e:	e7a6      	b.n	8001e8e <Wait_for+0x16>
	}

	if (so_far == len)
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <Wait_for+0xd4>
		{
		//Uart_flush();
		return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e002      	b.n	8001f52 <Wait_for+0xda>

		}
	else {
		//Uart_flush();
		return 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <Wait_for+0xda>
	}
}

	else {
		return 0;
 8001f50:	2300      	movs	r3, #0
	}

}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000193c 	.word	0x2000193c
 8001f60:	20001938 	.word	0x20001938

08001f64 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <Uart_isr+0x4a>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <Uart_isr+0xb4>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe3c 	bl	8001c24 <store_char>
        return;
 8001fac:	e031      	b.n	8002012 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02c      	beq.n	8002012 <Uart_isr+0xae>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d027      	beq.n	8002012 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <Uart_isr+0xb8>)
 8001fc4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <Uart_isr+0xb8>)
 8001fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001fe2:	e015      	b.n	8002010 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <Uart_isr+0xb8>)
 8001fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <Uart_isr+0xb8>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <Uart_isr+0xb8>)
 8001ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <Uart_isr+0xb8>)
 8001ffe:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7bba      	ldrb	r2, [r7, #14]
 800200e:	605a      	str	r2, [r3, #4]
    	return;
 8002010:	bf00      	nop
    }
}
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20001938 	.word	0x20001938
 800201c:	200004a8 	.word	0x200004a8

08002020 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800202e:	2301      	movs	r3, #1
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2301      	movs	r3, #1
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	1dbb      	adds	r3, r7, #6
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	22d0      	movs	r2, #208	; 0xd0
 800203e:	21ef      	movs	r1, #239	; 0xef
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <read_chip_id+0x3c>)
 8002042:	f005 faf3 	bl	800762c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b55      	cmp	r3, #85	; 0x55
 800204a:	d001      	beq.n	8002050 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800204c:	2301      	movs	r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8002050:	79fb      	ldrb	r3, [r7, #7]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200008b8 	.word	0x200008b8

08002060 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 800206c:	2300      	movs	r3, #0
 800206e:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d81a      	bhi.n	80020ac <set_oss+0x4c>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <set_oss+0x1c>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002095 	.word	0x08002095
 8002084:	0800209d 	.word	0x0800209d
 8002088:	080020a5 	.word	0x080020a5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	705a      	strb	r2, [r3, #1]
			break;
 8002092:	e00f      	b.n	80020b4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2208      	movs	r2, #8
 8002098:	705a      	strb	r2, [r3, #1]
			break;
 800209a:	e00b      	b.n	80020b4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	220e      	movs	r2, #14
 80020a0:	705a      	strb	r2, [r3, #1]
			break;
 80020a2:	e007      	b.n	80020b4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	221a      	movs	r2, #26
 80020a8:	705a      	strb	r2, [r3, #1]
			break;
 80020aa:	e003      	b.n	80020b4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2208      	movs	r2, #8
 80020b0:	705a      	strb	r2, [r3, #1]
			break;
 80020b2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80020c4:	2301      	movs	r3, #1
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	22f4      	movs	r2, #244	; 0xf4
 80020d6:	21ee      	movs	r1, #238	; 0xee
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <set_oss+0x88>)
 80020da:	f005 f9ad 	bl	8007438 <HAL_I2C_Mem_Write>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200008b8 	.word	0x200008b8

080020ec <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800211a:	2301      	movs	r3, #1
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	2316      	movs	r3, #22
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	22aa      	movs	r2, #170	; 0xaa
 800212c:	21ef      	movs	r1, #239	; 0xef
 800212e:	4828      	ldr	r0, [pc, #160]	; (80021d0 <read_calib_data+0xe4>)
 8002130:	f005 fa7c 	bl	800762c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800213a:	e03e      	b.n	80021ba <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800213c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b219      	sxth	r1, r3
 8002150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002154:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002158:	4413      	add	r3, r2
 800215a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800215e:	b21a      	sxth	r2, r3
 8002160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4403      	add	r3, r0
 800216a:	430a      	orrs	r2, r1
 800216c:	b212      	sxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8002170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2da      	uxtb	r2, r3
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	440b      	add	r3, r1
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80021b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021be:	2b0b      	cmp	r3, #11
 80021c0:	d9bc      	bls.n	800213c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80021c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200008b8 	.word	0x200008b8

080021d4 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f010 fcc8 	bl	8012b78 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80021e8:	687c      	ldr	r4, [r7, #4]
 80021ea:	f7ff ff19 	bl	8002020 <read_chip_id>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	687c      	ldr	r4, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff77 	bl	80020ec <read_calib_data>
 80021fe:	4603      	mov	r3, r0
 8002200:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3338      	adds	r3, #56	; 0x38
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff28 	bl	8002060 <set_oss>
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800221e:	232e      	movs	r3, #46	; 0x2e
 8002220:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002222:	2301      	movs	r3, #1
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	22f4      	movs	r2, #244	; 0xf4
 8002232:	21ee      	movs	r1, #238	; 0xee
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <write_ut+0x2c>)
 8002236:	f005 f8ff 	bl	8007438 <HAL_I2C_Mem_Write>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200008b8 	.word	0x200008b8

08002248 <read_ut>:

int32_t read_ut (void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800224e:	2301      	movs	r3, #1
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2302      	movs	r3, #2
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	22f6      	movs	r2, #246	; 0xf6
 800225e:	21ef      	movs	r1, #239	; 0xef
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <read_ut+0x30>)
 8002262:	f005 f9e3 	bl	800762c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8002266:	793b      	ldrb	r3, [r7, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	797a      	ldrb	r2, [r7, #5]
 800226c:	4313      	orrs	r3, r2
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200008b8 	.word	0x200008b8

0800227c <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
	float temp = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ff30 	bl	80010fc <__aeabi_f2iz>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	895b      	ldrh	r3, [r3, #10]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	8912      	ldrh	r2, [r2, #8]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	13db      	asrs	r3, r3, #15
 80022ae:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022b6:	02da      	lsls	r2, r3, #11
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022be:	4619      	mov	r1, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	440b      	add	r3, r1
 80022c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	3308      	adds	r3, #8
 80022da:	111b      	asrs	r3, r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fcdd 	bl	8000c9c <__aeabi_i2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <get_temp+0xa4>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd2c 	bl	8000d44 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <get_temp+0xa8>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7fe fece 	bl	8001094 <__aeabi_fcmple>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <get_temp+0x90>
 80022fe:	490a      	ldr	r1, [pc, #40]	; (8002328 <get_temp+0xac>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe fed1 	bl	80010a8 <__aeabi_fcmpge>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	3dcccccd 	.word	0x3dcccccd
 8002324:	c2200000 	.word	0xc2200000
 8002328:	42aa0000 	.word	0x42aa0000

0800232c <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <write_up+0x38>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	803b      	strh	r3, [r7, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8002340:	2334      	movs	r3, #52	; 0x34
 8002342:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002344:	2301      	movs	r3, #1
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	463b      	mov	r3, r7
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	22f4      	movs	r2, #244	; 0xf4
 8002354:	21ee      	movs	r1, #238	; 0xee
 8002356:	4804      	ldr	r0, [pc, #16]	; (8002368 <write_up+0x3c>)
 8002358:	f005 f86e 	bl	8007438 <HAL_I2C_Mem_Write>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08013d30 	.word	0x08013d30
 8002368:	200008b8 	.word	0x200008b8

0800236c <read_up>:

int32_t read_up (oss_t oss)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af04      	add	r7, sp, #16
 8002372:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <read_up+0x54>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	2300      	movs	r3, #0
 800237c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8002382:	2301      	movs	r3, #1
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	2303      	movs	r3, #3
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2301      	movs	r3, #1
 8002392:	22f6      	movs	r2, #246	; 0xf6
 8002394:	21ef      	movs	r1, #239	; 0xef
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <read_up+0x58>)
 8002398:	f005 f948 	bl	800762c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800239c:	7a3b      	ldrb	r3, [r7, #8]
 800239e:	041a      	lsls	r2, r3, #16
 80023a0:	7a7b      	ldrb	r3, [r7, #9]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	4413      	add	r3, r2
 80023a6:	7aba      	ldrb	r2, [r7, #10]
 80023a8:	441a      	add	r2, r3
 80023aa:	793b      	ldrb	r3, [r7, #4]
 80023ac:	f1c3 0308 	rsb	r3, r3, #8
 80023b0:	fa42 f303 	asr.w	r3, r2, r3
 80023b4:	60fb      	str	r3, [r7, #12]
	return up;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	08013d30 	.word	0x08013d30
 80023c4:	200008b8 	.word	0x200008b8

080023c8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80023c8:	b084      	sub	sp, #16
 80023ca:	b480      	push	{r7}
 80023cc:	b089      	sub	sp, #36	; 0x24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80023d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80023e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80023e6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80023e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80023ec:	461a      	mov	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fb03 f303 	mul.w	r3, r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da01      	bge.n	80023fc <get_pressure+0x34>
 80023f8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023fc:	131b      	asrs	r3, r3, #12
 80023fe:	fb03 f302 	mul.w	r3, r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	da01      	bge.n	800240a <get_pressure+0x42>
 8002406:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800240a:	12db      	asrs	r3, r3, #11
 800240c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800240e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002412:	461a      	mov	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fb03 f302 	mul.w	r3, r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	da01      	bge.n	8002422 <get_pressure+0x5a>
 800241e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002422:	12db      	asrs	r3, r3, #11
 8002424:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800242e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002432:	009a      	lsls	r2, r3, #2
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4413      	add	r3, r2
 8002438:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800243c:	4093      	lsls	r3, r2
 800243e:	3302      	adds	r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	da00      	bge.n	8002446 <get_pressure+0x7e>
 8002444:	3303      	adds	r3, #3
 8002446:	109b      	asrs	r3, r3, #2
 8002448:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800244a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800244e:	461a      	mov	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb03 f302 	mul.w	r3, r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	da02      	bge.n	8002460 <get_pressure+0x98>
 800245a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800245e:	331f      	adds	r3, #31
 8002460:	135b      	asrs	r3, r3, #13
 8002462:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8002464:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fb03 f303 	mul.w	r3, r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	da01      	bge.n	8002478 <get_pressure+0xb0>
 8002474:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002478:	131b      	asrs	r3, r3, #12
 800247a:	fb03 f302 	mul.w	r3, r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	da02      	bge.n	8002488 <get_pressure+0xc0>
 8002482:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002486:	33ff      	adds	r3, #255	; 0xff
 8002488:	141b      	asrs	r3, r3, #16
 800248a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	3302      	adds	r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	da00      	bge.n	800249a <get_pressure+0xd2>
 8002498:	3303      	adds	r3, #3
 800249a:	109b      	asrs	r3, r3, #2
 800249c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800249e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024a8:	fb03 f302 	mul.w	r3, r3, r2
 80024ac:	0bdb      	lsrs	r3, r3, #15
 80024ae:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80024bc:	4611      	mov	r1, r2
 80024be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80024c2:	410a      	asrs	r2, r1
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db06      	blt.n	80024de <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	e005      	b.n	80024ea <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <get_pressure+0x12a>
 80024f0:	33ff      	adds	r3, #255	; 0xff
 80024f2:	121b      	asrs	r3, r3, #8
 80024f4:	461a      	mov	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da00      	bge.n	80024fe <get_pressure+0x136>
 80024fc:	33ff      	adds	r3, #255	; 0xff
 80024fe:	121b      	asrs	r3, r3, #8
 8002500:	fb03 f302 	mul.w	r3, r3, r2
 8002504:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f640 32de 	movw	r2, #3038	; 0xbde
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	da02      	bge.n	800251a <get_pressure+0x152>
 8002514:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002518:	33ff      	adds	r3, #255	; 0xff
 800251a:	141b      	asrs	r3, r3, #16
 800251c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <get_pressure+0x194>)
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	da02      	bge.n	8002530 <get_pressure+0x168>
 800252a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800252e:	33ff      	adds	r3, #255	; 0xff
 8002530:	141b      	asrs	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <get_pressure+0x17c>
 8002542:	330f      	adds	r3, #15
 8002544:	111b      	asrs	r3, r3, #4
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	61fb      	str	r3, [r7, #28]

	return p;
 800254e:	69fb      	ldr	r3, [r7, #28]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	b004      	add	sp, #16
 800255a:	4770      	bx	lr
 800255c:	ffffe343 	.word	0xffffe343

08002560 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fb92 	bl	8000c9c <__aeabi_i2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4923      	ldr	r1, [pc, #140]	; (8002608 <get_altitude+0xa8>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fc95 	bl	8000eac <__aeabi_fdiv>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff4f 	bl	8000428 <__aeabi_f2d>
 800258a:	a31b      	add	r3, pc, #108	; (adr r3, 80025f8 <get_altitude+0x98>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f00e faf6 	bl	8010b80 <pow>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	491b      	ldr	r1, [pc, #108]	; (800260c <get_altitude+0xac>)
 800259e:	f7fd fde3 	bl	8000168 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	a315      	add	r3, pc, #84	; (adr r3, 8002600 <get_altitude+0xa0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fa64 	bl	8000a88 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <get_altitude+0xb0>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7fe fd64 	bl	8001094 <__aeabi_fcmple>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <get_altitude+0x80>
 80025d2:	4910      	ldr	r1, [pc, #64]	; (8002614 <get_altitude+0xb4>)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe fd67 	bl	80010a8 <__aeabi_fcmpge>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	ccd9456c 	.word	0xccd9456c
 80025fc:	3fc85b95 	.word	0x3fc85b95
 8002600:	00000000 	.word	0x00000000
 8002604:	40e5a540 	.word	0x40e5a540
 8002608:	47c5e680 	.word	0x47c5e680
 800260c:	3ff00000 	.word	0x3ff00000
 8002610:	c3fa0000 	.word	0xc3fa0000
 8002614:	460ca000 	.word	0x460ca000

08002618 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
	return b_counter;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <get_b_counter+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	200008b0 	.word	0x200008b0

0800262c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

	b_counter++;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <set_b_counter+0x30>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <set_b_counter+0x30>)
 800263c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <set_b_counter+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4293      	cmp	r3, r2
 8002648:	d202      	bcs.n	8002650 <set_b_counter+0x24>
		b_counter = 0;
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <set_b_counter+0x30>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
	}
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200008b0 	.word	0x200008b0

08002660 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f00e fa1b 	bl	8010aa4 <cosf>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f00e fa47 	bl	8010b14 <sinf>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_Z8lla2ecefPfS_>:
 *  Created on: Jul 21, 2022
 *      Author: Kerim
 */
#include <coordinates.hpp>

void lla2ecef(float lla[3], float ecef[3]) {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	float deg2rad = M_PI/180.0;
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <_Z8lla2ecefPfS_+0x168>)
 800269c:	617b      	str	r3, [r7, #20]

	float lat = deg2rad*lla[0];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f7fe fb4d 	bl	8000d44 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	613b      	str	r3, [r7, #16]
	float lon = deg2rad*lla[1];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7fe fb44 	bl	8000d44 <__aeabi_fmul>
 80026bc:	4603      	mov	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
	float h = lla[2];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]

	ecef[0] = (Nlla+h)*cos(lat)*cos(lon);
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f7fd feae 	bl	8000428 <__aeabi_f2d>
 80026cc:	a346      	add	r3, pc, #280	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd fd4b 	bl	800016c <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	6938      	ldr	r0, [r7, #16]
 80026e0:	f7ff ffbe 	bl	8002660 <_ZSt3cosf>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe9e 	bl	8000428 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd fef0 	bl	80004d8 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff ffad 	bl	8002660 <_ZSt3cosf>
 8002706:	4603      	mov	r3, r0
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe8d 	bl	8000428 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fedf 	bl	80004d8 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f9b1 	bl	8000a88 <__aeabi_d2f>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
	ecef[1] = (Nlla+h)*cos(lat)*sin(lon);
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	a32d      	add	r3, pc, #180	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fd18 	bl	800016c <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f7ff ff8b 	bl	8002660 <_ZSt3cosf>
 800274a:	4603      	mov	r3, r0
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fe6b 	bl	8000428 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fd febd 	bl	80004d8 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff86 	bl	8002678 <_ZSt3sinf>
 800276c:	4603      	mov	r3, r0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe5a 	bl	8000428 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd feac 	bl	80004d8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	1d1c      	adds	r4, r3, #4
 800278c:	f7fe f97c 	bl	8000a88 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	6023      	str	r3, [r4, #0]
	ecef[2] = ((1-e*e)*Nlla+h)*sin(lat);
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f7fd fe47 	bl	8000428 <__aeabi_f2d>
 800279a:	a315      	add	r3, pc, #84	; (adr r3, 80027f0 <_Z8lla2ecefPfS_+0x160>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fce4 	bl	800016c <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7ff ff63 	bl	8002678 <_ZSt3sinf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe37 	bl	8000428 <__aeabi_f2d>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fe89 	bl	80004d8 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f103 0408 	add.w	r4, r3, #8
 80027d4:	f7fe f958 	bl	8000a88 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	6023      	str	r3, [r4, #0]
/*
	ecef[0] = 1;
	ecef[1] = 2;
	ecef[2] = 4;
	*/
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	00000000 	.word	0x00000000
 80027ec:	4158549d 	.word	0x4158549d
 80027f0:	8ae0b0af 	.word	0x8ae0b0af
 80027f4:	41585457 	.word	0x41585457
 80027f8:	3c8efa35 	.word	0x3c8efa35

080027fc <_Z8ecef2nedPfS_S_S_>:

void ecef2ned(float ecef[3], float ecef0[3], float lla0[3], float vned[2]) {
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
	float deg2rad = M_PI/180.0;
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <_Z8ecef2nedPfS_S_S_+0x138>)
 800280c:	627b      	str	r3, [r7, #36]	; 0x24


	float dxecef = ecef[0]- ecef0[0];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fe f989 	bl	8000b30 <__aeabi_fsub>
 800281e:	4603      	mov	r3, r0
 8002820:	623b      	str	r3, [r7, #32]
	float dyecef = ecef[1]- ecef0[1];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3304      	adds	r3, #4
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe f97d 	bl	8000b30 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	61fb      	str	r3, [r7, #28]
	float dzecef = ecef[2] -ecef0[2];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3308      	adds	r3, #8
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3308      	adds	r3, #8
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7fe f971 	bl	8000b30 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
	//dzecef = 0;

	float lat0 = deg2rad*lla0[0];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285a:	f7fe fa73 	bl	8000d44 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	617b      	str	r3, [r7, #20]
	float lon0 = deg2rad*lla0[1];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286c:	f7fe fa6a 	bl	8000d44 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	613b      	str	r3, [r7, #16]

	vned[1]=  -sin(lon0)*dxecef + cos(lon0)*dyecef;
 8002874:	6938      	ldr	r0, [r7, #16]
 8002876:	f7ff feff 	bl	8002678 <_ZSt3sinf>
 800287a:	4603      	mov	r3, r0
 800287c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa5e 	bl	8000d44 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	461d      	mov	r5, r3
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f7ff fee7 	bl	8002660 <_ZSt3cosf>
 8002892:	4603      	mov	r3, r0
 8002894:	69f9      	ldr	r1, [r7, #28]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fa54 	bl	8000d44 <__aeabi_fmul>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	1d1c      	adds	r4, r3, #4
 80028a4:	4611      	mov	r1, r2
 80028a6:	4628      	mov	r0, r5
 80028a8:	f7fe f944 	bl	8000b34 <__addsf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	6023      	str	r3, [r4, #0]
	vned[0] = -sin(lat0)*cos(lon0)*dxecef - sin(lat0)*sin(lon0)*dyecef + cos(lat0)*dzecef;
 80028b0:	6978      	ldr	r0, [r7, #20]
 80028b2:	f7ff fee1 	bl	8002678 <_ZSt3sinf>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80028bc:	6938      	ldr	r0, [r7, #16]
 80028be:	f7ff fecf 	bl	8002660 <_ZSt3cosf>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fa3c 	bl	8000d44 <__aeabi_fmul>
 80028cc:	4603      	mov	r3, r0
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa37 	bl	8000d44 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461d      	mov	r5, r3
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff fecc 	bl	8002678 <_ZSt3sinf>
 80028e0:	4604      	mov	r4, r0
 80028e2:	6938      	ldr	r0, [r7, #16]
 80028e4:	f7ff fec8 	bl	8002678 <_ZSt3sinf>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fa29 	bl	8000d44 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	69f9      	ldr	r1, [r7, #28]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fa24 	bl	8000d44 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4619      	mov	r1, r3
 8002900:	4628      	mov	r0, r5
 8002902:	f7fe f915 	bl	8000b30 <__aeabi_fsub>
 8002906:	4603      	mov	r3, r0
 8002908:	461c      	mov	r4, r3
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff fea8 	bl	8002660 <_ZSt3cosf>
 8002910:	4603      	mov	r3, r0
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fa15 	bl	8000d44 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	4620      	mov	r0, r4
 8002920:	f7fe f908 	bl	8000b34 <__addsf3>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}
 8002934:	3c8efa35 	.word	0x3c8efa35

08002938 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 800293e:	2351      	movs	r3, #81	; 0x51
 8002940:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8002942:	1dba      	adds	r2, r7, #6
 8002944:	2364      	movs	r3, #100	; 0x64
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	21e0      	movs	r1, #224	; 0xe0
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <request_range+0x2c>)
 800294e:	f004 fa15 	bl	8006d7c <HAL_I2C_Master_Transmit>
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <request_range+0x30>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]

}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200008b8 	.word	0x200008b8
 8002968:	20000000 	.word	0x20000000

0800296c <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <getRange+0x34>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			write = 1;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <getRange+0x38>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 800297e:	1d3a      	adds	r2, r7, #4
 8002980:	2364      	movs	r3, #100	; 0x64
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2302      	movs	r3, #2
 8002986:	21e1      	movs	r1, #225	; 0xe1
 8002988:	4807      	ldr	r0, [pc, #28]	; (80029a8 <getRange+0x3c>)
 800298a:	f004 faf5 	bl	8006f78 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800298e:	793b      	ldrb	r3, [r7, #4]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	797a      	ldrb	r2, [r7, #5]
 8002994:	4313      	orrs	r3, r2



	//return -1;

}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000193e 	.word	0x2000193e
 80029a4:	20000000 	.word	0x20000000
 80029a8:	200008b8 	.word	0x200008b8

080029ac <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

	u_counter++;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <set_ucounter+0x30>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <set_ucounter+0x30>)
 80029bc:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <set_ucounter+0x30>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d202      	bcs.n	80029d0 <set_ucounter+0x24>
		u_counter = 0;
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <set_ucounter+0x30>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
	}
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200008b4 	.word	0x200008b4

080029e0 <get_ucounter>:

int get_ucounter(void) {
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	return u_counter;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <get_ucounter+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	200008b4 	.word	0x200008b4

080029f4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f00e f98b 	bl	8010d30 <asinf>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f00d ff2d 	bl	801088c <atanf>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f00e f997 	bl	8010d7c <atan2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f00e f98d 	bl	8010d80 <sqrtf>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a74:	f003 f960 	bl	8005d38 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8002a78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a7c:	f003 f9be 	bl	8005dfc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a80:	f000 f8e4 	bl	8002c4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a84:	f000 fc26 	bl	80032d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002a88:	f000 fbfe 	bl	8003288 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002a8c:	f000 f92e 	bl	8002cec <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002a90:	f000 fa2a 	bl	8002ee8 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8002a94:	f000 f95e 	bl	8002d54 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8002a98:	f000 fb98 	bl	80031cc <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002a9c:	f000 fa80 	bl	8002fa0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002aa0:	f000 fb08 	bl	80030b4 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8002aa4:	f000 fb64 	bl	8003170 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8002aa8:	f000 fbc0 	bl	800322c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8002aac:	2209      	movs	r2, #9
 8002aae:	4956      	ldr	r1, [pc, #344]	; (8002c08 <main+0x198>)
 8002ab0:	4856      	ldr	r0, [pc, #344]	; (8002c0c <main+0x19c>)
 8002ab2:	f007 fde1 	bl	800a678 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, sizeof(ch_rcv_buf));
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4955      	ldr	r1, [pc, #340]	; (8002c10 <main+0x1a0>)
 8002aba:	4856      	ldr	r0, [pc, #344]	; (8002c14 <main+0x1a4>)
 8002abc:	f007 fddc 	bl	800a678 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8002ac0:	f000 fc8c 	bl	80033dc <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8002ac4:	4854      	ldr	r0, [pc, #336]	; (8002c18 <main+0x1a8>)
 8002ac6:	f7ff fb85 	bl	80021d4 <bmp_init>
  HMC5883L_initialize();
 8002aca:	f7fe fb5d 	bl	8001188 <HMC5883L_initialize>
  MotorBaslat();
 8002ace:	f001 fd11 	bl	80044f4 <_Z11MotorBaslatv>
  GPSInit();
 8002ad2:	f001 f8ef 	bl	8003cb4 <_Z7GPSInitv>
  HAL_Delay(1000);
 8002ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ada:	f003 f98f 	bl	8005dfc <HAL_Delay>

  Ringbuf_init();
 8002ade:	f7ff f87b 	bl	8001bd8 <Ringbuf_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8002ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ae6:	f003 f989 	bl	8005dfc <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8002aea:	201d      	movs	r0, #29
 8002aec:	f001 fca6 	bl	800443c <_Z7GyroErrh>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <main+0x1ac>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	201f      	movs	r0, #31
 8002af8:	f001 fca0 	bl	800443c <_Z7GyroErrh>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <main+0x1b0>)
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	2021      	movs	r0, #33	; 0x21
 8002b04:	f001 fc9a 	bl	800443c <_Z7GyroErrh>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a46      	ldr	r2, [pc, #280]	; (8002c24 <main+0x1b4>)
 8002b0c:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8002b0e:	2032      	movs	r0, #50	; 0x32
 8002b10:	f001 fcc2 	bl	8004498 <_Z6AccErrh>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fc86 	bl	8000428 <__aeabi_f2d>
 8002b1c:	a338      	add	r3, pc, #224	; (adr r3, 8002c00 <main+0x190>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fcd9 	bl	80004d8 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fd ffab 	bl	8000a88 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a3c      	ldr	r2, [pc, #240]	; (8002c28 <main+0x1b8>)
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	2034      	movs	r0, #52	; 0x34
 8002b3a:	f001 fcad 	bl	8004498 <_Z6AccErrh>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fc71 	bl	8000428 <__aeabi_f2d>
 8002b46:	a32e      	add	r3, pc, #184	; (adr r3, 8002c00 <main+0x190>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fcc4 	bl	80004d8 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fd ff96 	bl	8000a88 <__aeabi_d2f>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a33      	ldr	r2, [pc, #204]	; (8002c2c <main+0x1bc>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	2036      	movs	r0, #54	; 0x36
 8002b64:	f001 fc98 	bl	8004498 <_Z6AccErrh>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fc5c 	bl	8000428 <__aeabi_f2d>
 8002b70:	a323      	add	r3, pc, #140	; (adr r3, 8002c00 <main+0x190>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fcaf 	bl	80004d8 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ff81 	bl	8000a88 <__aeabi_d2f>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <main+0x1c0>)
 8002b8a:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002b8c:	2032      	movs	r0, #50	; 0x32
 8002b8e:	f001 f947 	bl	8003e20 <_Z6AccOkuh>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f881 	bl	8000c9c <__aeabi_i2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <main+0x1c4>)
 8002b9e:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002ba0:	2034      	movs	r0, #52	; 0x34
 8002ba2:	f001 f93d 	bl	8003e20 <_Z6AccOkuh>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe f877 	bl	8000c9c <__aeabi_i2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <main+0x1c8>)
 8002bb2:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8002bb4:	2036      	movs	r0, #54	; 0x36
 8002bb6:	f001 f933 	bl	8003e20 <_Z6AccOkuh>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f86d 	bl	8000c9c <__aeabi_i2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <main+0x1cc>)
 8002bc6:	6013      	str	r3, [r2, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8002bc8:	481d      	ldr	r0, [pc, #116]	; (8002c40 <main+0x1d0>)
 8002bca:	f006 f8f5 	bl	8008db8 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002bce:	481d      	ldr	r0, [pc, #116]	; (8002c44 <main+0x1d4>)
 8002bd0:	f006 f8a8 	bl	8008d24 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	481c      	ldr	r0, [pc, #112]	; (8002c48 <main+0x1d8>)
 8002bd8:	f006 f990 	bl	8008efc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002bdc:	2104      	movs	r1, #4
 8002bde:	481a      	ldr	r0, [pc, #104]	; (8002c48 <main+0x1d8>)
 8002be0:	f007 fabc 	bl	800a15c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002be4:	2108      	movs	r1, #8
 8002be6:	4818      	ldr	r0, [pc, #96]	; (8002c48 <main+0x1d8>)
 8002be8:	f007 fab8 	bl	800a15c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002bec:	210c      	movs	r1, #12
 8002bee:	4816      	ldr	r0, [pc, #88]	; (8002c48 <main+0x1d8>)
 8002bf0:	f006 f984 	bl	8008efc <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002bf4:	2108      	movs	r1, #8
 8002bf6:	4813      	ldr	r0, [pc, #76]	; (8002c44 <main+0x1d4>)
 8002bf8:	f006 fa7a 	bl	80090f0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <main+0x18c>
 8002bfe:	bf00      	nop
 8002c00:	8e8a71de 	.word	0x8e8a71de
 8002c04:	3f7ff2e4 	.word	0x3f7ff2e4
 8002c08:	2000189c 	.word	0x2000189c
 8002c0c:	20000a2c 	.word	0x20000a2c
 8002c10:	200018d4 	.word	0x200018d4
 8002c14:	20000a6c 	.word	0x20000a6c
 8002c18:	20001844 	.word	0x20001844
 8002c1c:	20000ba4 	.word	0x20000ba4
 8002c20:	20000ba8 	.word	0x20000ba8
 8002c24:	20000bac 	.word	0x20000bac
 8002c28:	20000bb0 	.word	0x20000bb0
 8002c2c:	20000bb4 	.word	0x20000bb4
 8002c30:	20000bb8 	.word	0x20000bb8
 8002c34:	20000b80 	.word	0x20000b80
 8002c38:	20000b84 	.word	0x20000b84
 8002c3c:	20000b88 	.word	0x20000b88
 8002c40:	20000954 	.word	0x20000954
 8002c44:	2000099c 	.word	0x2000099c
 8002c48:	2000090c 	.word	0x2000090c

08002c4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b090      	sub	sp, #64	; 0x40
 8002c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c52:	f107 0318 	add.w	r3, r7, #24
 8002c56:	2228      	movs	r2, #40	; 0x28
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00f ff8c 	bl	8012b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c80:	2302      	movs	r3, #2
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c90:	f107 0318 	add.w	r3, r7, #24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fbdb 	bl	8008450 <HAL_RCC_OscConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002caa:	f002 fbd7 	bl	800545c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cae:	230f      	movs	r3, #15
 8002cb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f005 fe41 	bl	8008950 <HAL_RCC_ClockConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002cde:	f002 fbbd 	bl	800545c <Error_Handler>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3740      	adds	r7, #64	; 0x40
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <_ZL12MX_I2C1_Initv+0x60>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cf8:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <_ZL12MX_I2C1_Initv+0x64>)
 8002cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <_ZL12MX_I2C1_Initv+0x5c>)
 8002d2a:	f003 fee3 	bl	8006af4 <HAL_I2C_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002d3e:	f002 fb8d 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200008b8 	.word	0x200008b8
 8002d4c:	40005400 	.word	0x40005400
 8002d50:	00061a80 	.word	0x00061a80

08002d54 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	615a      	str	r2, [r3, #20]
 8002d76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f00f fefa 	bl	8012b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002d86:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <_ZL12MX_TIM1_Initv+0x190>)
 8002d88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002d8a:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002d8c:	2247      	movs	r2, #71	; 0x47
 8002d8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002d96:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002d98:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002d9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002da4:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002daa:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002db0:	484b      	ldr	r0, [pc, #300]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002db2:	f006 f853 	bl	8008e5c <HAL_TIM_PWM_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002dc6:	f002 fb49 	bl	800545c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4841      	ldr	r0, [pc, #260]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002dda:	f007 fa5d 	bl	800a298 <HAL_TIMEx_MasterConfigSynchronization>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002dee:	f002 fb35 	bl	800545c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df2:	2360      	movs	r3, #96	; 0x60
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	2200      	movs	r2, #0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4832      	ldr	r0, [pc, #200]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002e18:	f006 fc0c 	bl	8009634 <HAL_TIM_PWM_ConfigChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002e2c:	f002 fb16 	bl	800545c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	2204      	movs	r2, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4829      	ldr	r0, [pc, #164]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002e3a:	f006 fbfb 	bl	8009634 <HAL_TIM_PWM_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002e4e:	f002 fb05 	bl	800545c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	2208      	movs	r2, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002e5c:	f006 fbea 	bl	8009634 <HAL_TIM_PWM_ConfigChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002e70:	f002 faf4 	bl	800545c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e78:	220c      	movs	r2, #12
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002e7e:	f006 fbd9 	bl	8009634 <HAL_TIM_PWM_ConfigChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8002e92:	f002 fae3 	bl	800545c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002eba:	f007 fa4b 	bl	800a354 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8002ece:	f002 fac5 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <_ZL12MX_TIM1_Initv+0x18c>)
 8002ed4:	f002 fc04 	bl	80056e0 <HAL_TIM_MspPostInit>

}
 8002ed8:	bf00      	nop
 8002eda:	3748      	adds	r7, #72	; 0x48
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000090c 	.word	0x2000090c
 8002ee4:	40012c00 	.word	0x40012c00

08002ee8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eee:	f107 0308 	add.w	r3, r7, #8
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efc:	463b      	mov	r3, r7
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f0e:	2247      	movs	r2, #71	; 0x47
 8002f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f2c:	481b      	ldr	r0, [pc, #108]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f2e:	f005 fea9 	bl	8008c84 <HAL_TIM_Base_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8002f42:	f002 fa8b 	bl	800545c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f4c:	f107 0308 	add.w	r3, r7, #8
 8002f50:	4619      	mov	r1, r3
 8002f52:	4812      	ldr	r0, [pc, #72]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f54:	f006 fc2c 	bl	80097b0 <HAL_TIM_ConfigClockSource>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8002f68:	f002 fa78 	bl	800545c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	4619      	mov	r1, r3
 8002f78:	4808      	ldr	r0, [pc, #32]	; (8002f9c <_ZL12MX_TIM2_Initv+0xb4>)
 8002f7a:	f007 f98d 	bl	800a298 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8002f8e:	f002 fa65 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000954 	.word	0x20000954

08002fa0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fcc:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <_ZL12MX_TIM3_Initv+0x110>)
 8002fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fd2:	2247      	movs	r2, #71	; 0x47
 8002fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fea:	4b30      	ldr	r3, [pc, #192]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ff0:	482e      	ldr	r0, [pc, #184]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8002ff2:	f005 fe47 	bl	8008c84 <HAL_TIM_Base_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8003006:	f002 fa29 	bl	800545c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	4619      	mov	r1, r3
 8003016:	4825      	ldr	r0, [pc, #148]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8003018:	f006 fbca 	bl	80097b0 <HAL_TIM_ConfigClockSource>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 800302c:	f002 fa16 	bl	800545c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003030:	481e      	ldr	r0, [pc, #120]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 8003032:	f006 f805 	bl	8009040 <HAL_TIM_IC_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8003046:	f002 fa09 	bl	800545c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	4619      	mov	r1, r3
 8003058:	4814      	ldr	r0, [pc, #80]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 800305a:	f007 f91d 	bl	800a298 <HAL_TIMEx_MasterConfigSynchronization>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 800306e:	f002 f9f5 	bl	800545c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003076:	2301      	movs	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003082:	463b      	mov	r3, r7
 8003084:	2208      	movs	r2, #8
 8003086:	4619      	mov	r1, r3
 8003088:	4808      	ldr	r0, [pc, #32]	; (80030ac <_ZL12MX_TIM3_Initv+0x10c>)
 800308a:	f006 fa3f 	bl	800950c <HAL_TIM_IC_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 800309e:	f002 f9dd 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	3728      	adds	r7, #40	; 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000099c 	.word	0x2000099c
 80030b0:	40000400 	.word	0x40000400

080030b4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ba:	f107 0308 	add.w	r3, r7, #8
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c8:	463b      	mov	r3, r7
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030d2:	4a26      	ldr	r2, [pc, #152]	; (800316c <_ZL12MX_TIM4_Initv+0xb8>)
 80030d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030d8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80030dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030f8:	481b      	ldr	r0, [pc, #108]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 80030fa:	f005 fdc3 	bl	8008c84 <HAL_TIM_Base_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 800310e:	f002 f9a5 	bl	800545c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4619      	mov	r1, r3
 800311e:	4812      	ldr	r0, [pc, #72]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 8003120:	f006 fb46 	bl	80097b0 <HAL_TIM_ConfigClockSource>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8003134:	f002 f992 	bl	800545c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003140:	463b      	mov	r3, r7
 8003142:	4619      	mov	r1, r3
 8003144:	4808      	ldr	r0, [pc, #32]	; (8003168 <_ZL12MX_TIM4_Initv+0xb4>)
 8003146:	f007 f8a7 	bl	800a298 <HAL_TIMEx_MasterConfigSynchronization>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 800315a:	f002 f97f 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200009e4 	.word	0x200009e4
 800316c:	40000800 	.word	0x40000800

08003170 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003176:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800317c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a6:	4807      	ldr	r0, [pc, #28]	; (80031c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031a8:	f007 f95b 	bl	800a462 <HAL_UART_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80031bc:	f002 f94e 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000a2c 	.word	0x20000a2c
 80031c8:	40013800 	.word	0x40013800

080031cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <_ZL19MX_USART2_UART_Initv+0x58>)
 80031d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80031da:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031f0:	220c      	movs	r2, #12
 80031f2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003200:	4807      	ldr	r0, [pc, #28]	; (8003220 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003202:	f007 f92e 	bl	800a462 <HAL_UART_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8003216:	f002 f921 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000a6c 	.word	0x20000a6c
 8003224:	40004400 	.word	0x40004400
 8003228:	000f4240 	.word	0x000f4240

0800322c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <_ZL19MX_USART3_UART_Initv+0x58>)
 8003234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003238:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800323c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003252:	220c      	movs	r2, #12
 8003254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 800325e:	2200      	movs	r2, #0
 8003260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003262:	4807      	ldr	r0, [pc, #28]	; (8003280 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003264:	f007 f8fd 	bl	800a462 <HAL_UART_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8003278:	f002 f8f0 	bl	800545c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000aac 	.word	0x20000aac
 8003284:	40004800 	.word	0x40004800

08003288 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_ZL11MX_DMA_Initv+0x48>)
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <_ZL11MX_DMA_Initv+0x48>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6153      	str	r3, [r2, #20]
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <_ZL11MX_DMA_Initv+0x48>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	200f      	movs	r0, #15
 80032ac:	f002 fec5 	bl	800603a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80032b0:	200f      	movs	r0, #15
 80032b2:	f002 fede 	bl	8006072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	2010      	movs	r0, #16
 80032bc:	f002 febd 	bl	800603a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80032c0:	2010      	movs	r0, #16
 80032c2:	f002 fed6 	bl	8006072 <HAL_NVIC_EnableIRQ>

}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000

080032d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e8:	4b38      	ldr	r3, [pc, #224]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a37      	ldr	r2, [pc, #220]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b35      	ldr	r3, [pc, #212]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4a31      	ldr	r2, [pc, #196]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 8003306:	f043 0320 	orr.w	r3, r3, #32
 800330a:	6193      	str	r3, [r2, #24]
 800330c:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6193      	str	r3, [r2, #24]
 8003324:	4b29      	ldr	r3, [pc, #164]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 8003336:	f043 0308 	orr.w	r3, r3, #8
 800333a:	6193      	str	r3, [r2, #24]
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <_ZL12MX_GPIO_Initv+0xf8>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800334e:	4820      	ldr	r0, [pc, #128]	; (80033d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8003350:	f003 fbb8 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2102      	movs	r1, #2
 8003358:	481e      	ldr	r0, [pc, #120]	; (80033d4 <_ZL12MX_GPIO_Initv+0x100>)
 800335a:	f003 fbb3 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003364:	481c      	ldr	r0, [pc, #112]	; (80033d8 <_ZL12MX_GPIO_Initv+0x104>)
 8003366:	f003 fbad 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800336a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003370:	2301      	movs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2302      	movs	r3, #2
 800337a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	4619      	mov	r1, r3
 8003382:	4813      	ldr	r0, [pc, #76]	; (80033d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8003384:	f003 f95e 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003388:	2302      	movs	r3, #2
 800338a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2302      	movs	r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	4619      	mov	r1, r3
 800339e:	480d      	ldr	r0, [pc, #52]	; (80033d4 <_ZL12MX_GPIO_Initv+0x100>)
 80033a0:	f003 f950 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033aa:	2301      	movs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2302      	movs	r3, #2
 80033b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	f107 0310 	add.w	r3, r7, #16
 80033ba:	4619      	mov	r1, r3
 80033bc:	4806      	ldr	r0, [pc, #24]	; (80033d8 <_ZL12MX_GPIO_Initv+0x104>)
 80033be:	f003 f941 	bl	8006644 <HAL_GPIO_Init>

}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40010c00 	.word	0x40010c00
 80033d8:	40010800 	.word	0x40010800

080033dc <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80033e2:	2300      	movs	r3, #0
 80033e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80033e6:	2305      	movs	r3, #5
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	2301      	movs	r3, #1
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2301      	movs	r3, #1
 80033f4:	223e      	movs	r2, #62	; 0x3e
 80033f6:	21d0      	movs	r1, #208	; 0xd0
 80033f8:	4826      	ldr	r0, [pc, #152]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 80033fa:	f004 f81d 	bl	8007438 <HAL_I2C_Mem_Write>
	config = 0x18;
 80033fe:	2318      	movs	r3, #24
 8003400:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8003402:	2305      	movs	r3, #5
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	2301      	movs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2301      	movs	r3, #1
 8003410:	2216      	movs	r2, #22
 8003412:	21d0      	movs	r1, #208	; 0xd0
 8003414:	481f      	ldr	r0, [pc, #124]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 8003416:	f004 f80f 	bl	8007438 <HAL_I2C_Mem_Write>
	config = 0x00;
 800341a:	2300      	movs	r3, #0
 800341c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800341e:	2305      	movs	r3, #5
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	2301      	movs	r3, #1
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	222d      	movs	r2, #45	; 0x2d
 800342e:	21a6      	movs	r1, #166	; 0xa6
 8003430:	4818      	ldr	r0, [pc, #96]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 8003432:	f004 f801 	bl	8007438 <HAL_I2C_Mem_Write>
	config = 0x08;
 8003436:	2308      	movs	r3, #8
 8003438:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800343a:	2305      	movs	r3, #5
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	2301      	movs	r3, #1
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2301      	movs	r3, #1
 8003448:	222d      	movs	r2, #45	; 0x2d
 800344a:	21a6      	movs	r1, #166	; 0xa6
 800344c:	4811      	ldr	r0, [pc, #68]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 800344e:	f003 fff3 	bl	8007438 <HAL_I2C_Mem_Write>
	config = 0x0D;
 8003452:	230d      	movs	r3, #13
 8003454:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003456:	2305      	movs	r3, #5
 8003458:	9302      	str	r3, [sp, #8]
 800345a:	2301      	movs	r3, #1
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2301      	movs	r3, #1
 8003464:	222c      	movs	r2, #44	; 0x2c
 8003466:	21a6      	movs	r1, #166	; 0xa6
 8003468:	480a      	ldr	r0, [pc, #40]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 800346a:	f003 ffe5 	bl	8007438 <HAL_I2C_Mem_Write>
	config = 0x01;
 800346e:	2301      	movs	r3, #1
 8003470:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8003472:	2305      	movs	r3, #5
 8003474:	9302      	str	r3, [sp, #8]
 8003476:	2301      	movs	r3, #1
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2301      	movs	r3, #1
 8003480:	2231      	movs	r2, #49	; 0x31
 8003482:	21a6      	movs	r1, #166	; 0xa6
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <_Z14MPU6050_Baslatv+0xb8>)
 8003486:	f003 ffd7 	bl	8007438 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200008b8 	.word	0x200008b8

08003498 <_Z8MagCalibsss>:
	}
}

#endif

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
 80034a2:	460b      	mov	r3, r1
 80034a4:	80bb      	strh	r3, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 80034aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc ffa8 	bl	8000404 <__aeabi_i2d>
 80034b4:	a366      	add	r3, pc, #408	; (adr r3, 8003650 <_Z8MagCalibsss+0x1b8>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fd f80d 	bl	80004d8 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4614      	mov	r4, r2
 80034c4:	461d      	mov	r5, r3
 80034c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fc ff9a 	bl	8000404 <__aeabi_i2d>
 80034d0:	a361      	add	r3, pc, #388	; (adr r3, 8003658 <_Z8MagCalibsss+0x1c0>)
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f7fc ffff 	bl	80004d8 <__aeabi_dmul>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fc fe43 	bl	800016c <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4614      	mov	r4, r2
 80034ec:	461d      	mov	r5, r3
 80034ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc ff86 	bl	8000404 <__aeabi_i2d>
 80034f8:	a359      	add	r3, pc, #356	; (adr r3, 8003660 <_Z8MagCalibsss+0x1c8>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fc ffeb 	bl	80004d8 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fc fe2d 	bl	8000168 <__aeabi_dsub>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <_Z8MagCalibsss+0x1f8>)
 800351c:	f7fc fe26 	bl	800016c <__adddf3>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd fa86 	bl	8000a38 <__aeabi_d2iz>
 800352c:	4603      	mov	r3, r0
 800352e:	b21a      	sxth	r2, r3
 8003530:	4b58      	ldr	r3, [pc, #352]	; (8003694 <_Z8MagCalibsss+0x1fc>)
 8003532:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 8003534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fc ff63 	bl	8000404 <__aeabi_i2d>
 800353e:	a346      	add	r3, pc, #280	; (adr r3, 8003658 <_Z8MagCalibsss+0x1c0>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f7fc ffc8 	bl	80004d8 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc ff55 	bl	8000404 <__aeabi_i2d>
 800355a:	a343      	add	r3, pc, #268	; (adr r3, 8003668 <_Z8MagCalibsss+0x1d0>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc ffba 	bl	80004d8 <__aeabi_dmul>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4620      	mov	r0, r4
 800356a:	4629      	mov	r1, r5
 800356c:	f7fc fdfe 	bl	800016c <__adddf3>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ff41 	bl	8000404 <__aeabi_i2d>
 8003582:	a33b      	add	r3, pc, #236	; (adr r3, 8003670 <_Z8MagCalibsss+0x1d8>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fc ffa6 	bl	80004d8 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fc fdea 	bl	800016c <__adddf3>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	a335      	add	r3, pc, #212	; (adr r3, 8003678 <_Z8MagCalibsss+0x1e0>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fc fde1 	bl	800016c <__adddf3>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd fa41 	bl	8000a38 <__aeabi_d2iz>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <_Z8MagCalibsss+0x200>)
 80035bc:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 80035be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ff1e 	bl	8000404 <__aeabi_i2d>
 80035c8:	a329      	add	r3, pc, #164	; (adr r3, 8003670 <_Z8MagCalibsss+0x1d8>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f7fc ff83 	bl	80004d8 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4614      	mov	r4, r2
 80035d8:	461d      	mov	r5, r3
 80035da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fc ff10 	bl	8000404 <__aeabi_i2d>
 80035e4:	a31e      	add	r3, pc, #120	; (adr r3, 8003660 <_Z8MagCalibsss+0x1c8>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f7fc ff75 	bl	80004d8 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fc fdb7 	bl	8000168 <__aeabi_dsub>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc fefc 	bl	8000404 <__aeabi_i2d>
 800360c:	a31c      	add	r3, pc, #112	; (adr r3, 8003680 <_Z8MagCalibsss+0x1e8>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f7fc ff61 	bl	80004d8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f7fc fda5 	bl	800016c <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	a317      	add	r3, pc, #92	; (adr r3, 8003688 <_Z8MagCalibsss+0x1f0>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fc fd9a 	bl	8000168 <__aeabi_dsub>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f7fd f9fc 	bl	8000a38 <__aeabi_d2iz>
 8003640:	4603      	mov	r3, r0
 8003642:	b21a      	sxth	r2, r3
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <_Z8MagCalibsss+0x204>)
 8003646:	801a      	strh	r2, [r3, #0]
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	4189374c 	.word	0x4189374c
 8003654:	3feee560 	.word	0x3feee560
 8003658:	3dee7818 	.word	0x3dee7818
 800365c:	3f8c725c 	.word	0x3f8c725c
 8003660:	f861a60d 	.word	0xf861a60d
 8003664:	3f929888 	.word	0x3f929888
 8003668:	3c361134 	.word	0x3c361134
 800366c:	3fee52bd 	.word	0x3fee52bd
 8003670:	a6ce3583 	.word	0xa6ce3583
 8003674:	3f7b8023 	.word	0x3f7b8023
 8003678:	33333333 	.word	0x33333333
 800367c:	4059d333 	.word	0x4059d333
 8003680:	24dd2f1b 	.word	0x24dd2f1b
 8003684:	3ff18106 	.word	0x3ff18106
 8003688:	e353f7cf 	.word	0xe353f7cf
 800368c:	40211ba5 	.word	0x40211ba5
 8003690:	40300000 	.word	0x40300000
 8003694:	200018ce 	.word	0x200018ce
 8003698:	200018d0 	.word	0x200018d0
 800369c:	200018d2 	.word	0x200018d2

080036a0 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80036ae:	da1f      	bge.n	80036f0 <_Z9checkModei+0x50>

		  controller.mod = STABILIZE;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <_Z9checkModei+0x88>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  controller.z0 = EKF.alt_gnd;
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <_Z9checkModei+0x8c>)
 80036ba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <_Z9checkModei+0x88>)
 80036c0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		  controller.x0 = EKF.x;
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <_Z9checkModei+0x8c>)
 80036c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <_Z9checkModei+0x88>)
 80036cc:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		  controller.y0 = EKF.y;
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <_Z9checkModei+0x8c>)
 80036d2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80036d6:	4a14      	ldr	r2, [pc, #80]	; (8003728 <_Z9checkModei+0x88>)
 80036d8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
		  controller.p_alt.reset();
 80036dc:	4814      	ldr	r0, [pc, #80]	; (8003730 <_Z9checkModei+0x90>)
 80036de:	f00c ff6f 	bl	80105c0 <_ZN3PID5resetEv>
		  controller.p_velx.reset();
 80036e2:	4814      	ldr	r0, [pc, #80]	; (8003734 <_Z9checkModei+0x94>)
 80036e4:	f00c ff6c 	bl	80105c0 <_ZN3PID5resetEv>
		  controller.p_vely.reset();
 80036e8:	4813      	ldr	r0, [pc, #76]	; (8003738 <_Z9checkModei+0x98>)
 80036ea:	f00c ff69 	bl	80105c0 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = ALT_HOLD;
	  }
}
 80036ee:	e016      	b.n	800371e <_Z9checkModei+0x7e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80036f6:	db0e      	blt.n	8003716 <_Z9checkModei+0x76>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80036fe:	4293      	cmp	r3, r2
 8003700:	dc09      	bgt.n	8003716 <_Z9checkModei+0x76>
		  controller.mod = ALT_HOLD;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <_Z9checkModei+0x88>)
 8003704:	2201      	movs	r2, #1
 8003706:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <_Z9checkModei+0x88>)
 800370c:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <_Z9checkModei+0x9c>)
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	e003      	b.n	800371e <_Z9checkModei+0x7e>
		  controller.mod = ALT_HOLD;
 8003716:	4b04      	ldr	r3, [pc, #16]	; (8003728 <_Z9checkModei+0x88>)
 8003718:	2201      	movs	r2, #1
 800371a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20001168 	.word	0x20001168
 800372c:	20000e28 	.word	0x20000e28
 8003730:	20001568 	.word	0x20001568
 8003734:	20001620 	.word	0x20001620
 8003738:	200016d8 	.word	0x200016d8
 800373c:	20001880 	.word	0x20001880

08003740 <_Z9Check_Armv>:

void Check_Arm() {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	if(!armed) {
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <_Z9Check_Armv+0xa8>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	f083 0301 	eor.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d047      	beq.n	80037e2 <_Z9Check_Armv+0xa2>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <_Z9Check_Armv+0xac>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f240 424b 	movw	r2, #1099	; 0x44b
 800375a:	4293      	cmp	r3, r2
 800375c:	dc3d      	bgt.n	80037da <_Z9Check_Armv+0x9a>
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <_Z9Check_Armv+0xac>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003766:	4293      	cmp	r3, r2
 8003768:	dd37      	ble.n	80037da <_Z9Check_Armv+0x9a>
				if(!arm_start){
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <_Z9Check_Armv+0xb0>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	f083 0301 	eor.w	r3, r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8003778:	f002 fb36 	bl	8005de8 <HAL_GetTick>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <_Z9Check_Armv+0xb4>)
 8003782:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <_Z9Check_Armv+0xb0>)
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800378a:	f002 fb2d 	bl	8005de8 <HAL_GetTick>
 800378e:	4603      	mov	r3, r0
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <_Z9Check_Armv+0xb4>)
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800379a:	4293      	cmp	r3, r2
 800379c:	bf8c      	ite	hi
 800379e:	2301      	movhi	r3, #1
 80037a0:	2300      	movls	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01c      	beq.n	80037e2 <_Z9Check_Armv+0xa2>
					controller.pid_roll.reset();
 80037a8:	4813      	ldr	r0, [pc, #76]	; (80037f8 <_Z9Check_Armv+0xb8>)
 80037aa:	f00c ff09 	bl	80105c0 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80037ae:	4813      	ldr	r0, [pc, #76]	; (80037fc <_Z9Check_Armv+0xbc>)
 80037b0:	f00c ff06 	bl	80105c0 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80037b4:	4812      	ldr	r0, [pc, #72]	; (8003800 <_Z9Check_Armv+0xc0>)
 80037b6:	f00c ff03 	bl	80105c0 <_ZN3PID5resetEv>
					armed = true;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <_Z9Check_Armv+0xa8>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <_Z9Check_Armv+0xc4>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					SetHome2();
 80037c8:	f000 ff20 	bl	800460c <_Z8SetHome2v>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80037cc:	2201      	movs	r2, #1
 80037ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d2:	480d      	ldr	r0, [pc, #52]	; (8003808 <_Z9Check_Armv+0xc8>)
 80037d4:	f003 f976 	bl	8006ac4 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 80037d8:	e003      	b.n	80037e2 <_Z9Check_Armv+0xa2>
				}

		}

		else {
			arm_start = false;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <_Z9Check_Armv+0xb0>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80037e0:	e7ff      	b.n	80037e2 <_Z9Check_Armv+0xa2>
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001821 	.word	0x20001821
 80037ec:	200017c8 	.word	0x200017c8
 80037f0:	20001820 	.word	0x20001820
 80037f4:	20001814 	.word	0x20001814
 80037f8:	20001340 	.word	0x20001340
 80037fc:	200013f8 	.word	0x200013f8
 8003800:	200014b0 	.word	0x200014b0
 8003804:	20000e28 	.word	0x20000e28
 8003808:	40010800 	.word	0x40010800

0800380c <_Z12Check_Disarmv>:

void Check_Disarm() {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	if(armed) {
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <_Z12Check_Disarmv+0x8c>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <_Z12Check_Disarmv+0x90>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f240 424b 	movw	r2, #1099	; 0x44b
 8003820:	4293      	cmp	r3, r2
 8003822:	dc32      	bgt.n	800388a <_Z12Check_Disarmv+0x7e>
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <_Z12Check_Disarmv+0x90>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f240 424b 	movw	r2, #1099	; 0x44b
 800382c:	4293      	cmp	r3, r2
 800382e:	dc2c      	bgt.n	800388a <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <_Z12Check_Disarmv+0x94>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	f083 0301 	eor.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 800383e:	f002 fad3 	bl	8005de8 <HAL_GetTick>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <_Z12Check_Disarmv+0x98>)
 8003848:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <_Z12Check_Disarmv+0x94>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8003850:	f002 faca 	bl	8005de8 <HAL_GetTick>
 8003854:	4603      	mov	r3, r0
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <_Z12Check_Disarmv+0x98>)
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003860:	4293      	cmp	r3, r2
 8003862:	bf8c      	ite	hi
 8003864:	2301      	movhi	r3, #1
 8003866:	2300      	movls	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <_Z12Check_Disarmv+0x86>
					armed = false;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <_Z12Check_Disarmv+0x8c>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <_Z12Check_Disarmv+0x9c>)
 8003876:	2200      	movs	r2, #0
 8003878:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003882:	480a      	ldr	r0, [pc, #40]	; (80038ac <_Z12Check_Disarmv+0xa0>)
 8003884:	f003 f91e 	bl	8006ac4 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8003888:	e003      	b.n	8003892 <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <_Z12Check_Disarmv+0x94>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003890:	e7ff      	b.n	8003892 <_Z12Check_Disarmv+0x86>
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20001821 	.word	0x20001821
 800389c:	200017c8 	.word	0x200017c8
 80038a0:	20001822 	.word	0x20001822
 80038a4:	20001818 	.word	0x20001818
 80038a8:	20000e28 	.word	0x20000e28
 80038ac:	40010800 	.word	0x40010800

080038b0 <_Z9TelemPackv>:

void TelemPack() {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80038b4:	4ba2      	ldr	r3, [pc, #648]	; (8003b40 <_Z9TelemPackv+0x290>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4aa2      	ldr	r2, [pc, #648]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038ba:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 80038bc:	4ba0      	ldr	r3, [pc, #640]	; (8003b40 <_Z9TelemPackv+0x290>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4aa0      	ldr	r2, [pc, #640]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038c2:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 80038c4:	4b9e      	ldr	r3, [pc, #632]	; (8003b40 <_Z9TelemPackv+0x290>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a9e      	ldr	r2, [pc, #632]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038ca:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80038cc:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <_Z9TelemPackv+0x298>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	4b9c      	ldr	r3, [pc, #624]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038d4:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80038d6:	4b9c      	ldr	r3, [pc, #624]	; (8003b48 <_Z9TelemPackv+0x298>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	4b99      	ldr	r3, [pc, #612]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038de:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80038e0:	4b99      	ldr	r3, [pc, #612]	; (8003b48 <_Z9TelemPackv+0x298>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	4b97      	ldr	r3, [pc, #604]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038e8:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <_Z9TelemPackv+0x298>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	4b94      	ldr	r3, [pc, #592]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038f2:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 80038f4:	4b95      	ldr	r3, [pc, #596]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80038f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80038fa:	4a92      	ldr	r2, [pc, #584]	; (8003b44 <_Z9TelemPackv+0x294>)
 80038fc:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 80038fe:	4b93      	ldr	r3, [pc, #588]	; (8003b4c <_Z9TelemPackv+0x29c>)
 8003900:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003904:	4a8f      	ldr	r2, [pc, #572]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003906:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 8003908:	4b91      	ldr	r3, [pc, #580]	; (8003b50 <_Z9TelemPackv+0x2a0>)
 800390a:	f993 3000 	ldrsb.w	r3, [r3]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd f9c4 	bl	8000c9c <__aeabi_i2f>
 8003914:	4603      	mov	r3, r0
 8003916:	4a8b      	ldr	r2, [pc, #556]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003918:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 800391a:	4b89      	ldr	r3, [pc, #548]	; (8003b40 <_Z9TelemPackv+0x290>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a89      	ldr	r2, [pc, #548]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003920:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8003922:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <_Z9TelemPackv+0x290>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003928:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <_Z9TelemPackv+0x290>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4a85      	ldr	r2, [pc, #532]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003930:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <_Z9TelemPackv+0x2a4>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4a83      	ldr	r2, [pc, #524]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003938:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 800393a:	4b86      	ldr	r3, [pc, #536]	; (8003b54 <_Z9TelemPackv+0x2a4>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	4a81      	ldr	r2, [pc, #516]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003940:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003944:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003948:	4a7e      	ldr	r2, [pc, #504]	; (8003b44 <_Z9TelemPackv+0x294>)
 800394a:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 800394e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003952:	4a7c      	ldr	r2, [pc, #496]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003954:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8003956:	4b80      	ldr	r3, [pc, #512]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003958:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800395c:	4a79      	ldr	r2, [pc, #484]	; (8003b44 <_Z9TelemPackv+0x294>)
 800395e:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 8003960:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003962:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8003966:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003968:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 800396a:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 800396c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003970:	4a74      	ldr	r2, [pc, #464]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003972:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 8003974:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003976:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800397a:	4a72      	ldr	r2, [pc, #456]	; (8003b44 <_Z9TelemPackv+0x294>)
 800397c:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003980:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003984:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003986:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8003988:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 800398a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800398e:	4a6d      	ldr	r2, [pc, #436]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003990:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8003992:	4b6e      	ldr	r3, [pc, #440]	; (8003b4c <_Z9TelemPackv+0x29c>)
 8003994:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003998:	4a6a      	ldr	r2, [pc, #424]	; (8003b44 <_Z9TelemPackv+0x294>)
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800399c:	4b6b      	ldr	r3, [pc, #428]	; (8003b4c <_Z9TelemPackv+0x29c>)
 800399e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80039a2:	4a68      	ldr	r2, [pc, #416]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039a4:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 80039a6:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039a8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80039ac:	4a65      	ldr	r2, [pc, #404]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039ae:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039b2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80039b6:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039b8:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 80039ba:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039bc:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80039c0:	4a60      	ldr	r2, [pc, #384]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039c2:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 80039c4:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039c6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80039ca:	4a5e      	ldr	r2, [pc, #376]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039cc:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 80039ce:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039d0:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 80039d4:	4a5b      	ldr	r2, [pc, #364]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80039d8:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <_Z9TelemPackv+0x29c>)
 80039da:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80039de:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039e0:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 80039e4:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80039e8:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039ea:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 80039ec:	4b5a      	ldr	r3, [pc, #360]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 80039ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80039f2:	4a54      	ldr	r2, [pc, #336]	; (8003b44 <_Z9TelemPackv+0x294>)
 80039f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 80039fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80039fe:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8003a04:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <_Z9TelemPackv+0x2ac>)
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	4b4e      	ldr	r3, [pc, #312]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a0a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <_Z9TelemPackv+0x2ac>)
 8003a10:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a18:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 8003a1c:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <_Z9TelemPackv+0x2ac>)
 8003a1e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003a22:	b21a      	sxth	r2, r3
 8003a24:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a26:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <_Z9TelemPackv+0x2ac>)
 8003a2c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003a30:	b21a      	sxth	r2, r3
 8003a32:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a34:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 8003a38:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a3a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003a3e:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 8003a44:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a46:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a52:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003a56:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 8003a5c:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a5e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8003a62:	4a38      	ldr	r2, [pc, #224]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <_Z9TelemPackv+0x29c>)
 8003a6a:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8003a6e:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a70:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8003a72:	f002 f9b9 	bl	8005de8 <HAL_GetTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = EKF.acc_pos_x;
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a80:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8003a84:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a86:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = EKF.acc_pos_y;
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003a8c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a92:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <_Z9TelemPackv+0x2b0>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003a9c:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <_Z9TelemPackv+0x2b4>)
 8003aa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003aa6:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003aa8:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <_Z9TelemPackv+0x2b8>)
 8003aae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003ab4:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <_Z9TelemPackv+0x2bc>)
 8003aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003ac0:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.lla.x = gpsData.ggastruct.lcation.latitude;
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <_Z9TelemPackv+0x2c0>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003aca:	f8c3 20b7 	str.w	r2, [r3, #183]	; 0xb7
	  telem_pack.gps.lla.y = gpsData.ggastruct.lcation.longitude;
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <_Z9TelemPackv+0x2c0>)
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003ad4:	f8c3 20bb 	str.w	r2, [r3, #187]	; 0xbb

	  telem_pack.gps.pos_body.x = EKF.xbody;
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003ada:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003ae0:	f8c3 20cf 	str.w	r2, [r3, #207]	; 0xcf
	  telem_pack.gps.pos_body.y = EKF.ybody;
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003ae6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003aec:	f8c3 20d3 	str.w	r2, [r3, #211]	; 0xd3

	  telem_pack.gps.pos_ned.x = EKF.xned;
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003af2:	f8d3 22b4 	ldr.w	r2, [r3, #692]	; 0x2b4
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003af8:	f8c3 20c3 	str.w	r2, [r3, #195]	; 0xc3
	  telem_pack.gps.pos_ned.y = EKF.yned;
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003afe:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003b04:	f8c3 20c7 	str.w	r2, [r3, #199]	; 0xc7

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003b0a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003b10:	f8c3 20db 	str.w	r2, [r3, #219]	; 0xdb
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <_Z9TelemPackv+0x2a8>)
 8003b16:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003b1c:	f8c3 20df 	str.w	r2, [r3, #223]	; 0xdf

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <_Z9TelemPackv+0x2c4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003b28:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <_Z9TelemPackv+0x2c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <_Z9TelemPackv+0x294>)
 8003b34:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <_Z9TelemPackv+0x2c4>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	e01b      	b.n	8003b78 <_Z9TelemPackv+0x2c8>
 8003b40:	20000bf8 	.word	0x20000bf8
 8003b44:	20000c1c 	.word	0x20000c1c
 8003b48:	20001798 	.word	0x20001798
 8003b4c:	20001168 	.word	0x20001168
 8003b50:	200018dc 	.word	0x200018dc
 8003b54:	20000bd4 	.word	0x20000bd4
 8003b58:	20000e28 	.word	0x20000e28
 8003b5c:	200018a8 	.word	0x200018a8
 8003b60:	20000ba0 	.word	0x20000ba0
 8003b64:	200018ce 	.word	0x200018ce
 8003b68:	200018d0 	.word	0x200018d0
 8003b6c:	200018d2 	.word	0x200018d2
 8003b70:	200018e0 	.word	0x200018e0
 8003b74:	200017c8 	.word	0x200017c8
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003b7a:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003b86:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003b92:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8003b96:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003b9e:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003baa:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bb6:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <_Z9TelemPackv+0x360>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bc2:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <_Z9TelemPackv+0x364>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bce:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <_Z9TelemPackv+0x364>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bda:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <_Z9TelemPackv+0x364>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003be6:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <_Z9TelemPackv+0x364>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bf2:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <_Z9TelemPackv+0x368>)
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <_Z9TelemPackv+0x35c>)
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f240 1301 	movw	r3, #257	; 0x101
 8003c02:	461a      	mov	r2, r3
 8003c04:	f00e ffaa 	bl	8012b5c <memcpy>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000c1c 	.word	0x20000c1c
 8003c10:	200017c8 	.word	0x200017c8
 8003c14:	200017a8 	.word	0x200017a8
 8003c18:	20000d20 	.word	0x20000d20

08003c1c <_Z9SendTelemv>:

void SendTelem() {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
	  TelemPack();
 8003c22:	f7ff fe45 	bl	80038b0 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8003c26:	2364      	movs	r3, #100	; 0x64
 8003c28:	f240 1201 	movw	r2, #257	; 0x101
 8003c2c:	490d      	ldr	r1, [pc, #52]	; (8003c64 <_Z9SendTelemv+0x48>)
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <_Z9SendTelemv+0x4c>)
 8003c30:	f006 fc90 	bl	800a554 <HAL_UART_Transmit>
	  char end_char = '@';
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8003c38:	1df9      	adds	r1, r7, #7
 8003c3a:	2364      	movs	r3, #100	; 0x64
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	480a      	ldr	r0, [pc, #40]	; (8003c68 <_Z9SendTelemv+0x4c>)
 8003c40:	f006 fc88 	bl	800a554 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8003c44:	1df9      	adds	r1, r7, #7
 8003c46:	2364      	movs	r3, #100	; 0x64
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4807      	ldr	r0, [pc, #28]	; (8003c68 <_Z9SendTelemv+0x4c>)
 8003c4c:	f006 fc82 	bl	800a554 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8003c50:	f002 f8ca 	bl	8005de8 <HAL_GetTick>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <_Z9SendTelemv+0x50>)
 8003c5a:	601a      	str	r2, [r3, #0]


}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000d20 	.word	0x20000d20
 8003c68:	20000a6c 	.word	0x20000a6c
 8003c6c:	2000181c 	.word	0x2000181c

08003c70 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af04      	add	r7, sp, #16
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	2301      	movs	r3, #1
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	2302      	movs	r3, #2
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	21d1      	movs	r1, #209	; 0xd1
 8003c90:	4807      	ldr	r0, [pc, #28]	; (8003cb0 <_Z7GyroOkuh+0x40>)
 8003c92:	f003 fccb 	bl	800762c <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8003c96:	7b3b      	ldrb	r3, [r7, #12]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	b21a      	sxth	r2, r3
 8003c9c:	7b7b      	ldrb	r3, [r7, #13]
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200008b8 	.word	0x200008b8

08003cb4 <_Z7GPSInitv>:

void GPSInit() {
 8003cb4:	b5b0      	push	{r4, r5, r7, lr}
 8003cb6:	b08e      	sub	sp, #56	; 0x38
 8003cb8:	af00      	add	r7, sp, #0
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 8003cba:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <_Z7GPSInitv+0x94>)
 8003cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cc2:	c303      	stmia	r3!, {r0, r1}
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	0c12      	lsrs	r2, r2, #16
 8003cca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Disable_GPGSV, 11, 100);
 8003ccc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003cd0:	2364      	movs	r3, #100	; 0x64
 8003cd2:	220b      	movs	r2, #11
 8003cd4:	481d      	ldr	r0, [pc, #116]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003cd6:	f006 fc3d 	bl	800a554 <HAL_UART_Transmit>
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <_Z7GPSInitv+0x9c>)
 8003cdc:	f107 041c 	add.w	r4, r7, #28
 8003ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce2:	c407      	stmia	r4!, {r0, r1, r2}
 8003ce4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_5Hz, 14, 100);
 8003ce6:	f107 011c 	add.w	r1, r7, #28
 8003cea:	2364      	movs	r3, #100	; 0x64
 8003cec:	220e      	movs	r2, #14
 8003cee:	4817      	ldr	r0, [pc, #92]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003cf0:	f006 fc30 	bl	800a554 <HAL_UART_Transmit>
	uint8_t Set_to_115[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E};
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <_Z7GPSInitv+0xa0>)
 8003cf6:	463c      	mov	r4, r7
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_115, 28, 100);
 8003d06:	4639      	mov	r1, r7
 8003d08:	2364      	movs	r3, #100	; 0x64
 8003d0a:	221c      	movs	r2, #28
 8003d0c:	480f      	ldr	r0, [pc, #60]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003d0e:	f006 fc21 	bl	800a554 <HAL_UART_Transmit>


    HAL_UART_Abort_IT(&huart3);
 8003d12:	480e      	ldr	r0, [pc, #56]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003d14:	f006 fd30 	bl	800a778 <HAL_UART_Abort_IT>

    HAL_UART_DeInit(&huart3);
 8003d18:	480c      	ldr	r0, [pc, #48]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003d1a:	f006 fbef 	bl	800a4fc <HAL_UART_DeInit>

    huart3.Init.BaudRate = 115200;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d24:	605a      	str	r2, [r3, #4]

    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8003d26:	4809      	ldr	r0, [pc, #36]	; (8003d4c <_Z7GPSInitv+0x98>)
 8003d28:	f006 fb9b 	bl	800a462 <HAL_UART_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <_Z7GPSInitv+0x8c>
        Error_Handler();
 8003d3c:	f001 fb8e 	bl	800545c <Error_Handler>
    }


}
 8003d40:	bf00      	nop
 8003d42:	3738      	adds	r7, #56	; 0x38
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}
 8003d48:	08013d44 	.word	0x08013d44
 8003d4c:	20000aac 	.word	0x20000aac
 8003d50:	08013d50 	.word	0x08013d50
 8003d54:	08013d60 	.word	0x08013d60

08003d58 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8003d62:	2305      	movs	r3, #5
 8003d64:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003d6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d70:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 8003d72:	f06f 0313 	mvn.w	r3, #19
 8003d76:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8003d78:	2314      	movs	r3, #20
 8003d7a:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8003d84:	3304      	adds	r3, #4
 8003d86:	429a      	cmp	r2, r3
 8003d88:	dd09      	ble.n	8003d9e <_Z7pwm2angt+0x46>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	db03      	blt.n	8003d9e <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8003d96:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003d9a:	83fb      	strh	r3, [r7, #30]
 8003d9c:	e001      	b.n	8003da2 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003da2:	8bfa      	ldrh	r2, [r7, #30]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	1a8a      	subs	r2, r1, r2
 8003dae:	fb02 f203 	mul.w	r2, r2, r3
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1acb      	subs	r3, r1, r3
 8003db8:	fb92 f2f3 	sdiv	r2, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc ff6b 	bl	8000c9c <__aeabi_i2f>
 8003dc6:	4603      	mov	r3, r0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8003dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dde:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003de0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003de4:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8003de6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003dea:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8003dec:	2364      	movs	r3, #100	; 0x64
 8003dee:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	1a8a      	subs	r2, r1, r2
 8003dfc:	fb02 f203 	mul.w	r2, r2, r3
 8003e00:	6939      	ldr	r1, [r7, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	1acb      	subs	r3, r1, r3
 8003e06:	fb92 f2f3 	sdiv	r2, r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	425b      	negs	r3, r3
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc ff43 	bl	8000c9c <__aeabi_i2f>
 8003e16:	4603      	mov	r3, r0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	2301      	movs	r3, #1
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	2302      	movs	r3, #2
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	21a7      	movs	r1, #167	; 0xa7
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <_Z6AccOkuh+0x40>)
 8003e42:	f003 fbf3 	bl	800762c <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8003e46:	7b7b      	ldrb	r3, [r7, #13]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	7b3b      	ldrb	r3, [r7, #12]
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003e54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200008b8 	.word	0x200008b8

08003e64 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fc fac9 	bl	8000404 <__aeabi_i2d>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f00c ff2d 	bl	8010cd8 <sqrt>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8003e8c:	b5b0      	push	{r4, r5, r7, lr}
 8003e8e:	b08e      	sub	sp, #56	; 0x38
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8003e98:	4bc6      	ldr	r3, [pc, #792]	; (80041b4 <_Z9DCM2EulerPsS_+0x328>)
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	3302      	adds	r3, #2
 8003ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec0:	fb03 f301 	mul.w	r3, r3, r1
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed8:	fb03 f301 	mul.w	r3, r3, r1
 8003edc:	4413      	add	r3, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ffc0 	bl	8003e64 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7fc fdcc 	bl	8000a88 <__aeabi_d2f>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	3302      	adds	r3, #2
 8003f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f04:	fb03 f302 	mul.w	r3, r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	3202      	adds	r2, #2
 8003f0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003f10:	fb02 f203 	mul.w	r2, r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	fb03 f301 	mul.w	r3, r3, r1
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	3102      	adds	r1, #2
 8003f2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad2      	subs	r2, r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3304      	adds	r3, #4
 8003f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f46:	fb03 f301 	mul.w	r3, r3, r1
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	3104      	adds	r1, #4
 8003f4e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	441a      	add	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f68:	fb03 f301 	mul.w	r3, r3, r1
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	3104      	adds	r1, #4
 8003f70:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fe8e 	bl	8000c9c <__aeabi_i2f>
 8003f80:	4604      	mov	r4, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f92:	fb03 f202 	mul.w	r2, r3, r2
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fa6:	fb03 f301 	mul.w	r3, r3, r1
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fe75 	bl	8000c9c <__aeabi_i2f>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f9d3 	bl	8004360 <_Z6squaref>
 8003fba:	4605      	mov	r5, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fcc:	fb03 f202 	mul.w	r2, r3, r2
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe0:	fb03 f301 	mul.w	r3, r3, r1
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fe58 	bl	8000c9c <__aeabi_i2f>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f9b6 	bl	8004360 <_Z6squaref>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f7fc fd9b 	bl	8000b34 <__addsf3>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461d      	mov	r5, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3302      	adds	r3, #2
 8004006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004014:	fb03 f202 	mul.w	r2, r3, r2
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3304      	adds	r3, #4
 800401c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004020:	4619      	mov	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3302      	adds	r3, #2
 8004026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800402a:	fb03 f301 	mul.w	r3, r3, r1
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc fe33 	bl	8000c9c <__aeabi_i2f>
 8004036:	4603      	mov	r3, r0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f991 	bl	8004360 <_Z6squaref>
 800403e:	4603      	mov	r3, r0
 8004040:	4619      	mov	r1, r3
 8004042:	4628      	mov	r0, r5
 8004044:	f7fc fd76 	bl	8000b34 <__addsf3>
 8004048:	4603      	mov	r3, r0
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fd04 	bl	8002a58 <_ZSt4sqrtf>
 8004050:	4603      	mov	r3, r0
 8004052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fe75 	bl	8000d44 <__aeabi_fmul>
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	4620      	mov	r0, r4
 8004060:	f7fc ff24 	bl	8000eac <__aeabi_fdiv>
 8004064:	4603      	mov	r3, r0
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3304      	adds	r3, #4
 800406c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004070:	461a      	mov	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3302      	adds	r3, #2
 8004076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800407a:	fb03 f202 	mul.w	r2, r3, r2
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3302      	adds	r3, #2
 8004082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004086:	4619      	mov	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004090:	fb03 f301 	mul.w	r3, r3, r1
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f7fc fe00 	bl	8000c9c <__aeabi_i2f>
 800409c:	4604      	mov	r4, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3302      	adds	r3, #2
 80040aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3302      	adds	r3, #2
 80040b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ba:	4619      	mov	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	fb03 f301 	mul.w	r3, r3, r1
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fde7 	bl	8000c9c <__aeabi_i2f>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f945 	bl	8004360 <_Z6squaref>
 80040d6:	4605      	mov	r5, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e8:	fb03 f202 	mul.w	r2, r3, r2
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3304      	adds	r3, #4
 80040f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f4:	4619      	mov	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040fc:	fb03 f301 	mul.w	r3, r3, r1
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fdca 	bl	8000c9c <__aeabi_i2f>
 8004108:	4603      	mov	r3, r0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f928 	bl	8004360 <_Z6squaref>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	4628      	mov	r0, r5
 8004116:	f7fc fd0d 	bl	8000b34 <__addsf3>
 800411a:	4603      	mov	r3, r0
 800411c:	461d      	mov	r5, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3302      	adds	r3, #2
 8004122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004130:	fb03 f202 	mul.w	r2, r3, r2
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3304      	adds	r3, #4
 8004138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800413c:	4619      	mov	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3302      	adds	r3, #2
 8004142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004146:	fb03 f301 	mul.w	r3, r3, r1
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc fda5 	bl	8000c9c <__aeabi_i2f>
 8004152:	4603      	mov	r3, r0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f903 	bl	8004360 <_Z6squaref>
 800415a:	4603      	mov	r3, r0
 800415c:	4619      	mov	r1, r3
 800415e:	4628      	mov	r0, r5
 8004160:	f7fc fce8 	bl	8000b34 <__addsf3>
 8004164:	4603      	mov	r3, r0
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fc76 	bl	8002a58 <_ZSt4sqrtf>
 800416c:	4603      	mov	r3, r0
 800416e:	4619      	mov	r1, r3
 8004170:	4620      	mov	r0, r4
 8004172:	f7fc fe9b 	bl	8000eac <__aeabi_fdiv>
 8004176:	4603      	mov	r3, r0
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004180:	425b      	negs	r3, r3
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc fd8a 	bl	8000c9c <__aeabi_i2f>
 8004188:	4603      	mov	r3, r0
 800418a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800418c:	4618      	mov	r0, r3
 800418e:	f7fc fe8d 	bl	8000eac <__aeabi_fdiv>
 8004192:	4603      	mov	r3, r0
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3302      	adds	r3, #2
 800419a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419e:	425b      	negs	r3, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc fd7b 	bl	8000c9c <__aeabi_i2f>
 80041a6:	4603      	mov	r3, r0
 80041a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fe7e 	bl	8000eac <__aeabi_fdiv>
 80041b0:	4603      	mov	r3, r0
 80041b2:	e001      	b.n	80041b8 <_Z9DCM2EulerPsS_+0x32c>
 80041b4:	42654ca3 	.word	0x42654ca3
 80041b8:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3304      	adds	r3, #4
 80041be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c2:	425b      	negs	r3, r3
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fd69 	bl	8000c9c <__aeabi_i2f>
 80041ca:	4603      	mov	r3, r0
 80041cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc fe6c 	bl	8000eac <__aeabi_fdiv>
 80041d4:	4603      	mov	r3, r0
 80041d6:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fc14 	bl	8002a0c <_ZSt4asinf>
 80041e4:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 80041e6:	69b8      	ldr	r0, [r7, #24]
 80041e8:	f7fe fa3a 	bl	8002660 <_ZSt3cosf>
 80041ec:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 80041ee:	69b9      	ldr	r1, [r7, #24]
 80041f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041f2:	f7fc fda7 	bl	8000d44 <__aeabi_fmul>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	6a38      	ldr	r0, [r7, #32]
 8004202:	f7fc fe53 	bl	8000eac <__aeabi_fdiv>
 8004206:	4603      	mov	r3, r0
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fc0b 	bl	8002a24 <_ZSt4atanf>
 800420e:	4603      	mov	r3, r0
 8004210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fd96 	bl	8000d44 <__aeabi_fmul>
 8004218:	4603      	mov	r3, r0
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8004220:	6979      	ldr	r1, [r7, #20]
 8004222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004224:	f7fc fe42 	bl	8000eac <__aeabi_fdiv>
 8004228:	4603      	mov	r3, r0
 800422a:	461c      	mov	r4, r3
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004230:	f7fc fe3c 	bl	8000eac <__aeabi_fdiv>
 8004234:	4603      	mov	r3, r0
 8004236:	4619      	mov	r1, r3
 8004238:	4620      	mov	r0, r4
 800423a:	f7fe fbff 	bl	8002a3c <_ZSt5atan2ff>
 800423e:	4603      	mov	r3, r0
 8004240:	4619      	mov	r1, r3
 8004242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004244:	f7fc fd7e 	bl	8000d44 <__aeabi_fmul>
 8004248:	4603      	mov	r3, r0
 800424a:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 800424c:	6938      	ldr	r0, [r7, #16]
 800424e:	f7fc ff55 	bl	80010fc <__aeabi_f2iz>
 8004252:	4603      	mov	r3, r0
 8004254:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8004258:	da23      	bge.n	80042a2 <_Z9DCM2EulerPsS_+0x416>
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f7fc ff4e 	bl	80010fc <__aeabi_f2iz>
 8004260:	4603      	mov	r3, r0
 8004262:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8004266:	db1c      	blt.n	80042a2 <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d04b      	beq.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
 8004270:	4b38      	ldr	r3, [pc, #224]	; (8004354 <_Z9DCM2EulerPsS_+0x4c8>)
 8004272:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc ff00 	bl	8001080 <__aeabi_fcmplt>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d100      	bne.n	8004288 <_Z9DCM2EulerPsS_+0x3fc>
 8004286:	e03f      	b.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 8004288:	4b33      	ldr	r3, [pc, #204]	; (8004358 <_Z9DCM2EulerPsS_+0x4cc>)
 800428a:	f993 3000 	ldrsb.w	r3, [r3]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3301      	adds	r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	b25a      	sxtb	r2, r3
 8004296:	4b30      	ldr	r3, [pc, #192]	; (8004358 <_Z9DCM2EulerPsS_+0x4cc>)
 8004298:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80042a0:	e032      	b.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80042a2:	6938      	ldr	r0, [r7, #16]
 80042a4:	f7fc ff2a 	bl	80010fc <__aeabi_f2iz>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2baf      	cmp	r3, #175	; 0xaf
 80042ac:	dd22      	ble.n	80042f4 <_Z9DCM2EulerPsS_+0x468>
 80042ae:	6938      	ldr	r0, [r7, #16]
 80042b0:	f7fc ff24 	bl	80010fc <__aeabi_f2iz>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2bb4      	cmp	r3, #180	; 0xb4
 80042b8:	dc1c      	bgt.n	80042f4 <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80042ba:	4b25      	ldr	r3, [pc, #148]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d022      	beq.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <_Z9DCM2EulerPsS_+0x4c8>)
 80042c4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc fef5 	bl	80010bc <__aeabi_fcmpgt>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d100      	bne.n	80042da <_Z9DCM2EulerPsS_+0x44e>
 80042d8:	e016      	b.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <_Z9DCM2EulerPsS_+0x4cc>)
 80042dc:	f993 3000 	ldrsb.w	r3, [r3]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	b25a      	sxtb	r2, r3
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <_Z9DCM2EulerPsS_+0x4cc>)
 80042ea:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80042f2:	e009      	b.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <_Z9DCM2EulerPsS_+0x4d0>)
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	2b32      	cmp	r3, #50	; 0x32
 80042fa:	d905      	bls.n	8004308 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <_Z9DCM2EulerPsS_+0x4d0>)
 8004304:	2200      	movs	r2, #0
 8004306:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <_Z9DCM2EulerPsS_+0x4c4>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d005      	beq.n	800431c <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <_Z9DCM2EulerPsS_+0x4d0>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <_Z9DCM2EulerPsS_+0x4d0>)
 800431a:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <_Z9DCM2EulerPsS_+0x4cc>)
 800431e:	f993 3000 	ldrsb.w	r3, [r3]
 8004322:	461a      	mov	r2, r3
 8004324:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004328:	fb03 f302 	mul.w	r3, r3, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc fcb5 	bl	8000c9c <__aeabi_i2f>
 8004332:	4603      	mov	r3, r0
 8004334:	4619      	mov	r1, r3
 8004336:	6938      	ldr	r0, [r7, #16]
 8004338:	f7fc fbfc 	bl	8000b34 <__addsf3>
 800433c:	4603      	mov	r3, r0
 800433e:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 8004346:	bf00      	nop

}
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	3738      	adds	r7, #56	; 0x38
 800434c:	46bd      	mov	sp, r7
 800434e:	bdb0      	pop	{r4, r5, r7, pc}
 8004350:	20000001 	.word	0x20000001
 8004354:	20000e28 	.word	0x20000e28
 8004358:	200018dc 	.word	0x200018dc
 800435c:	200018de 	.word	0x200018de

08004360 <_Z6squaref>:

float square(float x) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fcea 	bl	8000d44 <__aeabi_fmul>
 8004370:	4603      	mov	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]
	return y;
 8004374:	68fb      	ldr	r3, [r7, #12]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <_Z6PWMYazv>:

void PWMYaz() {
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
		  }

*/

#ifdef UAV1
	  if(armed) {
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <_Z6PWMYazv+0xac>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d036      	beq.n	80043fa <_Z6PWMYazv+0x7a>



		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <_Z6PWMYazv+0xb0>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f240 52db 	movw	r2, #1499	; 0x5db
 8004394:	4293      	cmp	r3, r2
 8004396:	dc1b      	bgt.n	80043d0 <_Z6PWMYazv+0x50>
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <_Z6PWMYazv+0xb0>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f240 424c 	movw	r2, #1100	; 0x44c
 80043a0:	4293      	cmp	r3, r2
 80043a2:	dd15      	ble.n	80043d0 <_Z6PWMYazv+0x50>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <_Z6PWMYazv+0xb4>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b23      	ldr	r3, [pc, #140]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <_Z6PWMYazv+0xb4>)
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <_Z6PWMYazv+0xb4>)
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <_Z6PWMYazv+0xb4>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
 80043cc:	bf00      	nop
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 80043ce:	e028      	b.n	8004422 <_Z6PWMYazv+0xa2>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80043e4:	4b14      	ldr	r3, [pc, #80]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043f8:	e013      	b.n	8004422 <_Z6PWMYazv+0xa2>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80043fa:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_Z6PWMYazv+0xb8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <_Z6PWMYazv+0xb8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <_Z6PWMYazv+0xb8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <_Z6PWMYazv+0xb8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004422:	bf00      	nop
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20001821 	.word	0x20001821
 8004430:	200017c8 	.word	0x200017c8
 8004434:	20001798 	.word	0x20001798
 8004438:	2000090c 	.word	0x2000090c

0800443c <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004456:	da12      	bge.n	800447e <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fc08 	bl	8003c70 <_Z7GyroOkuh>
 8004460:	4603      	mov	r3, r0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fc1a 	bl	8000c9c <__aeabi_i2f>
 8004468:	4603      	mov	r3, r0
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7fc fb61 	bl	8000b34 <__addsf3>
 8004472:	4603      	mov	r3, r0
 8004474:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3301      	adds	r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	e7e8      	b.n	8004450 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800447e:	4905      	ldr	r1, [pc, #20]	; (8004494 <_Z7GyroErrh+0x58>)
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7fc fd13 	bl	8000eac <__aeabi_fdiv>
 8004486:	4603      	mov	r3, r0
 8004488:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	44fa0000 	.word	0x44fa0000

08004498 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80044b2:	da12      	bge.n	80044da <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fcb2 	bl	8003e20 <_Z6AccOkuh>
 80044bc:	4603      	mov	r3, r0
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fbec 	bl	8000c9c <__aeabi_i2f>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4619      	mov	r1, r3
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7fc fb33 	bl	8000b34 <__addsf3>
 80044ce:	4603      	mov	r3, r0
 80044d0:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	e7e8      	b.n	80044ac <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80044da:	4905      	ldr	r1, [pc, #20]	; (80044f0 <_Z6AccErrh+0x58>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7fc fce5 	bl	8000eac <__aeabi_fdiv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80044e6:	68fb      	ldr	r3, [r7, #12]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	44fa0000 	.word	0x44fa0000

080044f4 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <_Z11MotorBaslatv+0x38>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004500:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <_Z11MotorBaslatv+0x38>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <_Z11MotorBaslatv+0x38>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <_Z11MotorBaslatv+0x38>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8004520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004524:	f001 fc6a 	bl	8005dfc <HAL_Delay>
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2000090c 	.word	0x2000090c

08004530 <_Z7SetHomev>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void SetHome() {
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	home_counter++;
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <_Z7SetHomev+0xc4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a2e      	ldr	r2, [pc, #184]	; (80045f4 <_Z7SetHomev+0xc4>)
 800453c:	6013      	str	r3, [r2, #0]
	if(home_counter != 11) {
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <_Z7SetHomev+0xc4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b0b      	cmp	r3, #11
 8004544:	d024      	beq.n	8004590 <_Z7SetHomev+0x60>
		lla0_mean[0]  += gpsData.ggastruct.lcation.latitude;
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <_Z7SetHomev+0xc8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <_Z7SetHomev+0xcc>)
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc faef 	bl	8000b34 <__addsf3>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <_Z7SetHomev+0xc8>)
 800455c:	601a      	str	r2, [r3, #0]
		lla0_mean[1] += gpsData.ggastruct.lcation.longitude;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <_Z7SetHomev+0xc8>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a26      	ldr	r2, [pc, #152]	; (80045fc <_Z7SetHomev+0xcc>)
 8004564:	6892      	ldr	r2, [r2, #8]
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f7fc fae3 	bl	8000b34 <__addsf3>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <_Z7SetHomev+0xc8>)
 8004574:	605a      	str	r2, [r3, #4]
		lla0_mean[2] += gpsData.ggastruct.alt.altitude;
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <_Z7SetHomev+0xc8>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a20      	ldr	r2, [pc, #128]	; (80045fc <_Z7SetHomev+0xcc>)
 800457c:	6a12      	ldr	r2, [r2, #32]
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fad7 	bl	8000b34 <__addsf3>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <_Z7SetHomev+0xc8>)
 800458c:	609a      	str	r2, [r3, #8]
		lla0_mean[2] = 0;

		home = true;
	}

}
 800458e:	e02f      	b.n	80045f0 <_Z7SetHomev+0xc0>
		home_counter = 0;
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <_Z7SetHomev+0xc4>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
		lla0[0] = lla0_mean[0]/10;
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <_Z7SetHomev+0xc8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4919      	ldr	r1, [pc, #100]	; (8004600 <_Z7SetHomev+0xd0>)
 800459c:	4618      	mov	r0, r3
 800459e:	f7fc fc85 	bl	8000eac <__aeabi_fdiv>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <_Z7SetHomev+0xd4>)
 80045a8:	601a      	str	r2, [r3, #0]
		lla0[1] = lla0_mean[1]/10;
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <_Z7SetHomev+0xc8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4914      	ldr	r1, [pc, #80]	; (8004600 <_Z7SetHomev+0xd0>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fc fc7b 	bl	8000eac <__aeabi_fdiv>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <_Z7SetHomev+0xd4>)
 80045bc:	605a      	str	r2, [r3, #4]
		lla0[2] = lla0_mean[2]/10;
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <_Z7SetHomev+0xc8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	490f      	ldr	r1, [pc, #60]	; (8004600 <_Z7SetHomev+0xd0>)
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fc fc71 	bl	8000eac <__aeabi_fdiv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <_Z7SetHomev+0xd4>)
 80045d0:	609a      	str	r2, [r3, #8]
		lla0_mean[0] = 0;
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <_Z7SetHomev+0xc8>)
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
		lla0_mean[1] = 0;
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <_Z7SetHomev+0xc8>)
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
		lla0_mean[2] = 0;
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_Z7SetHomev+0xc8>)
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
		home = true;
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <_Z7SetHomev+0xd8>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20001898 	.word	0x20001898
 80045f8:	20000bc8 	.word	0x20000bc8
 80045fc:	200018e0 	.word	0x200018e0
 8004600:	41200000 	.word	0x41200000
 8004604:	20000bbc 	.word	0x20000bbc
 8004608:	20001888 	.word	0x20001888

0800460c <_Z8SetHome2v>:

void SetHome2() {
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
		lla0[0] = gpsData.ggastruct.lcation.latitude;
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <_Z8SetHome2v+0x2c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <_Z8SetHome2v+0x30>)
 8004616:	6013      	str	r3, [r2, #0]
		lla0[1] = gpsData.ggastruct.lcation.longitude;
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <_Z8SetHome2v+0x2c>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <_Z8SetHome2v+0x30>)
 800461e:	6053      	str	r3, [r2, #4]
		lla0[2] = gpsData.ggastruct.alt.altitude;
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <_Z8SetHome2v+0x2c>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a05      	ldr	r2, [pc, #20]	; (800463c <_Z8SetHome2v+0x30>)
 8004626:	6093      	str	r3, [r2, #8]

		home = true;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <_Z8SetHome2v+0x34>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200018e0 	.word	0x200018e0
 800463c:	20000bbc 	.word	0x20000bbc
 8004640:	20001888 	.word	0x20001888
 8004644:	00000000 	.word	0x00000000

08004648 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	b0ad      	sub	sp, #180	; 0xb4
 800464c:	af0c      	add	r7, sp, #48	; 0x30
 800464e:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4a9f      	ldr	r2, [pc, #636]	; (80048d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004654:	4293      	cmp	r3, r2
 8004656:	f040 8628 	bne.w	80052aa <HAL_TIM_PeriodElapsedCallback+0xc62>
		//1.25 ms || 800 Hz
		  Check_Arm();
 800465a:	f7ff f871 	bl	8003740 <_Z9Check_Armv>
		  Check_Disarm();
 800465e:	f7ff f8d5 	bl	800380c <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 8004662:	2014      	movs	r0, #20
 8004664:	f7fe f9a2 	bl	80029ac <set_ucounter>
		set_b_counter(12);
 8004668:	200c      	movs	r0, #12
 800466a:	f7fd ffdf 	bl	800262c <set_b_counter>

		controller_counter++;
 800466e:	4b99      	ldr	r3, [pc, #612]	; (80048d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	4b97      	ldr	r3, [pc, #604]	; (80048d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004678:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 800467a:	4b97      	ldr	r3, [pc, #604]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	4b95      	ldr	r3, [pc, #596]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004684:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 8004686:	4b95      	ldr	r3, [pc, #596]	; (80048dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	4b93      	ldr	r3, [pc, #588]	; (80048dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004690:	801a      	strh	r2, [r3, #0]
		gps_counter++;
 8004692:	4b93      	ldr	r3, [pc, #588]	; (80048e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	4b91      	ldr	r3, [pc, #580]	; (80048e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800469c:	801a      	strh	r2, [r3, #0]

		if(gps_counter == GPS_CLOCK_RATE) {
 800469e:	4b90      	ldr	r3, [pc, #576]	; (80048e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	2b28      	cmp	r3, #40	; 0x28
 80046a4:	f040 808d 	bne.w	80047c2 <HAL_TIM_PeriodElapsedCallback+0x17a>
			gps_counter = 0;
 80046a8:	4b8d      	ldr	r3, [pc, #564]	; (80048e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	801a      	strh	r2, [r3, #0]
			getGPSData(&gpsData);
 80046ae:	488d      	ldr	r0, [pc, #564]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046b0:	f7fd fa32 	bl	8001b18 <getGPSData>
			EKF.gps_fixed = gpsData.ggastruct.isfixValid;
 80046b4:	4b8b      	ldr	r3, [pc, #556]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80046c4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			if(!home && gpsData.ggastruct.isfixValid) {
 80046c8:	4b88      	ldr	r3, [pc, #544]	; (80048ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f083 0301 	eor.w	r3, r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_TIM_PeriodElapsedCallback+0x9a>
 80046d6:	4b83      	ldr	r3, [pc, #524]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_TIM_PeriodElapsedCallback+0x9a>
				SetHome();
 80046de:	f7ff ff27 	bl	8004530 <_Z7SetHomev>
			}

			if(home) {
 80046e2:	4b82      	ldr	r3, [pc, #520]	; (80048ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d06b      	beq.n	80047c2 <HAL_TIM_PeriodElapsedCallback+0x17a>

				float lla[3];
				float ecef[3];
				float ecef0[3];

				lla[0] = gpsData.ggastruct.lcation.latitude;
 80046ea:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
				lla[1] = gpsData.ggastruct.lcation.longitude;
 80046f0:	4b7c      	ldr	r3, [pc, #496]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
				lla[2] = gpsData.ggastruct.alt.altitude;
 80046f6:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	657b      	str	r3, [r7, #84]	; 0x54

				lla2ecef(lla, ecef);
 80046fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ffc2 	bl	8002690 <_Z8lla2ecefPfS_>
				lla2ecef(lla0, ecef0);
 800470c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004710:	4619      	mov	r1, r3
 8004712:	4877      	ldr	r0, [pc, #476]	; (80048f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004714:	f7fd ffbc 	bl	8002690 <_Z8lla2ecefPfS_>

				float vned[2];
				ecef2ned(ecef, ecef0, lla0, vned);
 8004718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800471c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004720:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004724:	4a72      	ldr	r2, [pc, #456]	; (80048f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004726:	f7fe f869 	bl	80027fc <_Z8ecef2nedPfS_S_S_>

				EKF.xned = vned[0];
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	4a6e      	ldr	r2, [pc, #440]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800472e:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
				EKF.yned = vned[1];
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	4a6c      	ldr	r2, [pc, #432]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004736:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
				EKF.v_ground = gpsData.rmcstruct.speed * 0.514444444; //Knot to m/s
 800473a:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fe72 	bl	8000428 <__aeabi_f2d>
 8004744:	a360      	add	r3, pc, #384	; (adr r3, 80048c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb fec5 	bl	80004d8 <__aeabi_dmul>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f7fc f997 	bl	8000a88 <__aeabi_d2f>
 800475a:	4603      	mov	r3, r0
 800475c:	4a62      	ldr	r2, [pc, #392]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800475e:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc

				float deg2rad = M_PI/180.0;
 8004762:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004764:	67fb      	str	r3, [r7, #124]	; 0x7c
				EKF.vgpsxned = EKF.v_ground * cos(gpsData.rmcstruct.course * deg2rad);
 8004766:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004768:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 800476c:	4b5d      	ldr	r3, [pc, #372]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fae6 	bl	8000d44 <__aeabi_fmul>
 8004778:	4603      	mov	r3, r0
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd ff70 	bl	8002660 <_ZSt3cosf>
 8004780:	4603      	mov	r3, r0
 8004782:	4619      	mov	r1, r3
 8004784:	4620      	mov	r0, r4
 8004786:	f7fc fadd 	bl	8000d44 <__aeabi_fmul>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
 800478e:	4b56      	ldr	r3, [pc, #344]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004790:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
				EKF.vgpsyned = EKF.v_ground * sin(gpsData.rmcstruct.course * deg2rad);
 8004794:	4b54      	ldr	r3, [pc, #336]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004796:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 800479a:	4b52      	ldr	r3, [pc, #328]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fc facf 	bl	8000d44 <__aeabi_fmul>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd ff65 	bl	8002678 <_ZSt3sinf>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7fc fac6 	bl	8000d44 <__aeabi_fmul>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80047be:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		//else {
		//	EKF.Qgps = 400 * gpsData.ggastruct.HDOP;
		//}

		if(mag_counter == MAG_CLOCK_RATE) {
 80047c2:	4b46      	ldr	r3, [pc, #280]	; (80048dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d146      	bne.n	8004858 <HAL_TIM_PeriodElapsedCallback+0x210>
			mag_counter = 0;
 80047ca:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 80047d0:	4a49      	ldr	r2, [pc, #292]	; (80048f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80047d2:	494a      	ldr	r1, [pc, #296]	; (80048fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80047d4:	484a      	ldr	r0, [pc, #296]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80047d6:	f7fc fd41 	bl	800125c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 80047da:	4b49      	ldr	r3, [pc, #292]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80047dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e0:	4a46      	ldr	r2, [pc, #280]	; (80048fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80047e2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80047e6:	4a44      	ldr	r2, [pc, #272]	; (80048f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80047e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fe53 	bl	8003498 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 80047f2:	4b44      	ldr	r3, [pc, #272]	; (8004904 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80047f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			mag[1] = MAG_Y_CALIB;
 80047fa:	4b43      	ldr	r3, [pc, #268]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80047fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004800:	84fb      	strh	r3, [r7, #38]	; 0x26
			mag[2] = MAG_Z_CALIB;
 8004802:	4b42      	ldr	r3, [pc, #264]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004808:	853b      	strh	r3, [r7, #40]	; 0x28

			int16_t acc[3];
			acc[0] = accX;
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc fc74 	bl	80010fc <__aeabi_f2iz>
 8004814:	4603      	mov	r3, r0
 8004816:	b21b      	sxth	r3, r3
 8004818:	83bb      	strh	r3, [r7, #28]
			acc[1] = accY;
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc fc6c 	bl	80010fc <__aeabi_f2iz>
 8004824:	4603      	mov	r3, r0
 8004826:	b21b      	sxth	r3, r3
 8004828:	83fb      	strh	r3, [r7, #30]
			acc[2] = accZ;
 800482a:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc fc64 	bl	80010fc <__aeabi_f2iz>
 8004834:	4603      	mov	r3, r0
 8004836:	b21b      	sxth	r3, r3
 8004838:	843b      	strh	r3, [r7, #32]
			euler_angles = DCM2Euler(acc, mag);
 800483a:	4c38      	ldr	r4, [pc, #224]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800483c:	463b      	mov	r3, r7
 800483e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004842:	f107 011c 	add.w	r1, r7, #28
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fb20 	bl	8003e8c <_Z9DCM2EulerPsS_>
 800484c:	4623      	mov	r3, r4
 800484e:	463a      	mov	r2, r7
 8004850:	6810      	ldr	r0, [r2, #0]
 8004852:	6851      	ldr	r1, [r2, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 8004858:	4b1f      	ldr	r3, [pc, #124]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	2b28      	cmp	r3, #40	; 0x28
 800485e:	d125      	bne.n	80048ac <HAL_TIM_PeriodElapsedCallback+0x264>
			  camera_counter = 0;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004862:	2200      	movs	r2, #0
 8004864:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004868:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800486a:	ca07      	ldmia	r2, {r0, r1, r2}
 800486c:	c303      	stmia	r3!, {r0, r1}
 800486e:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8004870:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004872:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8004876:	b21b      	sxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc fa0f 	bl	8000c9c <__aeabi_i2f>
 800487e:	4603      	mov	r3, r0
 8004880:	4929      	ldr	r1, [pc, #164]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fb12 	bl	8000eac <__aeabi_fdiv>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800488e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			  if(!cam_data.detected) {
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_PeriodElapsedCallback+0x25c>
				  EKF.Qc = 9e9;
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800489e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80048a2:	e003      	b.n	80048ac <HAL_TIM_PeriodElapsedCallback+0x264>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80048a6:	4a22      	ldr	r2, [pc, #136]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80048a8:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  }
		}

		if(get_ucounter() == 1) {
 80048ac:	f7fe f898 	bl	80029e0 <get_ucounter>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d039      	beq.n	8004934 <HAL_TIM_PeriodElapsedCallback+0x2ec>
			request_range();
 80048c0:	f7fe f83a 	bl	8002938 <request_range>
 80048c4:	e0f7      	b.n	8004ab6 <HAL_TIM_PeriodElapsedCallback+0x46e>
 80048c6:	bf00      	nop
 80048c8:	31d2d84c 	.word	0x31d2d84c
 80048cc:	3fe07654 	.word	0x3fe07654
 80048d0:	20000954 	.word	0x20000954
 80048d4:	2000183c 	.word	0x2000183c
 80048d8:	2000183e 	.word	0x2000183e
 80048dc:	20001840 	.word	0x20001840
 80048e0:	20001842 	.word	0x20001842
 80048e4:	200018e0 	.word	0x200018e0
 80048e8:	20000e28 	.word	0x20000e28
 80048ec:	20001888 	.word	0x20001888
 80048f0:	20000bbc 	.word	0x20000bbc
 80048f4:	3c8efa35 	.word	0x3c8efa35
 80048f8:	200018cc 	.word	0x200018cc
 80048fc:	200018ca 	.word	0x200018ca
 8004900:	200018c8 	.word	0x200018c8
 8004904:	200018ce 	.word	0x200018ce
 8004908:	200018d0 	.word	0x200018d0
 800490c:	200018d2 	.word	0x200018d2
 8004910:	20000b80 	.word	0x20000b80
 8004914:	20000b84 	.word	0x20000b84
 8004918:	20000b88 	.word	0x20000b88
 800491c:	200018b4 	.word	0x200018b4
 8004920:	200018a8 	.word	0x200018a8
 8004924:	2000189c 	.word	0x2000189c
 8004928:	42c80000 	.word	0x42c80000
 800492c:	50061c46 	.word	0x50061c46
 8004930:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8004934:	f7fe f854 	bl	80029e0 <get_ucounter>
 8004938:	4603      	mov	r3, r0
 800493a:	2b14      	cmp	r3, #20
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80b6 	beq.w	8004ab6 <HAL_TIM_PeriodElapsedCallback+0x46e>

		  sonar_range = getRange();
 800494a:	f7fe f80f 	bl	800296c <getRange>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004954:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8004956:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6f      	ldr	r2, [pc, #444]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800495c:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6f      	ldr	r2, [pc, #444]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004964:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8004966:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	496f      	ldr	r1, [pc, #444]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800496c:	4618      	mov	r0, r3
 800496e:	f7fc f9e9 	bl	8000d44 <__aeabi_fmul>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe f83d 	bl	80029f4 <_ZSt3absf>
 800497a:	67b8      	str	r0, [r7, #120]	; 0x78
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 800497c:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4969      	ldr	r1, [pc, #420]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc f9de 	bl	8000d44 <__aeabi_fmul>
 8004988:	4603      	mov	r3, r0
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f832 	bl	80029f4 <_ZSt3absf>
 8004990:	6778      	str	r0, [r7, #116]	; 0x74
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc f97c 	bl	8000c94 <__aeabi_ui2f>
 800499c:	4603      	mov	r3, r0
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fd42 	bl	8000428 <__aeabi_f2d>
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	4b60      	ldr	r3, [pc, #384]	; (8004b2c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80049aa:	f7fb febf 	bl	800072c <__aeabi_ddiv>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	461d      	mov	r5, r3
 80049b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80049b8:	f7fd fe52 	bl	8002660 <_ZSt3cosf>
 80049bc:	4603      	mov	r3, r0
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fb fd32 	bl	8000428 <__aeabi_f2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4620      	mov	r0, r4
 80049ca:	4629      	mov	r1, r5
 80049cc:	f7fb fd84 	bl	80004d8 <__aeabi_dmul>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	461d      	mov	r5, r3
 80049d8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80049da:	f7fd fe41 	bl	8002660 <_ZSt3cosf>
 80049de:	4603      	mov	r3, r0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fb fd21 	bl	8000428 <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fd73 	bl	80004d8 <__aeabi_dmul>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f7fc f845 	bl	8000a88 <__aeabi_d2f>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4a44      	ldr	r2, [pc, #272]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004a02:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8004a04:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8004a08:	673b      	str	r3, [r7, #112]	; 0x70
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8004a0a:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a42      	ldr	r2, [pc, #264]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc f88b 	bl	8000b30 <__aeabi_fsub>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc fa44 	bl	8000eac <__aeabi_fdiv>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b3c      	ldr	r3, [pc, #240]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004a2a:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd ffdf 	bl	80029f4 <_ZSt3absf>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	493c      	ldr	r1, [pc, #240]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fb3c 	bl	80010bc <__aeabi_fcmpgt>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_PeriodElapsedCallback+0x406>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	b2e3      	uxtb	r3, r4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_TIM_PeriodElapsedCallback+0x41c>
			  sonar_alt = sonar_alt_;
 8004a54:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2e      	ldr	r2, [pc, #184]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004a5a:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8004a5c:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8004a62:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4932      	ldr	r1, [pc, #200]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc fb26 	bl	80010bc <__aeabi_fcmpgt>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIM_PeriodElapsedCallback+0x448>
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fcd4 	bl	8000428 <__aeabi_f2d>
 8004a80:	a321      	add	r3, pc, #132	; (adr r3, 8004b08 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb ff99 	bl	80009bc <__aeabi_dcmplt>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_TIM_PeriodElapsedCallback+0x45a>
			  EKF.Qs = 9e9;
 8004a90:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8004a94:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 50;
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004a9a:	4a29      	ldr	r2, [pc, #164]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8004a9c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8004aa0:	e009      	b.n	8004ab6 <HAL_TIM_PeriodElapsedCallback+0x46e>
		  }

		  else {
			  EKF.Qs = 0.25;
 8004aa2:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004aa4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004aa8:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 1;
 8004aac:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004aae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ab2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		  }


		}

		if(get_b_counter() == 1) {
 8004ab6:	f7fd fdaf 	bl	8002618 <get_b_counter>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_TIM_PeriodElapsedCallback+0x488>
			write_ut();
 8004aca:	f7fd fba5 	bl	8002218 <write_ut>
 8004ace:	e069      	b.n	8004ba4 <HAL_TIM_PeriodElapsedCallback+0x55c>
		}

		else if(get_b_counter() == 5) { //5 ms
 8004ad0:	f7fd fda2 	bl	8002618 <get_b_counter>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d031      	beq.n	8004b48 <HAL_TIM_PeriodElapsedCallback+0x500>
			bmp.uncomp.temp = read_ut ();
 8004ae4:	f7fd fbb0 	bl	8002248 <read_ut>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc f8d6 	bl	8000c9c <__aeabi_i2f>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004af4:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8004af6:	4813      	ldr	r0, [pc, #76]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004af8:	f7fd fbc0 	bl	800227c <get_temp>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004b00:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8004b02:	f7fd fc13 	bl	800232c <write_up>
 8004b06:	e04d      	b.n	8004ba4 <HAL_TIM_PeriodElapsedCallback+0x55c>
 8004b08:	33333333 	.word	0x33333333
 8004b0c:	3fd33333 	.word	0x3fd33333
 8004b10:	20001838 	.word	0x20001838
 8004b14:	20001828 	.word	0x20001828
 8004b18:	2000182c 	.word	0x2000182c
 8004b1c:	20001830 	.word	0x20001830
 8004b20:	20001834 	.word	0x20001834
 8004b24:	20000bf8 	.word	0x20000bf8
 8004b28:	3c8e8a72 	.word	0x3c8e8a72
 8004b2c:	40590000 	.word	0x40590000
 8004b30:	40e00000 	.word	0x40e00000
 8004b34:	40c00000 	.word	0x40c00000
 8004b38:	20000e28 	.word	0x20000e28
 8004b3c:	50061c46 	.word	0x50061c46
 8004b40:	42480000 	.word	0x42480000
 8004b44:	20001844 	.word	0x20001844
		}

		else if(get_b_counter() == 12) { //
 8004b48:	f7fd fd66 	bl	8002618 <get_b_counter>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d023      	beq.n	8004ba4 <HAL_TIM_PeriodElapsedCallback+0x55c>
			bmp.uncomp.press = read_up (bmp.oss);
 8004b5c:	4ba8      	ldr	r3, [pc, #672]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b60:	f7fd fc04 	bl	800236c <read_up>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4aa6      	ldr	r2, [pc, #664]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b68:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8004b6a:	4ea5      	ldr	r6, [pc, #660]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b6c:	466d      	mov	r5, sp
 8004b6e:	f106 0410 	add.w	r4, r6, #16
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b86:	f7fd fc1f 	bl	80023c8 <get_pressure>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4a9c      	ldr	r2, [pc, #624]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8004b90:	489b      	ldr	r0, [pc, #620]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b92:	f7fd fce5 	bl	8002560 <get_altitude>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4a99      	ldr	r2, [pc, #612]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b9a:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8004b9c:	4b98      	ldr	r3, [pc, #608]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	4a98      	ldr	r2, [pc, #608]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8004ba2:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8004ba4:	4b98      	ldr	r3, [pc, #608]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 837e 	bne.w	80052aa <HAL_TIM_PeriodElapsedCallback+0xc62>
			_controller_timer = controller_timer;
 8004bae:	4b97      	ldr	r3, [pc, #604]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a97      	ldr	r2, [pc, #604]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004bb4:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8004bb6:	f001 f917 	bl	8005de8 <HAL_GetTick>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b93      	ldr	r3, [pc, #588]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004bc0:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8004bc2:	4b92      	ldr	r3, [pc, #584]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b92      	ldr	r3, [pc, #584]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	4a91      	ldr	r2, [pc, #580]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8004bce:	6013      	str	r3, [r2, #0]

		  controller_counter = 0;
 8004bd0:	4b8d      	ldr	r3, [pc, #564]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8004bd6:	201d      	movs	r0, #29
 8004bd8:	f7ff f84a 	bl	8003c70 <_Z7GyroOkuh>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc f85c 	bl	8000c9c <__aeabi_i2f>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b8c      	ldr	r3, [pc, #560]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f7fb ff9f 	bl	8000b30 <__aeabi_fsub>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4989      	ldr	r1, [pc, #548]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc f958 	bl	8000eac <__aeabi_fdiv>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b87      	ldr	r3, [pc, #540]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004c02:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8004c04:	201f      	movs	r0, #31
 8004c06:	f7ff f833 	bl	8003c70 <_Z7GyroOkuh>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc f845 	bl	8000c9c <__aeabi_i2f>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b83      	ldr	r3, [pc, #524]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f7fb ff88 	bl	8000b30 <__aeabi_fsub>
 8004c20:	4603      	mov	r3, r0
 8004c22:	497e      	ldr	r1, [pc, #504]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fc f941 	bl	8000eac <__aeabi_fdiv>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004c30:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8004c32:	2021      	movs	r0, #33	; 0x21
 8004c34:	f7ff f81c 	bl	8003c70 <_Z7GyroOkuh>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc f82e 	bl	8000c9c <__aeabi_i2f>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b7a      	ldr	r3, [pc, #488]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7fb ff71 	bl	8000b30 <__aeabi_fsub>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4972      	ldr	r1, [pc, #456]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fc f92a 	bl	8000eac <__aeabi_fdiv>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b74      	ldr	r3, [pc, #464]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004c5e:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8004c60:	4b6f      	ldr	r3, [pc, #444]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a73      	ldr	r2, [pc, #460]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c66:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
		  EKF.gyro[1] = -1*gyroY;
 8004c6a:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c72:	4a70      	ldr	r2, [pc, #448]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c74:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
		  EKF.gyro[2] = gyroZ;
 8004c78:	4b6d      	ldr	r3, [pc, #436]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6d      	ldr	r2, [pc, #436]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c7e:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8004c82:	2032      	movs	r0, #50	; 0x32
 8004c84:	f7ff f8cc 	bl	8003e20 <_Z6AccOkuh>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc f806 	bl	8000c9c <__aeabi_i2f>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4a69      	ldr	r2, [pc, #420]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004c94:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8004c96:	2034      	movs	r0, #52	; 0x34
 8004c98:	f7ff f8c2 	bl	8003e20 <_Z6AccOkuh>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fffc 	bl	8000c9c <__aeabi_i2f>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4a65      	ldr	r2, [pc, #404]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004ca8:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 8004caa:	2036      	movs	r0, #54	; 0x36
 8004cac:	f7ff f8b8 	bl	8003e20 <_Z6AccOkuh>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fff2 	bl	8000c9c <__aeabi_i2f>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a61      	ldr	r2, [pc, #388]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004cbc:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 8004cbe:	4b5e      	ldr	r3, [pc, #376]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4960      	ldr	r1, [pc, #384]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc f83d 	bl	8000d44 <__aeabi_fmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	495e      	ldr	r1, [pc, #376]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb ff2e 	bl	8000b30 <__aeabi_fsub>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b57      	ldr	r3, [pc, #348]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004cda:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 8004cdc:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	495a      	ldr	r1, [pc, #360]	; (8004e4c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc f82e 	bl	8000d44 <__aeabi_fmul>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4959      	ldr	r1, [pc, #356]	; (8004e50 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fb ff21 	bl	8000b34 <__addsf3>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b51      	ldr	r3, [pc, #324]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004cf8:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 8004cfa:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4955      	ldr	r1, [pc, #340]	; (8004e54 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc f81f 	bl	8000d44 <__aeabi_fmul>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4953      	ldr	r1, [pc, #332]	; (8004e58 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb ff12 	bl	8000b34 <__addsf3>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004d16:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8004d18:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fb fb83 	bl	8000428 <__aeabi_f2d>
 8004d22:	a335      	add	r3, pc, #212	; (adr r3, 8004df8 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fbd6 	bl	80004d8 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	f7fb fea8 	bl	8000a88 <__aeabi_d2f>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4a48      	ldr	r2, [pc, #288]	; (8004e5c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8004d3c:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fb70 	bl	8000428 <__aeabi_f2d>
 8004d48:	a32b      	add	r3, pc, #172	; (adr r3, 8004df8 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fbc3 	bl	80004d8 <__aeabi_dmul>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fb fe95 	bl	8000a88 <__aeabi_d2f>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8004d62:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8004d64:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb fb5d 	bl	8000428 <__aeabi_f2d>
 8004d6e:	a322      	add	r3, pc, #136	; (adr r3, 8004df8 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fbb0 	bl	80004d8 <__aeabi_dmul>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f7fb fe82 	bl	8000a88 <__aeabi_d2f>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8004d88:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8004d8a:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004d90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.acc[1] = accY;// - AccYh;
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004d9a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		  EKF.acc[2] = accZ;// - AccZh;
 8004d9e:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004da4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8004da8:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8004daa:	66fb      	str	r3, [r7, #108]	; 0x6c
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004dae:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004db2:	492e      	ldr	r1, [pc, #184]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb ffc5 	bl	8000d44 <__aeabi_fmul>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	66bb      	str	r3, [r7, #104]	; 0x68
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004dc0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004dc4:	4929      	ldr	r1, [pc, #164]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb ffbc 	bl	8000d44 <__aeabi_fmul>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	667b      	str	r3, [r7, #100]	; 0x64

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 8004dd0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004dd2:	f7fd fc51 	bl	8002678 <_ZSt3sinf>
 8004dd6:	6638      	str	r0, [r7, #96]	; 0x60
		  float gy = cos(pitch_r)*sin(roll_r);
 8004dd8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004dda:	f7fd fc41 	bl	8002660 <_ZSt3cosf>
 8004dde:	4604      	mov	r4, r0
 8004de0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004de2:	f7fd fc49 	bl	8002678 <_ZSt3sinf>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4619      	mov	r1, r3
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7fb ffaa 	bl	8000d44 <__aeabi_fmul>
 8004df0:	e03e      	b.n	8004e70 <HAL_TIM_PeriodElapsedCallback+0x828>
 8004df2:	bf00      	nop
 8004df4:	f3af 8000 	nop.w
 8004df8:	8e8a71de 	.word	0x8e8a71de
 8004dfc:	3f7ff2e4 	.word	0x3f7ff2e4
 8004e00:	20001844 	.word	0x20001844
 8004e04:	20001824 	.word	0x20001824
 8004e08:	2000183c 	.word	0x2000183c
 8004e0c:	2000188c 	.word	0x2000188c
 8004e10:	20001890 	.word	0x20001890
 8004e14:	20001894 	.word	0x20001894
 8004e18:	20000ba4 	.word	0x20000ba4
 8004e1c:	41660000 	.word	0x41660000
 8004e20:	20000b74 	.word	0x20000b74
 8004e24:	20000ba8 	.word	0x20000ba8
 8004e28:	20000b78 	.word	0x20000b78
 8004e2c:	20000bac 	.word	0x20000bac
 8004e30:	20000b7c 	.word	0x20000b7c
 8004e34:	20000e28 	.word	0x20000e28
 8004e38:	20000b80 	.word	0x20000b80
 8004e3c:	20000b84 	.word	0x20000b84
 8004e40:	20000b88 	.word	0x20000b88
 8004e44:	3f7f3b64 	.word	0x3f7f3b64
 8004e48:	3efae148 	.word	0x3efae148
 8004e4c:	3f7e978d 	.word	0x3f7e978d
 8004e50:	414d0a3d 	.word	0x414d0a3d
 8004e54:	3f797f63 	.word	0x3f797f63
 8004e58:	404d1eb8 	.word	0x404d1eb8
 8004e5c:	20000b8c 	.word	0x20000b8c
 8004e60:	20000b90 	.word	0x20000b90
 8004e64:	20000b94 	.word	0x20000b94
 8004e68:	411cf5c3 	.word	0x411cf5c3
 8004e6c:	3c8e8a72 	.word	0x3c8e8a72
 8004e70:	4603      	mov	r3, r0
 8004e72:	65fb      	str	r3, [r7, #92]	; 0x5c
		  float gz = cos(roll_r)*cos(pitch_r);
 8004e74:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e76:	f7fd fbf3 	bl	8002660 <_ZSt3cosf>
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004e7e:	f7fd fbef 	bl	8002660 <_ZSt3cosf>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4619      	mov	r1, r3
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fb ff5c 	bl	8000d44 <__aeabi_fmul>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	65bb      	str	r3, [r7, #88]	; 0x58



		  accXc -= gx;
 8004e90:	4b98      	ldr	r3, [pc, #608]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fe4a 	bl	8000b30 <__aeabi_fsub>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4b94      	ldr	r3, [pc, #592]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004ea2:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 8004ea4:	4b94      	ldr	r3, [pc, #592]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb fe40 	bl	8000b30 <__aeabi_fsub>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b90      	ldr	r3, [pc, #576]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004eb6:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8004eb8:	4b90      	ldr	r3, [pc, #576]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fe36 	bl	8000b30 <__aeabi_fsub>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4b8c      	ldr	r3, [pc, #560]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004eca:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8004ecc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004ece:	f7fd fbc7 	bl	8002660 <_ZSt3cosf>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	4b87      	ldr	r3, [pc, #540]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fb ff32 	bl	8000d44 <__aeabi_fmul>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461c      	mov	r4, r3
 8004ee4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004ee6:	f7fd fbbb 	bl	8002660 <_ZSt3cosf>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b83      	ldr	r3, [pc, #524]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f7fb ff26 	bl	8000d44 <__aeabi_fmul>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461d      	mov	r5, r3
 8004efc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004efe:	f7fd fbbb 	bl	8002678 <_ZSt3sinf>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4619      	mov	r1, r3
 8004f06:	4628      	mov	r0, r5
 8004f08:	f7fb ff1c 	bl	8000d44 <__aeabi_fmul>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7fb fe0d 	bl	8000b30 <__aeabi_fsub>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461c      	mov	r4, r3
 8004f1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004f1c:	f7fd fbac 	bl	8002678 <_ZSt3sinf>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b75      	ldr	r3, [pc, #468]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fb ff0b 	bl	8000d44 <__aeabi_fmul>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461d      	mov	r5, r3
 8004f32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f34:	f7fd fba0 	bl	8002678 <_ZSt3sinf>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f7fb ff01 	bl	8000d44 <__aeabi_fmul>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4619      	mov	r1, r3
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7fb fdf2 	bl	8000b30 <__aeabi_fsub>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b6b      	ldr	r3, [pc, #428]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004f52:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8004f54:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004f56:	f7fd fb83 	bl	8002660 <_ZSt3cosf>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fb feee 	bl	8000d44 <__aeabi_fmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461c      	mov	r4, r3
 8004f6c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004f6e:	f7fd fb83 	bl	8002678 <_ZSt3sinf>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fb fee2 	bl	8000d44 <__aeabi_fmul>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4619      	mov	r1, r3
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7fb fdd3 	bl	8000b30 <__aeabi_fsub>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004f90:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8004f92:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004f94:	f7fd fb64 	bl	8002660 <_ZSt3cosf>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f7fb fecf 	bl	8000d44 <__aeabi_fmul>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461c      	mov	r4, r3
 8004faa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004fac:	f7fd fb58 	bl	8002660 <_ZSt3cosf>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7fb fec5 	bl	8000d44 <__aeabi_fmul>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461c      	mov	r4, r3
 8004fbe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004fc0:	f7fd fb5a 	bl	8002678 <_ZSt3sinf>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7fb feb9 	bl	8000d44 <__aeabi_fmul>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fb fdac 	bl	8000b34 <__addsf3>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461c      	mov	r4, r3
 8004fe0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004fe2:	f7fd fb3d 	bl	8002660 <_ZSt3cosf>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fb fea8 	bl	8000d44 <__aeabi_fmul>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004ffa:	f7fd fb3d 	bl	8002678 <_ZSt3sinf>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4619      	mov	r1, r3
 8005002:	4628      	mov	r0, r5
 8005004:	f7fb fe9e 	bl	8000d44 <__aeabi_fmul>
 8005008:	4603      	mov	r3, r0
 800500a:	4619      	mov	r1, r3
 800500c:	4620      	mov	r0, r4
 800500e:	f7fb fd91 	bl	8000b34 <__addsf3>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	4b3c      	ldr	r3, [pc, #240]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8005018:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fe8f 	bl	8000d44 <__aeabi_fmul>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	4b35      	ldr	r3, [pc, #212]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fe85 	bl	8000d44 <__aeabi_fmul>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fe7b 	bl	8000d44 <__aeabi_fmul>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8005054:	601a      	str	r2, [r3, #0]

		  //EKF.acc_vert = (accZc - 1.0)  * g;
		  EKF.acc_vert = accZm;
 8005056:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800505c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
		  float accXm = ax_b  * g;
		  float accYm = (accYc-AccYh)  * g;
		  */


		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8005060:	4b27      	ldr	r3, [pc, #156]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005066:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		  EKF.accYm = accYm;
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005070:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.acc_pos_x = accXm;
 8005074:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a24      	ldr	r2, [pc, #144]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800507a:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
		  EKF.acc_pos_y = -accYm;
 800507e:	4b21      	ldr	r3, [pc, #132]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005086:	4a21      	ldr	r2, [pc, #132]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005088:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  EKF.sonar_alt = sonar_alt;
 800508c:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005092:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
		  EKF.baro_alt = baro_alt;
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800509c:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050aa:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4

		  EKF.Run();
 80050ae:	4817      	ldr	r0, [pc, #92]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050b0:	f00a fed8 	bl	800fe64 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050b6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050bc:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050c0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050c6:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050ca:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050d0:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80050d8:	4a10      	ldr	r2, [pc, #64]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050da:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050e4:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050e8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_TIM_PeriodElapsedCallback+0xad4>)
 80050ee:	6153      	str	r3, [r2, #20]
 80050f0:	e016      	b.n	8005120 <HAL_TIM_PeriodElapsedCallback+0xad8>
 80050f2:	bf00      	nop
 80050f4:	20000b8c 	.word	0x20000b8c
 80050f8:	20000b90 	.word	0x20000b90
 80050fc:	20000b94 	.word	0x20000b94
 8005100:	20000b98 	.word	0x20000b98
 8005104:	20000b9c 	.word	0x20000b9c
 8005108:	20000ba0 	.word	0x20000ba0
 800510c:	20000e28 	.word	0x20000e28
 8005110:	20001828 	.word	0x20001828
 8005114:	20001824 	.word	0x20001824
 8005118:	200018b4 	.word	0x200018b4
 800511c:	20000bf8 	.word	0x20000bf8


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8005120:	4b64      	ldr	r3, [pc, #400]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fabb 	bl	80036a0 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 800512a:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800512c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005130:	4a62      	ldr	r2, [pc, #392]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005132:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
			controller.z = EKF.alt_gnd;
 8005136:	4b60      	ldr	r3, [pc, #384]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8005138:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800513c:	4a5f      	ldr	r2, [pc, #380]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800513e:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

			controller.vx	 = EKF.vx;
 8005142:	4b5d      	ldr	r3, [pc, #372]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8005144:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005148:	4a5c      	ldr	r2, [pc, #368]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800514a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			controller.x     = EKF.x;
 800514e:	4b5a      	ldr	r3, [pc, #360]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8005150:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005154:	4a59      	ldr	r2, [pc, #356]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005156:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

			controller.vy	 = EKF.vy;
 800515a:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800515c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8005160:	4a56      	ldr	r2, [pc, #344]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005162:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
			controller.y     = EKF.y;
 8005166:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8005168:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800516c:	4a53      	ldr	r2, [pc, #332]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800516e:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

		  controller.state = state;
 8005172:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005174:	4a52      	ldr	r2, [pc, #328]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8005176:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800517a:	4615      	mov	r5, r2
 800517c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800517e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800518a:	4a4e      	ldr	r2, [pc, #312]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800518c:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8005190:	4615      	mov	r5, r2
 8005192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 800519e:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fd7a 	bl	8000c9c <__aeabi_i2f>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a44      	ldr	r2, [pc, #272]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051ac:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fd71 	bl	8000c9c <__aeabi_i2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051be:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 80051c2:	4b3c      	ldr	r3, [pc, #240]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb fd68 	bl	8000c9c <__aeabi_i2f>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a3b      	ldr	r2, [pc, #236]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051d0:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 80051d4:	4839      	ldr	r0, [pc, #228]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051d6:	f006 f883 	bl	800b2e0 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 80051da:	4b38      	ldr	r3, [pc, #224]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051dc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80051e0:	4a39      	ldr	r2, [pc, #228]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80051e2:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 80051e4:	4b35      	ldr	r3, [pc, #212]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80051ea:	4a37      	ldr	r2, [pc, #220]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80051ec:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 80051ee:	4b33      	ldr	r3, [pc, #204]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051f0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80051f4:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80051f6:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 80051f8:	4b30      	ldr	r3, [pc, #192]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80051fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80051fe:	4a32      	ldr	r2, [pc, #200]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005200:	60d3      	str	r3, [r2, #12]

		#ifdef UAV1

		  if(armed) {
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d031      	beq.n	800526e <HAL_TIM_PeriodElapsedCallback+0xc26>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 800520a:	4b2a      	ldr	r3, [pc, #168]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f240 52db 	movw	r2, #1499	; 0x5db
 8005212:	4293      	cmp	r3, r2
 8005214:	dc1a      	bgt.n	800524c <HAL_TIM_PeriodElapsedCallback+0xc04>
 8005216:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f240 424c 	movw	r2, #1100	; 0x44c
 800521e:	4293      	cmp	r3, r2
 8005220:	dd14      	ble.n	800524c <HAL_TIM_PeriodElapsedCallback+0xc04>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 8005222:	4b26      	ldr	r3, [pc, #152]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005224:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005228:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800522a:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 800522c:	4b23      	ldr	r3, [pc, #140]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800522e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005234:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005238:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800523e:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005242:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005248:	60d3      	str	r3, [r2, #12]
 800524a:	e020      	b.n	800528e <HAL_TIM_PeriodElapsedCallback+0xc46>

			  }

			  else {
				  controller_output_2[0] = 1000;
 800524c:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800524e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005252:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800525a:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800525e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005262:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e00f      	b.n	800528e <HAL_TIM_PeriodElapsedCallback+0xc46>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005274:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800527c:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005284:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800528c:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8005290:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005294:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8005296:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800529a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 80052a0:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;


		  PWMYaz();
 80052a2:	f7ff f86d 	bl	8004380 <_Z6PWMYazv>
		  SendTelem();
 80052a6:	f7fe fcb9 	bl	8003c1c <_Z9SendTelemv>


		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 80052aa:	bf00      	nop
 80052ac:	3784      	adds	r7, #132	; 0x84
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200017c8 	.word	0x200017c8
 80052b8:	20000e28 	.word	0x20000e28
 80052bc:	20001168 	.word	0x20001168
 80052c0:	20000bf8 	.word	0x20000bf8
 80052c4:	20000bd4 	.word	0x20000bd4
 80052c8:	20001798 	.word	0x20001798
 80052cc:	20001821 	.word	0x20001821
 80052d0:	200017a8 	.word	0x200017a8

080052d4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a54      	ldr	r2, [pc, #336]	; (8005430 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	f040 80a0 	bne.w	8005426 <HAL_TIM_IC_CaptureCallback+0x152>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7f1b      	ldrb	r3, [r3, #28]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	f040 809b 	bne.w	8005426 <HAL_TIM_IC_CaptureCallback+0x152>
	{
				IC_Val1 = IC_Val2;
 80052f0:	4b50      	ldr	r3, [pc, #320]	; (8005434 <HAL_TIM_IC_CaptureCallback+0x160>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a50      	ldr	r2, [pc, #320]	; (8005438 <HAL_TIM_IC_CaptureCallback+0x164>)
 80052f6:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80052f8:	2108      	movs	r1, #8
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f004 fb1c 	bl	8009938 <HAL_TIM_ReadCapturedValue>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005306:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8005308:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_TIM_IC_CaptureCallback+0x160>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b4a      	ldr	r3, [pc, #296]	; (8005438 <HAL_TIM_IC_CaptureCallback+0x164>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	4a4a      	ldr	r2, [pc, #296]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 8005314:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8005316:	4b49      	ldr	r3, [pc, #292]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0fdb      	lsrs	r3, r3, #31
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d006      	beq.n	8005330 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8005322:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800532a:	33ff      	adds	r3, #255	; 0xff
 800532c:	4a43      	ldr	r2, [pc, #268]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 800532e:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 1000 && Diff <= 2000) {
 8005330:	4b42      	ldr	r3, [pc, #264]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005338:	db06      	blt.n	8005348 <HAL_TIM_IC_CaptureCallback+0x74>
 800533a:	4b40      	ldr	r3, [pc, #256]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005342:	dc01      	bgt.n	8005348 <HAL_TIM_IC_CaptureCallback+0x74>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_TIM_IC_CaptureCallback+0x76>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01c      	beq.n	8005388 <HAL_TIM_IC_CaptureCallback+0xb4>

						ch_[i] = ch[i];
 800534e:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b21b      	sxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	4b3a      	ldr	r3, [pc, #232]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b21b      	sxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	4b39      	ldr	r3, [pc, #228]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	4a38      	ldr	r2, [pc, #224]	; (8005448 <HAL_TIM_IC_CaptureCallback+0x174>)
 8005366:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 800536a:	4b35      	ldr	r3, [pc, #212]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b21b      	sxth	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	4b32      	ldr	r3, [pc, #200]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a33      	ldr	r2, [pc, #204]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005378:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 800537c:	4b33      	ldr	r3, [pc, #204]	; (800544c <HAL_TIM_IC_CaptureCallback+0x178>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a32      	ldr	r2, [pc, #200]	; (800544c <HAL_TIM_IC_CaptureCallback+0x178>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e015      	b.n	80053b4 <HAL_TIM_IC_CaptureCallback+0xe0>


					}

					else if(Diff > CH0) {
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	4293      	cmp	r3, r2
 8005392:	bfcc      	ite	gt
 8005394:	2301      	movgt	r3, #1
 8005396:	2300      	movle	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80053a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a4:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <HAL_TIM_IC_CaptureCallback+0x168>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a26      	ldr	r2, [pc, #152]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 80053ac:	6213      	str	r3, [r2, #32]
						sync = 1;
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 80053b4:	4b23      	ldr	r3, [pc, #140]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fccc 	bl	8003d58 <_Z7pwm2angt>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4a24      	ldr	r2, [pc, #144]	; (8005454 <HAL_TIM_IC_CaptureCallback+0x180>)
 80053c4:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 80053c6:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fcc3 	bl	8003d58 <_Z7pwm2angt>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <HAL_TIM_IC_CaptureCallback+0x180>)
 80053d6:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 80053d8:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <HAL_TIM_IC_CaptureCallback+0x180>)
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 80053e0:	4b18      	ldr	r3, [pc, #96]	; (8005444 <HAL_TIM_IC_CaptureCallback+0x170>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fcf2 	bl	8003dd0 <_Z8pwm2ratet>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_TIM_IC_CaptureCallback+0x180>)
 80053f0:	6153      	str	r3, [r2, #20]

				i++;
 80053f2:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3301      	adds	r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	b21a      	sxth	r2, r3
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005402:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b21b      	sxth	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	4b12      	ldr	r3, [pc, #72]	; (8005458 <HAL_TIM_IC_CaptureCallback+0x184>)
 800540e:	fb83 2301 	smull	r2, r3, r3, r1
 8005412:	105a      	asrs	r2, r3, #1
 8005414:	17cb      	asrs	r3, r1, #31
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	1aca      	subs	r2, r1, r3
 8005420:	b212      	sxth	r2, r2
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005424:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	2000099c 	.word	0x2000099c
 8005434:	200017b8 	.word	0x200017b8
 8005438:	200017bc 	.word	0x200017bc
 800543c:	200017c0 	.word	0x200017c0
 8005440:	200017c4 	.word	0x200017c4
 8005444:	200017c8 	.word	0x200017c8
 8005448:	200017ec 	.word	0x200017ec
 800544c:	20001884 	.word	0x20001884
 8005450:	20001810 	.word	0x20001810
 8005454:	20000bd4 	.word	0x20000bd4
 8005458:	38e38e39 	.word	0x38e38e39

0800545c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005460:	b672      	cpsid	i
}
 8005462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005464:	e7fe      	b.n	8005464 <Error_Handler+0x8>
	...

08005468 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10a      	bne.n	800548e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800547e:	4293      	cmp	r3, r2
 8005480:	d105      	bne.n	800548e <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 8005482:	480c      	ldr	r0, [pc, #48]	; (80054b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005484:	f006 fbbc 	bl	800bc00 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8005488:	480b      	ldr	r0, [pc, #44]	; (80054b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800548a:	f005 fe31 	bl	800b0f0 <_ZN10ControllerC1Ev>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800549a:	4293      	cmp	r3, r2
 800549c:	d105      	bne.n	80054aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 800549e:	4806      	ldr	r0, [pc, #24]	; (80054b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80054a0:	f006 fb72 	bl	800bb88 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 80054a4:	4803      	ldr	r0, [pc, #12]	; (80054b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80054a6:	f00a fd51 	bl	800ff4c <_ZN15Kalman_FiltresiD1Ev>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000e28 	.word	0x20000e28
 80054b8:	20001168 	.word	0x20001168

080054bc <_GLOBAL__sub_I_hi2c1>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
 80054c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054c4:	2001      	movs	r0, #1
 80054c6:	f7ff ffcf 	bl	8005468 <_Z41__static_initialization_and_destruction_0ii>
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_GLOBAL__sub_D_hi2c1>:
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054d4:	2000      	movs	r0, #0
 80054d6:	f7ff ffc7 	bl	8005468 <_Z41__static_initialization_and_destruction_0ii>
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_MspInit+0x5c>)
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	4a14      	ldr	r2, [pc, #80]	; (8005538 <HAL_MspInit+0x5c>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6193      	str	r3, [r2, #24]
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_MspInit+0x5c>)
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_MspInit+0x5c>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <HAL_MspInit+0x5c>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	61d3      	str	r3, [r2, #28]
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_MspInit+0x5c>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	607b      	str	r3, [r7, #4]
 8005510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_MspInit+0x60>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <HAL_MspInit+0x60>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	40021000 	.word	0x40021000
 800553c:	40010000 	.word	0x40010000

08005540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005548:	f107 0310 	add.w	r3, r7, #16
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <HAL_I2C_MspInit+0x70>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d123      	bne.n	80055a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 8005566:	f043 0308 	orr.w	r3, r3, #8
 800556a:	6193      	str	r3, [r2, #24]
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005578:	23c0      	movs	r3, #192	; 0xc0
 800557a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800557c:	2312      	movs	r3, #18
 800557e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005580:	2303      	movs	r3, #3
 8005582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005584:	f107 0310 	add.w	r3, r7, #16
 8005588:	4619      	mov	r1, r3
 800558a:	480b      	ldr	r0, [pc, #44]	; (80055b8 <HAL_I2C_MspInit+0x78>)
 800558c:	f001 f85a 	bl	8006644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 8005596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800559a:	61d3      	str	r3, [r2, #28]
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_I2C_MspInit+0x74>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055a8:	bf00      	nop
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40005400 	.word	0x40005400
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40010c00 	.word	0x40010c00

080055bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_TIM_PWM_MspInit+0x34>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10b      	bne.n	80055e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_TIM_PWM_MspInit+0x38>)
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <HAL_TIM_PWM_MspInit+0x38>)
 80055d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055d8:	6193      	str	r3, [r2, #24]
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_TIM_PWM_MspInit+0x38>)
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40021000 	.word	0x40021000

080055f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	f107 0318 	add.w	r3, r7, #24
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	609a      	str	r2, [r3, #8]
 800560c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d114      	bne.n	8005642 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005618:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	61d3      	str	r3, [r2, #28]
 8005624:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005630:	2200      	movs	r2, #0
 8005632:	2101      	movs	r1, #1
 8005634:	201c      	movs	r0, #28
 8005636:	f000 fd00 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800563a:	201c      	movs	r0, #28
 800563c:	f000 fd19 	bl	8006072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005640:	e042      	b.n	80056c8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <HAL_TIM_Base_MspInit+0xdc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d12c      	bne.n	80056a6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800564c:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	61d3      	str	r3, [r2, #28]
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 800566a:	f043 0308 	orr.w	r3, r3, #8
 800566e:	6193      	str	r3, [r2, #24]
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800567c:	2301      	movs	r3, #1
 800567e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	2300      	movs	r3, #0
 8005686:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005688:	f107 0318 	add.w	r3, r7, #24
 800568c:	4619      	mov	r1, r3
 800568e:	4812      	ldr	r0, [pc, #72]	; (80056d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005690:	f000 ffd8 	bl	8006644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005694:	2200      	movs	r2, #0
 8005696:	2100      	movs	r1, #0
 8005698:	201d      	movs	r0, #29
 800569a:	f000 fcce 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800569e:	201d      	movs	r0, #29
 80056a0:	f000 fce7 	bl	8006072 <HAL_NVIC_EnableIRQ>
}
 80056a4:	e010      	b.n	80056c8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <HAL_TIM_Base_MspInit+0xe4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10b      	bne.n	80056c8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	61d3      	str	r3, [r2, #28]
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_TIM_Base_MspInit+0xd8>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3728      	adds	r7, #40	; 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40010c00 	.word	0x40010c00
 80056dc:	40000800 	.word	0x40000800

080056e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1c      	ldr	r2, [pc, #112]	; (800576c <HAL_TIM_MspPostInit+0x8c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d131      	bne.n	8005764 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 8005706:	f043 0308 	orr.w	r3, r3, #8
 800570a:	6193      	str	r3, [r2, #24]
 800570c:	4b18      	ldr	r3, [pc, #96]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	6193      	str	r3, [r2, #24]
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_TIM_MspPostInit+0x90>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005730:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	2302      	movs	r3, #2
 8005738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573a:	2302      	movs	r3, #2
 800573c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800573e:	f107 0310 	add.w	r3, r7, #16
 8005742:	4619      	mov	r1, r3
 8005744:	480b      	ldr	r0, [pc, #44]	; (8005774 <HAL_TIM_MspPostInit+0x94>)
 8005746:	f000 ff7d 	bl	8006644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800574a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800574e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005750:	2302      	movs	r3, #2
 8005752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005754:	2302      	movs	r3, #2
 8005756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4619      	mov	r1, r3
 800575e:	4806      	ldr	r0, [pc, #24]	; (8005778 <HAL_TIM_MspPostInit+0x98>)
 8005760:	f000 ff70 	bl	8006644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005764:	bf00      	nop
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40010c00 	.word	0x40010c00
 8005778:	40010800 	.word	0x40010800

0800577c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005784:	f107 0320 	add.w	r3, r7, #32
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a7e      	ldr	r2, [pc, #504]	; (8005990 <HAL_UART_MspInit+0x214>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d159      	bne.n	8005850 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800579c:	4b7d      	ldr	r3, [pc, #500]	; (8005994 <HAL_UART_MspInit+0x218>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4a7c      	ldr	r2, [pc, #496]	; (8005994 <HAL_UART_MspInit+0x218>)
 80057a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057a6:	6193      	str	r3, [r2, #24]
 80057a8:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <HAL_UART_MspInit+0x218>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b4:	4b77      	ldr	r3, [pc, #476]	; (8005994 <HAL_UART_MspInit+0x218>)
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	4a76      	ldr	r2, [pc, #472]	; (8005994 <HAL_UART_MspInit+0x218>)
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	6193      	str	r3, [r2, #24]
 80057c0:	4b74      	ldr	r3, [pc, #464]	; (8005994 <HAL_UART_MspInit+0x218>)
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057da:	f107 0320 	add.w	r3, r7, #32
 80057de:	4619      	mov	r1, r3
 80057e0:	486d      	ldr	r0, [pc, #436]	; (8005998 <HAL_UART_MspInit+0x21c>)
 80057e2:	f000 ff2f 	bl	8006644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80057e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057ec:	2300      	movs	r3, #0
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f4:	f107 0320 	add.w	r3, r7, #32
 80057f8:	4619      	mov	r1, r3
 80057fa:	4867      	ldr	r0, [pc, #412]	; (8005998 <HAL_UART_MspInit+0x21c>)
 80057fc:	f000 ff22 	bl	8006644 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005800:	4b66      	ldr	r3, [pc, #408]	; (800599c <HAL_UART_MspInit+0x220>)
 8005802:	4a67      	ldr	r2, [pc, #412]	; (80059a0 <HAL_UART_MspInit+0x224>)
 8005804:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005806:	4b65      	ldr	r3, [pc, #404]	; (800599c <HAL_UART_MspInit+0x220>)
 8005808:	2200      	movs	r2, #0
 800580a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800580c:	4b63      	ldr	r3, [pc, #396]	; (800599c <HAL_UART_MspInit+0x220>)
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005812:	4b62      	ldr	r3, [pc, #392]	; (800599c <HAL_UART_MspInit+0x220>)
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005818:	4b60      	ldr	r3, [pc, #384]	; (800599c <HAL_UART_MspInit+0x220>)
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800581e:	4b5f      	ldr	r3, [pc, #380]	; (800599c <HAL_UART_MspInit+0x220>)
 8005820:	2200      	movs	r2, #0
 8005822:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005824:	4b5d      	ldr	r3, [pc, #372]	; (800599c <HAL_UART_MspInit+0x220>)
 8005826:	2220      	movs	r2, #32
 8005828:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800582a:	4b5c      	ldr	r3, [pc, #368]	; (800599c <HAL_UART_MspInit+0x220>)
 800582c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005830:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005832:	485a      	ldr	r0, [pc, #360]	; (800599c <HAL_UART_MspInit+0x220>)
 8005834:	f000 fc46 	bl	80060c4 <HAL_DMA_Init>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800583e:	f7ff fe0d 	bl	800545c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a55      	ldr	r2, [pc, #340]	; (800599c <HAL_UART_MspInit+0x220>)
 8005846:	635a      	str	r2, [r3, #52]	; 0x34
 8005848:	4a54      	ldr	r2, [pc, #336]	; (800599c <HAL_UART_MspInit+0x220>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800584e:	e09a      	b.n	8005986 <HAL_UART_MspInit+0x20a>
  else if(huart->Instance==USART2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a53      	ldr	r2, [pc, #332]	; (80059a4 <HAL_UART_MspInit+0x228>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d156      	bne.n	8005908 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800585a:	4b4e      	ldr	r3, [pc, #312]	; (8005994 <HAL_UART_MspInit+0x218>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4a4d      	ldr	r2, [pc, #308]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	61d3      	str	r3, [r2, #28]
 8005866:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005872:	4b48      	ldr	r3, [pc, #288]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	4a47      	ldr	r2, [pc, #284]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005878:	f043 0304 	orr.w	r3, r3, #4
 800587c:	6193      	str	r3, [r2, #24]
 800587e:	4b45      	ldr	r3, [pc, #276]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800588a:	2304      	movs	r3, #4
 800588c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588e:	2302      	movs	r3, #2
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005892:	2303      	movs	r3, #3
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	4619      	mov	r1, r3
 800589c:	483e      	ldr	r0, [pc, #248]	; (8005998 <HAL_UART_MspInit+0x21c>)
 800589e:	f000 fed1 	bl	8006644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058a2:	2308      	movs	r3, #8
 80058a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ae:	f107 0320 	add.w	r3, r7, #32
 80058b2:	4619      	mov	r1, r3
 80058b4:	4838      	ldr	r0, [pc, #224]	; (8005998 <HAL_UART_MspInit+0x21c>)
 80058b6:	f000 fec5 	bl	8006644 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80058ba:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058bc:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <HAL_UART_MspInit+0x230>)
 80058be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058c0:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058c6:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058cc:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058d2:	4b35      	ldr	r3, [pc, #212]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058d8:	4b33      	ldr	r3, [pc, #204]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058da:	2200      	movs	r2, #0
 80058dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80058de:	4b32      	ldr	r3, [pc, #200]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058e0:	2220      	movs	r2, #32
 80058e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058e4:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80058ea:	482f      	ldr	r0, [pc, #188]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058ec:	f000 fbea 	bl	80060c4 <HAL_DMA_Init>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_UART_MspInit+0x17e>
      Error_Handler();
 80058f6:	f7ff fdb1 	bl	800545c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 80058fe:	635a      	str	r2, [r3, #52]	; 0x34
 8005900:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <HAL_UART_MspInit+0x22c>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005906:	e03e      	b.n	8005986 <HAL_UART_MspInit+0x20a>
  else if(huart->Instance==USART3)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <HAL_UART_MspInit+0x234>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d139      	bne.n	8005986 <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591c:	61d3      	str	r3, [r2, #28]
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_UART_MspInit+0x218>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	6193      	str	r3, [r2, #24]
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <HAL_UART_MspInit+0x218>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005948:	2302      	movs	r3, #2
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800594c:	2303      	movs	r3, #3
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005950:	f107 0320 	add.w	r3, r7, #32
 8005954:	4619      	mov	r1, r3
 8005956:	4817      	ldr	r0, [pc, #92]	; (80059b4 <HAL_UART_MspInit+0x238>)
 8005958:	f000 fe74 	bl	8006644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800595c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005966:	2300      	movs	r3, #0
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800596a:	f107 0320 	add.w	r3, r7, #32
 800596e:	4619      	mov	r1, r3
 8005970:	4810      	ldr	r0, [pc, #64]	; (80059b4 <HAL_UART_MspInit+0x238>)
 8005972:	f000 fe67 	bl	8006644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	2100      	movs	r1, #0
 800597a:	2027      	movs	r0, #39	; 0x27
 800597c:	f000 fb5d 	bl	800603a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005980:	2027      	movs	r0, #39	; 0x27
 8005982:	f000 fb76 	bl	8006072 <HAL_NVIC_EnableIRQ>
}
 8005986:	bf00      	nop
 8005988:	3730      	adds	r7, #48	; 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40013800 	.word	0x40013800
 8005994:	40021000 	.word	0x40021000
 8005998:	40010800 	.word	0x40010800
 800599c:	20000aec 	.word	0x20000aec
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40004400 	.word	0x40004400
 80059a8:	20000b30 	.word	0x20000b30
 80059ac:	4002006c 	.word	0x4002006c
 80059b0:	40004800 	.word	0x40004800
 80059b4:	40010c00 	.word	0x40010c00

080059b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <HAL_UART_MspDeInit+0x8c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d110      	bne.n	80059ec <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80059ca:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 80059d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80059d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059da:	481c      	ldr	r0, [pc, #112]	; (8005a4c <HAL_UART_MspDeInit+0x94>)
 80059dc:	f000 ffb6 	bl	800694c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fbc7 	bl	8006178 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80059ea:	e027      	b.n	8005a3c <HAL_UART_MspDeInit+0x84>
  else if(huart->Instance==USART2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_UART_MspDeInit+0x98>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d10f      	bne.n	8005a16 <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 80059fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a00:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005a02:	210c      	movs	r1, #12
 8005a04:	4811      	ldr	r0, [pc, #68]	; (8005a4c <HAL_UART_MspDeInit+0x94>)
 8005a06:	f000 ffa1 	bl	800694c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fbb2 	bl	8006178 <HAL_DMA_DeInit>
}
 8005a14:	e012      	b.n	8005a3c <HAL_UART_MspDeInit+0x84>
  else if(huart->Instance==USART3)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <HAL_UART_MspDeInit+0x9c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <HAL_UART_MspDeInit+0x84>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <HAL_UART_MspDeInit+0x90>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8005a2c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005a30:	4809      	ldr	r0, [pc, #36]	; (8005a58 <HAL_UART_MspDeInit+0xa0>)
 8005a32:	f000 ff8b 	bl	800694c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8005a36:	2027      	movs	r0, #39	; 0x27
 8005a38:	f000 fb29 	bl	800608e <HAL_NVIC_DisableIRQ>
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40013800 	.word	0x40013800
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40010800 	.word	0x40010800
 8005a50:	40004400 	.word	0x40004400
 8005a54:	40004800 	.word	0x40004800
 8005a58:	40010c00 	.word	0x40010c00

08005a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a60:	e7fe      	b.n	8005a60 <NMI_Handler+0x4>
	...

08005a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <HardFault_Handler+0x30>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HardFault_Handler+0x30>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HardFault_Handler+0x30>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a84:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8005a86:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <HardFault_Handler+0x30>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a90:	e7fe      	b.n	8005a90 <HardFault_Handler+0x2c>
 8005a92:	bf00      	nop
 8005a94:	2000090c 	.word	0x2000090c

08005a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a9c:	e7fe      	b.n	8005a9c <MemManage_Handler+0x4>

08005a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aa2:	e7fe      	b.n	8005aa2 <BusFault_Handler+0x4>

08005aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aa8:	e7fe      	b.n	8005aa8 <UsageFault_Handler+0x4>

08005aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ac6:	bf00      	nop
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
	...

08005ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <SysTick_Handler+0x24>)
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d006      	beq.n	8005aec <SysTick_Handler+0x1c>
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <SysTick_Handler+0x24>)
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <SysTick_Handler+0x24>)
 8005aea:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aec:	f000 f96a 	bl	8005dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	2000193c 	.word	0x2000193c

08005af8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <DMA1_Channel5_IRQHandler+0x10>)
 8005afe:	f000 fc6d 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000aec 	.word	0x20000aec

08005b0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b10:	4802      	ldr	r0, [pc, #8]	; (8005b1c <DMA1_Channel6_IRQHandler+0x10>)
 8005b12:	f000 fc63 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000b30 	.word	0x20000b30

08005b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b24:	4802      	ldr	r0, [pc, #8]	; (8005b30 <TIM2_IRQHandler+0x10>)
 8005b26:	f003 fbe9 	bl	80092fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000954 	.word	0x20000954

08005b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b38:	4802      	ldr	r0, [pc, #8]	; (8005b44 <TIM3_IRQHandler+0x10>)
 8005b3a:	f003 fbdf 	bl	80092fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2000099c 	.word	0x2000099c

08005b48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8005b4c:	4803      	ldr	r0, [pc, #12]	; (8005b5c <USART3_IRQHandler+0x14>)
 8005b4e:	f7fc fa09 	bl	8001f64 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b52:	4802      	ldr	r0, [pc, #8]	; (8005b5c <USART3_IRQHandler+0x14>)
 8005b54:	f004 feb4 	bl	800a8c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b58:	bf00      	nop
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000aac 	.word	0x20000aac

08005b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	return 1;
 8005b64:	2301      	movs	r3, #1
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <_kill>:

int _kill(int pid, int sig)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b78:	f00c ffc6 	bl	8012b08 <__errno>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2216      	movs	r2, #22
 8005b80:	601a      	str	r2, [r3, #0]
	return -1;
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <_exit>:

void _exit (int status)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b96:	f04f 31ff 	mov.w	r1, #4294967295
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ffe7 	bl	8005b6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005ba0:	e7fe      	b.n	8005ba0 <_exit+0x12>

08005ba2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e00a      	b.n	8005bca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	4601      	mov	r1, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	60ba      	str	r2, [r7, #8]
 8005bc0:	b2ca      	uxtb	r2, r1
 8005bc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	dbf0      	blt.n	8005bb4 <_read+0x12>
	}

return len;
 8005bd2:	687b      	ldr	r3, [r7, #4]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e009      	b.n	8005c02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	60ba      	str	r2, [r7, #8]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	dbf1      	blt.n	8005bee <_write+0x12>
	}
	return len;
 8005c0a:	687b      	ldr	r3, [r7, #4]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <_close>:

int _close(int file)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	return -1;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <_isatty>:

int _isatty(int file)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	return 1;
 8005c50:	2301      	movs	r3, #1
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	return 0;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c7c:	4a14      	ldr	r2, [pc, #80]	; (8005cd0 <_sbrk+0x5c>)
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <_sbrk+0x60>)
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <_sbrk+0x64>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c90:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <_sbrk+0x64>)
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <_sbrk+0x68>)
 8005c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <_sbrk+0x64>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d207      	bcs.n	8005cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ca4:	f00c ff30 	bl	8012b08 <__errno>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	220c      	movs	r2, #12
 8005cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb2:	e009      	b.n	8005cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <_sbrk+0x64>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <_sbrk+0x64>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <_sbrk+0x64>)
 8005cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20005000 	.word	0x20005000
 8005cd4:	00000400 	.word	0x00000400
 8005cd8:	20001928 	.word	0x20001928
 8005cdc:	20001958 	.word	0x20001958

08005ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005cec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005cee:	e003      	b.n	8005cf8 <LoopCopyDataInit>

08005cf0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005cf2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005cf4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005cf6:	3104      	adds	r1, #4

08005cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005cf8:	480a      	ldr	r0, [pc, #40]	; (8005d24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005cfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005cfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005d00:	d3f6      	bcc.n	8005cf0 <CopyDataInit>
  ldr r2, =_sbss
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005d04:	e002      	b.n	8005d0c <LoopFillZerobss>

08005d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005d06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005d08:	f842 3b04 	str.w	r3, [r2], #4

08005d0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005d0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005d10:	d3f9      	bcc.n	8005d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d12:	f7ff ffe5 	bl	8005ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d16:	f00c fefd 	bl	8012b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d1a:	f7fc fea9 	bl	8002a70 <main>
  bx lr
 8005d1e:	4770      	bx	lr
  ldr r3, =_sidata
 8005d20:	08014450 	.word	0x08014450
  ldr r0, =_sdata
 8005d24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d28:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8005d2c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005d30:	20001954 	.word	0x20001954

08005d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d34:	e7fe      	b.n	8005d34 <ADC1_2_IRQHandler>
	...

08005d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_Init+0x28>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <HAL_Init+0x28>)
 8005d42:	f043 0310 	orr.w	r3, r3, #16
 8005d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d48:	2003      	movs	r0, #3
 8005d4a:	f000 f96b 	bl	8006024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f000 f808 	bl	8005d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d54:	f7ff fbc2 	bl	80054dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40022000 	.word	0x40022000

08005d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d6c:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_InitTick+0x54>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_InitTick+0x58>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f991 	bl	80060aa <HAL_SYSTICK_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e00e      	b.n	8005db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b0f      	cmp	r3, #15
 8005d96:	d80a      	bhi.n	8005dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	f000 f94b 	bl	800603a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <HAL_InitTick+0x5c>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000004 	.word	0x20000004
 8005dbc:	2000000c 	.word	0x2000000c
 8005dc0:	20000008 	.word	0x20000008

08005dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_IncTick+0x1c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_IncTick+0x20>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <HAL_IncTick+0x20>)
 8005dd6:	6013      	str	r3, [r2, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	20001940 	.word	0x20001940

08005de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return uwTick;
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <HAL_GetTick+0x10>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	20001940 	.word	0x20001940

08005dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e04:	f7ff fff0 	bl	8005de8 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d005      	beq.n	8005e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_Delay+0x44>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e22:	bf00      	nop
 8005e24:	f7ff ffe0 	bl	8005de8 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d8f7      	bhi.n	8005e24 <HAL_Delay+0x28>
  {
  }
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	60d3      	str	r3, [r2, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 0307 	and.w	r3, r3, #7
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db0b      	blt.n	8005ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	4906      	ldr	r1, [pc, #24]	; (8005edc <__NVIC_EnableIRQ+0x34>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db12      	blt.n	8005f18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	490a      	ldr	r1, [pc, #40]	; (8005f24 <__NVIC_DisableIRQ+0x44>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	3320      	adds	r3, #32
 8005f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f0c:	f3bf 8f4f 	dsb	sy
}
 8005f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f12:	f3bf 8f6f 	isb	sy
}
 8005f16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	e000e100 	.word	0xe000e100

08005f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db0a      	blt.n	8005f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	490c      	ldr	r1, [pc, #48]	; (8005f74 <__NVIC_SetPriority+0x4c>)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f50:	e00a      	b.n	8005f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4908      	ldr	r1, [pc, #32]	; (8005f78 <__NVIC_SetPriority+0x50>)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	0112      	lsls	r2, r2, #4
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	440b      	add	r3, r1
 8005f66:	761a      	strb	r2, [r3, #24]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	e000e100 	.word	0xe000e100
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f1c3 0307 	rsb	r3, r3, #7
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	bf28      	it	cs
 8005f9a:	2304      	movcs	r3, #4
 8005f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d902      	bls.n	8005fac <NVIC_EncodePriority+0x30>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3b03      	subs	r3, #3
 8005faa:	e000      	b.n	8005fae <NVIC_EncodePriority+0x32>
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	fa01 f303 	lsl.w	r3, r1, r3
 8005fce:	43d9      	mvns	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	4313      	orrs	r3, r2
         );
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3724      	adds	r7, #36	; 0x24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff0:	d301      	bcc.n	8005ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e00f      	b.n	8006016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ff6:	4a0a      	ldr	r2, [pc, #40]	; (8006020 <SysTick_Config+0x40>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ffe:	210f      	movs	r1, #15
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	f7ff ff90 	bl	8005f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <SysTick_Config+0x40>)
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800600e:	4b04      	ldr	r3, [pc, #16]	; (8006020 <SysTick_Config+0x40>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010

08006024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ff09 	bl	8005e44 <__NVIC_SetPriorityGrouping>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800604c:	f7ff ff1e 	bl	8005e8c <__NVIC_GetPriorityGrouping>
 8006050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7ff ff90 	bl	8005f7c <NVIC_EncodePriority>
 800605c:	4602      	mov	r2, r0
 800605e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff5f 	bl	8005f28 <__NVIC_SetPriority>
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	4603      	mov	r3, r0
 800607a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800607c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff11 	bl	8005ea8 <__NVIC_EnableIRQ>
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	4603      	mov	r3, r0
 8006096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff ff1f 	bl	8005ee0 <__NVIC_DisableIRQ>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ff94 	bl	8005fe0 <SysTick_Config>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e043      	b.n	8006162 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	4b22      	ldr	r3, [pc, #136]	; (800616c <HAL_DMA_Init+0xa8>)
 80060e2:	4413      	add	r3, r2
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <HAL_DMA_Init+0xac>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	009a      	lsls	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_DMA_Init+0xb0>)
 80060f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800610e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006112:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800611c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	bffdfff8 	.word	0xbffdfff8
 8006170:	cccccccd 	.word	0xcccccccd
 8006174:	40020000 	.word	0x40020000

08006178 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e046      	b.n	8006218 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <HAL_DMA_DeInit+0xac>)
 80061c2:	4413      	add	r3, r2
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_DMA_DeInit+0xb0>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	009a      	lsls	r2, r3, #2
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <HAL_DMA_DeInit+0xb4>)
 80061d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f202 	lsl.w	r2, r1, r2
 80061e6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	bffdfff8 	.word	0xbffdfff8
 8006228:	cccccccd 	.word	0xcccccccd
 800622c:	40020000 	.word	0x40020000

08006230 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Start_IT+0x20>
 800624c:	2302      	movs	r3, #2
 800624e:	e04a      	b.n	80062e6 <HAL_DMA_Start_IT+0xb6>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800625e:	2b01      	cmp	r3, #1
 8006260:	d13a      	bne.n	80062d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f9ae 	bl	80065e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 020e 	orr.w	r2, r2, #14
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e00f      	b.n	80062c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0204 	bic.w	r2, r2, #4
 80062b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 020a 	orr.w	r2, r2, #10
 80062c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e005      	b.n	80062e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006302:	2b02      	cmp	r3, #2
 8006304:	d005      	beq.n	8006312 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2204      	movs	r2, #4
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
 8006310:	e051      	b.n	80063b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 020e 	bic.w	r2, r2, #14
 8006320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_Abort_IT+0xd0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d029      	beq.n	8006390 <HAL_DMA_Abort_IT+0xa0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_DMA_Abort_IT+0xd4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d022      	beq.n	800638c <HAL_DMA_Abort_IT+0x9c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_Abort_IT+0xd8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d01a      	beq.n	8006386 <HAL_DMA_Abort_IT+0x96>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_DMA_Abort_IT+0xdc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d012      	beq.n	8006380 <HAL_DMA_Abort_IT+0x90>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_Abort_IT+0xe0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00a      	beq.n	800637a <HAL_DMA_Abort_IT+0x8a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_DMA_Abort_IT+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d102      	bne.n	8006374 <HAL_DMA_Abort_IT+0x84>
 800636e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006372:	e00e      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 8006374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006378:	e00b      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 800637a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800637e:	e008      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 8006380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006384:	e005      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 8006386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800638a:	e002      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 800638c:	2310      	movs	r3, #16
 800638e:	e000      	b.n	8006392 <HAL_DMA_Abort_IT+0xa2>
 8006390:	2301      	movs	r3, #1
 8006392:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <HAL_DMA_Abort_IT+0xe8>)
 8006394:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
    } 
  }
  return status;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40020008 	.word	0x40020008
 80063c4:	4002001c 	.word	0x4002001c
 80063c8:	40020030 	.word	0x40020030
 80063cc:	40020044 	.word	0x40020044
 80063d0:	40020058 	.word	0x40020058
 80063d4:	4002006c 	.word	0x4002006c
 80063d8:	40020000 	.word	0x40020000

080063dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2204      	movs	r2, #4
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d04f      	beq.n	80064a4 <HAL_DMA_IRQHandler+0xc8>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d04a      	beq.n	80064a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d107      	bne.n	800642c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a66      	ldr	r2, [pc, #408]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d029      	beq.n	800648a <HAL_DMA_IRQHandler+0xae>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_DMA_IRQHandler+0x1f4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <HAL_DMA_IRQHandler+0xaa>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a63      	ldr	r2, [pc, #396]	; (80065d4 <HAL_DMA_IRQHandler+0x1f8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01a      	beq.n	8006480 <HAL_DMA_IRQHandler+0xa4>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a62      	ldr	r2, [pc, #392]	; (80065d8 <HAL_DMA_IRQHandler+0x1fc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d012      	beq.n	800647a <HAL_DMA_IRQHandler+0x9e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a60      	ldr	r2, [pc, #384]	; (80065dc <HAL_DMA_IRQHandler+0x200>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00a      	beq.n	8006474 <HAL_DMA_IRQHandler+0x98>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a5f      	ldr	r2, [pc, #380]	; (80065e0 <HAL_DMA_IRQHandler+0x204>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d102      	bne.n	800646e <HAL_DMA_IRQHandler+0x92>
 8006468:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800646c:	e00e      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 800646e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006472:	e00b      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 8006474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006478:	e008      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 800647a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800647e:	e005      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 8006480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006484:	e002      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 8006486:	2340      	movs	r3, #64	; 0x40
 8006488:	e000      	b.n	800648c <HAL_DMA_IRQHandler+0xb0>
 800648a:	2304      	movs	r3, #4
 800648c:	4a55      	ldr	r2, [pc, #340]	; (80065e4 <HAL_DMA_IRQHandler+0x208>)
 800648e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8094 	beq.w	80065c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80064a2:	e08e      	b.n	80065c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	2202      	movs	r2, #2
 80064aa:	409a      	lsls	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d056      	beq.n	8006562 <HAL_DMA_IRQHandler+0x186>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d051      	beq.n	8006562 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020a 	bic.w	r2, r2, #10
 80064da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a38      	ldr	r2, [pc, #224]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d029      	beq.n	8006542 <HAL_DMA_IRQHandler+0x166>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a37      	ldr	r2, [pc, #220]	; (80065d0 <HAL_DMA_IRQHandler+0x1f4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d022      	beq.n	800653e <HAL_DMA_IRQHandler+0x162>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <HAL_DMA_IRQHandler+0x1f8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01a      	beq.n	8006538 <HAL_DMA_IRQHandler+0x15c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <HAL_DMA_IRQHandler+0x1fc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d012      	beq.n	8006532 <HAL_DMA_IRQHandler+0x156>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a32      	ldr	r2, [pc, #200]	; (80065dc <HAL_DMA_IRQHandler+0x200>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00a      	beq.n	800652c <HAL_DMA_IRQHandler+0x150>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <HAL_DMA_IRQHandler+0x204>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d102      	bne.n	8006526 <HAL_DMA_IRQHandler+0x14a>
 8006520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006524:	e00e      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 8006526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800652a:	e00b      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 800652c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006530:	e008      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 8006532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006536:	e005      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 8006538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653c:	e002      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 800653e:	2320      	movs	r3, #32
 8006540:	e000      	b.n	8006544 <HAL_DMA_IRQHandler+0x168>
 8006542:	2302      	movs	r3, #2
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <HAL_DMA_IRQHandler+0x208>)
 8006546:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d034      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006560:	e02f      	b.n	80065c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2208      	movs	r2, #8
 8006568:	409a      	lsls	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d028      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x1e8>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d023      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 020e 	bic.w	r2, r2, #14
 800658a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f202 	lsl.w	r2, r1, r2
 800659a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
    }
  }
  return;
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
}
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40020008 	.word	0x40020008
 80065d0:	4002001c 	.word	0x4002001c
 80065d4:	40020030 	.word	0x40020030
 80065d8:	40020044 	.word	0x40020044
 80065dc:	40020058 	.word	0x40020058
 80065e0:	4002006c 	.word	0x4002006c
 80065e4:	40020000 	.word	0x40020000

080065e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f202 	lsl.w	r2, r1, r2
 8006604:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b10      	cmp	r3, #16
 8006614:	d108      	bne.n	8006628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006626:	e007      	b.n	8006638 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
	...

08006644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006644:	b480      	push	{r7}
 8006646:	b08b      	sub	sp, #44	; 0x2c
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800664e:	2300      	movs	r3, #0
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006656:	e169      	b.n	800692c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006658:	2201      	movs	r2, #1
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	429a      	cmp	r2, r3
 8006672:	f040 8158 	bne.w	8006926 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a9a      	ldr	r2, [pc, #616]	; (80068e4 <HAL_GPIO_Init+0x2a0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d05e      	beq.n	800673e <HAL_GPIO_Init+0xfa>
 8006680:	4a98      	ldr	r2, [pc, #608]	; (80068e4 <HAL_GPIO_Init+0x2a0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d875      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 8006686:	4a98      	ldr	r2, [pc, #608]	; (80068e8 <HAL_GPIO_Init+0x2a4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d058      	beq.n	800673e <HAL_GPIO_Init+0xfa>
 800668c:	4a96      	ldr	r2, [pc, #600]	; (80068e8 <HAL_GPIO_Init+0x2a4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d86f      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 8006692:	4a96      	ldr	r2, [pc, #600]	; (80068ec <HAL_GPIO_Init+0x2a8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d052      	beq.n	800673e <HAL_GPIO_Init+0xfa>
 8006698:	4a94      	ldr	r2, [pc, #592]	; (80068ec <HAL_GPIO_Init+0x2a8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d869      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 800669e:	4a94      	ldr	r2, [pc, #592]	; (80068f0 <HAL_GPIO_Init+0x2ac>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d04c      	beq.n	800673e <HAL_GPIO_Init+0xfa>
 80066a4:	4a92      	ldr	r2, [pc, #584]	; (80068f0 <HAL_GPIO_Init+0x2ac>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d863      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 80066aa:	4a92      	ldr	r2, [pc, #584]	; (80068f4 <HAL_GPIO_Init+0x2b0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d046      	beq.n	800673e <HAL_GPIO_Init+0xfa>
 80066b0:	4a90      	ldr	r2, [pc, #576]	; (80068f4 <HAL_GPIO_Init+0x2b0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d85d      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 80066b6:	2b12      	cmp	r3, #18
 80066b8:	d82a      	bhi.n	8006710 <HAL_GPIO_Init+0xcc>
 80066ba:	2b12      	cmp	r3, #18
 80066bc:	d859      	bhi.n	8006772 <HAL_GPIO_Init+0x12e>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <HAL_GPIO_Init+0x80>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	0800673f 	.word	0x0800673f
 80066c8:	08006719 	.word	0x08006719
 80066cc:	0800672b 	.word	0x0800672b
 80066d0:	0800676d 	.word	0x0800676d
 80066d4:	08006773 	.word	0x08006773
 80066d8:	08006773 	.word	0x08006773
 80066dc:	08006773 	.word	0x08006773
 80066e0:	08006773 	.word	0x08006773
 80066e4:	08006773 	.word	0x08006773
 80066e8:	08006773 	.word	0x08006773
 80066ec:	08006773 	.word	0x08006773
 80066f0:	08006773 	.word	0x08006773
 80066f4:	08006773 	.word	0x08006773
 80066f8:	08006773 	.word	0x08006773
 80066fc:	08006773 	.word	0x08006773
 8006700:	08006773 	.word	0x08006773
 8006704:	08006773 	.word	0x08006773
 8006708:	08006721 	.word	0x08006721
 800670c:	08006735 	.word	0x08006735
 8006710:	4a79      	ldr	r2, [pc, #484]	; (80068f8 <HAL_GPIO_Init+0x2b4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006716:	e02c      	b.n	8006772 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	623b      	str	r3, [r7, #32]
          break;
 800671e:	e029      	b.n	8006774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	3304      	adds	r3, #4
 8006726:	623b      	str	r3, [r7, #32]
          break;
 8006728:	e024      	b.n	8006774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	3308      	adds	r3, #8
 8006730:	623b      	str	r3, [r7, #32]
          break;
 8006732:	e01f      	b.n	8006774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	330c      	adds	r3, #12
 800673a:	623b      	str	r3, [r7, #32]
          break;
 800673c:	e01a      	b.n	8006774 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006746:	2304      	movs	r3, #4
 8006748:	623b      	str	r3, [r7, #32]
          break;
 800674a:	e013      	b.n	8006774 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d105      	bne.n	8006760 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006754:	2308      	movs	r3, #8
 8006756:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	611a      	str	r2, [r3, #16]
          break;
 800675e:	e009      	b.n	8006774 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006760:	2308      	movs	r3, #8
 8006762:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	615a      	str	r2, [r3, #20]
          break;
 800676a:	e003      	b.n	8006774 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
          break;
 8006770:	e000      	b.n	8006774 <HAL_GPIO_Init+0x130>
          break;
 8006772:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d801      	bhi.n	800677e <HAL_GPIO_Init+0x13a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	e001      	b.n	8006782 <HAL_GPIO_Init+0x13e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2bff      	cmp	r3, #255	; 0xff
 8006788:	d802      	bhi.n	8006790 <HAL_GPIO_Init+0x14c>
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	e002      	b.n	8006796 <HAL_GPIO_Init+0x152>
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3b08      	subs	r3, #8
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	210f      	movs	r1, #15
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	401a      	ands	r2, r3
 80067a8:	6a39      	ldr	r1, [r7, #32]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	431a      	orrs	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80b1 	beq.w	8006926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80067c4:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <HAL_GPIO_Init+0x2b8>)
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4a4c      	ldr	r2, [pc, #304]	; (80068fc <HAL_GPIO_Init+0x2b8>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6193      	str	r3, [r2, #24]
 80067d0:	4b4a      	ldr	r3, [pc, #296]	; (80068fc <HAL_GPIO_Init+0x2b8>)
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80067dc:	4a48      	ldr	r2, [pc, #288]	; (8006900 <HAL_GPIO_Init+0x2bc>)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	089b      	lsrs	r3, r3, #2
 80067e2:	3302      	adds	r3, #2
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	220f      	movs	r2, #15
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	43db      	mvns	r3, r3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a40      	ldr	r2, [pc, #256]	; (8006904 <HAL_GPIO_Init+0x2c0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_GPIO_Init+0x1ec>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <HAL_GPIO_Init+0x2c4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00d      	beq.n	800682c <HAL_GPIO_Init+0x1e8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a3e      	ldr	r2, [pc, #248]	; (800690c <HAL_GPIO_Init+0x2c8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <HAL_GPIO_Init+0x1e4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3d      	ldr	r2, [pc, #244]	; (8006910 <HAL_GPIO_Init+0x2cc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d101      	bne.n	8006824 <HAL_GPIO_Init+0x1e0>
 8006820:	2303      	movs	r3, #3
 8006822:	e006      	b.n	8006832 <HAL_GPIO_Init+0x1ee>
 8006824:	2304      	movs	r3, #4
 8006826:	e004      	b.n	8006832 <HAL_GPIO_Init+0x1ee>
 8006828:	2302      	movs	r3, #2
 800682a:	e002      	b.n	8006832 <HAL_GPIO_Init+0x1ee>
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <HAL_GPIO_Init+0x1ee>
 8006830:	2300      	movs	r3, #0
 8006832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006834:	f002 0203 	and.w	r2, r2, #3
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4093      	lsls	r3, r2
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006842:	492f      	ldr	r1, [pc, #188]	; (8006900 <HAL_GPIO_Init+0x2bc>)
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	3302      	adds	r3, #2
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	492c      	ldr	r1, [pc, #176]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	e006      	b.n	8006878 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800686a:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	43db      	mvns	r3, r3
 8006872:	4928      	ldr	r1, [pc, #160]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 8006874:	4013      	ands	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	4922      	ldr	r1, [pc, #136]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	604b      	str	r3, [r1, #4]
 8006890:	e006      	b.n	80068a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006892:	4b20      	ldr	r3, [pc, #128]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	43db      	mvns	r3, r3
 800689a:	491e      	ldr	r1, [pc, #120]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 800689c:	4013      	ands	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d006      	beq.n	80068ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	4918      	ldr	r1, [pc, #96]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]
 80068b8:	e006      	b.n	80068c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80068ba:	4b16      	ldr	r3, [pc, #88]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	4914      	ldr	r1, [pc, #80]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d021      	beq.n	8006918 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	490e      	ldr	r1, [pc, #56]	; (8006914 <HAL_GPIO_Init+0x2d0>)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60cb      	str	r3, [r1, #12]
 80068e0:	e021      	b.n	8006926 <HAL_GPIO_Init+0x2e2>
 80068e2:	bf00      	nop
 80068e4:	10320000 	.word	0x10320000
 80068e8:	10310000 	.word	0x10310000
 80068ec:	10220000 	.word	0x10220000
 80068f0:	10210000 	.word	0x10210000
 80068f4:	10120000 	.word	0x10120000
 80068f8:	10110000 	.word	0x10110000
 80068fc:	40021000 	.word	0x40021000
 8006900:	40010000 	.word	0x40010000
 8006904:	40010800 	.word	0x40010800
 8006908:	40010c00 	.word	0x40010c00
 800690c:	40011000 	.word	0x40011000
 8006910:	40011400 	.word	0x40011400
 8006914:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <HAL_GPIO_Init+0x304>)
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	43db      	mvns	r3, r3
 8006920:	4909      	ldr	r1, [pc, #36]	; (8006948 <HAL_GPIO_Init+0x304>)
 8006922:	4013      	ands	r3, r2
 8006924:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	3301      	adds	r3, #1
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	f47f ae8e 	bne.w	8006658 <HAL_GPIO_Init+0x14>
  }
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	372c      	adds	r7, #44	; 0x2c
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr
 8006948:	40010400 	.word	0x40010400

0800694c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800695a:	e09a      	b.n	8006a92 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800695c:	2201      	movs	r2, #1
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 808d 	beq.w	8006a8c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006972:	4a4e      	ldr	r2, [pc, #312]	; (8006aac <HAL_GPIO_DeInit+0x160>)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	089b      	lsrs	r3, r3, #2
 8006978:	3302      	adds	r3, #2
 800697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	220f      	movs	r2, #15
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4013      	ands	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a46      	ldr	r2, [pc, #280]	; (8006ab0 <HAL_GPIO_DeInit+0x164>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <HAL_GPIO_DeInit+0x78>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a45      	ldr	r2, [pc, #276]	; (8006ab4 <HAL_GPIO_DeInit+0x168>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00d      	beq.n	80069c0 <HAL_GPIO_DeInit+0x74>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a44      	ldr	r2, [pc, #272]	; (8006ab8 <HAL_GPIO_DeInit+0x16c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <HAL_GPIO_DeInit+0x70>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a43      	ldr	r2, [pc, #268]	; (8006abc <HAL_GPIO_DeInit+0x170>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d101      	bne.n	80069b8 <HAL_GPIO_DeInit+0x6c>
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <HAL_GPIO_DeInit+0x7a>
 80069b8:	2304      	movs	r3, #4
 80069ba:	e004      	b.n	80069c6 <HAL_GPIO_DeInit+0x7a>
 80069bc:	2302      	movs	r3, #2
 80069be:	e002      	b.n	80069c6 <HAL_GPIO_DeInit+0x7a>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_GPIO_DeInit+0x7a>
 80069c4:	2300      	movs	r3, #0
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	f002 0203 	and.w	r2, r2, #3
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	4093      	lsls	r3, r2
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d132      	bne.n	8006a3c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	220f      	movs	r2, #15
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80069e6:	4a31      	ldr	r2, [pc, #196]	; (8006aac <HAL_GPIO_DeInit+0x160>)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	3302      	adds	r3, #2
 80069ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	43da      	mvns	r2, r3
 80069f6:	482d      	ldr	r0, [pc, #180]	; (8006aac <HAL_GPIO_DeInit+0x160>)
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	400a      	ands	r2, r1
 80069fe:	3302      	adds	r3, #2
 8006a00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006a04:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	492c      	ldr	r1, [pc, #176]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006a12:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	4929      	ldr	r1, [pc, #164]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	43db      	mvns	r3, r3
 8006a28:	4925      	ldr	r1, [pc, #148]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006a2e:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	4922      	ldr	r1, [pc, #136]	; (8006ac0 <HAL_GPIO_DeInit+0x174>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2bff      	cmp	r3, #255	; 0xff
 8006a40:	d801      	bhi.n	8006a46 <HAL_GPIO_DeInit+0xfa>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	e001      	b.n	8006a4a <HAL_GPIO_DeInit+0xfe>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2bff      	cmp	r3, #255	; 0xff
 8006a50:	d802      	bhi.n	8006a58 <HAL_GPIO_DeInit+0x10c>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	e002      	b.n	8006a5e <HAL_GPIO_DeInit+0x112>
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3b08      	subs	r3, #8
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	210f      	movs	r1, #15
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	401a      	ands	r2, r3
 8006a70:	2104      	movs	r1, #4
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f47f af5e 	bne.w	800695c <HAL_GPIO_DeInit+0x10>
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	3724      	adds	r7, #36	; 0x24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40010800 	.word	0x40010800
 8006ab4:	40010c00 	.word	0x40010c00
 8006ab8:	40011000 	.word	0x40011000
 8006abc:	40011400 	.word	0x40011400
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ad4:	787b      	ldrb	r3, [r7, #1]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ae0:	e003      	b.n	8006aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ae2:	887b      	ldrh	r3, [r7, #2]
 8006ae4:	041a      	lsls	r2, r3, #16
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	611a      	str	r2, [r3, #16]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e12b      	b.n	8006d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fe fd10 	bl	8005540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	; 0x24
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b58:	f002 f84e 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4a81      	ldr	r2, [pc, #516]	; (8006d68 <HAL_I2C_Init+0x274>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d807      	bhi.n	8006b78 <HAL_I2C_Init+0x84>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a80      	ldr	r2, [pc, #512]	; (8006d6c <HAL_I2C_Init+0x278>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bf94      	ite	ls
 8006b70:	2301      	movls	r3, #1
 8006b72:	2300      	movhi	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e006      	b.n	8006b86 <HAL_I2C_Init+0x92>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a7d      	ldr	r2, [pc, #500]	; (8006d70 <HAL_I2C_Init+0x27c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bf94      	ite	ls
 8006b80:	2301      	movls	r3, #1
 8006b82:	2300      	movhi	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0e7      	b.n	8006d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a78      	ldr	r2, [pc, #480]	; (8006d74 <HAL_I2C_Init+0x280>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	0c9b      	lsrs	r3, r3, #18
 8006b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	4a6a      	ldr	r2, [pc, #424]	; (8006d68 <HAL_I2C_Init+0x274>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d802      	bhi.n	8006bc8 <HAL_I2C_Init+0xd4>
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	e009      	b.n	8006bdc <HAL_I2C_Init+0xe8>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	4a69      	ldr	r2, [pc, #420]	; (8006d78 <HAL_I2C_Init+0x284>)
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	099b      	lsrs	r3, r3, #6
 8006bda:	3301      	adds	r3, #1
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	495c      	ldr	r1, [pc, #368]	; (8006d68 <HAL_I2C_Init+0x274>)
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	d819      	bhi.n	8006c30 <HAL_I2C_Init+0x13c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	1e59      	subs	r1, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c10:	400b      	ands	r3, r1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <HAL_I2C_Init+0x138>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1e59      	subs	r1, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c24:	3301      	adds	r3, #1
 8006c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2a:	e051      	b.n	8006cd0 <HAL_I2C_Init+0x1dc>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	e04f      	b.n	8006cd0 <HAL_I2C_Init+0x1dc>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d111      	bne.n	8006c5c <HAL_I2C_Init+0x168>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1e58      	subs	r0, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6859      	ldr	r1, [r3, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	440b      	add	r3, r1
 8006c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bf0c      	ite	eq
 8006c54:	2301      	moveq	r3, #1
 8006c56:	2300      	movne	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e012      	b.n	8006c82 <HAL_I2C_Init+0x18e>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1e58      	subs	r0, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6859      	ldr	r1, [r3, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	0099      	lsls	r1, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2301      	moveq	r3, #1
 8006c7e:	2300      	movne	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_I2C_Init+0x196>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e022      	b.n	8006cd0 <HAL_I2C_Init+0x1dc>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10e      	bne.n	8006cb0 <HAL_I2C_Init+0x1bc>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	1e58      	subs	r0, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6859      	ldr	r1, [r3, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	440b      	add	r3, r1
 8006ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	e00f      	b.n	8006cd0 <HAL_I2C_Init+0x1dc>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	1e58      	subs	r0, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6859      	ldr	r1, [r3, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	0099      	lsls	r1, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	6809      	ldr	r1, [r1, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69da      	ldr	r2, [r3, #28]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6911      	ldr	r1, [r2, #16]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	68d2      	ldr	r2, [r2, #12]
 8006d0a:	4311      	orrs	r1, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	000186a0 	.word	0x000186a0
 8006d6c:	001e847f 	.word	0x001e847f
 8006d70:	003d08ff 	.word	0x003d08ff
 8006d74:	431bde83 	.word	0x431bde83
 8006d78:	10624dd3 	.word	0x10624dd3

08006d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	461a      	mov	r2, r3
 8006d88:	460b      	mov	r3, r1
 8006d8a:	817b      	strh	r3, [r7, #10]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d90:	f7ff f82a 	bl	8005de8 <HAL_GetTick>
 8006d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	f040 80e0 	bne.w	8006f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2319      	movs	r3, #25
 8006daa:	2201      	movs	r2, #1
 8006dac:	4970      	ldr	r1, [pc, #448]	; (8006f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 f972 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0d3      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_I2C_Master_Transmit+0x50>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0cc      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d007      	beq.n	8006df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2221      	movs	r2, #33	; 0x21
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	893a      	ldrh	r2, [r7, #8]
 8006e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4a50      	ldr	r2, [pc, #320]	; (8006f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e34:	8979      	ldrh	r1, [r7, #10]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fe5e 	bl	8007afc <I2C_MasterRequestWrite>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e08d      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e60:	e066      	b.n	8006f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	6a39      	ldr	r1, [r7, #32]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f001 f9ec 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d107      	bne.n	8006e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e06b      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d11b      	bne.n	8006f04 <HAL_I2C_Master_Transmit+0x188>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d017      	beq.n	8006f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	6a39      	ldr	r1, [r7, #32]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f001 f9dc 	bl	80082c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d107      	bne.n	8006f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e01a      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d194      	bne.n	8006e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	00100002 	.word	0x00100002
 8006f74:	ffff0000 	.word	0xffff0000

08006f78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	; 0x30
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	461a      	mov	r2, r3
 8006f84:	460b      	mov	r3, r1
 8006f86:	817b      	strh	r3, [r7, #10]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f90:	f7fe ff2a 	bl	8005de8 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	f040 823f 	bne.w	8007422 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2319      	movs	r3, #25
 8006faa:	2201      	movs	r2, #1
 8006fac:	497f      	ldr	r1, [pc, #508]	; (80071ac <HAL_I2C_Master_Receive+0x234>)
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f001 f872 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e232      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_I2C_Master_Receive+0x54>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e22b      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d007      	beq.n	8006ff2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007000:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2222      	movs	r2, #34	; 0x22
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2210      	movs	r2, #16
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	893a      	ldrh	r2, [r7, #8]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a5f      	ldr	r2, [pc, #380]	; (80071b0 <HAL_I2C_Master_Receive+0x238>)
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007034:	8979      	ldrh	r1, [r7, #10]
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fde0 	bl	8007c00 <I2C_MasterRequestRead>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e1ec      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d113      	bne.n	800707a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e1c0      	b.n	80073fc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	2b01      	cmp	r3, #1
 8007080:	d11e      	bne.n	80070c0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007092:	b672      	cpsid	i
}
 8007094:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80070bc:	b662      	cpsie	i
}
 80070be:	e035      	b.n	800712c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d11e      	bne.n	8007106 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80070d8:	b672      	cpsid	i
}
 80070da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007102:	b662      	cpsie	i
}
 8007104:	e012      	b.n	800712c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007116:	2300      	movs	r3, #0
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800712c:	e166      	b.n	80073fc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	2b03      	cmp	r3, #3
 8007134:	f200 811f 	bhi.w	8007376 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	2b01      	cmp	r3, #1
 800713e:	d123      	bne.n	8007188 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f001 f8ff 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e167      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007186:	e139      	b.n	80073fc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	2b02      	cmp	r3, #2
 800718e:	d152      	bne.n	8007236 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <HAL_I2C_Master_Receive+0x23c>)
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 ff7c 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e13c      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
 80071aa:	bf00      	nop
 80071ac:	00100002 	.word	0x00100002
 80071b0:	ffff0000 	.word	0xffff0000
 80071b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80071b8:	b672      	cpsid	i
}
 80071ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80071fe:	b662      	cpsie	i
}
 8007200:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007234:	e0e2      	b.n	80073fc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2200      	movs	r2, #0
 800723e:	497b      	ldr	r1, [pc, #492]	; (800742c <HAL_I2C_Master_Receive+0x4b4>)
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 ff29 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0e9      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007260:	b672      	cpsid	i
}
 8007262:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007296:	4b66      	ldr	r3, [pc, #408]	; (8007430 <HAL_I2C_Master_Receive+0x4b8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	08db      	lsrs	r3, r3, #3
 800729c:	4a65      	ldr	r2, [pc, #404]	; (8007434 <HAL_I2C_Master_Receive+0x4bc>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0a1a      	lsrs	r2, r3, #8
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	00da      	lsls	r2, r3, #3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d118      	bne.n	80072ee <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0220 	orr.w	r2, r3, #32
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80072de:	b662      	cpsie	i
}
 80072e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e09a      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d1d9      	bne.n	80072b0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800733e:	b662      	cpsie	i
}
 8007340:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007374:	e042      	b.n	80073fc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 ffe4 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e04c      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d118      	bne.n	80073fc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f ae94 	bne.w	800712e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	00010004 	.word	0x00010004
 8007430:	20000004 	.word	0x20000004
 8007434:	14f8b589 	.word	0x14f8b589

08007438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	4603      	mov	r3, r0
 8007448:	817b      	strh	r3, [r7, #10]
 800744a:	460b      	mov	r3, r1
 800744c:	813b      	strh	r3, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007452:	f7fe fcc9 	bl	8005de8 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b20      	cmp	r3, #32
 8007462:	f040 80d9 	bne.w	8007618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	2319      	movs	r3, #25
 800746c:	2201      	movs	r2, #1
 800746e:	496d      	ldr	r1, [pc, #436]	; (8007624 <HAL_I2C_Mem_Write+0x1ec>)
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fe11 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800747c:	2302      	movs	r3, #2
 800747e:	e0cc      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_I2C_Mem_Write+0x56>
 800748a:	2302      	movs	r3, #2
 800748c:	e0c5      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d007      	beq.n	80074b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2221      	movs	r2, #33	; 0x21
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a3a      	ldr	r2, [r7, #32]
 80074de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a4d      	ldr	r2, [pc, #308]	; (8007628 <HAL_I2C_Mem_Write+0x1f0>)
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074f6:	88f8      	ldrh	r0, [r7, #6]
 80074f8:	893a      	ldrh	r2, [r7, #8]
 80074fa:	8979      	ldrh	r1, [r7, #10]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fc48 	bl	8007d9c <I2C_RequestMemoryWrite>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d052      	beq.n	80075b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e081      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fe92 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b04      	cmp	r3, #4
 800752c:	d107      	bne.n	800753e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e06b      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d11b      	bne.n	80075b8 <HAL_I2C_Mem_Write+0x180>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d017      	beq.n	80075b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1aa      	bne.n	8007516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fe7e 	bl	80082c6 <I2C_WaitOnBTFFlagUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d107      	bne.n	80075e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e016      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	00100002 	.word	0x00100002
 8007628:	ffff0000 	.word	0xffff0000

0800762c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08c      	sub	sp, #48	; 0x30
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	4603      	mov	r3, r0
 800763c:	817b      	strh	r3, [r7, #10]
 800763e:	460b      	mov	r3, r1
 8007640:	813b      	strh	r3, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800764a:	f7fe fbcd 	bl	8005de8 <HAL_GetTick>
 800764e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b20      	cmp	r3, #32
 800765a:	f040 8244 	bne.w	8007ae6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2319      	movs	r3, #25
 8007664:	2201      	movs	r2, #1
 8007666:	4982      	ldr	r1, [pc, #520]	; (8007870 <HAL_I2C_Mem_Read+0x244>)
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fd15 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007674:	2302      	movs	r3, #2
 8007676:	e237      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_I2C_Mem_Read+0x5a>
 8007682:	2302      	movs	r3, #2
 8007684:	e230      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d007      	beq.n	80076ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2222      	movs	r2, #34	; 0x22
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2240      	movs	r2, #64	; 0x40
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80076dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a62      	ldr	r2, [pc, #392]	; (8007874 <HAL_I2C_Mem_Read+0x248>)
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076ee:	88f8      	ldrh	r0, [r7, #6]
 80076f0:	893a      	ldrh	r2, [r7, #8]
 80076f2:	8979      	ldrh	r1, [r7, #10]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4603      	mov	r3, r0
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fbe2 	bl	8007ec8 <I2C_RequestMemoryRead>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e1ec      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d113      	bne.n	800773e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e1c0      	b.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007742:	2b01      	cmp	r3, #1
 8007744:	d11e      	bne.n	8007784 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007754:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007756:	b672      	cpsid	i
}
 8007758:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007780:	b662      	cpsie	i
}
 8007782:	e035      	b.n	80077f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007788:	2b02      	cmp	r3, #2
 800778a:	d11e      	bne.n	80077ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800779c:	b672      	cpsid	i
}
 800779e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80077c6:	b662      	cpsie	i
}
 80077c8:	e012      	b.n	80077f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077da:	2300      	movs	r3, #0
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80077f0:	e166      	b.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f200 811f 	bhi.w	8007a3a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007800:	2b01      	cmp	r3, #1
 8007802:	d123      	bne.n	800784c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007806:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fd9d 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e167      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	855a      	strh	r2, [r3, #42]	; 0x2a
 800784a:	e139      	b.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007850:	2b02      	cmp	r3, #2
 8007852:	d152      	bne.n	80078fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2200      	movs	r2, #0
 800785c:	4906      	ldr	r1, [pc, #24]	; (8007878 <HAL_I2C_Mem_Read+0x24c>)
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 fc1a 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e13c      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
 800786e:	bf00      	nop
 8007870:	00100002 	.word	0x00100002
 8007874:	ffff0000 	.word	0xffff0000
 8007878:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800787c:	b672      	cpsid	i
}
 800787e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80078c2:	b662      	cpsie	i
}
 80078c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078f8:	e0e2      	b.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2200      	movs	r2, #0
 8007902:	497b      	ldr	r1, [pc, #492]	; (8007af0 <HAL_I2C_Mem_Read+0x4c4>)
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fbc7 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0e9      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007922:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007924:	b672      	cpsid	i
}
 8007926:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800795a:	4b66      	ldr	r3, [pc, #408]	; (8007af4 <HAL_I2C_Mem_Read+0x4c8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	4a65      	ldr	r2, [pc, #404]	; (8007af8 <HAL_I2C_Mem_Read+0x4cc>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0a1a      	lsrs	r2, r3, #8
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	00da      	lsls	r2, r3, #3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	3b01      	subs	r3, #1
 8007978:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d118      	bne.n	80079b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f043 0220 	orr.w	r2, r3, #32
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80079a2:	b662      	cpsie	i
}
 80079a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e09a      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d1d9      	bne.n	8007974 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007a02:	b662      	cpsie	i
}
 8007a04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a38:	e042      	b.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fc82 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e04c      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d118      	bne.n	8007ac0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f47f ae94 	bne.w	80077f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	; 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	00010004 	.word	0x00010004
 8007af4:	20000004 	.word	0x20000004
 8007af8:	14f8b589 	.word	0x14f8b589

08007afc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d006      	beq.n	8007b26 <I2C_MasterRequestWrite+0x2a>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d003      	beq.n	8007b26 <I2C_MasterRequestWrite+0x2a>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b24:	d108      	bne.n	8007b38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e00b      	b.n	8007b50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	2b12      	cmp	r3, #18
 8007b3e:	d107      	bne.n	8007b50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fa9b 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b76:	d103      	bne.n	8007b80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e035      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b8c:	d108      	bne.n	8007ba0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b9c:	611a      	str	r2, [r3, #16]
 8007b9e:	e01b      	b.n	8007bd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ba0:	897b      	ldrh	r3, [r7, #10]
 8007ba2:	11db      	asrs	r3, r3, #7
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f003 0306 	and.w	r3, r3, #6
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f063 030f 	orn	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	490e      	ldr	r1, [pc, #56]	; (8007bf8 <I2C_MasterRequestWrite+0xfc>)
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fac1 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e010      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bce:	897b      	ldrh	r3, [r7, #10]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4907      	ldr	r1, [pc, #28]	; (8007bfc <I2C_MasterRequestWrite+0x100>)
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fab1 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	00010008 	.word	0x00010008
 8007bfc:	00010002 	.word	0x00010002

08007c00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d006      	beq.n	8007c3a <I2C_MasterRequestRead+0x3a>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d003      	beq.n	8007c3a <I2C_MasterRequestRead+0x3a>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c38:	d108      	bne.n	8007c4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e00b      	b.n	8007c64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	2b11      	cmp	r3, #17
 8007c52:	d107      	bne.n	8007c64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fa11 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	d103      	bne.n	8007c94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e079      	b.n	8007d8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ca0:	d108      	bne.n	8007cb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ca2:	897b      	ldrh	r3, [r7, #10]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	611a      	str	r2, [r3, #16]
 8007cb2:	e05f      	b.n	8007d74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cb4:	897b      	ldrh	r3, [r7, #10]
 8007cb6:	11db      	asrs	r3, r3, #7
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0306 	and.w	r3, r3, #6
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f063 030f 	orn	r3, r3, #15
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4930      	ldr	r1, [pc, #192]	; (8007d94 <I2C_MasterRequestRead+0x194>)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fa37 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e054      	b.n	8007d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ce2:	897b      	ldrh	r3, [r7, #10]
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4929      	ldr	r1, [pc, #164]	; (8007d98 <I2C_MasterRequestRead+0x198>)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa27 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e044      	b.n	8007d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d02:	2300      	movs	r3, #0
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f9af 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00d      	beq.n	8007d5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4e:	d103      	bne.n	8007d58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e017      	b.n	8007d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007d5c:	897b      	ldrh	r3, [r7, #10]
 8007d5e:	11db      	asrs	r3, r3, #7
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	f003 0306 	and.w	r3, r3, #6
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f063 030e 	orn	r3, r3, #14
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4907      	ldr	r1, [pc, #28]	; (8007d98 <I2C_MasterRequestRead+0x198>)
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f9e3 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	00010008 	.word	0x00010008
 8007d98:	00010002 	.word	0x00010002

08007d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	4608      	mov	r0, r1
 8007da6:	4611      	mov	r1, r2
 8007da8:	461a      	mov	r2, r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	817b      	strh	r3, [r7, #10]
 8007dae:	460b      	mov	r3, r1
 8007db0:	813b      	strh	r3, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f960 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dec:	d103      	bne.n	8007df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e05f      	b.n	8007eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dfa:	897b      	ldrh	r3, [r7, #10]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	492d      	ldr	r1, [pc, #180]	; (8007ec4 <I2C_RequestMemoryWrite+0x128>)
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f998 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e04c      	b.n	8007eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e38:	6a39      	ldr	r1, [r7, #32]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fa02 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00d      	beq.n	8007e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d107      	bne.n	8007e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e02b      	b.n	8007eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d105      	bne.n	8007e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e68:	893b      	ldrh	r3, [r7, #8]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	611a      	str	r2, [r3, #16]
 8007e72:	e021      	b.n	8007eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e74:	893b      	ldrh	r3, [r7, #8]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e84:	6a39      	ldr	r1, [r7, #32]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f9dc 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d107      	bne.n	8007eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e005      	b.n	8007eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eae:	893b      	ldrh	r3, [r7, #8]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	00010002 	.word	0x00010002

08007ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	817b      	strh	r3, [r7, #10]
 8007eda:	460b      	mov	r3, r1
 8007edc:	813b      	strh	r3, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f8c2 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f28:	d103      	bne.n	8007f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e0aa      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	6a3a      	ldr	r2, [r7, #32]
 8007f4a:	4952      	ldr	r1, [pc, #328]	; (8008094 <I2C_RequestMemoryRead+0x1cc>)
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f8fa 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e097      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f74:	6a39      	ldr	r1, [r7, #32]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 f964 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d107      	bne.n	8007f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e076      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d105      	bne.n	8007fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	611a      	str	r2, [r3, #16]
 8007fae:	e021      	b.n	8007ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fb0:	893b      	ldrh	r3, [r7, #8]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc0:	6a39      	ldr	r1, [r7, #32]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f93e 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d107      	bne.n	8007fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e050      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fea:	893b      	ldrh	r3, [r7, #8]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff6:	6a39      	ldr	r1, [r7, #32]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f923 	bl	8008244 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008008:	2b04      	cmp	r3, #4
 800800a:	d107      	bne.n	800801c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e035      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800802e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2200      	movs	r2, #0
 8008038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f82b 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00d      	beq.n	8008064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008056:	d103      	bne.n	8008060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800805e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e013      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008064:	897b      	ldrh	r3, [r7, #10]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	4906      	ldr	r1, [pc, #24]	; (8008094 <I2C_RequestMemoryRead+0x1cc>)
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f863 	bl	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	00010002 	.word	0x00010002

08008098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080a8:	e025      	b.n	80080f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d021      	beq.n	80080f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b2:	f7fd fe99 	bl	8005de8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d302      	bcc.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d116      	bne.n	80080f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f043 0220 	orr.w	r2, r3, #32
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e023      	b.n	800813e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	0c1b      	lsrs	r3, r3, #16
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10d      	bne.n	800811c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	43da      	mvns	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	e00c      	b.n	8008136 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	43da      	mvns	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d0b6      	beq.n	80080aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008154:	e051      	b.n	80081fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008164:	d123      	bne.n	80081ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008174:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800817e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f043 0204 	orr.w	r2, r3, #4
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e046      	b.n	800823c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b4:	d021      	beq.n	80081fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7fd fe17 	bl	8005de8 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d116      	bne.n	80081fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f043 0220 	orr.w	r2, r3, #32
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e020      	b.n	800823c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	0c1b      	lsrs	r3, r3, #16
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	d10c      	bne.n	800821e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	43da      	mvns	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4013      	ands	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	bf14      	ite	ne
 8008216:	2301      	movne	r3, #1
 8008218:	2300      	moveq	r3, #0
 800821a:	b2db      	uxtb	r3, r3
 800821c:	e00b      	b.n	8008236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	43da      	mvns	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4013      	ands	r3, r2
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d18d      	bne.n	8008156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008250:	e02d      	b.n	80082ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f8ce 	bl	80083f4 <I2C_IsAcknowledgeFailed>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e02d      	b.n	80082be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d021      	beq.n	80082ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fd fdbd 	bl	8005de8 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d116      	bne.n	80082ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e007      	b.n	80082be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b8:	2b80      	cmp	r3, #128	; 0x80
 80082ba:	d1ca      	bne.n	8008252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082d2:	e02d      	b.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f88d 	bl	80083f4 <I2C_IsAcknowledgeFailed>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e02d      	b.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d021      	beq.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ec:	f7fd fd7c 	bl	8005de8 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d302      	bcc.n	8008302 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d116      	bne.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	f043 0220 	orr.w	r2, r3, #32
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e007      	b.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d1ca      	bne.n	80082d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008354:	e042      	b.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b10      	cmp	r3, #16
 8008362:	d119      	bne.n	8008398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0210 	mvn.w	r2, #16
 800836c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e029      	b.n	80083ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008398:	f7fd fd26 	bl	8005de8 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d302      	bcc.n	80083ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d116      	bne.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e007      	b.n	80083ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d1b5      	bne.n	8008356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840a:	d11b      	bne.n	8008444 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008414:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	f043 0204 	orr.w	r2, r3, #4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr

08008450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e26c      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8087 	beq.w	800857e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008470:	4b92      	ldr	r3, [pc, #584]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f003 030c 	and.w	r3, r3, #12
 8008478:	2b04      	cmp	r3, #4
 800847a:	d00c      	beq.n	8008496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800847c:	4b8f      	ldr	r3, [pc, #572]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f003 030c 	and.w	r3, r3, #12
 8008484:	2b08      	cmp	r3, #8
 8008486:	d112      	bne.n	80084ae <HAL_RCC_OscConfig+0x5e>
 8008488:	4b8c      	ldr	r3, [pc, #560]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008494:	d10b      	bne.n	80084ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008496:	4b89      	ldr	r3, [pc, #548]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d06c      	beq.n	800857c <HAL_RCC_OscConfig+0x12c>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d168      	bne.n	800857c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e246      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b6:	d106      	bne.n	80084c6 <HAL_RCC_OscConfig+0x76>
 80084b8:	4b80      	ldr	r3, [pc, #512]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a7f      	ldr	r2, [pc, #508]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e02e      	b.n	8008524 <HAL_RCC_OscConfig+0xd4>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCC_OscConfig+0x98>
 80084ce:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a7a      	ldr	r2, [pc, #488]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b78      	ldr	r3, [pc, #480]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a77      	ldr	r2, [pc, #476]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	e01d      	b.n	8008524 <HAL_RCC_OscConfig+0xd4>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084f0:	d10c      	bne.n	800850c <HAL_RCC_OscConfig+0xbc>
 80084f2:	4b72      	ldr	r3, [pc, #456]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a71      	ldr	r2, [pc, #452]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80084f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	4b6f      	ldr	r3, [pc, #444]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a6e      	ldr	r2, [pc, #440]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e00b      	b.n	8008524 <HAL_RCC_OscConfig+0xd4>
 800850c:	4b6b      	ldr	r3, [pc, #428]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a6a      	ldr	r2, [pc, #424]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	4b68      	ldr	r3, [pc, #416]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a67      	ldr	r2, [pc, #412]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800851e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d013      	beq.n	8008554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800852c:	f7fd fc5c 	bl	8005de8 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008534:	f7fd fc58 	bl	8005de8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b64      	cmp	r3, #100	; 0x64
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e1fa      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008546:	4b5d      	ldr	r3, [pc, #372]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0xe4>
 8008552:	e014      	b.n	800857e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008554:	f7fd fc48 	bl	8005de8 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800855c:	f7fd fc44 	bl	8005de8 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b64      	cmp	r3, #100	; 0x64
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e1e6      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800856e:	4b53      	ldr	r3, [pc, #332]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0x10c>
 800857a:	e000      	b.n	800857e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800857c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d063      	beq.n	8008652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800858a:	4b4c      	ldr	r3, [pc, #304]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f003 030c 	and.w	r3, r3, #12
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008596:	4b49      	ldr	r3, [pc, #292]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f003 030c 	and.w	r3, r3, #12
 800859e:	2b08      	cmp	r3, #8
 80085a0:	d11c      	bne.n	80085dc <HAL_RCC_OscConfig+0x18c>
 80085a2:	4b46      	ldr	r3, [pc, #280]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d116      	bne.n	80085dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ae:	4b43      	ldr	r3, [pc, #268]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_RCC_OscConfig+0x176>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d001      	beq.n	80085c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e1ba      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c6:	4b3d      	ldr	r3, [pc, #244]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4939      	ldr	r1, [pc, #228]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085da:	e03a      	b.n	8008652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d020      	beq.n	8008626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085e4:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <HAL_RCC_OscConfig+0x270>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ea:	f7fd fbfd 	bl	8005de8 <HAL_GetTick>
 80085ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085f0:	e008      	b.n	8008604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085f2:	f7fd fbf9 	bl	8005de8 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e19b      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008604:	4b2d      	ldr	r3, [pc, #180]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0f0      	beq.n	80085f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008610:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	4927      	ldr	r1, [pc, #156]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008620:	4313      	orrs	r3, r2
 8008622:	600b      	str	r3, [r1, #0]
 8008624:	e015      	b.n	8008652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008626:	4b26      	ldr	r3, [pc, #152]	; (80086c0 <HAL_RCC_OscConfig+0x270>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800862c:	f7fd fbdc 	bl	8005de8 <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008634:	f7fd fbd8 	bl	8005de8 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e17a      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008646:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f0      	bne.n	8008634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d03a      	beq.n	80086d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d019      	beq.n	800869a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008666:	4b17      	ldr	r3, [pc, #92]	; (80086c4 <HAL_RCC_OscConfig+0x274>)
 8008668:	2201      	movs	r2, #1
 800866a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800866c:	f7fd fbbc 	bl	8005de8 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008674:	f7fd fbb8 	bl	8005de8 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e15a      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <HAL_RCC_OscConfig+0x26c>)
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f0      	beq.n	8008674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008692:	2001      	movs	r0, #1
 8008694:	f000 fad8 	bl	8008c48 <RCC_Delay>
 8008698:	e01c      	b.n	80086d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <HAL_RCC_OscConfig+0x274>)
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086a0:	f7fd fba2 	bl	8005de8 <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a6:	e00f      	b.n	80086c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086a8:	f7fd fb9e 	bl	8005de8 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d908      	bls.n	80086c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e140      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
 80086ba:	bf00      	nop
 80086bc:	40021000 	.word	0x40021000
 80086c0:	42420000 	.word	0x42420000
 80086c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086c8:	4b9e      	ldr	r3, [pc, #632]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e9      	bne.n	80086a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a6 	beq.w	800882e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086e6:	4b97      	ldr	r3, [pc, #604]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10d      	bne.n	800870e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086f2:	4b94      	ldr	r3, [pc, #592]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4a93      	ldr	r2, [pc, #588]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80086f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fc:	61d3      	str	r3, [r2, #28]
 80086fe:	4b91      	ldr	r3, [pc, #580]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008706:	60bb      	str	r3, [r7, #8]
 8008708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800870e:	4b8e      	ldr	r3, [pc, #568]	; (8008948 <HAL_RCC_OscConfig+0x4f8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d118      	bne.n	800874c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800871a:	4b8b      	ldr	r3, [pc, #556]	; (8008948 <HAL_RCC_OscConfig+0x4f8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a8a      	ldr	r2, [pc, #552]	; (8008948 <HAL_RCC_OscConfig+0x4f8>)
 8008720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008726:	f7fd fb5f 	bl	8005de8 <HAL_GetTick>
 800872a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800872c:	e008      	b.n	8008740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872e:	f7fd fb5b 	bl	8005de8 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b64      	cmp	r3, #100	; 0x64
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e0fd      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008740:	4b81      	ldr	r3, [pc, #516]	; (8008948 <HAL_RCC_OscConfig+0x4f8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0f0      	beq.n	800872e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d106      	bne.n	8008762 <HAL_RCC_OscConfig+0x312>
 8008754:	4b7b      	ldr	r3, [pc, #492]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	4a7a      	ldr	r2, [pc, #488]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	6213      	str	r3, [r2, #32]
 8008760:	e02d      	b.n	80087be <HAL_RCC_OscConfig+0x36e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <HAL_RCC_OscConfig+0x334>
 800876a:	4b76      	ldr	r3, [pc, #472]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	4a75      	ldr	r2, [pc, #468]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008770:	f023 0301 	bic.w	r3, r3, #1
 8008774:	6213      	str	r3, [r2, #32]
 8008776:	4b73      	ldr	r3, [pc, #460]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	4a72      	ldr	r2, [pc, #456]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800877c:	f023 0304 	bic.w	r3, r3, #4
 8008780:	6213      	str	r3, [r2, #32]
 8008782:	e01c      	b.n	80087be <HAL_RCC_OscConfig+0x36e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b05      	cmp	r3, #5
 800878a:	d10c      	bne.n	80087a6 <HAL_RCC_OscConfig+0x356>
 800878c:	4b6d      	ldr	r3, [pc, #436]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	4a6c      	ldr	r2, [pc, #432]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008792:	f043 0304 	orr.w	r3, r3, #4
 8008796:	6213      	str	r3, [r2, #32]
 8008798:	4b6a      	ldr	r3, [pc, #424]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	4a69      	ldr	r2, [pc, #420]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800879e:	f043 0301 	orr.w	r3, r3, #1
 80087a2:	6213      	str	r3, [r2, #32]
 80087a4:	e00b      	b.n	80087be <HAL_RCC_OscConfig+0x36e>
 80087a6:	4b67      	ldr	r3, [pc, #412]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	4a66      	ldr	r2, [pc, #408]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	6213      	str	r3, [r2, #32]
 80087b2:	4b64      	ldr	r3, [pc, #400]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	4a63      	ldr	r2, [pc, #396]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80087b8:	f023 0304 	bic.w	r3, r3, #4
 80087bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d015      	beq.n	80087f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087c6:	f7fd fb0f 	bl	8005de8 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fd fb0b 	bl	8005de8 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e0ab      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e4:	4b57      	ldr	r3, [pc, #348]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0ee      	beq.n	80087ce <HAL_RCC_OscConfig+0x37e>
 80087f0:	e014      	b.n	800881c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087f2:	f7fd faf9 	bl	8005de8 <HAL_GetTick>
 80087f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087f8:	e00a      	b.n	8008810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087fa:	f7fd faf5 	bl	8005de8 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	f241 3288 	movw	r2, #5000	; 0x1388
 8008808:	4293      	cmp	r3, r2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e095      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008810:	4b4c      	ldr	r3, [pc, #304]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1ee      	bne.n	80087fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d105      	bne.n	800882e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008822:	4b48      	ldr	r3, [pc, #288]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	4a47      	ldr	r2, [pc, #284]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800882c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8081 	beq.w	800893a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008838:	4b42      	ldr	r3, [pc, #264]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b08      	cmp	r3, #8
 8008842:	d061      	beq.n	8008908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d146      	bne.n	80088da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800884c:	4b3f      	ldr	r3, [pc, #252]	; (800894c <HAL_RCC_OscConfig+0x4fc>)
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008852:	f7fd fac9 	bl	8005de8 <HAL_GetTick>
 8008856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800885a:	f7fd fac5 	bl	8005de8 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e067      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800886c:	4b35      	ldr	r3, [pc, #212]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008880:	d108      	bne.n	8008894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008882:	4b30      	ldr	r3, [pc, #192]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	492d      	ldr	r1, [pc, #180]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008890:	4313      	orrs	r3, r2
 8008892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008894:	4b2b      	ldr	r3, [pc, #172]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a19      	ldr	r1, [r3, #32]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	430b      	orrs	r3, r1
 80088a6:	4927      	ldr	r1, [pc, #156]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088ac:	4b27      	ldr	r3, [pc, #156]	; (800894c <HAL_RCC_OscConfig+0x4fc>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b2:	f7fd fa99 	bl	8005de8 <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ba:	f7fd fa95 	bl	8005de8 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e037      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088cc:	4b1d      	ldr	r3, [pc, #116]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x46a>
 80088d8:	e02f      	b.n	800893a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088da:	4b1c      	ldr	r3, [pc, #112]	; (800894c <HAL_RCC_OscConfig+0x4fc>)
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e0:	f7fd fa82 	bl	8005de8 <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e8:	f7fd fa7e 	bl	8005de8 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e020      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x498>
 8008906:	e018      	b.n	800893a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e013      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <HAL_RCC_OscConfig+0x4f4>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	429a      	cmp	r2, r3
 8008926:	d106      	bne.n	8008936 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008932:	429a      	cmp	r2, r3
 8008934:	d001      	beq.n	800893a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	40021000 	.word	0x40021000
 8008948:	40007000 	.word	0x40007000
 800894c:	42420060 	.word	0x42420060

08008950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0d0      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008964:	4b6a      	ldr	r3, [pc, #424]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	429a      	cmp	r2, r3
 8008970:	d910      	bls.n	8008994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008972:	4b67      	ldr	r3, [pc, #412]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f023 0207 	bic.w	r2, r3, #7
 800897a:	4965      	ldr	r1, [pc, #404]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	4313      	orrs	r3, r2
 8008980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008982:	4b63      	ldr	r3, [pc, #396]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d001      	beq.n	8008994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0b8      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d020      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089ac:	4b59      	ldr	r3, [pc, #356]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	4a58      	ldr	r2, [pc, #352]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80089b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089c4:	4b53      	ldr	r3, [pc, #332]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	4a52      	ldr	r2, [pc, #328]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80089ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089d0:	4b50      	ldr	r3, [pc, #320]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	494d      	ldr	r1, [pc, #308]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d040      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d107      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089f6:	4b47      	ldr	r3, [pc, #284]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d115      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e07f      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d107      	bne.n	8008a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0e:	4b41      	ldr	r3, [pc, #260]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e073      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a1e:	4b3d      	ldr	r3, [pc, #244]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e06b      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a2e:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f023 0203 	bic.w	r2, r3, #3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	4936      	ldr	r1, [pc, #216]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a40:	f7fd f9d2 	bl	8005de8 <HAL_GetTick>
 8008a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a46:	e00a      	b.n	8008a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a48:	f7fd f9ce 	bl	8005de8 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e053      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	4b2d      	ldr	r3, [pc, #180]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f003 020c 	and.w	r2, r3, #12
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d1eb      	bne.n	8008a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a70:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d210      	bcs.n	8008aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7e:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 0207 	bic.w	r2, r3, #7
 8008a86:	4922      	ldr	r1, [pc, #136]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <HAL_RCC_ClockConfig+0x1c0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d001      	beq.n	8008aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e032      	b.n	8008b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d008      	beq.n	8008abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008aac:	4b19      	ldr	r3, [pc, #100]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	4916      	ldr	r1, [pc, #88]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008aca:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	490e      	ldr	r1, [pc, #56]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ade:	f000 f821 	bl	8008b24 <HAL_RCC_GetSysClockFreq>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <HAL_RCC_ClockConfig+0x1c4>)
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	091b      	lsrs	r3, r3, #4
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	490a      	ldr	r1, [pc, #40]	; (8008b18 <HAL_RCC_ClockConfig+0x1c8>)
 8008af0:	5ccb      	ldrb	r3, [r1, r3]
 8008af2:	fa22 f303 	lsr.w	r3, r2, r3
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <HAL_RCC_ClockConfig+0x1cc>)
 8008af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <HAL_RCC_ClockConfig+0x1d0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fd f930 	bl	8005d64 <HAL_InitTick>

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40022000 	.word	0x40022000
 8008b14:	40021000 	.word	0x40021000
 8008b18:	08013d8c 	.word	0x08013d8c
 8008b1c:	20000004 	.word	0x20000004
 8008b20:	20000008 	.word	0x20000008

08008b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b24:	b490      	push	{r4, r7}
 8008b26:	b08a      	sub	sp, #40	; 0x28
 8008b28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008b2a:	4b2a      	ldr	r3, [pc, #168]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008b2c:	1d3c      	adds	r4, r7, #4
 8008b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008b34:	f240 2301 	movw	r3, #513	; 0x201
 8008b38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	2300      	movs	r3, #0
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 030c 	and.w	r3, r3, #12
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d002      	beq.n	8008b64 <HAL_RCC_GetSysClockFreq+0x40>
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d003      	beq.n	8008b6a <HAL_RCC_GetSysClockFreq+0x46>
 8008b62:	e02d      	b.n	8008bc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b64:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b66:	623b      	str	r3, [r7, #32]
      break;
 8008b68:	e02d      	b.n	8008bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	0c9b      	lsrs	r3, r3, #18
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b76:	4413      	add	r3, r2
 8008b78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008b7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d013      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b88:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	0c5b      	lsrs	r3, r3, #17
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b96:	4413      	add	r3, r2
 8008b98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008b9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	4a0e      	ldr	r2, [pc, #56]	; (8008bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ba2:	fb02 f203 	mul.w	r2, r2, r3
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
 8008bae:	e004      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	4a0b      	ldr	r2, [pc, #44]	; (8008be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bb4:	fb02 f303 	mul.w	r3, r2, r3
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	623b      	str	r3, [r7, #32]
      break;
 8008bbe:	e002      	b.n	8008bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bc2:	623b      	str	r3, [r7, #32]
      break;
 8008bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3728      	adds	r7, #40	; 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc90      	pop	{r4, r7}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	08013d7c 	.word	0x08013d7c
 8008bd8:	40021000 	.word	0x40021000
 8008bdc:	007a1200 	.word	0x007a1200
 8008be0:	003d0900 	.word	0x003d0900

08008be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8008bea:	681b      	ldr	r3, [r3, #0]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr
 8008bf4:	20000004 	.word	0x20000004

08008bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008bfc:	f7ff fff2 	bl	8008be4 <HAL_RCC_GetHCLKFreq>
 8008c00:	4602      	mov	r2, r0
 8008c02:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	4903      	ldr	r1, [pc, #12]	; (8008c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c0e:	5ccb      	ldrb	r3, [r1, r3]
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40021000 	.word	0x40021000
 8008c1c:	08013d9c 	.word	0x08013d9c

08008c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c24:	f7ff ffde 	bl	8008be4 <HAL_RCC_GetHCLKFreq>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	0adb      	lsrs	r3, r3, #11
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	4903      	ldr	r1, [pc, #12]	; (8008c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c36:	5ccb      	ldrb	r3, [r1, r3]
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	40021000 	.word	0x40021000
 8008c44:	08013d9c 	.word	0x08013d9c

08008c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <RCC_Delay+0x34>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <RCC_Delay+0x38>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	0a5b      	lsrs	r3, r3, #9
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008c64:	bf00      	nop
  }
  while (Delay --);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	60fa      	str	r2, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1f9      	bne.n	8008c64 <RCC_Delay+0x1c>
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	20000004 	.word	0x20000004
 8008c80:	10624dd3 	.word	0x10624dd3

08008c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e041      	b.n	8008d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fc fca4 	bl	80055f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f000 fe98 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d001      	beq.n	8008d3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e032      	b.n	8008da2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a18      	ldr	r2, [pc, #96]	; (8008dac <HAL_TIM_Base_Start+0x88>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00e      	beq.n	8008d6c <HAL_TIM_Base_Start+0x48>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d56:	d009      	beq.n	8008d6c <HAL_TIM_Base_Start+0x48>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a14      	ldr	r2, [pc, #80]	; (8008db0 <HAL_TIM_Base_Start+0x8c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d004      	beq.n	8008d6c <HAL_TIM_Base_Start+0x48>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <HAL_TIM_Base_Start+0x90>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d111      	bne.n	8008d90 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b06      	cmp	r3, #6
 8008d7c:	d010      	beq.n	8008da0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0201 	orr.w	r2, r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8e:	e007      	b.n	8008da0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr
 8008dac:	40012c00 	.word	0x40012c00
 8008db0:	40000400 	.word	0x40000400
 8008db4:	40000800 	.word	0x40000800

08008db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d001      	beq.n	8008dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e03a      	b.n	8008e46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a18      	ldr	r2, [pc, #96]	; (8008e50 <HAL_TIM_Base_Start_IT+0x98>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00e      	beq.n	8008e10 <HAL_TIM_Base_Start_IT+0x58>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d009      	beq.n	8008e10 <HAL_TIM_Base_Start_IT+0x58>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a14      	ldr	r2, [pc, #80]	; (8008e54 <HAL_TIM_Base_Start_IT+0x9c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d004      	beq.n	8008e10 <HAL_TIM_Base_Start_IT+0x58>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <HAL_TIM_Base_Start_IT+0xa0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d111      	bne.n	8008e34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	d010      	beq.n	8008e44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e32:	e007      	b.n	8008e44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr
 8008e50:	40012c00 	.word	0x40012c00
 8008e54:	40000400 	.word	0x40000400
 8008e58:	40000800 	.word	0x40000800

08008e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e041      	b.n	8008ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fc fb9a 	bl	80055bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f000 fdac 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_TIM_PWM_Start+0x24>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	bf14      	ite	ne
 8008f18:	2301      	movne	r3, #1
 8008f1a:	2300      	moveq	r3, #0
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	e022      	b.n	8008f66 <HAL_TIM_PWM_Start+0x6a>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d109      	bne.n	8008f3a <HAL_TIM_PWM_Start+0x3e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	bf14      	ite	ne
 8008f32:	2301      	movne	r3, #1
 8008f34:	2300      	moveq	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	e015      	b.n	8008f66 <HAL_TIM_PWM_Start+0x6a>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d109      	bne.n	8008f54 <HAL_TIM_PWM_Start+0x58>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	bf14      	ite	ne
 8008f4c:	2301      	movne	r3, #1
 8008f4e:	2300      	moveq	r3, #0
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	e008      	b.n	8008f66 <HAL_TIM_PWM_Start+0x6a>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	bf14      	ite	ne
 8008f60:	2301      	movne	r3, #1
 8008f62:	2300      	moveq	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e05e      	b.n	800902c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <HAL_TIM_PWM_Start+0x82>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f7c:	e013      	b.n	8008fa6 <HAL_TIM_PWM_Start+0xaa>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_PWM_Start+0x92>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f8c:	e00b      	b.n	8008fa6 <HAL_TIM_PWM_Start+0xaa>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d104      	bne.n	8008f9e <HAL_TIM_PWM_Start+0xa2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f9c:	e003      	b.n	8008fa6 <HAL_TIM_PWM_Start+0xaa>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2201      	movs	r2, #1
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 f8af 	bl	800a112 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1e      	ldr	r2, [pc, #120]	; (8009034 <HAL_TIM_PWM_Start+0x138>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d107      	bne.n	8008fce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a18      	ldr	r2, [pc, #96]	; (8009034 <HAL_TIM_PWM_Start+0x138>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00e      	beq.n	8008ff6 <HAL_TIM_PWM_Start+0xfa>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d009      	beq.n	8008ff6 <HAL_TIM_PWM_Start+0xfa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <HAL_TIM_PWM_Start+0x13c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d004      	beq.n	8008ff6 <HAL_TIM_PWM_Start+0xfa>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a12      	ldr	r2, [pc, #72]	; (800903c <HAL_TIM_PWM_Start+0x140>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d111      	bne.n	800901a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b06      	cmp	r3, #6
 8009006:	d010      	beq.n	800902a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	e007      	b.n	800902a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800

08009040 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e041      	b.n	80090d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f839 	bl	80090de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f000 fcba 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bc80      	pop	{r7}
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <HAL_TIM_IC_Start_IT+0x1a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009106:	b2db      	uxtb	r3, r3
 8009108:	e013      	b.n	8009132 <HAL_TIM_IC_Start_IT+0x42>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b04      	cmp	r3, #4
 800910e:	d104      	bne.n	800911a <HAL_TIM_IC_Start_IT+0x2a>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009116:	b2db      	uxtb	r3, r3
 8009118:	e00b      	b.n	8009132 <HAL_TIM_IC_Start_IT+0x42>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d104      	bne.n	800912a <HAL_TIM_IC_Start_IT+0x3a>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009126:	b2db      	uxtb	r3, r3
 8009128:	e003      	b.n	8009132 <HAL_TIM_IC_Start_IT+0x42>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009130:	b2db      	uxtb	r3, r3
 8009132:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <HAL_TIM_IC_Start_IT+0x54>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e013      	b.n	800916c <HAL_TIM_IC_Start_IT+0x7c>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b04      	cmp	r3, #4
 8009148:	d104      	bne.n	8009154 <HAL_TIM_IC_Start_IT+0x64>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e00b      	b.n	800916c <HAL_TIM_IC_Start_IT+0x7c>
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b08      	cmp	r3, #8
 8009158:	d104      	bne.n	8009164 <HAL_TIM_IC_Start_IT+0x74>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e003      	b.n	800916c <HAL_TIM_IC_Start_IT+0x7c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800916a:	b2db      	uxtb	r3, r3
 800916c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d102      	bne.n	800917a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d001      	beq.n	800917e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e0b3      	b.n	80092e6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_TIM_IC_Start_IT+0x9e>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800918c:	e013      	b.n	80091b6 <HAL_TIM_IC_Start_IT+0xc6>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b04      	cmp	r3, #4
 8009192:	d104      	bne.n	800919e <HAL_TIM_IC_Start_IT+0xae>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800919c:	e00b      	b.n	80091b6 <HAL_TIM_IC_Start_IT+0xc6>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d104      	bne.n	80091ae <HAL_TIM_IC_Start_IT+0xbe>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ac:	e003      	b.n	80091b6 <HAL_TIM_IC_Start_IT+0xc6>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <HAL_TIM_IC_Start_IT+0xd6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091c4:	e013      	b.n	80091ee <HAL_TIM_IC_Start_IT+0xfe>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d104      	bne.n	80091d6 <HAL_TIM_IC_Start_IT+0xe6>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091d4:	e00b      	b.n	80091ee <HAL_TIM_IC_Start_IT+0xfe>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d104      	bne.n	80091e6 <HAL_TIM_IC_Start_IT+0xf6>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091e4:	e003      	b.n	80091ee <HAL_TIM_IC_Start_IT+0xfe>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b0c      	cmp	r3, #12
 80091f2:	d841      	bhi.n	8009278 <HAL_TIM_IC_Start_IT+0x188>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <HAL_TIM_IC_Start_IT+0x10c>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009231 	.word	0x08009231
 8009200:	08009279 	.word	0x08009279
 8009204:	08009279 	.word	0x08009279
 8009208:	08009279 	.word	0x08009279
 800920c:	08009243 	.word	0x08009243
 8009210:	08009279 	.word	0x08009279
 8009214:	08009279 	.word	0x08009279
 8009218:	08009279 	.word	0x08009279
 800921c:	08009255 	.word	0x08009255
 8009220:	08009279 	.word	0x08009279
 8009224:	08009279 	.word	0x08009279
 8009228:	08009279 	.word	0x08009279
 800922c:	08009267 	.word	0x08009267
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0202 	orr.w	r2, r2, #2
 800923e:	60da      	str	r2, [r3, #12]
      break;
 8009240:	e01b      	b.n	800927a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0204 	orr.w	r2, r2, #4
 8009250:	60da      	str	r2, [r3, #12]
      break;
 8009252:	e012      	b.n	800927a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68da      	ldr	r2, [r3, #12]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0208 	orr.w	r2, r2, #8
 8009262:	60da      	str	r2, [r3, #12]
      break;
 8009264:	e009      	b.n	800927a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f042 0210 	orr.w	r2, r2, #16
 8009274:	60da      	str	r2, [r3, #12]
      break;
 8009276:	e000      	b.n	800927a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009278:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2201      	movs	r2, #1
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 ff45 	bl	800a112 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <HAL_TIM_IC_Start_IT+0x200>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00e      	beq.n	80092b0 <HAL_TIM_IC_Start_IT+0x1c0>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d009      	beq.n	80092b0 <HAL_TIM_IC_Start_IT+0x1c0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <HAL_TIM_IC_Start_IT+0x204>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d004      	beq.n	80092b0 <HAL_TIM_IC_Start_IT+0x1c0>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a13      	ldr	r2, [pc, #76]	; (80092f8 <HAL_TIM_IC_Start_IT+0x208>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d111      	bne.n	80092d4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b06      	cmp	r3, #6
 80092c0:	d010      	beq.n	80092e4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d2:	e007      	b.n	80092e4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40000400 	.word	0x40000400
 80092f8:	40000800 	.word	0x40000800

080092fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d122      	bne.n	8009358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d11b      	bne.n	8009358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0202 	mvn.w	r2, #2
 8009328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fb ffc8 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fb3a 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fb40 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b04      	cmp	r3, #4
 8009364:	d122      	bne.n	80093ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b04      	cmp	r3, #4
 8009372:	d11b      	bne.n	80093ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0204 	mvn.w	r2, #4
 800937c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2202      	movs	r2, #2
 8009382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fb ff9e 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8009398:	e005      	b.n	80093a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fb10 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fb16 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d122      	bne.n	8009400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	d11b      	bne.n	8009400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f06f 0208 	mvn.w	r2, #8
 80093d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2204      	movs	r2, #4
 80093d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fb ff74 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 80093ec:	e005      	b.n	80093fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fae6 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 faec 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	f003 0310 	and.w	r3, r3, #16
 800940a:	2b10      	cmp	r3, #16
 800940c:	d122      	bne.n	8009454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b10      	cmp	r3, #16
 800941a:	d11b      	bne.n	8009454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0210 	mvn.w	r2, #16
 8009424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2208      	movs	r2, #8
 800942a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fb ff4a 	bl	80052d4 <HAL_TIM_IC_CaptureCallback>
 8009440:	e005      	b.n	800944e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fabc 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fac2 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b01      	cmp	r3, #1
 8009460:	d10e      	bne.n	8009480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	d107      	bne.n	8009480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f06f 0201 	mvn.w	r2, #1
 8009478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fb f8e4 	bl	8004648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d10e      	bne.n	80094ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009498:	2b80      	cmp	r3, #128	; 0x80
 800949a:	d107      	bne.n	80094ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 ffae 	bl	800a408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d10e      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d107      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa86 	bl	80099e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b20      	cmp	r3, #32
 80094e4:	d10e      	bne.n	8009504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d107      	bne.n	8009504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0220 	mvn.w	r2, #32
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 ff79 	bl	800a3f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009522:	2302      	movs	r3, #2
 8009524:	e082      	b.n	800962c <HAL_TIM_IC_ConfigChannel+0x120>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11b      	bne.n	800956c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6819      	ldr	r1, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f000 fc42 	bl	8009dcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 020c 	bic.w	r2, r2, #12
 8009556:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6999      	ldr	r1, [r3, #24]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	689a      	ldr	r2, [r3, #8]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	619a      	str	r2, [r3, #24]
 800956a:	e05a      	b.n	8009622 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b04      	cmp	r3, #4
 8009570:	d11c      	bne.n	80095ac <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	6819      	ldr	r1, [r3, #0]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f000 fcab 	bl	8009edc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009594:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6999      	ldr	r1, [r3, #24]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	021a      	lsls	r2, r3, #8
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	619a      	str	r2, [r3, #24]
 80095aa:	e03a      	b.n	8009622 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b08      	cmp	r3, #8
 80095b0:	d11b      	bne.n	80095ea <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6819      	ldr	r1, [r3, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f000 fcf6 	bl	8009fb2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 020c 	bic.w	r2, r2, #12
 80095d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69d9      	ldr	r1, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	61da      	str	r2, [r3, #28]
 80095e8:	e01b      	b.n	8009622 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6819      	ldr	r1, [r3, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f000 fd15 	bl	800a028 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800960c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69d9      	ldr	r1, [r3, #28]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	021a      	lsls	r2, r3, #8
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800964a:	2302      	movs	r3, #2
 800964c:	e0ac      	b.n	80097a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b0c      	cmp	r3, #12
 800965a:	f200 809f 	bhi.w	800979c <HAL_TIM_PWM_ConfigChannel+0x168>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009699 	.word	0x08009699
 8009668:	0800979d 	.word	0x0800979d
 800966c:	0800979d 	.word	0x0800979d
 8009670:	0800979d 	.word	0x0800979d
 8009674:	080096d9 	.word	0x080096d9
 8009678:	0800979d 	.word	0x0800979d
 800967c:	0800979d 	.word	0x0800979d
 8009680:	0800979d 	.word	0x0800979d
 8009684:	0800971b 	.word	0x0800971b
 8009688:	0800979d 	.word	0x0800979d
 800968c:	0800979d 	.word	0x0800979d
 8009690:	0800979d 	.word	0x0800979d
 8009694:	0800975b 	.word	0x0800975b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fa0c 	bl	8009abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0208 	orr.w	r2, r2, #8
 80096b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0204 	bic.w	r2, r2, #4
 80096c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6999      	ldr	r1, [r3, #24]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	691a      	ldr	r2, [r3, #16]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	619a      	str	r2, [r3, #24]
      break;
 80096d6:	e062      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fa52 	bl	8009b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6999      	ldr	r1, [r3, #24]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	021a      	lsls	r2, r3, #8
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	619a      	str	r2, [r3, #24]
      break;
 8009718:	e041      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fa9b 	bl	8009c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0208 	orr.w	r2, r2, #8
 8009734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69da      	ldr	r2, [r3, #28]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0204 	bic.w	r2, r2, #4
 8009744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69d9      	ldr	r1, [r3, #28]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	61da      	str	r2, [r3, #28]
      break;
 8009758:	e021      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fae5 	bl	8009d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69d9      	ldr	r1, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	021a      	lsls	r2, r3, #8
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	61da      	str	r2, [r3, #28]
      break;
 800979a:	e000      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800979c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_TIM_ConfigClockSource+0x18>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e0b3      	b.n	8009930 <HAL_TIM_ConfigClockSource+0x180>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009800:	d03e      	beq.n	8009880 <HAL_TIM_ConfigClockSource+0xd0>
 8009802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009806:	f200 8087 	bhi.w	8009918 <HAL_TIM_ConfigClockSource+0x168>
 800980a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980e:	f000 8085 	beq.w	800991c <HAL_TIM_ConfigClockSource+0x16c>
 8009812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009816:	d87f      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009818:	2b70      	cmp	r3, #112	; 0x70
 800981a:	d01a      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0xa2>
 800981c:	2b70      	cmp	r3, #112	; 0x70
 800981e:	d87b      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009820:	2b60      	cmp	r3, #96	; 0x60
 8009822:	d050      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x116>
 8009824:	2b60      	cmp	r3, #96	; 0x60
 8009826:	d877      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009828:	2b50      	cmp	r3, #80	; 0x50
 800982a:	d03c      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0xf6>
 800982c:	2b50      	cmp	r3, #80	; 0x50
 800982e:	d873      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	d058      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x136>
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	d86f      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d064      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x156>
 800983c:	2b30      	cmp	r3, #48	; 0x30
 800983e:	d86b      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009840:	2b20      	cmp	r3, #32
 8009842:	d060      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x156>
 8009844:	2b20      	cmp	r3, #32
 8009846:	d867      	bhi.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d05c      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x156>
 800984c:	2b10      	cmp	r3, #16
 800984e:	d05a      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009850:	e062      	b.n	8009918 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6899      	ldr	r1, [r3, #8]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f000 fc37 	bl	800a0d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009874:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	609a      	str	r2, [r3, #8]
      break;
 800987e:	e04e      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6899      	ldr	r1, [r3, #8]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f000 fc20 	bl	800a0d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098a2:	609a      	str	r2, [r3, #8]
      break;
 80098a4:	e03b      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6859      	ldr	r1, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f000 fae4 	bl	8009e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2150      	movs	r1, #80	; 0x50
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fbee 	bl	800a0a0 <TIM_ITRx_SetConfig>
      break;
 80098c4:	e02b      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6859      	ldr	r1, [r3, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	461a      	mov	r2, r3
 80098d4:	f000 fb3e 	bl	8009f54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2160      	movs	r1, #96	; 0x60
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fbde 	bl	800a0a0 <TIM_ITRx_SetConfig>
      break;
 80098e4:	e01b      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6859      	ldr	r1, [r3, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	461a      	mov	r2, r3
 80098f4:	f000 fac4 	bl	8009e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2140      	movs	r1, #64	; 0x40
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fbce 	bl	800a0a0 <TIM_ITRx_SetConfig>
      break;
 8009904:	e00b      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f000 fbc5 	bl	800a0a0 <TIM_ITRx_SetConfig>
        break;
 8009916:	e002      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009918:	bf00      	nop
 800991a:	e000      	b.n	800991e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800991c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b0c      	cmp	r3, #12
 800994a:	d831      	bhi.n	80099b0 <HAL_TIM_ReadCapturedValue+0x78>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <HAL_TIM_ReadCapturedValue+0x1c>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009989 	.word	0x08009989
 8009958:	080099b1 	.word	0x080099b1
 800995c:	080099b1 	.word	0x080099b1
 8009960:	080099b1 	.word	0x080099b1
 8009964:	08009993 	.word	0x08009993
 8009968:	080099b1 	.word	0x080099b1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099b1 	.word	0x080099b1
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099b1 	.word	0x080099b1
 800997c:	080099b1 	.word	0x080099b1
 8009980:	080099b1 	.word	0x080099b1
 8009984:	080099a7 	.word	0x080099a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	60fb      	str	r3, [r7, #12]

      break;
 8009990:	e00f      	b.n	80099b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	60fb      	str	r3, [r7, #12]

      break;
 800999a:	e00a      	b.n	80099b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a2:	60fb      	str	r3, [r7, #12]

      break;
 80099a4:	e005      	b.n	80099b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ac:	60fb      	str	r3, [r7, #12]

      break;
 80099ae:	e000      	b.n	80099b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80099b0:	bf00      	nop
  }

  return tmpreg;
 80099b2:	68fb      	ldr	r3, [r7, #12]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bc80      	pop	{r7}
 80099d0:	4770      	bx	lr

080099d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr

080099e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
	...

080099f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a29      	ldr	r2, [pc, #164]	; (8009ab0 <TIM_Base_SetConfig+0xb8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00b      	beq.n	8009a28 <TIM_Base_SetConfig+0x30>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a16:	d007      	beq.n	8009a28 <TIM_Base_SetConfig+0x30>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a26      	ldr	r2, [pc, #152]	; (8009ab4 <TIM_Base_SetConfig+0xbc>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d003      	beq.n	8009a28 <TIM_Base_SetConfig+0x30>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a25      	ldr	r2, [pc, #148]	; (8009ab8 <TIM_Base_SetConfig+0xc0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d108      	bne.n	8009a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1c      	ldr	r2, [pc, #112]	; (8009ab0 <TIM_Base_SetConfig+0xb8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00b      	beq.n	8009a5a <TIM_Base_SetConfig+0x62>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a48:	d007      	beq.n	8009a5a <TIM_Base_SetConfig+0x62>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a19      	ldr	r2, [pc, #100]	; (8009ab4 <TIM_Base_SetConfig+0xbc>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d003      	beq.n	8009a5a <TIM_Base_SetConfig+0x62>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <TIM_Base_SetConfig+0xc0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d108      	bne.n	8009a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a07      	ldr	r2, [pc, #28]	; (8009ab0 <TIM_Base_SetConfig+0xb8>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d103      	bne.n	8009aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	615a      	str	r2, [r3, #20]
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr
 8009ab0:	40012c00 	.word	0x40012c00
 8009ab4:	40000400 	.word	0x40000400
 8009ab8:	40000800 	.word	0x40000800

08009abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f023 0201 	bic.w	r2, r3, #1
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0302 	bic.w	r3, r3, #2
 8009b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <TIM_OC1_SetConfig+0xc8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d10c      	bne.n	8009b32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f023 0308 	bic.w	r3, r3, #8
 8009b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f023 0304 	bic.w	r3, r3, #4
 8009b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a13      	ldr	r2, [pc, #76]	; (8009b84 <TIM_OC1_SetConfig+0xc8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d111      	bne.n	8009b5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	621a      	str	r2, [r3, #32]
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00

08009b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	f023 0210 	bic.w	r2, r3, #16
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	021b      	lsls	r3, r3, #8
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f023 0320 	bic.w	r3, r3, #32
 8009bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a1d      	ldr	r2, [pc, #116]	; (8009c58 <TIM_OC2_SetConfig+0xd0>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d10d      	bne.n	8009c04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a14      	ldr	r2, [pc, #80]	; (8009c58 <TIM_OC2_SetConfig+0xd0>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d113      	bne.n	8009c34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	621a      	str	r2, [r3, #32]
}
 8009c4e:	bf00      	nop
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc80      	pop	{r7}
 8009c56:	4770      	bx	lr
 8009c58:	40012c00 	.word	0x40012c00

08009c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a1d      	ldr	r2, [pc, #116]	; (8009d2c <TIM_OC3_SetConfig+0xd0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10d      	bne.n	8009cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	; (8009d2c <TIM_OC3_SetConfig+0xd0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d113      	bne.n	8009d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	621a      	str	r2, [r3, #32]
}
 8009d20:	bf00      	nop
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	40012c00 	.word	0x40012c00

08009d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	031b      	lsls	r3, r3, #12
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a0f      	ldr	r2, [pc, #60]	; (8009dc8 <TIM_OC4_SetConfig+0x98>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d109      	bne.n	8009da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	019b      	lsls	r3, r3, #6
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	621a      	str	r2, [r3, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr
 8009dc8:	40012c00 	.word	0x40012c00

08009dcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f023 0201 	bic.w	r2, r3, #1
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4a1f      	ldr	r2, [pc, #124]	; (8009e74 <TIM_TI1_SetConfig+0xa8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00b      	beq.n	8009e12 <TIM_TI1_SetConfig+0x46>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e00:	d007      	beq.n	8009e12 <TIM_TI1_SetConfig+0x46>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a1c      	ldr	r2, [pc, #112]	; (8009e78 <TIM_TI1_SetConfig+0xac>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d003      	beq.n	8009e12 <TIM_TI1_SetConfig+0x46>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a1b      	ldr	r2, [pc, #108]	; (8009e7c <TIM_TI1_SetConfig+0xb0>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d101      	bne.n	8009e16 <TIM_TI1_SetConfig+0x4a>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <TIM_TI1_SetConfig+0x4c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d008      	beq.n	8009e2e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e003      	b.n	8009e36 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f043 0301 	orr.w	r3, r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f023 030a 	bic.w	r3, r3, #10
 8009e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f003 030a 	and.w	r3, r3, #10
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bc80      	pop	{r7}
 8009e72:	4770      	bx	lr
 8009e74:	40012c00 	.word	0x40012c00
 8009e78:	40000400 	.word	0x40000400
 8009e7c:	40000800 	.word	0x40000800

08009e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f023 0201 	bic.w	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f023 030a 	bic.w	r3, r3, #10
 8009ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	621a      	str	r2, [r3, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	f023 0210 	bic.w	r2, r3, #16
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	031b      	lsls	r3, r3, #12
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr

08009f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f023 0210 	bic.w	r2, r3, #16
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	031b      	lsls	r3, r3, #12
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	621a      	str	r2, [r3, #32]
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b087      	sub	sp, #28
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a002:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	621a      	str	r2, [r3, #32]
}
 800a01e:	bf00      	nop
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr

0800a028 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a054:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a066:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	031b      	lsls	r3, r3, #12
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a07a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	031b      	lsls	r3, r3, #12
 800a080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	621a      	str	r2, [r3, #32]
}
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bc80      	pop	{r7}
 800a09e:	4770      	bx	lr

0800a0a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	f043 0307 	orr.w	r3, r3, #7
 800a0c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	609a      	str	r2, [r3, #8]
}
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bc80      	pop	{r7}
 800a0d2:	4770      	bx	lr

0800a0d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	021a      	lsls	r2, r3, #8
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	609a      	str	r2, [r3, #8]
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr

0800a112 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a112:	b480      	push	{r7}
 800a114:	b087      	sub	sp, #28
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	2201      	movs	r2, #1
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1a      	ldr	r2, [r3, #32]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	43db      	mvns	r3, r3
 800a134:	401a      	ands	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a1a      	ldr	r2, [r3, #32]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	fa01 f303 	lsl.w	r3, r1, r3
 800a14a:	431a      	orrs	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]
}
 800a150:	bf00      	nop
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
	...

0800a15c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <HAL_TIMEx_PWMN_Start+0x24>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b01      	cmp	r3, #1
 800a176:	bf14      	ite	ne
 800a178:	2301      	movne	r3, #1
 800a17a:	2300      	moveq	r3, #0
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	e022      	b.n	800a1c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b04      	cmp	r3, #4
 800a184:	d109      	bne.n	800a19a <HAL_TIMEx_PWMN_Start+0x3e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b01      	cmp	r3, #1
 800a190:	bf14      	ite	ne
 800a192:	2301      	movne	r3, #1
 800a194:	2300      	moveq	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	e015      	b.n	800a1c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d109      	bne.n	800a1b4 <HAL_TIMEx_PWMN_Start+0x58>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	bf14      	ite	ne
 800a1ac:	2301      	movne	r3, #1
 800a1ae:	2300      	moveq	r3, #0
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	e008      	b.n	800a1c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e059      	b.n	800a282 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <HAL_TIMEx_PWMN_Start+0x82>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1dc:	e013      	b.n	800a206 <HAL_TIMEx_PWMN_Start+0xaa>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d104      	bne.n	800a1ee <HAL_TIMEx_PWMN_Start+0x92>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1ec:	e00b      	b.n	800a206 <HAL_TIMEx_PWMN_Start+0xaa>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d104      	bne.n	800a1fe <HAL_TIMEx_PWMN_Start+0xa2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1fc:	e003      	b.n	800a206 <HAL_TIMEx_PWMN_Start+0xaa>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2202      	movs	r2, #2
 800a202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2204      	movs	r2, #4
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f903 	bl	800a41a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a18      	ldr	r2, [pc, #96]	; (800a28c <HAL_TIMEx_PWMN_Start+0x130>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00e      	beq.n	800a24c <HAL_TIMEx_PWMN_Start+0xf0>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a236:	d009      	beq.n	800a24c <HAL_TIMEx_PWMN_Start+0xf0>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a14      	ldr	r2, [pc, #80]	; (800a290 <HAL_TIMEx_PWMN_Start+0x134>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d004      	beq.n	800a24c <HAL_TIMEx_PWMN_Start+0xf0>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a13      	ldr	r2, [pc, #76]	; (800a294 <HAL_TIMEx_PWMN_Start+0x138>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d111      	bne.n	800a270 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b06      	cmp	r3, #6
 800a25c:	d010      	beq.n	800a280 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f042 0201 	orr.w	r2, r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26e:	e007      	b.n	800a280 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	40012c00 	.word	0x40012c00
 800a290:	40000400 	.word	0x40000400
 800a294:	40000800 	.word	0x40000800

0800a298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e046      	b.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a16      	ldr	r2, [pc, #88]	; (800a348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00e      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fc:	d009      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a12      	ldr	r2, [pc, #72]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d004      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a10      	ldr	r2, [pc, #64]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d10c      	bne.n	800a32c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4313      	orrs	r3, r2
 800a322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	bc80      	pop	{r7}
 800a346:	4770      	bx	lr
 800a348:	40012c00 	.word	0x40012c00
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800

0800a354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e03d      	b.n	800a3ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	4313      	orrs	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc80      	pop	{r7}
 800a3f4:	4770      	bx	lr

0800a3f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3fe:	bf00      	nop
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr

0800a41a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b087      	sub	sp, #28
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	f003 031f 	and.w	r3, r3, #31
 800a42c:	2204      	movs	r2, #4
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1a      	ldr	r2, [r3, #32]
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	43db      	mvns	r3, r3
 800a43c:	401a      	ands	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a1a      	ldr	r2, [r3, #32]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f003 031f 	and.w	r3, r3, #31
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	fa01 f303 	lsl.w	r3, r1, r3
 800a452:	431a      	orrs	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	621a      	str	r2, [r3, #32]
}
 800a458:	bf00      	nop
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr

0800a462 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e03f      	b.n	800a4f4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7fb f977 	bl	800577c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2224      	movs	r2, #36	; 0x24
 800a492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fd94 	bl	800afd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e01e      	b.n	800a54c <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2224      	movs	r2, #36	; 0x24
 800a512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a524:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7fb fa46 	bl	80059b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b20      	cmp	r3, #32
 800a572:	d17c      	bne.n	800a66e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <HAL_UART_Transmit+0x2c>
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e075      	b.n	800a670 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <HAL_UART_Transmit+0x3e>
 800a58e:	2302      	movs	r3, #2
 800a590:	e06e      	b.n	800a670 <HAL_UART_Transmit+0x11c>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2221      	movs	r2, #33	; 0x21
 800a5a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a5a8:	f7fb fc1e 	bl	8005de8 <HAL_GetTick>
 800a5ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	88fa      	ldrh	r2, [r7, #6]
 800a5b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	88fa      	ldrh	r2, [r7, #6]
 800a5b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c2:	d108      	bne.n	800a5d6 <HAL_UART_Transmit+0x82>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	61bb      	str	r3, [r7, #24]
 800a5d4:	e003      	b.n	800a5de <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a5e6:	e02a      	b.n	800a63e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2180      	movs	r1, #128	; 0x80
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fb1d 	bl	800ac32 <UART_WaitOnFlagUntilTimeout>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e036      	b.n	800a670 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	461a      	mov	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a616:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	3302      	adds	r3, #2
 800a61c:	61bb      	str	r3, [r7, #24]
 800a61e:	e007      	b.n	800a630 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	3301      	adds	r3, #1
 800a62e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1cf      	bne.n	800a5e8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2200      	movs	r2, #0
 800a650:	2140      	movs	r1, #64	; 0x40
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 faed 	bl	800ac32 <UART_WaitOnFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e006      	b.n	800a670 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2220      	movs	r2, #32
 800a666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e000      	b.n	800a670 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a66e:	2302      	movs	r3, #2
  }
}
 800a670:	4618      	mov	r0, r3
 800a672:	3720      	adds	r7, #32
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d166      	bne.n	800a760 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <HAL_UART_Receive_DMA+0x26>
 800a698:	88fb      	ldrh	r3, [r7, #6]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e05f      	b.n	800a762 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_UART_Receive_DMA+0x38>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e058      	b.n	800a762 <HAL_UART_Receive_DMA+0xea>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	88fa      	ldrh	r2, [r7, #6]
 800a6c2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2222      	movs	r2, #34	; 0x22
 800a6ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	4a25      	ldr	r2, [pc, #148]	; (800a76c <HAL_UART_Receive_DMA+0xf4>)
 800a6d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6de:	4a24      	ldr	r2, [pc, #144]	; (800a770 <HAL_UART_Receive_DMA+0xf8>)
 800a6e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	4a23      	ldr	r2, [pc, #140]	; (800a774 <HAL_UART_Receive_DMA+0xfc>)
 800a6e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3304      	adds	r3, #4
 800a702:	4619      	mov	r1, r3
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	f7fb fd91 	bl	8006230 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a73a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	695a      	ldr	r2, [r3, #20]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0201 	orr.w	r2, r2, #1
 800a74a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	695a      	ldr	r2, [r3, #20]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a75a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	e000      	b.n	800a762 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a760:	2302      	movs	r3, #2
  }
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	0800ab1b 	.word	0x0800ab1b
 800a770:	0800ab83 	.word	0x0800ab83
 800a774:	0800ab9f 	.word	0x0800ab9f

0800a778 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800a780:	2301      	movs	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800a792:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	695a      	ldr	r2, [r3, #20]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0201 	bic.w	r2, r2, #1
 800a7a2:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00f      	beq.n	800a7cc <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7be:	4a3e      	ldr	r2, [pc, #248]	; (800a8b8 <HAL_UART_Abort_IT+0x140>)
 800a7c0:	635a      	str	r2, [r3, #52]	; 0x34
 800a7c2:	e003      	b.n	800a7cc <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00f      	beq.n	800a7f4 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e6:	4a35      	ldr	r2, [pc, #212]	; (800a8bc <HAL_UART_Abort_IT+0x144>)
 800a7e8:	635a      	str	r2, [r3, #52]	; 0x34
 800a7ea:	e003      	b.n	800a7f4 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d01a      	beq.n	800a838 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	695a      	ldr	r2, [r3, #20]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a810:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00e      	beq.n	800a838 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb fd66 	bl	80062f0 <HAL_DMA_Abort_IT>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	2200      	movs	r2, #0
 800a830:	635a      	str	r2, [r3, #52]	; 0x34
 800a832:	e001      	b.n	800a838 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d01c      	beq.n	800a880 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a854:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d010      	beq.n	800a880 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a862:	4618      	mov	r0, r3
 800a864:	f7fb fd44 	bl	80062f0 <HAL_DMA_Abort_IT>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	2200      	movs	r2, #0
 800a874:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800a876:	2301      	movs	r3, #1
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e001      	b.n	800a880 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d113      	bne.n	800a8ae <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f92d 	bl	800ab08 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	0800ad53 	.word	0x0800ad53
 800a8bc:	0800adad 	.word	0x0800adad

0800a8c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	f003 030f 	and.w	r3, r3, #15
 800a8ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10d      	bne.n	800a912 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	f003 0320 	and.w	r3, r3, #32
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d008      	beq.n	800a912 <HAL_UART_IRQHandler+0x52>
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fae2 	bl	800aed4 <UART_Receive_IT>
      return;
 800a910:	e0d0      	b.n	800aab4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80b0 	beq.w	800aa7a <HAL_UART_IRQHandler+0x1ba>
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	2b00      	cmp	r3, #0
 800a922:	d105      	bne.n	800a930 <HAL_UART_IRQHandler+0x70>
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 80a5 	beq.w	800aa7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <HAL_UART_IRQHandler+0x90>
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a948:	f043 0201 	orr.w	r2, r3, #1
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <HAL_UART_IRQHandler+0xb0>
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a968:	f043 0202 	orr.w	r2, r3, #2
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <HAL_UART_IRQHandler+0xd0>
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a988:	f043 0204 	orr.w	r2, r3, #4
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00f      	beq.n	800a9ba <HAL_UART_IRQHandler+0xfa>
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	f003 0320 	and.w	r3, r3, #32
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <HAL_UART_IRQHandler+0xee>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b2:	f043 0208 	orr.w	r2, r3, #8
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d077      	beq.n	800aab2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f003 0320 	and.w	r3, r3, #32
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <HAL_UART_IRQHandler+0x11c>
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	f003 0320 	and.w	r3, r3, #32
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa7c 	bl	800aed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bf14      	ite	ne
 800a9ea:	2301      	movne	r3, #1
 800a9ec:	2300      	moveq	r3, #0
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d102      	bne.n	800aa04 <HAL_UART_IRQHandler+0x144>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d031      	beq.n	800aa68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f973 	bl	800acf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d023      	beq.n	800aa60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	695a      	ldr	r2, [r3, #20]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d013      	beq.n	800aa58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa34:	4a21      	ldr	r2, [pc, #132]	; (800aabc <HAL_UART_IRQHandler+0x1fc>)
 800aa36:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fb fc57 	bl	80062f0 <HAL_DMA_Abort_IT>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d016      	beq.n	800aa76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa52:	4610      	mov	r0, r2
 800aa54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa56:	e00e      	b.n	800aa76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f84c 	bl	800aaf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5e:	e00a      	b.n	800aa76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f848 	bl	800aaf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa66:	e006      	b.n	800aa76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f844 	bl	800aaf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800aa74:	e01d      	b.n	800aab2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa76:	bf00      	nop
    return;
 800aa78:	e01b      	b.n	800aab2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <HAL_UART_IRQHandler+0x1d6>
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f9b9 	bl	800ae06 <UART_Transmit_IT>
    return;
 800aa94:	e00e      	b.n	800aab4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <HAL_UART_IRQHandler+0x1f4>
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d004      	beq.n	800aab4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f9fa 	bl	800aea4 <UART_EndTransmit_IT>
    return;
 800aab0:	e000      	b.n	800aab4 <HAL_UART_IRQHandler+0x1f4>
    return;
 800aab2:	bf00      	nop
  }
}
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	0800ad2b 	.word	0x0800ad2b

0800aac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	bc80      	pop	{r7}
 800aad0:	4770      	bx	lr

0800aad2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	bc80      	pop	{r7}
 800aae2:	4770      	bx	lr

0800aae4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aafe:	bf00      	nop
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bc80      	pop	{r7}
 800ab06:	4770      	bx	lr

0800ab08 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bc80      	pop	{r7}
 800ab18:	4770      	bx	lr

0800ab1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0320 	and.w	r3, r3, #32
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d11e      	bne.n	800ab74 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab4a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695a      	ldr	r2, [r3, #20]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab6a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff ffac 	bl	800aad2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff ffa7 	bl	800aae4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b21      	cmp	r3, #33	; 0x21
 800abd0:	d108      	bne.n	800abe4 <UART_DMAError+0x46>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abde:	68b8      	ldr	r0, [r7, #8]
 800abe0:	f000 f871 	bl	800acc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bf14      	ite	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	2300      	moveq	r3, #0
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b22      	cmp	r3, #34	; 0x22
 800ac04:	d108      	bne.n	800ac18 <UART_DMAError+0x7a>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac12:	68b8      	ldr	r0, [r7, #8]
 800ac14:	f000 f86c 	bl	800acf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1c:	f043 0210 	orr.w	r2, r3, #16
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac24:	68b8      	ldr	r0, [r7, #8]
 800ac26:	f7ff ff66 	bl	800aaf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	603b      	str	r3, [r7, #0]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac42:	e02c      	b.n	800ac9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d028      	beq.n	800ac9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac52:	f7fb f8c9 	bl	8005de8 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d21d      	bcs.n	800ac9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	695a      	ldr	r2, [r3, #20]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0201 	bic.w	r2, r2, #1
 800ac80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e00f      	b.n	800acbe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4013      	ands	r3, r2
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	429a      	cmp	r2, r3
 800acac:	bf0c      	ite	eq
 800acae:	2301      	moveq	r3, #1
 800acb0:	2300      	movne	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	461a      	mov	r2, r3
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d0c3      	beq.n	800ac44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b083      	sub	sp, #12
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68da      	ldr	r2, [r3, #12]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800acdc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr

0800acf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	695a      	ldr	r2, [r3, #20]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0201 	bic.w	r2, r2, #1
 800ad16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bc80      	pop	{r7}
 800ad28:	4770      	bx	lr

0800ad2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff fed6 	bl	800aaf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	2200      	movs	r2, #0
 800ad66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d114      	bne.n	800ada4 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff feb3 	bl	800ab08 <HAL_UART_AbortCpltCallback>
 800ada2:	e000      	b.n	800ada6 <UART_DMATxAbortCallback+0x54>
      return;
 800ada4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adbe:	2200      	movs	r2, #0
 800adc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add0:	2b00      	cmp	r3, #0
 800add2:	d114      	bne.n	800adfe <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff fe86 	bl	800ab08 <HAL_UART_AbortCpltCallback>
 800adfc:	e000      	b.n	800ae00 <UART_DMARxAbortCallback+0x54>
      return;
 800adfe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b085      	sub	sp, #20
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b21      	cmp	r3, #33	; 0x21
 800ae18:	d13e      	bne.n	800ae98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae22:	d114      	bne.n	800ae4e <UART_Transmit_IT+0x48>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d110      	bne.n	800ae4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	1c9a      	adds	r2, r3, #2
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	621a      	str	r2, [r3, #32]
 800ae4c:	e008      	b.n	800ae60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	1c59      	adds	r1, r3, #1
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	6211      	str	r1, [r2, #32]
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10f      	bne.n	800ae94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68da      	ldr	r2, [r3, #12]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e000      	b.n	800ae9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae98:	2302      	movs	r3, #2
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr

0800aea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fdfb 	bl	800aac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b22      	cmp	r3, #34	; 0x22
 800aee6:	d170      	bne.n	800afca <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef0:	d117      	bne.n	800af22 <UART_Receive_IT+0x4e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d113      	bne.n	800af22 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af10:	b29a      	uxth	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	1c9a      	adds	r2, r3, #2
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28
 800af20:	e026      	b.n	800af70 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af34:	d007      	beq.n	800af46 <UART_Receive_IT+0x72>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <UART_Receive_IT+0x80>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e008      	b.n	800af66 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af60:	b2da      	uxtb	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	b29b      	uxth	r3, r3
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4619      	mov	r1, r3
 800af7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af80:	2b00      	cmp	r3, #0
 800af82:	d120      	bne.n	800afc6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0220 	bic.w	r2, r2, #32
 800af92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	695a      	ldr	r2, [r3, #20]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff fd88 	bl	800aad2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e002      	b.n	800afcc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e000      	b.n	800afcc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800afca:	2302      	movs	r3, #2
  }
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	431a      	orrs	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b00e:	f023 030c 	bic.w	r3, r3, #12
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	6812      	ldr	r2, [r2, #0]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	430b      	orrs	r3, r1
 800b01a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	699a      	ldr	r2, [r3, #24]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a2c      	ldr	r2, [pc, #176]	; (800b0e8 <UART_SetConfig+0x114>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d103      	bne.n	800b044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b03c:	f7fd fdf0 	bl	8008c20 <HAL_RCC_GetPCLK2Freq>
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	e002      	b.n	800b04a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b044:	f7fd fdd8 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 800b048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009a      	lsls	r2, r3, #2
 800b054:	441a      	add	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	4a22      	ldr	r2, [pc, #136]	; (800b0ec <UART_SetConfig+0x118>)
 800b062:	fba2 2303 	umull	r2, r3, r2, r3
 800b066:	095b      	lsrs	r3, r3, #5
 800b068:	0119      	lsls	r1, r3, #4
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009a      	lsls	r2, r3, #2
 800b074:	441a      	add	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b080:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <UART_SetConfig+0x118>)
 800b082:	fba3 0302 	umull	r0, r3, r3, r2
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	2064      	movs	r0, #100	; 0x64
 800b08a:	fb00 f303 	mul.w	r3, r0, r3
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	3332      	adds	r3, #50	; 0x32
 800b094:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <UART_SetConfig+0x118>)
 800b096:	fba2 2303 	umull	r2, r3, r2, r3
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0a0:	4419      	add	r1, r3
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009a      	lsls	r2, r3, #2
 800b0ac:	441a      	add	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <UART_SetConfig+0x118>)
 800b0ba:	fba3 0302 	umull	r0, r3, r3, r2
 800b0be:	095b      	lsrs	r3, r3, #5
 800b0c0:	2064      	movs	r0, #100	; 0x64
 800b0c2:	fb00 f303 	mul.w	r3, r0, r3
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	3332      	adds	r3, #50	; 0x32
 800b0cc:	4a07      	ldr	r2, [pc, #28]	; (800b0ec <UART_SetConfig+0x118>)
 800b0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	f003 020f 	and.w	r2, r3, #15
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	440a      	add	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	40013800 	.word	0x40013800
 800b0ec:	51eb851f 	.word	0x51eb851f

0800b0f0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af04      	add	r7, sp, #16
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a6b      	ldr	r2, [pc, #428]	; (800b2a8 <_ZN10ControllerC1Ev+0x1b8>)
 800b0fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a6a      	ldr	r2, [pc, #424]	; (800b2ac <_ZN10ControllerC1Ev+0x1bc>)
 800b102:	63da      	str	r2, [r3, #60]	; 0x3c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	22c8      	movs	r2, #200	; 0xc8
 800b108:	641a      	str	r2, [r3, #64]	; 0x40
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	4618      	mov	r0, r3
 800b110:	f7f5 fdc4 	bl	8000c9c <__aeabi_i2f>
 800b114:	4603      	mov	r3, r0
 800b116:	4619      	mov	r1, r3
 800b118:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b11c:	f7f5 fec6 	bl	8000eac <__aeabi_fdiv>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	645a      	str	r2, [r3, #68]	; 0x44
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a61      	ldr	r2, [pc, #388]	; (800b2b0 <_ZN10ControllerC1Ev+0x1c0>)
 800b12c:	649a      	str	r2, [r3, #72]	; 0x48
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a60      	ldr	r2, [pc, #384]	; (800b2b4 <_ZN10ControllerC1Ev+0x1c4>)
 800b132:	64da      	str	r2, [r3, #76]	; 0x4c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a60      	ldr	r2, [pc, #384]	; (800b2b8 <_ZN10ControllerC1Ev+0x1c8>)
 800b138:	651a      	str	r2, [r3, #80]	; 0x50
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	655a      	str	r2, [r3, #84]	; 0x54
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a5d      	ldr	r2, [pc, #372]	; (800b2bc <_ZN10ControllerC1Ev+0x1cc>)
 800b146:	659a      	str	r2, [r3, #88]	; 0x58
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a5d      	ldr	r2, [pc, #372]	; (800b2c0 <_ZN10ControllerC1Ev+0x1d0>)
 800b14c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a5c      	ldr	r2, [pc, #368]	; (800b2c4 <_ZN10ControllerC1Ev+0x1d4>)
 800b152:	661a      	str	r2, [r3, #96]	; 0x60
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	665a      	str	r2, [r3, #100]	; 0x64
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	669a      	str	r2, [r3, #104]	; 0x68
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a56      	ldr	r2, [pc, #344]	; (800b2c8 <_ZN10ControllerC1Ev+0x1d8>)
 800b170:	671a      	str	r2, [r3, #112]	; 0x70
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a55      	ldr	r2, [pc, #340]	; (800b2cc <_ZN10ControllerC1Ev+0x1dc>)
 800b176:	675a      	str	r2, [r3, #116]	; 0x74
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a54      	ldr	r2, [pc, #336]	; (800b2cc <_ZN10ControllerC1Ev+0x1dc>)
 800b17c:	679a      	str	r2, [r3, #120]	; 0x78
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a53      	ldr	r2, [pc, #332]	; (800b2d0 <_ZN10ControllerC1Ev+0x1e0>)
 800b182:	67da      	str	r2, [r3, #124]	; 0x7c
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a53      	ldr	r2, [pc, #332]	; (800b2d4 <_ZN10ControllerC1Ev+0x1e4>)
 800b188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a52      	ldr	r2, [pc, #328]	; (800b2d8 <_ZN10ControllerC1Ev+0x1e8>)
 800b190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a51      	ldr	r2, [pc, #324]	; (800b2dc <_ZN10ControllerC1Ev+0x1ec>)
 800b198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f04f 0200 	mov.w	r2, #0
 800b1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b1b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800b1d4:	a330      	add	r3, pc, #192	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1de:	a32e      	add	r3, pc, #184	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	e9cd 2300 	strd	r2, r3, [sp]
 800b1e8:	a32d      	add	r3, pc, #180	; (adr r3, 800b2a0 <_ZN10ControllerC1Ev+0x1b0>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	4608      	mov	r0, r1
 800b1f0:	f005 fad0 	bl	8010794 <_ZN3lpfC1Eddd>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800b1fa:	a327      	add	r3, pc, #156	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b204:	a324      	add	r3, pc, #144	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	e9cd 2300 	strd	r2, r3, [sp]
 800b20e:	a324      	add	r3, pc, #144	; (adr r3, 800b2a0 <_ZN10ControllerC1Ev+0x1b0>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	4608      	mov	r0, r1
 800b216:	f005 fabd 	bl	8010794 <_ZN3lpfC1Eddd>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b220:	a31d      	add	r3, pc, #116	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b22a:	a31b      	add	r3, pc, #108	; (adr r3, 800b298 <_ZN10ControllerC1Ev+0x1a8>)
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	e9cd 2300 	strd	r2, r3, [sp]
 800b234:	a31a      	add	r3, pc, #104	; (adr r3, 800b2a0 <_ZN10ControllerC1Ev+0x1b0>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	4608      	mov	r0, r1
 800b23c:	f005 faaa 	bl	8010794 <_ZN3lpfC1Eddd>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b246:	4618      	mov	r0, r3
 800b248:	f004 fe9e 	bl	800ff88 <_ZN3PIDC1Ev>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b252:	4618      	mov	r0, r3
 800b254:	f004 fe98 	bl	800ff88 <_ZN3PIDC1Ev>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800b25e:	4618      	mov	r0, r3
 800b260:	f004 fe92 	bl	800ff88 <_ZN3PIDC1Ev>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b26a:	4618      	mov	r0, r3
 800b26c:	f004 fe8c 	bl	800ff88 <_ZN3PIDC1Ev>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800b276:	4618      	mov	r0, r3
 800b278:	f004 fe86 	bl	800ff88 <_ZN3PIDC1Ev>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800b282:	4618      	mov	r0, r3
 800b284:	f004 fe80 	bl	800ff88 <_ZN3PIDC1Ev>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	f3af 8000 	nop.w
 800b298:	fc3b4f61 	.word	0xfc3b4f61
 800b29c:	3fa35935 	.word	0x3fa35935
 800b2a0:	4f0d844d 	.word	0x4f0d844d
 800b2a4:	3fed94af 	.word	0x3fed94af
 800b2a8:	44c1c000 	.word	0x44c1c000
 800b2ac:	42654ca3 	.word	0x42654ca3
 800b2b0:	3fb33333 	.word	0x3fb33333
 800b2b4:	411cf5c3 	.word	0x411cf5c3
 800b2b8:	41f9d70a 	.word	0x41f9d70a
 800b2bc:	3f333333 	.word	0x3f333333
 800b2c0:	3d4ccccd 	.word	0x3d4ccccd
 800b2c4:	3ca3d70a 	.word	0x3ca3d70a
 800b2c8:	40a00000 	.word	0x40a00000
 800b2cc:	41100000 	.word	0x41100000
 800b2d0:	40400000 	.word	0x40400000
 800b2d4:	41200000 	.word	0x41200000
 800b2d8:	41700000 	.word	0x41700000
 800b2dc:	c0800000 	.word	0xc0800000

0800b2e0 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e4:	b092      	sub	sp, #72	; 0x48
 800b2e6:	af04      	add	r7, sp, #16
 800b2e8:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	609a      	str	r2, [r3, #8]
        


    int thr;

    switch(mod) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800b354:	2b02      	cmp	r3, #2
 800b356:	f000 8147 	beq.w	800b5e8 <_ZN10Controller3RunEv+0x308>
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	f300 81c8 	bgt.w	800b6f0 <_ZN10Controller3RunEv+0x410>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <_ZN10Controller3RunEv+0x8a>
 800b364:	2b01      	cmp	r3, #1
 800b366:	d04f      	beq.n	800b408 <_ZN10Controller3RunEv+0x128>
 800b368:	e1c2      	b.n	800b6f0 <_ZN10Controller3RunEv+0x410>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b37a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b37e:	f005 f993 	bl	80106a8 <_ZN3PID3SatEfii>
 800b382:	4603      	mov	r3, r0
 800b384:	4618      	mov	r0, r3
 800b386:	f7f5 feb9 	bl	80010fc <__aeabi_f2iz>
 800b38a:	4603      	mov	r3, r0
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f005 fa02 	bl	80107ca <_ZN3lpf3RunEf>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f005 f9f4 	bl	80107ca <_ZN3lpf3RunEf>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	f005 f9e6 	bl	80107ca <_ZN3lpf3RunEf>
 800b3fe:	4602      	mov	r2, r0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800b406:	e173      	b.n	800b6f0 <_ZN10Controller3RunEv+0x410>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b432:	4618      	mov	r0, r3
 800b434:	f7f5 fe88 	bl	8001148 <__aeabi_f2uiz>
 800b438:	4603      	mov	r3, r0
 800b43a:	9302      	str	r3, [sp, #8]
 800b43c:	9501      	str	r5, [sp, #4]
 800b43e:	9400      	str	r4, [sp, #0]
 800b440:	4653      	mov	r3, sl
 800b442:	464a      	mov	r2, r9
 800b444:	4641      	mov	r1, r8
 800b446:	4630      	mov	r0, r6
 800b448:	f004 fe38 	bl	80100bc <_ZN3PID6PI_VelEfffffj>
 800b44c:	4604      	mov	r4, r0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b456:	4619      	mov	r1, r3
 800b458:	4610      	mov	r0, r2
 800b45a:	f7f5 fc73 	bl	8000d44 <__aeabi_fmul>
 800b45e:	4603      	mov	r3, r0
 800b460:	4619      	mov	r1, r3
 800b462:	4620      	mov	r0, r4
 800b464:	f7f5 fb66 	bl	8000b34 <__addsf3>
 800b468:	4603      	mov	r3, r0
 800b46a:	461a      	mov	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800b472:	4b5c      	ldr	r3, [pc, #368]	; (800b5e4 <_ZN10Controller3RunEv+0x304>)
 800b474:	633b      	str	r3, [r7, #48]	; 0x30
			float roll_r = roll * deg2rad;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b47e:	f7f5 fc61 	bl	8000d44 <__aeabi_fmul>
 800b482:	4603      	mov	r3, r0
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
			float pitch_r = pitch * deg2rad;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b48e:	f7f5 fc59 	bl	8000d44 <__aeabi_fmul>
 800b492:	4603      	mov	r3, r0
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800b496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b498:	f7f7 f8e2 	bl	8002660 <_ZSt3cosf>
 800b49c:	4603      	mov	r3, r0
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b4a4:	f7f5 fd02 	bl	8000eac <__aeabi_fdiv>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ae:	f7f7 f8d7 	bl	8002660 <_ZSt3cosf>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7f5 fcf8 	bl	8000eac <__aeabi_fdiv>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24

			F = F * b2e ; // Body to Earth
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 fc3b 	bl	8000d44 <__aeabi_fmul>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f5 fe07 	bl	80010fc <__aeabi_f2iz>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f5 fe01 	bl	80010fc <__aeabi_f2iz>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	4629      	mov	r1, r5
 800b500:	4620      	mov	r0, r4
 800b502:	f005 f8d1 	bl	80106a8 <_ZN3PID3SatEfii>
 800b506:	4602      	mov	r2, r0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f005 f8f3 	bl	8010708 <_ZN3PID5F2thrEf>
 800b522:	4603      	mov	r3, r0
 800b524:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b52c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b52e:	f7f5 fbb5 	bl	8000c9c <__aeabi_i2f>
 800b532:	4601      	mov	r1, r0
 800b534:	f240 434c 	movw	r3, #1100	; 0x44c
 800b538:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b53c:	4620      	mov	r0, r4
 800b53e:	f005 f8b3 	bl	80106a8 <_ZN3PID3SatEfii>
 800b542:	4603      	mov	r3, r0
 800b544:	4618      	mov	r0, r3
 800b546:	f7f5 fdd9 	bl	80010fc <__aeabi_f2iz>
 800b54a:	4603      	mov	r3, r0
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800b54e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b550:	f7f5 fba4 	bl	8000c9c <__aeabi_i2f>
 800b554:	4602      	mov	r2, r0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f005 f915 	bl	80107ca <_ZN3lpf3RunEf>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f005 f907 	bl	80107ca <_ZN3lpf3RunEf>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	f005 f8f9 	bl	80107ca <_ZN3lpf3RunEf>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800b5e0:	e086      	b.n	800b6f0 <_ZN10Controller3RunEv+0x410>
 800b5e2:	bf00      	nop
 800b5e4:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b5f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5f8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b5fc:	f005 f854 	bl	80106a8 <_ZN3PID3SatEfii>
 800b600:	4603      	mov	r3, r0
 800b602:	4618      	mov	r0, r3
 800b604:	f7f5 fd7a 	bl	80010fc <__aeabi_f2iz>
 800b608:	4603      	mov	r3, r0
 800b60a:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	2b09      	cmp	r3, #9
 800b612:	d958      	bls.n	800b6c6 <_ZN10Controller3RunEv+0x3e6>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800b63e:	9201      	str	r2, [sp, #4]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462b      	mov	r3, r5
 800b644:	4622      	mov	r2, r4
 800b646:	f004 fe8f 	bl	8010368 <_ZN3PID7PID_PosEfffff>
 800b64a:	4602      	mov	r2, r0
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800b676:	9201      	str	r2, [sp, #4]
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	462b      	mov	r3, r5
 800b67c:	4622      	mov	r2, r4
 800b67e:	f004 fe73 	bl	8010368 <_ZN3PID7PID_PosEfffff>
 800b682:	4602      	mov	r2, r0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800b696:	f06f 0313 	mvn.w	r3, #19
 800b69a:	2214      	movs	r2, #20
 800b69c:	f005 f804 	bl	80106a8 <_ZN3PID3SatEfii>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800b6b4:	f06f 0313 	mvn.w	r3, #19
 800b6b8:	2214      	movs	r2, #20
 800b6ba:	f004 fff5 	bl	80106a8 <_ZN3PID3SatEfii>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f005 f872 	bl	80107ca <_ZN3lpf3RunEf>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800b6ee:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68da      	ldr	r2, [r3, #12]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4623      	mov	r3, r4
 800b70c:	f004 fc98 	bl	8010040 <_ZN3PID7P_AngleEffff>
 800b710:	4602      	mov	r2, r0
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f7f5 fa0a 	bl	8000b34 <__addsf3>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691a      	ldr	r2, [r3, #16]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	4623      	mov	r3, r4
 800b746:	f004 fc7b 	bl	8010040 <_ZN3PID7P_AngleEffff>
 800b74a:	4602      	mov	r2, r0
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7f5 f9ed 	bl	8000b34 <__addsf3>
 800b75a:	4603      	mov	r3, r0
 800b75c:	461a      	mov	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b770:	4619      	mov	r1, r3
 800b772:	4610      	mov	r0, r2
 800b774:	f004 fd00 	bl	8010178 <_ZN3PID6RateFFEf>
 800b778:	6238      	str	r0, [r7, #32]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b786:	4619      	mov	r1, r3
 800b788:	4610      	mov	r0, r2
 800b78a:	f004 fcf5 	bl	8010178 <_ZN3PID6RateFFEf>
 800b78e:	61f8      	str	r0, [r7, #28]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699e      	ldr	r6, [r3, #24]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b7b6:	9003      	str	r0, [sp, #12]
 800b7b8:	9102      	str	r1, [sp, #8]
 800b7ba:	9201      	str	r2, [sp, #4]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	4663      	mov	r3, ip
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f004 fd27 	bl	8010218 <_ZN3PID9PID_Rate2Efffffff>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69de      	ldr	r6, [r3, #28]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b7f8:	9003      	str	r0, [sp, #12]
 800b7fa:	9102      	str	r1, [sp, #8]
 800b7fc:	9201      	str	r2, [sp, #4]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	4663      	mov	r3, ip
 800b802:	4632      	mov	r2, r6
 800b804:	4629      	mov	r1, r5
 800b806:	4620      	mov	r0, r4
 800b808:	f004 fd06 	bl	8010218 <_ZN3PID9PID_Rate2Efffffff>
 800b80c:	4602      	mov	r2, r0
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1a      	ldr	r2, [r3, #32]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b82c:	f04f 0500 	mov.w	r5, #0
 800b830:	9501      	str	r5, [sp, #4]
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	4623      	mov	r3, r4
 800b836:	f004 fdd5 	bl	80103e4 <_ZN3PID7PD_RateEfffff>
 800b83a:	4602      	mov	r2, r0
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140



    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800b842:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b844:	f7f5 fa2a 	bl	8000c9c <__aeabi_i2f>
 800b848:	4602      	mov	r2, r0
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7f5 f96e 	bl	8000b34 <__addsf3>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b862:	4619      	mov	r1, r3
 800b864:	4610      	mov	r0, r2
 800b866:	f7f5 f963 	bl	8000b30 <__aeabi_fsub>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7f5 f95a 	bl	8000b30 <__aeabi_fsub>
 800b87c:	4603      	mov	r3, r0
 800b87e:	49b2      	ldr	r1, [pc, #712]	; (800bb48 <_ZN10Controller3RunEv+0x868>)
 800b880:	4618      	mov	r0, r3
 800b882:	f7f5 f957 	bl	8000b34 <__addsf3>
 800b886:	4603      	mov	r3, r0
 800b888:	49b0      	ldr	r1, [pc, #704]	; (800bb4c <_ZN10Controller3RunEv+0x86c>)
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7f5 f950 	bl	8000b30 <__aeabi_fsub>
 800b890:	4603      	mov	r3, r0
 800b892:	4618      	mov	r0, r3
 800b894:	f7f5 fc32 	bl	80010fc <__aeabi_f2iz>
 800b898:	4603      	mov	r3, r0
 800b89a:	61bb      	str	r3, [r7, #24]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800b89c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b89e:	f7f5 f9fd 	bl	8000c9c <__aeabi_i2f>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7f5 f93f 	bl	8000b30 <__aeabi_fsub>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7f5 f938 	bl	8000b34 <__addsf3>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	f7f5 f92d 	bl	8000b30 <__aeabi_fsub>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	499b      	ldr	r1, [pc, #620]	; (800bb48 <_ZN10Controller3RunEv+0x868>)
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f5 f928 	bl	8000b30 <__aeabi_fsub>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	499a      	ldr	r1, [pc, #616]	; (800bb4c <_ZN10Controller3RunEv+0x86c>)
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7f5 f925 	bl	8000b34 <__addsf3>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f5 fc05 	bl	80010fc <__aeabi_f2iz>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	617b      	str	r3, [r7, #20]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800b8f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8f8:	f7f5 f9d0 	bl	8000c9c <__aeabi_i2f>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b904:	4619      	mov	r1, r3
 800b906:	4610      	mov	r0, r2
 800b908:	f7f5 f914 	bl	8000b34 <__addsf3>
 800b90c:	4603      	mov	r3, r0
 800b90e:	461a      	mov	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7f5 f90b 	bl	8000b34 <__addsf3>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7f5 f902 	bl	8000b34 <__addsf3>
 800b930:	4603      	mov	r3, r0
 800b932:	4985      	ldr	r1, [pc, #532]	; (800bb48 <_ZN10Controller3RunEv+0x868>)
 800b934:	4618      	mov	r0, r3
 800b936:	f7f5 f8fd 	bl	8000b34 <__addsf3>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4983      	ldr	r1, [pc, #524]	; (800bb4c <_ZN10Controller3RunEv+0x86c>)
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f5 f8f8 	bl	8000b34 <__addsf3>
 800b944:	4603      	mov	r3, r0
 800b946:	4618      	mov	r0, r3
 800b948:	f7f5 fbd8 	bl	80010fc <__aeabi_f2iz>
 800b94c:	4603      	mov	r3, r0
 800b94e:	613b      	str	r3, [r7, #16]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800b950:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b952:	f7f5 f9a3 	bl	8000c9c <__aeabi_i2f>
 800b956:	4602      	mov	r2, r0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f7f5 f8e5 	bl	8000b30 <__aeabi_fsub>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f7f5 f8dc 	bl	8000b30 <__aeabi_fsub>
 800b978:	4603      	mov	r3, r0
 800b97a:	461a      	mov	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b982:	4619      	mov	r1, r3
 800b984:	4610      	mov	r0, r2
 800b986:	f7f5 f8d5 	bl	8000b34 <__addsf3>
 800b98a:	4603      	mov	r3, r0
 800b98c:	496e      	ldr	r1, [pc, #440]	; (800bb48 <_ZN10Controller3RunEv+0x868>)
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f5 f8ce 	bl	8000b30 <__aeabi_fsub>
 800b994:	4603      	mov	r3, r0
 800b996:	496d      	ldr	r1, [pc, #436]	; (800bb4c <_ZN10Controller3RunEv+0x86c>)
 800b998:	4618      	mov	r0, r3
 800b99a:	f7f5 f8c9 	bl	8000b30 <__aeabi_fsub>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f5 fbab 	bl	80010fc <__aeabi_f2iz>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	60fb      	str	r3, [r7, #12]


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800b9b0:	69b8      	ldr	r0, [r7, #24]
 800b9b2:	f7f5 f973 	bl	8000c9c <__aeabi_i2f>
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f240 434c 	movw	r3, #1100	; 0x44c
 800b9c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f004 fe35 	bl	8010634 <_ZN3PID3SatEfiii>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f5 fb95 	bl	80010fc <__aeabi_f2iz>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	61bb      	str	r3, [r7, #24]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800b9dc:	6978      	ldr	r0, [r7, #20]
 800b9de:	f7f5 f95d 	bl	8000c9c <__aeabi_i2f>
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	f240 434c 	movw	r3, #1100	; 0x44c
 800b9ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f004 fe1f 	bl	8010634 <_ZN3PID3SatEfiii>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7f5 fb7f 	bl	80010fc <__aeabi_f2iz>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	617b      	str	r3, [r7, #20]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ba08:	6938      	ldr	r0, [r7, #16]
 800ba0a:	f7f5 f947 	bl	8000c9c <__aeabi_i2f>
 800ba0e:	4601      	mov	r1, r0
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	f240 434c 	movw	r3, #1100	; 0x44c
 800ba18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f004 fe09 	bl	8010634 <_ZN3PID3SatEfiii>
 800ba22:	4603      	mov	r3, r0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fb69 	bl	80010fc <__aeabi_f2iz>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	613b      	str	r3, [r7, #16]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f7f5 f931 	bl	8000c9c <__aeabi_i2f>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	f240 434c 	movw	r3, #1100	; 0x44c
 800ba44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f004 fdf3 	bl	8010634 <_ZN3PID3SatEfiii>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f5 fb53 	bl	80010fc <__aeabi_f2iz>
 800ba56:	4603      	mov	r3, r0
 800ba58:	60fb      	str	r3, [r7, #12]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    controller_output_pwm2[0] = thr;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba5e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = thr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba66:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = thr;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba6e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = thr;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba76:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,PWM_LOWER,thr);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f5 f908 	bl	8000c9c <__aeabi_i2f>
 800ba8c:	4601      	mov	r1, r0
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	f240 434c 	movw	r3, #1100	; 0x44c
 800ba96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f004 fdca 	bl	8010634 <_ZN3PID3SatEfiii>
 800baa0:	4603      	mov	r3, r0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f5 fb2a 	bl	80010fc <__aeabi_f2iz>
 800baa8:	4602      	mov	r2, r0
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,PWM_LOWER,thr);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800babc:	4618      	mov	r0, r3
 800babe:	f7f5 f8ed 	bl	8000c9c <__aeabi_i2f>
 800bac2:	4601      	mov	r1, r0
 800bac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	f240 434c 	movw	r3, #1100	; 0x44c
 800bacc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bad0:	4620      	mov	r0, r4
 800bad2:	f004 fdaf 	bl	8010634 <_ZN3PID3SatEfiii>
 800bad6:	4603      	mov	r3, r0
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f5 fb0f 	bl	80010fc <__aeabi_f2iz>
 800bade:	4602      	mov	r2, r0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,PWM_LOWER,thr);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f5 f8d2 	bl	8000c9c <__aeabi_i2f>
 800baf8:	4601      	mov	r1, r0
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	f240 434c 	movw	r3, #1100	; 0x44c
 800bb02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bb06:	4620      	mov	r0, r4
 800bb08:	f004 fd94 	bl	8010634 <_ZN3PID3SatEfiii>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f5 faf4 	bl	80010fc <__aeabi_f2iz>
 800bb14:	4602      	mov	r2, r0
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,PWM_LOWER,thr);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f5 f8b7 	bl	8000c9c <__aeabi_i2f>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	f240 434c 	movw	r3, #1100	; 0x44c
 800bb38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f004 fd79 	bl	8010634 <_ZN3PID3SatEfiii>
 800bb42:	4603      	mov	r3, r0
 800bb44:	4618      	mov	r0, r3
 800bb46:	e003      	b.n	800bb50 <_ZN10Controller3RunEv+0x870>
 800bb48:	41f00000 	.word	0x41f00000
 800bb4c:	41500000 	.word	0x41500000
 800bb50:	f7f5 fad4 	bl	80010fc <__aeabi_f2iz>
 800bb54:	4602      	mov	r2, r0
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800bb7c:	bf00      	nop
 800bb7e:	3738      	adds	r7, #56	; 0x38
 800bb80:	46bd      	mov	sp, r7
 800bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb86:	bf00      	nop

0800bb88 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800bb96:	4618      	mov	r0, r3
 800bb98:	f004 fdee 	bl	8010778 <_ZN3PIDD1Ev>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f004 fde8 	bl	8010778 <_ZN3PIDD1Ev>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f004 fde2 	bl	8010778 <_ZN3PIDD1Ev>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f004 fddc 	bl	8010778 <_ZN3PIDD1Ev>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f004 fdd6 	bl	8010778 <_ZN3PIDD1Ev>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f004 fdd0 	bl	8010778 <_ZN3PIDD1Ev>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	33f0      	adds	r3, #240	; 0xf0
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f004 fe4a 	bl	8010876 <_ZN3lpfD1Ev>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	33c8      	adds	r3, #200	; 0xc8
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f004 fe45 	bl	8010876 <_ZN3lpfD1Ev>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	33a0      	adds	r3, #160	; 0xa0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f004 fe40 	bl	8010876 <_ZN3lpfD1Ev>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af04      	add	r7, sp, #16
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f04f 0200 	mov.w	r2, #0
 800bc0e:	60da      	str	r2, [r3, #12]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a85      	ldr	r2, [pc, #532]	; (800be28 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800bc14:	611a      	str	r2, [r3, #16]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f04f 0200 	mov.w	r2, #0
 800bc24:	631a      	str	r2, [r3, #48]	; 0x30
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f04f 0200 	mov.w	r2, #0
 800bc2c:	635a      	str	r2, [r3, #52]	; 0x34
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a7e      	ldr	r2, [pc, #504]	; (800be2c <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800bc32:	639a      	str	r2, [r3, #56]	; 0x38
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a7e      	ldr	r2, [pc, #504]	; (800be30 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800bc38:	651a      	str	r2, [r3, #80]	; 0x50
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a7d      	ldr	r2, [pc, #500]	; (800be34 <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800bc3e:	655a      	str	r2, [r3, #84]	; 0x54
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f04f 0200 	mov.w	r2, #0
 800bc46:	659a      	str	r2, [r3, #88]	; 0x58
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f04f 0200 	mov.w	r2, #0
 800bc4e:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	661a      	str	r2, [r3, #96]	; 0x60
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a74      	ldr	r2, [pc, #464]	; (800be2c <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800bc5c:	665a      	str	r2, [r3, #100]	; 0x64
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a75      	ldr	r2, [pc, #468]	; (800be38 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800bc62:	67da      	str	r2, [r3, #124]	; 0x7c
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f04f 0200 	mov.w	r2, #0
 800bc74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a70      	ldr	r2, [pc, #448]	; (800be3c <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800bc7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a6a      	ldr	r2, [pc, #424]	; (800be2c <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800bc84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a68      	ldr	r2, [pc, #416]	; (800be2c <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800bc8c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a6b      	ldr	r2, [pc, #428]	; (800be40 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800bc94:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a6a      	ldr	r2, [pc, #424]	; (800be44 <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800bc9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bca6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a66      	ldr	r2, [pc, #408]	; (800be48 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800bcae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a65      	ldr	r2, [pc, #404]	; (800be4c <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800bcb6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bcc0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a62      	ldr	r2, [pc, #392]	; (800be50 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800bcc8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	22c8      	movs	r2, #200	; 0xc8
 800bcd0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f4 ffde 	bl	8000c9c <__aeabi_i2f>
 800bce0:	4603      	mov	r3, r0
 800bce2:	4619      	mov	r1, r3
 800bce4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bce8:	f7f5 f8e0 	bl	8000eac <__aeabi_fdiv>
 800bcec:	4603      	mov	r3, r0
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7f4 fb9a 	bl	8000428 <__aeabi_f2d>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a54      	ldr	r2, [pc, #336]	; (800be54 <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800bd02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a53      	ldr	r2, [pc, #332]	; (800be58 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800bd0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a51      	ldr	r2, [pc, #324]	; (800be58 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800bd12:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a50      	ldr	r2, [pc, #320]	; (800be5c <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800bd1a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800bd24:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a4d      	ldr	r2, [pc, #308]	; (800be60 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800bd2c:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bd36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a49      	ldr	r2, [pc, #292]	; (800be64 <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800bd3e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a48      	ldr	r2, [pc, #288]	; (800be68 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800bd46:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a47      	ldr	r2, [pc, #284]	; (800be6c <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800bd4e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd58:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd62:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a41      	ldr	r2, [pc, #260]	; (800be70 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800bd6a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a40      	ldr	r2, [pc, #256]	; (800be74 <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800bd72:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 800bd7c:	a31e      	add	r3, pc, #120	; (adr r3, 800bdf8 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd86:	a31c      	add	r3, pc, #112	; (adr r3, 800bdf8 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	e9cd 2300 	strd	r2, r3, [sp]
 800bd90:	a31b      	add	r3, pc, #108	; (adr r3, 800be00 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	4608      	mov	r0, r1
 800bd98:	f004 fcfc 	bl	8010794 <_ZN3lpfC1Eddd>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800bda2:	a319      	add	r3, pc, #100	; (adr r3, 800be08 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdac:	a316      	add	r3, pc, #88	; (adr r3, 800be08 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	e9cd 2300 	strd	r2, r3, [sp]
 800bdb6:	a316      	add	r3, pc, #88	; (adr r3, 800be10 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	f004 fce9 	bl	8010794 <_ZN3lpfC1Eddd>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f503 7146 	add.w	r1, r3, #792	; 0x318
 800bdc8:	a313      	add	r3, pc, #76	; (adr r3, 800be18 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdd2:	a311      	add	r3, pc, #68	; (adr r3, 800be18 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	e9cd 2300 	strd	r2, r3, [sp]
 800bddc:	a310      	add	r3, pc, #64	; (adr r3, 800be20 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	4608      	mov	r0, r1
 800bde4:	f004 fcd6 	bl	8010794 <_ZN3lpfC1Eddd>

}
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	de7ea5f8 	.word	0xde7ea5f8
 800bdfc:	3fb2a454 	.word	0x3fb2a454
 800be00:	ab367a10 	.word	0xab367a10
 800be04:	3feb573e 	.word	0x3feb573e
 800be08:	fc3b4f61 	.word	0xfc3b4f61
 800be0c:	3fa35935 	.word	0x3fa35935
 800be10:	4f0d844d 	.word	0x4f0d844d
 800be14:	3fed94af 	.word	0x3fed94af
 800be18:	e5c91d15 	.word	0xe5c91d15
 800be1c:	3feda43f 	.word	0x3feda43f
 800be20:	cb923a2a 	.word	0xcb923a2a
 800be24:	bfeb487f 	.word	0xbfeb487f
 800be28:	3ca3d70a 	.word	0x3ca3d70a
 800be2c:	4e6e6b28 	.word	0x4e6e6b28
 800be30:	3c23d70a 	.word	0x3c23d70a
 800be34:	3f333333 	.word	0x3f333333
 800be38:	47c35000 	.word	0x47c35000
 800be3c:	461c4000 	.word	0x461c4000
 800be40:	41200000 	.word	0x41200000
 800be44:	4b189680 	.word	0x4b189680
 800be48:	40a00000 	.word	0x40a00000
 800be4c:	42480000 	.word	0x42480000
 800be50:	42654ca3 	.word	0x42654ca3
 800be54:	38d1b717 	.word	0x38d1b717
 800be58:	40400000 	.word	0x40400000
 800be5c:	41a00000 	.word	0x41a00000
 800be60:	3cdd2f1b 	.word	0x3cdd2f1b
 800be64:	48f42400 	.word	0x48f42400
 800be68:	3727c5ac 	.word	0x3727c5ac
 800be6c:	322bcc77 	.word	0x322bcc77
 800be70:	40b66666 	.word	0x40b66666
 800be74:	c0c00000 	.word	0xc0c00000

0800be78 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>:
void Kalman_Filtresi::PredictUpdatePos(pos_axis axis) {
 800be78:	b5b0      	push	{r4, r5, r7, lr}
 800be7a:	b0a8      	sub	sp, #160	; 0xa0
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
	float pos,vel,a,b,accm,pos_gps,vgps,S1_1,S1_2,S1_3,S1_4,S2_1,S2_2,S2_3,S2_4,S3_1,S3_2,S3_3,S3_4,S4_1, S4_2, S4_3, S4_4;
	float angle;
	float deg2rad = M_PI/180.0;
 800be84:	4b3b      	ldr	r3, [pc, #236]	; (800bf74 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0xfc>)
 800be86:	643b      	str	r3, [r7, #64]	; 0x40

	switch (axis) {
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1c>
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d072      	beq.n	800bf78 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x100>
 800be92:	e0df      	b.n	800c054 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
		case x_axis:
			pos = x;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800be9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apx;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800bea4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vx;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800beae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bax;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800beb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = -pitch_ekf*deg2rad;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800bec2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bec6:	4619      	mov	r1, r3
 800bec8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800beca:	f7f4 ff3b 	bl	8000d44 <__aeabi_fmul>
 800bece:	4603      	mov	r3, r0
 800bed0:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = xgps;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsx;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accx;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800beec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1x;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2x;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bf00:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3x;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bf08:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4x;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf10:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1x;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf18:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2x;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf20:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3x;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800bf28:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4x;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf30:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1x;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf38:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2x;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800bf40:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3x;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bf48:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4x;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800bf50:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1x;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bf58:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2x;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bf60:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3x;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bf68:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4x;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bf70:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800bf72:	e06f      	b.n	800c054 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
 800bf74:	3c8efa35 	.word	0x3c8efa35

		case y_axis:
			pos = y;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800bf7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apy;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800bf88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vy;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800bf92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bay;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800bf9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = roll_ekf*deg2rad;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bfaa:	f7f4 fecb 	bl	8000d44 <__aeabi_fmul>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = ygps;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800bfb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsy;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bfc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accy;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800bfcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1y;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bfd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2y;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800bfe0:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3y;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bfe8:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4y;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800bff0:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1y;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800bff8:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2y;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c000:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3y;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c008:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4y;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c010:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1y;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c018:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2y;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c020:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3y;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c028:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4y;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c030:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1y;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c038:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2y;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c040:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3y;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c048:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4y;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c050:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800c052:	bf00      	nop

	}
	pos =(a*pos_st*pos_st)/2 + (vel)*pos_st + (pos);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f4 fe71 	bl	8000d44 <__aeabi_fmul>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	4619      	mov	r1, r3
 800c06c:	4610      	mov	r0, r2
 800c06e:	f7f4 fe69 	bl	8000d44 <__aeabi_fmul>
 800c072:	4603      	mov	r3, r0
 800c074:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f4 ff17 	bl	8000eac <__aeabi_fdiv>
 800c07e:	4603      	mov	r3, r0
 800c080:	461c      	mov	r4, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7f4 fe5a 	bl	8000d44 <__aeabi_fmul>
 800c090:	4603      	mov	r3, r0
 800c092:	4619      	mov	r1, r3
 800c094:	4620      	mov	r0, r4
 800c096:	f7f4 fd4d 	bl	8000b34 <__addsf3>
 800c09a:	4603      	mov	r3, r0
 800c09c:	4619      	mov	r1, r3
 800c09e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c0a2:	f7f4 fd47 	bl	8000b34 <__addsf3>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	vel =                   (vel) + pos_st*a;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f4 fe45 	bl	8000d44 <__aeabi_fmul>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c0c2:	f7f4 fd37 	bl	8000b34 <__addsf3>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		//a = g*angle;
//	}

	//b =                                (b);

	S1_1=S1_1 + sx + S1_2*pos_st + S2_1*pos_st + (S1_3*pos_st*pos_st)/2 + S2_2*pos_st*pos_st + (S2_3*pos_st*pos_st*pos_st)/2 + (S3_1*pos_st*pos_st)/2 + (S3_2*pos_st*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st*pos_st)/4;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800c0d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f4 fd2c 	bl	8000b34 <__addsf3>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	461c      	mov	r4, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f4 fe2c 	bl	8000d44 <__aeabi_fmul>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7f4 fd1f 	bl	8000b34 <__addsf3>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c100:	4618      	mov	r0, r3
 800c102:	f7f4 fe1f 	bl	8000d44 <__aeabi_fmul>
 800c106:	4603      	mov	r3, r0
 800c108:	4619      	mov	r1, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7f4 fd12 	bl	8000b34 <__addsf3>
 800c110:	4603      	mov	r3, r0
 800c112:	461c      	mov	r4, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7f4 fe12 	bl	8000d44 <__aeabi_fmul>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	4619      	mov	r1, r3
 800c12a:	4610      	mov	r0, r2
 800c12c:	f7f4 fe0a 	bl	8000d44 <__aeabi_fmul>
 800c130:	4603      	mov	r3, r0
 800c132:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c136:	4618      	mov	r0, r3
 800c138:	f7f4 feb8 	bl	8000eac <__aeabi_fdiv>
 800c13c:	4603      	mov	r3, r0
 800c13e:	4619      	mov	r1, r3
 800c140:	4620      	mov	r0, r4
 800c142:	f7f4 fcf7 	bl	8000b34 <__addsf3>
 800c146:	4603      	mov	r3, r0
 800c148:	461c      	mov	r4, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c150:	4618      	mov	r0, r3
 800c152:	f7f4 fdf7 	bl	8000d44 <__aeabi_fmul>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7f4 fdef 	bl	8000d44 <__aeabi_fmul>
 800c166:	4603      	mov	r3, r0
 800c168:	4619      	mov	r1, r3
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7f4 fce2 	bl	8000b34 <__addsf3>
 800c170:	4603      	mov	r3, r0
 800c172:	461c      	mov	r4, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f4 fde2 	bl	8000d44 <__aeabi_fmul>
 800c180:	4603      	mov	r3, r0
 800c182:	461a      	mov	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f7f4 fdda 	bl	8000d44 <__aeabi_fmul>
 800c190:	4603      	mov	r3, r0
 800c192:	461a      	mov	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	4619      	mov	r1, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	f7f4 fdd2 	bl	8000d44 <__aeabi_fmul>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7f4 fe80 	bl	8000eac <__aeabi_fdiv>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7f4 fcbf 	bl	8000b34 <__addsf3>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	461c      	mov	r4, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7f4 fdbf 	bl	8000d44 <__aeabi_fmul>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	f7f4 fdb7 	bl	8000d44 <__aeabi_fmul>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7f4 fe65 	bl	8000eac <__aeabi_fdiv>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7f4 fca4 	bl	8000b34 <__addsf3>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	461c      	mov	r4, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7f4 fda4 	bl	8000d44 <__aeabi_fmul>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	4619      	mov	r1, r3
 800c206:	4610      	mov	r0, r2
 800c208:	f7f4 fd9c 	bl	8000d44 <__aeabi_fmul>
 800c20c:	4603      	mov	r3, r0
 800c20e:	461a      	mov	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	4619      	mov	r1, r3
 800c216:	4610      	mov	r0, r2
 800c218:	f7f4 fd94 	bl	8000d44 <__aeabi_fmul>
 800c21c:	4603      	mov	r3, r0
 800c21e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c222:	4618      	mov	r0, r3
 800c224:	f7f4 fe42 	bl	8000eac <__aeabi_fdiv>
 800c228:	4603      	mov	r3, r0
 800c22a:	4619      	mov	r1, r3
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7f4 fc81 	bl	8000b34 <__addsf3>
 800c232:	4603      	mov	r3, r0
 800c234:	461c      	mov	r4, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7f4 fd81 	bl	8000d44 <__aeabi_fmul>
 800c242:	4603      	mov	r3, r0
 800c244:	461a      	mov	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7f4 fd79 	bl	8000d44 <__aeabi_fmul>
 800c252:	4603      	mov	r3, r0
 800c254:	461a      	mov	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	4619      	mov	r1, r3
 800c25c:	4610      	mov	r0, r2
 800c25e:	f7f4 fd71 	bl	8000d44 <__aeabi_fmul>
 800c262:	4603      	mov	r3, r0
 800c264:	461a      	mov	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	4619      	mov	r1, r3
 800c26c:	4610      	mov	r0, r2
 800c26e:	f7f4 fd69 	bl	8000d44 <__aeabi_fmul>
 800c272:	4603      	mov	r3, r0
 800c274:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c278:	4618      	mov	r0, r3
 800c27a:	f7f4 fe17 	bl	8000eac <__aeabi_fdiv>
 800c27e:	4603      	mov	r3, r0
 800c280:	4619      	mov	r1, r3
 800c282:	4620      	mov	r0, r4
 800c284:	f7f4 fc56 	bl	8000b34 <__addsf3>
 800c288:	4603      	mov	r3, r0
 800c28a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=S1_2 + S1_3*pos_st + S2_2*pos_st + S2_3*pos_st*pos_st + (S3_2*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st)/2;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c294:	4618      	mov	r0, r3
 800c296:	f7f4 fd55 	bl	8000d44 <__aeabi_fmul>
 800c29a:	4603      	mov	r3, r0
 800c29c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f4 fc48 	bl	8000b34 <__addsf3>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f4 fd48 	bl	8000d44 <__aeabi_fmul>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7f4 fc3b 	bl	8000b34 <__addsf3>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461c      	mov	r4, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7f4 fd3b 	bl	8000d44 <__aeabi_fmul>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4610      	mov	r0, r2
 800c2da:	f7f4 fd33 	bl	8000d44 <__aeabi_fmul>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f7f4 fc26 	bl	8000b34 <__addsf3>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461c      	mov	r4, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f4 fd26 	bl	8000d44 <__aeabi_fmul>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7f4 fd1e 	bl	8000d44 <__aeabi_fmul>
 800c308:	4603      	mov	r3, r0
 800c30a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c30e:	4618      	mov	r0, r3
 800c310:	f7f4 fdcc 	bl	8000eac <__aeabi_fdiv>
 800c314:	4603      	mov	r3, r0
 800c316:	4619      	mov	r1, r3
 800c318:	4620      	mov	r0, r4
 800c31a:	f7f4 fc0b 	bl	8000b34 <__addsf3>
 800c31e:	4603      	mov	r3, r0
 800c320:	461c      	mov	r4, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c328:	4618      	mov	r0, r3
 800c32a:	f7f4 fd0b 	bl	8000d44 <__aeabi_fmul>
 800c32e:	4603      	mov	r3, r0
 800c330:	461a      	mov	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	4619      	mov	r1, r3
 800c338:	4610      	mov	r0, r2
 800c33a:	f7f4 fd03 	bl	8000d44 <__aeabi_fmul>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	4619      	mov	r1, r3
 800c348:	4610      	mov	r0, r2
 800c34a:	f7f4 fcfb 	bl	8000d44 <__aeabi_fmul>
 800c34e:	4603      	mov	r3, r0
 800c350:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c354:	4618      	mov	r0, r3
 800c356:	f7f4 fda9 	bl	8000eac <__aeabi_fdiv>
 800c35a:	4603      	mov	r3, r0
 800c35c:	4619      	mov	r1, r3
 800c35e:	4620      	mov	r0, r4
 800c360:	f7f4 fbe8 	bl	8000b34 <__addsf3>
 800c364:	4603      	mov	r3, r0
 800c366:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=0;
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=S1_4 + S2_4*pos_st + (S3_4*pos_st*pos_st)/2;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c374:	4618      	mov	r0, r3
 800c376:	f7f4 fce5 	bl	8000d44 <__aeabi_fmul>
 800c37a:	4603      	mov	r3, r0
 800c37c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c37e:	4618      	mov	r0, r3
 800c380:	f7f4 fbd8 	bl	8000b34 <__addsf3>
 800c384:	4603      	mov	r3, r0
 800c386:	461c      	mov	r4, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c38e:	4618      	mov	r0, r3
 800c390:	f7f4 fcd8 	bl	8000d44 <__aeabi_fmul>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7f4 fcd0 	bl	8000d44 <__aeabi_fmul>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f4 fd7e 	bl	8000eac <__aeabi_fdiv>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f7f4 fbbd 	bl	8000b34 <__addsf3>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=S2_1 + (pos_st*pos_st*(S2_3 + S3_3*pos_st))/2 + S3_1*pos_st + pos_st*(S2_2 + S3_2*pos_st);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691a      	ldr	r2, [r3, #16]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	f7f4 fcbb 	bl	8000d44 <__aeabi_fmul>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f4 fcb3 	bl	8000d44 <__aeabi_fmul>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7f4 fba6 	bl	8000b34 <__addsf3>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f7f4 fca9 	bl	8000d44 <__aeabi_fmul>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f4 fd57 	bl	8000eac <__aeabi_fdiv>
 800c3fe:	4603      	mov	r3, r0
 800c400:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c402:	4618      	mov	r0, r3
 800c404:	f7f4 fb96 	bl	8000b34 <__addsf3>
 800c408:	4603      	mov	r3, r0
 800c40a:	461c      	mov	r4, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c412:	4618      	mov	r0, r3
 800c414:	f7f4 fc96 	bl	8000d44 <__aeabi_fmul>
 800c418:	4603      	mov	r3, r0
 800c41a:	4619      	mov	r1, r3
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7f4 fb89 	bl	8000b34 <__addsf3>
 800c422:	4603      	mov	r3, r0
 800c424:	461d      	mov	r5, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691c      	ldr	r4, [r3, #16]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c430:	4618      	mov	r0, r3
 800c432:	f7f4 fc87 	bl	8000d44 <__aeabi_fmul>
 800c436:	4603      	mov	r3, r0
 800c438:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f4 fb7a 	bl	8000b34 <__addsf3>
 800c440:	4603      	mov	r3, r0
 800c442:	4619      	mov	r1, r3
 800c444:	4620      	mov	r0, r4
 800c446:	f7f4 fc7d 	bl	8000d44 <__aeabi_fmul>
 800c44a:	4603      	mov	r3, r0
 800c44c:	4619      	mov	r1, r3
 800c44e:	4628      	mov	r0, r5
 800c450:	f7f4 fb70 	bl	8000b34 <__addsf3>
 800c454:	4603      	mov	r3, r0
 800c456:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=S2_2 + sv + S3_2*pos_st + pos_st*(S2_3 + S3_3*pos_st);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800c45e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c460:	4618      	mov	r0, r3
 800c462:	f7f4 fb67 	bl	8000b34 <__addsf3>
 800c466:	4603      	mov	r3, r0
 800c468:	461c      	mov	r4, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c470:	4618      	mov	r0, r3
 800c472:	f7f4 fc67 	bl	8000d44 <__aeabi_fmul>
 800c476:	4603      	mov	r3, r0
 800c478:	4619      	mov	r1, r3
 800c47a:	4620      	mov	r0, r4
 800c47c:	f7f4 fb5a 	bl	8000b34 <__addsf3>
 800c480:	4603      	mov	r3, r0
 800c482:	461d      	mov	r5, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691c      	ldr	r4, [r3, #16]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f4 fc58 	bl	8000d44 <__aeabi_fmul>
 800c494:	4603      	mov	r3, r0
 800c496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c498:	4618      	mov	r0, r3
 800c49a:	f7f4 fb4b 	bl	8000b34 <__addsf3>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7f4 fc4e 	bl	8000d44 <__aeabi_fmul>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7f4 fb41 	bl	8000b34 <__addsf3>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=0;
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=S2_4 + S3_4*pos_st;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f4 fc3e 	bl	8000d44 <__aeabi_fmul>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c4ce:	f7f4 fb31 	bl	8000b34 <__addsf3>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=0;
 800c4d6:	f04f 0300 	mov.w	r3, #0
 800c4da:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=0;
 800c4dc:	f04f 0300 	mov.w	r3, #0
 800c4e0:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=sa;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4e6:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=0;
 800c4e8:	f04f 0300 	mov.w	r3, #0
 800c4ec:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=S4_1 + S4_2*pos_st + (S4_3*pos_st*pos_st)/2;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7f4 fc25 	bl	8000d44 <__aeabi_fmul>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f4 fb18 	bl	8000b34 <__addsf3>
 800c504:	4603      	mov	r3, r0
 800c506:	461c      	mov	r4, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f4 fc18 	bl	8000d44 <__aeabi_fmul>
 800c514:	4603      	mov	r3, r0
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7f4 fc10 	bl	8000d44 <__aeabi_fmul>
 800c524:	4603      	mov	r3, r0
 800c526:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7f4 fcbe 	bl	8000eac <__aeabi_fdiv>
 800c530:	4603      	mov	r3, r0
 800c532:	4619      	mov	r1, r3
 800c534:	4620      	mov	r0, r4
 800c536:	f7f4 fafd 	bl	8000b34 <__addsf3>
 800c53a:	4603      	mov	r3, r0
 800c53c:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=S4_2 + S4_3*pos_st;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c544:	4618      	mov	r0, r3
 800c546:	f7f4 fbfd 	bl	8000d44 <__aeabi_fmul>
 800c54a:	4603      	mov	r3, r0
 800c54c:	4619      	mov	r1, r3
 800c54e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c550:	f7f4 faf0 	bl	8000b34 <__addsf3>
 800c554:	4603      	mov	r3, r0
 800c556:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=0;
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=S4_4 + sb;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c564:	4619      	mov	r1, r3
 800c566:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c568:	f7f4 fae4 	bl	8000b34 <__addsf3>
 800c56c:	4603      	mov	r3, r0
 800c56e:	647b      	str	r3, [r7, #68]	; 0x44

	float A = (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qap*S1_1*S2_2 - Qap*S1_2*S2_1 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c57c:	4619      	mov	r1, r3
 800c57e:	4610      	mov	r0, r2
 800c580:	f7f4 fbe0 	bl	8000d44 <__aeabi_fmul>
 800c584:	4603      	mov	r3, r0
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7f4 fbd8 	bl	8000d44 <__aeabi_fmul>
 800c594:	4603      	mov	r3, r0
 800c596:	461c      	mov	r4, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f7f4 fbcc 	bl	8000d44 <__aeabi_fmul>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f4 fbc7 	bl	8000d44 <__aeabi_fmul>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7f4 faba 	bl	8000b34 <__addsf3>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	461c      	mov	r4, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	f7f4 fbb7 	bl	8000d44 <__aeabi_fmul>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f4 fbb1 	bl	8000d44 <__aeabi_fmul>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7f4 faa4 	bl	8000b34 <__addsf3>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461c      	mov	r4, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7f4 fba1 	bl	8000d44 <__aeabi_fmul>
 800c602:	4603      	mov	r3, r0
 800c604:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c606:	4618      	mov	r0, r3
 800c608:	f7f4 fb9c 	bl	8000d44 <__aeabi_fmul>
 800c60c:	4603      	mov	r3, r0
 800c60e:	4619      	mov	r1, r3
 800c610:	4620      	mov	r0, r4
 800c612:	f7f4 fa8f 	bl	8000b34 <__addsf3>
 800c616:	4603      	mov	r3, r0
 800c618:	461c      	mov	r4, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7f4 fb8c 	bl	8000d44 <__aeabi_fmul>
 800c62c:	4603      	mov	r3, r0
 800c62e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c630:	4618      	mov	r0, r3
 800c632:	f7f4 fb87 	bl	8000d44 <__aeabi_fmul>
 800c636:	4603      	mov	r3, r0
 800c638:	4619      	mov	r1, r3
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7f4 fa7a 	bl	8000b34 <__addsf3>
 800c640:	4603      	mov	r3, r0
 800c642:	461c      	mov	r4, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7f4 fb77 	bl	8000d44 <__aeabi_fmul>
 800c656:	4603      	mov	r3, r0
 800c658:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7f4 fb72 	bl	8000d44 <__aeabi_fmul>
 800c660:	4603      	mov	r3, r0
 800c662:	4619      	mov	r1, r3
 800c664:	4620      	mov	r0, r4
 800c666:	f7f4 fa65 	bl	8000b34 <__addsf3>
 800c66a:	4603      	mov	r3, r0
 800c66c:	461c      	mov	r4, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	4619      	mov	r1, r3
 800c67a:	4610      	mov	r0, r2
 800c67c:	f7f4 fb62 	bl	8000d44 <__aeabi_fmul>
 800c680:	4603      	mov	r3, r0
 800c682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c684:	4618      	mov	r0, r3
 800c686:	f7f4 fb5d 	bl	8000d44 <__aeabi_fmul>
 800c68a:	4603      	mov	r3, r0
 800c68c:	4619      	mov	r1, r3
 800c68e:	4620      	mov	r0, r4
 800c690:	f7f4 fa50 	bl	8000b34 <__addsf3>
 800c694:	4603      	mov	r3, r0
 800c696:	461c      	mov	r4, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800c69e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7f4 fb4e 	bl	8000d44 <__aeabi_fmul>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7f4 fb49 	bl	8000d44 <__aeabi_fmul>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7f4 fa3c 	bl	8000b34 <__addsf3>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461c      	mov	r4, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800c6c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f4 fb3b 	bl	8000d44 <__aeabi_fmul>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7f4 fb36 	bl	8000d44 <__aeabi_fmul>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f7f4 fa27 	bl	8000b30 <__aeabi_fsub>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	461c      	mov	r4, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c6ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f4 fb28 	bl	8000d44 <__aeabi_fmul>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f4 fb23 	bl	8000d44 <__aeabi_fmul>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4619      	mov	r1, r3
 800c702:	4620      	mov	r0, r4
 800c704:	f7f4 fa16 	bl	8000b34 <__addsf3>
 800c708:	4603      	mov	r3, r0
 800c70a:	461c      	mov	r4, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c714:	4618      	mov	r0, r3
 800c716:	f7f4 fb15 	bl	8000d44 <__aeabi_fmul>
 800c71a:	4603      	mov	r3, r0
 800c71c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f4 fb10 	bl	8000d44 <__aeabi_fmul>
 800c724:	4603      	mov	r3, r0
 800c726:	4619      	mov	r1, r3
 800c728:	4620      	mov	r0, r4
 800c72a:	f7f4 fa01 	bl	8000b30 <__aeabi_fsub>
 800c72e:	4603      	mov	r3, r0
 800c730:	461c      	mov	r4, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c738:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f4 fb02 	bl	8000d44 <__aeabi_fmul>
 800c740:	4603      	mov	r3, r0
 800c742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c744:	4618      	mov	r0, r3
 800c746:	f7f4 fafd 	bl	8000d44 <__aeabi_fmul>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4619      	mov	r1, r3
 800c74e:	4620      	mov	r0, r4
 800c750:	f7f4 f9f0 	bl	8000b34 <__addsf3>
 800c754:	4603      	mov	r3, r0
 800c756:	461c      	mov	r4, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c75e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c760:	4618      	mov	r0, r3
 800c762:	f7f4 faef 	bl	8000d44 <__aeabi_fmul>
 800c766:	4603      	mov	r3, r0
 800c768:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f4 faea 	bl	8000d44 <__aeabi_fmul>
 800c770:	4603      	mov	r3, r0
 800c772:	4619      	mov	r1, r3
 800c774:	4620      	mov	r0, r4
 800c776:	f7f4 f9db 	bl	8000b30 <__aeabi_fsub>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461c      	mov	r4, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c784:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c786:	4618      	mov	r0, r3
 800c788:	f7f4 fadc 	bl	8000d44 <__aeabi_fmul>
 800c78c:	4603      	mov	r3, r0
 800c78e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c790:	4618      	mov	r0, r3
 800c792:	f7f4 fad7 	bl	8000d44 <__aeabi_fmul>
 800c796:	4603      	mov	r3, r0
 800c798:	4619      	mov	r1, r3
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7f4 f9ca 	bl	8000b34 <__addsf3>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461c      	mov	r4, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c7aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7f4 fac9 	bl	8000d44 <__aeabi_fmul>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7f4 fac4 	bl	8000d44 <__aeabi_fmul>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7f4 f9b5 	bl	8000b30 <__aeabi_fsub>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c7d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f4 fab6 	bl	8000d44 <__aeabi_fmul>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7f4 fab1 	bl	8000d44 <__aeabi_fmul>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7f4 f9a4 	bl	8000b34 <__addsf3>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461c      	mov	r4, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800c7f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7f4 faa3 	bl	8000d44 <__aeabi_fmul>
 800c7fe:	4603      	mov	r3, r0
 800c800:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c802:	4618      	mov	r0, r3
 800c804:	f7f4 fa9e 	bl	8000d44 <__aeabi_fmul>
 800c808:	4603      	mov	r3, r0
 800c80a:	4619      	mov	r1, r3
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7f4 f98f 	bl	8000b30 <__aeabi_fsub>
 800c812:	4603      	mov	r3, r0
 800c814:	461c      	mov	r4, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f4 fa90 	bl	8000d44 <__aeabi_fmul>
 800c824:	4603      	mov	r3, r0
 800c826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c828:	4618      	mov	r0, r3
 800c82a:	f7f4 fa8b 	bl	8000d44 <__aeabi_fmul>
 800c82e:	4603      	mov	r3, r0
 800c830:	4619      	mov	r1, r3
 800c832:	4620      	mov	r0, r4
 800c834:	f7f4 f97e 	bl	8000b34 <__addsf3>
 800c838:	4603      	mov	r3, r0
 800c83a:	461c      	mov	r4, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c842:	4618      	mov	r0, r3
 800c844:	f7f4 fa7e 	bl	8000d44 <__aeabi_fmul>
 800c848:	4603      	mov	r3, r0
 800c84a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f4 fa79 	bl	8000d44 <__aeabi_fmul>
 800c852:	4603      	mov	r3, r0
 800c854:	4619      	mov	r1, r3
 800c856:	4620      	mov	r0, r4
 800c858:	f7f4 f96a 	bl	8000b30 <__aeabi_fsub>
 800c85c:	4603      	mov	r3, r0
 800c85e:	461c      	mov	r4, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c868:	4618      	mov	r0, r3
 800c86a:	f7f4 fa6b 	bl	8000d44 <__aeabi_fmul>
 800c86e:	4603      	mov	r3, r0
 800c870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c872:	4618      	mov	r0, r3
 800c874:	f7f4 fa66 	bl	8000d44 <__aeabi_fmul>
 800c878:	4603      	mov	r3, r0
 800c87a:	4619      	mov	r1, r3
 800c87c:	4620      	mov	r0, r4
 800c87e:	f7f4 f959 	bl	8000b34 <__addsf3>
 800c882:	4603      	mov	r3, r0
 800c884:	461c      	mov	r4, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f4 fa59 	bl	8000d44 <__aeabi_fmul>
 800c892:	4603      	mov	r3, r0
 800c894:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c896:	4618      	mov	r0, r3
 800c898:	f7f4 fa54 	bl	8000d44 <__aeabi_fmul>
 800c89c:	4603      	mov	r3, r0
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7f4 f945 	bl	8000b30 <__aeabi_fsub>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461c      	mov	r4, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7f4 fa46 	bl	8000d44 <__aeabi_fmul>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f4 fa41 	bl	8000d44 <__aeabi_fmul>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f7f4 f934 	bl	8000b34 <__addsf3>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f4 fa34 	bl	8000d44 <__aeabi_fmul>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f4 fa2f 	bl	8000d44 <__aeabi_fmul>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f7f4 f920 	bl	8000b30 <__aeabi_fsub>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461c      	mov	r4, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f4 fa21 	bl	8000d44 <__aeabi_fmul>
 800c902:	4603      	mov	r3, r0
 800c904:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c906:	4618      	mov	r0, r3
 800c908:	f7f4 fa1c 	bl	8000d44 <__aeabi_fmul>
 800c90c:	4603      	mov	r3, r0
 800c90e:	4619      	mov	r1, r3
 800c910:	4620      	mov	r0, r4
 800c912:	f7f4 f90f 	bl	8000b34 <__addsf3>
 800c916:	4603      	mov	r3, r0
 800c918:	461c      	mov	r4, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c920:	4618      	mov	r0, r3
 800c922:	f7f4 fa0f 	bl	8000d44 <__aeabi_fmul>
 800c926:	4603      	mov	r3, r0
 800c928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f4 fa0a 	bl	8000d44 <__aeabi_fmul>
 800c930:	4603      	mov	r3, r0
 800c932:	4619      	mov	r1, r3
 800c934:	4620      	mov	r0, r4
 800c936:	f7f4 f8fb 	bl	8000b30 <__aeabi_fsub>
 800c93a:	4603      	mov	r3, r0
 800c93c:	461c      	mov	r4, r3
 800c93e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c940:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c944:	f7f4 f9fe 	bl	8000d44 <__aeabi_fmul>
 800c948:	4603      	mov	r3, r0
 800c94a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f4 f9f9 	bl	8000d44 <__aeabi_fmul>
 800c952:	4603      	mov	r3, r0
 800c954:	4619      	mov	r1, r3
 800c956:	4620      	mov	r0, r4
 800c958:	f7f4 f8ec 	bl	8000b34 <__addsf3>
 800c95c:	4603      	mov	r3, r0
 800c95e:	461c      	mov	r4, r3
 800c960:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c962:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c966:	f7f4 f9ed 	bl	8000d44 <__aeabi_fmul>
 800c96a:	4603      	mov	r3, r0
 800c96c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c96e:	4618      	mov	r0, r3
 800c970:	f7f4 f9e8 	bl	8000d44 <__aeabi_fmul>
 800c974:	4603      	mov	r3, r0
 800c976:	4619      	mov	r1, r3
 800c978:	4620      	mov	r0, r4
 800c97a:	f7f4 f8d9 	bl	8000b30 <__aeabi_fsub>
 800c97e:	4603      	mov	r3, r0
 800c980:	461c      	mov	r4, r3
 800c982:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c984:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c986:	f7f4 f9dd 	bl	8000d44 <__aeabi_fmul>
 800c98a:	4603      	mov	r3, r0
 800c98c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f4 f9d8 	bl	8000d44 <__aeabi_fmul>
 800c994:	4603      	mov	r3, r0
 800c996:	4619      	mov	r1, r3
 800c998:	4620      	mov	r0, r4
 800c99a:	f7f4 f8c9 	bl	8000b30 <__aeabi_fsub>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	461c      	mov	r4, r3
 800c9a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c9a6:	f7f4 f9cd 	bl	8000d44 <__aeabi_fmul>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7f4 f9c8 	bl	8000d44 <__aeabi_fmul>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f7f4 f8bb 	bl	8000b34 <__addsf3>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461c      	mov	r4, r3
 800c9c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c9c4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c9c6:	f7f4 f9bd 	bl	8000d44 <__aeabi_fmul>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f4 f9b8 	bl	8000d44 <__aeabi_fmul>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7f4 f8ab 	bl	8000b34 <__addsf3>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	461c      	mov	r4, r3
 800c9e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c9e4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c9e6:	f7f4 f9ad 	bl	8000d44 <__aeabi_fmul>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7f4 f9a8 	bl	8000d44 <__aeabi_fmul>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f7f4 f899 	bl	8000b30 <__aeabi_fsub>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461c      	mov	r4, r3
 800ca02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ca04:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ca08:	f7f4 f99c 	bl	8000d44 <__aeabi_fmul>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f4 f997 	bl	8000d44 <__aeabi_fmul>
 800ca16:	4603      	mov	r3, r0
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f7f4 f88a 	bl	8000b34 <__addsf3>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461c      	mov	r4, r3
 800ca24:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca26:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ca2a:	f7f4 f98b 	bl	8000d44 <__aeabi_fmul>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f4 f986 	bl	8000d44 <__aeabi_fmul>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7f4 f877 	bl	8000b30 <__aeabi_fsub>
 800ca42:	4603      	mov	r3, r0
 800ca44:	461c      	mov	r4, r3
 800ca46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ca48:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ca4a:	f7f4 f97b 	bl	8000d44 <__aeabi_fmul>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f4 f976 	bl	8000d44 <__aeabi_fmul>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f7f4 f867 	bl	8000b30 <__aeabi_fsub>
 800ca62:	4603      	mov	r3, r0
 800ca64:	461c      	mov	r4, r3
 800ca66:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ca6a:	f7f4 f96b 	bl	8000d44 <__aeabi_fmul>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f4 f966 	bl	8000d44 <__aeabi_fmul>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7f4 f859 	bl	8000b34 <__addsf3>
 800ca82:	4603      	mov	r3, r0
 800ca84:	461c      	mov	r4, r3
 800ca86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ca88:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ca8a:	f7f4 f95b 	bl	8000d44 <__aeabi_fmul>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7f4 f956 	bl	8000d44 <__aeabi_fmul>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f7f4 f849 	bl	8000b34 <__addsf3>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461c      	mov	r4, r3
 800caa6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800caa8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800caaa:	f7f4 f94b 	bl	8000d44 <__aeabi_fmul>
 800caae:	4603      	mov	r3, r0
 800cab0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f4 f946 	bl	8000d44 <__aeabi_fmul>
 800cab8:	4603      	mov	r3, r0
 800caba:	4619      	mov	r1, r3
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7f4 f837 	bl	8000b30 <__aeabi_fsub>
 800cac2:	4603      	mov	r3, r0
 800cac4:	461c      	mov	r4, r3
 800cac6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cac8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cacc:	f7f4 f93a 	bl	8000d44 <__aeabi_fmul>
 800cad0:	4603      	mov	r3, r0
 800cad2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f4 f935 	bl	8000d44 <__aeabi_fmul>
 800cada:	4603      	mov	r3, r0
 800cadc:	4619      	mov	r1, r3
 800cade:	4620      	mov	r0, r4
 800cae0:	f7f4 f828 	bl	8000b34 <__addsf3>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461c      	mov	r4, r3
 800cae8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800caea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800caee:	f7f4 f929 	bl	8000d44 <__aeabi_fmul>
 800caf2:	4603      	mov	r3, r0
 800caf4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f4 f924 	bl	8000d44 <__aeabi_fmul>
 800cafc:	4603      	mov	r3, r0
 800cafe:	4619      	mov	r1, r3
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7f4 f815 	bl	8000b30 <__aeabi_fsub>
 800cb06:	4603      	mov	r3, r0
 800cb08:	461c      	mov	r4, r3
 800cb0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cb0c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cb0e:	f7f4 f919 	bl	8000d44 <__aeabi_fmul>
 800cb12:	4603      	mov	r3, r0
 800cb14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f4 f914 	bl	8000d44 <__aeabi_fmul>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4620      	mov	r0, r4
 800cb22:	f7f4 f805 	bl	8000b30 <__aeabi_fsub>
 800cb26:	4603      	mov	r3, r0
 800cb28:	461c      	mov	r4, r3
 800cb2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb2c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cb2e:	f7f4 f909 	bl	8000d44 <__aeabi_fmul>
 800cb32:	4603      	mov	r3, r0
 800cb34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f4 f904 	bl	8000d44 <__aeabi_fmul>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4620      	mov	r0, r4
 800cb42:	f7f3 fff7 	bl	8000b34 <__addsf3>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461c      	mov	r4, r3
 800cb4a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cb4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cb4e:	f7f4 f8f9 	bl	8000d44 <__aeabi_fmul>
 800cb52:	4603      	mov	r3, r0
 800cb54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f4 f8f4 	bl	8000d44 <__aeabi_fmul>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7f3 ffe7 	bl	8000b34 <__addsf3>
 800cb66:	4603      	mov	r3, r0
 800cb68:	461c      	mov	r4, r3
 800cb6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cb6c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cb6e:	f7f4 f8e9 	bl	8000d44 <__aeabi_fmul>
 800cb72:	4603      	mov	r3, r0
 800cb74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7f4 f8e4 	bl	8000d44 <__aeabi_fmul>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7f3 ffd5 	bl	8000b30 <__aeabi_fsub>
 800cb86:	4603      	mov	r3, r0
 800cb88:	461c      	mov	r4, r3
 800cb8a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cb8c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cb90:	f7f4 f8d8 	bl	8000d44 <__aeabi_fmul>
 800cb94:	4603      	mov	r3, r0
 800cb96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7f4 f8d3 	bl	8000d44 <__aeabi_fmul>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	4619      	mov	r1, r3
 800cba2:	4620      	mov	r0, r4
 800cba4:	f7f3 ffc6 	bl	8000b34 <__addsf3>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	461c      	mov	r4, r3
 800cbac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cbae:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cbb2:	f7f4 f8c7 	bl	8000d44 <__aeabi_fmul>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7f4 f8c2 	bl	8000d44 <__aeabi_fmul>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f7f3 ffb3 	bl	8000b30 <__aeabi_fsub>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	461c      	mov	r4, r3
 800cbce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cbd0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cbd2:	f7f4 f8b7 	bl	8000d44 <__aeabi_fmul>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f4 f8b2 	bl	8000d44 <__aeabi_fmul>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f7f3 ffa3 	bl	8000b30 <__aeabi_fsub>
 800cbea:	4603      	mov	r3, r0
 800cbec:	461c      	mov	r4, r3
 800cbee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cbf0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cbf2:	f7f4 f8a7 	bl	8000d44 <__aeabi_fmul>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f4 f8a2 	bl	8000d44 <__aeabi_fmul>
 800cc00:	4603      	mov	r3, r0
 800cc02:	4619      	mov	r1, r3
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7f3 ff95 	bl	8000b34 <__addsf3>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	461c      	mov	r4, r3
 800cc0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cc10:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cc12:	f7f4 f897 	bl	8000d44 <__aeabi_fmul>
 800cc16:	4603      	mov	r3, r0
 800cc18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f4 f892 	bl	8000d44 <__aeabi_fmul>
 800cc20:	4603      	mov	r3, r0
 800cc22:	4619      	mov	r1, r3
 800cc24:	4620      	mov	r0, r4
 800cc26:	f7f3 ff85 	bl	8000b34 <__addsf3>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cc32:	f7f4 f887 	bl	8000d44 <__aeabi_fmul>
 800cc36:	4603      	mov	r3, r0
 800cc38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f4 f882 	bl	8000d44 <__aeabi_fmul>
 800cc40:	4603      	mov	r3, r0
 800cc42:	4619      	mov	r1, r3
 800cc44:	4620      	mov	r0, r4
 800cc46:	f7f3 ff73 	bl	8000b30 <__aeabi_fsub>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	63bb      	str	r3, [r7, #56]	; 0x38
	float Kt11=1 - (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2)/A;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7f4 f871 	bl	8000d44 <__aeabi_fmul>
 800cc62:	4603      	mov	r3, r0
 800cc64:	461a      	mov	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f7f4 f869 	bl	8000d44 <__aeabi_fmul>
 800cc72:	4603      	mov	r3, r0
 800cc74:	461c      	mov	r4, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7f4 f85d 	bl	8000d44 <__aeabi_fmul>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7f4 f858 	bl	8000d44 <__aeabi_fmul>
 800cc94:	4603      	mov	r3, r0
 800cc96:	4619      	mov	r1, r3
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f7f3 ff4b 	bl	8000b34 <__addsf3>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	461c      	mov	r4, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	4619      	mov	r1, r3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	f7f4 f848 	bl	8000d44 <__aeabi_fmul>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f4 f843 	bl	8000d44 <__aeabi_fmul>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f7f3 ff36 	bl	8000b34 <__addsf3>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461c      	mov	r4, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4610      	mov	r0, r2
 800ccda:	f7f4 f833 	bl	8000d44 <__aeabi_fmul>
 800ccde:	4603      	mov	r3, r0
 800cce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f4 f82e 	bl	8000d44 <__aeabi_fmul>
 800cce8:	4603      	mov	r3, r0
 800ccea:	4619      	mov	r1, r3
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7f3 ff21 	bl	8000b34 <__addsf3>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	461c      	mov	r4, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	4619      	mov	r1, r3
 800cd02:	4610      	mov	r0, r2
 800cd04:	f7f4 f81e 	bl	8000d44 <__aeabi_fmul>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f4 f819 	bl	8000d44 <__aeabi_fmul>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4619      	mov	r1, r3
 800cd16:	4620      	mov	r0, r4
 800cd18:	f7f3 ff0c 	bl	8000b34 <__addsf3>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	461c      	mov	r4, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7f4 f809 	bl	8000d44 <__aeabi_fmul>
 800cd32:	4603      	mov	r3, r0
 800cd34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7f4 f804 	bl	8000d44 <__aeabi_fmul>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4620      	mov	r0, r4
 800cd42:	f7f3 fef7 	bl	8000b34 <__addsf3>
 800cd46:	4603      	mov	r3, r0
 800cd48:	461c      	mov	r4, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f3 fff6 	bl	8000d44 <__aeabi_fmul>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f3 fff1 	bl	8000d44 <__aeabi_fmul>
 800cd62:	4603      	mov	r3, r0
 800cd64:	4619      	mov	r1, r3
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7f3 fee4 	bl	8000b34 <__addsf3>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	461c      	mov	r4, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7f3 ffe3 	bl	8000d44 <__aeabi_fmul>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7f3 ffde 	bl	8000d44 <__aeabi_fmul>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f7f3 fecf 	bl	8000b30 <__aeabi_fsub>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461c      	mov	r4, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7f3 ffd0 	bl	8000d44 <__aeabi_fmul>
 800cda4:	4603      	mov	r3, r0
 800cda6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7f3 ffcb 	bl	8000d44 <__aeabi_fmul>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7f3 febe 	bl	8000b34 <__addsf3>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461c      	mov	r4, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cdc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7f3 ffbd 	bl	8000d44 <__aeabi_fmul>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f3 ffb8 	bl	8000d44 <__aeabi_fmul>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f7f3 fea9 	bl	8000b30 <__aeabi_fsub>
 800cdde:	4603      	mov	r3, r0
 800cde0:	461c      	mov	r4, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cde8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7f3 ffaa 	bl	8000d44 <__aeabi_fmul>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7f3 ffa5 	bl	8000d44 <__aeabi_fmul>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7f3 fe98 	bl	8000b34 <__addsf3>
 800ce04:	4603      	mov	r3, r0
 800ce06:	461c      	mov	r4, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f3 ff97 	bl	8000d44 <__aeabi_fmul>
 800ce16:	4603      	mov	r3, r0
 800ce18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f3 ff92 	bl	8000d44 <__aeabi_fmul>
 800ce20:	4603      	mov	r3, r0
 800ce22:	4619      	mov	r1, r3
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7f3 fe83 	bl	8000b30 <__aeabi_fsub>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f3 ff84 	bl	8000d44 <__aeabi_fmul>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f3 ff7f 	bl	8000d44 <__aeabi_fmul>
 800ce46:	4603      	mov	r3, r0
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7f3 fe72 	bl	8000b34 <__addsf3>
 800ce50:	4603      	mov	r3, r0
 800ce52:	461c      	mov	r4, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ce5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7f3 ff71 	bl	8000d44 <__aeabi_fmul>
 800ce62:	4603      	mov	r3, r0
 800ce64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7f3 ff6c 	bl	8000d44 <__aeabi_fmul>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4620      	mov	r0, r4
 800ce72:	f7f3 fe5d 	bl	8000b30 <__aeabi_fsub>
 800ce76:	4603      	mov	r3, r0
 800ce78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7f4 f816 	bl	8000eac <__aeabi_fdiv>
 800ce80:	4603      	mov	r3, r0
 800ce82:	4619      	mov	r1, r3
 800ce84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ce88:	f7f3 fe52 	bl	8000b30 <__aeabi_fsub>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	637b      	str	r3, [r7, #52]	; 0x34
	float Kt12=(Qgps*(Qgps_v*S1_3 + Qgps_v*S1_4 - S1_2*S2_3 + S1_3*S2_2 - S1_2*S2_4 + S1_4*S2_2))/A;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f3 ff51 	bl	8000d44 <__aeabi_fmul>
 800cea2:	4603      	mov	r3, r0
 800cea4:	461d      	mov	r5, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f3 ff49 	bl	8000d44 <__aeabi_fmul>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f7f3 fe3c 	bl	8000b34 <__addsf3>
 800cebc:	4603      	mov	r3, r0
 800cebe:	461d      	mov	r5, r3
 800cec0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cec2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cec4:	f7f3 ff3e 	bl	8000d44 <__aeabi_fmul>
 800cec8:	4603      	mov	r3, r0
 800ceca:	4619      	mov	r1, r3
 800cecc:	4628      	mov	r0, r5
 800cece:	f7f3 fe2f 	bl	8000b30 <__aeabi_fsub>
 800ced2:	4603      	mov	r3, r0
 800ced4:	461d      	mov	r5, r3
 800ced6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ced8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ceda:	f7f3 ff33 	bl	8000d44 <__aeabi_fmul>
 800cede:	4603      	mov	r3, r0
 800cee0:	4619      	mov	r1, r3
 800cee2:	4628      	mov	r0, r5
 800cee4:	f7f3 fe26 	bl	8000b34 <__addsf3>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461d      	mov	r5, r3
 800ceec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ceee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cef0:	f7f3 ff28 	bl	8000d44 <__aeabi_fmul>
 800cef4:	4603      	mov	r3, r0
 800cef6:	4619      	mov	r1, r3
 800cef8:	4628      	mov	r0, r5
 800cefa:	f7f3 fe19 	bl	8000b30 <__aeabi_fsub>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461d      	mov	r5, r3
 800cf02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cf04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cf06:	f7f3 ff1d 	bl	8000d44 <__aeabi_fmul>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f7f3 fe10 	bl	8000b34 <__addsf3>
 800cf14:	4603      	mov	r3, r0
 800cf16:	4619      	mov	r1, r3
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f7f3 ff13 	bl	8000d44 <__aeabi_fmul>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7f3 ffc2 	bl	8000eac <__aeabi_fdiv>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	633b      	str	r3, [r7, #48]	; 0x30
	float Kt13=(Qgps*(Qap*S1_2 + S1_2*S3_3 - S1_3*S3_2 + S1_2*S3_4 - S1_4*S3_2 + S1_2*S4_3 - S1_3*S4_2 + S1_2*S4_4 - S1_4*S4_2))/A;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800cf38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f3 ff02 	bl	8000d44 <__aeabi_fmul>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461d      	mov	r5, r3
 800cf44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf46:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cf48:	f7f3 fefc 	bl	8000d44 <__aeabi_fmul>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4628      	mov	r0, r5
 800cf52:	f7f3 fdef 	bl	8000b34 <__addsf3>
 800cf56:	4603      	mov	r3, r0
 800cf58:	461d      	mov	r5, r3
 800cf5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf5c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cf5e:	f7f3 fef1 	bl	8000d44 <__aeabi_fmul>
 800cf62:	4603      	mov	r3, r0
 800cf64:	4619      	mov	r1, r3
 800cf66:	4628      	mov	r0, r5
 800cf68:	f7f3 fde2 	bl	8000b30 <__aeabi_fsub>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	461d      	mov	r5, r3
 800cf70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf72:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cf74:	f7f3 fee6 	bl	8000d44 <__aeabi_fmul>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f7f3 fdd9 	bl	8000b34 <__addsf3>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461d      	mov	r5, r3
 800cf86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf88:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cf8a:	f7f3 fedb 	bl	8000d44 <__aeabi_fmul>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4619      	mov	r1, r3
 800cf92:	4628      	mov	r0, r5
 800cf94:	f7f3 fdcc 	bl	8000b30 <__aeabi_fsub>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	461d      	mov	r5, r3
 800cf9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf9e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cfa0:	f7f3 fed0 	bl	8000d44 <__aeabi_fmul>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7f3 fdc3 	bl	8000b34 <__addsf3>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461d      	mov	r5, r3
 800cfb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cfb4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cfb6:	f7f3 fec5 	bl	8000d44 <__aeabi_fmul>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 fdb6 	bl	8000b30 <__aeabi_fsub>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461d      	mov	r5, r3
 800cfc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cfcc:	f7f3 feba 	bl	8000d44 <__aeabi_fmul>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f7f3 fdad 	bl	8000b34 <__addsf3>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461d      	mov	r5, r3
 800cfde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cfe0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cfe2:	f7f3 feaf 	bl	8000d44 <__aeabi_fmul>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4628      	mov	r0, r5
 800cfec:	f7f3 fda0 	bl	8000b30 <__aeabi_fsub>
 800cff0:	4603      	mov	r3, r0
 800cff2:	4619      	mov	r1, r3
 800cff4:	4620      	mov	r0, r4
 800cff6:	f7f3 fea5 	bl	8000d44 <__aeabi_fmul>
 800cffa:	4603      	mov	r3, r0
 800cffc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f3 ff54 	bl	8000eac <__aeabi_fdiv>
 800d004:	4603      	mov	r3, r0
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Kt21=(Qgps_v*(Qap*S2_1 + S2_1*S3_3 - S2_3*S3_1 + S2_1*S3_4 - S2_4*S3_1 + S2_1*S4_3 - S2_3*S4_1 + S2_1*S4_4 - S2_4*S4_1))/A;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68dc      	ldr	r4, [r3, #12]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d012:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d014:	4618      	mov	r0, r3
 800d016:	f7f3 fe95 	bl	8000d44 <__aeabi_fmul>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461d      	mov	r5, r3
 800d01e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d020:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d022:	f7f3 fe8f 	bl	8000d44 <__aeabi_fmul>
 800d026:	4603      	mov	r3, r0
 800d028:	4619      	mov	r1, r3
 800d02a:	4628      	mov	r0, r5
 800d02c:	f7f3 fd82 	bl	8000b34 <__addsf3>
 800d030:	4603      	mov	r3, r0
 800d032:	461d      	mov	r5, r3
 800d034:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d036:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d038:	f7f3 fe84 	bl	8000d44 <__aeabi_fmul>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4619      	mov	r1, r3
 800d040:	4628      	mov	r0, r5
 800d042:	f7f3 fd75 	bl	8000b30 <__aeabi_fsub>
 800d046:	4603      	mov	r3, r0
 800d048:	461d      	mov	r5, r3
 800d04a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d04c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d04e:	f7f3 fe79 	bl	8000d44 <__aeabi_fmul>
 800d052:	4603      	mov	r3, r0
 800d054:	4619      	mov	r1, r3
 800d056:	4628      	mov	r0, r5
 800d058:	f7f3 fd6c 	bl	8000b34 <__addsf3>
 800d05c:	4603      	mov	r3, r0
 800d05e:	461d      	mov	r5, r3
 800d060:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d062:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d064:	f7f3 fe6e 	bl	8000d44 <__aeabi_fmul>
 800d068:	4603      	mov	r3, r0
 800d06a:	4619      	mov	r1, r3
 800d06c:	4628      	mov	r0, r5
 800d06e:	f7f3 fd5f 	bl	8000b30 <__aeabi_fsub>
 800d072:	4603      	mov	r3, r0
 800d074:	461d      	mov	r5, r3
 800d076:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d078:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d07a:	f7f3 fe63 	bl	8000d44 <__aeabi_fmul>
 800d07e:	4603      	mov	r3, r0
 800d080:	4619      	mov	r1, r3
 800d082:	4628      	mov	r0, r5
 800d084:	f7f3 fd56 	bl	8000b34 <__addsf3>
 800d088:	4603      	mov	r3, r0
 800d08a:	461d      	mov	r5, r3
 800d08c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d08e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d090:	f7f3 fe58 	bl	8000d44 <__aeabi_fmul>
 800d094:	4603      	mov	r3, r0
 800d096:	4619      	mov	r1, r3
 800d098:	4628      	mov	r0, r5
 800d09a:	f7f3 fd49 	bl	8000b30 <__aeabi_fsub>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	461d      	mov	r5, r3
 800d0a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0a4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d0a6:	f7f3 fe4d 	bl	8000d44 <__aeabi_fmul>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f7f3 fd40 	bl	8000b34 <__addsf3>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d0bc:	f7f3 fe42 	bl	8000d44 <__aeabi_fmul>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f7f3 fd33 	bl	8000b30 <__aeabi_fsub>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7f3 fe38 	bl	8000d44 <__aeabi_fmul>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7f3 fee7 	bl	8000eac <__aeabi_fdiv>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kt22=(Qgps_v*(Qgps*S2_3 + Qgps*S2_4 + S1_1*S2_3 - S1_3*S2_1 + S1_1*S2_4 - S1_4*S2_1))/A;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68dc      	ldr	r4, [r3, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d0ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f3 fe28 	bl	8000d44 <__aeabi_fmul>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	461d      	mov	r5, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d0fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d100:	4618      	mov	r0, r3
 800d102:	f7f3 fe1f 	bl	8000d44 <__aeabi_fmul>
 800d106:	4603      	mov	r3, r0
 800d108:	4619      	mov	r1, r3
 800d10a:	4628      	mov	r0, r5
 800d10c:	f7f3 fd12 	bl	8000b34 <__addsf3>
 800d110:	4603      	mov	r3, r0
 800d112:	461d      	mov	r5, r3
 800d114:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d116:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d11a:	f7f3 fe13 	bl	8000d44 <__aeabi_fmul>
 800d11e:	4603      	mov	r3, r0
 800d120:	4619      	mov	r1, r3
 800d122:	4628      	mov	r0, r5
 800d124:	f7f3 fd06 	bl	8000b34 <__addsf3>
 800d128:	4603      	mov	r3, r0
 800d12a:	461d      	mov	r5, r3
 800d12c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d12e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d130:	f7f3 fe08 	bl	8000d44 <__aeabi_fmul>
 800d134:	4603      	mov	r3, r0
 800d136:	4619      	mov	r1, r3
 800d138:	4628      	mov	r0, r5
 800d13a:	f7f3 fcf9 	bl	8000b30 <__aeabi_fsub>
 800d13e:	4603      	mov	r3, r0
 800d140:	461d      	mov	r5, r3
 800d142:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d144:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d148:	f7f3 fdfc 	bl	8000d44 <__aeabi_fmul>
 800d14c:	4603      	mov	r3, r0
 800d14e:	4619      	mov	r1, r3
 800d150:	4628      	mov	r0, r5
 800d152:	f7f3 fcef 	bl	8000b34 <__addsf3>
 800d156:	4603      	mov	r3, r0
 800d158:	461d      	mov	r5, r3
 800d15a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d15c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d15e:	f7f3 fdf1 	bl	8000d44 <__aeabi_fmul>
 800d162:	4603      	mov	r3, r0
 800d164:	4619      	mov	r1, r3
 800d166:	4628      	mov	r0, r5
 800d168:	f7f3 fce2 	bl	8000b30 <__aeabi_fsub>
 800d16c:	4603      	mov	r3, r0
 800d16e:	4619      	mov	r1, r3
 800d170:	4620      	mov	r0, r4
 800d172:	f7f3 fde7 	bl	8000d44 <__aeabi_fmul>
 800d176:	4603      	mov	r3, r0
 800d178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f3 fe96 	bl	8000eac <__aeabi_fdiv>
 800d180:	4603      	mov	r3, r0
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
	float Kt23=1 - (Qap*Qgps*Qgps_v + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1)/A;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7f3 fdd6 	bl	8000d44 <__aeabi_fmul>
 800d198:	4603      	mov	r3, r0
 800d19a:	461a      	mov	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	f7f3 fdce 	bl	8000d44 <__aeabi_fmul>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461c      	mov	r4, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	f7f3 fdc3 	bl	8000d44 <__aeabi_fmul>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f3 fdbd 	bl	8000d44 <__aeabi_fmul>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7f3 fcb0 	bl	8000b34 <__addsf3>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461c      	mov	r4, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7f3 fdad 	bl	8000d44 <__aeabi_fmul>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7f3 fda8 	bl	8000d44 <__aeabi_fmul>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f7f3 fc9b 	bl	8000b34 <__addsf3>
 800d1fe:	4603      	mov	r3, r0
 800d200:	461c      	mov	r4, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f7f3 fd98 	bl	8000d44 <__aeabi_fmul>
 800d214:	4603      	mov	r3, r0
 800d216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f3 fd93 	bl	8000d44 <__aeabi_fmul>
 800d21e:	4603      	mov	r3, r0
 800d220:	4619      	mov	r1, r3
 800d222:	4620      	mov	r0, r4
 800d224:	f7f3 fc86 	bl	8000b34 <__addsf3>
 800d228:	4603      	mov	r3, r0
 800d22a:	461c      	mov	r4, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	4619      	mov	r1, r3
 800d238:	4610      	mov	r0, r2
 800d23a:	f7f3 fd83 	bl	8000d44 <__aeabi_fmul>
 800d23e:	4603      	mov	r3, r0
 800d240:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d242:	4618      	mov	r0, r3
 800d244:	f7f3 fd7e 	bl	8000d44 <__aeabi_fmul>
 800d248:	4603      	mov	r3, r0
 800d24a:	4619      	mov	r1, r3
 800d24c:	4620      	mov	r0, r4
 800d24e:	f7f3 fc71 	bl	8000b34 <__addsf3>
 800d252:	4603      	mov	r3, r0
 800d254:	461c      	mov	r4, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	f7f3 fd6e 	bl	8000d44 <__aeabi_fmul>
 800d268:	4603      	mov	r3, r0
 800d26a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f3 fd69 	bl	8000d44 <__aeabi_fmul>
 800d272:	4603      	mov	r3, r0
 800d274:	4619      	mov	r1, r3
 800d276:	4620      	mov	r0, r4
 800d278:	f7f3 fc5c 	bl	8000b34 <__addsf3>
 800d27c:	4603      	mov	r3, r0
 800d27e:	461c      	mov	r4, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d288:	4618      	mov	r0, r3
 800d28a:	f7f3 fd5b 	bl	8000d44 <__aeabi_fmul>
 800d28e:	4603      	mov	r3, r0
 800d290:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d292:	4618      	mov	r0, r3
 800d294:	f7f3 fd56 	bl	8000d44 <__aeabi_fmul>
 800d298:	4603      	mov	r3, r0
 800d29a:	4619      	mov	r1, r3
 800d29c:	4620      	mov	r0, r4
 800d29e:	f7f3 fc49 	bl	8000b34 <__addsf3>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	461c      	mov	r4, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f3 fd49 	bl	8000d44 <__aeabi_fmul>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f3 fd44 	bl	8000d44 <__aeabi_fmul>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7f3 fc35 	bl	8000b30 <__aeabi_fsub>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	461c      	mov	r4, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f3 fd36 	bl	8000d44 <__aeabi_fmul>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f3 fd31 	bl	8000d44 <__aeabi_fmul>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f7f3 fc24 	bl	8000b34 <__addsf3>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	461c      	mov	r4, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f3 fd24 	bl	8000d44 <__aeabi_fmul>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d300:	4618      	mov	r0, r3
 800d302:	f7f3 fd1f 	bl	8000d44 <__aeabi_fmul>
 800d306:	4603      	mov	r3, r0
 800d308:	4619      	mov	r1, r3
 800d30a:	4620      	mov	r0, r4
 800d30c:	f7f3 fc10 	bl	8000b30 <__aeabi_fsub>
 800d310:	4603      	mov	r3, r0
 800d312:	461c      	mov	r4, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f3 fd11 	bl	8000d44 <__aeabi_fmul>
 800d322:	4603      	mov	r3, r0
 800d324:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d326:	4618      	mov	r0, r3
 800d328:	f7f3 fd0c 	bl	8000d44 <__aeabi_fmul>
 800d32c:	4603      	mov	r3, r0
 800d32e:	4619      	mov	r1, r3
 800d330:	4620      	mov	r0, r4
 800d332:	f7f3 fbff 	bl	8000b34 <__addsf3>
 800d336:	4603      	mov	r3, r0
 800d338:	461c      	mov	r4, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d340:	4618      	mov	r0, r3
 800d342:	f7f3 fcff 	bl	8000d44 <__aeabi_fmul>
 800d346:	4603      	mov	r3, r0
 800d348:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7f3 fcfa 	bl	8000d44 <__aeabi_fmul>
 800d350:	4603      	mov	r3, r0
 800d352:	4619      	mov	r1, r3
 800d354:	4620      	mov	r0, r4
 800d356:	f7f3 fbeb 	bl	8000b30 <__aeabi_fsub>
 800d35a:	4603      	mov	r3, r0
 800d35c:	461c      	mov	r4, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d366:	4618      	mov	r0, r3
 800d368:	f7f3 fcec 	bl	8000d44 <__aeabi_fmul>
 800d36c:	4603      	mov	r3, r0
 800d36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d370:	4618      	mov	r0, r3
 800d372:	f7f3 fce7 	bl	8000d44 <__aeabi_fmul>
 800d376:	4603      	mov	r3, r0
 800d378:	4619      	mov	r1, r3
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7f3 fbda 	bl	8000b34 <__addsf3>
 800d380:	4603      	mov	r3, r0
 800d382:	461c      	mov	r4, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f3 fcda 	bl	8000d44 <__aeabi_fmul>
 800d390:	4603      	mov	r3, r0
 800d392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d394:	4618      	mov	r0, r3
 800d396:	f7f3 fcd5 	bl	8000d44 <__aeabi_fmul>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4619      	mov	r1, r3
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f7f3 fbc6 	bl	8000b30 <__aeabi_fsub>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7f3 fd7f 	bl	8000eac <__aeabi_fdiv>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3b6:	f7f3 fbbb 	bl	8000b30 <__aeabi_fsub>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	623b      	str	r3, [r7, #32]
	float Kt31=(Qap*Qgps_v*S3_1 - Qap*S2_1*S3_2 + Qap*S2_2*S3_1 + Qgps_v*S3_1*S4_3 - Qgps_v*S3_3*S4_1 + Qgps_v*S3_1*S4_4 - Qgps_v*S3_4*S4_1 - S2_1*S3_2*S4_3 + S2_1*S3_3*S4_2 + S2_2*S3_1*S4_3 - S2_2*S3_3*S4_1 - S2_3*S3_1*S4_2 + S2_3*S3_2*S4_1 - S2_1*S3_2*S4_4 + S2_1*S3_4*S4_2 + S2_2*S3_1*S4_4 - S2_2*S3_4*S4_1 - S2_4*S3_1*S4_2 + S2_4*S3_2*S4_1)/A;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f7f3 fcba 	bl	8000d44 <__aeabi_fmul>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7f3 fcb5 	bl	8000d44 <__aeabi_fmul>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	461c      	mov	r4, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d3e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7f3 fcac 	bl	8000d44 <__aeabi_fmul>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f3 fca7 	bl	8000d44 <__aeabi_fmul>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f7f3 fb98 	bl	8000b30 <__aeabi_fsub>
 800d400:	4603      	mov	r3, r0
 800d402:	461c      	mov	r4, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d40a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f3 fc99 	bl	8000d44 <__aeabi_fmul>
 800d412:	4603      	mov	r3, r0
 800d414:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d416:	4618      	mov	r0, r3
 800d418:	f7f3 fc94 	bl	8000d44 <__aeabi_fmul>
 800d41c:	4603      	mov	r3, r0
 800d41e:	4619      	mov	r1, r3
 800d420:	4620      	mov	r0, r4
 800d422:	f7f3 fb87 	bl	8000b34 <__addsf3>
 800d426:	4603      	mov	r3, r0
 800d428:	461c      	mov	r4, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d430:	4618      	mov	r0, r3
 800d432:	f7f3 fc87 	bl	8000d44 <__aeabi_fmul>
 800d436:	4603      	mov	r3, r0
 800d438:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7f3 fc82 	bl	8000d44 <__aeabi_fmul>
 800d440:	4603      	mov	r3, r0
 800d442:	4619      	mov	r1, r3
 800d444:	4620      	mov	r0, r4
 800d446:	f7f3 fb75 	bl	8000b34 <__addsf3>
 800d44a:	4603      	mov	r3, r0
 800d44c:	461c      	mov	r4, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d454:	4618      	mov	r0, r3
 800d456:	f7f3 fc75 	bl	8000d44 <__aeabi_fmul>
 800d45a:	4603      	mov	r3, r0
 800d45c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f3 fc70 	bl	8000d44 <__aeabi_fmul>
 800d464:	4603      	mov	r3, r0
 800d466:	4619      	mov	r1, r3
 800d468:	4620      	mov	r0, r4
 800d46a:	f7f3 fb61 	bl	8000b30 <__aeabi_fsub>
 800d46e:	4603      	mov	r3, r0
 800d470:	461c      	mov	r4, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f3 fc63 	bl	8000d44 <__aeabi_fmul>
 800d47e:	4603      	mov	r3, r0
 800d480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d482:	4618      	mov	r0, r3
 800d484:	f7f3 fc5e 	bl	8000d44 <__aeabi_fmul>
 800d488:	4603      	mov	r3, r0
 800d48a:	4619      	mov	r1, r3
 800d48c:	4620      	mov	r0, r4
 800d48e:	f7f3 fb51 	bl	8000b34 <__addsf3>
 800d492:	4603      	mov	r3, r0
 800d494:	461c      	mov	r4, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7f3 fc51 	bl	8000d44 <__aeabi_fmul>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f3 fc4c 	bl	8000d44 <__aeabi_fmul>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7f3 fb3d 	bl	8000b30 <__aeabi_fsub>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d4bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d4be:	f7f3 fc41 	bl	8000d44 <__aeabi_fmul>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f3 fc3c 	bl	8000d44 <__aeabi_fmul>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f7f3 fb2d 	bl	8000b30 <__aeabi_fsub>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461c      	mov	r4, r3
 800d4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d4de:	f7f3 fc31 	bl	8000d44 <__aeabi_fmul>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7f3 fc2c 	bl	8000d44 <__aeabi_fmul>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f7f3 fb1f 	bl	8000b34 <__addsf3>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	461c      	mov	r4, r3
 800d4fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d4fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4fe:	f7f3 fc21 	bl	8000d44 <__aeabi_fmul>
 800d502:	4603      	mov	r3, r0
 800d504:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d506:	4618      	mov	r0, r3
 800d508:	f7f3 fc1c 	bl	8000d44 <__aeabi_fmul>
 800d50c:	4603      	mov	r3, r0
 800d50e:	4619      	mov	r1, r3
 800d510:	4620      	mov	r0, r4
 800d512:	f7f3 fb0f 	bl	8000b34 <__addsf3>
 800d516:	4603      	mov	r3, r0
 800d518:	461c      	mov	r4, r3
 800d51a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d51c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d51e:	f7f3 fc11 	bl	8000d44 <__aeabi_fmul>
 800d522:	4603      	mov	r3, r0
 800d524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d526:	4618      	mov	r0, r3
 800d528:	f7f3 fc0c 	bl	8000d44 <__aeabi_fmul>
 800d52c:	4603      	mov	r3, r0
 800d52e:	4619      	mov	r1, r3
 800d530:	4620      	mov	r0, r4
 800d532:	f7f3 fafd 	bl	8000b30 <__aeabi_fsub>
 800d536:	4603      	mov	r3, r0
 800d538:	461c      	mov	r4, r3
 800d53a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d53c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d53e:	f7f3 fc01 	bl	8000d44 <__aeabi_fmul>
 800d542:	4603      	mov	r3, r0
 800d544:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d546:	4618      	mov	r0, r3
 800d548:	f7f3 fbfc 	bl	8000d44 <__aeabi_fmul>
 800d54c:	4603      	mov	r3, r0
 800d54e:	4619      	mov	r1, r3
 800d550:	4620      	mov	r0, r4
 800d552:	f7f3 faed 	bl	8000b30 <__aeabi_fsub>
 800d556:	4603      	mov	r3, r0
 800d558:	461c      	mov	r4, r3
 800d55a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d55c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d55e:	f7f3 fbf1 	bl	8000d44 <__aeabi_fmul>
 800d562:	4603      	mov	r3, r0
 800d564:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d566:	4618      	mov	r0, r3
 800d568:	f7f3 fbec 	bl	8000d44 <__aeabi_fmul>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4619      	mov	r1, r3
 800d570:	4620      	mov	r0, r4
 800d572:	f7f3 fadf 	bl	8000b34 <__addsf3>
 800d576:	4603      	mov	r3, r0
 800d578:	461c      	mov	r4, r3
 800d57a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d57c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d57e:	f7f3 fbe1 	bl	8000d44 <__aeabi_fmul>
 800d582:	4603      	mov	r3, r0
 800d584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d586:	4618      	mov	r0, r3
 800d588:	f7f3 fbdc 	bl	8000d44 <__aeabi_fmul>
 800d58c:	4603      	mov	r3, r0
 800d58e:	4619      	mov	r1, r3
 800d590:	4620      	mov	r0, r4
 800d592:	f7f3 facd 	bl	8000b30 <__aeabi_fsub>
 800d596:	4603      	mov	r3, r0
 800d598:	461c      	mov	r4, r3
 800d59a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d59c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d59e:	f7f3 fbd1 	bl	8000d44 <__aeabi_fmul>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7f3 fbcc 	bl	8000d44 <__aeabi_fmul>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f7f3 fabf 	bl	8000b34 <__addsf3>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461c      	mov	r4, r3
 800d5ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d5bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5be:	f7f3 fbc1 	bl	8000d44 <__aeabi_fmul>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f3 fbbc 	bl	8000d44 <__aeabi_fmul>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f7f3 faaf 	bl	8000b34 <__addsf3>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	461c      	mov	r4, r3
 800d5da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5de:	f7f3 fbb1 	bl	8000d44 <__aeabi_fmul>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7f3 fbac 	bl	8000d44 <__aeabi_fmul>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f7f3 fa9d 	bl	8000b30 <__aeabi_fsub>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	461c      	mov	r4, r3
 800d5fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d5fc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d5fe:	f7f3 fba1 	bl	8000d44 <__aeabi_fmul>
 800d602:	4603      	mov	r3, r0
 800d604:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d606:	4618      	mov	r0, r3
 800d608:	f7f3 fb9c 	bl	8000d44 <__aeabi_fmul>
 800d60c:	4603      	mov	r3, r0
 800d60e:	4619      	mov	r1, r3
 800d610:	4620      	mov	r0, r4
 800d612:	f7f3 fa8d 	bl	8000b30 <__aeabi_fsub>
 800d616:	4603      	mov	r3, r0
 800d618:	461c      	mov	r4, r3
 800d61a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d61c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d61e:	f7f3 fb91 	bl	8000d44 <__aeabi_fmul>
 800d622:	4603      	mov	r3, r0
 800d624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d626:	4618      	mov	r0, r3
 800d628:	f7f3 fb8c 	bl	8000d44 <__aeabi_fmul>
 800d62c:	4603      	mov	r3, r0
 800d62e:	4619      	mov	r1, r3
 800d630:	4620      	mov	r0, r4
 800d632:	f7f3 fa7f 	bl	8000b34 <__addsf3>
 800d636:	4603      	mov	r3, r0
 800d638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f3 fc36 	bl	8000eac <__aeabi_fdiv>
 800d640:	4603      	mov	r3, r0
 800d642:	61fb      	str	r3, [r7, #28]
	float Kt32=(Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1)/A;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	4619      	mov	r1, r3
 800d650:	4610      	mov	r0, r2
 800d652:	f7f3 fb77 	bl	8000d44 <__aeabi_fmul>
 800d656:	4603      	mov	r3, r0
 800d658:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7f3 fb72 	bl	8000d44 <__aeabi_fmul>
 800d660:	4603      	mov	r3, r0
 800d662:	461c      	mov	r4, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	4619      	mov	r1, r3
 800d670:	4610      	mov	r0, r2
 800d672:	f7f3 fb67 	bl	8000d44 <__aeabi_fmul>
 800d676:	4603      	mov	r3, r0
 800d678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7f3 fb62 	bl	8000d44 <__aeabi_fmul>
 800d680:	4603      	mov	r3, r0
 800d682:	4619      	mov	r1, r3
 800d684:	4620      	mov	r0, r4
 800d686:	f7f3 fa55 	bl	8000b34 <__addsf3>
 800d68a:	4603      	mov	r3, r0
 800d68c:	461c      	mov	r4, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d694:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d696:	4618      	mov	r0, r3
 800d698:	f7f3 fb54 	bl	8000d44 <__aeabi_fmul>
 800d69c:	4603      	mov	r3, r0
 800d69e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7f3 fb4f 	bl	8000d44 <__aeabi_fmul>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f7f3 fa42 	bl	8000b34 <__addsf3>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	461c      	mov	r4, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d6ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7f3 fb41 	bl	8000d44 <__aeabi_fmul>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f3 fb3c 	bl	8000d44 <__aeabi_fmul>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7f3 fa2d 	bl	8000b30 <__aeabi_fsub>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	461c      	mov	r4, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d6e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f3 fb2e 	bl	8000d44 <__aeabi_fmul>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7f3 fb29 	bl	8000d44 <__aeabi_fmul>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7f3 fa1c 	bl	8000b34 <__addsf3>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	461c      	mov	r4, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d706:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f3 fb1b 	bl	8000d44 <__aeabi_fmul>
 800d70e:	4603      	mov	r3, r0
 800d710:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d712:	4618      	mov	r0, r3
 800d714:	f7f3 fb16 	bl	8000d44 <__aeabi_fmul>
 800d718:	4603      	mov	r3, r0
 800d71a:	4619      	mov	r1, r3
 800d71c:	4620      	mov	r0, r4
 800d71e:	f7f3 fa07 	bl	8000b30 <__aeabi_fsub>
 800d722:	4603      	mov	r3, r0
 800d724:	461c      	mov	r4, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f3 fb08 	bl	8000d44 <__aeabi_fmul>
 800d734:	4603      	mov	r3, r0
 800d736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f3 fb03 	bl	8000d44 <__aeabi_fmul>
 800d73e:	4603      	mov	r3, r0
 800d740:	4619      	mov	r1, r3
 800d742:	4620      	mov	r0, r4
 800d744:	f7f3 f9f6 	bl	8000b34 <__addsf3>
 800d748:	4603      	mov	r3, r0
 800d74a:	461c      	mov	r4, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d752:	4618      	mov	r0, r3
 800d754:	f7f3 faf6 	bl	8000d44 <__aeabi_fmul>
 800d758:	4603      	mov	r3, r0
 800d75a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f3 faf1 	bl	8000d44 <__aeabi_fmul>
 800d762:	4603      	mov	r3, r0
 800d764:	4619      	mov	r1, r3
 800d766:	4620      	mov	r0, r4
 800d768:	f7f3 f9e2 	bl	8000b30 <__aeabi_fsub>
 800d76c:	4603      	mov	r3, r0
 800d76e:	461c      	mov	r4, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d778:	4618      	mov	r0, r3
 800d77a:	f7f3 fae3 	bl	8000d44 <__aeabi_fmul>
 800d77e:	4603      	mov	r3, r0
 800d780:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d782:	4618      	mov	r0, r3
 800d784:	f7f3 fade 	bl	8000d44 <__aeabi_fmul>
 800d788:	4603      	mov	r3, r0
 800d78a:	4619      	mov	r1, r3
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7f3 f9d1 	bl	8000b34 <__addsf3>
 800d792:	4603      	mov	r3, r0
 800d794:	461c      	mov	r4, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7f3 fad1 	bl	8000d44 <__aeabi_fmul>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f3 facc 	bl	8000d44 <__aeabi_fmul>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f7f3 f9bd 	bl	8000b30 <__aeabi_fsub>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	461c      	mov	r4, r3
 800d7ba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d7bc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d7c0:	f7f3 fac0 	bl	8000d44 <__aeabi_fmul>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f3 fabb 	bl	8000d44 <__aeabi_fmul>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f7f3 f9ae 	bl	8000b34 <__addsf3>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461c      	mov	r4, r3
 800d7dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7de:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d7e2:	f7f3 faaf 	bl	8000d44 <__aeabi_fmul>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7f3 faaa 	bl	8000d44 <__aeabi_fmul>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f7f3 f99b 	bl	8000b30 <__aeabi_fsub>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	461c      	mov	r4, r3
 800d7fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d800:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d802:	f7f3 fa9f 	bl	8000d44 <__aeabi_fmul>
 800d806:	4603      	mov	r3, r0
 800d808:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7f3 fa9a 	bl	8000d44 <__aeabi_fmul>
 800d810:	4603      	mov	r3, r0
 800d812:	4619      	mov	r1, r3
 800d814:	4620      	mov	r0, r4
 800d816:	f7f3 f98b 	bl	8000b30 <__aeabi_fsub>
 800d81a:	4603      	mov	r3, r0
 800d81c:	461c      	mov	r4, r3
 800d81e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d820:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d822:	f7f3 fa8f 	bl	8000d44 <__aeabi_fmul>
 800d826:	4603      	mov	r3, r0
 800d828:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f3 fa8a 	bl	8000d44 <__aeabi_fmul>
 800d830:	4603      	mov	r3, r0
 800d832:	4619      	mov	r1, r3
 800d834:	4620      	mov	r0, r4
 800d836:	f7f3 f97d 	bl	8000b34 <__addsf3>
 800d83a:	4603      	mov	r3, r0
 800d83c:	461c      	mov	r4, r3
 800d83e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d840:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d842:	f7f3 fa7f 	bl	8000d44 <__aeabi_fmul>
 800d846:	4603      	mov	r3, r0
 800d848:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f3 fa7a 	bl	8000d44 <__aeabi_fmul>
 800d850:	4603      	mov	r3, r0
 800d852:	4619      	mov	r1, r3
 800d854:	4620      	mov	r0, r4
 800d856:	f7f3 f96d 	bl	8000b34 <__addsf3>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461c      	mov	r4, r3
 800d85e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d860:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d862:	f7f3 fa6f 	bl	8000d44 <__aeabi_fmul>
 800d866:	4603      	mov	r3, r0
 800d868:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f3 fa6a 	bl	8000d44 <__aeabi_fmul>
 800d870:	4603      	mov	r3, r0
 800d872:	4619      	mov	r1, r3
 800d874:	4620      	mov	r0, r4
 800d876:	f7f3 f95b 	bl	8000b30 <__aeabi_fsub>
 800d87a:	4603      	mov	r3, r0
 800d87c:	461c      	mov	r4, r3
 800d87e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d880:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d884:	f7f3 fa5e 	bl	8000d44 <__aeabi_fmul>
 800d888:	4603      	mov	r3, r0
 800d88a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f3 fa59 	bl	8000d44 <__aeabi_fmul>
 800d892:	4603      	mov	r3, r0
 800d894:	4619      	mov	r1, r3
 800d896:	4620      	mov	r0, r4
 800d898:	f7f3 f94c 	bl	8000b34 <__addsf3>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461c      	mov	r4, r3
 800d8a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d8a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d8a6:	f7f3 fa4d 	bl	8000d44 <__aeabi_fmul>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f3 fa48 	bl	8000d44 <__aeabi_fmul>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7f3 f939 	bl	8000b30 <__aeabi_fsub>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	461c      	mov	r4, r3
 800d8c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d8c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d8c6:	f7f3 fa3d 	bl	8000d44 <__aeabi_fmul>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7f3 fa38 	bl	8000d44 <__aeabi_fmul>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f7f3 f929 	bl	8000b30 <__aeabi_fsub>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461c      	mov	r4, r3
 800d8e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d8e4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d8e6:	f7f3 fa2d 	bl	8000d44 <__aeabi_fmul>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f3 fa28 	bl	8000d44 <__aeabi_fmul>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f7f3 f91b 	bl	8000b34 <__addsf3>
 800d8fe:	4603      	mov	r3, r0
 800d900:	461c      	mov	r4, r3
 800d902:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d904:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d906:	f7f3 fa1d 	bl	8000d44 <__aeabi_fmul>
 800d90a:	4603      	mov	r3, r0
 800d90c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f3 fa18 	bl	8000d44 <__aeabi_fmul>
 800d914:	4603      	mov	r3, r0
 800d916:	4619      	mov	r1, r3
 800d918:	4620      	mov	r0, r4
 800d91a:	f7f3 f90b 	bl	8000b34 <__addsf3>
 800d91e:	4603      	mov	r3, r0
 800d920:	461c      	mov	r4, r3
 800d922:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d924:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d926:	f7f3 fa0d 	bl	8000d44 <__aeabi_fmul>
 800d92a:	4603      	mov	r3, r0
 800d92c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d92e:	4618      	mov	r0, r3
 800d930:	f7f3 fa08 	bl	8000d44 <__aeabi_fmul>
 800d934:	4603      	mov	r3, r0
 800d936:	4619      	mov	r1, r3
 800d938:	4620      	mov	r0, r4
 800d93a:	f7f3 f8f9 	bl	8000b30 <__aeabi_fsub>
 800d93e:	4603      	mov	r3, r0
 800d940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d942:	4618      	mov	r0, r3
 800d944:	f7f3 fab2 	bl	8000eac <__aeabi_fdiv>
 800d948:	4603      	mov	r3, r0
 800d94a:	61bb      	str	r3, [r7, #24]
	float Kt33=(Qap*Qgps*S3_2 + Qap*S1_1*S3_2 - Qap*S1_2*S3_1 + Qgps*S3_2*S4_3 - Qgps*S3_3*S4_2 + Qgps*S3_2*S4_4 - Qgps*S3_4*S4_2 + S1_1*S3_2*S4_3 - S1_1*S3_3*S4_2 - S1_2*S3_1*S4_3 + S1_2*S3_3*S4_1 + S1_3*S3_1*S4_2 - S1_3*S3_2*S4_1 + S1_1*S3_2*S4_4 - S1_1*S3_4*S4_2 - S1_2*S3_1*S4_4 + S1_2*S3_4*S4_1 + S1_4*S3_1*S4_2 - S1_4*S3_2*S4_1)/A;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f7f3 f9f2 	bl	8000d44 <__aeabi_fmul>
 800d960:	4603      	mov	r3, r0
 800d962:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d964:	4618      	mov	r0, r3
 800d966:	f7f3 f9ed 	bl	8000d44 <__aeabi_fmul>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461c      	mov	r4, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d974:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f3 f9e3 	bl	8000d44 <__aeabi_fmul>
 800d97e:	4603      	mov	r3, r0
 800d980:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d982:	4618      	mov	r0, r3
 800d984:	f7f3 f9de 	bl	8000d44 <__aeabi_fmul>
 800d988:	4603      	mov	r3, r0
 800d98a:	4619      	mov	r1, r3
 800d98c:	4620      	mov	r0, r4
 800d98e:	f7f3 f8d1 	bl	8000b34 <__addsf3>
 800d992:	4603      	mov	r3, r0
 800d994:	461c      	mov	r4, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d99c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f3 f9d0 	bl	8000d44 <__aeabi_fmul>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f3 f9cb 	bl	8000d44 <__aeabi_fmul>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f7f3 f8bc 	bl	8000b30 <__aeabi_fsub>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d9c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f3 f9bd 	bl	8000d44 <__aeabi_fmul>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7f3 f9b8 	bl	8000d44 <__aeabi_fmul>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f7f3 f8ab 	bl	8000b34 <__addsf3>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	461c      	mov	r4, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d9e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7f3 f9aa 	bl	8000d44 <__aeabi_fmul>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f3 f9a5 	bl	8000d44 <__aeabi_fmul>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7f3 f896 	bl	8000b30 <__aeabi_fsub>
 800da04:	4603      	mov	r3, r0
 800da06:	461c      	mov	r4, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800da0e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800da10:	4618      	mov	r0, r3
 800da12:	f7f3 f997 	bl	8000d44 <__aeabi_fmul>
 800da16:	4603      	mov	r3, r0
 800da18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f3 f992 	bl	8000d44 <__aeabi_fmul>
 800da20:	4603      	mov	r3, r0
 800da22:	4619      	mov	r1, r3
 800da24:	4620      	mov	r0, r4
 800da26:	f7f3 f885 	bl	8000b34 <__addsf3>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461c      	mov	r4, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800da34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da36:	4618      	mov	r0, r3
 800da38:	f7f3 f984 	bl	8000d44 <__aeabi_fmul>
 800da3c:	4603      	mov	r3, r0
 800da3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800da40:	4618      	mov	r0, r3
 800da42:	f7f3 f97f 	bl	8000d44 <__aeabi_fmul>
 800da46:	4603      	mov	r3, r0
 800da48:	4619      	mov	r1, r3
 800da4a:	4620      	mov	r0, r4
 800da4c:	f7f3 f870 	bl	8000b30 <__aeabi_fsub>
 800da50:	4603      	mov	r3, r0
 800da52:	461c      	mov	r4, r3
 800da54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800da56:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800da5a:	f7f3 f973 	bl	8000d44 <__aeabi_fmul>
 800da5e:	4603      	mov	r3, r0
 800da60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da62:	4618      	mov	r0, r3
 800da64:	f7f3 f96e 	bl	8000d44 <__aeabi_fmul>
 800da68:	4603      	mov	r3, r0
 800da6a:	4619      	mov	r1, r3
 800da6c:	4620      	mov	r0, r4
 800da6e:	f7f3 f861 	bl	8000b34 <__addsf3>
 800da72:	4603      	mov	r3, r0
 800da74:	461c      	mov	r4, r3
 800da76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da78:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800da7c:	f7f3 f962 	bl	8000d44 <__aeabi_fmul>
 800da80:	4603      	mov	r3, r0
 800da82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800da84:	4618      	mov	r0, r3
 800da86:	f7f3 f95d 	bl	8000d44 <__aeabi_fmul>
 800da8a:	4603      	mov	r3, r0
 800da8c:	4619      	mov	r1, r3
 800da8e:	4620      	mov	r0, r4
 800da90:	f7f3 f84e 	bl	8000b30 <__aeabi_fsub>
 800da94:	4603      	mov	r3, r0
 800da96:	461c      	mov	r4, r3
 800da98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da9a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800da9c:	f7f3 f952 	bl	8000d44 <__aeabi_fmul>
 800daa0:	4603      	mov	r3, r0
 800daa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7f3 f94d 	bl	8000d44 <__aeabi_fmul>
 800daaa:	4603      	mov	r3, r0
 800daac:	4619      	mov	r1, r3
 800daae:	4620      	mov	r0, r4
 800dab0:	f7f3 f83e 	bl	8000b30 <__aeabi_fsub>
 800dab4:	4603      	mov	r3, r0
 800dab6:	461c      	mov	r4, r3
 800dab8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800daba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dabc:	f7f3 f942 	bl	8000d44 <__aeabi_fmul>
 800dac0:	4603      	mov	r3, r0
 800dac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f3 f93d 	bl	8000d44 <__aeabi_fmul>
 800daca:	4603      	mov	r3, r0
 800dacc:	4619      	mov	r1, r3
 800dace:	4620      	mov	r0, r4
 800dad0:	f7f3 f830 	bl	8000b34 <__addsf3>
 800dad4:	4603      	mov	r3, r0
 800dad6:	461c      	mov	r4, r3
 800dad8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dada:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800dadc:	f7f3 f932 	bl	8000d44 <__aeabi_fmul>
 800dae0:	4603      	mov	r3, r0
 800dae2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7f3 f92d 	bl	8000d44 <__aeabi_fmul>
 800daea:	4603      	mov	r3, r0
 800daec:	4619      	mov	r1, r3
 800daee:	4620      	mov	r0, r4
 800daf0:	f7f3 f820 	bl	8000b34 <__addsf3>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461c      	mov	r4, r3
 800daf8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dafa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800dafc:	f7f3 f922 	bl	8000d44 <__aeabi_fmul>
 800db00:	4603      	mov	r3, r0
 800db02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db04:	4618      	mov	r0, r3
 800db06:	f7f3 f91d 	bl	8000d44 <__aeabi_fmul>
 800db0a:	4603      	mov	r3, r0
 800db0c:	4619      	mov	r1, r3
 800db0e:	4620      	mov	r0, r4
 800db10:	f7f3 f80e 	bl	8000b30 <__aeabi_fsub>
 800db14:	4603      	mov	r3, r0
 800db16:	461c      	mov	r4, r3
 800db18:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800db1a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800db1e:	f7f3 f911 	bl	8000d44 <__aeabi_fmul>
 800db22:	4603      	mov	r3, r0
 800db24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db26:	4618      	mov	r0, r3
 800db28:	f7f3 f90c 	bl	8000d44 <__aeabi_fmul>
 800db2c:	4603      	mov	r3, r0
 800db2e:	4619      	mov	r1, r3
 800db30:	4620      	mov	r0, r4
 800db32:	f7f2 ffff 	bl	8000b34 <__addsf3>
 800db36:	4603      	mov	r3, r0
 800db38:	461c      	mov	r4, r3
 800db3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800db40:	f7f3 f900 	bl	8000d44 <__aeabi_fmul>
 800db44:	4603      	mov	r3, r0
 800db46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db48:	4618      	mov	r0, r3
 800db4a:	f7f3 f8fb 	bl	8000d44 <__aeabi_fmul>
 800db4e:	4603      	mov	r3, r0
 800db50:	4619      	mov	r1, r3
 800db52:	4620      	mov	r0, r4
 800db54:	f7f2 ffec 	bl	8000b30 <__aeabi_fsub>
 800db58:	4603      	mov	r3, r0
 800db5a:	461c      	mov	r4, r3
 800db5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db5e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800db60:	f7f3 f8f0 	bl	8000d44 <__aeabi_fmul>
 800db64:	4603      	mov	r3, r0
 800db66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f3 f8eb 	bl	8000d44 <__aeabi_fmul>
 800db6e:	4603      	mov	r3, r0
 800db70:	4619      	mov	r1, r3
 800db72:	4620      	mov	r0, r4
 800db74:	f7f2 ffdc 	bl	8000b30 <__aeabi_fsub>
 800db78:	4603      	mov	r3, r0
 800db7a:	461c      	mov	r4, r3
 800db7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db7e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800db80:	f7f3 f8e0 	bl	8000d44 <__aeabi_fmul>
 800db84:	4603      	mov	r3, r0
 800db86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db88:	4618      	mov	r0, r3
 800db8a:	f7f3 f8db 	bl	8000d44 <__aeabi_fmul>
 800db8e:	4603      	mov	r3, r0
 800db90:	4619      	mov	r1, r3
 800db92:	4620      	mov	r0, r4
 800db94:	f7f2 ffce 	bl	8000b34 <__addsf3>
 800db98:	4603      	mov	r3, r0
 800db9a:	461c      	mov	r4, r3
 800db9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dba0:	f7f3 f8d0 	bl	8000d44 <__aeabi_fmul>
 800dba4:	4603      	mov	r3, r0
 800dba6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7f3 f8cb 	bl	8000d44 <__aeabi_fmul>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f7f2 ffbe 	bl	8000b34 <__addsf3>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	461c      	mov	r4, r3
 800dbbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dbbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dbc0:	f7f3 f8c0 	bl	8000d44 <__aeabi_fmul>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f3 f8bb 	bl	8000d44 <__aeabi_fmul>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7f2 ffac 	bl	8000b30 <__aeabi_fsub>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7f3 f965 	bl	8000eac <__aeabi_fdiv>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	617b      	str	r3, [r7, #20]
	float Kt41=(Qap*Qgps_v*S4_1 - Qap*S2_1*S4_2 + Qap*S2_2*S4_1 - Qgps_v*S3_1*S4_3 + Qgps_v*S3_3*S4_1 - Qgps_v*S3_1*S4_4 + Qgps_v*S3_4*S4_1 + S2_1*S3_2*S4_3 - S2_1*S3_3*S4_2 - S2_2*S3_1*S4_3 + S2_2*S3_3*S4_1 + S2_3*S3_1*S4_2 - S2_3*S3_2*S4_1 + S2_1*S3_2*S4_4 - S2_1*S3_4*S4_2 - S2_2*S3_1*S4_4 + S2_2*S3_4*S4_1 + S2_4*S3_1*S4_2 - S2_4*S3_2*S4_1)/A;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4610      	mov	r0, r2
 800dbf4:	f7f3 f8a6 	bl	8000d44 <__aeabi_fmul>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7f3 f8a1 	bl	8000d44 <__aeabi_fmul>
 800dc02:	4603      	mov	r3, r0
 800dc04:	461c      	mov	r4, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800dc0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f3 f898 	bl	8000d44 <__aeabi_fmul>
 800dc14:	4603      	mov	r3, r0
 800dc16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f3 f893 	bl	8000d44 <__aeabi_fmul>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4619      	mov	r1, r3
 800dc22:	4620      	mov	r0, r4
 800dc24:	f7f2 ff84 	bl	8000b30 <__aeabi_fsub>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461c      	mov	r4, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800dc32:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7f3 f885 	bl	8000d44 <__aeabi_fmul>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f3 f880 	bl	8000d44 <__aeabi_fmul>
 800dc44:	4603      	mov	r3, r0
 800dc46:	4619      	mov	r1, r3
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7f2 ff73 	bl	8000b34 <__addsf3>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	461c      	mov	r4, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7f3 f873 	bl	8000d44 <__aeabi_fmul>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7f3 f86e 	bl	8000d44 <__aeabi_fmul>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f7f2 ff5f 	bl	8000b30 <__aeabi_fsub>
 800dc72:	4603      	mov	r3, r0
 800dc74:	461c      	mov	r4, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f3 f861 	bl	8000d44 <__aeabi_fmul>
 800dc82:	4603      	mov	r3, r0
 800dc84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7f3 f85c 	bl	8000d44 <__aeabi_fmul>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7f2 ff4f 	bl	8000b34 <__addsf3>
 800dc96:	4603      	mov	r3, r0
 800dc98:	461c      	mov	r4, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7f3 f84f 	bl	8000d44 <__aeabi_fmul>
 800dca6:	4603      	mov	r3, r0
 800dca8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f3 f84a 	bl	8000d44 <__aeabi_fmul>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7f2 ff3b 	bl	8000b30 <__aeabi_fsub>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	461c      	mov	r4, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f3 f83d 	bl	8000d44 <__aeabi_fmul>
 800dcca:	4603      	mov	r3, r0
 800dccc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7f3 f838 	bl	8000d44 <__aeabi_fmul>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7f2 ff2b 	bl	8000b34 <__addsf3>
 800dcde:	4603      	mov	r3, r0
 800dce0:	461c      	mov	r4, r3
 800dce2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dce4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dce6:	f7f3 f82d 	bl	8000d44 <__aeabi_fmul>
 800dcea:	4603      	mov	r3, r0
 800dcec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f3 f828 	bl	8000d44 <__aeabi_fmul>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f7f2 ff1b 	bl	8000b34 <__addsf3>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	461c      	mov	r4, r3
 800dd02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd04:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dd06:	f7f3 f81d 	bl	8000d44 <__aeabi_fmul>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f3 f818 	bl	8000d44 <__aeabi_fmul>
 800dd14:	4603      	mov	r3, r0
 800dd16:	4619      	mov	r1, r3
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f7f2 ff09 	bl	8000b30 <__aeabi_fsub>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	461c      	mov	r4, r3
 800dd22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd26:	f7f3 f80d 	bl	8000d44 <__aeabi_fmul>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7f3 f808 	bl	8000d44 <__aeabi_fmul>
 800dd34:	4603      	mov	r3, r0
 800dd36:	4619      	mov	r1, r3
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f7f2 fef9 	bl	8000b30 <__aeabi_fsub>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	461c      	mov	r4, r3
 800dd42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd46:	f7f2 fffd 	bl	8000d44 <__aeabi_fmul>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f2 fff8 	bl	8000d44 <__aeabi_fmul>
 800dd54:	4603      	mov	r3, r0
 800dd56:	4619      	mov	r1, r3
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7f2 feeb 	bl	8000b34 <__addsf3>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	461c      	mov	r4, r3
 800dd62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dd66:	f7f2 ffed 	bl	8000d44 <__aeabi_fmul>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7f2 ffe8 	bl	8000d44 <__aeabi_fmul>
 800dd74:	4603      	mov	r3, r0
 800dd76:	4619      	mov	r1, r3
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f7f2 fedb 	bl	8000b34 <__addsf3>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	461c      	mov	r4, r3
 800dd82:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dd84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800dd86:	f7f2 ffdd 	bl	8000d44 <__aeabi_fmul>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7f2 ffd8 	bl	8000d44 <__aeabi_fmul>
 800dd94:	4603      	mov	r3, r0
 800dd96:	4619      	mov	r1, r3
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f7f2 fec9 	bl	8000b30 <__aeabi_fsub>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	461c      	mov	r4, r3
 800dda2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dda4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dda6:	f7f2 ffcd 	bl	8000d44 <__aeabi_fmul>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f2 ffc8 	bl	8000d44 <__aeabi_fmul>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f2 febb 	bl	8000b34 <__addsf3>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461c      	mov	r4, r3
 800ddc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ddc4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ddc6:	f7f2 ffbd 	bl	8000d44 <__aeabi_fmul>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 ffb8 	bl	8000d44 <__aeabi_fmul>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f7f2 fea9 	bl	8000b30 <__aeabi_fsub>
 800ddde:	4603      	mov	r3, r0
 800dde0:	461c      	mov	r4, r3
 800dde2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dde4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dde6:	f7f2 ffad 	bl	8000d44 <__aeabi_fmul>
 800ddea:	4603      	mov	r3, r0
 800ddec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f2 ffa8 	bl	8000d44 <__aeabi_fmul>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7f2 fe99 	bl	8000b30 <__aeabi_fsub>
 800ddfe:	4603      	mov	r3, r0
 800de00:	461c      	mov	r4, r3
 800de02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de06:	f7f2 ff9d 	bl	8000d44 <__aeabi_fmul>
 800de0a:	4603      	mov	r3, r0
 800de0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de0e:	4618      	mov	r0, r3
 800de10:	f7f2 ff98 	bl	8000d44 <__aeabi_fmul>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	4620      	mov	r0, r4
 800de1a:	f7f2 fe8b 	bl	8000b34 <__addsf3>
 800de1e:	4603      	mov	r3, r0
 800de20:	461c      	mov	r4, r3
 800de22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800de26:	f7f2 ff8d 	bl	8000d44 <__aeabi_fmul>
 800de2a:	4603      	mov	r3, r0
 800de2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800de2e:	4618      	mov	r0, r3
 800de30:	f7f2 ff88 	bl	8000d44 <__aeabi_fmul>
 800de34:	4603      	mov	r3, r0
 800de36:	4619      	mov	r1, r3
 800de38:	4620      	mov	r0, r4
 800de3a:	f7f2 fe7b 	bl	8000b34 <__addsf3>
 800de3e:	4603      	mov	r3, r0
 800de40:	461c      	mov	r4, r3
 800de42:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de44:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800de46:	f7f2 ff7d 	bl	8000d44 <__aeabi_fmul>
 800de4a:	4603      	mov	r3, r0
 800de4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de4e:	4618      	mov	r0, r3
 800de50:	f7f2 ff78 	bl	8000d44 <__aeabi_fmul>
 800de54:	4603      	mov	r3, r0
 800de56:	4619      	mov	r1, r3
 800de58:	4620      	mov	r0, r4
 800de5a:	f7f2 fe69 	bl	8000b30 <__aeabi_fsub>
 800de5e:	4603      	mov	r3, r0
 800de60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de62:	4618      	mov	r0, r3
 800de64:	f7f3 f822 	bl	8000eac <__aeabi_fdiv>
 800de68:	4603      	mov	r3, r0
 800de6a:	613b      	str	r3, [r7, #16]
	float Kt42=(Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1)/A;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7f2 ff63 	bl	8000d44 <__aeabi_fmul>
 800de7e:	4603      	mov	r3, r0
 800de80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de82:	4618      	mov	r0, r3
 800de84:	f7f2 ff5e 	bl	8000d44 <__aeabi_fmul>
 800de88:	4603      	mov	r3, r0
 800de8a:	461c      	mov	r4, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7f2 ff53 	bl	8000d44 <__aeabi_fmul>
 800de9e:	4603      	mov	r3, r0
 800dea0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f2 ff4e 	bl	8000d44 <__aeabi_fmul>
 800dea8:	4603      	mov	r3, r0
 800deaa:	4619      	mov	r1, r3
 800deac:	4620      	mov	r0, r4
 800deae:	f7f2 fe41 	bl	8000b34 <__addsf3>
 800deb2:	4603      	mov	r3, r0
 800deb4:	461c      	mov	r4, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800debc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800debe:	4618      	mov	r0, r3
 800dec0:	f7f2 ff40 	bl	8000d44 <__aeabi_fmul>
 800dec4:	4603      	mov	r3, r0
 800dec6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dec8:	4618      	mov	r0, r3
 800deca:	f7f2 ff3b 	bl	8000d44 <__aeabi_fmul>
 800dece:	4603      	mov	r3, r0
 800ded0:	4619      	mov	r1, r3
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7f2 fe2e 	bl	8000b34 <__addsf3>
 800ded8:	4603      	mov	r3, r0
 800deda:	461c      	mov	r4, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7f2 ff2d 	bl	8000d44 <__aeabi_fmul>
 800deea:	4603      	mov	r3, r0
 800deec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800deee:	4618      	mov	r0, r3
 800def0:	f7f2 ff28 	bl	8000d44 <__aeabi_fmul>
 800def4:	4603      	mov	r3, r0
 800def6:	4619      	mov	r1, r3
 800def8:	4620      	mov	r0, r4
 800defa:	f7f2 fe19 	bl	8000b30 <__aeabi_fsub>
 800defe:	4603      	mov	r3, r0
 800df00:	461c      	mov	r4, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800df08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7f2 ff1a 	bl	8000d44 <__aeabi_fmul>
 800df10:	4603      	mov	r3, r0
 800df12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df14:	4618      	mov	r0, r3
 800df16:	f7f2 ff15 	bl	8000d44 <__aeabi_fmul>
 800df1a:	4603      	mov	r3, r0
 800df1c:	4619      	mov	r1, r3
 800df1e:	4620      	mov	r0, r4
 800df20:	f7f2 fe08 	bl	8000b34 <__addsf3>
 800df24:	4603      	mov	r3, r0
 800df26:	461c      	mov	r4, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800df2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df30:	4618      	mov	r0, r3
 800df32:	f7f2 ff07 	bl	8000d44 <__aeabi_fmul>
 800df36:	4603      	mov	r3, r0
 800df38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7f2 ff02 	bl	8000d44 <__aeabi_fmul>
 800df40:	4603      	mov	r3, r0
 800df42:	4619      	mov	r1, r3
 800df44:	4620      	mov	r0, r4
 800df46:	f7f2 fdf3 	bl	8000b30 <__aeabi_fsub>
 800df4a:	4603      	mov	r3, r0
 800df4c:	461c      	mov	r4, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800df56:	4618      	mov	r0, r3
 800df58:	f7f2 fef4 	bl	8000d44 <__aeabi_fmul>
 800df5c:	4603      	mov	r3, r0
 800df5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df60:	4618      	mov	r0, r3
 800df62:	f7f2 feef 	bl	8000d44 <__aeabi_fmul>
 800df66:	4603      	mov	r3, r0
 800df68:	4619      	mov	r1, r3
 800df6a:	4620      	mov	r0, r4
 800df6c:	f7f2 fde2 	bl	8000b34 <__addsf3>
 800df70:	4603      	mov	r3, r0
 800df72:	461c      	mov	r4, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f2 fee2 	bl	8000d44 <__aeabi_fmul>
 800df80:	4603      	mov	r3, r0
 800df82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df84:	4618      	mov	r0, r3
 800df86:	f7f2 fedd 	bl	8000d44 <__aeabi_fmul>
 800df8a:	4603      	mov	r3, r0
 800df8c:	4619      	mov	r1, r3
 800df8e:	4620      	mov	r0, r4
 800df90:	f7f2 fdce 	bl	8000b30 <__aeabi_fsub>
 800df94:	4603      	mov	r3, r0
 800df96:	461c      	mov	r4, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f2 fecf 	bl	8000d44 <__aeabi_fmul>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7f2 feca 	bl	8000d44 <__aeabi_fmul>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f7f2 fdbd 	bl	8000b34 <__addsf3>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	461c      	mov	r4, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f2 febd 	bl	8000d44 <__aeabi_fmul>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f2 feb8 	bl	8000d44 <__aeabi_fmul>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f7f2 fda9 	bl	8000b30 <__aeabi_fsub>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	461c      	mov	r4, r3
 800dfe2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dfe4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800dfe8:	f7f2 feac 	bl	8000d44 <__aeabi_fmul>
 800dfec:	4603      	mov	r3, r0
 800dfee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7f2 fea7 	bl	8000d44 <__aeabi_fmul>
 800dff6:	4603      	mov	r3, r0
 800dff8:	4619      	mov	r1, r3
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7f2 fd9a 	bl	8000b34 <__addsf3>
 800e000:	4603      	mov	r3, r0
 800e002:	461c      	mov	r4, r3
 800e004:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e006:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e00a:	f7f2 fe9b 	bl	8000d44 <__aeabi_fmul>
 800e00e:	4603      	mov	r3, r0
 800e010:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e012:	4618      	mov	r0, r3
 800e014:	f7f2 fe96 	bl	8000d44 <__aeabi_fmul>
 800e018:	4603      	mov	r3, r0
 800e01a:	4619      	mov	r1, r3
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7f2 fd87 	bl	8000b30 <__aeabi_fsub>
 800e022:	4603      	mov	r3, r0
 800e024:	461c      	mov	r4, r3
 800e026:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e028:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e02a:	f7f2 fe8b 	bl	8000d44 <__aeabi_fmul>
 800e02e:	4603      	mov	r3, r0
 800e030:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e032:	4618      	mov	r0, r3
 800e034:	f7f2 fe86 	bl	8000d44 <__aeabi_fmul>
 800e038:	4603      	mov	r3, r0
 800e03a:	4619      	mov	r1, r3
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7f2 fd77 	bl	8000b30 <__aeabi_fsub>
 800e042:	4603      	mov	r3, r0
 800e044:	461c      	mov	r4, r3
 800e046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e048:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e04a:	f7f2 fe7b 	bl	8000d44 <__aeabi_fmul>
 800e04e:	4603      	mov	r3, r0
 800e050:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e052:	4618      	mov	r0, r3
 800e054:	f7f2 fe76 	bl	8000d44 <__aeabi_fmul>
 800e058:	4603      	mov	r3, r0
 800e05a:	4619      	mov	r1, r3
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7f2 fd69 	bl	8000b34 <__addsf3>
 800e062:	4603      	mov	r3, r0
 800e064:	461c      	mov	r4, r3
 800e066:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e068:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e06a:	f7f2 fe6b 	bl	8000d44 <__aeabi_fmul>
 800e06e:	4603      	mov	r3, r0
 800e070:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e072:	4618      	mov	r0, r3
 800e074:	f7f2 fe66 	bl	8000d44 <__aeabi_fmul>
 800e078:	4603      	mov	r3, r0
 800e07a:	4619      	mov	r1, r3
 800e07c:	4620      	mov	r0, r4
 800e07e:	f7f2 fd59 	bl	8000b34 <__addsf3>
 800e082:	4603      	mov	r3, r0
 800e084:	461c      	mov	r4, r3
 800e086:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e088:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e08a:	f7f2 fe5b 	bl	8000d44 <__aeabi_fmul>
 800e08e:	4603      	mov	r3, r0
 800e090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e092:	4618      	mov	r0, r3
 800e094:	f7f2 fe56 	bl	8000d44 <__aeabi_fmul>
 800e098:	4603      	mov	r3, r0
 800e09a:	4619      	mov	r1, r3
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7f2 fd47 	bl	8000b30 <__aeabi_fsub>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	461c      	mov	r4, r3
 800e0a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e0a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e0ac:	f7f2 fe4a 	bl	8000d44 <__aeabi_fmul>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f2 fe45 	bl	8000d44 <__aeabi_fmul>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7f2 fd38 	bl	8000b34 <__addsf3>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	461c      	mov	r4, r3
 800e0c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e0ca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e0ce:	f7f2 fe39 	bl	8000d44 <__aeabi_fmul>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f2 fe34 	bl	8000d44 <__aeabi_fmul>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f7f2 fd25 	bl	8000b30 <__aeabi_fsub>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461c      	mov	r4, r3
 800e0ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e0ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e0ee:	f7f2 fe29 	bl	8000d44 <__aeabi_fmul>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f2 fe24 	bl	8000d44 <__aeabi_fmul>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	4619      	mov	r1, r3
 800e100:	4620      	mov	r0, r4
 800e102:	f7f2 fd15 	bl	8000b30 <__aeabi_fsub>
 800e106:	4603      	mov	r3, r0
 800e108:	461c      	mov	r4, r3
 800e10a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e10c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e10e:	f7f2 fe19 	bl	8000d44 <__aeabi_fmul>
 800e112:	4603      	mov	r3, r0
 800e114:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e116:	4618      	mov	r0, r3
 800e118:	f7f2 fe14 	bl	8000d44 <__aeabi_fmul>
 800e11c:	4603      	mov	r3, r0
 800e11e:	4619      	mov	r1, r3
 800e120:	4620      	mov	r0, r4
 800e122:	f7f2 fd07 	bl	8000b34 <__addsf3>
 800e126:	4603      	mov	r3, r0
 800e128:	461c      	mov	r4, r3
 800e12a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e12c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e12e:	f7f2 fe09 	bl	8000d44 <__aeabi_fmul>
 800e132:	4603      	mov	r3, r0
 800e134:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e136:	4618      	mov	r0, r3
 800e138:	f7f2 fe04 	bl	8000d44 <__aeabi_fmul>
 800e13c:	4603      	mov	r3, r0
 800e13e:	4619      	mov	r1, r3
 800e140:	4620      	mov	r0, r4
 800e142:	f7f2 fcf7 	bl	8000b34 <__addsf3>
 800e146:	4603      	mov	r3, r0
 800e148:	461c      	mov	r4, r3
 800e14a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e14c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e14e:	f7f2 fdf9 	bl	8000d44 <__aeabi_fmul>
 800e152:	4603      	mov	r3, r0
 800e154:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e156:	4618      	mov	r0, r3
 800e158:	f7f2 fdf4 	bl	8000d44 <__aeabi_fmul>
 800e15c:	4603      	mov	r3, r0
 800e15e:	4619      	mov	r1, r3
 800e160:	4620      	mov	r0, r4
 800e162:	f7f2 fce5 	bl	8000b30 <__aeabi_fsub>
 800e166:	4603      	mov	r3, r0
 800e168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f2 fe9e 	bl	8000eac <__aeabi_fdiv>
 800e170:	4603      	mov	r3, r0
 800e172:	60fb      	str	r3, [r7, #12]
	float Kt43=(Qap*Qgps*S4_2 + Qap*S1_1*S4_2 - Qap*S1_2*S4_1 - Qgps*S3_2*S4_3 + Qgps*S3_3*S4_2 - Qgps*S3_2*S4_4 + Qgps*S3_4*S4_2 - S1_1*S3_2*S4_3 + S1_1*S3_3*S4_2 + S1_2*S3_1*S4_3 - S1_2*S3_3*S4_1 - S1_3*S3_1*S4_2 + S1_3*S3_2*S4_1 - S1_1*S3_2*S4_4 + S1_1*S3_4*S4_2 + S1_2*S3_1*S4_4 - S1_2*S3_4*S4_1 - S1_4*S3_1*S4_2 + S1_4*S3_2*S4_1)/A;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f7f2 fdde 	bl	8000d44 <__aeabi_fmul>
 800e188:	4603      	mov	r3, r0
 800e18a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f2 fdd9 	bl	8000d44 <__aeabi_fmul>
 800e192:	4603      	mov	r3, r0
 800e194:	461c      	mov	r4, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e19c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7f2 fdcf 	bl	8000d44 <__aeabi_fmul>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7f2 fdca 	bl	8000d44 <__aeabi_fmul>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f7f2 fcbd 	bl	8000b34 <__addsf3>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	461c      	mov	r4, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e1c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f2 fdbc 	bl	8000d44 <__aeabi_fmul>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7f2 fdb7 	bl	8000d44 <__aeabi_fmul>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f7f2 fca8 	bl	8000b30 <__aeabi_fsub>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	461c      	mov	r4, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e1ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7f2 fda9 	bl	8000d44 <__aeabi_fmul>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7f2 fda4 	bl	8000d44 <__aeabi_fmul>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	4619      	mov	r1, r3
 800e200:	4620      	mov	r0, r4
 800e202:	f7f2 fc95 	bl	8000b30 <__aeabi_fsub>
 800e206:	4603      	mov	r3, r0
 800e208:	461c      	mov	r4, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e210:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e212:	4618      	mov	r0, r3
 800e214:	f7f2 fd96 	bl	8000d44 <__aeabi_fmul>
 800e218:	4603      	mov	r3, r0
 800e21a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f2 fd91 	bl	8000d44 <__aeabi_fmul>
 800e222:	4603      	mov	r3, r0
 800e224:	4619      	mov	r1, r3
 800e226:	4620      	mov	r0, r4
 800e228:	f7f2 fc84 	bl	8000b34 <__addsf3>
 800e22c:	4603      	mov	r3, r0
 800e22e:	461c      	mov	r4, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e236:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e238:	4618      	mov	r0, r3
 800e23a:	f7f2 fd83 	bl	8000d44 <__aeabi_fmul>
 800e23e:	4603      	mov	r3, r0
 800e240:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e242:	4618      	mov	r0, r3
 800e244:	f7f2 fd7e 	bl	8000d44 <__aeabi_fmul>
 800e248:	4603      	mov	r3, r0
 800e24a:	4619      	mov	r1, r3
 800e24c:	4620      	mov	r0, r4
 800e24e:	f7f2 fc6f 	bl	8000b30 <__aeabi_fsub>
 800e252:	4603      	mov	r3, r0
 800e254:	461c      	mov	r4, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e25c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f2 fd70 	bl	8000d44 <__aeabi_fmul>
 800e264:	4603      	mov	r3, r0
 800e266:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f2 fd6b 	bl	8000d44 <__aeabi_fmul>
 800e26e:	4603      	mov	r3, r0
 800e270:	4619      	mov	r1, r3
 800e272:	4620      	mov	r0, r4
 800e274:	f7f2 fc5e 	bl	8000b34 <__addsf3>
 800e278:	4603      	mov	r3, r0
 800e27a:	461c      	mov	r4, r3
 800e27c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e27e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e282:	f7f2 fd5f 	bl	8000d44 <__aeabi_fmul>
 800e286:	4603      	mov	r3, r0
 800e288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f2 fd5a 	bl	8000d44 <__aeabi_fmul>
 800e290:	4603      	mov	r3, r0
 800e292:	4619      	mov	r1, r3
 800e294:	4620      	mov	r0, r4
 800e296:	f7f2 fc4b 	bl	8000b30 <__aeabi_fsub>
 800e29a:	4603      	mov	r3, r0
 800e29c:	461c      	mov	r4, r3
 800e29e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e2a4:	f7f2 fd4e 	bl	8000d44 <__aeabi_fmul>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7f2 fd49 	bl	8000d44 <__aeabi_fmul>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f7f2 fc3c 	bl	8000b34 <__addsf3>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	461c      	mov	r4, r3
 800e2c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e2c2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e2c4:	f7f2 fd3e 	bl	8000d44 <__aeabi_fmul>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f2 fd39 	bl	8000d44 <__aeabi_fmul>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7f2 fc2c 	bl	8000b34 <__addsf3>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461c      	mov	r4, r3
 800e2e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2e2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e2e4:	f7f2 fd2e 	bl	8000d44 <__aeabi_fmul>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7f2 fd29 	bl	8000d44 <__aeabi_fmul>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7f2 fc1a 	bl	8000b30 <__aeabi_fsub>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	461c      	mov	r4, r3
 800e300:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e302:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e304:	f7f2 fd1e 	bl	8000d44 <__aeabi_fmul>
 800e308:	4603      	mov	r3, r0
 800e30a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f2 fd19 	bl	8000d44 <__aeabi_fmul>
 800e312:	4603      	mov	r3, r0
 800e314:	4619      	mov	r1, r3
 800e316:	4620      	mov	r0, r4
 800e318:	f7f2 fc0a 	bl	8000b30 <__aeabi_fsub>
 800e31c:	4603      	mov	r3, r0
 800e31e:	461c      	mov	r4, r3
 800e320:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e322:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e324:	f7f2 fd0e 	bl	8000d44 <__aeabi_fmul>
 800e328:	4603      	mov	r3, r0
 800e32a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f2 fd09 	bl	8000d44 <__aeabi_fmul>
 800e332:	4603      	mov	r3, r0
 800e334:	4619      	mov	r1, r3
 800e336:	4620      	mov	r0, r4
 800e338:	f7f2 fbfc 	bl	8000b34 <__addsf3>
 800e33c:	4603      	mov	r3, r0
 800e33e:	461c      	mov	r4, r3
 800e340:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e342:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e346:	f7f2 fcfd 	bl	8000d44 <__aeabi_fmul>
 800e34a:	4603      	mov	r3, r0
 800e34c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f2 fcf8 	bl	8000d44 <__aeabi_fmul>
 800e354:	4603      	mov	r3, r0
 800e356:	4619      	mov	r1, r3
 800e358:	4620      	mov	r0, r4
 800e35a:	f7f2 fbe9 	bl	8000b30 <__aeabi_fsub>
 800e35e:	4603      	mov	r3, r0
 800e360:	461c      	mov	r4, r3
 800e362:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e364:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e368:	f7f2 fcec 	bl	8000d44 <__aeabi_fmul>
 800e36c:	4603      	mov	r3, r0
 800e36e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e370:	4618      	mov	r0, r3
 800e372:	f7f2 fce7 	bl	8000d44 <__aeabi_fmul>
 800e376:	4603      	mov	r3, r0
 800e378:	4619      	mov	r1, r3
 800e37a:	4620      	mov	r0, r4
 800e37c:	f7f2 fbda 	bl	8000b34 <__addsf3>
 800e380:	4603      	mov	r3, r0
 800e382:	461c      	mov	r4, r3
 800e384:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e386:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e388:	f7f2 fcdc 	bl	8000d44 <__aeabi_fmul>
 800e38c:	4603      	mov	r3, r0
 800e38e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e390:	4618      	mov	r0, r3
 800e392:	f7f2 fcd7 	bl	8000d44 <__aeabi_fmul>
 800e396:	4603      	mov	r3, r0
 800e398:	4619      	mov	r1, r3
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7f2 fbca 	bl	8000b34 <__addsf3>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461c      	mov	r4, r3
 800e3a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e3a8:	f7f2 fccc 	bl	8000d44 <__aeabi_fmul>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7f2 fcc7 	bl	8000d44 <__aeabi_fmul>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7f2 fbb8 	bl	8000b30 <__aeabi_fsub>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461c      	mov	r4, r3
 800e3c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3c6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e3c8:	f7f2 fcbc 	bl	8000d44 <__aeabi_fmul>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7f2 fcb7 	bl	8000d44 <__aeabi_fmul>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f7f2 fba8 	bl	8000b30 <__aeabi_fsub>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461c      	mov	r4, r3
 800e3e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e3e6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e3e8:	f7f2 fcac 	bl	8000d44 <__aeabi_fmul>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f2 fca7 	bl	8000d44 <__aeabi_fmul>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7f2 fb9a 	bl	8000b34 <__addsf3>
 800e400:	4603      	mov	r3, r0
 800e402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e404:	4618      	mov	r0, r3
 800e406:	f7f2 fd51 	bl	8000eac <__aeabi_fdiv>
 800e40a:	4603      	mov	r3, r0
 800e40c:	60bb      	str	r3, [r7, #8]

	pos = pos - Kt13*(vel - vgps) - Kt11*(pos - pos_gps) - Kt12*(a - accm + b);
 800e40e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e412:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e416:	f7f2 fb8b 	bl	8000b30 <__aeabi_fsub>
 800e41a:	4603      	mov	r3, r0
 800e41c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f2 fc90 	bl	8000d44 <__aeabi_fmul>
 800e424:	4603      	mov	r3, r0
 800e426:	4619      	mov	r1, r3
 800e428:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e42c:	f7f2 fb80 	bl	8000b30 <__aeabi_fsub>
 800e430:	4603      	mov	r3, r0
 800e432:	461c      	mov	r4, r3
 800e434:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e438:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e43c:	f7f2 fb78 	bl	8000b30 <__aeabi_fsub>
 800e440:	4603      	mov	r3, r0
 800e442:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e444:	4618      	mov	r0, r3
 800e446:	f7f2 fc7d 	bl	8000d44 <__aeabi_fmul>
 800e44a:	4603      	mov	r3, r0
 800e44c:	4619      	mov	r1, r3
 800e44e:	4620      	mov	r0, r4
 800e450:	f7f2 fb6e 	bl	8000b30 <__aeabi_fsub>
 800e454:	4603      	mov	r3, r0
 800e456:	461c      	mov	r4, r3
 800e458:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e45c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e460:	f7f2 fb66 	bl	8000b30 <__aeabi_fsub>
 800e464:	4603      	mov	r3, r0
 800e466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f2 fb62 	bl	8000b34 <__addsf3>
 800e470:	4603      	mov	r3, r0
 800e472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e474:	4618      	mov	r0, r3
 800e476:	f7f2 fc65 	bl	8000d44 <__aeabi_fmul>
 800e47a:	4603      	mov	r3, r0
 800e47c:	4619      	mov	r1, r3
 800e47e:	4620      	mov	r0, r4
 800e480:	f7f2 fb56 	bl	8000b30 <__aeabi_fsub>
 800e484:	4603      	mov	r3, r0
 800e486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	vel = vel - Kt23*(vel - vgps) - Kt21*(pos - pos_gps) - Kt22*(a - accm + b);
 800e48a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e48e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e492:	f7f2 fb4d 	bl	8000b30 <__aeabi_fsub>
 800e496:	4603      	mov	r3, r0
 800e498:	6a39      	ldr	r1, [r7, #32]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7f2 fc52 	bl	8000d44 <__aeabi_fmul>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e4a8:	f7f2 fb42 	bl	8000b30 <__aeabi_fsub>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	461c      	mov	r4, r3
 800e4b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e4b4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e4b8:	f7f2 fb3a 	bl	8000b30 <__aeabi_fsub>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f2 fc3f 	bl	8000d44 <__aeabi_fmul>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f7f2 fb30 	bl	8000b30 <__aeabi_fsub>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	461c      	mov	r4, r3
 800e4d4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e4d8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e4dc:	f7f2 fb28 	bl	8000b30 <__aeabi_fsub>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f2 fb24 	bl	8000b34 <__addsf3>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f2 fc27 	bl	8000d44 <__aeabi_fmul>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f7f2 fb18 	bl	8000b30 <__aeabi_fsub>
 800e500:	4603      	mov	r3, r0
 800e502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	a = a - Kt33*(vel - vgps) - Kt31*(pos - pos_gps) - Kt32*(a - accm + b);
 800e506:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e50a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e50e:	f7f2 fb0f 	bl	8000b30 <__aeabi_fsub>
 800e512:	4603      	mov	r3, r0
 800e514:	6979      	ldr	r1, [r7, #20]
 800e516:	4618      	mov	r0, r3
 800e518:	f7f2 fc14 	bl	8000d44 <__aeabi_fmul>
 800e51c:	4603      	mov	r3, r0
 800e51e:	4619      	mov	r1, r3
 800e520:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e524:	f7f2 fb04 	bl	8000b30 <__aeabi_fsub>
 800e528:	4603      	mov	r3, r0
 800e52a:	461c      	mov	r4, r3
 800e52c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e530:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e534:	f7f2 fafc 	bl	8000b30 <__aeabi_fsub>
 800e538:	4603      	mov	r3, r0
 800e53a:	69f9      	ldr	r1, [r7, #28]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7f2 fc01 	bl	8000d44 <__aeabi_fmul>
 800e542:	4603      	mov	r3, r0
 800e544:	4619      	mov	r1, r3
 800e546:	4620      	mov	r0, r4
 800e548:	f7f2 faf2 	bl	8000b30 <__aeabi_fsub>
 800e54c:	4603      	mov	r3, r0
 800e54e:	461c      	mov	r4, r3
 800e550:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e554:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e558:	f7f2 faea 	bl	8000b30 <__aeabi_fsub>
 800e55c:	4603      	mov	r3, r0
 800e55e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e562:	4618      	mov	r0, r3
 800e564:	f7f2 fae6 	bl	8000b34 <__addsf3>
 800e568:	4603      	mov	r3, r0
 800e56a:	69b9      	ldr	r1, [r7, #24]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7f2 fbe9 	bl	8000d44 <__aeabi_fmul>
 800e572:	4603      	mov	r3, r0
 800e574:	4619      	mov	r1, r3
 800e576:	4620      	mov	r0, r4
 800e578:	f7f2 fada 	bl	8000b30 <__aeabi_fsub>
 800e57c:	4603      	mov	r3, r0
 800e57e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	b = b - Kt43*(vel - vgps) - Kt41*(pos - pos_gps) - Kt42*(a - accm + b);
 800e582:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e586:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e58a:	f7f2 fad1 	bl	8000b30 <__aeabi_fsub>
 800e58e:	4603      	mov	r3, r0
 800e590:	68b9      	ldr	r1, [r7, #8]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f2 fbd6 	bl	8000d44 <__aeabi_fmul>
 800e598:	4603      	mov	r3, r0
 800e59a:	4619      	mov	r1, r3
 800e59c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e5a0:	f7f2 fac6 	bl	8000b30 <__aeabi_fsub>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	461c      	mov	r4, r3
 800e5a8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e5ac:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e5b0:	f7f2 fabe 	bl	8000b30 <__aeabi_fsub>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	6939      	ldr	r1, [r7, #16]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7f2 fbc3 	bl	8000d44 <__aeabi_fmul>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f7f2 fab4 	bl	8000b30 <__aeabi_fsub>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e5d0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e5d4:	f7f2 faac 	bl	8000b30 <__aeabi_fsub>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7f2 faa8 	bl	8000b34 <__addsf3>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	68f9      	ldr	r1, [r7, #12]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f2 fbab 	bl	8000d44 <__aeabi_fmul>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7f2 fa9c 	bl	8000b30 <__aeabi_fsub>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	S1_1=- S1_1*(Kt11 - 1) - Kt13*S2_1 - Kt12*S3_1 - Kt12*S4_1;
 800e5fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e602:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e606:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e60a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e60c:	f7f2 fa90 	bl	8000b30 <__aeabi_fsub>
 800e610:	4603      	mov	r3, r0
 800e612:	4619      	mov	r1, r3
 800e614:	4620      	mov	r0, r4
 800e616:	f7f2 fb95 	bl	8000d44 <__aeabi_fmul>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461c      	mov	r4, r3
 800e61e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e622:	f7f2 fb8f 	bl	8000d44 <__aeabi_fmul>
 800e626:	4603      	mov	r3, r0
 800e628:	4619      	mov	r1, r3
 800e62a:	4620      	mov	r0, r4
 800e62c:	f7f2 fa80 	bl	8000b30 <__aeabi_fsub>
 800e630:	4603      	mov	r3, r0
 800e632:	461c      	mov	r4, r3
 800e634:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e638:	f7f2 fb84 	bl	8000d44 <__aeabi_fmul>
 800e63c:	4603      	mov	r3, r0
 800e63e:	4619      	mov	r1, r3
 800e640:	4620      	mov	r0, r4
 800e642:	f7f2 fa75 	bl	8000b30 <__aeabi_fsub>
 800e646:	4603      	mov	r3, r0
 800e648:	461c      	mov	r4, r3
 800e64a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e64e:	f7f2 fb79 	bl	8000d44 <__aeabi_fmul>
 800e652:	4603      	mov	r3, r0
 800e654:	4619      	mov	r1, r3
 800e656:	4620      	mov	r0, r4
 800e658:	f7f2 fa6a 	bl	8000b30 <__aeabi_fsub>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=- S1_2*(Kt11 - 1) - Kt13*S2_2 - Kt12*S3_2 - Kt12*S4_2;
 800e662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e664:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e668:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e66c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e66e:	f7f2 fa5f 	bl	8000b30 <__aeabi_fsub>
 800e672:	4603      	mov	r3, r0
 800e674:	4619      	mov	r1, r3
 800e676:	4620      	mov	r0, r4
 800e678:	f7f2 fb64 	bl	8000d44 <__aeabi_fmul>
 800e67c:	4603      	mov	r3, r0
 800e67e:	461c      	mov	r4, r3
 800e680:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e684:	f7f2 fb5e 	bl	8000d44 <__aeabi_fmul>
 800e688:	4603      	mov	r3, r0
 800e68a:	4619      	mov	r1, r3
 800e68c:	4620      	mov	r0, r4
 800e68e:	f7f2 fa4f 	bl	8000b30 <__aeabi_fsub>
 800e692:	4603      	mov	r3, r0
 800e694:	461c      	mov	r4, r3
 800e696:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e69a:	f7f2 fb53 	bl	8000d44 <__aeabi_fmul>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f7f2 fa44 	bl	8000b30 <__aeabi_fsub>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	461c      	mov	r4, r3
 800e6ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e6ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6b0:	f7f2 fb48 	bl	8000d44 <__aeabi_fmul>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f7f2 fa39 	bl	8000b30 <__aeabi_fsub>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=- S1_3*(Kt11 - 1) - Kt13*S2_3 - Kt12*S3_3 - Kt12*S4_3;
 800e6c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6c4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e6c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6ce:	f7f2 fa2f 	bl	8000b30 <__aeabi_fsub>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f7f2 fb34 	bl	8000d44 <__aeabi_fmul>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	461c      	mov	r4, r3
 800e6e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6e4:	f7f2 fb2e 	bl	8000d44 <__aeabi_fmul>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7f2 fa1f 	bl	8000b30 <__aeabi_fsub>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461c      	mov	r4, r3
 800e6f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6fa:	f7f2 fb23 	bl	8000d44 <__aeabi_fmul>
 800e6fe:	4603      	mov	r3, r0
 800e700:	4619      	mov	r1, r3
 800e702:	4620      	mov	r0, r4
 800e704:	f7f2 fa14 	bl	8000b30 <__aeabi_fsub>
 800e708:	4603      	mov	r3, r0
 800e70a:	461c      	mov	r4, r3
 800e70c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e710:	f7f2 fb18 	bl	8000d44 <__aeabi_fmul>
 800e714:	4603      	mov	r3, r0
 800e716:	4619      	mov	r1, r3
 800e718:	4620      	mov	r0, r4
 800e71a:	f7f2 fa09 	bl	8000b30 <__aeabi_fsub>
 800e71e:	4603      	mov	r3, r0
 800e720:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=- S1_4*(Kt11 - 1) - Kt13*S2_4 - Kt12*S3_4 - Kt12*S4_4;
 800e722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e724:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e728:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e72c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e72e:	f7f2 f9ff 	bl	8000b30 <__aeabi_fsub>
 800e732:	4603      	mov	r3, r0
 800e734:	4619      	mov	r1, r3
 800e736:	4620      	mov	r0, r4
 800e738:	f7f2 fb04 	bl	8000d44 <__aeabi_fmul>
 800e73c:	4603      	mov	r3, r0
 800e73e:	461c      	mov	r4, r3
 800e740:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e744:	f7f2 fafe 	bl	8000d44 <__aeabi_fmul>
 800e748:	4603      	mov	r3, r0
 800e74a:	4619      	mov	r1, r3
 800e74c:	4620      	mov	r0, r4
 800e74e:	f7f2 f9ef 	bl	8000b30 <__aeabi_fsub>
 800e752:	4603      	mov	r3, r0
 800e754:	461c      	mov	r4, r3
 800e756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e75a:	f7f2 faf3 	bl	8000d44 <__aeabi_fmul>
 800e75e:	4603      	mov	r3, r0
 800e760:	4619      	mov	r1, r3
 800e762:	4620      	mov	r0, r4
 800e764:	f7f2 f9e4 	bl	8000b30 <__aeabi_fsub>
 800e768:	4603      	mov	r3, r0
 800e76a:	461c      	mov	r4, r3
 800e76c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e76e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e770:	f7f2 fae8 	bl	8000d44 <__aeabi_fmul>
 800e774:	4603      	mov	r3, r0
 800e776:	4619      	mov	r1, r3
 800e778:	4620      	mov	r0, r4
 800e77a:	f7f2 f9d9 	bl	8000b30 <__aeabi_fsub>
 800e77e:	4603      	mov	r3, r0
 800e780:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=- S2_1*(Kt23 - 1) - Kt21*S1_1 - Kt22*S3_1 - Kt22*S4_1;
 800e782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e784:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e788:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e78c:	6a38      	ldr	r0, [r7, #32]
 800e78e:	f7f2 f9cf 	bl	8000b30 <__aeabi_fsub>
 800e792:	4603      	mov	r3, r0
 800e794:	4619      	mov	r1, r3
 800e796:	4620      	mov	r0, r4
 800e798:	f7f2 fad4 	bl	8000d44 <__aeabi_fmul>
 800e79c:	4603      	mov	r3, r0
 800e79e:	461c      	mov	r4, r3
 800e7a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a6:	f7f2 facd 	bl	8000d44 <__aeabi_fmul>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f7f2 f9be 	bl	8000b30 <__aeabi_fsub>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	461c      	mov	r4, r3
 800e7b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7bc:	f7f2 fac2 	bl	8000d44 <__aeabi_fmul>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f7f2 f9b3 	bl	8000b30 <__aeabi_fsub>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	461c      	mov	r4, r3
 800e7ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7d2:	f7f2 fab7 	bl	8000d44 <__aeabi_fmul>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f7f2 f9a8 	bl	8000b30 <__aeabi_fsub>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=- S2_2*(Kt23 - 1) - Kt21*S1_2 - Kt22*S3_2 - Kt22*S4_2;
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e7ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e7ee:	6a38      	ldr	r0, [r7, #32]
 800e7f0:	f7f2 f99e 	bl	8000b30 <__aeabi_fsub>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f7f2 faa3 	bl	8000d44 <__aeabi_fmul>
 800e7fe:	4603      	mov	r3, r0
 800e800:	461c      	mov	r4, r3
 800e802:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e806:	f7f2 fa9d 	bl	8000d44 <__aeabi_fmul>
 800e80a:	4603      	mov	r3, r0
 800e80c:	4619      	mov	r1, r3
 800e80e:	4620      	mov	r0, r4
 800e810:	f7f2 f98e 	bl	8000b30 <__aeabi_fsub>
 800e814:	4603      	mov	r3, r0
 800e816:	461c      	mov	r4, r3
 800e818:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e81c:	f7f2 fa92 	bl	8000d44 <__aeabi_fmul>
 800e820:	4603      	mov	r3, r0
 800e822:	4619      	mov	r1, r3
 800e824:	4620      	mov	r0, r4
 800e826:	f7f2 f983 	bl	8000b30 <__aeabi_fsub>
 800e82a:	4603      	mov	r3, r0
 800e82c:	461c      	mov	r4, r3
 800e82e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e832:	f7f2 fa87 	bl	8000d44 <__aeabi_fmul>
 800e836:	4603      	mov	r3, r0
 800e838:	4619      	mov	r1, r3
 800e83a:	4620      	mov	r0, r4
 800e83c:	f7f2 f978 	bl	8000b30 <__aeabi_fsub>
 800e840:	4603      	mov	r3, r0
 800e842:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=- S2_3*(Kt23 - 1) - Kt21*S1_3 - Kt22*S3_3 - Kt22*S4_3;
 800e844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e846:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e84a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e84e:	6a38      	ldr	r0, [r7, #32]
 800e850:	f7f2 f96e 	bl	8000b30 <__aeabi_fsub>
 800e854:	4603      	mov	r3, r0
 800e856:	4619      	mov	r1, r3
 800e858:	4620      	mov	r0, r4
 800e85a:	f7f2 fa73 	bl	8000d44 <__aeabi_fmul>
 800e85e:	4603      	mov	r3, r0
 800e860:	461c      	mov	r4, r3
 800e862:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e866:	f7f2 fa6d 	bl	8000d44 <__aeabi_fmul>
 800e86a:	4603      	mov	r3, r0
 800e86c:	4619      	mov	r1, r3
 800e86e:	4620      	mov	r0, r4
 800e870:	f7f2 f95e 	bl	8000b30 <__aeabi_fsub>
 800e874:	4603      	mov	r3, r0
 800e876:	461c      	mov	r4, r3
 800e878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e87a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e87c:	f7f2 fa62 	bl	8000d44 <__aeabi_fmul>
 800e880:	4603      	mov	r3, r0
 800e882:	4619      	mov	r1, r3
 800e884:	4620      	mov	r0, r4
 800e886:	f7f2 f953 	bl	8000b30 <__aeabi_fsub>
 800e88a:	4603      	mov	r3, r0
 800e88c:	461c      	mov	r4, r3
 800e88e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e892:	f7f2 fa57 	bl	8000d44 <__aeabi_fmul>
 800e896:	4603      	mov	r3, r0
 800e898:	4619      	mov	r1, r3
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7f2 f948 	bl	8000b30 <__aeabi_fsub>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=- S2_4*(Kt23 - 1) - Kt21*S1_4 - Kt22*S3_4 - Kt22*S4_4;
 800e8a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e8aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e8ae:	6a38      	ldr	r0, [r7, #32]
 800e8b0:	f7f2 f93e 	bl	8000b30 <__aeabi_fsub>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f7f2 fa43 	bl	8000d44 <__aeabi_fmul>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	461c      	mov	r4, r3
 800e8c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c6:	f7f2 fa3d 	bl	8000d44 <__aeabi_fmul>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f7f2 f92e 	bl	8000b30 <__aeabi_fsub>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	461c      	mov	r4, r3
 800e8d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8dc:	f7f2 fa32 	bl	8000d44 <__aeabi_fmul>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f7f2 f923 	bl	8000b30 <__aeabi_fsub>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8f2:	f7f2 fa27 	bl	8000d44 <__aeabi_fmul>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f7f2 f918 	bl	8000b30 <__aeabi_fsub>
 800e900:	4603      	mov	r3, r0
 800e902:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=- S3_1*(Kt32 - 1) - Kt31*S1_1 - Kt33*S2_1 - Kt32*S4_1;
 800e904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e906:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e90a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e90e:	69b8      	ldr	r0, [r7, #24]
 800e910:	f7f2 f90e 	bl	8000b30 <__aeabi_fsub>
 800e914:	4603      	mov	r3, r0
 800e916:	4619      	mov	r1, r3
 800e918:	4620      	mov	r0, r4
 800e91a:	f7f2 fa13 	bl	8000d44 <__aeabi_fmul>
 800e91e:	4603      	mov	r3, r0
 800e920:	461c      	mov	r4, r3
 800e922:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e926:	69f8      	ldr	r0, [r7, #28]
 800e928:	f7f2 fa0c 	bl	8000d44 <__aeabi_fmul>
 800e92c:	4603      	mov	r3, r0
 800e92e:	4619      	mov	r1, r3
 800e930:	4620      	mov	r0, r4
 800e932:	f7f2 f8fd 	bl	8000b30 <__aeabi_fsub>
 800e936:	4603      	mov	r3, r0
 800e938:	461c      	mov	r4, r3
 800e93a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e93c:	6978      	ldr	r0, [r7, #20]
 800e93e:	f7f2 fa01 	bl	8000d44 <__aeabi_fmul>
 800e942:	4603      	mov	r3, r0
 800e944:	4619      	mov	r1, r3
 800e946:	4620      	mov	r0, r4
 800e948:	f7f2 f8f2 	bl	8000b30 <__aeabi_fsub>
 800e94c:	4603      	mov	r3, r0
 800e94e:	461c      	mov	r4, r3
 800e950:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e952:	69b8      	ldr	r0, [r7, #24]
 800e954:	f7f2 f9f6 	bl	8000d44 <__aeabi_fmul>
 800e958:	4603      	mov	r3, r0
 800e95a:	4619      	mov	r1, r3
 800e95c:	4620      	mov	r0, r4
 800e95e:	f7f2 f8e7 	bl	8000b30 <__aeabi_fsub>
 800e962:	4603      	mov	r3, r0
 800e964:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=- S3_2*(Kt32 - 1) - Kt31*S1_2 - Kt33*S2_2 - Kt32*S4_2;
 800e966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e968:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e96c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e970:	69b8      	ldr	r0, [r7, #24]
 800e972:	f7f2 f8dd 	bl	8000b30 <__aeabi_fsub>
 800e976:	4603      	mov	r3, r0
 800e978:	4619      	mov	r1, r3
 800e97a:	4620      	mov	r0, r4
 800e97c:	f7f2 f9e2 	bl	8000d44 <__aeabi_fmul>
 800e980:	4603      	mov	r3, r0
 800e982:	461c      	mov	r4, r3
 800e984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e986:	69f8      	ldr	r0, [r7, #28]
 800e988:	f7f2 f9dc 	bl	8000d44 <__aeabi_fmul>
 800e98c:	4603      	mov	r3, r0
 800e98e:	4619      	mov	r1, r3
 800e990:	4620      	mov	r0, r4
 800e992:	f7f2 f8cd 	bl	8000b30 <__aeabi_fsub>
 800e996:	4603      	mov	r3, r0
 800e998:	461c      	mov	r4, r3
 800e99a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e99c:	6978      	ldr	r0, [r7, #20]
 800e99e:	f7f2 f9d1 	bl	8000d44 <__aeabi_fmul>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7f2 f8c2 	bl	8000b30 <__aeabi_fsub>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	461c      	mov	r4, r3
 800e9b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e9b2:	69b8      	ldr	r0, [r7, #24]
 800e9b4:	f7f2 f9c6 	bl	8000d44 <__aeabi_fmul>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f7f2 f8b7 	bl	8000b30 <__aeabi_fsub>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=- S3_3*(Kt32 - 1) - Kt31*S1_3 - Kt33*S2_3 - Kt32*S4_3;
 800e9c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9c8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800e9cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e9d0:	69b8      	ldr	r0, [r7, #24]
 800e9d2:	f7f2 f8ad 	bl	8000b30 <__aeabi_fsub>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7f2 f9b2 	bl	8000d44 <__aeabi_fmul>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	461c      	mov	r4, r3
 800e9e4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e9e6:	69f8      	ldr	r0, [r7, #28]
 800e9e8:	f7f2 f9ac 	bl	8000d44 <__aeabi_fmul>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7f2 f89d 	bl	8000b30 <__aeabi_fsub>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	461c      	mov	r4, r3
 800e9fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9fc:	6978      	ldr	r0, [r7, #20]
 800e9fe:	f7f2 f9a1 	bl	8000d44 <__aeabi_fmul>
 800ea02:	4603      	mov	r3, r0
 800ea04:	4619      	mov	r1, r3
 800ea06:	4620      	mov	r0, r4
 800ea08:	f7f2 f892 	bl	8000b30 <__aeabi_fsub>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	461c      	mov	r4, r3
 800ea10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea12:	69b8      	ldr	r0, [r7, #24]
 800ea14:	f7f2 f996 	bl	8000d44 <__aeabi_fmul>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f7f2 f887 	bl	8000b30 <__aeabi_fsub>
 800ea22:	4603      	mov	r3, r0
 800ea24:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=- S3_4*(Kt32 - 1) - Kt31*S1_4 - Kt33*S2_4 - Kt32*S4_4;
 800ea26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea28:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ea2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ea30:	69b8      	ldr	r0, [r7, #24]
 800ea32:	f7f2 f87d 	bl	8000b30 <__aeabi_fsub>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f7f2 f982 	bl	8000d44 <__aeabi_fmul>
 800ea40:	4603      	mov	r3, r0
 800ea42:	461c      	mov	r4, r3
 800ea44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ea46:	69f8      	ldr	r0, [r7, #28]
 800ea48:	f7f2 f97c 	bl	8000d44 <__aeabi_fmul>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7f2 f86d 	bl	8000b30 <__aeabi_fsub>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461c      	mov	r4, r3
 800ea5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ea5c:	6978      	ldr	r0, [r7, #20]
 800ea5e:	f7f2 f971 	bl	8000d44 <__aeabi_fmul>
 800ea62:	4603      	mov	r3, r0
 800ea64:	4619      	mov	r1, r3
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7f2 f862 	bl	8000b30 <__aeabi_fsub>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461c      	mov	r4, r3
 800ea70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea72:	69b8      	ldr	r0, [r7, #24]
 800ea74:	f7f2 f966 	bl	8000d44 <__aeabi_fmul>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f7f2 f857 	bl	8000b30 <__aeabi_fsub>
 800ea82:	4603      	mov	r3, r0
 800ea84:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=- S4_1*(Kt42 - 1) - Kt41*S1_1 - Kt43*S2_1 - Kt42*S3_1;
 800ea86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea88:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ea8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7f2 f84d 	bl	8000b30 <__aeabi_fsub>
 800ea96:	4603      	mov	r3, r0
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f7f2 f952 	bl	8000d44 <__aeabi_fmul>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	461c      	mov	r4, r3
 800eaa4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800eaa8:	6938      	ldr	r0, [r7, #16]
 800eaaa:	f7f2 f94b 	bl	8000d44 <__aeabi_fmul>
 800eaae:	4603      	mov	r3, r0
 800eab0:	4619      	mov	r1, r3
 800eab2:	4620      	mov	r0, r4
 800eab4:	f7f2 f83c 	bl	8000b30 <__aeabi_fsub>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461c      	mov	r4, r3
 800eabc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eabe:	68b8      	ldr	r0, [r7, #8]
 800eac0:	f7f2 f940 	bl	8000d44 <__aeabi_fmul>
 800eac4:	4603      	mov	r3, r0
 800eac6:	4619      	mov	r1, r3
 800eac8:	4620      	mov	r0, r4
 800eaca:	f7f2 f831 	bl	8000b30 <__aeabi_fsub>
 800eace:	4603      	mov	r3, r0
 800ead0:	461c      	mov	r4, r3
 800ead2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7f2 f935 	bl	8000d44 <__aeabi_fmul>
 800eada:	4603      	mov	r3, r0
 800eadc:	4619      	mov	r1, r3
 800eade:	4620      	mov	r0, r4
 800eae0:	f7f2 f826 	bl	8000b30 <__aeabi_fsub>
 800eae4:	4603      	mov	r3, r0
 800eae6:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=- S4_2*(Kt42 - 1) - Kt41*S1_2 - Kt43*S2_2 - Kt42*S3_2;
 800eae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaea:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800eaee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f7f2 f81c 	bl	8000b30 <__aeabi_fsub>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	4619      	mov	r1, r3
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7f2 f921 	bl	8000d44 <__aeabi_fmul>
 800eb02:	4603      	mov	r3, r0
 800eb04:	461c      	mov	r4, r3
 800eb06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eb08:	6938      	ldr	r0, [r7, #16]
 800eb0a:	f7f2 f91b 	bl	8000d44 <__aeabi_fmul>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	4619      	mov	r1, r3
 800eb12:	4620      	mov	r0, r4
 800eb14:	f7f2 f80c 	bl	8000b30 <__aeabi_fsub>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461c      	mov	r4, r3
 800eb1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eb1e:	68b8      	ldr	r0, [r7, #8]
 800eb20:	f7f2 f910 	bl	8000d44 <__aeabi_fmul>
 800eb24:	4603      	mov	r3, r0
 800eb26:	4619      	mov	r1, r3
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7f2 f801 	bl	8000b30 <__aeabi_fsub>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461c      	mov	r4, r3
 800eb32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7f2 f905 	bl	8000d44 <__aeabi_fmul>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7f1 fff6 	bl	8000b30 <__aeabi_fsub>
 800eb44:	4603      	mov	r3, r0
 800eb46:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=- S4_3*(Kt42 - 1) - Kt41*S1_3 - Kt43*S2_3 - Kt42*S3_3;
 800eb48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb4a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800eb4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7f1 ffec 	bl	8000b30 <__aeabi_fsub>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f7f2 f8f1 	bl	8000d44 <__aeabi_fmul>
 800eb62:	4603      	mov	r3, r0
 800eb64:	461c      	mov	r4, r3
 800eb66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800eb68:	6938      	ldr	r0, [r7, #16]
 800eb6a:	f7f2 f8eb 	bl	8000d44 <__aeabi_fmul>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4619      	mov	r1, r3
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7f1 ffdc 	bl	8000b30 <__aeabi_fsub>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461c      	mov	r4, r3
 800eb7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb7e:	68b8      	ldr	r0, [r7, #8]
 800eb80:	f7f2 f8e0 	bl	8000d44 <__aeabi_fmul>
 800eb84:	4603      	mov	r3, r0
 800eb86:	4619      	mov	r1, r3
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f7f1 ffd1 	bl	8000b30 <__aeabi_fsub>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	461c      	mov	r4, r3
 800eb92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7f2 f8d5 	bl	8000d44 <__aeabi_fmul>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7f1 ffc6 	bl	8000b30 <__aeabi_fsub>
 800eba4:	4603      	mov	r3, r0
 800eba6:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=- S4_4*(Kt42 - 1) - Kt41*S1_4 - Kt43*S2_4 - Kt42*S3_4;
 800eba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebaa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ebae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7f1 ffbc 	bl	8000b30 <__aeabi_fsub>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	4619      	mov	r1, r3
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f7f2 f8c1 	bl	8000d44 <__aeabi_fmul>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	461c      	mov	r4, r3
 800ebc6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ebc8:	6938      	ldr	r0, [r7, #16]
 800ebca:	f7f2 f8bb 	bl	8000d44 <__aeabi_fmul>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f7f1 ffac 	bl	8000b30 <__aeabi_fsub>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	461c      	mov	r4, r3
 800ebdc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ebde:	68b8      	ldr	r0, [r7, #8]
 800ebe0:	f7f2 f8b0 	bl	8000d44 <__aeabi_fmul>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f7f1 ffa1 	bl	8000b30 <__aeabi_fsub>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461c      	mov	r4, r3
 800ebf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f7f2 f8a5 	bl	8000d44 <__aeabi_fmul>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7f1 ff96 	bl	8000b30 <__aeabi_fsub>
 800ec04:	4603      	mov	r3, r0
 800ec06:	647b      	str	r3, [r7, #68]	; 0x44

	switch (axis) {
 800ec08:	78fb      	ldrb	r3, [r7, #3]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d002      	beq.n	800ec14 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2d9c>
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d056      	beq.n	800ecc0 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2e48>
			 Sp4_4y = S4_4 ;
			break;

	}

}
 800ec12:	e0ab      	b.n	800ed6c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			x = pos;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ec1a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
			vx = vel;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ec24:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			apx = a;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ec2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			bax = b;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec38:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			 Sp1_1x = S1_1;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ec42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			 Sp1_2x = S1_2;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			 Sp1_3x = S1_3 ;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec52:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			 Sp1_4x = S1_4 ;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
			 Sp2_1x = S2_1 ;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			 Sp2_2x = S2_2;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ec6a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			 Sp2_3x = S2_3 ;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec72:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			 Sp2_4x = S2_4 ;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			 Sp3_1x = S3_1 ;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec82:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
			 Sp3_2x = S3_2 ;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec8a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			 Sp3_3x = S3_3 ;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec92:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			 Sp3_4x = S3_4 ;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			 Sp4_1x = S4_1;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eca2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			 Sp4_2x = S4_2;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecaa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			 Sp4_3x = S4_3 ;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			 Sp4_4x = S4_4 ;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			break;
 800ecbe:	e055      	b.n	800ed6c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			y = pos;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ecc6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			vy = vel;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ecd0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
			apy = a;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ecda:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
			bay = b;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ece4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
			 Sp1_1y = S1_1;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ecee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			 Sp1_2y = S1_2;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ecf6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			 Sp1_3y = S1_3 ;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ecfe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			 Sp1_4y = S1_4 ;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ed06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			 Sp2_1y = S2_1 ;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ed0e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			 Sp2_2y = S2_2;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed16:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
			 Sp2_3y = S2_3 ;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed1e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			 Sp2_4y = S2_4 ;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed26:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			 Sp3_1y = S3_1 ;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed2e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			 Sp3_2y = S3_2 ;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed36:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			 Sp3_3y = S3_3 ;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed3e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			 Sp3_4y = S3_4 ;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed46:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			 Sp4_1y = S4_1;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed4e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			 Sp4_2y = S4_2;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed56:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			 Sp4_3y = S4_3 ;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed5e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			 Sp4_4y = S4_4 ;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed66:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
			break;
 800ed6a:	bf00      	nop
}
 800ed6c:	bf00      	nop
 800ed6e:	37a0      	adds	r7, #160	; 0xa0
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bdb0      	pop	{r4, r5, r7, pc}

0800ed74 <_ZN15Kalman_Filtresi7EKF_PosEv>:

void Kalman_Filtresi::EKF_Pos() {
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]

	if(pos_ekf_counter == POS_EKF_RATE) { //50 Hz
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	2b04      	cmp	r3, #4
 800ed82:	d146      	bne.n	800ee12 <_ZN15Kalman_Filtresi7EKF_PosEv+0x9e>
		accx = acc_pos_x;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		accy = acc_pos_y;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		acc_pos_x_med = 0;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f04f 0200 	mov.w	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
		pos_ekf_counter = 0;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	605a      	str	r2, [r3, #4]
		gps_ekf_counter++;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	609a      	str	r2, [r3, #8]

		if(gps_fixed) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d01a      	beq.n	800edf4 <_ZN15Kalman_Filtresi7EKF_PosEv+0x80>

			if(	gps_ekf_counter >= 10) {	//5 Hz
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	2b09      	cmp	r3, #9
 800edc4:	d90e      	bls.n	800ede4 <_ZN15Kalman_Filtresi7EKF_PosEv+0x70>
				NED2Body();
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 ff9a 	bl	800fd00 <_ZN15Kalman_Filtresi8NED2BodyEv>

				gps_ekf_counter = 0;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	609a      	str	r2, [r3, #8]
				Qgps = 4.0;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800edd8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 80;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a0f      	ldr	r2, [pc, #60]	; (800ee1c <_ZN15Kalman_Filtresi7EKF_PosEv+0xa8>)
 800ede0:	60da      	str	r2, [r3, #12]
 800ede2:	e00e      	b.n	800ee02 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

			else {
				Qgps = 1.0e9;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4a0e      	ldr	r2, [pc, #56]	; (800ee20 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800ede8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a0c      	ldr	r2, [pc, #48]	; (800ee20 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800edf0:	60da      	str	r2, [r3, #12]
 800edf2:	e006      	b.n	800ee02 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

		}

		else {
				Qgps = 1.0e9;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a0a      	ldr	r2, [pc, #40]	; (800ee20 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800edf8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a08      	ldr	r2, [pc, #32]	; (800ee20 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800ee00:	60da      	str	r2, [r3, #12]
					}

		PredictUpdatePos(x_axis);
 800ee02:	2100      	movs	r1, #0
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7fd f837 	bl	800be78 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>
		PredictUpdatePos(y_axis);
 800ee0a:	2101      	movs	r1, #1
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7fd f833 	bl	800be78 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>


	}


}
 800ee12:	bf00      	nop
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	42a00000 	.word	0x42a00000
 800ee20:	4e6e6b28 	.word	0x4e6e6b28

0800ee24 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800ee24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee28:	b09e      	sub	sp, #120	; 0x78
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee38:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ee40:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ee48:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ee50:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800ee58:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800ee60:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800ee62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ee66:	f7f1 ff6d 	bl	8000d44 <__aeabi_fmul>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	461c      	mov	r4, r3
 800ee6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee72:	f7f1 ff67 	bl	8000d44 <__aeabi_fmul>
 800ee76:	4603      	mov	r3, r0
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f7f1 fe5a 	bl	8000b34 <__addsf3>
 800ee80:	4603      	mov	r3, r0
 800ee82:	461c      	mov	r4, r3
 800ee84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee88:	f7f1 ff5c 	bl	8000d44 <__aeabi_fmul>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4620      	mov	r0, r4
 800ee92:	f7f1 fe4f 	bl	8000b34 <__addsf3>
 800ee96:	4603      	mov	r3, r0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f3 fddd 	bl	8002a58 <_ZSt4sqrtf>
 800ee9e:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800eea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eea2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eea4:	f7f2 f802 	bl	8000eac <__aeabi_fdiv>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f3 fdae 	bl	8002a0c <_ZSt4asinf>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4610      	mov	r0, r2
 800eebc:	f7f1 ff42 	bl	8000d44 <__aeabi_fmul>
 800eec0:	4603      	mov	r3, r0
 800eec2:	461a      	mov	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeca:	4619      	mov	r1, r3
 800eecc:	4610      	mov	r0, r2
 800eece:	f7f1 fe31 	bl	8000b34 <__addsf3>
 800eed2:	4603      	mov	r3, r0
 800eed4:	461a      	mov	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800eedc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eede:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eee0:	f7f1 ffe4 	bl	8000eac <__aeabi_fdiv>
 800eee4:	4603      	mov	r3, r0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7f3 fd90 	bl	8002a0c <_ZSt4asinf>
 800eeec:	4602      	mov	r2, r0
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800eef4:	4619      	mov	r1, r3
 800eef6:	4610      	mov	r0, r2
 800eef8:	f7f1 ff24 	bl	8000d44 <__aeabi_fmul>
 800eefc:	4603      	mov	r3, r0
 800eefe:	461a      	mov	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef06:	4619      	mov	r1, r3
 800ef08:	4610      	mov	r0, r2
 800ef0a:	f7f1 fe13 	bl	8000b34 <__addsf3>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	461a      	mov	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800ef18:	78fb      	ldrb	r3, [r7, #3]
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	f000 809a 	beq.w	800f054 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x230>
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	f300 80fb 	bgt.w	800f11c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10c>
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d049      	beq.n	800efc2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x19e>
 800ef2e:	e0f5      	b.n	800f11c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
		case ROLL:
			angle_ekf = roll_ekf;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800ef36:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a1b      	ldr	r3, [r3, #32]
 800ef3c:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ef44:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800ef4c:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a50      	ldr	r2, [pc, #320]	; (800f098 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800ef56:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800ef5e:	f083 0301 	eor.w	r3, r3, #1
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d004      	beq.n	800ef72 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x14e>
				Qa = 3;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a4c      	ldr	r2, [pc, #304]	; (800f09c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800ef6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800ef70:	e003      	b.n	800ef7a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x156>

			}

			else {
				Qa = 5e6;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a4a      	ldr	r2, [pc, #296]	; (800f0a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800ef76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a49      	ldr	r2, [pc, #292]	; (800f0a4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800ef7e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a44      	ldr	r2, [pc, #272]	; (800f098 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800ef86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_roll;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef8e:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef94:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef9a:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efa0:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efa6:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efac:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efb2:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb8:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efbe:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800efc0:	e0ac      	b.n	800f11c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case PITCH:
			angle_ekf = pitch_ekf;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800efc8:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800efd6:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800efde:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a2c      	ldr	r2, [pc, #176]	; (800f098 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800efe8:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800eff0:	f083 0301 	eor.w	r3, r3, #1
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d004      	beq.n	800f004 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e0>
				Qa = 3;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4a27      	ldr	r2, [pc, #156]	; (800f09c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800effe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f002:	e003      	b.n	800f00c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e8>

			}

			else {
				Qa = 5e6;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a26      	ldr	r2, [pc, #152]	; (800f0a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800f008:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a25      	ldr	r2, [pc, #148]	; (800f0a4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800f010:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a20      	ldr	r2, [pc, #128]	; (800f098 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f018:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_pitch;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f020:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f026:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f02c:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f032:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f038:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03e:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f044:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f04a:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f050:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f052:	e063      	b.n	800f11c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case YAW:
			angle_ekf = yaw_ekf;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800f05a:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f060:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f068:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f070:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a0b      	ldr	r2, [pc, #44]	; (800f0a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x284>)
 800f07a:	651a      	str	r2, [r3, #80]	; 0x50

			if(!armed) {
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f082:	f083 0301 	eor.w	r3, r3, #1
 800f086:	b2db      	uxtb	r3, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00f      	beq.n	800f0ac <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x288>
				Qa = 3;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a03      	ldr	r2, [pc, #12]	; (800f09c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f090:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f094:	e00e      	b.n	800f0b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x290>
 800f096:	bf00      	nop
 800f098:	3c23d70a 	.word	0x3c23d70a
 800f09c:	40400000 	.word	0x40400000
 800f0a0:	4a989680 	.word	0x4a989680
 800f0a4:	41200000 	.word	0x41200000
 800f0a8:	43fa0000 	.word	0x43fa0000

			}

			else {
				Qa = 5e10;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a18      	ldr	r2, [pc, #96]	; (800f110 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2ec>)
 800f0b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a17      	ldr	r2, [pc, #92]	; (800f114 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f0>)
 800f0b8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-4;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4a16      	ldr	r2, [pc, #88]	; (800f118 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f4>)
 800f0c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_yaw;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0c8:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0d8:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0e0:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0e8:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f0f8:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f100:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f108:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f10a:	bf00      	nop
 800f10c:	e006      	b.n	800f11c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800f10e:	bf00      	nop
 800f110:	513a43b7 	.word	0x513a43b7
 800f114:	41200000 	.word	0x41200000
 800f118:	38d1b717 	.word	0x38d1b717

	}

    angle_ekf = (angle_ekf) + st*(angle_rate) - st*angle_bias;
 800f11c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f11e:	f7f1 f983 	bl	8000428 <__aeabi_f2d>
 800f122:	4680      	mov	r8, r0
 800f124:	4689      	mov	r9, r1
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f12c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f12e:	f7f1 f97b 	bl	8000428 <__aeabi_f2d>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	f7f1 f9cd 	bl	80004d8 <__aeabi_dmul>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	4640      	mov	r0, r8
 800f144:	4649      	mov	r1, r9
 800f146:	f7f1 f811 	bl	800016c <__adddf3>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4690      	mov	r8, r2
 800f150:	4699      	mov	r9, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f15a:	f7f1 f965 	bl	8000428 <__aeabi_f2d>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	4620      	mov	r0, r4
 800f164:	4629      	mov	r1, r5
 800f166:	f7f1 f9b7 	bl	80004d8 <__aeabi_dmul>
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	4640      	mov	r0, r8
 800f170:	4649      	mov	r1, r9
 800f172:	f7f0 fff9 	bl	8000168 <__aeabi_dsub>
 800f176:	4602      	mov	r2, r0
 800f178:	460b      	mov	r3, r1
 800f17a:	4610      	mov	r0, r2
 800f17c:	4619      	mov	r1, r3
 800f17e:	f7f1 fc83 	bl	8000a88 <__aeabi_d2f>
 800f182:	4603      	mov	r3, r0
 800f184:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st - st*st*(S12_angle - S22_angle*st + S32_angle*st)/st + (st*st*(S13_angle - S23_angle*st + S33_angle*st))/st;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f18a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f1 fcd1 	bl	8000b34 <__addsf3>
 800f192:	4603      	mov	r3, r0
 800f194:	4618      	mov	r0, r3
 800f196:	f7f1 f947 	bl	8000428 <__aeabi_f2d>
 800f19a:	4604      	mov	r4, r0
 800f19c:	460d      	mov	r5, r1
 800f19e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f1a0:	f7f1 f942 	bl	8000428 <__aeabi_f2d>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f1aa:	f7f1 f995 	bl	80004d8 <__aeabi_dmul>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	f7f0 ffd9 	bl	800016c <__adddf3>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	460b      	mov	r3, r1
 800f1be:	4690      	mov	r8, r2
 800f1c0:	4699      	mov	r9, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f1ce:	f7f1 f983 	bl	80004d8 <__aeabi_dmul>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4692      	mov	sl, r2
 800f1d8:	469b      	mov	fp, r3
 800f1da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f1dc:	f7f1 f924 	bl	8000428 <__aeabi_f2d>
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	460d      	mov	r5, r1
 800f1e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f1e6:	f7f1 f91f 	bl	8000428 <__aeabi_f2d>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f1f0:	f7f1 f972 	bl	80004d8 <__aeabi_dmul>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	f7f0 ffb4 	bl	8000168 <__aeabi_dsub>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4614      	mov	r4, r2
 800f206:	461d      	mov	r5, r3
 800f208:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f20a:	f7f1 f90d 	bl	8000428 <__aeabi_f2d>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f214:	f7f1 f960 	bl	80004d8 <__aeabi_dmul>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	4620      	mov	r0, r4
 800f21e:	4629      	mov	r1, r5
 800f220:	f7f0 ffa4 	bl	800016c <__adddf3>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4650      	mov	r0, sl
 800f22a:	4659      	mov	r1, fp
 800f22c:	f7f1 f954 	bl	80004d8 <__aeabi_dmul>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4610      	mov	r0, r2
 800f236:	4619      	mov	r1, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f23e:	f7f1 fa75 	bl	800072c <__aeabi_ddiv>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4640      	mov	r0, r8
 800f248:	4649      	mov	r1, r9
 800f24a:	f7f0 ff8d 	bl	8000168 <__aeabi_dsub>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4690      	mov	r8, r2
 800f254:	4699      	mov	r9, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f262:	f7f1 f939 	bl	80004d8 <__aeabi_dmul>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4692      	mov	sl, r2
 800f26c:	469b      	mov	fp, r3
 800f26e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f270:	f7f1 f8da 	bl	8000428 <__aeabi_f2d>
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f27a:	f7f1 f8d5 	bl	8000428 <__aeabi_f2d>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f284:	f7f1 f928 	bl	80004d8 <__aeabi_dmul>
 800f288:	4602      	mov	r2, r0
 800f28a:	460b      	mov	r3, r1
 800f28c:	4620      	mov	r0, r4
 800f28e:	4629      	mov	r1, r5
 800f290:	f7f0 ff6a 	bl	8000168 <__aeabi_dsub>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4614      	mov	r4, r2
 800f29a:	461d      	mov	r5, r3
 800f29c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f29e:	f7f1 f8c3 	bl	8000428 <__aeabi_f2d>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f2a8:	f7f1 f916 	bl	80004d8 <__aeabi_dmul>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	f7f0 ff5a 	bl	800016c <__adddf3>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4650      	mov	r0, sl
 800f2be:	4659      	mov	r1, fp
 800f2c0:	f7f1 f90a 	bl	80004d8 <__aeabi_dmul>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f2d2:	f7f1 fa2b 	bl	800072c <__aeabi_ddiv>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	4640      	mov	r0, r8
 800f2dc:	4649      	mov	r1, r9
 800f2de:	f7f0 ff45 	bl	800016c <__adddf3>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	f7f1 fbcd 	bl	8000a88 <__aeabi_d2f>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle - S22_angle*st + S32_angle*st;
 800f2f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f2f4:	f7f1 f898 	bl	8000428 <__aeabi_f2d>
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f2fe:	f7f1 f893 	bl	8000428 <__aeabi_f2d>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f308:	f7f1 f8e6 	bl	80004d8 <__aeabi_dmul>
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	4620      	mov	r0, r4
 800f312:	4629      	mov	r1, r5
 800f314:	f7f0 ff28 	bl	8000168 <__aeabi_dsub>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	4614      	mov	r4, r2
 800f31e:	461d      	mov	r5, r3
 800f320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f322:	f7f1 f881 	bl	8000428 <__aeabi_f2d>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f32c:	f7f1 f8d4 	bl	80004d8 <__aeabi_dmul>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4620      	mov	r0, r4
 800f336:	4629      	mov	r1, r5
 800f338:	f7f0 ff18 	bl	800016c <__adddf3>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	4610      	mov	r0, r2
 800f342:	4619      	mov	r1, r3
 800f344:	f7f1 fba0 	bl	8000a88 <__aeabi_d2f>
 800f348:	4603      	mov	r3, r0
 800f34a:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle - S23_angle*st + S33_angle*st;
 800f34c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f34e:	f7f1 f86b 	bl	8000428 <__aeabi_f2d>
 800f352:	4604      	mov	r4, r0
 800f354:	460d      	mov	r5, r1
 800f356:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f358:	f7f1 f866 	bl	8000428 <__aeabi_f2d>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f362:	f7f1 f8b9 	bl	80004d8 <__aeabi_dmul>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4620      	mov	r0, r4
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f0 fefb 	bl	8000168 <__aeabi_dsub>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4614      	mov	r4, r2
 800f378:	461d      	mov	r5, r3
 800f37a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f37c:	f7f1 f854 	bl	8000428 <__aeabi_f2d>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f386:	f7f1 f8a7 	bl	80004d8 <__aeabi_dmul>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	4620      	mov	r0, r4
 800f390:	4629      	mov	r1, r5
 800f392:	f7f0 feeb 	bl	800016c <__adddf3>
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	4610      	mov	r0, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	f7f1 fb73 	bl	8000a88 <__aeabi_d2f>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle - S22_angle*st + S23_angle*(st);
 800f3a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f3a8:	f7f1 f83e 	bl	8000428 <__aeabi_f2d>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	460d      	mov	r5, r1
 800f3b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f3b2:	f7f1 f839 	bl	8000428 <__aeabi_f2d>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f3bc:	f7f1 f88c 	bl	80004d8 <__aeabi_dmul>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	f7f0 fece 	bl	8000168 <__aeabi_dsub>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	461d      	mov	r5, r3
 800f3d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f3d6:	f7f1 f827 	bl	8000428 <__aeabi_f2d>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f3e0:	f7f1 f87a 	bl	80004d8 <__aeabi_dmul>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	f7f0 febe 	bl	800016c <__adddf3>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	f7f1 fb46 	bl	8000a88 <__aeabi_d2f>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f406:	4619      	mov	r1, r3
 800f408:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f40a:	f7f1 fb93 	bl	8000b34 <__addsf3>
 800f40e:	4603      	mov	r3, r0
 800f410:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle - S32_angle*st  + S33_angle*(st);
 800f412:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f414:	f7f1 f808 	bl	8000428 <__aeabi_f2d>
 800f418:	4604      	mov	r4, r0
 800f41a:	460d      	mov	r5, r1
 800f41c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f41e:	f7f1 f803 	bl	8000428 <__aeabi_f2d>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f428:	f7f1 f856 	bl	80004d8 <__aeabi_dmul>
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	4620      	mov	r0, r4
 800f432:	4629      	mov	r1, r5
 800f434:	f7f0 fe98 	bl	8000168 <__aeabi_dsub>
 800f438:	4602      	mov	r2, r0
 800f43a:	460b      	mov	r3, r1
 800f43c:	4614      	mov	r4, r2
 800f43e:	461d      	mov	r5, r3
 800f440:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f442:	f7f0 fff1 	bl	8000428 <__aeabi_f2d>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f44c:	f7f1 f844 	bl	80004d8 <__aeabi_dmul>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	4620      	mov	r0, r4
 800f456:	4629      	mov	r1, r5
 800f458:	f7f0 fe88 	bl	800016c <__adddf3>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4610      	mov	r0, r2
 800f462:	4619      	mov	r1, r3
 800f464:	f7f1 fb10 	bl	8000a88 <__aeabi_d2f>
 800f468:	4603      	mov	r3, r0
 800f46a:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f470:	4619      	mov	r1, r3
 800f472:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f474:	f7f1 fb5e 	bl	8000b34 <__addsf3>
 800f478:	4603      	mov	r3, r0
 800f47a:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f488:	4619      	mov	r1, r3
 800f48a:	4610      	mov	r0, r2
 800f48c:	f7f1 fc5a 	bl	8000d44 <__aeabi_fmul>
 800f490:	4603      	mov	r3, r0
 800f492:	461c      	mov	r4, r3
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f49a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f1 fc51 	bl	8000d44 <__aeabi_fmul>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f7f1 fb44 	bl	8000b34 <__addsf3>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	461c      	mov	r4, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f4b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7f1 fc43 	bl	8000d44 <__aeabi_fmul>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7f1 fb36 	bl	8000b34 <__addsf3>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	461c      	mov	r4, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f4d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7f1 fc35 	bl	8000d44 <__aeabi_fmul>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f7f1 fb28 	bl	8000b34 <__addsf3>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461c      	mov	r4, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f4ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7f1 fc27 	bl	8000d44 <__aeabi_fmul>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f7f1 fb1a 	bl	8000b34 <__addsf3>
 800f500:	4603      	mov	r3, r0
 800f502:	461c      	mov	r4, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f50a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f1 fc19 	bl	8000d44 <__aeabi_fmul>
 800f512:	4603      	mov	r3, r0
 800f514:	4619      	mov	r1, r3
 800f516:	4620      	mov	r0, r4
 800f518:	f7f1 fb0c 	bl	8000b34 <__addsf3>
 800f51c:	4603      	mov	r3, r0
 800f51e:	461c      	mov	r4, r3
 800f520:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f522:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f524:	f7f1 fc0e 	bl	8000d44 <__aeabi_fmul>
 800f528:	4603      	mov	r3, r0
 800f52a:	4619      	mov	r1, r3
 800f52c:	4620      	mov	r0, r4
 800f52e:	f7f1 fb01 	bl	8000b34 <__addsf3>
 800f532:	4603      	mov	r3, r0
 800f534:	461c      	mov	r4, r3
 800f536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f538:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f53a:	f7f1 fc03 	bl	8000d44 <__aeabi_fmul>
 800f53e:	4603      	mov	r3, r0
 800f540:	4619      	mov	r1, r3
 800f542:	4620      	mov	r0, r4
 800f544:	f7f1 faf4 	bl	8000b30 <__aeabi_fsub>
 800f548:	4603      	mov	r3, r0
 800f54a:	461c      	mov	r4, r3
 800f54c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f54e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f550:	f7f1 fbf8 	bl	8000d44 <__aeabi_fmul>
 800f554:	4603      	mov	r3, r0
 800f556:	4619      	mov	r1, r3
 800f558:	4620      	mov	r0, r4
 800f55a:	f7f1 faeb 	bl	8000b34 <__addsf3>
 800f55e:	4603      	mov	r3, r0
 800f560:	461c      	mov	r4, r3
 800f562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f564:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f566:	f7f1 fbed 	bl	8000d44 <__aeabi_fmul>
 800f56a:	4603      	mov	r3, r0
 800f56c:	4619      	mov	r1, r3
 800f56e:	4620      	mov	r0, r4
 800f570:	f7f1 fade 	bl	8000b30 <__aeabi_fsub>
 800f574:	4603      	mov	r3, r0
 800f576:	461c      	mov	r4, r3
 800f578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f57a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f57c:	f7f1 fbe2 	bl	8000d44 <__aeabi_fmul>
 800f580:	4603      	mov	r3, r0
 800f582:	4619      	mov	r1, r3
 800f584:	4620      	mov	r0, r4
 800f586:	f7f1 fad5 	bl	8000b34 <__addsf3>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461c      	mov	r4, r3
 800f58e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f590:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f592:	f7f1 fbd7 	bl	8000d44 <__aeabi_fmul>
 800f596:	4603      	mov	r3, r0
 800f598:	4619      	mov	r1, r3
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7f1 fac8 	bl	8000b30 <__aeabi_fsub>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	461c      	mov	r4, r3
 800f5a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f5a8:	f7f1 fbcc 	bl	8000d44 <__aeabi_fmul>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7f1 fabf 	bl	8000b34 <__addsf3>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	461c      	mov	r4, r3
 800f5ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f5bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5be:	f7f1 fbc1 	bl	8000d44 <__aeabi_fmul>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f7f1 fab2 	bl	8000b30 <__aeabi_fsub>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f5dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7f1 faa8 	bl	8000b34 <__addsf3>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7f1 faa3 	bl	8000b34 <__addsf3>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f1 fa9e 	bl	8000b34 <__addsf3>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f1 fa99 	bl	8000b34 <__addsf3>
 800f602:	4603      	mov	r3, r0
 800f604:	4619      	mov	r1, r3
 800f606:	4620      	mov	r0, r4
 800f608:	f7f1 fb9c 	bl	8000d44 <__aeabi_fmul>
 800f60c:	4603      	mov	r3, r0
 800f60e:	6a39      	ldr	r1, [r7, #32]
 800f610:	4618      	mov	r0, r3
 800f612:	f7f1 fc4b 	bl	8000eac <__aeabi_fdiv>
 800f616:	4603      	mov	r3, r0
 800f618:	4619      	mov	r1, r3
 800f61a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f61e:	f7f1 fa87 	bl	8000b30 <__aeabi_fsub>
 800f622:	4603      	mov	r3, r0
 800f624:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800f62c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f62e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f630:	f7f1 fa80 	bl	8000b34 <__addsf3>
 800f634:	4603      	mov	r3, r0
 800f636:	4619      	mov	r1, r3
 800f638:	4620      	mov	r0, r4
 800f63a:	f7f1 fb83 	bl	8000d44 <__aeabi_fmul>
 800f63e:	4603      	mov	r3, r0
 800f640:	6a39      	ldr	r1, [r7, #32]
 800f642:	4618      	mov	r0, r3
 800f644:	f7f1 fc32 	bl	8000eac <__aeabi_fdiv>
 800f648:	4603      	mov	r3, r0
 800f64a:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f654:	4618      	mov	r0, r3
 800f656:	f7f1 fb75 	bl	8000d44 <__aeabi_fmul>
 800f65a:	4603      	mov	r3, r0
 800f65c:	461c      	mov	r4, r3
 800f65e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f662:	f7f1 fb6f 	bl	8000d44 <__aeabi_fmul>
 800f666:	4603      	mov	r3, r0
 800f668:	4619      	mov	r1, r3
 800f66a:	4620      	mov	r0, r4
 800f66c:	f7f1 fa62 	bl	8000b34 <__addsf3>
 800f670:	4603      	mov	r3, r0
 800f672:	461c      	mov	r4, r3
 800f674:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f676:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f678:	f7f1 fb64 	bl	8000d44 <__aeabi_fmul>
 800f67c:	4603      	mov	r3, r0
 800f67e:	4619      	mov	r1, r3
 800f680:	4620      	mov	r0, r4
 800f682:	f7f1 fa55 	bl	8000b30 <__aeabi_fsub>
 800f686:	4603      	mov	r3, r0
 800f688:	461c      	mov	r4, r3
 800f68a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f68c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f68e:	f7f1 fb59 	bl	8000d44 <__aeabi_fmul>
 800f692:	4603      	mov	r3, r0
 800f694:	4619      	mov	r1, r3
 800f696:	4620      	mov	r0, r4
 800f698:	f7f1 fa4c 	bl	8000b34 <__addsf3>
 800f69c:	4603      	mov	r3, r0
 800f69e:	461c      	mov	r4, r3
 800f6a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f6a4:	f7f1 fb4e 	bl	8000d44 <__aeabi_fmul>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7f1 fa3f 	bl	8000b30 <__aeabi_fsub>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	6a39      	ldr	r1, [r7, #32]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7f1 fbf8 	bl	8000eac <__aeabi_fdiv>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f6c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7f1 fb3b 	bl	8000d44 <__aeabi_fmul>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	461c      	mov	r4, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f6d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f1 fb32 	bl	8000d44 <__aeabi_fmul>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7f1 fa25 	bl	8000b34 <__addsf3>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	461c      	mov	r4, r3
 800f6ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f6f2:	f7f1 fb27 	bl	8000d44 <__aeabi_fmul>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7f1 fa1a 	bl	8000b34 <__addsf3>
 800f700:	4603      	mov	r3, r0
 800f702:	461c      	mov	r4, r3
 800f704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f706:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f708:	f7f1 fb1c 	bl	8000d44 <__aeabi_fmul>
 800f70c:	4603      	mov	r3, r0
 800f70e:	4619      	mov	r1, r3
 800f710:	4620      	mov	r0, r4
 800f712:	f7f1 fa0d 	bl	8000b30 <__aeabi_fsub>
 800f716:	4603      	mov	r3, r0
 800f718:	461c      	mov	r4, r3
 800f71a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f71c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f71e:	f7f1 fb11 	bl	8000d44 <__aeabi_fmul>
 800f722:	4603      	mov	r3, r0
 800f724:	4619      	mov	r1, r3
 800f726:	4620      	mov	r0, r4
 800f728:	f7f1 fa04 	bl	8000b34 <__addsf3>
 800f72c:	4603      	mov	r3, r0
 800f72e:	461c      	mov	r4, r3
 800f730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f732:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f734:	f7f1 fb06 	bl	8000d44 <__aeabi_fmul>
 800f738:	4603      	mov	r3, r0
 800f73a:	4619      	mov	r1, r3
 800f73c:	4620      	mov	r0, r4
 800f73e:	f7f1 f9f7 	bl	8000b30 <__aeabi_fsub>
 800f742:	4603      	mov	r3, r0
 800f744:	6a39      	ldr	r1, [r7, #32]
 800f746:	4618      	mov	r0, r3
 800f748:	f7f1 fbb0 	bl	8000eac <__aeabi_fdiv>
 800f74c:	4603      	mov	r3, r0
 800f74e:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f756:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f758:	4618      	mov	r0, r3
 800f75a:	f7f1 faf3 	bl	8000d44 <__aeabi_fmul>
 800f75e:	4603      	mov	r3, r0
 800f760:	461c      	mov	r4, r3
 800f762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f764:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f766:	f7f1 faed 	bl	8000d44 <__aeabi_fmul>
 800f76a:	4603      	mov	r3, r0
 800f76c:	4619      	mov	r1, r3
 800f76e:	4620      	mov	r0, r4
 800f770:	f7f1 f9de 	bl	8000b30 <__aeabi_fsub>
 800f774:	4603      	mov	r3, r0
 800f776:	461c      	mov	r4, r3
 800f778:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f77a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f77c:	f7f1 fae2 	bl	8000d44 <__aeabi_fmul>
 800f780:	4603      	mov	r3, r0
 800f782:	4619      	mov	r1, r3
 800f784:	4620      	mov	r0, r4
 800f786:	f7f1 f9d5 	bl	8000b34 <__addsf3>
 800f78a:	4603      	mov	r3, r0
 800f78c:	461c      	mov	r4, r3
 800f78e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f790:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f792:	f7f1 fad7 	bl	8000d44 <__aeabi_fmul>
 800f796:	4603      	mov	r3, r0
 800f798:	4619      	mov	r1, r3
 800f79a:	4620      	mov	r0, r4
 800f79c:	f7f1 f9c8 	bl	8000b30 <__aeabi_fsub>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	461c      	mov	r4, r3
 800f7a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f7a8:	f7f1 facc 	bl	8000d44 <__aeabi_fmul>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f7f1 f9bf 	bl	8000b34 <__addsf3>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	6a39      	ldr	r1, [r7, #32]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f1 fb76 	bl	8000eac <__aeabi_fdiv>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f7ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f1 fab9 	bl	8000d44 <__aeabi_fmul>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	461c      	mov	r4, r3
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f7dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7f1 fab0 	bl	8000d44 <__aeabi_fmul>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f7f1 f9a3 	bl	8000b34 <__addsf3>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	461c      	mov	r4, r3
 800f7f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7f4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f7f6:	f7f1 faa5 	bl	8000d44 <__aeabi_fmul>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7f1 f998 	bl	8000b34 <__addsf3>
 800f804:	4603      	mov	r3, r0
 800f806:	461c      	mov	r4, r3
 800f808:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f80a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f80c:	f7f1 fa9a 	bl	8000d44 <__aeabi_fmul>
 800f810:	4603      	mov	r3, r0
 800f812:	4619      	mov	r1, r3
 800f814:	4620      	mov	r0, r4
 800f816:	f7f1 f98b 	bl	8000b30 <__aeabi_fsub>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461c      	mov	r4, r3
 800f81e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f820:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f822:	f7f1 fa8f 	bl	8000d44 <__aeabi_fmul>
 800f826:	4603      	mov	r3, r0
 800f828:	4619      	mov	r1, r3
 800f82a:	4620      	mov	r0, r4
 800f82c:	f7f1 f982 	bl	8000b34 <__addsf3>
 800f830:	4603      	mov	r3, r0
 800f832:	461c      	mov	r4, r3
 800f834:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f836:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f838:	f7f1 fa84 	bl	8000d44 <__aeabi_fmul>
 800f83c:	4603      	mov	r3, r0
 800f83e:	4619      	mov	r1, r3
 800f840:	4620      	mov	r0, r4
 800f842:	f7f1 f975 	bl	8000b30 <__aeabi_fsub>
 800f846:	4603      	mov	r3, r0
 800f848:	6a39      	ldr	r1, [r7, #32]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f1 fb2e 	bl	8000eac <__aeabi_fdiv>
 800f850:	4603      	mov	r3, r0
 800f852:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800f854:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f856:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f858:	f7f1 f96a 	bl	8000b30 <__aeabi_fsub>
 800f85c:	4603      	mov	r3, r0
 800f85e:	69f9      	ldr	r1, [r7, #28]
 800f860:	4618      	mov	r0, r3
 800f862:	f7f1 fa6f 	bl	8000d44 <__aeabi_fmul>
 800f866:	4603      	mov	r3, r0
 800f868:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f1 f962 	bl	8000b34 <__addsf3>
 800f870:	4603      	mov	r3, r0
 800f872:	461c      	mov	r4, r3
 800f874:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f876:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f878:	f7f1 f95a 	bl	8000b30 <__aeabi_fsub>
 800f87c:	4603      	mov	r3, r0
 800f87e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f880:	4618      	mov	r0, r3
 800f882:	f7f1 f957 	bl	8000b34 <__addsf3>
 800f886:	4603      	mov	r3, r0
 800f888:	69b9      	ldr	r1, [r7, #24]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f1 fa5a 	bl	8000d44 <__aeabi_fmul>
 800f890:	4603      	mov	r3, r0
 800f892:	4619      	mov	r1, r3
 800f894:	4620      	mov	r0, r4
 800f896:	f7f1 f94b 	bl	8000b30 <__aeabi_fsub>
 800f89a:	4603      	mov	r3, r0
 800f89c:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800f89e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f8a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f8a2:	f7f1 f945 	bl	8000b30 <__aeabi_fsub>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	6979      	ldr	r1, [r7, #20]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f1 fa4a 	bl	8000d44 <__aeabi_fmul>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7f1 f93d 	bl	8000b34 <__addsf3>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	461c      	mov	r4, r3
 800f8be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f8c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8c2:	f7f1 f935 	bl	8000b30 <__aeabi_fsub>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f1 f932 	bl	8000b34 <__addsf3>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	6939      	ldr	r1, [r7, #16]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7f1 fa35 	bl	8000d44 <__aeabi_fmul>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7f1 f926 	bl	8000b30 <__aeabi_fsub>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800f8e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f8ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f8ec:	f7f1 f920 	bl	8000b30 <__aeabi_fsub>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	68f9      	ldr	r1, [r7, #12]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7f1 fa25 	bl	8000d44 <__aeabi_fmul>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7f1 f918 	bl	8000b34 <__addsf3>
 800f904:	4603      	mov	r3, r0
 800f906:	461c      	mov	r4, r3
 800f908:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f90a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f90c:	f7f1 f910 	bl	8000b30 <__aeabi_fsub>
 800f910:	4603      	mov	r3, r0
 800f912:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f914:	4618      	mov	r0, r3
 800f916:	f7f1 f90d 	bl	8000b34 <__addsf3>
 800f91a:	4603      	mov	r3, r0
 800f91c:	68b9      	ldr	r1, [r7, #8]
 800f91e:	4618      	mov	r0, r3
 800f920:	f7f1 fa10 	bl	8000d44 <__aeabi_fmul>
 800f924:	4603      	mov	r3, r0
 800f926:	4619      	mov	r1, r3
 800f928:	4620      	mov	r0, r4
 800f92a:	f7f1 f901 	bl	8000b30 <__aeabi_fsub>
 800f92e:	4603      	mov	r3, r0
 800f930:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800f932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f934:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f938:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f93c:	69f8      	ldr	r0, [r7, #28]
 800f93e:	f7f1 f8f7 	bl	8000b30 <__aeabi_fsub>
 800f942:	4603      	mov	r3, r0
 800f944:	4619      	mov	r1, r3
 800f946:	4620      	mov	r0, r4
 800f948:	f7f1 f9fc 	bl	8000d44 <__aeabi_fmul>
 800f94c:	4603      	mov	r3, r0
 800f94e:	461c      	mov	r4, r3
 800f950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f952:	69b8      	ldr	r0, [r7, #24]
 800f954:	f7f1 f9f6 	bl	8000d44 <__aeabi_fmul>
 800f958:	4603      	mov	r3, r0
 800f95a:	4619      	mov	r1, r3
 800f95c:	4620      	mov	r0, r4
 800f95e:	f7f1 f8e7 	bl	8000b30 <__aeabi_fsub>
 800f962:	4603      	mov	r3, r0
 800f964:	461c      	mov	r4, r3
 800f966:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f968:	69b8      	ldr	r0, [r7, #24]
 800f96a:	f7f1 f9eb 	bl	8000d44 <__aeabi_fmul>
 800f96e:	4603      	mov	r3, r0
 800f970:	4619      	mov	r1, r3
 800f972:	4620      	mov	r0, r4
 800f974:	f7f1 f8dc 	bl	8000b30 <__aeabi_fsub>
 800f978:	4603      	mov	r3, r0
 800f97a:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 800f97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f97e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f982:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f986:	69f8      	ldr	r0, [r7, #28]
 800f988:	f7f1 f8d2 	bl	8000b30 <__aeabi_fsub>
 800f98c:	4603      	mov	r3, r0
 800f98e:	4619      	mov	r1, r3
 800f990:	4620      	mov	r0, r4
 800f992:	f7f1 f9d7 	bl	8000d44 <__aeabi_fmul>
 800f996:	4603      	mov	r3, r0
 800f998:	461c      	mov	r4, r3
 800f99a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f99c:	69b8      	ldr	r0, [r7, #24]
 800f99e:	f7f1 f9d1 	bl	8000d44 <__aeabi_fmul>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f7f1 f8c2 	bl	8000b30 <__aeabi_fsub>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	461c      	mov	r4, r3
 800f9b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9b2:	69b8      	ldr	r0, [r7, #24]
 800f9b4:	f7f1 f9c6 	bl	8000d44 <__aeabi_fmul>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f7f1 f8b7 	bl	8000b30 <__aeabi_fsub>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 800f9c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9c8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f9cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f9d0:	69f8      	ldr	r0, [r7, #28]
 800f9d2:	f7f1 f8ad 	bl	8000b30 <__aeabi_fsub>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7f1 f9b2 	bl	8000d44 <__aeabi_fmul>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	461c      	mov	r4, r3
 800f9e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9e6:	69b8      	ldr	r0, [r7, #24]
 800f9e8:	f7f1 f9ac 	bl	8000d44 <__aeabi_fmul>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7f1 f89d 	bl	8000b30 <__aeabi_fsub>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	461c      	mov	r4, r3
 800f9fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9fc:	69b8      	ldr	r0, [r7, #24]
 800f9fe:	f7f1 f9a1 	bl	8000d44 <__aeabi_fmul>
 800fa02:	4603      	mov	r3, r0
 800fa04:	4619      	mov	r1, r3
 800fa06:	4620      	mov	r0, r4
 800fa08:	f7f1 f892 	bl	8000b30 <__aeabi_fsub>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 800fa10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa12:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800fa16:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fa1a:	6938      	ldr	r0, [r7, #16]
 800fa1c:	f7f1 f888 	bl	8000b30 <__aeabi_fsub>
 800fa20:	4603      	mov	r3, r0
 800fa22:	4619      	mov	r1, r3
 800fa24:	4620      	mov	r0, r4
 800fa26:	f7f1 f98d 	bl	8000d44 <__aeabi_fmul>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	461c      	mov	r4, r3
 800fa2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa30:	6978      	ldr	r0, [r7, #20]
 800fa32:	f7f1 f987 	bl	8000d44 <__aeabi_fmul>
 800fa36:	4603      	mov	r3, r0
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f7f1 f878 	bl	8000b30 <__aeabi_fsub>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461c      	mov	r4, r3
 800fa44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa46:	6938      	ldr	r0, [r7, #16]
 800fa48:	f7f1 f97c 	bl	8000d44 <__aeabi_fmul>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	4619      	mov	r1, r3
 800fa50:	4620      	mov	r0, r4
 800fa52:	f7f1 f86d 	bl	8000b30 <__aeabi_fsub>
 800fa56:	4603      	mov	r3, r0
 800fa58:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 800fa5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa5c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800fa60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fa64:	6938      	ldr	r0, [r7, #16]
 800fa66:	f7f1 f863 	bl	8000b30 <__aeabi_fsub>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f7f1 f968 	bl	8000d44 <__aeabi_fmul>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461c      	mov	r4, r3
 800fa78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fa7a:	6978      	ldr	r0, [r7, #20]
 800fa7c:	f7f1 f962 	bl	8000d44 <__aeabi_fmul>
 800fa80:	4603      	mov	r3, r0
 800fa82:	4619      	mov	r1, r3
 800fa84:	4620      	mov	r0, r4
 800fa86:	f7f1 f853 	bl	8000b30 <__aeabi_fsub>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	461c      	mov	r4, r3
 800fa8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa90:	6938      	ldr	r0, [r7, #16]
 800fa92:	f7f1 f957 	bl	8000d44 <__aeabi_fmul>
 800fa96:	4603      	mov	r3, r0
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f7f1 f848 	bl	8000b30 <__aeabi_fsub>
 800faa0:	4603      	mov	r3, r0
 800faa2:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 800faa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faa6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800faaa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800faae:	6938      	ldr	r0, [r7, #16]
 800fab0:	f7f1 f83e 	bl	8000b30 <__aeabi_fsub>
 800fab4:	4603      	mov	r3, r0
 800fab6:	4619      	mov	r1, r3
 800fab8:	4620      	mov	r0, r4
 800faba:	f7f1 f943 	bl	8000d44 <__aeabi_fmul>
 800fabe:	4603      	mov	r3, r0
 800fac0:	461c      	mov	r4, r3
 800fac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fac4:	6978      	ldr	r0, [r7, #20]
 800fac6:	f7f1 f93d 	bl	8000d44 <__aeabi_fmul>
 800faca:	4603      	mov	r3, r0
 800facc:	4619      	mov	r1, r3
 800face:	4620      	mov	r0, r4
 800fad0:	f7f1 f82e 	bl	8000b30 <__aeabi_fsub>
 800fad4:	4603      	mov	r3, r0
 800fad6:	461c      	mov	r4, r3
 800fad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fada:	6938      	ldr	r0, [r7, #16]
 800fadc:	f7f1 f932 	bl	8000d44 <__aeabi_fmul>
 800fae0:	4603      	mov	r3, r0
 800fae2:	4619      	mov	r1, r3
 800fae4:	4620      	mov	r0, r4
 800fae6:	f7f1 f823 	bl	8000b30 <__aeabi_fsub>
 800faea:	4603      	mov	r3, r0
 800faec:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 800faee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faf0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800faf4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800faf8:	68b8      	ldr	r0, [r7, #8]
 800fafa:	f7f1 f819 	bl	8000b30 <__aeabi_fsub>
 800fafe:	4603      	mov	r3, r0
 800fb00:	4619      	mov	r1, r3
 800fb02:	4620      	mov	r0, r4
 800fb04:	f7f1 f91e 	bl	8000d44 <__aeabi_fmul>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f7f1 f918 	bl	8000d44 <__aeabi_fmul>
 800fb14:	4603      	mov	r3, r0
 800fb16:	4619      	mov	r1, r3
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7f1 f809 	bl	8000b30 <__aeabi_fsub>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	461c      	mov	r4, r3
 800fb22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb24:	68b8      	ldr	r0, [r7, #8]
 800fb26:	f7f1 f90d 	bl	8000d44 <__aeabi_fmul>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f7f0 fffe 	bl	8000b30 <__aeabi_fsub>
 800fb34:	4603      	mov	r3, r0
 800fb36:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 800fb38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb3a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800fb3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fb42:	68b8      	ldr	r0, [r7, #8]
 800fb44:	f7f0 fff4 	bl	8000b30 <__aeabi_fsub>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f7f1 f8f9 	bl	8000d44 <__aeabi_fmul>
 800fb52:	4603      	mov	r3, r0
 800fb54:	461c      	mov	r4, r3
 800fb56:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f7f1 f8f3 	bl	8000d44 <__aeabi_fmul>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	4619      	mov	r1, r3
 800fb62:	4620      	mov	r0, r4
 800fb64:	f7f0 ffe4 	bl	8000b30 <__aeabi_fsub>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	461c      	mov	r4, r3
 800fb6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb6e:	68b8      	ldr	r0, [r7, #8]
 800fb70:	f7f1 f8e8 	bl	8000d44 <__aeabi_fmul>
 800fb74:	4603      	mov	r3, r0
 800fb76:	4619      	mov	r1, r3
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f7f0 ffd9 	bl	8000b30 <__aeabi_fsub>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 800fb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb84:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800fb88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fb8c:	68b8      	ldr	r0, [r7, #8]
 800fb8e:	f7f0 ffcf 	bl	8000b30 <__aeabi_fsub>
 800fb92:	4603      	mov	r3, r0
 800fb94:	4619      	mov	r1, r3
 800fb96:	4620      	mov	r0, r4
 800fb98:	f7f1 f8d4 	bl	8000d44 <__aeabi_fmul>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	461c      	mov	r4, r3
 800fba0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f7f1 f8ce 	bl	8000d44 <__aeabi_fmul>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4620      	mov	r0, r4
 800fbae:	f7f0 ffbf 	bl	8000b30 <__aeabi_fsub>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	461c      	mov	r4, r3
 800fbb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fbb8:	68b8      	ldr	r0, [r7, #8]
 800fbba:	f7f1 f8c3 	bl	8000d44 <__aeabi_fmul>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7f0 ffb4 	bl	8000b30 <__aeabi_fsub>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d05d      	beq.n	800fc8e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe6a>
 800fbd2:	2b02      	cmp	r3, #2
 800fbd4:	f300 808e 	bgt.w	800fcf4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xdbe>
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d02b      	beq.n	800fc38 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe14>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800fbe0:	e088      	b.n	800fcf4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 roll_ekf = angle_ekf ;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fbe6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    			 roll_rate = angle_rate;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbee:	621a      	str	r2, [r3, #32]
    			 roll_bias = angle_bias;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    			 roll_acc = angle_acc ;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbfc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    			 S11_roll = S11_angle;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc04:	659a      	str	r2, [r3, #88]	; 0x58
    			 S12_roll = S12_angle;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc0a:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S13_roll = S13_angle;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc10:	669a      	str	r2, [r3, #104]	; 0x68
    			 S21_roll = S21_angle;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc16:	661a      	str	r2, [r3, #96]	; 0x60
    			 S22_roll = S22_angle;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc1c:	665a      	str	r2, [r3, #100]	; 0x64
    			 S23_roll = S23_angle;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc22:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S31_roll = S31_angle;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc28:	671a      	str	r2, [r3, #112]	; 0x70
    			 S32_roll = S32_angle;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc2e:	675a      	str	r2, [r3, #116]	; 0x74
    			 S33_roll = S33_angle;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc34:	679a      	str	r2, [r3, #120]	; 0x78
    			break;
 800fc36:	e05d      	b.n	800fcf4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 pitch_ekf = angle_ekf ;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fc3c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    			 pitch_rate = angle_rate;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc44:	625a      	str	r2, [r3, #36]	; 0x24
    			 pitch_bias = angle_bias;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    			 pitch_acc = angle_acc ;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc52:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    			 S11_pitch = S11_angle;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc5a:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S12_pitch = S12_angle;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc60:	631a      	str	r2, [r3, #48]	; 0x30
    			 S13_pitch = S13_angle;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc66:	63da      	str	r2, [r3, #60]	; 0x3c
    			 S21_pitch = S21_angle;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc6c:	635a      	str	r2, [r3, #52]	; 0x34
    			 S22_pitch = S22_angle;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc72:	639a      	str	r2, [r3, #56]	; 0x38
    			 S23_pitch = S23_angle;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc78:	641a      	str	r2, [r3, #64]	; 0x40
    			 S31_pitch = S31_angle;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc7e:	645a      	str	r2, [r3, #68]	; 0x44
    			 S32_pitch = S32_angle;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc84:	649a      	str	r2, [r3, #72]	; 0x48
    			 S33_pitch = S33_angle;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc8a:	64da      	str	r2, [r3, #76]	; 0x4c
    			break;
 800fc8c:	e032      	b.n	800fcf4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 yaw_ekf = angle_ekf ;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fc92:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 yaw_rate = angle_rate;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc9a:	629a      	str	r2, [r3, #40]	; 0x28
    			 yaw_bias = angle_bias;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 yaw_acc = angle_acc ;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fca8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 S11_yaw = S11_angle;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcb0:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S12_yaw = S12_angle;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fcb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S13_yaw = S13_angle;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    			 S21_yaw = S21_angle;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S22_yaw = S22_angle;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			 S23_yaw = S23_angle;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    			 S31_yaw = S31_angle;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    			 S32_yaw = S32_angle;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fce6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    			 S33_yaw = S33_angle;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    			break;
 800fcf2:	bf00      	nop
}
 800fcf4:	bf00      	nop
 800fcf6:	3778      	adds	r7, #120	; 0x78
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcfe:	bf00      	nop

0800fd00 <_ZN15Kalman_Filtresi8NED2BodyEv>:
	  S22_x = S22_x - S12_x*(Kt21);


}
*/
void Kalman_Filtresi::NED2Body() {
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b089      	sub	sp, #36	; 0x24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
	float deg2rad = M_PI/180.0;
 800fd08:	4b55      	ldr	r3, [pc, #340]	; (800fe60 <_ZN15Kalman_Filtresi8NED2BodyEv+0x160>)
 800fd0a:	61fb      	str	r3, [r7, #28]

	float yaw   = -yaw_ekf*deg2rad;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800fd12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800fd16:	4619      	mov	r1, r3
 800fd18:	69f8      	ldr	r0, [r7, #28]
 800fd1a:	f7f1 f813 	bl	8000d44 <__aeabi_fmul>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	61bb      	str	r3, [r7, #24]
	//float roll  = roll_ekf*deg2rad;
	//float pitch = pitch_ekf*deg2rad;

	float DCM11 = cos(yaw);
 800fd22:	69b8      	ldr	r0, [r7, #24]
 800fd24:	f7f2 fc9c 	bl	8002660 <_ZSt3cosf>
 800fd28:	6178      	str	r0, [r7, #20]
	float DCM22 = DCM11;
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	613b      	str	r3, [r7, #16]

	float DCM12 = sin(yaw);
 800fd2e:	69b8      	ldr	r0, [r7, #24]
 800fd30:	f7f2 fca2 	bl	8002678 <_ZSt3sinf>
 800fd34:	60f8      	str	r0, [r7, #12]
	float DCM21 = -DCM12;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800fd3c:	60bb      	str	r3, [r7, #8]

	_xbody = xbody;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	_ybody = ybody;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	xbody = DCM11*xned + DCM21*yned;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd5c:	6979      	ldr	r1, [r7, #20]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f0 fff0 	bl	8000d44 <__aeabi_fmul>
 800fd64:	4603      	mov	r3, r0
 800fd66:	461c      	mov	r4, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd6e:	68b9      	ldr	r1, [r7, #8]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7f0 ffe7 	bl	8000d44 <__aeabi_fmul>
 800fd76:	4603      	mov	r3, r0
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f7f0 feda 	bl	8000b34 <__addsf3>
 800fd80:	4603      	mov	r3, r0
 800fd82:	461a      	mov	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ybody = DCM12*xned + DCM22*yned;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd90:	68f9      	ldr	r1, [r7, #12]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f0 ffd6 	bl	8000d44 <__aeabi_fmul>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fda2:	6939      	ldr	r1, [r7, #16]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f0 ffcd 	bl	8000d44 <__aeabi_fmul>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	4619      	mov	r1, r3
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f7f0 fec0 	bl	8000b34 <__addsf3>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	/*
	vgpsx = DCM11*vgpsxned + DCM21*vgpsyned;
	vgpsy = DCM12*vgpsxned + DCM22*vgpsyned;
	*/

	vgpsx = (xbody - _xbody) / 0.2;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800fdca:	4619      	mov	r1, r3
 800fdcc:	4610      	mov	r0, r2
 800fdce:	f7f0 feaf 	bl	8000b30 <__aeabi_fsub>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f0 fb27 	bl	8000428 <__aeabi_f2d>
 800fdda:	a31f      	add	r3, pc, #124	; (adr r3, 800fe58 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 800fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde0:	f7f0 fca4 	bl	800072c <__aeabi_ddiv>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4610      	mov	r0, r2
 800fdea:	4619      	mov	r1, r3
 800fdec:	f7f0 fe4c 	bl	8000a88 <__aeabi_d2f>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	vgpsy = (ybody - _ybody) / 0.2;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800fe04:	4619      	mov	r1, r3
 800fe06:	4610      	mov	r0, r2
 800fe08:	f7f0 fe92 	bl	8000b30 <__aeabi_fsub>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7f0 fb0a 	bl	8000428 <__aeabi_f2d>
 800fe14:	a310      	add	r3, pc, #64	; (adr r3, 800fe58 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fc87 	bl	800072c <__aeabi_ddiv>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4610      	mov	r0, r2
 800fe24:	4619      	mov	r1, r3
 800fe26:	f7f0 fe2f 	bl	8000a88 <__aeabi_d2f>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	//vgpsx = vel_gps_filt.Run(vgpsx);
	//vgpsy = vel_gps_filt.Run(vgpsy);

	xgps = xbody;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	ygps = ybody;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

}
 800fe4a:	bf00      	nop
 800fe4c:	3724      	adds	r7, #36	; 0x24
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd90      	pop	{r4, r7, pc}
 800fe52:	bf00      	nop
 800fe54:	f3af 8000 	nop.w
 800fe58:	9999999a 	.word	0x9999999a
 800fe5c:	3fc99999 	.word	0x3fc99999
 800fe60:	3c8efa35 	.word	0x3c8efa35

0800fe64 <_ZN15Kalman_Filtresi3RunEv>:
void Kalman_Filtresi::Run() {
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800fe76:	4619      	mov	r1, r3
 800fe78:	4610      	mov	r0, r2
 800fe7a:	f7f0 fe5b 	bl	8000b34 <__addsf3>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	461a      	mov	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	601a      	str	r2, [r3, #0]
  float accX = acc[0];
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe8c:	617b      	str	r3, [r7, #20]
  float accY = acc[1];
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800fe94:	613b      	str	r3, [r7, #16]
  float accZ = acc[2];
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fe9c:	60fb      	str	r3, [r7, #12]




    if(gyro_ready) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d014      	beq.n	800fed2 <_ZN15Kalman_Filtresi3RunEv+0x6e>

    pos_ekf_counter++;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	605a      	str	r2, [r3, #4]
    EKF_Attitude(ROLL);
 800feb2:	2100      	movs	r1, #0
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7fe ffb5 	bl	800ee24 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800feba:	2101      	movs	r1, #1
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7fe ffb1 	bl	800ee24 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800fec2:	2102      	movs	r1, #2
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7fe ffad 	bl	800ee24 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>

    //EKF_Alt();
    EKF_Pos();
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7fe ff52 	bl	800ed74 <_ZN15Kalman_Filtresi7EKF_PosEv>
 800fed0:	e003      	b.n	800feda <_ZN15Kalman_Filtresi3RunEv+0x76>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
    	*/
    	gyro_ready = true;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2201      	movs	r2, #1
 800fed6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    state.angles[1] = pitch_ekf;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    state.angles[2] = -1*yaw_ekf;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800fef8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    state.rates[0] = roll_rate;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1a      	ldr	r2, [r3, #32]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.rates[1] = pitch_rate;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    state.rates[2] = yaw_rate;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

    state.bias[0] = roll_bias;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.bias[1] = pitch_bias;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    state.bias[2] = yaw_bias;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

}
 800ff44:	bf00      	nop
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fc8b 	bl	8010876 <_ZN3lpfD1Ev>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800ff66:	4618      	mov	r0, r3
 800ff68:	f000 fc85 	bl	8010876 <_ZN3lpfD1Ev>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fc7f 	bl	8010876 <_ZN3lpfD1Ev>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	0000      	movs	r0, r0
 800ff84:	0000      	movs	r0, r0
	...

0800ff88 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af04      	add	r7, sp, #16
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4a27      	ldr	r2, [pc, #156]	; (8010030 <_ZN3PIDC1Ev+0xa8>)
 800ff94:	609a      	str	r2, [r3, #8]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4a26      	ldr	r2, [pc, #152]	; (8010034 <_ZN3PIDC1Ev+0xac>)
 800ff9a:	60da      	str	r2, [r3, #12]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4a26      	ldr	r2, [pc, #152]	; (8010038 <_ZN3PIDC1Ev+0xb0>)
 800ffa0:	611a      	str	r2, [r3, #16]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	22c8      	movs	r2, #200	; 0xc8
 800ffa6:	615a      	str	r2, [r3, #20]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	695b      	ldr	r3, [r3, #20]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7f0 fe75 	bl	8000c9c <__aeabi_i2f>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ffba:	f7f0 ff77 	bl	8000eac <__aeabi_fdiv>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	619a      	str	r2, [r3, #24]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a1c      	ldr	r2, [pc, #112]	; (801003c <_ZN3PIDC1Ev+0xb4>)
 800ffca:	61da      	str	r2, [r3, #28]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	69da      	ldr	r2, [r3, #28]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	699b      	ldr	r3, [r3, #24]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	f7f0 feb4 	bl	8000d44 <__aeabi_fmul>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	461a      	mov	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	621a      	str	r2, [r3, #32]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ffea:	a30d      	add	r3, pc, #52	; (adr r3, 8010020 <_ZN3PIDC1Ev+0x98>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fff4:	a30a      	add	r3, pc, #40	; (adr r3, 8010020 <_ZN3PIDC1Ev+0x98>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	e9cd 2300 	strd	r2, r3, [sp]
 800fffe:	a30a      	add	r3, pc, #40	; (adr r3, 8010028 <_ZN3PIDC1Ev+0xa0>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	4608      	mov	r0, r1
 8010006:	f000 fbc5 	bl	8010794 <_ZN3lpfC1Eddd>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010010:	669a      	str	r2, [r3, #104]	; 0x68
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	f3af 8000 	nop.w
 8010020:	de7ea5f8 	.word	0xde7ea5f8
 8010024:	3fb2a454 	.word	0x3fb2a454
 8010028:	ab367a10 	.word	0xab367a10
 801002c:	3feb573e 	.word	0x3feb573e
 8010030:	3d4ccccd 	.word	0x3d4ccccd
 8010034:	42f00000 	.word	0x42f00000
 8010038:	c2f00000 	.word	0xc2f00000
 801003c:	3e99999a 	.word	0x3e99999a

08010040 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 801004e:	6879      	ldr	r1, [r7, #4]
 8010050:	68b8      	ldr	r0, [r7, #8]
 8010052:	f7f0 fd6d 	bl	8000b30 <__aeabi_fsub>
 8010056:	4603      	mov	r3, r0
 8010058:	461a      	mov	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	4619      	mov	r1, r3
 8010070:	4610      	mov	r0, r2
 8010072:	f7f0 fe67 	bl	8000d44 <__aeabi_fmul>
 8010076:	4603      	mov	r3, r0
 8010078:	4619      	mov	r1, r3
 801007a:	4620      	mov	r0, r4
 801007c:	f7f0 fd5a 	bl	8000b34 <__addsf3>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801008e:	4619      	mov	r1, r3
 8010090:	6838      	ldr	r0, [r7, #0]
 8010092:	f7f0 fe57 	bl	8000d44 <__aeabi_fmul>
 8010096:	4603      	mov	r3, r0
 8010098:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801009e:	4619      	mov	r1, r3
 80100a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100a2:	f7f0 fe4f 	bl	8000d44 <__aeabi_fmul>
 80100a6:	4603      	mov	r3, r0
 80100a8:	613b      	str	r3, [r7, #16]
    return P+I;
 80100aa:	6939      	ldr	r1, [r7, #16]
 80100ac:	6978      	ldr	r0, [r7, #20]
 80100ae:	f7f0 fd41 	bl	8000b34 <__addsf3>
 80100b2:	4603      	mov	r3, r0

}
 80100b4:	4618      	mov	r0, r3
 80100b6:	371c      	adds	r7, #28
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd90      	pop	{r4, r7, pc}

080100bc <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 80100bc:	b580      	push	{r7, lr}
 80100be:	b08a      	sub	sp, #40	; 0x28
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 80100ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100cc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d90e      	bls.n	80100f2 <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6a1b      	ldr	r3, [r3, #32]
 80100d8:	68b9      	ldr	r1, [r7, #8]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7f0 fd2a 	bl	8000b34 <__addsf3>
 80100e0:	4603      	mov	r3, r0
 80100e2:	461a      	mov	r2, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	627b      	str	r3, [r7, #36]	; 0x24
 80100f0:	e01c      	b.n	801012c <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	f240 5213 	movw	r2, #1299	; 0x513
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d810      	bhi.n	801011e <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	4619      	mov	r1, r3
 8010102:	68b8      	ldr	r0, [r7, #8]
 8010104:	f7f0 fd14 	bl	8000b30 <__aeabi_fsub>
 8010108:	4603      	mov	r3, r0
 801010a:	461a      	mov	r2, r3
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801011a:	627b      	str	r3, [r7, #36]	; 0x24
 801011c:	e006      	b.n	801012c <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	68ba      	ldr	r2, [r7, #8]
 8010122:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 8010126:	f04f 0300 	mov.w	r3, #0
 801012a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010130:	f7f0 fcfe 	bl	8000b30 <__aeabi_fsub>
 8010134:	4603      	mov	r3, r0
 8010136:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 8010138:	6a39      	ldr	r1, [r7, #32]
 801013a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801013c:	f7f0 fe02 	bl	8000d44 <__aeabi_fmul>
 8010140:	4603      	mov	r3, r0
 8010142:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	68b8      	ldr	r0, [r7, #8]
 8010148:	f7f0 fcf2 	bl	8000b30 <__aeabi_fsub>
 801014c:	4603      	mov	r3, r0
 801014e:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 8010150:	69b9      	ldr	r1, [r7, #24]
 8010152:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010154:	f7f0 fdf6 	bl	8000d44 <__aeabi_fmul>
 8010158:	4603      	mov	r3, r0
 801015a:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 801015c:	6979      	ldr	r1, [r7, #20]
 801015e:	69f8      	ldr	r0, [r7, #28]
 8010160:	f7f0 fce8 	bl	8000b34 <__addsf3>
 8010164:	4603      	mov	r3, r0
 8010166:	613b      	str	r3, [r7, #16]
    return PI;
 8010168:	693b      	ldr	r3, [r7, #16]

}
 801016a:	4618      	mov	r0, r3
 801016c:	3728      	adds	r7, #40	; 0x28
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	0000      	movs	r0, r0
 8010174:	0000      	movs	r0, r0
	...

08010178 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 8010178:	b5b0      	push	{r4, r5, r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010186:	4618      	mov	r0, r3
 8010188:	f7f0 f94e 	bl	8000428 <__aeabi_f2d>
 801018c:	a31e      	add	r3, pc, #120	; (adr r3, 8010208 <_ZN3PID6RateFFEf+0x90>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	f7f0 f9a1 	bl	80004d8 <__aeabi_dmul>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4614      	mov	r4, r2
 801019c:	461d      	mov	r5, r3
 801019e:	6838      	ldr	r0, [r7, #0]
 80101a0:	f7f0 f942 	bl	8000428 <__aeabi_f2d>
 80101a4:	a31a      	add	r3, pc, #104	; (adr r3, 8010210 <_ZN3PID6RateFFEf+0x98>)
 80101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101aa:	f7f0 f995 	bl	80004d8 <__aeabi_dmul>
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4620      	mov	r0, r4
 80101b4:	4629      	mov	r1, r5
 80101b6:	f7ef ffd9 	bl	800016c <__adddf3>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	4614      	mov	r4, r2
 80101c0:	461d      	mov	r5, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7f0 f92e 	bl	8000428 <__aeabi_f2d>
 80101cc:	a310      	add	r3, pc, #64	; (adr r3, 8010210 <_ZN3PID6RateFFEf+0x98>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f7f0 f981 	bl	80004d8 <__aeabi_dmul>
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	4620      	mov	r0, r4
 80101dc:	4629      	mov	r1, r5
 80101de:	f7ef ffc3 	bl	8000168 <__aeabi_dsub>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4610      	mov	r0, r2
 80101e8:	4619      	mov	r1, r3
 80101ea:	f7f0 fc4d 	bl	8000a88 <__aeabi_d2f>
 80101ee:	4603      	mov	r3, r0
 80101f0:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101f6:	68f9      	ldr	r1, [r7, #12]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f0 fda3 	bl	8000d44 <__aeabi_fmul>
 80101fe:	4603      	mov	r3, r0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bdb0      	pop	{r4, r5, r7, pc}
 8010208:	1eb851ec 	.word	0x1eb851ec
 801020c:	3fefeb85 	.word	0x3fefeb85
 8010210:	538ef34d 	.word	0x538ef34d
 8010214:	3fb72474 	.word	0x3fb72474

08010218 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 8010218:	b590      	push	{r4, r7, lr}
 801021a:	b087      	sub	sp, #28
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
 8010224:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 8010226:	6879      	ldr	r1, [r7, #4]
 8010228:	68b8      	ldr	r0, [r7, #8]
 801022a:	f7f0 fc81 	bl	8000b30 <__aeabi_fsub>
 801022e:	4603      	mov	r3, r0
 8010230:	461a      	mov	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	699b      	ldr	r3, [r3, #24]
 8010244:	4619      	mov	r1, r3
 8010246:	4610      	mov	r0, r2
 8010248:	f7f0 fd7c 	bl	8000d44 <__aeabi_fmul>
 801024c:	4603      	mov	r3, r0
 801024e:	4619      	mov	r1, r3
 8010250:	4620      	mov	r0, r4
 8010252:	f7f0 fc6f 	bl	8000b34 <__addsf3>
 8010256:	4603      	mov	r3, r0
 8010258:	461a      	mov	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010266:	4618      	mov	r0, r3
 8010268:	f7f0 fd6c 	bl	8000d44 <__aeabi_fmul>
 801026c:	4603      	mov	r3, r0
 801026e:	461a      	mov	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801027c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801027e:	4618      	mov	r0, r3
 8010280:	f7f0 fd60 	bl	8000d44 <__aeabi_fmul>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010292:	4619      	mov	r1, r3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7f0 fc4b 	bl	8000b30 <__aeabi_fsub>
 801029a:	4603      	mov	r3, r0
 801029c:	461a      	mov	r2, r3
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	699b      	ldr	r3, [r3, #24]
 80102a2:	4619      	mov	r1, r3
 80102a4:	4610      	mov	r0, r2
 80102a6:	f7f0 fe01 	bl	8000eac <__aeabi_fdiv>
 80102aa:	4603      	mov	r3, r0
 80102ac:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3338      	adds	r3, #56	; 0x38
 80102b2:	6979      	ldr	r1, [r7, #20]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 fa88 	bl	80107ca <_ZN3lpf3RunEf>
 80102ba:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80102c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7f0 fd3d 	bl	8000d44 <__aeabi_fmul>
 80102ca:	4603      	mov	r3, r0
 80102cc:	6979      	ldr	r1, [r7, #20]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f0 fc2e 	bl	8000b30 <__aeabi_fsub>
 80102d4:	4603      	mov	r3, r0
 80102d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102d8:	4618      	mov	r0, r3
 80102da:	f7f0 fd33 	bl	8000d44 <__aeabi_fmul>
 80102de:	4603      	mov	r3, r0
 80102e0:	461a      	mov	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80102f4:	4619      	mov	r1, r3
 80102f6:	4610      	mov	r0, r2
 80102f8:	f7f0 fc1c 	bl	8000b34 <__addsf3>
 80102fc:	4603      	mov	r3, r0
 80102fe:	461a      	mov	r2, r3
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010306:	4619      	mov	r1, r3
 8010308:	4610      	mov	r0, r2
 801030a:	f7f0 fc13 	bl	8000b34 <__addsf3>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010328:	4b0e      	ldr	r3, [pc, #56]	; (8010364 <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 801032a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f000 f9ba 	bl	80106a8 <_ZN3PID3SatEfii>
 8010334:	4602      	mov	r2, r0
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 801035a:	4618      	mov	r0, r3
 801035c:	371c      	adds	r7, #28
 801035e:	46bd      	mov	sp, r7
 8010360:	bd90      	pop	{r4, r7, pc}
 8010362:	bf00      	nop
 8010364:	fffffed4 	.word	0xfffffed4

08010368 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
 8010374:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	685a      	ldr	r2, [r3, #4]
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	68b8      	ldr	r0, [r7, #8]
 8010382:	f7f0 fbd5 	bl	8000b30 <__aeabi_fsub>
 8010386:	4603      	mov	r3, r0
 8010388:	461a      	mov	r2, r3
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	4619      	mov	r1, r3
 8010394:	6838      	ldr	r0, [r7, #0]
 8010396:	f7f0 fcd5 	bl	8000d44 <__aeabi_fmul>
 801039a:	4603      	mov	r3, r0
 801039c:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4619      	mov	r1, r3
 80103a8:	4610      	mov	r0, r2
 80103aa:	f7f0 fbc1 	bl	8000b30 <__aeabi_fsub>
 80103ae:	4603      	mov	r3, r0
 80103b0:	461a      	mov	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	4619      	mov	r1, r3
 80103b8:	4610      	mov	r0, r2
 80103ba:	f7f0 fd77 	bl	8000eac <__aeabi_fdiv>
 80103be:	4603      	mov	r3, r0
 80103c0:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 80103c2:	69b9      	ldr	r1, [r7, #24]
 80103c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103c6:	f7f0 fcbd 	bl	8000d44 <__aeabi_fmul>
 80103ca:	4603      	mov	r3, r0
 80103cc:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 80103ce:	6979      	ldr	r1, [r7, #20]
 80103d0:	69f8      	ldr	r0, [r7, #28]
 80103d2:	f7f0 fbaf 	bl	8000b34 <__addsf3>
 80103d6:	4603      	mov	r3, r0
 80103d8:	613b      	str	r3, [r7, #16]
	return pd;
 80103da:	693b      	ldr	r3, [r7, #16]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3720      	adds	r7, #32
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 80103e4:	b590      	push	{r4, r7, lr}
 80103e6:	b087      	sub	sp, #28
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	60b9      	str	r1, [r7, #8]
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 80103f2:	6879      	ldr	r1, [r7, #4]
 80103f4:	68b8      	ldr	r0, [r7, #8]
 80103f6:	f7f0 fb9b 	bl	8000b30 <__aeabi_fsub>
 80103fa:	4603      	mov	r3, r0
 80103fc:	461a      	mov	r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8010408:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801040e:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010414:	4618      	mov	r0, r3
 8010416:	f7f0 fe71 	bl	80010fc <__aeabi_f2iz>
 801041a:	4604      	mov	r4, r0
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010422:	4618      	mov	r0, r3
 8010424:	f7f0 fe6a 	bl	80010fc <__aeabi_f2iz>
 8010428:	4603      	mov	r3, r0
 801042a:	429c      	cmp	r4, r3
 801042c:	d019      	beq.n	8010462 <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010432:	4619      	mov	r1, r3
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f000 f8df 	bl	80105f8 <_ZN3PID3sgnEf>
 801043a:	4603      	mov	r3, r0
 801043c:	461c      	mov	r4, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010444:	4619      	mov	r1, r3
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f000 f8d6 	bl	80105f8 <_ZN3PID3sgnEf>
 801044c:	4603      	mov	r3, r0
 801044e:	429c      	cmp	r4, r3
 8010450:	bf0c      	ite	eq
 8010452:	2301      	moveq	r3, #1
 8010454:	2300      	movne	r3, #0
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 801045c:	f04f 0300 	mov.w	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010468:	4618      	mov	r0, r3
 801046a:	f7f0 fc6b 	bl	8000d44 <__aeabi_fmul>
 801046e:	4603      	mov	r3, r0
 8010470:	461a      	mov	r2, r3
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010478:	4619      	mov	r1, r3
 801047a:	4610      	mov	r0, r2
 801047c:	f7f0 fb58 	bl	8000b30 <__aeabi_fsub>
 8010480:	4603      	mov	r3, r0
 8010482:	494d      	ldr	r1, [pc, #308]	; (80105b8 <_ZN3PID7PD_RateEfffff+0x1d4>)
 8010484:	4618      	mov	r0, r3
 8010486:	f7f0 fc5d 	bl	8000d44 <__aeabi_fmul>
 801048a:	4603      	mov	r3, r0
 801048c:	461a      	mov	r2, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	699b      	ldr	r3, [r3, #24]
 80104a4:	4619      	mov	r1, r3
 80104a6:	4610      	mov	r0, r2
 80104a8:	f7f0 fc4c 	bl	8000d44 <__aeabi_fmul>
 80104ac:	4603      	mov	r3, r0
 80104ae:	4619      	mov	r1, r3
 80104b0:	4620      	mov	r0, r4
 80104b2:	f7f0 fb3f 	bl	8000b34 <__addsf3>
 80104b6:	4603      	mov	r3, r0
 80104b8:	461a      	mov	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c8:	4619      	mov	r1, r3
 80104ca:	4610      	mov	r0, r2
 80104cc:	f7f0 fb30 	bl	8000b30 <__aeabi_fsub>
 80104d0:	4603      	mov	r3, r0
 80104d2:	461a      	mov	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	6979      	ldr	r1, [r7, #20]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f0 fc29 	bl	8000d44 <__aeabi_fmul>
 80104f2:	4603      	mov	r3, r0
 80104f4:	4619      	mov	r1, r3
 80104f6:	4620      	mov	r0, r4
 80104f8:	f7f0 fb1c 	bl	8000b34 <__addsf3>
 80104fc:	4603      	mov	r3, r0
 80104fe:	461a      	mov	r2, r3
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010512:	6839      	ldr	r1, [r7, #0]
 8010514:	4618      	mov	r0, r3
 8010516:	f7f0 fc15 	bl	8000d44 <__aeabi_fmul>
 801051a:	4603      	mov	r3, r0
 801051c:	461a      	mov	r2, r3
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010538:	4618      	mov	r0, r3
 801053a:	f7f0 fc03 	bl	8000d44 <__aeabi_fmul>
 801053e:	4603      	mov	r3, r0
 8010540:	461a      	mov	r2, r3
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	f7f0 faec 	bl	8000b34 <__addsf3>
 801055c:	4603      	mov	r3, r0
 801055e:	461a      	mov	r2, r3
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010566:	4619      	mov	r1, r3
 8010568:	4610      	mov	r0, r2
 801056a:	f7f0 fae3 	bl	8000b34 <__addsf3>
 801056e:	4603      	mov	r3, r0
 8010570:	461a      	mov	r2, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010588:	4b0c      	ldr	r3, [pc, #48]	; (80105bc <_ZN3PID7PD_RateEfffff+0x1d8>)
 801058a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f000 f88a 	bl	80106a8 <_ZN3PID3SatEfii>
 8010594:	4602      	mov	r2, r0
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 80105ae:	4618      	mov	r0, r3
 80105b0:	371c      	adds	r7, #28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd90      	pop	{r4, r7, pc}
 80105b6:	bf00      	nop
 80105b8:	42c80000 	.word	0x42c80000
 80105bc:	fffffed4 	.word	0xfffffed4

080105c0 <_ZN3PID5resetEv>:

void PID::reset() {
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f04f 0200 	mov.w	r2, #0
 80105ce:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f04f 0200 	mov.w	r2, #0
 80105d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f04f 0200 	mov.w	r2, #0
 80105e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f04f 0200 	mov.w	r2, #0
 80105ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 80105ee:	bf00      	nop
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bc80      	pop	{r7}
 80105f6:	4770      	bx	lr

080105f8 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 8010602:	f04f 0100 	mov.w	r1, #0
 8010606:	6838      	ldr	r0, [r7, #0]
 8010608:	f7f0 fd3a 	bl	8001080 <__aeabi_fcmplt>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <_ZN3PID3sgnEf+0x1e>
 8010612:	23ff      	movs	r3, #255	; 0xff
 8010614:	e00a      	b.n	801062c <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 8010616:	f04f 0100 	mov.w	r1, #0
 801061a:	6838      	ldr	r0, [r7, #0]
 801061c:	f7f0 fd4e 	bl	80010bc <__aeabi_fcmpgt>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <_ZN3PID3sgnEf+0x32>
 8010626:	2301      	movs	r3, #1
 8010628:	e000      	b.n	801062c <_ZN3PID3sgnEf+0x34>
  return 0;
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	607a      	str	r2, [r7, #4]
 8010640:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8010648:	dd24      	ble.n	8010694 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7f0 fb26 	bl	8000c9c <__aeabi_i2f>
 8010650:	4603      	mov	r3, r0
 8010652:	4619      	mov	r1, r3
 8010654:	68b8      	ldr	r0, [r7, #8]
 8010656:	f7f0 fd31 	bl	80010bc <__aeabi_fcmpgt>
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d005      	beq.n	801066c <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7f0 fb1b 	bl	8000c9c <__aeabi_i2f>
 8010666:	4603      	mov	r3, r0
 8010668:	617b      	str	r3, [r7, #20]
 801066a:	e015      	b.n	8010698 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 801066c:	6838      	ldr	r0, [r7, #0]
 801066e:	f7f0 fb15 	bl	8000c9c <__aeabi_i2f>
 8010672:	4603      	mov	r3, r0
 8010674:	4619      	mov	r1, r3
 8010676:	68b8      	ldr	r0, [r7, #8]
 8010678:	f7f0 fd02 	bl	8001080 <__aeabi_fcmplt>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d005      	beq.n	801068e <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 8010682:	6838      	ldr	r0, [r7, #0]
 8010684:	f7f0 fb0a 	bl	8000c9c <__aeabi_i2f>
 8010688:	4603      	mov	r3, r0
 801068a:	617b      	str	r3, [r7, #20]
 801068c:	e004      	b.n	8010698 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	617b      	str	r3, [r7, #20]
 8010692:	e001      	b.n	8010698 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 8010694:	4b03      	ldr	r3, [pc, #12]	; (80106a4 <_ZN3PID3SatEfiii+0x70>)
 8010696:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 8010698:	697b      	ldr	r3, [r7, #20]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3718      	adds	r7, #24
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	447a0000 	.word	0x447a0000

080106a8 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7f0 faf0 	bl	8000c9c <__aeabi_i2f>
 80106bc:	4603      	mov	r3, r0
 80106be:	4619      	mov	r1, r3
 80106c0:	68b8      	ldr	r0, [r7, #8]
 80106c2:	f7f0 fcfb 	bl	80010bc <__aeabi_fcmpgt>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d005      	beq.n	80106d8 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7f0 fae5 	bl	8000c9c <__aeabi_i2f>
 80106d2:	4603      	mov	r3, r0
 80106d4:	617b      	str	r3, [r7, #20]
 80106d6:	e012      	b.n	80106fe <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 80106d8:	6838      	ldr	r0, [r7, #0]
 80106da:	f7f0 fadf 	bl	8000c9c <__aeabi_i2f>
 80106de:	4603      	mov	r3, r0
 80106e0:	4619      	mov	r1, r3
 80106e2:	68b8      	ldr	r0, [r7, #8]
 80106e4:	f7f0 fccc 	bl	8001080 <__aeabi_fcmplt>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d005      	beq.n	80106fa <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 80106ee:	6838      	ldr	r0, [r7, #0]
 80106f0:	f7f0 fad4 	bl	8000c9c <__aeabi_i2f>
 80106f4:	4603      	mov	r3, r0
 80106f6:	617b      	str	r3, [r7, #20]
 80106f8:	e001      	b.n	80106fe <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 80106fe:	697b      	ldr	r3, [r7, #20]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 8010712:	4b16      	ldr	r3, [pc, #88]	; (801076c <_ZN3PID5F2thrEf+0x64>)
 8010714:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 8010716:	4b16      	ldr	r3, [pc, #88]	; (8010770 <_ZN3PID5F2thrEf+0x68>)
 8010718:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 801071a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 801071e:	6838      	ldr	r0, [r7, #0]
 8010720:	f7f0 fbc4 	bl	8000eac <__aeabi_fdiv>
 8010724:	4603      	mov	r3, r0
 8010726:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 8010728:	69f9      	ldr	r1, [r7, #28]
 801072a:	6978      	ldr	r0, [r7, #20]
 801072c:	f7f0 fbbe 	bl	8000eac <__aeabi_fdiv>
 8010730:	4603      	mov	r3, r0
 8010732:	4618      	mov	r0, r3
 8010734:	f7f2 f990 	bl	8002a58 <_ZSt4sqrtf>
 8010738:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 801073a:	490e      	ldr	r1, [pc, #56]	; (8010774 <_ZN3PID5F2thrEf+0x6c>)
 801073c:	6938      	ldr	r0, [r7, #16]
 801073e:	f7f0 fb01 	bl	8000d44 <__aeabi_fmul>
 8010742:	4603      	mov	r3, r0
 8010744:	69b9      	ldr	r1, [r7, #24]
 8010746:	4618      	mov	r0, r3
 8010748:	f7f0 fbb0 	bl	8000eac <__aeabi_fdiv>
 801074c:	4603      	mov	r3, r0
 801074e:	4909      	ldr	r1, [pc, #36]	; (8010774 <_ZN3PID5F2thrEf+0x6c>)
 8010750:	4618      	mov	r0, r3
 8010752:	f7f0 f9ef 	bl	8000b34 <__addsf3>
 8010756:	4603      	mov	r3, r0
 8010758:	4618      	mov	r0, r3
 801075a:	f7f0 fcf5 	bl	8001148 <__aeabi_f2uiz>
 801075e:	4603      	mov	r3, r0
 8010760:	60fb      	str	r3, [r7, #12]
	return thr;
 8010762:	68fb      	ldr	r3, [r7, #12]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	3359f513 	.word	0x3359f513
 8010770:	46896e00 	.word	0x46896e00
 8010774:	447a0000 	.word	0x447a0000

08010778 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3338      	adds	r3, #56	; 0x38
 8010784:	4618      	mov	r0, r3
 8010786:	f000 f876 	bl	8010876 <_ZN3lpfD1Ev>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 80107a0:	68f9      	ldr	r1, [r7, #12]
 80107a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 80107aa:	68f9      	ldr	r1, [r7, #12]
 80107ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 80107b4:	68f9      	ldr	r1, [r7, #12]
 80107b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80107ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bc80      	pop	{r7}
 80107c8:	4770      	bx	lr

080107ca <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 80107ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ef fe21 	bl	8000428 <__aeabi_f2d>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	4620      	mov	r0, r4
 80107ec:	4629      	mov	r1, r5
 80107ee:	f7ef fe73 	bl	80004d8 <__aeabi_dmul>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4690      	mov	r8, r2
 80107f8:	4699      	mov	r9, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8010800:	6838      	ldr	r0, [r7, #0]
 8010802:	f7ef fe11 	bl	8000428 <__aeabi_f2d>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef fe63 	bl	80004d8 <__aeabi_dmul>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4640      	mov	r0, r8
 8010818:	4649      	mov	r1, r9
 801081a:	f7ef fca7 	bl	800016c <__adddf3>
 801081e:	4602      	mov	r2, r0
 8010820:	460b      	mov	r3, r1
 8010822:	4690      	mov	r8, r2
 8010824:	4699      	mov	r9, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	f7ef fdf9 	bl	8000428 <__aeabi_f2d>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fe4b 	bl	80004d8 <__aeabi_dmul>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4640      	mov	r0, r8
 8010848:	4649      	mov	r1, r9
 801084a:	f7ef fc8f 	bl	800016c <__adddf3>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4610      	mov	r0, r2
 8010854:	4619      	mov	r1, r3
 8010856:	f7f0 f917 	bl	8000a88 <__aeabi_d2f>
 801085a:	4603      	mov	r3, r0
 801085c:	60fb      	str	r3, [r7, #12]
	x_ = x;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	601a      	str	r2, [r3, #0]
	y_ = y;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	605a      	str	r2, [r3, #4]
	return y;
 801086a:	68fb      	ldr	r3, [r7, #12]

}
 801086c:	4618      	mov	r0, r3
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08010876 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 8010876:	b480      	push	{r7}
 8010878:	b083      	sub	sp, #12
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	bc80      	pop	{r7}
 8010888:	4770      	bx	lr
	...

0801088c <atanf>:
 801088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010890:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8010894:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8010898:	4604      	mov	r4, r0
 801089a:	4680      	mov	r8, r0
 801089c:	db0e      	blt.n	80108bc <atanf+0x30>
 801089e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80108a2:	dd04      	ble.n	80108ae <atanf+0x22>
 80108a4:	4601      	mov	r1, r0
 80108a6:	f7f0 f945 	bl	8000b34 <__addsf3>
 80108aa:	4604      	mov	r4, r0
 80108ac:	e003      	b.n	80108b6 <atanf+0x2a>
 80108ae:	2800      	cmp	r0, #0
 80108b0:	f300 80ce 	bgt.w	8010a50 <atanf+0x1c4>
 80108b4:	4c67      	ldr	r4, [pc, #412]	; (8010a54 <atanf+0x1c8>)
 80108b6:	4620      	mov	r0, r4
 80108b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108bc:	4b66      	ldr	r3, [pc, #408]	; (8010a58 <atanf+0x1cc>)
 80108be:	429d      	cmp	r5, r3
 80108c0:	dc0e      	bgt.n	80108e0 <atanf+0x54>
 80108c2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80108c6:	da08      	bge.n	80108da <atanf+0x4e>
 80108c8:	4964      	ldr	r1, [pc, #400]	; (8010a5c <atanf+0x1d0>)
 80108ca:	f7f0 f933 	bl	8000b34 <__addsf3>
 80108ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80108d2:	f7f0 fbf3 	bl	80010bc <__aeabi_fcmpgt>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d1ed      	bne.n	80108b6 <atanf+0x2a>
 80108da:	f04f 36ff 	mov.w	r6, #4294967295
 80108de:	e01c      	b.n	801091a <atanf+0x8e>
 80108e0:	f000 f914 	bl	8010b0c <fabsf>
 80108e4:	4b5e      	ldr	r3, [pc, #376]	; (8010a60 <atanf+0x1d4>)
 80108e6:	4604      	mov	r4, r0
 80108e8:	429d      	cmp	r5, r3
 80108ea:	dc7c      	bgt.n	80109e6 <atanf+0x15a>
 80108ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80108f0:	429d      	cmp	r5, r3
 80108f2:	dc67      	bgt.n	80109c4 <atanf+0x138>
 80108f4:	4601      	mov	r1, r0
 80108f6:	f7f0 f91d 	bl	8000b34 <__addsf3>
 80108fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80108fe:	f7f0 f917 	bl	8000b30 <__aeabi_fsub>
 8010902:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010906:	4605      	mov	r5, r0
 8010908:	4620      	mov	r0, r4
 801090a:	f7f0 f913 	bl	8000b34 <__addsf3>
 801090e:	4601      	mov	r1, r0
 8010910:	4628      	mov	r0, r5
 8010912:	f7f0 facb 	bl	8000eac <__aeabi_fdiv>
 8010916:	2600      	movs	r6, #0
 8010918:	4604      	mov	r4, r0
 801091a:	4621      	mov	r1, r4
 801091c:	4620      	mov	r0, r4
 801091e:	f7f0 fa11 	bl	8000d44 <__aeabi_fmul>
 8010922:	4601      	mov	r1, r0
 8010924:	4607      	mov	r7, r0
 8010926:	f7f0 fa0d 	bl	8000d44 <__aeabi_fmul>
 801092a:	4605      	mov	r5, r0
 801092c:	494d      	ldr	r1, [pc, #308]	; (8010a64 <atanf+0x1d8>)
 801092e:	f7f0 fa09 	bl	8000d44 <__aeabi_fmul>
 8010932:	494d      	ldr	r1, [pc, #308]	; (8010a68 <atanf+0x1dc>)
 8010934:	f7f0 f8fe 	bl	8000b34 <__addsf3>
 8010938:	4629      	mov	r1, r5
 801093a:	f7f0 fa03 	bl	8000d44 <__aeabi_fmul>
 801093e:	494b      	ldr	r1, [pc, #300]	; (8010a6c <atanf+0x1e0>)
 8010940:	f7f0 f8f8 	bl	8000b34 <__addsf3>
 8010944:	4629      	mov	r1, r5
 8010946:	f7f0 f9fd 	bl	8000d44 <__aeabi_fmul>
 801094a:	4949      	ldr	r1, [pc, #292]	; (8010a70 <atanf+0x1e4>)
 801094c:	f7f0 f8f2 	bl	8000b34 <__addsf3>
 8010950:	4629      	mov	r1, r5
 8010952:	f7f0 f9f7 	bl	8000d44 <__aeabi_fmul>
 8010956:	4947      	ldr	r1, [pc, #284]	; (8010a74 <atanf+0x1e8>)
 8010958:	f7f0 f8ec 	bl	8000b34 <__addsf3>
 801095c:	4629      	mov	r1, r5
 801095e:	f7f0 f9f1 	bl	8000d44 <__aeabi_fmul>
 8010962:	4945      	ldr	r1, [pc, #276]	; (8010a78 <atanf+0x1ec>)
 8010964:	f7f0 f8e6 	bl	8000b34 <__addsf3>
 8010968:	4639      	mov	r1, r7
 801096a:	f7f0 f9eb 	bl	8000d44 <__aeabi_fmul>
 801096e:	4943      	ldr	r1, [pc, #268]	; (8010a7c <atanf+0x1f0>)
 8010970:	4607      	mov	r7, r0
 8010972:	4628      	mov	r0, r5
 8010974:	f7f0 f9e6 	bl	8000d44 <__aeabi_fmul>
 8010978:	4941      	ldr	r1, [pc, #260]	; (8010a80 <atanf+0x1f4>)
 801097a:	f7f0 f8d9 	bl	8000b30 <__aeabi_fsub>
 801097e:	4629      	mov	r1, r5
 8010980:	f7f0 f9e0 	bl	8000d44 <__aeabi_fmul>
 8010984:	493f      	ldr	r1, [pc, #252]	; (8010a84 <atanf+0x1f8>)
 8010986:	f7f0 f8d3 	bl	8000b30 <__aeabi_fsub>
 801098a:	4629      	mov	r1, r5
 801098c:	f7f0 f9da 	bl	8000d44 <__aeabi_fmul>
 8010990:	493d      	ldr	r1, [pc, #244]	; (8010a88 <atanf+0x1fc>)
 8010992:	f7f0 f8cd 	bl	8000b30 <__aeabi_fsub>
 8010996:	4629      	mov	r1, r5
 8010998:	f7f0 f9d4 	bl	8000d44 <__aeabi_fmul>
 801099c:	493b      	ldr	r1, [pc, #236]	; (8010a8c <atanf+0x200>)
 801099e:	f7f0 f8c7 	bl	8000b30 <__aeabi_fsub>
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7f0 f9ce 	bl	8000d44 <__aeabi_fmul>
 80109a8:	4601      	mov	r1, r0
 80109aa:	4638      	mov	r0, r7
 80109ac:	f7f0 f8c2 	bl	8000b34 <__addsf3>
 80109b0:	4621      	mov	r1, r4
 80109b2:	f7f0 f9c7 	bl	8000d44 <__aeabi_fmul>
 80109b6:	1c73      	adds	r3, r6, #1
 80109b8:	4601      	mov	r1, r0
 80109ba:	d133      	bne.n	8010a24 <atanf+0x198>
 80109bc:	4620      	mov	r0, r4
 80109be:	f7f0 f8b7 	bl	8000b30 <__aeabi_fsub>
 80109c2:	e772      	b.n	80108aa <atanf+0x1e>
 80109c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80109c8:	f7f0 f8b2 	bl	8000b30 <__aeabi_fsub>
 80109cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80109d0:	4605      	mov	r5, r0
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7f0 f8ae 	bl	8000b34 <__addsf3>
 80109d8:	4601      	mov	r1, r0
 80109da:	4628      	mov	r0, r5
 80109dc:	f7f0 fa66 	bl	8000eac <__aeabi_fdiv>
 80109e0:	2601      	movs	r6, #1
 80109e2:	4604      	mov	r4, r0
 80109e4:	e799      	b.n	801091a <atanf+0x8e>
 80109e6:	4b2a      	ldr	r3, [pc, #168]	; (8010a90 <atanf+0x204>)
 80109e8:	429d      	cmp	r5, r3
 80109ea:	dc14      	bgt.n	8010a16 <atanf+0x18a>
 80109ec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80109f0:	f7f0 f89e 	bl	8000b30 <__aeabi_fsub>
 80109f4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80109f8:	4605      	mov	r5, r0
 80109fa:	4620      	mov	r0, r4
 80109fc:	f7f0 f9a2 	bl	8000d44 <__aeabi_fmul>
 8010a00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010a04:	f7f0 f896 	bl	8000b34 <__addsf3>
 8010a08:	4601      	mov	r1, r0
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f7f0 fa4e 	bl	8000eac <__aeabi_fdiv>
 8010a10:	2602      	movs	r6, #2
 8010a12:	4604      	mov	r4, r0
 8010a14:	e781      	b.n	801091a <atanf+0x8e>
 8010a16:	4601      	mov	r1, r0
 8010a18:	481e      	ldr	r0, [pc, #120]	; (8010a94 <atanf+0x208>)
 8010a1a:	f7f0 fa47 	bl	8000eac <__aeabi_fdiv>
 8010a1e:	2603      	movs	r6, #3
 8010a20:	4604      	mov	r4, r0
 8010a22:	e77a      	b.n	801091a <atanf+0x8e>
 8010a24:	4b1c      	ldr	r3, [pc, #112]	; (8010a98 <atanf+0x20c>)
 8010a26:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8010a2a:	f7f0 f881 	bl	8000b30 <__aeabi_fsub>
 8010a2e:	4621      	mov	r1, r4
 8010a30:	f7f0 f87e 	bl	8000b30 <__aeabi_fsub>
 8010a34:	4b19      	ldr	r3, [pc, #100]	; (8010a9c <atanf+0x210>)
 8010a36:	4601      	mov	r1, r0
 8010a38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010a3c:	f7f0 f878 	bl	8000b30 <__aeabi_fsub>
 8010a40:	f1b8 0f00 	cmp.w	r8, #0
 8010a44:	4604      	mov	r4, r0
 8010a46:	f6bf af36 	bge.w	80108b6 <atanf+0x2a>
 8010a4a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010a4e:	e72c      	b.n	80108aa <atanf+0x1e>
 8010a50:	4c13      	ldr	r4, [pc, #76]	; (8010aa0 <atanf+0x214>)
 8010a52:	e730      	b.n	80108b6 <atanf+0x2a>
 8010a54:	bfc90fdb 	.word	0xbfc90fdb
 8010a58:	3edfffff 	.word	0x3edfffff
 8010a5c:	7149f2ca 	.word	0x7149f2ca
 8010a60:	3f97ffff 	.word	0x3f97ffff
 8010a64:	3c8569d7 	.word	0x3c8569d7
 8010a68:	3d4bda59 	.word	0x3d4bda59
 8010a6c:	3d886b35 	.word	0x3d886b35
 8010a70:	3dba2e6e 	.word	0x3dba2e6e
 8010a74:	3e124925 	.word	0x3e124925
 8010a78:	3eaaaaab 	.word	0x3eaaaaab
 8010a7c:	bd15a221 	.word	0xbd15a221
 8010a80:	3d6ef16b 	.word	0x3d6ef16b
 8010a84:	3d9d8795 	.word	0x3d9d8795
 8010a88:	3de38e38 	.word	0x3de38e38
 8010a8c:	3e4ccccd 	.word	0x3e4ccccd
 8010a90:	401bffff 	.word	0x401bffff
 8010a94:	bf800000 	.word	0xbf800000
 8010a98:	08013db4 	.word	0x08013db4
 8010a9c:	08013da4 	.word	0x08013da4
 8010aa0:	3fc90fdb 	.word	0x3fc90fdb

08010aa4 <cosf>:
 8010aa4:	b507      	push	{r0, r1, r2, lr}
 8010aa6:	4a18      	ldr	r2, [pc, #96]	; (8010b08 <cosf+0x64>)
 8010aa8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010aac:	4293      	cmp	r3, r2
 8010aae:	4601      	mov	r1, r0
 8010ab0:	dc03      	bgt.n	8010aba <cosf+0x16>
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	f001 fac4 	bl	8012040 <__kernel_cosf>
 8010ab8:	e004      	b.n	8010ac4 <cosf+0x20>
 8010aba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010abe:	db04      	blt.n	8010aca <cosf+0x26>
 8010ac0:	f7f0 f836 	bl	8000b30 <__aeabi_fsub>
 8010ac4:	b003      	add	sp, #12
 8010ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aca:	4669      	mov	r1, sp
 8010acc:	f001 f908 	bl	8011ce0 <__ieee754_rem_pio2f>
 8010ad0:	f000 0203 	and.w	r2, r0, #3
 8010ad4:	2a01      	cmp	r2, #1
 8010ad6:	d005      	beq.n	8010ae4 <cosf+0x40>
 8010ad8:	2a02      	cmp	r2, #2
 8010ada:	d00a      	beq.n	8010af2 <cosf+0x4e>
 8010adc:	b972      	cbnz	r2, 8010afc <cosf+0x58>
 8010ade:	9901      	ldr	r1, [sp, #4]
 8010ae0:	9800      	ldr	r0, [sp, #0]
 8010ae2:	e7e7      	b.n	8010ab4 <cosf+0x10>
 8010ae4:	9901      	ldr	r1, [sp, #4]
 8010ae6:	9800      	ldr	r0, [sp, #0]
 8010ae8:	f001 fde0 	bl	80126ac <__kernel_sinf>
 8010aec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010af0:	e7e8      	b.n	8010ac4 <cosf+0x20>
 8010af2:	9901      	ldr	r1, [sp, #4]
 8010af4:	9800      	ldr	r0, [sp, #0]
 8010af6:	f001 faa3 	bl	8012040 <__kernel_cosf>
 8010afa:	e7f7      	b.n	8010aec <cosf+0x48>
 8010afc:	2201      	movs	r2, #1
 8010afe:	9901      	ldr	r1, [sp, #4]
 8010b00:	9800      	ldr	r0, [sp, #0]
 8010b02:	f001 fdd3 	bl	80126ac <__kernel_sinf>
 8010b06:	e7dd      	b.n	8010ac4 <cosf+0x20>
 8010b08:	3f490fd8 	.word	0x3f490fd8

08010b0c <fabsf>:
 8010b0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010b10:	4770      	bx	lr
	...

08010b14 <sinf>:
 8010b14:	b507      	push	{r0, r1, r2, lr}
 8010b16:	4a19      	ldr	r2, [pc, #100]	; (8010b7c <sinf+0x68>)
 8010b18:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	4601      	mov	r1, r0
 8010b20:	dc04      	bgt.n	8010b2c <sinf+0x18>
 8010b22:	2200      	movs	r2, #0
 8010b24:	2100      	movs	r1, #0
 8010b26:	f001 fdc1 	bl	80126ac <__kernel_sinf>
 8010b2a:	e004      	b.n	8010b36 <sinf+0x22>
 8010b2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010b30:	db04      	blt.n	8010b3c <sinf+0x28>
 8010b32:	f7ef fffd 	bl	8000b30 <__aeabi_fsub>
 8010b36:	b003      	add	sp, #12
 8010b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b3c:	4669      	mov	r1, sp
 8010b3e:	f001 f8cf 	bl	8011ce0 <__ieee754_rem_pio2f>
 8010b42:	f000 0003 	and.w	r0, r0, #3
 8010b46:	2801      	cmp	r0, #1
 8010b48:	d006      	beq.n	8010b58 <sinf+0x44>
 8010b4a:	2802      	cmp	r0, #2
 8010b4c:	d009      	beq.n	8010b62 <sinf+0x4e>
 8010b4e:	b980      	cbnz	r0, 8010b72 <sinf+0x5e>
 8010b50:	2201      	movs	r2, #1
 8010b52:	9901      	ldr	r1, [sp, #4]
 8010b54:	9800      	ldr	r0, [sp, #0]
 8010b56:	e7e6      	b.n	8010b26 <sinf+0x12>
 8010b58:	9901      	ldr	r1, [sp, #4]
 8010b5a:	9800      	ldr	r0, [sp, #0]
 8010b5c:	f001 fa70 	bl	8012040 <__kernel_cosf>
 8010b60:	e7e9      	b.n	8010b36 <sinf+0x22>
 8010b62:	2201      	movs	r2, #1
 8010b64:	9901      	ldr	r1, [sp, #4]
 8010b66:	9800      	ldr	r0, [sp, #0]
 8010b68:	f001 fda0 	bl	80126ac <__kernel_sinf>
 8010b6c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010b70:	e7e1      	b.n	8010b36 <sinf+0x22>
 8010b72:	9901      	ldr	r1, [sp, #4]
 8010b74:	9800      	ldr	r0, [sp, #0]
 8010b76:	f001 fa63 	bl	8012040 <__kernel_cosf>
 8010b7a:	e7f7      	b.n	8010b6c <sinf+0x58>
 8010b7c:	3f490fd8 	.word	0x3f490fd8

08010b80 <pow>:
 8010b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b84:	461f      	mov	r7, r3
 8010b86:	4680      	mov	r8, r0
 8010b88:	4689      	mov	r9, r1
 8010b8a:	4616      	mov	r6, r2
 8010b8c:	f000 f91c 	bl	8010dc8 <__ieee754_pow>
 8010b90:	4b4d      	ldr	r3, [pc, #308]	; (8010cc8 <pow+0x148>)
 8010b92:	4604      	mov	r4, r0
 8010b94:	f993 3000 	ldrsb.w	r3, [r3]
 8010b98:	460d      	mov	r5, r1
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	d015      	beq.n	8010bca <pow+0x4a>
 8010b9e:	4632      	mov	r2, r6
 8010ba0:	463b      	mov	r3, r7
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	f7ef ff31 	bl	8000a0c <__aeabi_dcmpun>
 8010baa:	b970      	cbnz	r0, 8010bca <pow+0x4a>
 8010bac:	4642      	mov	r2, r8
 8010bae:	464b      	mov	r3, r9
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	4649      	mov	r1, r9
 8010bb4:	f7ef ff2a 	bl	8000a0c <__aeabi_dcmpun>
 8010bb8:	2200      	movs	r2, #0
 8010bba:	2300      	movs	r3, #0
 8010bbc:	b148      	cbz	r0, 8010bd2 <pow+0x52>
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	4639      	mov	r1, r7
 8010bc2:	f7ef fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d17b      	bne.n	8010cc2 <pow+0x142>
 8010bca:	4620      	mov	r0, r4
 8010bcc:	4629      	mov	r1, r5
 8010bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	4649      	mov	r1, r9
 8010bd6:	f7ef fee7 	bl	80009a8 <__aeabi_dcmpeq>
 8010bda:	b1e0      	cbz	r0, 8010c16 <pow+0x96>
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2300      	movs	r3, #0
 8010be0:	4630      	mov	r0, r6
 8010be2:	4639      	mov	r1, r7
 8010be4:	f7ef fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d16a      	bne.n	8010cc2 <pow+0x142>
 8010bec:	4630      	mov	r0, r6
 8010bee:	4639      	mov	r1, r7
 8010bf0:	f001 fdd5 	bl	801279e <finite>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	d0e8      	beq.n	8010bca <pow+0x4a>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	4639      	mov	r1, r7
 8010c00:	f7ef fedc 	bl	80009bc <__aeabi_dcmplt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	d0e0      	beq.n	8010bca <pow+0x4a>
 8010c08:	f001 ff7e 	bl	8012b08 <__errno>
 8010c0c:	2321      	movs	r3, #33	; 0x21
 8010c0e:	2400      	movs	r4, #0
 8010c10:	6003      	str	r3, [r0, #0]
 8010c12:	4d2e      	ldr	r5, [pc, #184]	; (8010ccc <pow+0x14c>)
 8010c14:	e7d9      	b.n	8010bca <pow+0x4a>
 8010c16:	4620      	mov	r0, r4
 8010c18:	4629      	mov	r1, r5
 8010c1a:	f001 fdc0 	bl	801279e <finite>
 8010c1e:	bba8      	cbnz	r0, 8010c8c <pow+0x10c>
 8010c20:	4640      	mov	r0, r8
 8010c22:	4649      	mov	r1, r9
 8010c24:	f001 fdbb 	bl	801279e <finite>
 8010c28:	b380      	cbz	r0, 8010c8c <pow+0x10c>
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	f001 fdb6 	bl	801279e <finite>
 8010c32:	b358      	cbz	r0, 8010c8c <pow+0x10c>
 8010c34:	4622      	mov	r2, r4
 8010c36:	462b      	mov	r3, r5
 8010c38:	4620      	mov	r0, r4
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	f7ef fee6 	bl	8000a0c <__aeabi_dcmpun>
 8010c40:	b160      	cbz	r0, 8010c5c <pow+0xdc>
 8010c42:	f001 ff61 	bl	8012b08 <__errno>
 8010c46:	2321      	movs	r3, #33	; 0x21
 8010c48:	2200      	movs	r2, #0
 8010c4a:	6003      	str	r3, [r0, #0]
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4610      	mov	r0, r2
 8010c50:	4619      	mov	r1, r3
 8010c52:	f7ef fd6b 	bl	800072c <__aeabi_ddiv>
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	e7b6      	b.n	8010bca <pow+0x4a>
 8010c5c:	f001 ff54 	bl	8012b08 <__errno>
 8010c60:	2322      	movs	r3, #34	; 0x22
 8010c62:	2200      	movs	r2, #0
 8010c64:	6003      	str	r3, [r0, #0]
 8010c66:	4649      	mov	r1, r9
 8010c68:	2300      	movs	r3, #0
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	f7ef fea6 	bl	80009bc <__aeabi_dcmplt>
 8010c70:	2400      	movs	r4, #0
 8010c72:	b148      	cbz	r0, 8010c88 <pow+0x108>
 8010c74:	4630      	mov	r0, r6
 8010c76:	4639      	mov	r1, r7
 8010c78:	f001 fd9e 	bl	80127b8 <rint>
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	463b      	mov	r3, r7
 8010c80:	f7ef fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d0c4      	beq.n	8010c12 <pow+0x92>
 8010c88:	4d11      	ldr	r5, [pc, #68]	; (8010cd0 <pow+0x150>)
 8010c8a:	e79e      	b.n	8010bca <pow+0x4a>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4620      	mov	r0, r4
 8010c92:	4629      	mov	r1, r5
 8010c94:	f7ef fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d096      	beq.n	8010bca <pow+0x4a>
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f001 fd7d 	bl	801279e <finite>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d090      	beq.n	8010bca <pow+0x4a>
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f001 fd77 	bl	801279e <finite>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d08a      	beq.n	8010bca <pow+0x4a>
 8010cb4:	f001 ff28 	bl	8012b08 <__errno>
 8010cb8:	2322      	movs	r3, #34	; 0x22
 8010cba:	2400      	movs	r4, #0
 8010cbc:	2500      	movs	r5, #0
 8010cbe:	6003      	str	r3, [r0, #0]
 8010cc0:	e783      	b.n	8010bca <pow+0x4a>
 8010cc2:	2400      	movs	r4, #0
 8010cc4:	4d03      	ldr	r5, [pc, #12]	; (8010cd4 <pow+0x154>)
 8010cc6:	e780      	b.n	8010bca <pow+0x4a>
 8010cc8:	2000000d 	.word	0x2000000d
 8010ccc:	fff00000 	.word	0xfff00000
 8010cd0:	7ff00000 	.word	0x7ff00000
 8010cd4:	3ff00000 	.word	0x3ff00000

08010cd8 <sqrt>:
 8010cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cda:	4606      	mov	r6, r0
 8010cdc:	460f      	mov	r7, r1
 8010cde:	f000 fd89 	bl	80117f4 <__ieee754_sqrt>
 8010ce2:	4b12      	ldr	r3, [pc, #72]	; (8010d2c <sqrt+0x54>)
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8010cea:	460d      	mov	r5, r1
 8010cec:	3301      	adds	r3, #1
 8010cee:	d019      	beq.n	8010d24 <sqrt+0x4c>
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	463b      	mov	r3, r7
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	f7ef fe88 	bl	8000a0c <__aeabi_dcmpun>
 8010cfc:	b990      	cbnz	r0, 8010d24 <sqrt+0x4c>
 8010cfe:	2200      	movs	r2, #0
 8010d00:	2300      	movs	r3, #0
 8010d02:	4630      	mov	r0, r6
 8010d04:	4639      	mov	r1, r7
 8010d06:	f7ef fe59 	bl	80009bc <__aeabi_dcmplt>
 8010d0a:	b158      	cbz	r0, 8010d24 <sqrt+0x4c>
 8010d0c:	f001 fefc 	bl	8012b08 <__errno>
 8010d10:	2321      	movs	r3, #33	; 0x21
 8010d12:	2200      	movs	r2, #0
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	2300      	movs	r3, #0
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	f7ef fd06 	bl	800072c <__aeabi_ddiv>
 8010d20:	4604      	mov	r4, r0
 8010d22:	460d      	mov	r5, r1
 8010d24:	4620      	mov	r0, r4
 8010d26:	4629      	mov	r1, r5
 8010d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	2000000d 	.word	0x2000000d

08010d30 <asinf>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4604      	mov	r4, r0
 8010d34:	f000 fe0a 	bl	801194c <__ieee754_asinf>
 8010d38:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <asinf+0x44>)
 8010d3a:	4605      	mov	r5, r0
 8010d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8010d40:	3301      	adds	r3, #1
 8010d42:	d015      	beq.n	8010d70 <asinf+0x40>
 8010d44:	4621      	mov	r1, r4
 8010d46:	4620      	mov	r0, r4
 8010d48:	f7f0 f9c2 	bl	80010d0 <__aeabi_fcmpun>
 8010d4c:	b980      	cbnz	r0, 8010d70 <asinf+0x40>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f7ff fedc 	bl	8010b0c <fabsf>
 8010d54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010d58:	f7f0 f9b0 	bl	80010bc <__aeabi_fcmpgt>
 8010d5c:	b140      	cbz	r0, 8010d70 <asinf+0x40>
 8010d5e:	f001 fed3 	bl	8012b08 <__errno>
 8010d62:	2321      	movs	r3, #33	; 0x21
 8010d64:	6003      	str	r3, [r0, #0]
 8010d66:	4804      	ldr	r0, [pc, #16]	; (8010d78 <asinf+0x48>)
 8010d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d6c:	f001 be78 	b.w	8012a60 <nanf>
 8010d70:	4628      	mov	r0, r5
 8010d72:	bd38      	pop	{r3, r4, r5, pc}
 8010d74:	2000000d 	.word	0x2000000d
 8010d78:	080142a7 	.word	0x080142a7

08010d7c <atan2f>:
 8010d7c:	f000 bf2a 	b.w	8011bd4 <__ieee754_atan2f>

08010d80 <sqrtf>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4605      	mov	r5, r0
 8010d84:	f001 f90a 	bl	8011f9c <__ieee754_sqrtf>
 8010d88:	4b0d      	ldr	r3, [pc, #52]	; (8010dc0 <sqrtf+0x40>)
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8010d90:	3301      	adds	r3, #1
 8010d92:	d012      	beq.n	8010dba <sqrtf+0x3a>
 8010d94:	4629      	mov	r1, r5
 8010d96:	4628      	mov	r0, r5
 8010d98:	f7f0 f99a 	bl	80010d0 <__aeabi_fcmpun>
 8010d9c:	b968      	cbnz	r0, 8010dba <sqrtf+0x3a>
 8010d9e:	2100      	movs	r1, #0
 8010da0:	4628      	mov	r0, r5
 8010da2:	f7f0 f96d 	bl	8001080 <__aeabi_fcmplt>
 8010da6:	b140      	cbz	r0, 8010dba <sqrtf+0x3a>
 8010da8:	f001 feae 	bl	8012b08 <__errno>
 8010dac:	2321      	movs	r3, #33	; 0x21
 8010dae:	2100      	movs	r1, #0
 8010db0:	6003      	str	r3, [r0, #0]
 8010db2:	4608      	mov	r0, r1
 8010db4:	f7f0 f87a 	bl	8000eac <__aeabi_fdiv>
 8010db8:	4604      	mov	r4, r0
 8010dba:	4620      	mov	r0, r4
 8010dbc:	bd38      	pop	{r3, r4, r5, pc}
 8010dbe:	bf00      	nop
 8010dc0:	2000000d 	.word	0x2000000d
 8010dc4:	00000000 	.word	0x00000000

08010dc8 <__ieee754_pow>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	b093      	sub	sp, #76	; 0x4c
 8010dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010dd2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8010dd6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010dda:	ea55 0302 	orrs.w	r3, r5, r2
 8010dde:	4607      	mov	r7, r0
 8010de0:	4688      	mov	r8, r1
 8010de2:	f000 84bf 	beq.w	8011764 <__ieee754_pow+0x99c>
 8010de6:	4b7e      	ldr	r3, [pc, #504]	; (8010fe0 <__ieee754_pow+0x218>)
 8010de8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010dec:	429c      	cmp	r4, r3
 8010dee:	4689      	mov	r9, r1
 8010df0:	4682      	mov	sl, r0
 8010df2:	dc09      	bgt.n	8010e08 <__ieee754_pow+0x40>
 8010df4:	d103      	bne.n	8010dfe <__ieee754_pow+0x36>
 8010df6:	b978      	cbnz	r0, 8010e18 <__ieee754_pow+0x50>
 8010df8:	42a5      	cmp	r5, r4
 8010dfa:	dd02      	ble.n	8010e02 <__ieee754_pow+0x3a>
 8010dfc:	e00c      	b.n	8010e18 <__ieee754_pow+0x50>
 8010dfe:	429d      	cmp	r5, r3
 8010e00:	dc02      	bgt.n	8010e08 <__ieee754_pow+0x40>
 8010e02:	429d      	cmp	r5, r3
 8010e04:	d10e      	bne.n	8010e24 <__ieee754_pow+0x5c>
 8010e06:	b16a      	cbz	r2, 8010e24 <__ieee754_pow+0x5c>
 8010e08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010e0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010e10:	ea54 030a 	orrs.w	r3, r4, sl
 8010e14:	f000 84a6 	beq.w	8011764 <__ieee754_pow+0x99c>
 8010e18:	4872      	ldr	r0, [pc, #456]	; (8010fe4 <__ieee754_pow+0x21c>)
 8010e1a:	b013      	add	sp, #76	; 0x4c
 8010e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	f001 bcc4 	b.w	80127ac <nan>
 8010e24:	f1b9 0f00 	cmp.w	r9, #0
 8010e28:	da39      	bge.n	8010e9e <__ieee754_pow+0xd6>
 8010e2a:	4b6f      	ldr	r3, [pc, #444]	; (8010fe8 <__ieee754_pow+0x220>)
 8010e2c:	429d      	cmp	r5, r3
 8010e2e:	dc54      	bgt.n	8010eda <__ieee754_pow+0x112>
 8010e30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010e34:	429d      	cmp	r5, r3
 8010e36:	f340 84a6 	ble.w	8011786 <__ieee754_pow+0x9be>
 8010e3a:	152b      	asrs	r3, r5, #20
 8010e3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e40:	2b14      	cmp	r3, #20
 8010e42:	dd0f      	ble.n	8010e64 <__ieee754_pow+0x9c>
 8010e44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010e48:	fa22 f103 	lsr.w	r1, r2, r3
 8010e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e50:	4293      	cmp	r3, r2
 8010e52:	f040 8498 	bne.w	8011786 <__ieee754_pow+0x9be>
 8010e56:	f001 0101 	and.w	r1, r1, #1
 8010e5a:	f1c1 0302 	rsb	r3, r1, #2
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	b182      	cbz	r2, 8010e84 <__ieee754_pow+0xbc>
 8010e62:	e05e      	b.n	8010f22 <__ieee754_pow+0x15a>
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	d15a      	bne.n	8010f1e <__ieee754_pow+0x156>
 8010e68:	f1c3 0314 	rsb	r3, r3, #20
 8010e6c:	fa45 f103 	asr.w	r1, r5, r3
 8010e70:	fa01 f303 	lsl.w	r3, r1, r3
 8010e74:	42ab      	cmp	r3, r5
 8010e76:	f040 8483 	bne.w	8011780 <__ieee754_pow+0x9b8>
 8010e7a:	f001 0101 	and.w	r1, r1, #1
 8010e7e:	f1c1 0302 	rsb	r3, r1, #2
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	4b59      	ldr	r3, [pc, #356]	; (8010fec <__ieee754_pow+0x224>)
 8010e86:	429d      	cmp	r5, r3
 8010e88:	d130      	bne.n	8010eec <__ieee754_pow+0x124>
 8010e8a:	2e00      	cmp	r6, #0
 8010e8c:	f280 8474 	bge.w	8011778 <__ieee754_pow+0x9b0>
 8010e90:	463a      	mov	r2, r7
 8010e92:	4643      	mov	r3, r8
 8010e94:	2000      	movs	r0, #0
 8010e96:	4955      	ldr	r1, [pc, #340]	; (8010fec <__ieee754_pow+0x224>)
 8010e98:	f7ef fc48 	bl	800072c <__aeabi_ddiv>
 8010e9c:	e02f      	b.n	8010efe <__ieee754_pow+0x136>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	2a00      	cmp	r2, #0
 8010ea4:	d13d      	bne.n	8010f22 <__ieee754_pow+0x15a>
 8010ea6:	4b4e      	ldr	r3, [pc, #312]	; (8010fe0 <__ieee754_pow+0x218>)
 8010ea8:	429d      	cmp	r5, r3
 8010eaa:	d1eb      	bne.n	8010e84 <__ieee754_pow+0xbc>
 8010eac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010eb0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010eb4:	ea53 030a 	orrs.w	r3, r3, sl
 8010eb8:	f000 8454 	beq.w	8011764 <__ieee754_pow+0x99c>
 8010ebc:	4b4c      	ldr	r3, [pc, #304]	; (8010ff0 <__ieee754_pow+0x228>)
 8010ebe:	429c      	cmp	r4, r3
 8010ec0:	dd0d      	ble.n	8010ede <__ieee754_pow+0x116>
 8010ec2:	2e00      	cmp	r6, #0
 8010ec4:	f280 8454 	bge.w	8011770 <__ieee754_pow+0x9a8>
 8010ec8:	f04f 0b00 	mov.w	fp, #0
 8010ecc:	f04f 0c00 	mov.w	ip, #0
 8010ed0:	4658      	mov	r0, fp
 8010ed2:	4661      	mov	r1, ip
 8010ed4:	b013      	add	sp, #76	; 0x4c
 8010ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eda:	2302      	movs	r3, #2
 8010edc:	e7e0      	b.n	8010ea0 <__ieee754_pow+0xd8>
 8010ede:	2e00      	cmp	r6, #0
 8010ee0:	daf2      	bge.n	8010ec8 <__ieee754_pow+0x100>
 8010ee2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8010ee6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010eea:	e7f1      	b.n	8010ed0 <__ieee754_pow+0x108>
 8010eec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8010ef0:	d108      	bne.n	8010f04 <__ieee754_pow+0x13c>
 8010ef2:	463a      	mov	r2, r7
 8010ef4:	4643      	mov	r3, r8
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	4641      	mov	r1, r8
 8010efa:	f7ef faed 	bl	80004d8 <__aeabi_dmul>
 8010efe:	4683      	mov	fp, r0
 8010f00:	468c      	mov	ip, r1
 8010f02:	e7e5      	b.n	8010ed0 <__ieee754_pow+0x108>
 8010f04:	4b3b      	ldr	r3, [pc, #236]	; (8010ff4 <__ieee754_pow+0x22c>)
 8010f06:	429e      	cmp	r6, r3
 8010f08:	d10b      	bne.n	8010f22 <__ieee754_pow+0x15a>
 8010f0a:	f1b9 0f00 	cmp.w	r9, #0
 8010f0e:	db08      	blt.n	8010f22 <__ieee754_pow+0x15a>
 8010f10:	4638      	mov	r0, r7
 8010f12:	4641      	mov	r1, r8
 8010f14:	b013      	add	sp, #76	; 0x4c
 8010f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1a:	f000 bc6b 	b.w	80117f4 <__ieee754_sqrt>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	4638      	mov	r0, r7
 8010f24:	4641      	mov	r1, r8
 8010f26:	f001 fc37 	bl	8012798 <fabs>
 8010f2a:	4683      	mov	fp, r0
 8010f2c:	468c      	mov	ip, r1
 8010f2e:	f1ba 0f00 	cmp.w	sl, #0
 8010f32:	d129      	bne.n	8010f88 <__ieee754_pow+0x1c0>
 8010f34:	b124      	cbz	r4, 8010f40 <__ieee754_pow+0x178>
 8010f36:	4b2d      	ldr	r3, [pc, #180]	; (8010fec <__ieee754_pow+0x224>)
 8010f38:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d123      	bne.n	8010f88 <__ieee754_pow+0x1c0>
 8010f40:	2e00      	cmp	r6, #0
 8010f42:	da07      	bge.n	8010f54 <__ieee754_pow+0x18c>
 8010f44:	465a      	mov	r2, fp
 8010f46:	4663      	mov	r3, ip
 8010f48:	2000      	movs	r0, #0
 8010f4a:	4928      	ldr	r1, [pc, #160]	; (8010fec <__ieee754_pow+0x224>)
 8010f4c:	f7ef fbee 	bl	800072c <__aeabi_ddiv>
 8010f50:	4683      	mov	fp, r0
 8010f52:	468c      	mov	ip, r1
 8010f54:	f1b9 0f00 	cmp.w	r9, #0
 8010f58:	daba      	bge.n	8010ed0 <__ieee754_pow+0x108>
 8010f5a:	9b00      	ldr	r3, [sp, #0]
 8010f5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010f60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f64:	4323      	orrs	r3, r4
 8010f66:	d108      	bne.n	8010f7a <__ieee754_pow+0x1b2>
 8010f68:	465a      	mov	r2, fp
 8010f6a:	4663      	mov	r3, ip
 8010f6c:	4658      	mov	r0, fp
 8010f6e:	4661      	mov	r1, ip
 8010f70:	f7ef f8fa 	bl	8000168 <__aeabi_dsub>
 8010f74:	4602      	mov	r2, r0
 8010f76:	460b      	mov	r3, r1
 8010f78:	e78e      	b.n	8010e98 <__ieee754_pow+0xd0>
 8010f7a:	9b00      	ldr	r3, [sp, #0]
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d1a7      	bne.n	8010ed0 <__ieee754_pow+0x108>
 8010f80:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8010f84:	469c      	mov	ip, r3
 8010f86:	e7a3      	b.n	8010ed0 <__ieee754_pow+0x108>
 8010f88:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8010f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f92:	9b00      	ldr	r3, [sp, #0]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	d104      	bne.n	8010fa2 <__ieee754_pow+0x1da>
 8010f98:	463a      	mov	r2, r7
 8010f9a:	4643      	mov	r3, r8
 8010f9c:	4638      	mov	r0, r7
 8010f9e:	4641      	mov	r1, r8
 8010fa0:	e7e6      	b.n	8010f70 <__ieee754_pow+0x1a8>
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <__ieee754_pow+0x230>)
 8010fa4:	429d      	cmp	r5, r3
 8010fa6:	f340 80f9 	ble.w	801119c <__ieee754_pow+0x3d4>
 8010faa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010fae:	429d      	cmp	r5, r3
 8010fb0:	4b0f      	ldr	r3, [pc, #60]	; (8010ff0 <__ieee754_pow+0x228>)
 8010fb2:	dd09      	ble.n	8010fc8 <__ieee754_pow+0x200>
 8010fb4:	429c      	cmp	r4, r3
 8010fb6:	dc0c      	bgt.n	8010fd2 <__ieee754_pow+0x20a>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	da85      	bge.n	8010ec8 <__ieee754_pow+0x100>
 8010fbc:	a306      	add	r3, pc, #24	; (adr r3, 8010fd8 <__ieee754_pow+0x210>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	4610      	mov	r0, r2
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	e798      	b.n	8010efa <__ieee754_pow+0x132>
 8010fc8:	429c      	cmp	r4, r3
 8010fca:	dbf5      	blt.n	8010fb8 <__ieee754_pow+0x1f0>
 8010fcc:	4b07      	ldr	r3, [pc, #28]	; (8010fec <__ieee754_pow+0x224>)
 8010fce:	429c      	cmp	r4, r3
 8010fd0:	dd14      	ble.n	8010ffc <__ieee754_pow+0x234>
 8010fd2:	2e00      	cmp	r6, #0
 8010fd4:	dcf2      	bgt.n	8010fbc <__ieee754_pow+0x1f4>
 8010fd6:	e777      	b.n	8010ec8 <__ieee754_pow+0x100>
 8010fd8:	8800759c 	.word	0x8800759c
 8010fdc:	7e37e43c 	.word	0x7e37e43c
 8010fe0:	7ff00000 	.word	0x7ff00000
 8010fe4:	080142a7 	.word	0x080142a7
 8010fe8:	433fffff 	.word	0x433fffff
 8010fec:	3ff00000 	.word	0x3ff00000
 8010ff0:	3fefffff 	.word	0x3fefffff
 8010ff4:	3fe00000 	.word	0x3fe00000
 8010ff8:	41e00000 	.word	0x41e00000
 8010ffc:	4661      	mov	r1, ip
 8010ffe:	2200      	movs	r2, #0
 8011000:	4658      	mov	r0, fp
 8011002:	4b61      	ldr	r3, [pc, #388]	; (8011188 <__ieee754_pow+0x3c0>)
 8011004:	f7ef f8b0 	bl	8000168 <__aeabi_dsub>
 8011008:	a355      	add	r3, pc, #340	; (adr r3, 8011160 <__ieee754_pow+0x398>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	4604      	mov	r4, r0
 8011010:	460d      	mov	r5, r1
 8011012:	f7ef fa61 	bl	80004d8 <__aeabi_dmul>
 8011016:	a354      	add	r3, pc, #336	; (adr r3, 8011168 <__ieee754_pow+0x3a0>)
 8011018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101c:	4606      	mov	r6, r0
 801101e:	460f      	mov	r7, r1
 8011020:	4620      	mov	r0, r4
 8011022:	4629      	mov	r1, r5
 8011024:	f7ef fa58 	bl	80004d8 <__aeabi_dmul>
 8011028:	2200      	movs	r2, #0
 801102a:	4682      	mov	sl, r0
 801102c:	468b      	mov	fp, r1
 801102e:	4620      	mov	r0, r4
 8011030:	4629      	mov	r1, r5
 8011032:	4b56      	ldr	r3, [pc, #344]	; (801118c <__ieee754_pow+0x3c4>)
 8011034:	f7ef fa50 	bl	80004d8 <__aeabi_dmul>
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	a14c      	add	r1, pc, #304	; (adr r1, 8011170 <__ieee754_pow+0x3a8>)
 801103e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011042:	f7ef f891 	bl	8000168 <__aeabi_dsub>
 8011046:	4622      	mov	r2, r4
 8011048:	462b      	mov	r3, r5
 801104a:	f7ef fa45 	bl	80004d8 <__aeabi_dmul>
 801104e:	4602      	mov	r2, r0
 8011050:	460b      	mov	r3, r1
 8011052:	2000      	movs	r0, #0
 8011054:	494e      	ldr	r1, [pc, #312]	; (8011190 <__ieee754_pow+0x3c8>)
 8011056:	f7ef f887 	bl	8000168 <__aeabi_dsub>
 801105a:	4622      	mov	r2, r4
 801105c:	462b      	mov	r3, r5
 801105e:	4680      	mov	r8, r0
 8011060:	4689      	mov	r9, r1
 8011062:	4620      	mov	r0, r4
 8011064:	4629      	mov	r1, r5
 8011066:	f7ef fa37 	bl	80004d8 <__aeabi_dmul>
 801106a:	4602      	mov	r2, r0
 801106c:	460b      	mov	r3, r1
 801106e:	4640      	mov	r0, r8
 8011070:	4649      	mov	r1, r9
 8011072:	f7ef fa31 	bl	80004d8 <__aeabi_dmul>
 8011076:	a340      	add	r3, pc, #256	; (adr r3, 8011178 <__ieee754_pow+0x3b0>)
 8011078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107c:	f7ef fa2c 	bl	80004d8 <__aeabi_dmul>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4650      	mov	r0, sl
 8011086:	4659      	mov	r1, fp
 8011088:	f7ef f86e 	bl	8000168 <__aeabi_dsub>
 801108c:	f04f 0a00 	mov.w	sl, #0
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	4630      	mov	r0, r6
 801109a:	4639      	mov	r1, r7
 801109c:	f7ef f866 	bl	800016c <__adddf3>
 80110a0:	4632      	mov	r2, r6
 80110a2:	463b      	mov	r3, r7
 80110a4:	4650      	mov	r0, sl
 80110a6:	468b      	mov	fp, r1
 80110a8:	f7ef f85e 	bl	8000168 <__aeabi_dsub>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4620      	mov	r0, r4
 80110b2:	4629      	mov	r1, r5
 80110b4:	f7ef f858 	bl	8000168 <__aeabi_dsub>
 80110b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80110bc:	9b00      	ldr	r3, [sp, #0]
 80110be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110c0:	3b01      	subs	r3, #1
 80110c2:	4313      	orrs	r3, r2
 80110c4:	f04f 0600 	mov.w	r6, #0
 80110c8:	f04f 0200 	mov.w	r2, #0
 80110cc:	bf0c      	ite	eq
 80110ce:	4b31      	ldreq	r3, [pc, #196]	; (8011194 <__ieee754_pow+0x3cc>)
 80110d0:	4b2d      	ldrne	r3, [pc, #180]	; (8011188 <__ieee754_pow+0x3c0>)
 80110d2:	4604      	mov	r4, r0
 80110d4:	460d      	mov	r5, r1
 80110d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110da:	e9cd 2300 	strd	r2, r3, [sp]
 80110de:	4632      	mov	r2, r6
 80110e0:	463b      	mov	r3, r7
 80110e2:	f7ef f841 	bl	8000168 <__aeabi_dsub>
 80110e6:	4652      	mov	r2, sl
 80110e8:	465b      	mov	r3, fp
 80110ea:	f7ef f9f5 	bl	80004d8 <__aeabi_dmul>
 80110ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110f2:	4680      	mov	r8, r0
 80110f4:	4689      	mov	r9, r1
 80110f6:	4620      	mov	r0, r4
 80110f8:	4629      	mov	r1, r5
 80110fa:	f7ef f9ed 	bl	80004d8 <__aeabi_dmul>
 80110fe:	4602      	mov	r2, r0
 8011100:	460b      	mov	r3, r1
 8011102:	4640      	mov	r0, r8
 8011104:	4649      	mov	r1, r9
 8011106:	f7ef f831 	bl	800016c <__adddf3>
 801110a:	4632      	mov	r2, r6
 801110c:	463b      	mov	r3, r7
 801110e:	4680      	mov	r8, r0
 8011110:	4689      	mov	r9, r1
 8011112:	4650      	mov	r0, sl
 8011114:	4659      	mov	r1, fp
 8011116:	f7ef f9df 	bl	80004d8 <__aeabi_dmul>
 801111a:	4604      	mov	r4, r0
 801111c:	460d      	mov	r5, r1
 801111e:	460b      	mov	r3, r1
 8011120:	4602      	mov	r2, r0
 8011122:	4649      	mov	r1, r9
 8011124:	4640      	mov	r0, r8
 8011126:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801112a:	f7ef f81f 	bl	800016c <__adddf3>
 801112e:	4b1a      	ldr	r3, [pc, #104]	; (8011198 <__ieee754_pow+0x3d0>)
 8011130:	4682      	mov	sl, r0
 8011132:	4299      	cmp	r1, r3
 8011134:	460f      	mov	r7, r1
 8011136:	460e      	mov	r6, r1
 8011138:	f340 82ed 	ble.w	8011716 <__ieee754_pow+0x94e>
 801113c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011140:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011144:	4303      	orrs	r3, r0
 8011146:	f000 81e7 	beq.w	8011518 <__ieee754_pow+0x750>
 801114a:	a30d      	add	r3, pc, #52	; (adr r3, 8011180 <__ieee754_pow+0x3b8>)
 801114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011154:	f7ef f9c0 	bl	80004d8 <__aeabi_dmul>
 8011158:	a309      	add	r3, pc, #36	; (adr r3, 8011180 <__ieee754_pow+0x3b8>)
 801115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115e:	e6cc      	b.n	8010efa <__ieee754_pow+0x132>
 8011160:	60000000 	.word	0x60000000
 8011164:	3ff71547 	.word	0x3ff71547
 8011168:	f85ddf44 	.word	0xf85ddf44
 801116c:	3e54ae0b 	.word	0x3e54ae0b
 8011170:	55555555 	.word	0x55555555
 8011174:	3fd55555 	.word	0x3fd55555
 8011178:	652b82fe 	.word	0x652b82fe
 801117c:	3ff71547 	.word	0x3ff71547
 8011180:	8800759c 	.word	0x8800759c
 8011184:	7e37e43c 	.word	0x7e37e43c
 8011188:	3ff00000 	.word	0x3ff00000
 801118c:	3fd00000 	.word	0x3fd00000
 8011190:	3fe00000 	.word	0x3fe00000
 8011194:	bff00000 	.word	0xbff00000
 8011198:	408fffff 	.word	0x408fffff
 801119c:	4bd4      	ldr	r3, [pc, #848]	; (80114f0 <__ieee754_pow+0x728>)
 801119e:	2200      	movs	r2, #0
 80111a0:	ea09 0303 	and.w	r3, r9, r3
 80111a4:	b943      	cbnz	r3, 80111b8 <__ieee754_pow+0x3f0>
 80111a6:	4658      	mov	r0, fp
 80111a8:	4661      	mov	r1, ip
 80111aa:	4bd2      	ldr	r3, [pc, #840]	; (80114f4 <__ieee754_pow+0x72c>)
 80111ac:	f7ef f994 	bl	80004d8 <__aeabi_dmul>
 80111b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80111b4:	4683      	mov	fp, r0
 80111b6:	460c      	mov	r4, r1
 80111b8:	1523      	asrs	r3, r4, #20
 80111ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80111be:	4413      	add	r3, r2
 80111c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80111c2:	4bcd      	ldr	r3, [pc, #820]	; (80114f8 <__ieee754_pow+0x730>)
 80111c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80111c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80111cc:	429c      	cmp	r4, r3
 80111ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80111d2:	dd08      	ble.n	80111e6 <__ieee754_pow+0x41e>
 80111d4:	4bc9      	ldr	r3, [pc, #804]	; (80114fc <__ieee754_pow+0x734>)
 80111d6:	429c      	cmp	r4, r3
 80111d8:	f340 819c 	ble.w	8011514 <__ieee754_pow+0x74c>
 80111dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80111e2:	3301      	adds	r3, #1
 80111e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80111e6:	2600      	movs	r6, #0
 80111e8:	00f3      	lsls	r3, r6, #3
 80111ea:	930d      	str	r3, [sp, #52]	; 0x34
 80111ec:	4bc4      	ldr	r3, [pc, #784]	; (8011500 <__ieee754_pow+0x738>)
 80111ee:	4658      	mov	r0, fp
 80111f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80111f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80111f8:	4629      	mov	r1, r5
 80111fa:	461a      	mov	r2, r3
 80111fc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8011200:	4623      	mov	r3, r4
 8011202:	f7ee ffb1 	bl	8000168 <__aeabi_dsub>
 8011206:	46da      	mov	sl, fp
 8011208:	462b      	mov	r3, r5
 801120a:	4652      	mov	r2, sl
 801120c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011210:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011214:	f7ee ffaa 	bl	800016c <__adddf3>
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	2000      	movs	r0, #0
 801121e:	49b9      	ldr	r1, [pc, #740]	; (8011504 <__ieee754_pow+0x73c>)
 8011220:	f7ef fa84 	bl	800072c <__aeabi_ddiv>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801122c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011230:	f7ef f952 	bl	80004d8 <__aeabi_dmul>
 8011234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011238:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801123c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011240:	2300      	movs	r3, #0
 8011242:	2200      	movs	r2, #0
 8011244:	46ab      	mov	fp, r5
 8011246:	106d      	asrs	r5, r5, #1
 8011248:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801124c:	9304      	str	r3, [sp, #16]
 801124e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011252:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011256:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801125a:	4640      	mov	r0, r8
 801125c:	4649      	mov	r1, r9
 801125e:	4614      	mov	r4, r2
 8011260:	461d      	mov	r5, r3
 8011262:	f7ef f939 	bl	80004d8 <__aeabi_dmul>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801126e:	f7ee ff7b 	bl	8000168 <__aeabi_dsub>
 8011272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011276:	4606      	mov	r6, r0
 8011278:	460f      	mov	r7, r1
 801127a:	4620      	mov	r0, r4
 801127c:	4629      	mov	r1, r5
 801127e:	f7ee ff73 	bl	8000168 <__aeabi_dsub>
 8011282:	4602      	mov	r2, r0
 8011284:	460b      	mov	r3, r1
 8011286:	4650      	mov	r0, sl
 8011288:	4659      	mov	r1, fp
 801128a:	f7ee ff6d 	bl	8000168 <__aeabi_dsub>
 801128e:	4642      	mov	r2, r8
 8011290:	464b      	mov	r3, r9
 8011292:	f7ef f921 	bl	80004d8 <__aeabi_dmul>
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	4630      	mov	r0, r6
 801129c:	4639      	mov	r1, r7
 801129e:	f7ee ff63 	bl	8000168 <__aeabi_dsub>
 80112a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80112a6:	f7ef f917 	bl	80004d8 <__aeabi_dmul>
 80112aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112b2:	4610      	mov	r0, r2
 80112b4:	4619      	mov	r1, r3
 80112b6:	f7ef f90f 	bl	80004d8 <__aeabi_dmul>
 80112ba:	a37b      	add	r3, pc, #492	; (adr r3, 80114a8 <__ieee754_pow+0x6e0>)
 80112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c0:	4604      	mov	r4, r0
 80112c2:	460d      	mov	r5, r1
 80112c4:	f7ef f908 	bl	80004d8 <__aeabi_dmul>
 80112c8:	a379      	add	r3, pc, #484	; (adr r3, 80114b0 <__ieee754_pow+0x6e8>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	f7ee ff4d 	bl	800016c <__adddf3>
 80112d2:	4622      	mov	r2, r4
 80112d4:	462b      	mov	r3, r5
 80112d6:	f7ef f8ff 	bl	80004d8 <__aeabi_dmul>
 80112da:	a377      	add	r3, pc, #476	; (adr r3, 80114b8 <__ieee754_pow+0x6f0>)
 80112dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e0:	f7ee ff44 	bl	800016c <__adddf3>
 80112e4:	4622      	mov	r2, r4
 80112e6:	462b      	mov	r3, r5
 80112e8:	f7ef f8f6 	bl	80004d8 <__aeabi_dmul>
 80112ec:	a374      	add	r3, pc, #464	; (adr r3, 80114c0 <__ieee754_pow+0x6f8>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	f7ee ff3b 	bl	800016c <__adddf3>
 80112f6:	4622      	mov	r2, r4
 80112f8:	462b      	mov	r3, r5
 80112fa:	f7ef f8ed 	bl	80004d8 <__aeabi_dmul>
 80112fe:	a372      	add	r3, pc, #456	; (adr r3, 80114c8 <__ieee754_pow+0x700>)
 8011300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011304:	f7ee ff32 	bl	800016c <__adddf3>
 8011308:	4622      	mov	r2, r4
 801130a:	462b      	mov	r3, r5
 801130c:	f7ef f8e4 	bl	80004d8 <__aeabi_dmul>
 8011310:	a36f      	add	r3, pc, #444	; (adr r3, 80114d0 <__ieee754_pow+0x708>)
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	f7ee ff29 	bl	800016c <__adddf3>
 801131a:	4622      	mov	r2, r4
 801131c:	4606      	mov	r6, r0
 801131e:	460f      	mov	r7, r1
 8011320:	462b      	mov	r3, r5
 8011322:	4620      	mov	r0, r4
 8011324:	4629      	mov	r1, r5
 8011326:	f7ef f8d7 	bl	80004d8 <__aeabi_dmul>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4630      	mov	r0, r6
 8011330:	4639      	mov	r1, r7
 8011332:	f7ef f8d1 	bl	80004d8 <__aeabi_dmul>
 8011336:	4604      	mov	r4, r0
 8011338:	460d      	mov	r5, r1
 801133a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801133e:	4642      	mov	r2, r8
 8011340:	464b      	mov	r3, r9
 8011342:	f7ee ff13 	bl	800016c <__adddf3>
 8011346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801134a:	f7ef f8c5 	bl	80004d8 <__aeabi_dmul>
 801134e:	4622      	mov	r2, r4
 8011350:	462b      	mov	r3, r5
 8011352:	f7ee ff0b 	bl	800016c <__adddf3>
 8011356:	4642      	mov	r2, r8
 8011358:	4606      	mov	r6, r0
 801135a:	460f      	mov	r7, r1
 801135c:	464b      	mov	r3, r9
 801135e:	4640      	mov	r0, r8
 8011360:	4649      	mov	r1, r9
 8011362:	f7ef f8b9 	bl	80004d8 <__aeabi_dmul>
 8011366:	2200      	movs	r2, #0
 8011368:	4b67      	ldr	r3, [pc, #412]	; (8011508 <__ieee754_pow+0x740>)
 801136a:	4682      	mov	sl, r0
 801136c:	468b      	mov	fp, r1
 801136e:	f7ee fefd 	bl	800016c <__adddf3>
 8011372:	4632      	mov	r2, r6
 8011374:	463b      	mov	r3, r7
 8011376:	f7ee fef9 	bl	800016c <__adddf3>
 801137a:	9c04      	ldr	r4, [sp, #16]
 801137c:	460d      	mov	r5, r1
 801137e:	4622      	mov	r2, r4
 8011380:	460b      	mov	r3, r1
 8011382:	4640      	mov	r0, r8
 8011384:	4649      	mov	r1, r9
 8011386:	f7ef f8a7 	bl	80004d8 <__aeabi_dmul>
 801138a:	2200      	movs	r2, #0
 801138c:	4680      	mov	r8, r0
 801138e:	4689      	mov	r9, r1
 8011390:	4620      	mov	r0, r4
 8011392:	4629      	mov	r1, r5
 8011394:	4b5c      	ldr	r3, [pc, #368]	; (8011508 <__ieee754_pow+0x740>)
 8011396:	f7ee fee7 	bl	8000168 <__aeabi_dsub>
 801139a:	4652      	mov	r2, sl
 801139c:	465b      	mov	r3, fp
 801139e:	f7ee fee3 	bl	8000168 <__aeabi_dsub>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ee fedd 	bl	8000168 <__aeabi_dsub>
 80113ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80113b2:	f7ef f891 	bl	80004d8 <__aeabi_dmul>
 80113b6:	4622      	mov	r2, r4
 80113b8:	4606      	mov	r6, r0
 80113ba:	460f      	mov	r7, r1
 80113bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80113c0:	462b      	mov	r3, r5
 80113c2:	f7ef f889 	bl	80004d8 <__aeabi_dmul>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4630      	mov	r0, r6
 80113cc:	4639      	mov	r1, r7
 80113ce:	f7ee fecd 	bl	800016c <__adddf3>
 80113d2:	4606      	mov	r6, r0
 80113d4:	460f      	mov	r7, r1
 80113d6:	4602      	mov	r2, r0
 80113d8:	460b      	mov	r3, r1
 80113da:	4640      	mov	r0, r8
 80113dc:	4649      	mov	r1, r9
 80113de:	f7ee fec5 	bl	800016c <__adddf3>
 80113e2:	a33d      	add	r3, pc, #244	; (adr r3, 80114d8 <__ieee754_pow+0x710>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	9c04      	ldr	r4, [sp, #16]
 80113ea:	460d      	mov	r5, r1
 80113ec:	4620      	mov	r0, r4
 80113ee:	f7ef f873 	bl	80004d8 <__aeabi_dmul>
 80113f2:	4642      	mov	r2, r8
 80113f4:	464b      	mov	r3, r9
 80113f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80113fa:	4620      	mov	r0, r4
 80113fc:	4629      	mov	r1, r5
 80113fe:	f7ee feb3 	bl	8000168 <__aeabi_dsub>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	4630      	mov	r0, r6
 8011408:	4639      	mov	r1, r7
 801140a:	f7ee fead 	bl	8000168 <__aeabi_dsub>
 801140e:	a334      	add	r3, pc, #208	; (adr r3, 80114e0 <__ieee754_pow+0x718>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	f7ef f860 	bl	80004d8 <__aeabi_dmul>
 8011418:	a333      	add	r3, pc, #204	; (adr r3, 80114e8 <__ieee754_pow+0x720>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	4606      	mov	r6, r0
 8011420:	460f      	mov	r7, r1
 8011422:	4620      	mov	r0, r4
 8011424:	4629      	mov	r1, r5
 8011426:	f7ef f857 	bl	80004d8 <__aeabi_dmul>
 801142a:	4602      	mov	r2, r0
 801142c:	460b      	mov	r3, r1
 801142e:	4630      	mov	r0, r6
 8011430:	4639      	mov	r1, r7
 8011432:	f7ee fe9b 	bl	800016c <__adddf3>
 8011436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011438:	4b34      	ldr	r3, [pc, #208]	; (801150c <__ieee754_pow+0x744>)
 801143a:	4413      	add	r3, r2
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ee fe94 	bl	800016c <__adddf3>
 8011444:	4680      	mov	r8, r0
 8011446:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011448:	4689      	mov	r9, r1
 801144a:	f7ee ffdb 	bl	8000404 <__aeabi_i2d>
 801144e:	4604      	mov	r4, r0
 8011450:	460d      	mov	r5, r1
 8011452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011454:	4b2e      	ldr	r3, [pc, #184]	; (8011510 <__ieee754_pow+0x748>)
 8011456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801145a:	4413      	add	r3, r2
 801145c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011460:	4642      	mov	r2, r8
 8011462:	464b      	mov	r3, r9
 8011464:	f7ee fe82 	bl	800016c <__adddf3>
 8011468:	4632      	mov	r2, r6
 801146a:	463b      	mov	r3, r7
 801146c:	f7ee fe7e 	bl	800016c <__adddf3>
 8011470:	4622      	mov	r2, r4
 8011472:	462b      	mov	r3, r5
 8011474:	f7ee fe7a 	bl	800016c <__adddf3>
 8011478:	f8dd a010 	ldr.w	sl, [sp, #16]
 801147c:	4622      	mov	r2, r4
 801147e:	462b      	mov	r3, r5
 8011480:	4650      	mov	r0, sl
 8011482:	468b      	mov	fp, r1
 8011484:	f7ee fe70 	bl	8000168 <__aeabi_dsub>
 8011488:	4632      	mov	r2, r6
 801148a:	463b      	mov	r3, r7
 801148c:	f7ee fe6c 	bl	8000168 <__aeabi_dsub>
 8011490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011494:	f7ee fe68 	bl	8000168 <__aeabi_dsub>
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	4640      	mov	r0, r8
 801149e:	4649      	mov	r1, r9
 80114a0:	e608      	b.n	80110b4 <__ieee754_pow+0x2ec>
 80114a2:	bf00      	nop
 80114a4:	f3af 8000 	nop.w
 80114a8:	4a454eef 	.word	0x4a454eef
 80114ac:	3fca7e28 	.word	0x3fca7e28
 80114b0:	93c9db65 	.word	0x93c9db65
 80114b4:	3fcd864a 	.word	0x3fcd864a
 80114b8:	a91d4101 	.word	0xa91d4101
 80114bc:	3fd17460 	.word	0x3fd17460
 80114c0:	518f264d 	.word	0x518f264d
 80114c4:	3fd55555 	.word	0x3fd55555
 80114c8:	db6fabff 	.word	0xdb6fabff
 80114cc:	3fdb6db6 	.word	0x3fdb6db6
 80114d0:	33333303 	.word	0x33333303
 80114d4:	3fe33333 	.word	0x3fe33333
 80114d8:	e0000000 	.word	0xe0000000
 80114dc:	3feec709 	.word	0x3feec709
 80114e0:	dc3a03fd 	.word	0xdc3a03fd
 80114e4:	3feec709 	.word	0x3feec709
 80114e8:	145b01f5 	.word	0x145b01f5
 80114ec:	be3e2fe0 	.word	0xbe3e2fe0
 80114f0:	7ff00000 	.word	0x7ff00000
 80114f4:	43400000 	.word	0x43400000
 80114f8:	0003988e 	.word	0x0003988e
 80114fc:	000bb679 	.word	0x000bb679
 8011500:	08013dc8 	.word	0x08013dc8
 8011504:	3ff00000 	.word	0x3ff00000
 8011508:	40080000 	.word	0x40080000
 801150c:	08013de8 	.word	0x08013de8
 8011510:	08013dd8 	.word	0x08013dd8
 8011514:	2601      	movs	r6, #1
 8011516:	e667      	b.n	80111e8 <__ieee754_pow+0x420>
 8011518:	a39d      	add	r3, pc, #628	; (adr r3, 8011790 <__ieee754_pow+0x9c8>)
 801151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151e:	4640      	mov	r0, r8
 8011520:	4649      	mov	r1, r9
 8011522:	f7ee fe23 	bl	800016c <__adddf3>
 8011526:	4622      	mov	r2, r4
 8011528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801152c:	462b      	mov	r3, r5
 801152e:	4650      	mov	r0, sl
 8011530:	4639      	mov	r1, r7
 8011532:	f7ee fe19 	bl	8000168 <__aeabi_dsub>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801153e:	f7ef fa5b 	bl	80009f8 <__aeabi_dcmpgt>
 8011542:	2800      	cmp	r0, #0
 8011544:	f47f ae01 	bne.w	801114a <__ieee754_pow+0x382>
 8011548:	4aa5      	ldr	r2, [pc, #660]	; (80117e0 <__ieee754_pow+0xa18>)
 801154a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801154e:	4293      	cmp	r3, r2
 8011550:	f340 8103 	ble.w	801175a <__ieee754_pow+0x992>
 8011554:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011558:	2000      	movs	r0, #0
 801155a:	151b      	asrs	r3, r3, #20
 801155c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011560:	fa4a f303 	asr.w	r3, sl, r3
 8011564:	4433      	add	r3, r6
 8011566:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801156a:	4f9e      	ldr	r7, [pc, #632]	; (80117e4 <__ieee754_pow+0xa1c>)
 801156c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011570:	4117      	asrs	r7, r2
 8011572:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011576:	ea23 0107 	bic.w	r1, r3, r7
 801157a:	f1c2 0214 	rsb	r2, r2, #20
 801157e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011582:	460b      	mov	r3, r1
 8011584:	fa4a fa02 	asr.w	sl, sl, r2
 8011588:	2e00      	cmp	r6, #0
 801158a:	4602      	mov	r2, r0
 801158c:	4629      	mov	r1, r5
 801158e:	4620      	mov	r0, r4
 8011590:	bfb8      	it	lt
 8011592:	f1ca 0a00 	rsblt	sl, sl, #0
 8011596:	f7ee fde7 	bl	8000168 <__aeabi_dsub>
 801159a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801159e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115a2:	2400      	movs	r4, #0
 80115a4:	4642      	mov	r2, r8
 80115a6:	464b      	mov	r3, r9
 80115a8:	f7ee fde0 	bl	800016c <__adddf3>
 80115ac:	a37a      	add	r3, pc, #488	; (adr r3, 8011798 <__ieee754_pow+0x9d0>)
 80115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b2:	4620      	mov	r0, r4
 80115b4:	460d      	mov	r5, r1
 80115b6:	f7ee ff8f 	bl	80004d8 <__aeabi_dmul>
 80115ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115be:	4606      	mov	r6, r0
 80115c0:	460f      	mov	r7, r1
 80115c2:	4620      	mov	r0, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	f7ee fdcf 	bl	8000168 <__aeabi_dsub>
 80115ca:	4602      	mov	r2, r0
 80115cc:	460b      	mov	r3, r1
 80115ce:	4640      	mov	r0, r8
 80115d0:	4649      	mov	r1, r9
 80115d2:	f7ee fdc9 	bl	8000168 <__aeabi_dsub>
 80115d6:	a372      	add	r3, pc, #456	; (adr r3, 80117a0 <__ieee754_pow+0x9d8>)
 80115d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115dc:	f7ee ff7c 	bl	80004d8 <__aeabi_dmul>
 80115e0:	a371      	add	r3, pc, #452	; (adr r3, 80117a8 <__ieee754_pow+0x9e0>)
 80115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e6:	4680      	mov	r8, r0
 80115e8:	4689      	mov	r9, r1
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	f7ee ff73 	bl	80004d8 <__aeabi_dmul>
 80115f2:	4602      	mov	r2, r0
 80115f4:	460b      	mov	r3, r1
 80115f6:	4640      	mov	r0, r8
 80115f8:	4649      	mov	r1, r9
 80115fa:	f7ee fdb7 	bl	800016c <__adddf3>
 80115fe:	4604      	mov	r4, r0
 8011600:	460d      	mov	r5, r1
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	4630      	mov	r0, r6
 8011608:	4639      	mov	r1, r7
 801160a:	f7ee fdaf 	bl	800016c <__adddf3>
 801160e:	4632      	mov	r2, r6
 8011610:	463b      	mov	r3, r7
 8011612:	4680      	mov	r8, r0
 8011614:	4689      	mov	r9, r1
 8011616:	f7ee fda7 	bl	8000168 <__aeabi_dsub>
 801161a:	4602      	mov	r2, r0
 801161c:	460b      	mov	r3, r1
 801161e:	4620      	mov	r0, r4
 8011620:	4629      	mov	r1, r5
 8011622:	f7ee fda1 	bl	8000168 <__aeabi_dsub>
 8011626:	4642      	mov	r2, r8
 8011628:	4606      	mov	r6, r0
 801162a:	460f      	mov	r7, r1
 801162c:	464b      	mov	r3, r9
 801162e:	4640      	mov	r0, r8
 8011630:	4649      	mov	r1, r9
 8011632:	f7ee ff51 	bl	80004d8 <__aeabi_dmul>
 8011636:	a35e      	add	r3, pc, #376	; (adr r3, 80117b0 <__ieee754_pow+0x9e8>)
 8011638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163c:	4604      	mov	r4, r0
 801163e:	460d      	mov	r5, r1
 8011640:	f7ee ff4a 	bl	80004d8 <__aeabi_dmul>
 8011644:	a35c      	add	r3, pc, #368	; (adr r3, 80117b8 <__ieee754_pow+0x9f0>)
 8011646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164a:	f7ee fd8d 	bl	8000168 <__aeabi_dsub>
 801164e:	4622      	mov	r2, r4
 8011650:	462b      	mov	r3, r5
 8011652:	f7ee ff41 	bl	80004d8 <__aeabi_dmul>
 8011656:	a35a      	add	r3, pc, #360	; (adr r3, 80117c0 <__ieee754_pow+0x9f8>)
 8011658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165c:	f7ee fd86 	bl	800016c <__adddf3>
 8011660:	4622      	mov	r2, r4
 8011662:	462b      	mov	r3, r5
 8011664:	f7ee ff38 	bl	80004d8 <__aeabi_dmul>
 8011668:	a357      	add	r3, pc, #348	; (adr r3, 80117c8 <__ieee754_pow+0xa00>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee fd7b 	bl	8000168 <__aeabi_dsub>
 8011672:	4622      	mov	r2, r4
 8011674:	462b      	mov	r3, r5
 8011676:	f7ee ff2f 	bl	80004d8 <__aeabi_dmul>
 801167a:	a355      	add	r3, pc, #340	; (adr r3, 80117d0 <__ieee754_pow+0xa08>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee fd74 	bl	800016c <__adddf3>
 8011684:	4622      	mov	r2, r4
 8011686:	462b      	mov	r3, r5
 8011688:	f7ee ff26 	bl	80004d8 <__aeabi_dmul>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	4640      	mov	r0, r8
 8011692:	4649      	mov	r1, r9
 8011694:	f7ee fd68 	bl	8000168 <__aeabi_dsub>
 8011698:	4604      	mov	r4, r0
 801169a:	460d      	mov	r5, r1
 801169c:	4602      	mov	r2, r0
 801169e:	460b      	mov	r3, r1
 80116a0:	4640      	mov	r0, r8
 80116a2:	4649      	mov	r1, r9
 80116a4:	f7ee ff18 	bl	80004d8 <__aeabi_dmul>
 80116a8:	2200      	movs	r2, #0
 80116aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80116b2:	4620      	mov	r0, r4
 80116b4:	4629      	mov	r1, r5
 80116b6:	f7ee fd57 	bl	8000168 <__aeabi_dsub>
 80116ba:	4602      	mov	r2, r0
 80116bc:	460b      	mov	r3, r1
 80116be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116c2:	f7ef f833 	bl	800072c <__aeabi_ddiv>
 80116c6:	4632      	mov	r2, r6
 80116c8:	4604      	mov	r4, r0
 80116ca:	460d      	mov	r5, r1
 80116cc:	463b      	mov	r3, r7
 80116ce:	4640      	mov	r0, r8
 80116d0:	4649      	mov	r1, r9
 80116d2:	f7ee ff01 	bl	80004d8 <__aeabi_dmul>
 80116d6:	4632      	mov	r2, r6
 80116d8:	463b      	mov	r3, r7
 80116da:	f7ee fd47 	bl	800016c <__adddf3>
 80116de:	4602      	mov	r2, r0
 80116e0:	460b      	mov	r3, r1
 80116e2:	4620      	mov	r0, r4
 80116e4:	4629      	mov	r1, r5
 80116e6:	f7ee fd3f 	bl	8000168 <__aeabi_dsub>
 80116ea:	4642      	mov	r2, r8
 80116ec:	464b      	mov	r3, r9
 80116ee:	f7ee fd3b 	bl	8000168 <__aeabi_dsub>
 80116f2:	4602      	mov	r2, r0
 80116f4:	460b      	mov	r3, r1
 80116f6:	2000      	movs	r0, #0
 80116f8:	493b      	ldr	r1, [pc, #236]	; (80117e8 <__ieee754_pow+0xa20>)
 80116fa:	f7ee fd35 	bl	8000168 <__aeabi_dsub>
 80116fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011702:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011706:	da2b      	bge.n	8011760 <__ieee754_pow+0x998>
 8011708:	4652      	mov	r2, sl
 801170a:	f001 f8e1 	bl	80128d0 <scalbn>
 801170e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011712:	f7ff bbf2 	b.w	8010efa <__ieee754_pow+0x132>
 8011716:	4b35      	ldr	r3, [pc, #212]	; (80117ec <__ieee754_pow+0xa24>)
 8011718:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801171c:	429f      	cmp	r7, r3
 801171e:	f77f af13 	ble.w	8011548 <__ieee754_pow+0x780>
 8011722:	4b33      	ldr	r3, [pc, #204]	; (80117f0 <__ieee754_pow+0xa28>)
 8011724:	440b      	add	r3, r1
 8011726:	4303      	orrs	r3, r0
 8011728:	d00b      	beq.n	8011742 <__ieee754_pow+0x97a>
 801172a:	a32b      	add	r3, pc, #172	; (adr r3, 80117d8 <__ieee754_pow+0xa10>)
 801172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011734:	f7ee fed0 	bl	80004d8 <__aeabi_dmul>
 8011738:	a327      	add	r3, pc, #156	; (adr r3, 80117d8 <__ieee754_pow+0xa10>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	f7ff bbdc 	b.w	8010efa <__ieee754_pow+0x132>
 8011742:	4622      	mov	r2, r4
 8011744:	462b      	mov	r3, r5
 8011746:	f7ee fd0f 	bl	8000168 <__aeabi_dsub>
 801174a:	4642      	mov	r2, r8
 801174c:	464b      	mov	r3, r9
 801174e:	f7ef f949 	bl	80009e4 <__aeabi_dcmpge>
 8011752:	2800      	cmp	r0, #0
 8011754:	f43f aef8 	beq.w	8011548 <__ieee754_pow+0x780>
 8011758:	e7e7      	b.n	801172a <__ieee754_pow+0x962>
 801175a:	f04f 0a00 	mov.w	sl, #0
 801175e:	e71e      	b.n	801159e <__ieee754_pow+0x7d6>
 8011760:	4621      	mov	r1, r4
 8011762:	e7d4      	b.n	801170e <__ieee754_pow+0x946>
 8011764:	f04f 0b00 	mov.w	fp, #0
 8011768:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80117e8 <__ieee754_pow+0xa20>
 801176c:	f7ff bbb0 	b.w	8010ed0 <__ieee754_pow+0x108>
 8011770:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8011774:	f7ff bbac 	b.w	8010ed0 <__ieee754_pow+0x108>
 8011778:	4638      	mov	r0, r7
 801177a:	4641      	mov	r1, r8
 801177c:	f7ff bbbf 	b.w	8010efe <__ieee754_pow+0x136>
 8011780:	9200      	str	r2, [sp, #0]
 8011782:	f7ff bb7f 	b.w	8010e84 <__ieee754_pow+0xbc>
 8011786:	2300      	movs	r3, #0
 8011788:	f7ff bb69 	b.w	8010e5e <__ieee754_pow+0x96>
 801178c:	f3af 8000 	nop.w
 8011790:	652b82fe 	.word	0x652b82fe
 8011794:	3c971547 	.word	0x3c971547
 8011798:	00000000 	.word	0x00000000
 801179c:	3fe62e43 	.word	0x3fe62e43
 80117a0:	fefa39ef 	.word	0xfefa39ef
 80117a4:	3fe62e42 	.word	0x3fe62e42
 80117a8:	0ca86c39 	.word	0x0ca86c39
 80117ac:	be205c61 	.word	0xbe205c61
 80117b0:	72bea4d0 	.word	0x72bea4d0
 80117b4:	3e663769 	.word	0x3e663769
 80117b8:	c5d26bf1 	.word	0xc5d26bf1
 80117bc:	3ebbbd41 	.word	0x3ebbbd41
 80117c0:	af25de2c 	.word	0xaf25de2c
 80117c4:	3f11566a 	.word	0x3f11566a
 80117c8:	16bebd93 	.word	0x16bebd93
 80117cc:	3f66c16c 	.word	0x3f66c16c
 80117d0:	5555553e 	.word	0x5555553e
 80117d4:	3fc55555 	.word	0x3fc55555
 80117d8:	c2f8f359 	.word	0xc2f8f359
 80117dc:	01a56e1f 	.word	0x01a56e1f
 80117e0:	3fe00000 	.word	0x3fe00000
 80117e4:	000fffff 	.word	0x000fffff
 80117e8:	3ff00000 	.word	0x3ff00000
 80117ec:	4090cbff 	.word	0x4090cbff
 80117f0:	3f6f3400 	.word	0x3f6f3400

080117f4 <__ieee754_sqrt>:
 80117f4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8011948 <__ieee754_sqrt+0x154>
 80117f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	ea3c 0c01 	bics.w	ip, ip, r1
 8011800:	460b      	mov	r3, r1
 8011802:	4606      	mov	r6, r0
 8011804:	460d      	mov	r5, r1
 8011806:	460a      	mov	r2, r1
 8011808:	4607      	mov	r7, r0
 801180a:	4604      	mov	r4, r0
 801180c:	d10e      	bne.n	801182c <__ieee754_sqrt+0x38>
 801180e:	4602      	mov	r2, r0
 8011810:	f7ee fe62 	bl	80004d8 <__aeabi_dmul>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	4630      	mov	r0, r6
 801181a:	4629      	mov	r1, r5
 801181c:	f7ee fca6 	bl	800016c <__adddf3>
 8011820:	4606      	mov	r6, r0
 8011822:	460d      	mov	r5, r1
 8011824:	4630      	mov	r0, r6
 8011826:	4629      	mov	r1, r5
 8011828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182c:	2900      	cmp	r1, #0
 801182e:	dc0d      	bgt.n	801184c <__ieee754_sqrt+0x58>
 8011830:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8011834:	ea5c 0707 	orrs.w	r7, ip, r7
 8011838:	d0f4      	beq.n	8011824 <__ieee754_sqrt+0x30>
 801183a:	b139      	cbz	r1, 801184c <__ieee754_sqrt+0x58>
 801183c:	4602      	mov	r2, r0
 801183e:	f7ee fc93 	bl	8000168 <__aeabi_dsub>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	f7ee ff71 	bl	800072c <__aeabi_ddiv>
 801184a:	e7e9      	b.n	8011820 <__ieee754_sqrt+0x2c>
 801184c:	1512      	asrs	r2, r2, #20
 801184e:	d074      	beq.n	801193a <__ieee754_sqrt+0x146>
 8011850:	2000      	movs	r0, #0
 8011852:	07d5      	lsls	r5, r2, #31
 8011854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011858:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 801185c:	bf5e      	ittt	pl
 801185e:	0fe3      	lsrpl	r3, r4, #31
 8011860:	0064      	lslpl	r4, r4, #1
 8011862:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8011866:	0fe3      	lsrs	r3, r4, #31
 8011868:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801186c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011870:	2516      	movs	r5, #22
 8011872:	4601      	mov	r1, r0
 8011874:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011878:	1076      	asrs	r6, r6, #1
 801187a:	0064      	lsls	r4, r4, #1
 801187c:	188f      	adds	r7, r1, r2
 801187e:	429f      	cmp	r7, r3
 8011880:	bfde      	ittt	le
 8011882:	1bdb      	suble	r3, r3, r7
 8011884:	18b9      	addle	r1, r7, r2
 8011886:	1880      	addle	r0, r0, r2
 8011888:	005b      	lsls	r3, r3, #1
 801188a:	3d01      	subs	r5, #1
 801188c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011890:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011894:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011898:	d1f0      	bne.n	801187c <__ieee754_sqrt+0x88>
 801189a:	462a      	mov	r2, r5
 801189c:	f04f 0e20 	mov.w	lr, #32
 80118a0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80118a4:	428b      	cmp	r3, r1
 80118a6:	eb07 0c05 	add.w	ip, r7, r5
 80118aa:	dc02      	bgt.n	80118b2 <__ieee754_sqrt+0xbe>
 80118ac:	d113      	bne.n	80118d6 <__ieee754_sqrt+0xe2>
 80118ae:	45a4      	cmp	ip, r4
 80118b0:	d811      	bhi.n	80118d6 <__ieee754_sqrt+0xe2>
 80118b2:	f1bc 0f00 	cmp.w	ip, #0
 80118b6:	eb0c 0507 	add.w	r5, ip, r7
 80118ba:	da43      	bge.n	8011944 <__ieee754_sqrt+0x150>
 80118bc:	2d00      	cmp	r5, #0
 80118be:	db41      	blt.n	8011944 <__ieee754_sqrt+0x150>
 80118c0:	f101 0801 	add.w	r8, r1, #1
 80118c4:	1a5b      	subs	r3, r3, r1
 80118c6:	4641      	mov	r1, r8
 80118c8:	45a4      	cmp	ip, r4
 80118ca:	bf88      	it	hi
 80118cc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80118d0:	eba4 040c 	sub.w	r4, r4, ip
 80118d4:	443a      	add	r2, r7
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	f1be 0e01 	subs.w	lr, lr, #1
 80118dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80118e0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80118e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80118e8:	d1dc      	bne.n	80118a4 <__ieee754_sqrt+0xb0>
 80118ea:	4323      	orrs	r3, r4
 80118ec:	d006      	beq.n	80118fc <__ieee754_sqrt+0x108>
 80118ee:	1c54      	adds	r4, r2, #1
 80118f0:	bf0b      	itete	eq
 80118f2:	4672      	moveq	r2, lr
 80118f4:	3201      	addne	r2, #1
 80118f6:	3001      	addeq	r0, #1
 80118f8:	f022 0201 	bicne.w	r2, r2, #1
 80118fc:	1043      	asrs	r3, r0, #1
 80118fe:	07c1      	lsls	r1, r0, #31
 8011900:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011904:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011908:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801190c:	bf48      	it	mi
 801190e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011912:	4610      	mov	r0, r2
 8011914:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8011918:	e782      	b.n	8011820 <__ieee754_sqrt+0x2c>
 801191a:	0ae3      	lsrs	r3, r4, #11
 801191c:	3915      	subs	r1, #21
 801191e:	0564      	lsls	r4, r4, #21
 8011920:	2b00      	cmp	r3, #0
 8011922:	d0fa      	beq.n	801191a <__ieee754_sqrt+0x126>
 8011924:	02de      	lsls	r6, r3, #11
 8011926:	d50a      	bpl.n	801193e <__ieee754_sqrt+0x14a>
 8011928:	f1c2 0020 	rsb	r0, r2, #32
 801192c:	fa24 f000 	lsr.w	r0, r4, r0
 8011930:	1e55      	subs	r5, r2, #1
 8011932:	4094      	lsls	r4, r2
 8011934:	4303      	orrs	r3, r0
 8011936:	1b4a      	subs	r2, r1, r5
 8011938:	e78a      	b.n	8011850 <__ieee754_sqrt+0x5c>
 801193a:	4611      	mov	r1, r2
 801193c:	e7f0      	b.n	8011920 <__ieee754_sqrt+0x12c>
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	3201      	adds	r2, #1
 8011942:	e7ef      	b.n	8011924 <__ieee754_sqrt+0x130>
 8011944:	4688      	mov	r8, r1
 8011946:	e7bd      	b.n	80118c4 <__ieee754_sqrt+0xd0>
 8011948:	7ff00000 	.word	0x7ff00000

0801194c <__ieee754_asinf>:
 801194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011950:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8011954:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011958:	4604      	mov	r4, r0
 801195a:	4605      	mov	r5, r0
 801195c:	d10c      	bne.n	8011978 <__ieee754_asinf+0x2c>
 801195e:	498d      	ldr	r1, [pc, #564]	; (8011b94 <__ieee754_asinf+0x248>)
 8011960:	f7ef f9f0 	bl	8000d44 <__aeabi_fmul>
 8011964:	498c      	ldr	r1, [pc, #560]	; (8011b98 <__ieee754_asinf+0x24c>)
 8011966:	4605      	mov	r5, r0
 8011968:	4620      	mov	r0, r4
 801196a:	f7ef f9eb 	bl	8000d44 <__aeabi_fmul>
 801196e:	4601      	mov	r1, r0
 8011970:	4628      	mov	r0, r5
 8011972:	f7ef f8df 	bl	8000b34 <__addsf3>
 8011976:	e006      	b.n	8011986 <__ieee754_asinf+0x3a>
 8011978:	dd07      	ble.n	801198a <__ieee754_asinf+0x3e>
 801197a:	4601      	mov	r1, r0
 801197c:	f7ef f8d8 	bl	8000b30 <__aeabi_fsub>
 8011980:	4601      	mov	r1, r0
 8011982:	f7ef fa93 	bl	8000eac <__aeabi_fdiv>
 8011986:	4604      	mov	r4, r0
 8011988:	e00e      	b.n	80119a8 <__ieee754_asinf+0x5c>
 801198a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 801198e:	da58      	bge.n	8011a42 <__ieee754_asinf+0xf6>
 8011990:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8011994:	da0b      	bge.n	80119ae <__ieee754_asinf+0x62>
 8011996:	4981      	ldr	r1, [pc, #516]	; (8011b9c <__ieee754_asinf+0x250>)
 8011998:	f7ef f8cc 	bl	8000b34 <__addsf3>
 801199c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80119a0:	f7ef fb8c 	bl	80010bc <__aeabi_fcmpgt>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	d04c      	beq.n	8011a42 <__ieee754_asinf+0xf6>
 80119a8:	4620      	mov	r0, r4
 80119aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ae:	4601      	mov	r1, r0
 80119b0:	f7ef f9c8 	bl	8000d44 <__aeabi_fmul>
 80119b4:	4605      	mov	r5, r0
 80119b6:	497a      	ldr	r1, [pc, #488]	; (8011ba0 <__ieee754_asinf+0x254>)
 80119b8:	f7ef f9c4 	bl	8000d44 <__aeabi_fmul>
 80119bc:	4979      	ldr	r1, [pc, #484]	; (8011ba4 <__ieee754_asinf+0x258>)
 80119be:	f7ef f8b9 	bl	8000b34 <__addsf3>
 80119c2:	4629      	mov	r1, r5
 80119c4:	f7ef f9be 	bl	8000d44 <__aeabi_fmul>
 80119c8:	4977      	ldr	r1, [pc, #476]	; (8011ba8 <__ieee754_asinf+0x25c>)
 80119ca:	f7ef f8b1 	bl	8000b30 <__aeabi_fsub>
 80119ce:	4629      	mov	r1, r5
 80119d0:	f7ef f9b8 	bl	8000d44 <__aeabi_fmul>
 80119d4:	4975      	ldr	r1, [pc, #468]	; (8011bac <__ieee754_asinf+0x260>)
 80119d6:	f7ef f8ad 	bl	8000b34 <__addsf3>
 80119da:	4629      	mov	r1, r5
 80119dc:	f7ef f9b2 	bl	8000d44 <__aeabi_fmul>
 80119e0:	4973      	ldr	r1, [pc, #460]	; (8011bb0 <__ieee754_asinf+0x264>)
 80119e2:	f7ef f8a5 	bl	8000b30 <__aeabi_fsub>
 80119e6:	4629      	mov	r1, r5
 80119e8:	f7ef f9ac 	bl	8000d44 <__aeabi_fmul>
 80119ec:	4971      	ldr	r1, [pc, #452]	; (8011bb4 <__ieee754_asinf+0x268>)
 80119ee:	f7ef f8a1 	bl	8000b34 <__addsf3>
 80119f2:	4629      	mov	r1, r5
 80119f4:	f7ef f9a6 	bl	8000d44 <__aeabi_fmul>
 80119f8:	496f      	ldr	r1, [pc, #444]	; (8011bb8 <__ieee754_asinf+0x26c>)
 80119fa:	4606      	mov	r6, r0
 80119fc:	4628      	mov	r0, r5
 80119fe:	f7ef f9a1 	bl	8000d44 <__aeabi_fmul>
 8011a02:	496e      	ldr	r1, [pc, #440]	; (8011bbc <__ieee754_asinf+0x270>)
 8011a04:	f7ef f894 	bl	8000b30 <__aeabi_fsub>
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ef f99b 	bl	8000d44 <__aeabi_fmul>
 8011a0e:	496c      	ldr	r1, [pc, #432]	; (8011bc0 <__ieee754_asinf+0x274>)
 8011a10:	f7ef f890 	bl	8000b34 <__addsf3>
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ef f995 	bl	8000d44 <__aeabi_fmul>
 8011a1a:	496a      	ldr	r1, [pc, #424]	; (8011bc4 <__ieee754_asinf+0x278>)
 8011a1c:	f7ef f888 	bl	8000b30 <__aeabi_fsub>
 8011a20:	4629      	mov	r1, r5
 8011a22:	f7ef f98f 	bl	8000d44 <__aeabi_fmul>
 8011a26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011a2a:	f7ef f883 	bl	8000b34 <__addsf3>
 8011a2e:	4601      	mov	r1, r0
 8011a30:	4630      	mov	r0, r6
 8011a32:	f7ef fa3b 	bl	8000eac <__aeabi_fdiv>
 8011a36:	4621      	mov	r1, r4
 8011a38:	f7ef f984 	bl	8000d44 <__aeabi_fmul>
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	4620      	mov	r0, r4
 8011a40:	e797      	b.n	8011972 <__ieee754_asinf+0x26>
 8011a42:	4620      	mov	r0, r4
 8011a44:	f7ff f862 	bl	8010b0c <fabsf>
 8011a48:	4601      	mov	r1, r0
 8011a4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011a4e:	f7ef f86f 	bl	8000b30 <__aeabi_fsub>
 8011a52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011a56:	f7ef f975 	bl	8000d44 <__aeabi_fmul>
 8011a5a:	4606      	mov	r6, r0
 8011a5c:	4950      	ldr	r1, [pc, #320]	; (8011ba0 <__ieee754_asinf+0x254>)
 8011a5e:	f7ef f971 	bl	8000d44 <__aeabi_fmul>
 8011a62:	4950      	ldr	r1, [pc, #320]	; (8011ba4 <__ieee754_asinf+0x258>)
 8011a64:	f7ef f866 	bl	8000b34 <__addsf3>
 8011a68:	4631      	mov	r1, r6
 8011a6a:	f7ef f96b 	bl	8000d44 <__aeabi_fmul>
 8011a6e:	494e      	ldr	r1, [pc, #312]	; (8011ba8 <__ieee754_asinf+0x25c>)
 8011a70:	f7ef f85e 	bl	8000b30 <__aeabi_fsub>
 8011a74:	4631      	mov	r1, r6
 8011a76:	f7ef f965 	bl	8000d44 <__aeabi_fmul>
 8011a7a:	494c      	ldr	r1, [pc, #304]	; (8011bac <__ieee754_asinf+0x260>)
 8011a7c:	f7ef f85a 	bl	8000b34 <__addsf3>
 8011a80:	4631      	mov	r1, r6
 8011a82:	f7ef f95f 	bl	8000d44 <__aeabi_fmul>
 8011a86:	494a      	ldr	r1, [pc, #296]	; (8011bb0 <__ieee754_asinf+0x264>)
 8011a88:	f7ef f852 	bl	8000b30 <__aeabi_fsub>
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	f7ef f959 	bl	8000d44 <__aeabi_fmul>
 8011a92:	4948      	ldr	r1, [pc, #288]	; (8011bb4 <__ieee754_asinf+0x268>)
 8011a94:	f7ef f84e 	bl	8000b34 <__addsf3>
 8011a98:	4631      	mov	r1, r6
 8011a9a:	f7ef f953 	bl	8000d44 <__aeabi_fmul>
 8011a9e:	4946      	ldr	r1, [pc, #280]	; (8011bb8 <__ieee754_asinf+0x26c>)
 8011aa0:	4681      	mov	r9, r0
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7ef f94e 	bl	8000d44 <__aeabi_fmul>
 8011aa8:	4944      	ldr	r1, [pc, #272]	; (8011bbc <__ieee754_asinf+0x270>)
 8011aaa:	f7ef f841 	bl	8000b30 <__aeabi_fsub>
 8011aae:	4631      	mov	r1, r6
 8011ab0:	f7ef f948 	bl	8000d44 <__aeabi_fmul>
 8011ab4:	4942      	ldr	r1, [pc, #264]	; (8011bc0 <__ieee754_asinf+0x274>)
 8011ab6:	f7ef f83d 	bl	8000b34 <__addsf3>
 8011aba:	4631      	mov	r1, r6
 8011abc:	f7ef f942 	bl	8000d44 <__aeabi_fmul>
 8011ac0:	4940      	ldr	r1, [pc, #256]	; (8011bc4 <__ieee754_asinf+0x278>)
 8011ac2:	f7ef f835 	bl	8000b30 <__aeabi_fsub>
 8011ac6:	4631      	mov	r1, r6
 8011ac8:	f7ef f93c 	bl	8000d44 <__aeabi_fmul>
 8011acc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011ad0:	f7ef f830 	bl	8000b34 <__addsf3>
 8011ad4:	4682      	mov	sl, r0
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 fa60 	bl	8011f9c <__ieee754_sqrtf>
 8011adc:	4b3a      	ldr	r3, [pc, #232]	; (8011bc8 <__ieee754_asinf+0x27c>)
 8011ade:	4607      	mov	r7, r0
 8011ae0:	4598      	cmp	r8, r3
 8011ae2:	dd1a      	ble.n	8011b1a <__ieee754_asinf+0x1ce>
 8011ae4:	4651      	mov	r1, sl
 8011ae6:	4648      	mov	r0, r9
 8011ae8:	f7ef f9e0 	bl	8000eac <__aeabi_fdiv>
 8011aec:	4639      	mov	r1, r7
 8011aee:	f7ef f929 	bl	8000d44 <__aeabi_fmul>
 8011af2:	4639      	mov	r1, r7
 8011af4:	f7ef f81e 	bl	8000b34 <__addsf3>
 8011af8:	4601      	mov	r1, r0
 8011afa:	f7ef f81b 	bl	8000b34 <__addsf3>
 8011afe:	4933      	ldr	r1, [pc, #204]	; (8011bcc <__ieee754_asinf+0x280>)
 8011b00:	f7ef f818 	bl	8000b34 <__addsf3>
 8011b04:	4601      	mov	r1, r0
 8011b06:	4823      	ldr	r0, [pc, #140]	; (8011b94 <__ieee754_asinf+0x248>)
 8011b08:	f7ef f812 	bl	8000b30 <__aeabi_fsub>
 8011b0c:	2d00      	cmp	r5, #0
 8011b0e:	4604      	mov	r4, r0
 8011b10:	f73f af4a 	bgt.w	80119a8 <__ieee754_asinf+0x5c>
 8011b14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011b18:	e735      	b.n	8011986 <__ieee754_asinf+0x3a>
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8011b20:	f7ef f808 	bl	8000b34 <__addsf3>
 8011b24:	4651      	mov	r1, sl
 8011b26:	4604      	mov	r4, r0
 8011b28:	4648      	mov	r0, r9
 8011b2a:	f7ef f9bf 	bl	8000eac <__aeabi_fdiv>
 8011b2e:	4601      	mov	r1, r0
 8011b30:	4620      	mov	r0, r4
 8011b32:	f7ef f907 	bl	8000d44 <__aeabi_fmul>
 8011b36:	f028 080f 	bic.w	r8, r8, #15
 8011b3a:	4681      	mov	r9, r0
 8011b3c:	4641      	mov	r1, r8
 8011b3e:	4640      	mov	r0, r8
 8011b40:	f7ef f900 	bl	8000d44 <__aeabi_fmul>
 8011b44:	4601      	mov	r1, r0
 8011b46:	4630      	mov	r0, r6
 8011b48:	f7ee fff2 	bl	8000b30 <__aeabi_fsub>
 8011b4c:	4641      	mov	r1, r8
 8011b4e:	4604      	mov	r4, r0
 8011b50:	4638      	mov	r0, r7
 8011b52:	f7ee ffef 	bl	8000b34 <__addsf3>
 8011b56:	4601      	mov	r1, r0
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f7ef f9a7 	bl	8000eac <__aeabi_fdiv>
 8011b5e:	4601      	mov	r1, r0
 8011b60:	f7ee ffe8 	bl	8000b34 <__addsf3>
 8011b64:	4601      	mov	r1, r0
 8011b66:	480c      	ldr	r0, [pc, #48]	; (8011b98 <__ieee754_asinf+0x24c>)
 8011b68:	f7ee ffe2 	bl	8000b30 <__aeabi_fsub>
 8011b6c:	4601      	mov	r1, r0
 8011b6e:	4648      	mov	r0, r9
 8011b70:	f7ee ffde 	bl	8000b30 <__aeabi_fsub>
 8011b74:	4641      	mov	r1, r8
 8011b76:	4604      	mov	r4, r0
 8011b78:	4640      	mov	r0, r8
 8011b7a:	f7ee ffdb 	bl	8000b34 <__addsf3>
 8011b7e:	4601      	mov	r1, r0
 8011b80:	4813      	ldr	r0, [pc, #76]	; (8011bd0 <__ieee754_asinf+0x284>)
 8011b82:	f7ee ffd5 	bl	8000b30 <__aeabi_fsub>
 8011b86:	4601      	mov	r1, r0
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f7ee ffd1 	bl	8000b30 <__aeabi_fsub>
 8011b8e:	4601      	mov	r1, r0
 8011b90:	480f      	ldr	r0, [pc, #60]	; (8011bd0 <__ieee754_asinf+0x284>)
 8011b92:	e7b9      	b.n	8011b08 <__ieee754_asinf+0x1bc>
 8011b94:	3fc90fdb 	.word	0x3fc90fdb
 8011b98:	b33bbd2e 	.word	0xb33bbd2e
 8011b9c:	7149f2ca 	.word	0x7149f2ca
 8011ba0:	3811ef08 	.word	0x3811ef08
 8011ba4:	3a4f7f04 	.word	0x3a4f7f04
 8011ba8:	3d241146 	.word	0x3d241146
 8011bac:	3e4e0aa8 	.word	0x3e4e0aa8
 8011bb0:	3ea6b090 	.word	0x3ea6b090
 8011bb4:	3e2aaaab 	.word	0x3e2aaaab
 8011bb8:	3d9dc62e 	.word	0x3d9dc62e
 8011bbc:	3f303361 	.word	0x3f303361
 8011bc0:	4001572d 	.word	0x4001572d
 8011bc4:	4019d139 	.word	0x4019d139
 8011bc8:	3f799999 	.word	0x3f799999
 8011bcc:	333bbd2e 	.word	0x333bbd2e
 8011bd0:	3f490fdb 	.word	0x3f490fdb

08011bd4 <__ieee754_atan2f>:
 8011bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011bda:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011bde:	4603      	mov	r3, r0
 8011be0:	dc05      	bgt.n	8011bee <__ieee754_atan2f+0x1a>
 8011be2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011be6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011bea:	4607      	mov	r7, r0
 8011bec:	dd04      	ble.n	8011bf8 <__ieee754_atan2f+0x24>
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ee ffa0 	bl	8000b34 <__addsf3>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	e011      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011bf8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011bfc:	d103      	bne.n	8011c06 <__ieee754_atan2f+0x32>
 8011bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c02:	f7fe be43 	b.w	801088c <atanf>
 8011c06:	178c      	asrs	r4, r1, #30
 8011c08:	f004 0402 	and.w	r4, r4, #2
 8011c0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011c10:	b932      	cbnz	r2, 8011c20 <__ieee754_atan2f+0x4c>
 8011c12:	2c02      	cmp	r4, #2
 8011c14:	d04c      	beq.n	8011cb0 <__ieee754_atan2f+0xdc>
 8011c16:	2c03      	cmp	r4, #3
 8011c18:	d100      	bne.n	8011c1c <__ieee754_atan2f+0x48>
 8011c1a:	4b29      	ldr	r3, [pc, #164]	; (8011cc0 <__ieee754_atan2f+0xec>)
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c20:	b91e      	cbnz	r6, 8011c2a <__ieee754_atan2f+0x56>
 8011c22:	2f00      	cmp	r7, #0
 8011c24:	da4a      	bge.n	8011cbc <__ieee754_atan2f+0xe8>
 8011c26:	4b27      	ldr	r3, [pc, #156]	; (8011cc4 <__ieee754_atan2f+0xf0>)
 8011c28:	e7f8      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011c2a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011c2e:	d10e      	bne.n	8011c4e <__ieee754_atan2f+0x7a>
 8011c30:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011c34:	f104 34ff 	add.w	r4, r4, #4294967295
 8011c38:	d105      	bne.n	8011c46 <__ieee754_atan2f+0x72>
 8011c3a:	2c02      	cmp	r4, #2
 8011c3c:	d83a      	bhi.n	8011cb4 <__ieee754_atan2f+0xe0>
 8011c3e:	4b22      	ldr	r3, [pc, #136]	; (8011cc8 <__ieee754_atan2f+0xf4>)
 8011c40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011c44:	e7ea      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011c46:	2c02      	cmp	r4, #2
 8011c48:	d836      	bhi.n	8011cb8 <__ieee754_atan2f+0xe4>
 8011c4a:	4b20      	ldr	r3, [pc, #128]	; (8011ccc <__ieee754_atan2f+0xf8>)
 8011c4c:	e7f8      	b.n	8011c40 <__ieee754_atan2f+0x6c>
 8011c4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011c52:	d0e6      	beq.n	8011c22 <__ieee754_atan2f+0x4e>
 8011c54:	1b92      	subs	r2, r2, r6
 8011c56:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8011c5a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8011c5e:	da17      	bge.n	8011c90 <__ieee754_atan2f+0xbc>
 8011c60:	2900      	cmp	r1, #0
 8011c62:	da01      	bge.n	8011c68 <__ieee754_atan2f+0x94>
 8011c64:	303c      	adds	r0, #60	; 0x3c
 8011c66:	db15      	blt.n	8011c94 <__ieee754_atan2f+0xc0>
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ef f91f 	bl	8000eac <__aeabi_fdiv>
 8011c6e:	f7fe ff4d 	bl	8010b0c <fabsf>
 8011c72:	f7fe fe0b 	bl	801088c <atanf>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2c01      	cmp	r4, #1
 8011c7a:	d00d      	beq.n	8011c98 <__ieee754_atan2f+0xc4>
 8011c7c:	2c02      	cmp	r4, #2
 8011c7e:	d00e      	beq.n	8011c9e <__ieee754_atan2f+0xca>
 8011c80:	2c00      	cmp	r4, #0
 8011c82:	d0cb      	beq.n	8011c1c <__ieee754_atan2f+0x48>
 8011c84:	4912      	ldr	r1, [pc, #72]	; (8011cd0 <__ieee754_atan2f+0xfc>)
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7ee ff54 	bl	8000b34 <__addsf3>
 8011c8c:	4911      	ldr	r1, [pc, #68]	; (8011cd4 <__ieee754_atan2f+0x100>)
 8011c8e:	e00c      	b.n	8011caa <__ieee754_atan2f+0xd6>
 8011c90:	4b11      	ldr	r3, [pc, #68]	; (8011cd8 <__ieee754_atan2f+0x104>)
 8011c92:	e7f1      	b.n	8011c78 <__ieee754_atan2f+0xa4>
 8011c94:	2300      	movs	r3, #0
 8011c96:	e7ef      	b.n	8011c78 <__ieee754_atan2f+0xa4>
 8011c98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c9c:	e7be      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011c9e:	490c      	ldr	r1, [pc, #48]	; (8011cd0 <__ieee754_atan2f+0xfc>)
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7ee ff47 	bl	8000b34 <__addsf3>
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	480a      	ldr	r0, [pc, #40]	; (8011cd4 <__ieee754_atan2f+0x100>)
 8011caa:	f7ee ff41 	bl	8000b30 <__aeabi_fsub>
 8011cae:	e7a1      	b.n	8011bf4 <__ieee754_atan2f+0x20>
 8011cb0:	4b08      	ldr	r3, [pc, #32]	; (8011cd4 <__ieee754_atan2f+0x100>)
 8011cb2:	e7b3      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011cb4:	4b09      	ldr	r3, [pc, #36]	; (8011cdc <__ieee754_atan2f+0x108>)
 8011cb6:	e7b1      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	e7af      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011cbc:	4b06      	ldr	r3, [pc, #24]	; (8011cd8 <__ieee754_atan2f+0x104>)
 8011cbe:	e7ad      	b.n	8011c1c <__ieee754_atan2f+0x48>
 8011cc0:	c0490fdb 	.word	0xc0490fdb
 8011cc4:	bfc90fdb 	.word	0xbfc90fdb
 8011cc8:	08013df8 	.word	0x08013df8
 8011ccc:	08013e04 	.word	0x08013e04
 8011cd0:	33bbbd2e 	.word	0x33bbbd2e
 8011cd4:	40490fdb 	.word	0x40490fdb
 8011cd8:	3fc90fdb 	.word	0x3fc90fdb
 8011cdc:	3f490fdb 	.word	0x3f490fdb

08011ce0 <__ieee754_rem_pio2f>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	4aa0      	ldr	r2, [pc, #640]	; (8011f68 <__ieee754_rem_pio2f+0x288>)
 8011ce6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8011cea:	4296      	cmp	r6, r2
 8011cec:	460c      	mov	r4, r1
 8011cee:	4682      	mov	sl, r0
 8011cf0:	b087      	sub	sp, #28
 8011cf2:	dc04      	bgt.n	8011cfe <__ieee754_rem_pio2f+0x1e>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	6008      	str	r0, [r1, #0]
 8011cf8:	604b      	str	r3, [r1, #4]
 8011cfa:	2500      	movs	r5, #0
 8011cfc:	e01a      	b.n	8011d34 <__ieee754_rem_pio2f+0x54>
 8011cfe:	4a9b      	ldr	r2, [pc, #620]	; (8011f6c <__ieee754_rem_pio2f+0x28c>)
 8011d00:	4296      	cmp	r6, r2
 8011d02:	dc4b      	bgt.n	8011d9c <__ieee754_rem_pio2f+0xbc>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	499a      	ldr	r1, [pc, #616]	; (8011f70 <__ieee754_rem_pio2f+0x290>)
 8011d08:	4f9a      	ldr	r7, [pc, #616]	; (8011f74 <__ieee754_rem_pio2f+0x294>)
 8011d0a:	f026 060f 	bic.w	r6, r6, #15
 8011d0e:	dd23      	ble.n	8011d58 <__ieee754_rem_pio2f+0x78>
 8011d10:	f7ee ff0e 	bl	8000b30 <__aeabi_fsub>
 8011d14:	42be      	cmp	r6, r7
 8011d16:	4605      	mov	r5, r0
 8011d18:	d010      	beq.n	8011d3c <__ieee754_rem_pio2f+0x5c>
 8011d1a:	4997      	ldr	r1, [pc, #604]	; (8011f78 <__ieee754_rem_pio2f+0x298>)
 8011d1c:	f7ee ff08 	bl	8000b30 <__aeabi_fsub>
 8011d20:	4601      	mov	r1, r0
 8011d22:	6020      	str	r0, [r4, #0]
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7ee ff03 	bl	8000b30 <__aeabi_fsub>
 8011d2a:	4993      	ldr	r1, [pc, #588]	; (8011f78 <__ieee754_rem_pio2f+0x298>)
 8011d2c:	f7ee ff00 	bl	8000b30 <__aeabi_fsub>
 8011d30:	2501      	movs	r5, #1
 8011d32:	6060      	str	r0, [r4, #4]
 8011d34:	4628      	mov	r0, r5
 8011d36:	b007      	add	sp, #28
 8011d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d3c:	498f      	ldr	r1, [pc, #572]	; (8011f7c <__ieee754_rem_pio2f+0x29c>)
 8011d3e:	f7ee fef7 	bl	8000b30 <__aeabi_fsub>
 8011d42:	498f      	ldr	r1, [pc, #572]	; (8011f80 <__ieee754_rem_pio2f+0x2a0>)
 8011d44:	4605      	mov	r5, r0
 8011d46:	f7ee fef3 	bl	8000b30 <__aeabi_fsub>
 8011d4a:	4601      	mov	r1, r0
 8011d4c:	6020      	str	r0, [r4, #0]
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f7ee feee 	bl	8000b30 <__aeabi_fsub>
 8011d54:	498a      	ldr	r1, [pc, #552]	; (8011f80 <__ieee754_rem_pio2f+0x2a0>)
 8011d56:	e7e9      	b.n	8011d2c <__ieee754_rem_pio2f+0x4c>
 8011d58:	f7ee feec 	bl	8000b34 <__addsf3>
 8011d5c:	42be      	cmp	r6, r7
 8011d5e:	4605      	mov	r5, r0
 8011d60:	d00e      	beq.n	8011d80 <__ieee754_rem_pio2f+0xa0>
 8011d62:	4985      	ldr	r1, [pc, #532]	; (8011f78 <__ieee754_rem_pio2f+0x298>)
 8011d64:	f7ee fee6 	bl	8000b34 <__addsf3>
 8011d68:	4601      	mov	r1, r0
 8011d6a:	6020      	str	r0, [r4, #0]
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f7ee fedf 	bl	8000b30 <__aeabi_fsub>
 8011d72:	4981      	ldr	r1, [pc, #516]	; (8011f78 <__ieee754_rem_pio2f+0x298>)
 8011d74:	f7ee fede 	bl	8000b34 <__addsf3>
 8011d78:	f04f 35ff 	mov.w	r5, #4294967295
 8011d7c:	6060      	str	r0, [r4, #4]
 8011d7e:	e7d9      	b.n	8011d34 <__ieee754_rem_pio2f+0x54>
 8011d80:	497e      	ldr	r1, [pc, #504]	; (8011f7c <__ieee754_rem_pio2f+0x29c>)
 8011d82:	f7ee fed7 	bl	8000b34 <__addsf3>
 8011d86:	497e      	ldr	r1, [pc, #504]	; (8011f80 <__ieee754_rem_pio2f+0x2a0>)
 8011d88:	4605      	mov	r5, r0
 8011d8a:	f7ee fed3 	bl	8000b34 <__addsf3>
 8011d8e:	4601      	mov	r1, r0
 8011d90:	6020      	str	r0, [r4, #0]
 8011d92:	4628      	mov	r0, r5
 8011d94:	f7ee fecc 	bl	8000b30 <__aeabi_fsub>
 8011d98:	4979      	ldr	r1, [pc, #484]	; (8011f80 <__ieee754_rem_pio2f+0x2a0>)
 8011d9a:	e7eb      	b.n	8011d74 <__ieee754_rem_pio2f+0x94>
 8011d9c:	4a79      	ldr	r2, [pc, #484]	; (8011f84 <__ieee754_rem_pio2f+0x2a4>)
 8011d9e:	4296      	cmp	r6, r2
 8011da0:	f300 8091 	bgt.w	8011ec6 <__ieee754_rem_pio2f+0x1e6>
 8011da4:	f7fe feb2 	bl	8010b0c <fabsf>
 8011da8:	4977      	ldr	r1, [pc, #476]	; (8011f88 <__ieee754_rem_pio2f+0x2a8>)
 8011daa:	4607      	mov	r7, r0
 8011dac:	f7ee ffca 	bl	8000d44 <__aeabi_fmul>
 8011db0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011db4:	f7ee febe 	bl	8000b34 <__addsf3>
 8011db8:	f7ef f9a0 	bl	80010fc <__aeabi_f2iz>
 8011dbc:	4605      	mov	r5, r0
 8011dbe:	f7ee ff6d 	bl	8000c9c <__aeabi_i2f>
 8011dc2:	496b      	ldr	r1, [pc, #428]	; (8011f70 <__ieee754_rem_pio2f+0x290>)
 8011dc4:	4681      	mov	r9, r0
 8011dc6:	f7ee ffbd 	bl	8000d44 <__aeabi_fmul>
 8011dca:	4601      	mov	r1, r0
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7ee feaf 	bl	8000b30 <__aeabi_fsub>
 8011dd2:	4969      	ldr	r1, [pc, #420]	; (8011f78 <__ieee754_rem_pio2f+0x298>)
 8011dd4:	4680      	mov	r8, r0
 8011dd6:	4648      	mov	r0, r9
 8011dd8:	f7ee ffb4 	bl	8000d44 <__aeabi_fmul>
 8011ddc:	2d1f      	cmp	r5, #31
 8011dde:	4607      	mov	r7, r0
 8011de0:	dc0c      	bgt.n	8011dfc <__ieee754_rem_pio2f+0x11c>
 8011de2:	4a6a      	ldr	r2, [pc, #424]	; (8011f8c <__ieee754_rem_pio2f+0x2ac>)
 8011de4:	1e69      	subs	r1, r5, #1
 8011de6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011dea:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d004      	beq.n	8011dfc <__ieee754_rem_pio2f+0x11c>
 8011df2:	4639      	mov	r1, r7
 8011df4:	4640      	mov	r0, r8
 8011df6:	f7ee fe9b 	bl	8000b30 <__aeabi_fsub>
 8011dfa:	e00b      	b.n	8011e14 <__ieee754_rem_pio2f+0x134>
 8011dfc:	4639      	mov	r1, r7
 8011dfe:	4640      	mov	r0, r8
 8011e00:	f7ee fe96 	bl	8000b30 <__aeabi_fsub>
 8011e04:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011e08:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8011e0c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8011e10:	2e08      	cmp	r6, #8
 8011e12:	dc01      	bgt.n	8011e18 <__ieee754_rem_pio2f+0x138>
 8011e14:	6020      	str	r0, [r4, #0]
 8011e16:	e026      	b.n	8011e66 <__ieee754_rem_pio2f+0x186>
 8011e18:	4958      	ldr	r1, [pc, #352]	; (8011f7c <__ieee754_rem_pio2f+0x29c>)
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	f7ee ff92 	bl	8000d44 <__aeabi_fmul>
 8011e20:	4607      	mov	r7, r0
 8011e22:	4601      	mov	r1, r0
 8011e24:	4640      	mov	r0, r8
 8011e26:	f7ee fe83 	bl	8000b30 <__aeabi_fsub>
 8011e2a:	4601      	mov	r1, r0
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	4640      	mov	r0, r8
 8011e30:	f7ee fe7e 	bl	8000b30 <__aeabi_fsub>
 8011e34:	4639      	mov	r1, r7
 8011e36:	f7ee fe7b 	bl	8000b30 <__aeabi_fsub>
 8011e3a:	4607      	mov	r7, r0
 8011e3c:	4950      	ldr	r1, [pc, #320]	; (8011f80 <__ieee754_rem_pio2f+0x2a0>)
 8011e3e:	4648      	mov	r0, r9
 8011e40:	f7ee ff80 	bl	8000d44 <__aeabi_fmul>
 8011e44:	4639      	mov	r1, r7
 8011e46:	f7ee fe73 	bl	8000b30 <__aeabi_fsub>
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	4607      	mov	r7, r0
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f7ee fe6e 	bl	8000b30 <__aeabi_fsub>
 8011e54:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011e58:	ebab 0b03 	sub.w	fp, fp, r3
 8011e5c:	f1bb 0f19 	cmp.w	fp, #25
 8011e60:	dc16      	bgt.n	8011e90 <__ieee754_rem_pio2f+0x1b0>
 8011e62:	46b0      	mov	r8, r6
 8011e64:	6020      	str	r0, [r4, #0]
 8011e66:	6826      	ldr	r6, [r4, #0]
 8011e68:	4640      	mov	r0, r8
 8011e6a:	4631      	mov	r1, r6
 8011e6c:	f7ee fe60 	bl	8000b30 <__aeabi_fsub>
 8011e70:	4639      	mov	r1, r7
 8011e72:	f7ee fe5d 	bl	8000b30 <__aeabi_fsub>
 8011e76:	f1ba 0f00 	cmp.w	sl, #0
 8011e7a:	6060      	str	r0, [r4, #4]
 8011e7c:	f6bf af5a 	bge.w	8011d34 <__ieee754_rem_pio2f+0x54>
 8011e80:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011e84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011e88:	6026      	str	r6, [r4, #0]
 8011e8a:	6060      	str	r0, [r4, #4]
 8011e8c:	426d      	negs	r5, r5
 8011e8e:	e751      	b.n	8011d34 <__ieee754_rem_pio2f+0x54>
 8011e90:	493f      	ldr	r1, [pc, #252]	; (8011f90 <__ieee754_rem_pio2f+0x2b0>)
 8011e92:	4648      	mov	r0, r9
 8011e94:	f7ee ff56 	bl	8000d44 <__aeabi_fmul>
 8011e98:	4607      	mov	r7, r0
 8011e9a:	4601      	mov	r1, r0
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ee fe47 	bl	8000b30 <__aeabi_fsub>
 8011ea2:	4601      	mov	r1, r0
 8011ea4:	4680      	mov	r8, r0
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f7ee fe42 	bl	8000b30 <__aeabi_fsub>
 8011eac:	4639      	mov	r1, r7
 8011eae:	f7ee fe3f 	bl	8000b30 <__aeabi_fsub>
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	4937      	ldr	r1, [pc, #220]	; (8011f94 <__ieee754_rem_pio2f+0x2b4>)
 8011eb6:	4648      	mov	r0, r9
 8011eb8:	f7ee ff44 	bl	8000d44 <__aeabi_fmul>
 8011ebc:	4631      	mov	r1, r6
 8011ebe:	f7ee fe37 	bl	8000b30 <__aeabi_fsub>
 8011ec2:	4607      	mov	r7, r0
 8011ec4:	e795      	b.n	8011df2 <__ieee754_rem_pio2f+0x112>
 8011ec6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011eca:	db05      	blt.n	8011ed8 <__ieee754_rem_pio2f+0x1f8>
 8011ecc:	4601      	mov	r1, r0
 8011ece:	f7ee fe2f 	bl	8000b30 <__aeabi_fsub>
 8011ed2:	6060      	str	r0, [r4, #4]
 8011ed4:	6020      	str	r0, [r4, #0]
 8011ed6:	e710      	b.n	8011cfa <__ieee754_rem_pio2f+0x1a>
 8011ed8:	15f7      	asrs	r7, r6, #23
 8011eda:	3f86      	subs	r7, #134	; 0x86
 8011edc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7ef f90b 	bl	80010fc <__aeabi_f2iz>
 8011ee6:	f7ee fed9 	bl	8000c9c <__aeabi_i2f>
 8011eea:	4601      	mov	r1, r0
 8011eec:	9003      	str	r0, [sp, #12]
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f7ee fe1e 	bl	8000b30 <__aeabi_fsub>
 8011ef4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011ef8:	f7ee ff24 	bl	8000d44 <__aeabi_fmul>
 8011efc:	4606      	mov	r6, r0
 8011efe:	f7ef f8fd 	bl	80010fc <__aeabi_f2iz>
 8011f02:	f7ee fecb 	bl	8000c9c <__aeabi_i2f>
 8011f06:	4601      	mov	r1, r0
 8011f08:	9004      	str	r0, [sp, #16]
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7ee fe0f 	bl	8000b30 <__aeabi_fsub>
 8011f12:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011f16:	f7ee ff15 	bl	8000d44 <__aeabi_fmul>
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	9005      	str	r0, [sp, #20]
 8011f1e:	f7ef f8a5 	bl	800106c <__aeabi_fcmpeq>
 8011f22:	b1f0      	cbz	r0, 8011f62 <__ieee754_rem_pio2f+0x282>
 8011f24:	2100      	movs	r1, #0
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7ef f8a0 	bl	800106c <__aeabi_fcmpeq>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	bf14      	ite	ne
 8011f30:	2301      	movne	r3, #1
 8011f32:	2302      	moveq	r3, #2
 8011f34:	4a18      	ldr	r2, [pc, #96]	; (8011f98 <__ieee754_rem_pio2f+0x2b8>)
 8011f36:	4621      	mov	r1, r4
 8011f38:	9201      	str	r2, [sp, #4]
 8011f3a:	2202      	movs	r2, #2
 8011f3c:	a803      	add	r0, sp, #12
 8011f3e:	9200      	str	r2, [sp, #0]
 8011f40:	463a      	mov	r2, r7
 8011f42:	f000 f8fd 	bl	8012140 <__kernel_rem_pio2f>
 8011f46:	f1ba 0f00 	cmp.w	sl, #0
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	f6bf aef2 	bge.w	8011d34 <__ieee754_rem_pio2f+0x54>
 8011f50:	6823      	ldr	r3, [r4, #0]
 8011f52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f56:	6023      	str	r3, [r4, #0]
 8011f58:	6863      	ldr	r3, [r4, #4]
 8011f5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f5e:	6063      	str	r3, [r4, #4]
 8011f60:	e794      	b.n	8011e8c <__ieee754_rem_pio2f+0x1ac>
 8011f62:	2303      	movs	r3, #3
 8011f64:	e7e6      	b.n	8011f34 <__ieee754_rem_pio2f+0x254>
 8011f66:	bf00      	nop
 8011f68:	3f490fd8 	.word	0x3f490fd8
 8011f6c:	4016cbe3 	.word	0x4016cbe3
 8011f70:	3fc90f80 	.word	0x3fc90f80
 8011f74:	3fc90fd0 	.word	0x3fc90fd0
 8011f78:	37354443 	.word	0x37354443
 8011f7c:	37354400 	.word	0x37354400
 8011f80:	2e85a308 	.word	0x2e85a308
 8011f84:	43490f80 	.word	0x43490f80
 8011f88:	3f22f984 	.word	0x3f22f984
 8011f8c:	08013e10 	.word	0x08013e10
 8011f90:	2e85a300 	.word	0x2e85a300
 8011f94:	248d3132 	.word	0x248d3132
 8011f98:	08013e90 	.word	0x08013e90

08011f9c <__ieee754_sqrtf>:
 8011f9c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011fa0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	4604      	mov	r4, r0
 8011faa:	d309      	bcc.n	8011fc0 <__ieee754_sqrtf+0x24>
 8011fac:	4601      	mov	r1, r0
 8011fae:	f7ee fec9 	bl	8000d44 <__aeabi_fmul>
 8011fb2:	4601      	mov	r1, r0
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7ee fdbd 	bl	8000b34 <__addsf3>
 8011fba:	4604      	mov	r4, r0
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
 8011fc0:	2a00      	cmp	r2, #0
 8011fc2:	d0fb      	beq.n	8011fbc <__ieee754_sqrtf+0x20>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	da06      	bge.n	8011fd6 <__ieee754_sqrtf+0x3a>
 8011fc8:	4601      	mov	r1, r0
 8011fca:	f7ee fdb1 	bl	8000b30 <__aeabi_fsub>
 8011fce:	4601      	mov	r1, r0
 8011fd0:	f7ee ff6c 	bl	8000eac <__aeabi_fdiv>
 8011fd4:	e7f1      	b.n	8011fba <__ieee754_sqrtf+0x1e>
 8011fd6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8011fda:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8011fde:	d029      	beq.n	8012034 <__ieee754_sqrtf+0x98>
 8011fe0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8011fe4:	07cb      	lsls	r3, r1, #31
 8011fe6:	f04f 0300 	mov.w	r3, #0
 8011fea:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8011fee:	f04f 0419 	mov.w	r4, #25
 8011ff2:	461e      	mov	r6, r3
 8011ff4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8011ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011ffc:	bf58      	it	pl
 8011ffe:	0052      	lslpl	r2, r2, #1
 8012000:	1040      	asrs	r0, r0, #1
 8012002:	0052      	lsls	r2, r2, #1
 8012004:	1875      	adds	r5, r6, r1
 8012006:	4295      	cmp	r5, r2
 8012008:	bfde      	ittt	le
 801200a:	186e      	addle	r6, r5, r1
 801200c:	1b52      	suble	r2, r2, r5
 801200e:	185b      	addle	r3, r3, r1
 8012010:	3c01      	subs	r4, #1
 8012012:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012016:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801201a:	d1f3      	bne.n	8012004 <__ieee754_sqrtf+0x68>
 801201c:	b112      	cbz	r2, 8012024 <__ieee754_sqrtf+0x88>
 801201e:	3301      	adds	r3, #1
 8012020:	f023 0301 	bic.w	r3, r3, #1
 8012024:	105c      	asrs	r4, r3, #1
 8012026:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 801202a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 801202e:	e7c5      	b.n	8011fbc <__ieee754_sqrtf+0x20>
 8012030:	005b      	lsls	r3, r3, #1
 8012032:	3201      	adds	r2, #1
 8012034:	0218      	lsls	r0, r3, #8
 8012036:	d5fb      	bpl.n	8012030 <__ieee754_sqrtf+0x94>
 8012038:	3a01      	subs	r2, #1
 801203a:	1a89      	subs	r1, r1, r2
 801203c:	e7d0      	b.n	8011fe0 <__ieee754_sqrtf+0x44>
	...

08012040 <__kernel_cosf>:
 8012040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012044:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8012048:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801204c:	4606      	mov	r6, r0
 801204e:	4688      	mov	r8, r1
 8012050:	da03      	bge.n	801205a <__kernel_cosf+0x1a>
 8012052:	f7ef f853 	bl	80010fc <__aeabi_f2iz>
 8012056:	2800      	cmp	r0, #0
 8012058:	d05c      	beq.n	8012114 <__kernel_cosf+0xd4>
 801205a:	4631      	mov	r1, r6
 801205c:	4630      	mov	r0, r6
 801205e:	f7ee fe71 	bl	8000d44 <__aeabi_fmul>
 8012062:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012066:	4605      	mov	r5, r0
 8012068:	f7ee fe6c 	bl	8000d44 <__aeabi_fmul>
 801206c:	492b      	ldr	r1, [pc, #172]	; (801211c <__kernel_cosf+0xdc>)
 801206e:	4607      	mov	r7, r0
 8012070:	4628      	mov	r0, r5
 8012072:	f7ee fe67 	bl	8000d44 <__aeabi_fmul>
 8012076:	492a      	ldr	r1, [pc, #168]	; (8012120 <__kernel_cosf+0xe0>)
 8012078:	f7ee fd5c 	bl	8000b34 <__addsf3>
 801207c:	4629      	mov	r1, r5
 801207e:	f7ee fe61 	bl	8000d44 <__aeabi_fmul>
 8012082:	4928      	ldr	r1, [pc, #160]	; (8012124 <__kernel_cosf+0xe4>)
 8012084:	f7ee fd54 	bl	8000b30 <__aeabi_fsub>
 8012088:	4629      	mov	r1, r5
 801208a:	f7ee fe5b 	bl	8000d44 <__aeabi_fmul>
 801208e:	4926      	ldr	r1, [pc, #152]	; (8012128 <__kernel_cosf+0xe8>)
 8012090:	f7ee fd50 	bl	8000b34 <__addsf3>
 8012094:	4629      	mov	r1, r5
 8012096:	f7ee fe55 	bl	8000d44 <__aeabi_fmul>
 801209a:	4924      	ldr	r1, [pc, #144]	; (801212c <__kernel_cosf+0xec>)
 801209c:	f7ee fd48 	bl	8000b30 <__aeabi_fsub>
 80120a0:	4629      	mov	r1, r5
 80120a2:	f7ee fe4f 	bl	8000d44 <__aeabi_fmul>
 80120a6:	4922      	ldr	r1, [pc, #136]	; (8012130 <__kernel_cosf+0xf0>)
 80120a8:	f7ee fd44 	bl	8000b34 <__addsf3>
 80120ac:	4629      	mov	r1, r5
 80120ae:	f7ee fe49 	bl	8000d44 <__aeabi_fmul>
 80120b2:	4629      	mov	r1, r5
 80120b4:	f7ee fe46 	bl	8000d44 <__aeabi_fmul>
 80120b8:	4641      	mov	r1, r8
 80120ba:	4605      	mov	r5, r0
 80120bc:	4630      	mov	r0, r6
 80120be:	f7ee fe41 	bl	8000d44 <__aeabi_fmul>
 80120c2:	4601      	mov	r1, r0
 80120c4:	4628      	mov	r0, r5
 80120c6:	f7ee fd33 	bl	8000b30 <__aeabi_fsub>
 80120ca:	4b1a      	ldr	r3, [pc, #104]	; (8012134 <__kernel_cosf+0xf4>)
 80120cc:	4605      	mov	r5, r0
 80120ce:	429c      	cmp	r4, r3
 80120d0:	dc0a      	bgt.n	80120e8 <__kernel_cosf+0xa8>
 80120d2:	4601      	mov	r1, r0
 80120d4:	4638      	mov	r0, r7
 80120d6:	f7ee fd2b 	bl	8000b30 <__aeabi_fsub>
 80120da:	4601      	mov	r1, r0
 80120dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80120e0:	f7ee fd26 	bl	8000b30 <__aeabi_fsub>
 80120e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e8:	4b13      	ldr	r3, [pc, #76]	; (8012138 <__kernel_cosf+0xf8>)
 80120ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80120ee:	429c      	cmp	r4, r3
 80120f0:	bfcc      	ite	gt
 80120f2:	4c12      	ldrgt	r4, [pc, #72]	; (801213c <__kernel_cosf+0xfc>)
 80120f4:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80120f8:	4621      	mov	r1, r4
 80120fa:	f7ee fd19 	bl	8000b30 <__aeabi_fsub>
 80120fe:	4621      	mov	r1, r4
 8012100:	4606      	mov	r6, r0
 8012102:	4638      	mov	r0, r7
 8012104:	f7ee fd14 	bl	8000b30 <__aeabi_fsub>
 8012108:	4629      	mov	r1, r5
 801210a:	f7ee fd11 	bl	8000b30 <__aeabi_fsub>
 801210e:	4601      	mov	r1, r0
 8012110:	4630      	mov	r0, r6
 8012112:	e7e5      	b.n	80120e0 <__kernel_cosf+0xa0>
 8012114:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012118:	e7e4      	b.n	80120e4 <__kernel_cosf+0xa4>
 801211a:	bf00      	nop
 801211c:	ad47d74e 	.word	0xad47d74e
 8012120:	310f74f6 	.word	0x310f74f6
 8012124:	3493f27c 	.word	0x3493f27c
 8012128:	37d00d01 	.word	0x37d00d01
 801212c:	3ab60b61 	.word	0x3ab60b61
 8012130:	3d2aaaab 	.word	0x3d2aaaab
 8012134:	3e999999 	.word	0x3e999999
 8012138:	3f480000 	.word	0x3f480000
 801213c:	3e900000 	.word	0x3e900000

08012140 <__kernel_rem_pio2f>:
 8012140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012144:	b0db      	sub	sp, #364	; 0x16c
 8012146:	9202      	str	r2, [sp, #8]
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801214c:	4bc5      	ldr	r3, [pc, #788]	; (8012464 <__kernel_rem_pio2f+0x324>)
 801214e:	9005      	str	r0, [sp, #20]
 8012150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012154:	9100      	str	r1, [sp, #0]
 8012156:	9301      	str	r3, [sp, #4]
 8012158:	9b04      	ldr	r3, [sp, #16]
 801215a:	3b01      	subs	r3, #1
 801215c:	9303      	str	r3, [sp, #12]
 801215e:	9b02      	ldr	r3, [sp, #8]
 8012160:	1d1a      	adds	r2, r3, #4
 8012162:	f2c0 809b 	blt.w	801229c <__kernel_rem_pio2f+0x15c>
 8012166:	1edc      	subs	r4, r3, #3
 8012168:	bf48      	it	mi
 801216a:	1d1c      	addmi	r4, r3, #4
 801216c:	10e4      	asrs	r4, r4, #3
 801216e:	2500      	movs	r5, #0
 8012170:	f04f 0a00 	mov.w	sl, #0
 8012174:	1c67      	adds	r7, r4, #1
 8012176:	00fb      	lsls	r3, r7, #3
 8012178:	9306      	str	r3, [sp, #24]
 801217a:	9b02      	ldr	r3, [sp, #8]
 801217c:	9a03      	ldr	r2, [sp, #12]
 801217e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8012182:	9b01      	ldr	r3, [sp, #4]
 8012184:	1aa6      	subs	r6, r4, r2
 8012186:	eb03 0802 	add.w	r8, r3, r2
 801218a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801218c:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8012190:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8012194:	4545      	cmp	r5, r8
 8012196:	f340 8083 	ble.w	80122a0 <__kernel_rem_pio2f+0x160>
 801219a:	f04f 0800 	mov.w	r8, #0
 801219e:	f04f 0b00 	mov.w	fp, #0
 80121a2:	9b04      	ldr	r3, [sp, #16]
 80121a4:	aa1e      	add	r2, sp, #120	; 0x78
 80121a6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80121aa:	ab46      	add	r3, sp, #280	; 0x118
 80121ac:	9a01      	ldr	r2, [sp, #4]
 80121ae:	4590      	cmp	r8, r2
 80121b0:	f340 809c 	ble.w	80122ec <__kernel_rem_pio2f+0x1ac>
 80121b4:	4613      	mov	r3, r2
 80121b6:	aa0a      	add	r2, sp, #40	; 0x28
 80121b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121bc:	9308      	str	r3, [sp, #32]
 80121be:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80121c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80121c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80121c8:	9307      	str	r3, [sp, #28]
 80121ca:	ad0a      	add	r5, sp, #40	; 0x28
 80121cc:	462e      	mov	r6, r5
 80121ce:	46c3      	mov	fp, r8
 80121d0:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80121d4:	ab5a      	add	r3, sp, #360	; 0x168
 80121d6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80121da:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80121de:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80121e2:	f1bb 0f00 	cmp.w	fp, #0
 80121e6:	f300 8086 	bgt.w	80122f6 <__kernel_rem_pio2f+0x1b6>
 80121ea:	4639      	mov	r1, r7
 80121ec:	4620      	mov	r0, r4
 80121ee:	f000 fc3b 	bl	8012a68 <scalbnf>
 80121f2:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80121f6:	4604      	mov	r4, r0
 80121f8:	f7ee fda4 	bl	8000d44 <__aeabi_fmul>
 80121fc:	f000 fbee 	bl	80129dc <floorf>
 8012200:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8012204:	f7ee fd9e 	bl	8000d44 <__aeabi_fmul>
 8012208:	4601      	mov	r1, r0
 801220a:	4620      	mov	r0, r4
 801220c:	f7ee fc90 	bl	8000b30 <__aeabi_fsub>
 8012210:	4604      	mov	r4, r0
 8012212:	f7ee ff73 	bl	80010fc <__aeabi_f2iz>
 8012216:	4606      	mov	r6, r0
 8012218:	f7ee fd40 	bl	8000c9c <__aeabi_i2f>
 801221c:	4601      	mov	r1, r0
 801221e:	4620      	mov	r0, r4
 8012220:	f7ee fc86 	bl	8000b30 <__aeabi_fsub>
 8012224:	2f00      	cmp	r7, #0
 8012226:	4681      	mov	r9, r0
 8012228:	f340 8084 	ble.w	8012334 <__kernel_rem_pio2f+0x1f4>
 801222c:	f108 32ff 	add.w	r2, r8, #4294967295
 8012230:	ab0a      	add	r3, sp, #40	; 0x28
 8012232:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8012236:	f1c7 0108 	rsb	r1, r7, #8
 801223a:	fa44 f301 	asr.w	r3, r4, r1
 801223e:	441e      	add	r6, r3
 8012240:	408b      	lsls	r3, r1
 8012242:	1ae4      	subs	r4, r4, r3
 8012244:	f1c7 0007 	rsb	r0, r7, #7
 8012248:	ab0a      	add	r3, sp, #40	; 0x28
 801224a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801224e:	4104      	asrs	r4, r0
 8012250:	2c00      	cmp	r4, #0
 8012252:	dd7e      	ble.n	8012352 <__kernel_rem_pio2f+0x212>
 8012254:	2200      	movs	r2, #0
 8012256:	4692      	mov	sl, r2
 8012258:	3601      	adds	r6, #1
 801225a:	4590      	cmp	r8, r2
 801225c:	f300 80b0 	bgt.w	80123c0 <__kernel_rem_pio2f+0x280>
 8012260:	2f00      	cmp	r7, #0
 8012262:	dd05      	ble.n	8012270 <__kernel_rem_pio2f+0x130>
 8012264:	2f01      	cmp	r7, #1
 8012266:	f000 80bd 	beq.w	80123e4 <__kernel_rem_pio2f+0x2a4>
 801226a:	2f02      	cmp	r7, #2
 801226c:	f000 80c5 	beq.w	80123fa <__kernel_rem_pio2f+0x2ba>
 8012270:	2c02      	cmp	r4, #2
 8012272:	d16e      	bne.n	8012352 <__kernel_rem_pio2f+0x212>
 8012274:	4649      	mov	r1, r9
 8012276:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801227a:	f7ee fc59 	bl	8000b30 <__aeabi_fsub>
 801227e:	4681      	mov	r9, r0
 8012280:	f1ba 0f00 	cmp.w	sl, #0
 8012284:	d065      	beq.n	8012352 <__kernel_rem_pio2f+0x212>
 8012286:	4639      	mov	r1, r7
 8012288:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801228c:	f000 fbec 	bl	8012a68 <scalbnf>
 8012290:	4601      	mov	r1, r0
 8012292:	4648      	mov	r0, r9
 8012294:	f7ee fc4c 	bl	8000b30 <__aeabi_fsub>
 8012298:	4681      	mov	r9, r0
 801229a:	e05a      	b.n	8012352 <__kernel_rem_pio2f+0x212>
 801229c:	2400      	movs	r4, #0
 801229e:	e766      	b.n	801216e <__kernel_rem_pio2f+0x2e>
 80122a0:	42ee      	cmn	r6, r5
 80122a2:	d407      	bmi.n	80122b4 <__kernel_rem_pio2f+0x174>
 80122a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80122a8:	f7ee fcf8 	bl	8000c9c <__aeabi_i2f>
 80122ac:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80122b0:	3501      	adds	r5, #1
 80122b2:	e76f      	b.n	8012194 <__kernel_rem_pio2f+0x54>
 80122b4:	4650      	mov	r0, sl
 80122b6:	e7f9      	b.n	80122ac <__kernel_rem_pio2f+0x16c>
 80122b8:	9b05      	ldr	r3, [sp, #20]
 80122ba:	f8da 1000 	ldr.w	r1, [sl]
 80122be:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80122c2:	f7ee fd3f 	bl	8000d44 <__aeabi_fmul>
 80122c6:	4601      	mov	r1, r0
 80122c8:	4630      	mov	r0, r6
 80122ca:	f7ee fc33 	bl	8000b34 <__addsf3>
 80122ce:	4606      	mov	r6, r0
 80122d0:	f109 0901 	add.w	r9, r9, #1
 80122d4:	ab46      	add	r3, sp, #280	; 0x118
 80122d6:	9a03      	ldr	r2, [sp, #12]
 80122d8:	f1aa 0a04 	sub.w	sl, sl, #4
 80122dc:	4591      	cmp	r9, r2
 80122de:	ddeb      	ble.n	80122b8 <__kernel_rem_pio2f+0x178>
 80122e0:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80122e4:	3504      	adds	r5, #4
 80122e6:	f108 0801 	add.w	r8, r8, #1
 80122ea:	e75f      	b.n	80121ac <__kernel_rem_pio2f+0x6c>
 80122ec:	46aa      	mov	sl, r5
 80122ee:	465e      	mov	r6, fp
 80122f0:	f04f 0900 	mov.w	r9, #0
 80122f4:	e7ef      	b.n	80122d6 <__kernel_rem_pio2f+0x196>
 80122f6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80122fa:	4620      	mov	r0, r4
 80122fc:	f7ee fd22 	bl	8000d44 <__aeabi_fmul>
 8012300:	f7ee fefc 	bl	80010fc <__aeabi_f2iz>
 8012304:	f7ee fcca 	bl	8000c9c <__aeabi_i2f>
 8012308:	4649      	mov	r1, r9
 801230a:	9009      	str	r0, [sp, #36]	; 0x24
 801230c:	f7ee fd1a 	bl	8000d44 <__aeabi_fmul>
 8012310:	4601      	mov	r1, r0
 8012312:	4620      	mov	r0, r4
 8012314:	f7ee fc0c 	bl	8000b30 <__aeabi_fsub>
 8012318:	f7ee fef0 	bl	80010fc <__aeabi_f2iz>
 801231c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012322:	f846 0b04 	str.w	r0, [r6], #4
 8012326:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 801232a:	4618      	mov	r0, r3
 801232c:	f7ee fc02 	bl	8000b34 <__addsf3>
 8012330:	4604      	mov	r4, r0
 8012332:	e756      	b.n	80121e2 <__kernel_rem_pio2f+0xa2>
 8012334:	d106      	bne.n	8012344 <__kernel_rem_pio2f+0x204>
 8012336:	f108 33ff 	add.w	r3, r8, #4294967295
 801233a:	aa0a      	add	r2, sp, #40	; 0x28
 801233c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012340:	1224      	asrs	r4, r4, #8
 8012342:	e785      	b.n	8012250 <__kernel_rem_pio2f+0x110>
 8012344:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012348:	f7ee feae 	bl	80010a8 <__aeabi_fcmpge>
 801234c:	4604      	mov	r4, r0
 801234e:	2800      	cmp	r0, #0
 8012350:	d134      	bne.n	80123bc <__kernel_rem_pio2f+0x27c>
 8012352:	2100      	movs	r1, #0
 8012354:	4648      	mov	r0, r9
 8012356:	f7ee fe89 	bl	800106c <__aeabi_fcmpeq>
 801235a:	2800      	cmp	r0, #0
 801235c:	f000 809a 	beq.w	8012494 <__kernel_rem_pio2f+0x354>
 8012360:	f108 35ff 	add.w	r5, r8, #4294967295
 8012364:	462b      	mov	r3, r5
 8012366:	2200      	movs	r2, #0
 8012368:	9901      	ldr	r1, [sp, #4]
 801236a:	428b      	cmp	r3, r1
 801236c:	da4d      	bge.n	801240a <__kernel_rem_pio2f+0x2ca>
 801236e:	2a00      	cmp	r2, #0
 8012370:	d07c      	beq.n	801246c <__kernel_rem_pio2f+0x32c>
 8012372:	ab0a      	add	r3, sp, #40	; 0x28
 8012374:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012378:	3f08      	subs	r7, #8
 801237a:	2b00      	cmp	r3, #0
 801237c:	f000 8088 	beq.w	8012490 <__kernel_rem_pio2f+0x350>
 8012380:	4639      	mov	r1, r7
 8012382:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012386:	f000 fb6f 	bl	8012a68 <scalbnf>
 801238a:	46aa      	mov	sl, r5
 801238c:	4681      	mov	r9, r0
 801238e:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8012392:	af46      	add	r7, sp, #280	; 0x118
 8012394:	f1ba 0f00 	cmp.w	sl, #0
 8012398:	f280 80b1 	bge.w	80124fe <__kernel_rem_pio2f+0x3be>
 801239c:	46a9      	mov	r9, r5
 801239e:	f04f 0a00 	mov.w	sl, #0
 80123a2:	2200      	movs	r2, #0
 80123a4:	f1b9 0f00 	cmp.w	r9, #0
 80123a8:	f2c0 80db 	blt.w	8012562 <__kernel_rem_pio2f+0x422>
 80123ac:	a946      	add	r1, sp, #280	; 0x118
 80123ae:	4617      	mov	r7, r2
 80123b0:	f04f 0800 	mov.w	r8, #0
 80123b4:	4b2c      	ldr	r3, [pc, #176]	; (8012468 <__kernel_rem_pio2f+0x328>)
 80123b6:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 80123ba:	e0c3      	b.n	8012544 <__kernel_rem_pio2f+0x404>
 80123bc:	2402      	movs	r4, #2
 80123be:	e749      	b.n	8012254 <__kernel_rem_pio2f+0x114>
 80123c0:	682b      	ldr	r3, [r5, #0]
 80123c2:	f1ba 0f00 	cmp.w	sl, #0
 80123c6:	d108      	bne.n	80123da <__kernel_rem_pio2f+0x29a>
 80123c8:	b11b      	cbz	r3, 80123d2 <__kernel_rem_pio2f+0x292>
 80123ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80123ce:	602b      	str	r3, [r5, #0]
 80123d0:	2301      	movs	r3, #1
 80123d2:	469a      	mov	sl, r3
 80123d4:	3201      	adds	r2, #1
 80123d6:	3504      	adds	r5, #4
 80123d8:	e73f      	b.n	801225a <__kernel_rem_pio2f+0x11a>
 80123da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80123de:	602b      	str	r3, [r5, #0]
 80123e0:	4653      	mov	r3, sl
 80123e2:	e7f6      	b.n	80123d2 <__kernel_rem_pio2f+0x292>
 80123e4:	f108 32ff 	add.w	r2, r8, #4294967295
 80123e8:	ab0a      	add	r3, sp, #40	; 0x28
 80123ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123f2:	a90a      	add	r1, sp, #40	; 0x28
 80123f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80123f8:	e73a      	b.n	8012270 <__kernel_rem_pio2f+0x130>
 80123fa:	f108 32ff 	add.w	r2, r8, #4294967295
 80123fe:	ab0a      	add	r3, sp, #40	; 0x28
 8012400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012408:	e7f3      	b.n	80123f2 <__kernel_rem_pio2f+0x2b2>
 801240a:	a90a      	add	r1, sp, #40	; 0x28
 801240c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012410:	3b01      	subs	r3, #1
 8012412:	430a      	orrs	r2, r1
 8012414:	e7a8      	b.n	8012368 <__kernel_rem_pio2f+0x228>
 8012416:	3301      	adds	r3, #1
 8012418:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801241c:	2900      	cmp	r1, #0
 801241e:	d0fa      	beq.n	8012416 <__kernel_rem_pio2f+0x2d6>
 8012420:	9a04      	ldr	r2, [sp, #16]
 8012422:	f108 0501 	add.w	r5, r8, #1
 8012426:	eb08 0402 	add.w	r4, r8, r2
 801242a:	aa1e      	add	r2, sp, #120	; 0x78
 801242c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012430:	4498      	add	r8, r3
 8012432:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8012436:	45a8      	cmp	r8, r5
 8012438:	f6ff aec7 	blt.w	80121ca <__kernel_rem_pio2f+0x8a>
 801243c:	9b07      	ldr	r3, [sp, #28]
 801243e:	46a3      	mov	fp, r4
 8012440:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012444:	f7ee fc2a 	bl	8000c9c <__aeabi_i2f>
 8012448:	f04f 0a00 	mov.w	sl, #0
 801244c:	2600      	movs	r6, #0
 801244e:	f84b 0b04 	str.w	r0, [fp], #4
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	459a      	cmp	sl, r3
 8012456:	dd0c      	ble.n	8012472 <__kernel_rem_pio2f+0x332>
 8012458:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 801245c:	465c      	mov	r4, fp
 801245e:	3501      	adds	r5, #1
 8012460:	e7e9      	b.n	8012436 <__kernel_rem_pio2f+0x2f6>
 8012462:	bf00      	nop
 8012464:	080141d4 	.word	0x080141d4
 8012468:	080141a8 	.word	0x080141a8
 801246c:	2301      	movs	r3, #1
 801246e:	9a08      	ldr	r2, [sp, #32]
 8012470:	e7d2      	b.n	8012418 <__kernel_rem_pio2f+0x2d8>
 8012472:	9b05      	ldr	r3, [sp, #20]
 8012474:	f854 0904 	ldr.w	r0, [r4], #-4
 8012478:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 801247c:	f7ee fc62 	bl	8000d44 <__aeabi_fmul>
 8012480:	4601      	mov	r1, r0
 8012482:	4630      	mov	r0, r6
 8012484:	f7ee fb56 	bl	8000b34 <__addsf3>
 8012488:	f10a 0a01 	add.w	sl, sl, #1
 801248c:	4606      	mov	r6, r0
 801248e:	e7e0      	b.n	8012452 <__kernel_rem_pio2f+0x312>
 8012490:	3d01      	subs	r5, #1
 8012492:	e76e      	b.n	8012372 <__kernel_rem_pio2f+0x232>
 8012494:	9b06      	ldr	r3, [sp, #24]
 8012496:	9a02      	ldr	r2, [sp, #8]
 8012498:	4648      	mov	r0, r9
 801249a:	1a99      	subs	r1, r3, r2
 801249c:	f000 fae4 	bl	8012a68 <scalbnf>
 80124a0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80124a4:	4605      	mov	r5, r0
 80124a6:	f7ee fdff 	bl	80010a8 <__aeabi_fcmpge>
 80124aa:	b300      	cbz	r0, 80124ee <__kernel_rem_pio2f+0x3ae>
 80124ac:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7ee fc47 	bl	8000d44 <__aeabi_fmul>
 80124b6:	f7ee fe21 	bl	80010fc <__aeabi_f2iz>
 80124ba:	f7ee fbef 	bl	8000c9c <__aeabi_i2f>
 80124be:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80124c2:	4681      	mov	r9, r0
 80124c4:	f7ee fc3e 	bl	8000d44 <__aeabi_fmul>
 80124c8:	4601      	mov	r1, r0
 80124ca:	4628      	mov	r0, r5
 80124cc:	f7ee fb30 	bl	8000b30 <__aeabi_fsub>
 80124d0:	f7ee fe14 	bl	80010fc <__aeabi_f2iz>
 80124d4:	ab0a      	add	r3, sp, #40	; 0x28
 80124d6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80124da:	4648      	mov	r0, r9
 80124dc:	f7ee fe0e 	bl	80010fc <__aeabi_f2iz>
 80124e0:	f108 0501 	add.w	r5, r8, #1
 80124e4:	ab0a      	add	r3, sp, #40	; 0x28
 80124e6:	3708      	adds	r7, #8
 80124e8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80124ec:	e748      	b.n	8012380 <__kernel_rem_pio2f+0x240>
 80124ee:	4628      	mov	r0, r5
 80124f0:	f7ee fe04 	bl	80010fc <__aeabi_f2iz>
 80124f4:	ab0a      	add	r3, sp, #40	; 0x28
 80124f6:	4645      	mov	r5, r8
 80124f8:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80124fc:	e740      	b.n	8012380 <__kernel_rem_pio2f+0x240>
 80124fe:	ab0a      	add	r3, sp, #40	; 0x28
 8012500:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012504:	f7ee fbca 	bl	8000c9c <__aeabi_i2f>
 8012508:	4649      	mov	r1, r9
 801250a:	f7ee fc1b 	bl	8000d44 <__aeabi_fmul>
 801250e:	4641      	mov	r1, r8
 8012510:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8012514:	4648      	mov	r0, r9
 8012516:	f7ee fc15 	bl	8000d44 <__aeabi_fmul>
 801251a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801251e:	4681      	mov	r9, r0
 8012520:	e738      	b.n	8012394 <__kernel_rem_pio2f+0x254>
 8012522:	f853 0b04 	ldr.w	r0, [r3], #4
 8012526:	f85b 1b04 	ldr.w	r1, [fp], #4
 801252a:	9203      	str	r2, [sp, #12]
 801252c:	9302      	str	r3, [sp, #8]
 801252e:	f7ee fc09 	bl	8000d44 <__aeabi_fmul>
 8012532:	4601      	mov	r1, r0
 8012534:	4638      	mov	r0, r7
 8012536:	f7ee fafd 	bl	8000b34 <__addsf3>
 801253a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801253e:	4607      	mov	r7, r0
 8012540:	f108 0801 	add.w	r8, r8, #1
 8012544:	9901      	ldr	r1, [sp, #4]
 8012546:	4588      	cmp	r8, r1
 8012548:	dc01      	bgt.n	801254e <__kernel_rem_pio2f+0x40e>
 801254a:	45c2      	cmp	sl, r8
 801254c:	dae9      	bge.n	8012522 <__kernel_rem_pio2f+0x3e2>
 801254e:	ab5a      	add	r3, sp, #360	; 0x168
 8012550:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012554:	f843 7ca0 	str.w	r7, [r3, #-160]
 8012558:	f109 39ff 	add.w	r9, r9, #4294967295
 801255c:	f10a 0a01 	add.w	sl, sl, #1
 8012560:	e720      	b.n	80123a4 <__kernel_rem_pio2f+0x264>
 8012562:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012564:	2b02      	cmp	r3, #2
 8012566:	dc07      	bgt.n	8012578 <__kernel_rem_pio2f+0x438>
 8012568:	2b00      	cmp	r3, #0
 801256a:	dc4d      	bgt.n	8012608 <__kernel_rem_pio2f+0x4c8>
 801256c:	d02e      	beq.n	80125cc <__kernel_rem_pio2f+0x48c>
 801256e:	f006 0007 	and.w	r0, r6, #7
 8012572:	b05b      	add	sp, #364	; 0x16c
 8012574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012578:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801257a:	2b03      	cmp	r3, #3
 801257c:	d1f7      	bne.n	801256e <__kernel_rem_pio2f+0x42e>
 801257e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8012582:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8012586:	46b8      	mov	r8, r7
 8012588:	46aa      	mov	sl, r5
 801258a:	f1ba 0f00 	cmp.w	sl, #0
 801258e:	dc48      	bgt.n	8012622 <__kernel_rem_pio2f+0x4e2>
 8012590:	46a9      	mov	r9, r5
 8012592:	f1b9 0f01 	cmp.w	r9, #1
 8012596:	dc5f      	bgt.n	8012658 <__kernel_rem_pio2f+0x518>
 8012598:	2000      	movs	r0, #0
 801259a:	2d01      	cmp	r5, #1
 801259c:	dc75      	bgt.n	801268a <__kernel_rem_pio2f+0x54a>
 801259e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80125a0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80125a2:	2c00      	cmp	r4, #0
 80125a4:	d177      	bne.n	8012696 <__kernel_rem_pio2f+0x556>
 80125a6:	9900      	ldr	r1, [sp, #0]
 80125a8:	600a      	str	r2, [r1, #0]
 80125aa:	460a      	mov	r2, r1
 80125ac:	604b      	str	r3, [r1, #4]
 80125ae:	6090      	str	r0, [r2, #8]
 80125b0:	e7dd      	b.n	801256e <__kernel_rem_pio2f+0x42e>
 80125b2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80125b6:	f7ee fabd 	bl	8000b34 <__addsf3>
 80125ba:	3d01      	subs	r5, #1
 80125bc:	2d00      	cmp	r5, #0
 80125be:	daf8      	bge.n	80125b2 <__kernel_rem_pio2f+0x472>
 80125c0:	b10c      	cbz	r4, 80125c6 <__kernel_rem_pio2f+0x486>
 80125c2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80125c6:	9b00      	ldr	r3, [sp, #0]
 80125c8:	6018      	str	r0, [r3, #0]
 80125ca:	e7d0      	b.n	801256e <__kernel_rem_pio2f+0x42e>
 80125cc:	2000      	movs	r0, #0
 80125ce:	af32      	add	r7, sp, #200	; 0xc8
 80125d0:	e7f4      	b.n	80125bc <__kernel_rem_pio2f+0x47c>
 80125d2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80125d6:	f7ee faad 	bl	8000b34 <__addsf3>
 80125da:	3f01      	subs	r7, #1
 80125dc:	2f00      	cmp	r7, #0
 80125de:	daf8      	bge.n	80125d2 <__kernel_rem_pio2f+0x492>
 80125e0:	b1bc      	cbz	r4, 8012612 <__kernel_rem_pio2f+0x4d2>
 80125e2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80125e6:	9a00      	ldr	r2, [sp, #0]
 80125e8:	4601      	mov	r1, r0
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80125ee:	f7ee fa9f 	bl	8000b30 <__aeabi_fsub>
 80125f2:	2701      	movs	r7, #1
 80125f4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80125f8:	42bd      	cmp	r5, r7
 80125fa:	da0c      	bge.n	8012616 <__kernel_rem_pio2f+0x4d6>
 80125fc:	b10c      	cbz	r4, 8012602 <__kernel_rem_pio2f+0x4c2>
 80125fe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012602:	9b00      	ldr	r3, [sp, #0]
 8012604:	6058      	str	r0, [r3, #4]
 8012606:	e7b2      	b.n	801256e <__kernel_rem_pio2f+0x42e>
 8012608:	462f      	mov	r7, r5
 801260a:	2000      	movs	r0, #0
 801260c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012610:	e7e4      	b.n	80125dc <__kernel_rem_pio2f+0x49c>
 8012612:	4603      	mov	r3, r0
 8012614:	e7e7      	b.n	80125e6 <__kernel_rem_pio2f+0x4a6>
 8012616:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 801261a:	f7ee fa8b 	bl	8000b34 <__addsf3>
 801261e:	3701      	adds	r7, #1
 8012620:	e7ea      	b.n	80125f8 <__kernel_rem_pio2f+0x4b8>
 8012622:	f8d8 3000 	ldr.w	r3, [r8]
 8012626:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801262a:	4619      	mov	r1, r3
 801262c:	4610      	mov	r0, r2
 801262e:	9302      	str	r3, [sp, #8]
 8012630:	9201      	str	r2, [sp, #4]
 8012632:	f7ee fa7f 	bl	8000b34 <__addsf3>
 8012636:	9a01      	ldr	r2, [sp, #4]
 8012638:	4601      	mov	r1, r0
 801263a:	4681      	mov	r9, r0
 801263c:	4610      	mov	r0, r2
 801263e:	f7ee fa77 	bl	8000b30 <__aeabi_fsub>
 8012642:	9b02      	ldr	r3, [sp, #8]
 8012644:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012648:	4619      	mov	r1, r3
 801264a:	f7ee fa73 	bl	8000b34 <__addsf3>
 801264e:	f848 0904 	str.w	r0, [r8], #-4
 8012652:	f8c8 9000 	str.w	r9, [r8]
 8012656:	e798      	b.n	801258a <__kernel_rem_pio2f+0x44a>
 8012658:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801265c:	f8d7 a000 	ldr.w	sl, [r7]
 8012660:	4618      	mov	r0, r3
 8012662:	4651      	mov	r1, sl
 8012664:	9301      	str	r3, [sp, #4]
 8012666:	f7ee fa65 	bl	8000b34 <__addsf3>
 801266a:	9b01      	ldr	r3, [sp, #4]
 801266c:	4601      	mov	r1, r0
 801266e:	4680      	mov	r8, r0
 8012670:	4618      	mov	r0, r3
 8012672:	f7ee fa5d 	bl	8000b30 <__aeabi_fsub>
 8012676:	4651      	mov	r1, sl
 8012678:	f7ee fa5c 	bl	8000b34 <__addsf3>
 801267c:	f847 0904 	str.w	r0, [r7], #-4
 8012680:	f109 39ff 	add.w	r9, r9, #4294967295
 8012684:	f8c7 8000 	str.w	r8, [r7]
 8012688:	e783      	b.n	8012592 <__kernel_rem_pio2f+0x452>
 801268a:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 801268e:	f7ee fa51 	bl	8000b34 <__addsf3>
 8012692:	3d01      	subs	r5, #1
 8012694:	e781      	b.n	801259a <__kernel_rem_pio2f+0x45a>
 8012696:	9900      	ldr	r1, [sp, #0]
 8012698:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801269c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126a0:	600a      	str	r2, [r1, #0]
 80126a2:	604b      	str	r3, [r1, #4]
 80126a4:	460a      	mov	r2, r1
 80126a6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80126aa:	e780      	b.n	80125ae <__kernel_rem_pio2f+0x46e>

080126ac <__kernel_sinf>:
 80126ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80126b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80126b8:	4604      	mov	r4, r0
 80126ba:	460f      	mov	r7, r1
 80126bc:	4691      	mov	r9, r2
 80126be:	da03      	bge.n	80126c8 <__kernel_sinf+0x1c>
 80126c0:	f7ee fd1c 	bl	80010fc <__aeabi_f2iz>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d035      	beq.n	8012734 <__kernel_sinf+0x88>
 80126c8:	4621      	mov	r1, r4
 80126ca:	4620      	mov	r0, r4
 80126cc:	f7ee fb3a 	bl	8000d44 <__aeabi_fmul>
 80126d0:	4605      	mov	r5, r0
 80126d2:	4601      	mov	r1, r0
 80126d4:	4620      	mov	r0, r4
 80126d6:	f7ee fb35 	bl	8000d44 <__aeabi_fmul>
 80126da:	4929      	ldr	r1, [pc, #164]	; (8012780 <__kernel_sinf+0xd4>)
 80126dc:	4606      	mov	r6, r0
 80126de:	4628      	mov	r0, r5
 80126e0:	f7ee fb30 	bl	8000d44 <__aeabi_fmul>
 80126e4:	4927      	ldr	r1, [pc, #156]	; (8012784 <__kernel_sinf+0xd8>)
 80126e6:	f7ee fa23 	bl	8000b30 <__aeabi_fsub>
 80126ea:	4629      	mov	r1, r5
 80126ec:	f7ee fb2a 	bl	8000d44 <__aeabi_fmul>
 80126f0:	4925      	ldr	r1, [pc, #148]	; (8012788 <__kernel_sinf+0xdc>)
 80126f2:	f7ee fa1f 	bl	8000b34 <__addsf3>
 80126f6:	4629      	mov	r1, r5
 80126f8:	f7ee fb24 	bl	8000d44 <__aeabi_fmul>
 80126fc:	4923      	ldr	r1, [pc, #140]	; (801278c <__kernel_sinf+0xe0>)
 80126fe:	f7ee fa17 	bl	8000b30 <__aeabi_fsub>
 8012702:	4629      	mov	r1, r5
 8012704:	f7ee fb1e 	bl	8000d44 <__aeabi_fmul>
 8012708:	4921      	ldr	r1, [pc, #132]	; (8012790 <__kernel_sinf+0xe4>)
 801270a:	f7ee fa13 	bl	8000b34 <__addsf3>
 801270e:	4680      	mov	r8, r0
 8012710:	f1b9 0f00 	cmp.w	r9, #0
 8012714:	d111      	bne.n	801273a <__kernel_sinf+0x8e>
 8012716:	4601      	mov	r1, r0
 8012718:	4628      	mov	r0, r5
 801271a:	f7ee fb13 	bl	8000d44 <__aeabi_fmul>
 801271e:	491d      	ldr	r1, [pc, #116]	; (8012794 <__kernel_sinf+0xe8>)
 8012720:	f7ee fa06 	bl	8000b30 <__aeabi_fsub>
 8012724:	4631      	mov	r1, r6
 8012726:	f7ee fb0d 	bl	8000d44 <__aeabi_fmul>
 801272a:	4601      	mov	r1, r0
 801272c:	4620      	mov	r0, r4
 801272e:	f7ee fa01 	bl	8000b34 <__addsf3>
 8012732:	4604      	mov	r4, r0
 8012734:	4620      	mov	r0, r4
 8012736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801273a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801273e:	4638      	mov	r0, r7
 8012740:	f7ee fb00 	bl	8000d44 <__aeabi_fmul>
 8012744:	4641      	mov	r1, r8
 8012746:	4681      	mov	r9, r0
 8012748:	4630      	mov	r0, r6
 801274a:	f7ee fafb 	bl	8000d44 <__aeabi_fmul>
 801274e:	4601      	mov	r1, r0
 8012750:	4648      	mov	r0, r9
 8012752:	f7ee f9ed 	bl	8000b30 <__aeabi_fsub>
 8012756:	4629      	mov	r1, r5
 8012758:	f7ee faf4 	bl	8000d44 <__aeabi_fmul>
 801275c:	4639      	mov	r1, r7
 801275e:	f7ee f9e7 	bl	8000b30 <__aeabi_fsub>
 8012762:	490c      	ldr	r1, [pc, #48]	; (8012794 <__kernel_sinf+0xe8>)
 8012764:	4605      	mov	r5, r0
 8012766:	4630      	mov	r0, r6
 8012768:	f7ee faec 	bl	8000d44 <__aeabi_fmul>
 801276c:	4601      	mov	r1, r0
 801276e:	4628      	mov	r0, r5
 8012770:	f7ee f9e0 	bl	8000b34 <__addsf3>
 8012774:	4601      	mov	r1, r0
 8012776:	4620      	mov	r0, r4
 8012778:	f7ee f9da 	bl	8000b30 <__aeabi_fsub>
 801277c:	e7d9      	b.n	8012732 <__kernel_sinf+0x86>
 801277e:	bf00      	nop
 8012780:	2f2ec9d3 	.word	0x2f2ec9d3
 8012784:	32d72f34 	.word	0x32d72f34
 8012788:	3638ef1b 	.word	0x3638ef1b
 801278c:	39500d01 	.word	0x39500d01
 8012790:	3c088889 	.word	0x3c088889
 8012794:	3e2aaaab 	.word	0x3e2aaaab

08012798 <fabs>:
 8012798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801279c:	4770      	bx	lr

0801279e <finite>:
 801279e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80127a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80127a6:	0fc0      	lsrs	r0, r0, #31
 80127a8:	4770      	bx	lr
	...

080127ac <nan>:
 80127ac:	2000      	movs	r0, #0
 80127ae:	4901      	ldr	r1, [pc, #4]	; (80127b4 <nan+0x8>)
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	7ff80000 	.word	0x7ff80000

080127b8 <rint>:
 80127b8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80127bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127be:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80127c2:	2f13      	cmp	r7, #19
 80127c4:	4602      	mov	r2, r0
 80127c6:	460b      	mov	r3, r1
 80127c8:	460c      	mov	r4, r1
 80127ca:	4605      	mov	r5, r0
 80127cc:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80127d0:	dc59      	bgt.n	8012886 <rint+0xce>
 80127d2:	2f00      	cmp	r7, #0
 80127d4:	da2a      	bge.n	801282c <rint+0x74>
 80127d6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127da:	4301      	orrs	r1, r0
 80127dc:	d022      	beq.n	8012824 <rint+0x6c>
 80127de:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80127e2:	4301      	orrs	r1, r0
 80127e4:	424d      	negs	r5, r1
 80127e6:	430d      	orrs	r5, r1
 80127e8:	4936      	ldr	r1, [pc, #216]	; (80128c4 <rint+0x10c>)
 80127ea:	0c5c      	lsrs	r4, r3, #17
 80127ec:	0b2d      	lsrs	r5, r5, #12
 80127ee:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80127f2:	0464      	lsls	r4, r4, #17
 80127f4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80127f8:	ea45 0304 	orr.w	r3, r5, r4
 80127fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012800:	4620      	mov	r0, r4
 8012802:	4629      	mov	r1, r5
 8012804:	f7ed fcb2 	bl	800016c <__adddf3>
 8012808:	e9cd 0100 	strd	r0, r1, [sp]
 801280c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012810:	462b      	mov	r3, r5
 8012812:	4622      	mov	r2, r4
 8012814:	f7ed fca8 	bl	8000168 <__aeabi_dsub>
 8012818:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801281c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	4610      	mov	r0, r2
 8012826:	4619      	mov	r1, r3
 8012828:	b003      	add	sp, #12
 801282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801282c:	4926      	ldr	r1, [pc, #152]	; (80128c8 <rint+0x110>)
 801282e:	4139      	asrs	r1, r7
 8012830:	ea03 0001 	and.w	r0, r3, r1
 8012834:	4310      	orrs	r0, r2
 8012836:	d0f5      	beq.n	8012824 <rint+0x6c>
 8012838:	084b      	lsrs	r3, r1, #1
 801283a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 801283e:	ea52 0501 	orrs.w	r5, r2, r1
 8012842:	d00c      	beq.n	801285e <rint+0xa6>
 8012844:	ea24 0303 	bic.w	r3, r4, r3
 8012848:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 801284c:	2f13      	cmp	r7, #19
 801284e:	bf0c      	ite	eq
 8012850:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8012854:	2500      	movne	r5, #0
 8012856:	fa44 f707 	asr.w	r7, r4, r7
 801285a:	ea43 0407 	orr.w	r4, r3, r7
 801285e:	4919      	ldr	r1, [pc, #100]	; (80128c4 <rint+0x10c>)
 8012860:	4623      	mov	r3, r4
 8012862:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8012866:	462a      	mov	r2, r5
 8012868:	e9d6 4500 	ldrd	r4, r5, [r6]
 801286c:	4620      	mov	r0, r4
 801286e:	4629      	mov	r1, r5
 8012870:	f7ed fc7c 	bl	800016c <__adddf3>
 8012874:	e9cd 0100 	strd	r0, r1, [sp]
 8012878:	e9dd 0100 	ldrd	r0, r1, [sp]
 801287c:	4622      	mov	r2, r4
 801287e:	462b      	mov	r3, r5
 8012880:	f7ed fc72 	bl	8000168 <__aeabi_dsub>
 8012884:	e7cc      	b.n	8012820 <rint+0x68>
 8012886:	2f33      	cmp	r7, #51	; 0x33
 8012888:	dd05      	ble.n	8012896 <rint+0xde>
 801288a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801288e:	d1c9      	bne.n	8012824 <rint+0x6c>
 8012890:	f7ed fc6c 	bl	800016c <__adddf3>
 8012894:	e7c4      	b.n	8012820 <rint+0x68>
 8012896:	f04f 31ff 	mov.w	r1, #4294967295
 801289a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 801289e:	fa21 f10c 	lsr.w	r1, r1, ip
 80128a2:	4208      	tst	r0, r1
 80128a4:	d0be      	beq.n	8012824 <rint+0x6c>
 80128a6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80128aa:	bf18      	it	ne
 80128ac:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80128b0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80128b4:	bf1e      	ittt	ne
 80128b6:	ea20 0303 	bicne.w	r3, r0, r3
 80128ba:	fa45 fc0c 	asrne.w	ip, r5, ip
 80128be:	ea43 050c 	orrne.w	r5, r3, ip
 80128c2:	e7cc      	b.n	801285e <rint+0xa6>
 80128c4:	080141e0 	.word	0x080141e0
 80128c8:	000fffff 	.word	0x000fffff
 80128cc:	00000000 	.word	0x00000000

080128d0 <scalbn>:
 80128d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80128d6:	4604      	mov	r4, r0
 80128d8:	460d      	mov	r5, r1
 80128da:	4617      	mov	r7, r2
 80128dc:	460b      	mov	r3, r1
 80128de:	b996      	cbnz	r6, 8012906 <scalbn+0x36>
 80128e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128e4:	4303      	orrs	r3, r0
 80128e6:	d039      	beq.n	801295c <scalbn+0x8c>
 80128e8:	4b35      	ldr	r3, [pc, #212]	; (80129c0 <scalbn+0xf0>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	f7ed fdf4 	bl	80004d8 <__aeabi_dmul>
 80128f0:	4b34      	ldr	r3, [pc, #208]	; (80129c4 <scalbn+0xf4>)
 80128f2:	4604      	mov	r4, r0
 80128f4:	429f      	cmp	r7, r3
 80128f6:	460d      	mov	r5, r1
 80128f8:	da0f      	bge.n	801291a <scalbn+0x4a>
 80128fa:	a32d      	add	r3, pc, #180	; (adr r3, 80129b0 <scalbn+0xe0>)
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	f7ed fdea 	bl	80004d8 <__aeabi_dmul>
 8012904:	e006      	b.n	8012914 <scalbn+0x44>
 8012906:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801290a:	4296      	cmp	r6, r2
 801290c:	d10a      	bne.n	8012924 <scalbn+0x54>
 801290e:	4602      	mov	r2, r0
 8012910:	f7ed fc2c 	bl	800016c <__adddf3>
 8012914:	4604      	mov	r4, r0
 8012916:	460d      	mov	r5, r1
 8012918:	e020      	b.n	801295c <scalbn+0x8c>
 801291a:	460b      	mov	r3, r1
 801291c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012920:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8012924:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012928:	19b9      	adds	r1, r7, r6
 801292a:	4291      	cmp	r1, r2
 801292c:	dd0e      	ble.n	801294c <scalbn+0x7c>
 801292e:	a322      	add	r3, pc, #136	; (adr r3, 80129b8 <scalbn+0xe8>)
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012938:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801293c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012940:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012944:	4820      	ldr	r0, [pc, #128]	; (80129c8 <scalbn+0xf8>)
 8012946:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801294a:	e7d9      	b.n	8012900 <scalbn+0x30>
 801294c:	2900      	cmp	r1, #0
 801294e:	dd08      	ble.n	8012962 <scalbn+0x92>
 8012950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012958:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012962:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8012966:	da16      	bge.n	8012996 <scalbn+0xc6>
 8012968:	f24c 3350 	movw	r3, #50000	; 0xc350
 801296c:	429f      	cmp	r7, r3
 801296e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8012972:	dd08      	ble.n	8012986 <scalbn+0xb6>
 8012974:	4c15      	ldr	r4, [pc, #84]	; (80129cc <scalbn+0xfc>)
 8012976:	4814      	ldr	r0, [pc, #80]	; (80129c8 <scalbn+0xf8>)
 8012978:	f363 74df 	bfi	r4, r3, #31, #1
 801297c:	a30e      	add	r3, pc, #56	; (adr r3, 80129b8 <scalbn+0xe8>)
 801297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012982:	4621      	mov	r1, r4
 8012984:	e7bc      	b.n	8012900 <scalbn+0x30>
 8012986:	4c12      	ldr	r4, [pc, #72]	; (80129d0 <scalbn+0x100>)
 8012988:	4812      	ldr	r0, [pc, #72]	; (80129d4 <scalbn+0x104>)
 801298a:	f363 74df 	bfi	r4, r3, #31, #1
 801298e:	a308      	add	r3, pc, #32	; (adr r3, 80129b0 <scalbn+0xe0>)
 8012990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012994:	e7f5      	b.n	8012982 <scalbn+0xb2>
 8012996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801299a:	3136      	adds	r1, #54	; 0x36
 801299c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80129a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80129a4:	4620      	mov	r0, r4
 80129a6:	4629      	mov	r1, r5
 80129a8:	2200      	movs	r2, #0
 80129aa:	4b0b      	ldr	r3, [pc, #44]	; (80129d8 <scalbn+0x108>)
 80129ac:	e7a8      	b.n	8012900 <scalbn+0x30>
 80129ae:	bf00      	nop
 80129b0:	c2f8f359 	.word	0xc2f8f359
 80129b4:	01a56e1f 	.word	0x01a56e1f
 80129b8:	8800759c 	.word	0x8800759c
 80129bc:	7e37e43c 	.word	0x7e37e43c
 80129c0:	43500000 	.word	0x43500000
 80129c4:	ffff3cb0 	.word	0xffff3cb0
 80129c8:	8800759c 	.word	0x8800759c
 80129cc:	7e37e43c 	.word	0x7e37e43c
 80129d0:	01a56e1f 	.word	0x01a56e1f
 80129d4:	c2f8f359 	.word	0xc2f8f359
 80129d8:	3c900000 	.word	0x3c900000

080129dc <floorf>:
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80129e2:	3d7f      	subs	r5, #127	; 0x7f
 80129e4:	2d16      	cmp	r5, #22
 80129e6:	4601      	mov	r1, r0
 80129e8:	4604      	mov	r4, r0
 80129ea:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80129ee:	dc26      	bgt.n	8012a3e <floorf+0x62>
 80129f0:	2d00      	cmp	r5, #0
 80129f2:	da0e      	bge.n	8012a12 <floorf+0x36>
 80129f4:	4917      	ldr	r1, [pc, #92]	; (8012a54 <floorf+0x78>)
 80129f6:	f7ee f89d 	bl	8000b34 <__addsf3>
 80129fa:	2100      	movs	r1, #0
 80129fc:	f7ee fb5e 	bl	80010bc <__aeabi_fcmpgt>
 8012a00:	b128      	cbz	r0, 8012a0e <floorf+0x32>
 8012a02:	2c00      	cmp	r4, #0
 8012a04:	da23      	bge.n	8012a4e <floorf+0x72>
 8012a06:	4b14      	ldr	r3, [pc, #80]	; (8012a58 <floorf+0x7c>)
 8012a08:	2e00      	cmp	r6, #0
 8012a0a:	bf18      	it	ne
 8012a0c:	461c      	movne	r4, r3
 8012a0e:	4621      	mov	r1, r4
 8012a10:	e01b      	b.n	8012a4a <floorf+0x6e>
 8012a12:	4e12      	ldr	r6, [pc, #72]	; (8012a5c <floorf+0x80>)
 8012a14:	412e      	asrs	r6, r5
 8012a16:	4230      	tst	r0, r6
 8012a18:	d017      	beq.n	8012a4a <floorf+0x6e>
 8012a1a:	490e      	ldr	r1, [pc, #56]	; (8012a54 <floorf+0x78>)
 8012a1c:	f7ee f88a 	bl	8000b34 <__addsf3>
 8012a20:	2100      	movs	r1, #0
 8012a22:	f7ee fb4b 	bl	80010bc <__aeabi_fcmpgt>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d0f1      	beq.n	8012a0e <floorf+0x32>
 8012a2a:	2c00      	cmp	r4, #0
 8012a2c:	bfbe      	ittt	lt
 8012a2e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8012a32:	fa43 f505 	asrlt.w	r5, r3, r5
 8012a36:	1964      	addlt	r4, r4, r5
 8012a38:	ea24 0406 	bic.w	r4, r4, r6
 8012a3c:	e7e7      	b.n	8012a0e <floorf+0x32>
 8012a3e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8012a42:	d302      	bcc.n	8012a4a <floorf+0x6e>
 8012a44:	f7ee f876 	bl	8000b34 <__addsf3>
 8012a48:	4601      	mov	r1, r0
 8012a4a:	4608      	mov	r0, r1
 8012a4c:	bd70      	pop	{r4, r5, r6, pc}
 8012a4e:	2400      	movs	r4, #0
 8012a50:	e7dd      	b.n	8012a0e <floorf+0x32>
 8012a52:	bf00      	nop
 8012a54:	7149f2ca 	.word	0x7149f2ca
 8012a58:	bf800000 	.word	0xbf800000
 8012a5c:	007fffff 	.word	0x007fffff

08012a60 <nanf>:
 8012a60:	4800      	ldr	r0, [pc, #0]	; (8012a64 <nanf+0x4>)
 8012a62:	4770      	bx	lr
 8012a64:	7fc00000 	.word	0x7fc00000

08012a68 <scalbnf>:
 8012a68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4603      	mov	r3, r0
 8012a70:	460d      	mov	r5, r1
 8012a72:	4604      	mov	r4, r0
 8012a74:	d02a      	beq.n	8012acc <scalbnf+0x64>
 8012a76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012a7a:	d304      	bcc.n	8012a86 <scalbnf+0x1e>
 8012a7c:	4601      	mov	r1, r0
 8012a7e:	f7ee f859 	bl	8000b34 <__addsf3>
 8012a82:	4603      	mov	r3, r0
 8012a84:	e022      	b.n	8012acc <scalbnf+0x64>
 8012a86:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8012a8a:	d117      	bne.n	8012abc <scalbnf+0x54>
 8012a8c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8012a90:	f7ee f958 	bl	8000d44 <__aeabi_fmul>
 8012a94:	4a17      	ldr	r2, [pc, #92]	; (8012af4 <scalbnf+0x8c>)
 8012a96:	4603      	mov	r3, r0
 8012a98:	4295      	cmp	r5, r2
 8012a9a:	db0b      	blt.n	8012ab4 <scalbnf+0x4c>
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012aa2:	3a19      	subs	r2, #25
 8012aa4:	442a      	add	r2, r5
 8012aa6:	2afe      	cmp	r2, #254	; 0xfe
 8012aa8:	dd0a      	ble.n	8012ac0 <scalbnf+0x58>
 8012aaa:	4913      	ldr	r1, [pc, #76]	; (8012af8 <scalbnf+0x90>)
 8012aac:	4618      	mov	r0, r3
 8012aae:	f361 001e 	bfi	r0, r1, #0, #31
 8012ab2:	e000      	b.n	8012ab6 <scalbnf+0x4e>
 8012ab4:	4911      	ldr	r1, [pc, #68]	; (8012afc <scalbnf+0x94>)
 8012ab6:	f7ee f945 	bl	8000d44 <__aeabi_fmul>
 8012aba:	e7e2      	b.n	8012a82 <scalbnf+0x1a>
 8012abc:	0dd2      	lsrs	r2, r2, #23
 8012abe:	e7f1      	b.n	8012aa4 <scalbnf+0x3c>
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	dd05      	ble.n	8012ad0 <scalbnf+0x68>
 8012ac4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8012ac8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8012acc:	4618      	mov	r0, r3
 8012ace:	bd38      	pop	{r3, r4, r5, pc}
 8012ad0:	f112 0f16 	cmn.w	r2, #22
 8012ad4:	da05      	bge.n	8012ae2 <scalbnf+0x7a>
 8012ad6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012ada:	4295      	cmp	r5, r2
 8012adc:	dce5      	bgt.n	8012aaa <scalbnf+0x42>
 8012ade:	4907      	ldr	r1, [pc, #28]	; (8012afc <scalbnf+0x94>)
 8012ae0:	e7e4      	b.n	8012aac <scalbnf+0x44>
 8012ae2:	3219      	adds	r2, #25
 8012ae4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8012ae8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8012aec:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8012af0:	e7e1      	b.n	8012ab6 <scalbnf+0x4e>
 8012af2:	bf00      	nop
 8012af4:	ffff3cb0 	.word	0xffff3cb0
 8012af8:	7149f2ca 	.word	0x7149f2ca
 8012afc:	0da24260 	.word	0x0da24260

08012b00 <atoi>:
 8012b00:	220a      	movs	r2, #10
 8012b02:	2100      	movs	r1, #0
 8012b04:	f000 b92a 	b.w	8012d5c <strtol>

08012b08 <__errno>:
 8012b08:	4b01      	ldr	r3, [pc, #4]	; (8012b10 <__errno+0x8>)
 8012b0a:	6818      	ldr	r0, [r3, #0]
 8012b0c:	4770      	bx	lr
 8012b0e:	bf00      	nop
 8012b10:	20000010 	.word	0x20000010

08012b14 <__libc_init_array>:
 8012b14:	b570      	push	{r4, r5, r6, lr}
 8012b16:	2600      	movs	r6, #0
 8012b18:	4d0c      	ldr	r5, [pc, #48]	; (8012b4c <__libc_init_array+0x38>)
 8012b1a:	4c0d      	ldr	r4, [pc, #52]	; (8012b50 <__libc_init_array+0x3c>)
 8012b1c:	1b64      	subs	r4, r4, r5
 8012b1e:	10a4      	asrs	r4, r4, #2
 8012b20:	42a6      	cmp	r6, r4
 8012b22:	d109      	bne.n	8012b38 <__libc_init_array+0x24>
 8012b24:	f001 f8f0 	bl	8013d08 <_init>
 8012b28:	2600      	movs	r6, #0
 8012b2a:	4d0a      	ldr	r5, [pc, #40]	; (8012b54 <__libc_init_array+0x40>)
 8012b2c:	4c0a      	ldr	r4, [pc, #40]	; (8012b58 <__libc_init_array+0x44>)
 8012b2e:	1b64      	subs	r4, r4, r5
 8012b30:	10a4      	asrs	r4, r4, #2
 8012b32:	42a6      	cmp	r6, r4
 8012b34:	d105      	bne.n	8012b42 <__libc_init_array+0x2e>
 8012b36:	bd70      	pop	{r4, r5, r6, pc}
 8012b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b3c:	4798      	blx	r3
 8012b3e:	3601      	adds	r6, #1
 8012b40:	e7ee      	b.n	8012b20 <__libc_init_array+0xc>
 8012b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b46:	4798      	blx	r3
 8012b48:	3601      	adds	r6, #1
 8012b4a:	e7f2      	b.n	8012b32 <__libc_init_array+0x1e>
 8012b4c:	08014440 	.word	0x08014440
 8012b50:	08014440 	.word	0x08014440
 8012b54:	08014440 	.word	0x08014440
 8012b58:	08014448 	.word	0x08014448

08012b5c <memcpy>:
 8012b5c:	440a      	add	r2, r1
 8012b5e:	4291      	cmp	r1, r2
 8012b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b64:	d100      	bne.n	8012b68 <memcpy+0xc>
 8012b66:	4770      	bx	lr
 8012b68:	b510      	push	{r4, lr}
 8012b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b6e:	4291      	cmp	r1, r2
 8012b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b74:	d1f9      	bne.n	8012b6a <memcpy+0xe>
 8012b76:	bd10      	pop	{r4, pc}

08012b78 <memset>:
 8012b78:	4603      	mov	r3, r0
 8012b7a:	4402      	add	r2, r0
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d100      	bne.n	8012b82 <memset+0xa>
 8012b80:	4770      	bx	lr
 8012b82:	f803 1b01 	strb.w	r1, [r3], #1
 8012b86:	e7f9      	b.n	8012b7c <memset+0x4>

08012b88 <strcpy>:
 8012b88:	4603      	mov	r3, r0
 8012b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b8e:	f803 2b01 	strb.w	r2, [r3], #1
 8012b92:	2a00      	cmp	r2, #0
 8012b94:	d1f9      	bne.n	8012b8a <strcpy+0x2>
 8012b96:	4770      	bx	lr

08012b98 <strtok>:
 8012b98:	4b16      	ldr	r3, [pc, #88]	; (8012bf4 <strtok+0x5c>)
 8012b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9e:	681f      	ldr	r7, [r3, #0]
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8012ba4:	460e      	mov	r6, r1
 8012ba6:	b9ec      	cbnz	r4, 8012be4 <strtok+0x4c>
 8012ba8:	2050      	movs	r0, #80	; 0x50
 8012baa:	f000 fa09 	bl	8012fc0 <malloc>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	65b8      	str	r0, [r7, #88]	; 0x58
 8012bb2:	b920      	cbnz	r0, 8012bbe <strtok+0x26>
 8012bb4:	2157      	movs	r1, #87	; 0x57
 8012bb6:	4b10      	ldr	r3, [pc, #64]	; (8012bf8 <strtok+0x60>)
 8012bb8:	4810      	ldr	r0, [pc, #64]	; (8012bfc <strtok+0x64>)
 8012bba:	f000 f8d9 	bl	8012d70 <__assert_func>
 8012bbe:	e9c0 4400 	strd	r4, r4, [r0]
 8012bc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012bc6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012bca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012bce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012bd2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012bd6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012bda:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012bde:	6184      	str	r4, [r0, #24]
 8012be0:	7704      	strb	r4, [r0, #28]
 8012be2:	6244      	str	r4, [r0, #36]	; 0x24
 8012be4:	4631      	mov	r1, r6
 8012be6:	4628      	mov	r0, r5
 8012be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012bea:	2301      	movs	r3, #1
 8012bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf0:	f000 b806 	b.w	8012c00 <__strtok_r>
 8012bf4:	20000010 	.word	0x20000010
 8012bf8:	080141f4 	.word	0x080141f4
 8012bfc:	0801420b 	.word	0x0801420b

08012c00 <__strtok_r>:
 8012c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c02:	b908      	cbnz	r0, 8012c08 <__strtok_r+0x8>
 8012c04:	6810      	ldr	r0, [r2, #0]
 8012c06:	b188      	cbz	r0, 8012c2c <__strtok_r+0x2c>
 8012c08:	4604      	mov	r4, r0
 8012c0a:	460f      	mov	r7, r1
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012c12:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012c16:	b91e      	cbnz	r6, 8012c20 <__strtok_r+0x20>
 8012c18:	b965      	cbnz	r5, 8012c34 <__strtok_r+0x34>
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	6015      	str	r5, [r2, #0]
 8012c1e:	e005      	b.n	8012c2c <__strtok_r+0x2c>
 8012c20:	42b5      	cmp	r5, r6
 8012c22:	d1f6      	bne.n	8012c12 <__strtok_r+0x12>
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d1f0      	bne.n	8012c0a <__strtok_r+0xa>
 8012c28:	6014      	str	r4, [r2, #0]
 8012c2a:	7003      	strb	r3, [r0, #0]
 8012c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c2e:	461c      	mov	r4, r3
 8012c30:	e00c      	b.n	8012c4c <__strtok_r+0x4c>
 8012c32:	b915      	cbnz	r5, 8012c3a <__strtok_r+0x3a>
 8012c34:	460e      	mov	r6, r1
 8012c36:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012c3e:	42ab      	cmp	r3, r5
 8012c40:	d1f7      	bne.n	8012c32 <__strtok_r+0x32>
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d0f3      	beq.n	8012c2e <__strtok_r+0x2e>
 8012c46:	2300      	movs	r3, #0
 8012c48:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012c4c:	6014      	str	r4, [r2, #0]
 8012c4e:	e7ed      	b.n	8012c2c <__strtok_r+0x2c>

08012c50 <_strtol_l.isra.0>:
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c56:	4686      	mov	lr, r0
 8012c58:	d001      	beq.n	8012c5e <_strtol_l.isra.0+0xe>
 8012c5a:	2b24      	cmp	r3, #36	; 0x24
 8012c5c:	d906      	bls.n	8012c6c <_strtol_l.isra.0+0x1c>
 8012c5e:	f7ff ff53 	bl	8012b08 <__errno>
 8012c62:	2316      	movs	r3, #22
 8012c64:	6003      	str	r3, [r0, #0]
 8012c66:	2000      	movs	r0, #0
 8012c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c6c:	468c      	mov	ip, r1
 8012c6e:	4e3a      	ldr	r6, [pc, #232]	; (8012d58 <_strtol_l.isra.0+0x108>)
 8012c70:	4660      	mov	r0, ip
 8012c72:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012c76:	5da5      	ldrb	r5, [r4, r6]
 8012c78:	f015 0508 	ands.w	r5, r5, #8
 8012c7c:	d1f8      	bne.n	8012c70 <_strtol_l.isra.0+0x20>
 8012c7e:	2c2d      	cmp	r4, #45	; 0x2d
 8012c80:	d133      	bne.n	8012cea <_strtol_l.isra.0+0x9a>
 8012c82:	f04f 0801 	mov.w	r8, #1
 8012c86:	f89c 4000 	ldrb.w	r4, [ip]
 8012c8a:	f100 0c02 	add.w	ip, r0, #2
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d05d      	beq.n	8012d4e <_strtol_l.isra.0+0xfe>
 8012c92:	2b10      	cmp	r3, #16
 8012c94:	d10c      	bne.n	8012cb0 <_strtol_l.isra.0+0x60>
 8012c96:	2c30      	cmp	r4, #48	; 0x30
 8012c98:	d10a      	bne.n	8012cb0 <_strtol_l.isra.0+0x60>
 8012c9a:	f89c 0000 	ldrb.w	r0, [ip]
 8012c9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012ca2:	2858      	cmp	r0, #88	; 0x58
 8012ca4:	d14e      	bne.n	8012d44 <_strtol_l.isra.0+0xf4>
 8012ca6:	2310      	movs	r3, #16
 8012ca8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012cac:	f10c 0c02 	add.w	ip, ip, #2
 8012cb0:	2500      	movs	r5, #0
 8012cb2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8012cb6:	3f01      	subs	r7, #1
 8012cb8:	fbb7 f9f3 	udiv	r9, r7, r3
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	fb03 7a19 	mls	sl, r3, r9, r7
 8012cc2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012cc6:	2e09      	cmp	r6, #9
 8012cc8:	d818      	bhi.n	8012cfc <_strtol_l.isra.0+0xac>
 8012cca:	4634      	mov	r4, r6
 8012ccc:	42a3      	cmp	r3, r4
 8012cce:	dd24      	ble.n	8012d1a <_strtol_l.isra.0+0xca>
 8012cd0:	2d00      	cmp	r5, #0
 8012cd2:	db1f      	blt.n	8012d14 <_strtol_l.isra.0+0xc4>
 8012cd4:	4581      	cmp	r9, r0
 8012cd6:	d31d      	bcc.n	8012d14 <_strtol_l.isra.0+0xc4>
 8012cd8:	d101      	bne.n	8012cde <_strtol_l.isra.0+0x8e>
 8012cda:	45a2      	cmp	sl, r4
 8012cdc:	db1a      	blt.n	8012d14 <_strtol_l.isra.0+0xc4>
 8012cde:	2501      	movs	r5, #1
 8012ce0:	fb00 4003 	mla	r0, r0, r3, r4
 8012ce4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012ce8:	e7eb      	b.n	8012cc2 <_strtol_l.isra.0+0x72>
 8012cea:	2c2b      	cmp	r4, #43	; 0x2b
 8012cec:	bf08      	it	eq
 8012cee:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012cf2:	46a8      	mov	r8, r5
 8012cf4:	bf08      	it	eq
 8012cf6:	f100 0c02 	addeq.w	ip, r0, #2
 8012cfa:	e7c8      	b.n	8012c8e <_strtol_l.isra.0+0x3e>
 8012cfc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012d00:	2e19      	cmp	r6, #25
 8012d02:	d801      	bhi.n	8012d08 <_strtol_l.isra.0+0xb8>
 8012d04:	3c37      	subs	r4, #55	; 0x37
 8012d06:	e7e1      	b.n	8012ccc <_strtol_l.isra.0+0x7c>
 8012d08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012d0c:	2e19      	cmp	r6, #25
 8012d0e:	d804      	bhi.n	8012d1a <_strtol_l.isra.0+0xca>
 8012d10:	3c57      	subs	r4, #87	; 0x57
 8012d12:	e7db      	b.n	8012ccc <_strtol_l.isra.0+0x7c>
 8012d14:	f04f 35ff 	mov.w	r5, #4294967295
 8012d18:	e7e4      	b.n	8012ce4 <_strtol_l.isra.0+0x94>
 8012d1a:	2d00      	cmp	r5, #0
 8012d1c:	da08      	bge.n	8012d30 <_strtol_l.isra.0+0xe0>
 8012d1e:	2322      	movs	r3, #34	; 0x22
 8012d20:	4638      	mov	r0, r7
 8012d22:	f8ce 3000 	str.w	r3, [lr]
 8012d26:	2a00      	cmp	r2, #0
 8012d28:	d09e      	beq.n	8012c68 <_strtol_l.isra.0+0x18>
 8012d2a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8012d2e:	e007      	b.n	8012d40 <_strtol_l.isra.0+0xf0>
 8012d30:	f1b8 0f00 	cmp.w	r8, #0
 8012d34:	d000      	beq.n	8012d38 <_strtol_l.isra.0+0xe8>
 8012d36:	4240      	negs	r0, r0
 8012d38:	2a00      	cmp	r2, #0
 8012d3a:	d095      	beq.n	8012c68 <_strtol_l.isra.0+0x18>
 8012d3c:	2d00      	cmp	r5, #0
 8012d3e:	d1f4      	bne.n	8012d2a <_strtol_l.isra.0+0xda>
 8012d40:	6011      	str	r1, [r2, #0]
 8012d42:	e791      	b.n	8012c68 <_strtol_l.isra.0+0x18>
 8012d44:	2430      	movs	r4, #48	; 0x30
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d1b2      	bne.n	8012cb0 <_strtol_l.isra.0+0x60>
 8012d4a:	2308      	movs	r3, #8
 8012d4c:	e7b0      	b.n	8012cb0 <_strtol_l.isra.0+0x60>
 8012d4e:	2c30      	cmp	r4, #48	; 0x30
 8012d50:	d0a3      	beq.n	8012c9a <_strtol_l.isra.0+0x4a>
 8012d52:	230a      	movs	r3, #10
 8012d54:	e7ac      	b.n	8012cb0 <_strtol_l.isra.0+0x60>
 8012d56:	bf00      	nop
 8012d58:	080142a9 	.word	0x080142a9

08012d5c <strtol>:
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	460a      	mov	r2, r1
 8012d60:	4601      	mov	r1, r0
 8012d62:	4802      	ldr	r0, [pc, #8]	; (8012d6c <strtol+0x10>)
 8012d64:	6800      	ldr	r0, [r0, #0]
 8012d66:	f7ff bf73 	b.w	8012c50 <_strtol_l.isra.0>
 8012d6a:	bf00      	nop
 8012d6c:	20000010 	.word	0x20000010

08012d70 <__assert_func>:
 8012d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d72:	4614      	mov	r4, r2
 8012d74:	461a      	mov	r2, r3
 8012d76:	4b09      	ldr	r3, [pc, #36]	; (8012d9c <__assert_func+0x2c>)
 8012d78:	4605      	mov	r5, r0
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	68d8      	ldr	r0, [r3, #12]
 8012d7e:	b14c      	cbz	r4, 8012d94 <__assert_func+0x24>
 8012d80:	4b07      	ldr	r3, [pc, #28]	; (8012da0 <__assert_func+0x30>)
 8012d82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d86:	9100      	str	r1, [sp, #0]
 8012d88:	462b      	mov	r3, r5
 8012d8a:	4906      	ldr	r1, [pc, #24]	; (8012da4 <__assert_func+0x34>)
 8012d8c:	f000 f8e4 	bl	8012f58 <fiprintf>
 8012d90:	f000 fdd8 	bl	8013944 <abort>
 8012d94:	4b04      	ldr	r3, [pc, #16]	; (8012da8 <__assert_func+0x38>)
 8012d96:	461c      	mov	r4, r3
 8012d98:	e7f3      	b.n	8012d82 <__assert_func+0x12>
 8012d9a:	bf00      	nop
 8012d9c:	20000010 	.word	0x20000010
 8012da0:	0801426c 	.word	0x0801426c
 8012da4:	08014279 	.word	0x08014279
 8012da8:	080142a7 	.word	0x080142a7

08012dac <std>:
 8012dac:	2300      	movs	r3, #0
 8012dae:	b510      	push	{r4, lr}
 8012db0:	4604      	mov	r4, r0
 8012db2:	e9c0 3300 	strd	r3, r3, [r0]
 8012db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012dba:	6083      	str	r3, [r0, #8]
 8012dbc:	8181      	strh	r1, [r0, #12]
 8012dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8012dc0:	81c2      	strh	r2, [r0, #14]
 8012dc2:	6183      	str	r3, [r0, #24]
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	2208      	movs	r2, #8
 8012dc8:	305c      	adds	r0, #92	; 0x5c
 8012dca:	f7ff fed5 	bl	8012b78 <memset>
 8012dce:	4b05      	ldr	r3, [pc, #20]	; (8012de4 <std+0x38>)
 8012dd0:	6224      	str	r4, [r4, #32]
 8012dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8012dd4:	4b04      	ldr	r3, [pc, #16]	; (8012de8 <std+0x3c>)
 8012dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dd8:	4b04      	ldr	r3, [pc, #16]	; (8012dec <std+0x40>)
 8012dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ddc:	4b04      	ldr	r3, [pc, #16]	; (8012df0 <std+0x44>)
 8012dde:	6323      	str	r3, [r4, #48]	; 0x30
 8012de0:	bd10      	pop	{r4, pc}
 8012de2:	bf00      	nop
 8012de4:	08013719 	.word	0x08013719
 8012de8:	0801373b 	.word	0x0801373b
 8012dec:	08013773 	.word	0x08013773
 8012df0:	08013797 	.word	0x08013797

08012df4 <_cleanup_r>:
 8012df4:	4901      	ldr	r1, [pc, #4]	; (8012dfc <_cleanup_r+0x8>)
 8012df6:	f000 b8c1 	b.w	8012f7c <_fwalk_reent>
 8012dfa:	bf00      	nop
 8012dfc:	08013a81 	.word	0x08013a81

08012e00 <__sfmoreglue>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	2568      	movs	r5, #104	; 0x68
 8012e04:	1e4a      	subs	r2, r1, #1
 8012e06:	4355      	muls	r5, r2
 8012e08:	460e      	mov	r6, r1
 8012e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e0e:	f000 f92b 	bl	8013068 <_malloc_r>
 8012e12:	4604      	mov	r4, r0
 8012e14:	b140      	cbz	r0, 8012e28 <__sfmoreglue+0x28>
 8012e16:	2100      	movs	r1, #0
 8012e18:	e9c0 1600 	strd	r1, r6, [r0]
 8012e1c:	300c      	adds	r0, #12
 8012e1e:	60a0      	str	r0, [r4, #8]
 8012e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e24:	f7ff fea8 	bl	8012b78 <memset>
 8012e28:	4620      	mov	r0, r4
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}

08012e2c <__sfp_lock_acquire>:
 8012e2c:	4801      	ldr	r0, [pc, #4]	; (8012e34 <__sfp_lock_acquire+0x8>)
 8012e2e:	f000 b8c5 	b.w	8012fbc <__retarget_lock_acquire_recursive>
 8012e32:	bf00      	nop
 8012e34:	2000194c 	.word	0x2000194c

08012e38 <__sfp_lock_release>:
 8012e38:	4801      	ldr	r0, [pc, #4]	; (8012e40 <__sfp_lock_release+0x8>)
 8012e3a:	f000 b8c0 	b.w	8012fbe <__retarget_lock_release_recursive>
 8012e3e:	bf00      	nop
 8012e40:	2000194c 	.word	0x2000194c

08012e44 <__sinit_lock_acquire>:
 8012e44:	4801      	ldr	r0, [pc, #4]	; (8012e4c <__sinit_lock_acquire+0x8>)
 8012e46:	f000 b8b9 	b.w	8012fbc <__retarget_lock_acquire_recursive>
 8012e4a:	bf00      	nop
 8012e4c:	20001947 	.word	0x20001947

08012e50 <__sinit_lock_release>:
 8012e50:	4801      	ldr	r0, [pc, #4]	; (8012e58 <__sinit_lock_release+0x8>)
 8012e52:	f000 b8b4 	b.w	8012fbe <__retarget_lock_release_recursive>
 8012e56:	bf00      	nop
 8012e58:	20001947 	.word	0x20001947

08012e5c <__sinit>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4604      	mov	r4, r0
 8012e60:	f7ff fff0 	bl	8012e44 <__sinit_lock_acquire>
 8012e64:	69a3      	ldr	r3, [r4, #24]
 8012e66:	b11b      	cbz	r3, 8012e70 <__sinit+0x14>
 8012e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e6c:	f7ff bff0 	b.w	8012e50 <__sinit_lock_release>
 8012e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e74:	6523      	str	r3, [r4, #80]	; 0x50
 8012e76:	4b13      	ldr	r3, [pc, #76]	; (8012ec4 <__sinit+0x68>)
 8012e78:	4a13      	ldr	r2, [pc, #76]	; (8012ec8 <__sinit+0x6c>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e7e:	42a3      	cmp	r3, r4
 8012e80:	bf08      	it	eq
 8012e82:	2301      	moveq	r3, #1
 8012e84:	4620      	mov	r0, r4
 8012e86:	bf08      	it	eq
 8012e88:	61a3      	streq	r3, [r4, #24]
 8012e8a:	f000 f81f 	bl	8012ecc <__sfp>
 8012e8e:	6060      	str	r0, [r4, #4]
 8012e90:	4620      	mov	r0, r4
 8012e92:	f000 f81b 	bl	8012ecc <__sfp>
 8012e96:	60a0      	str	r0, [r4, #8]
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 f817 	bl	8012ecc <__sfp>
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	2104      	movs	r1, #4
 8012ea2:	60e0      	str	r0, [r4, #12]
 8012ea4:	6860      	ldr	r0, [r4, #4]
 8012ea6:	f7ff ff81 	bl	8012dac <std>
 8012eaa:	2201      	movs	r2, #1
 8012eac:	2109      	movs	r1, #9
 8012eae:	68a0      	ldr	r0, [r4, #8]
 8012eb0:	f7ff ff7c 	bl	8012dac <std>
 8012eb4:	2202      	movs	r2, #2
 8012eb6:	2112      	movs	r1, #18
 8012eb8:	68e0      	ldr	r0, [r4, #12]
 8012eba:	f7ff ff77 	bl	8012dac <std>
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	61a3      	str	r3, [r4, #24]
 8012ec2:	e7d1      	b.n	8012e68 <__sinit+0xc>
 8012ec4:	080141f0 	.word	0x080141f0
 8012ec8:	08012df5 	.word	0x08012df5

08012ecc <__sfp>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	4607      	mov	r7, r0
 8012ed0:	f7ff ffac 	bl	8012e2c <__sfp_lock_acquire>
 8012ed4:	4b1e      	ldr	r3, [pc, #120]	; (8012f50 <__sfp+0x84>)
 8012ed6:	681e      	ldr	r6, [r3, #0]
 8012ed8:	69b3      	ldr	r3, [r6, #24]
 8012eda:	b913      	cbnz	r3, 8012ee2 <__sfp+0x16>
 8012edc:	4630      	mov	r0, r6
 8012ede:	f7ff ffbd 	bl	8012e5c <__sinit>
 8012ee2:	3648      	adds	r6, #72	; 0x48
 8012ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	d503      	bpl.n	8012ef4 <__sfp+0x28>
 8012eec:	6833      	ldr	r3, [r6, #0]
 8012eee:	b30b      	cbz	r3, 8012f34 <__sfp+0x68>
 8012ef0:	6836      	ldr	r6, [r6, #0]
 8012ef2:	e7f7      	b.n	8012ee4 <__sfp+0x18>
 8012ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ef8:	b9d5      	cbnz	r5, 8012f30 <__sfp+0x64>
 8012efa:	4b16      	ldr	r3, [pc, #88]	; (8012f54 <__sfp+0x88>)
 8012efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f00:	60e3      	str	r3, [r4, #12]
 8012f02:	6665      	str	r5, [r4, #100]	; 0x64
 8012f04:	f000 f859 	bl	8012fba <__retarget_lock_init_recursive>
 8012f08:	f7ff ff96 	bl	8012e38 <__sfp_lock_release>
 8012f0c:	2208      	movs	r2, #8
 8012f0e:	4629      	mov	r1, r5
 8012f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f18:	6025      	str	r5, [r4, #0]
 8012f1a:	61a5      	str	r5, [r4, #24]
 8012f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f20:	f7ff fe2a 	bl	8012b78 <memset>
 8012f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f30:	3468      	adds	r4, #104	; 0x68
 8012f32:	e7d9      	b.n	8012ee8 <__sfp+0x1c>
 8012f34:	2104      	movs	r1, #4
 8012f36:	4638      	mov	r0, r7
 8012f38:	f7ff ff62 	bl	8012e00 <__sfmoreglue>
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	6030      	str	r0, [r6, #0]
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d1d5      	bne.n	8012ef0 <__sfp+0x24>
 8012f44:	f7ff ff78 	bl	8012e38 <__sfp_lock_release>
 8012f48:	230c      	movs	r3, #12
 8012f4a:	603b      	str	r3, [r7, #0]
 8012f4c:	e7ee      	b.n	8012f2c <__sfp+0x60>
 8012f4e:	bf00      	nop
 8012f50:	080141f0 	.word	0x080141f0
 8012f54:	ffff0001 	.word	0xffff0001

08012f58 <fiprintf>:
 8012f58:	b40e      	push	{r1, r2, r3}
 8012f5a:	b503      	push	{r0, r1, lr}
 8012f5c:	4601      	mov	r1, r0
 8012f5e:	ab03      	add	r3, sp, #12
 8012f60:	4805      	ldr	r0, [pc, #20]	; (8012f78 <fiprintf+0x20>)
 8012f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f66:	6800      	ldr	r0, [r0, #0]
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	f000 f8ff 	bl	801316c <_vfiprintf_r>
 8012f6e:	b002      	add	sp, #8
 8012f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f74:	b003      	add	sp, #12
 8012f76:	4770      	bx	lr
 8012f78:	20000010 	.word	0x20000010

08012f7c <_fwalk_reent>:
 8012f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f80:	4606      	mov	r6, r0
 8012f82:	4688      	mov	r8, r1
 8012f84:	2700      	movs	r7, #0
 8012f86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8012f92:	d505      	bpl.n	8012fa0 <_fwalk_reent+0x24>
 8012f94:	6824      	ldr	r4, [r4, #0]
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	d1f7      	bne.n	8012f8a <_fwalk_reent+0xe>
 8012f9a:	4638      	mov	r0, r7
 8012f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa0:	89ab      	ldrh	r3, [r5, #12]
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d907      	bls.n	8012fb6 <_fwalk_reent+0x3a>
 8012fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012faa:	3301      	adds	r3, #1
 8012fac:	d003      	beq.n	8012fb6 <_fwalk_reent+0x3a>
 8012fae:	4629      	mov	r1, r5
 8012fb0:	4630      	mov	r0, r6
 8012fb2:	47c0      	blx	r8
 8012fb4:	4307      	orrs	r7, r0
 8012fb6:	3568      	adds	r5, #104	; 0x68
 8012fb8:	e7e9      	b.n	8012f8e <_fwalk_reent+0x12>

08012fba <__retarget_lock_init_recursive>:
 8012fba:	4770      	bx	lr

08012fbc <__retarget_lock_acquire_recursive>:
 8012fbc:	4770      	bx	lr

08012fbe <__retarget_lock_release_recursive>:
 8012fbe:	4770      	bx	lr

08012fc0 <malloc>:
 8012fc0:	4b02      	ldr	r3, [pc, #8]	; (8012fcc <malloc+0xc>)
 8012fc2:	4601      	mov	r1, r0
 8012fc4:	6818      	ldr	r0, [r3, #0]
 8012fc6:	f000 b84f 	b.w	8013068 <_malloc_r>
 8012fca:	bf00      	nop
 8012fcc:	20000010 	.word	0x20000010

08012fd0 <_free_r>:
 8012fd0:	b538      	push	{r3, r4, r5, lr}
 8012fd2:	4605      	mov	r5, r0
 8012fd4:	2900      	cmp	r1, #0
 8012fd6:	d043      	beq.n	8013060 <_free_r+0x90>
 8012fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fdc:	1f0c      	subs	r4, r1, #4
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	bfb8      	it	lt
 8012fe2:	18e4      	addlt	r4, r4, r3
 8012fe4:	f000 fe0c 	bl	8013c00 <__malloc_lock>
 8012fe8:	4a1e      	ldr	r2, [pc, #120]	; (8013064 <_free_r+0x94>)
 8012fea:	6813      	ldr	r3, [r2, #0]
 8012fec:	4610      	mov	r0, r2
 8012fee:	b933      	cbnz	r3, 8012ffe <_free_r+0x2e>
 8012ff0:	6063      	str	r3, [r4, #4]
 8012ff2:	6014      	str	r4, [r2, #0]
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ffa:	f000 be07 	b.w	8013c0c <__malloc_unlock>
 8012ffe:	42a3      	cmp	r3, r4
 8013000:	d90a      	bls.n	8013018 <_free_r+0x48>
 8013002:	6821      	ldr	r1, [r4, #0]
 8013004:	1862      	adds	r2, r4, r1
 8013006:	4293      	cmp	r3, r2
 8013008:	bf01      	itttt	eq
 801300a:	681a      	ldreq	r2, [r3, #0]
 801300c:	685b      	ldreq	r3, [r3, #4]
 801300e:	1852      	addeq	r2, r2, r1
 8013010:	6022      	streq	r2, [r4, #0]
 8013012:	6063      	str	r3, [r4, #4]
 8013014:	6004      	str	r4, [r0, #0]
 8013016:	e7ed      	b.n	8012ff4 <_free_r+0x24>
 8013018:	461a      	mov	r2, r3
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	b10b      	cbz	r3, 8013022 <_free_r+0x52>
 801301e:	42a3      	cmp	r3, r4
 8013020:	d9fa      	bls.n	8013018 <_free_r+0x48>
 8013022:	6811      	ldr	r1, [r2, #0]
 8013024:	1850      	adds	r0, r2, r1
 8013026:	42a0      	cmp	r0, r4
 8013028:	d10b      	bne.n	8013042 <_free_r+0x72>
 801302a:	6820      	ldr	r0, [r4, #0]
 801302c:	4401      	add	r1, r0
 801302e:	1850      	adds	r0, r2, r1
 8013030:	4283      	cmp	r3, r0
 8013032:	6011      	str	r1, [r2, #0]
 8013034:	d1de      	bne.n	8012ff4 <_free_r+0x24>
 8013036:	6818      	ldr	r0, [r3, #0]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	4401      	add	r1, r0
 801303c:	6011      	str	r1, [r2, #0]
 801303e:	6053      	str	r3, [r2, #4]
 8013040:	e7d8      	b.n	8012ff4 <_free_r+0x24>
 8013042:	d902      	bls.n	801304a <_free_r+0x7a>
 8013044:	230c      	movs	r3, #12
 8013046:	602b      	str	r3, [r5, #0]
 8013048:	e7d4      	b.n	8012ff4 <_free_r+0x24>
 801304a:	6820      	ldr	r0, [r4, #0]
 801304c:	1821      	adds	r1, r4, r0
 801304e:	428b      	cmp	r3, r1
 8013050:	bf01      	itttt	eq
 8013052:	6819      	ldreq	r1, [r3, #0]
 8013054:	685b      	ldreq	r3, [r3, #4]
 8013056:	1809      	addeq	r1, r1, r0
 8013058:	6021      	streq	r1, [r4, #0]
 801305a:	6063      	str	r3, [r4, #4]
 801305c:	6054      	str	r4, [r2, #4]
 801305e:	e7c9      	b.n	8012ff4 <_free_r+0x24>
 8013060:	bd38      	pop	{r3, r4, r5, pc}
 8013062:	bf00      	nop
 8013064:	2000192c 	.word	0x2000192c

08013068 <_malloc_r>:
 8013068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801306a:	1ccd      	adds	r5, r1, #3
 801306c:	f025 0503 	bic.w	r5, r5, #3
 8013070:	3508      	adds	r5, #8
 8013072:	2d0c      	cmp	r5, #12
 8013074:	bf38      	it	cc
 8013076:	250c      	movcc	r5, #12
 8013078:	2d00      	cmp	r5, #0
 801307a:	4606      	mov	r6, r0
 801307c:	db01      	blt.n	8013082 <_malloc_r+0x1a>
 801307e:	42a9      	cmp	r1, r5
 8013080:	d903      	bls.n	801308a <_malloc_r+0x22>
 8013082:	230c      	movs	r3, #12
 8013084:	6033      	str	r3, [r6, #0]
 8013086:	2000      	movs	r0, #0
 8013088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801308a:	f000 fdb9 	bl	8013c00 <__malloc_lock>
 801308e:	4921      	ldr	r1, [pc, #132]	; (8013114 <_malloc_r+0xac>)
 8013090:	680a      	ldr	r2, [r1, #0]
 8013092:	4614      	mov	r4, r2
 8013094:	b99c      	cbnz	r4, 80130be <_malloc_r+0x56>
 8013096:	4f20      	ldr	r7, [pc, #128]	; (8013118 <_malloc_r+0xb0>)
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	b923      	cbnz	r3, 80130a6 <_malloc_r+0x3e>
 801309c:	4621      	mov	r1, r4
 801309e:	4630      	mov	r0, r6
 80130a0:	f000 fb2a 	bl	80136f8 <_sbrk_r>
 80130a4:	6038      	str	r0, [r7, #0]
 80130a6:	4629      	mov	r1, r5
 80130a8:	4630      	mov	r0, r6
 80130aa:	f000 fb25 	bl	80136f8 <_sbrk_r>
 80130ae:	1c43      	adds	r3, r0, #1
 80130b0:	d123      	bne.n	80130fa <_malloc_r+0x92>
 80130b2:	230c      	movs	r3, #12
 80130b4:	4630      	mov	r0, r6
 80130b6:	6033      	str	r3, [r6, #0]
 80130b8:	f000 fda8 	bl	8013c0c <__malloc_unlock>
 80130bc:	e7e3      	b.n	8013086 <_malloc_r+0x1e>
 80130be:	6823      	ldr	r3, [r4, #0]
 80130c0:	1b5b      	subs	r3, r3, r5
 80130c2:	d417      	bmi.n	80130f4 <_malloc_r+0x8c>
 80130c4:	2b0b      	cmp	r3, #11
 80130c6:	d903      	bls.n	80130d0 <_malloc_r+0x68>
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	441c      	add	r4, r3
 80130cc:	6025      	str	r5, [r4, #0]
 80130ce:	e004      	b.n	80130da <_malloc_r+0x72>
 80130d0:	6863      	ldr	r3, [r4, #4]
 80130d2:	42a2      	cmp	r2, r4
 80130d4:	bf0c      	ite	eq
 80130d6:	600b      	streq	r3, [r1, #0]
 80130d8:	6053      	strne	r3, [r2, #4]
 80130da:	4630      	mov	r0, r6
 80130dc:	f000 fd96 	bl	8013c0c <__malloc_unlock>
 80130e0:	f104 000b 	add.w	r0, r4, #11
 80130e4:	1d23      	adds	r3, r4, #4
 80130e6:	f020 0007 	bic.w	r0, r0, #7
 80130ea:	1ac2      	subs	r2, r0, r3
 80130ec:	d0cc      	beq.n	8013088 <_malloc_r+0x20>
 80130ee:	1a1b      	subs	r3, r3, r0
 80130f0:	50a3      	str	r3, [r4, r2]
 80130f2:	e7c9      	b.n	8013088 <_malloc_r+0x20>
 80130f4:	4622      	mov	r2, r4
 80130f6:	6864      	ldr	r4, [r4, #4]
 80130f8:	e7cc      	b.n	8013094 <_malloc_r+0x2c>
 80130fa:	1cc4      	adds	r4, r0, #3
 80130fc:	f024 0403 	bic.w	r4, r4, #3
 8013100:	42a0      	cmp	r0, r4
 8013102:	d0e3      	beq.n	80130cc <_malloc_r+0x64>
 8013104:	1a21      	subs	r1, r4, r0
 8013106:	4630      	mov	r0, r6
 8013108:	f000 faf6 	bl	80136f8 <_sbrk_r>
 801310c:	3001      	adds	r0, #1
 801310e:	d1dd      	bne.n	80130cc <_malloc_r+0x64>
 8013110:	e7cf      	b.n	80130b2 <_malloc_r+0x4a>
 8013112:	bf00      	nop
 8013114:	2000192c 	.word	0x2000192c
 8013118:	20001930 	.word	0x20001930

0801311c <__sfputc_r>:
 801311c:	6893      	ldr	r3, [r2, #8]
 801311e:	b410      	push	{r4}
 8013120:	3b01      	subs	r3, #1
 8013122:	2b00      	cmp	r3, #0
 8013124:	6093      	str	r3, [r2, #8]
 8013126:	da07      	bge.n	8013138 <__sfputc_r+0x1c>
 8013128:	6994      	ldr	r4, [r2, #24]
 801312a:	42a3      	cmp	r3, r4
 801312c:	db01      	blt.n	8013132 <__sfputc_r+0x16>
 801312e:	290a      	cmp	r1, #10
 8013130:	d102      	bne.n	8013138 <__sfputc_r+0x1c>
 8013132:	bc10      	pop	{r4}
 8013134:	f000 bb34 	b.w	80137a0 <__swbuf_r>
 8013138:	6813      	ldr	r3, [r2, #0]
 801313a:	1c58      	adds	r0, r3, #1
 801313c:	6010      	str	r0, [r2, #0]
 801313e:	7019      	strb	r1, [r3, #0]
 8013140:	4608      	mov	r0, r1
 8013142:	bc10      	pop	{r4}
 8013144:	4770      	bx	lr

08013146 <__sfputs_r>:
 8013146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013148:	4606      	mov	r6, r0
 801314a:	460f      	mov	r7, r1
 801314c:	4614      	mov	r4, r2
 801314e:	18d5      	adds	r5, r2, r3
 8013150:	42ac      	cmp	r4, r5
 8013152:	d101      	bne.n	8013158 <__sfputs_r+0x12>
 8013154:	2000      	movs	r0, #0
 8013156:	e007      	b.n	8013168 <__sfputs_r+0x22>
 8013158:	463a      	mov	r2, r7
 801315a:	4630      	mov	r0, r6
 801315c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013160:	f7ff ffdc 	bl	801311c <__sfputc_r>
 8013164:	1c43      	adds	r3, r0, #1
 8013166:	d1f3      	bne.n	8013150 <__sfputs_r+0xa>
 8013168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801316c <_vfiprintf_r>:
 801316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013170:	460d      	mov	r5, r1
 8013172:	4614      	mov	r4, r2
 8013174:	4698      	mov	r8, r3
 8013176:	4606      	mov	r6, r0
 8013178:	b09d      	sub	sp, #116	; 0x74
 801317a:	b118      	cbz	r0, 8013184 <_vfiprintf_r+0x18>
 801317c:	6983      	ldr	r3, [r0, #24]
 801317e:	b90b      	cbnz	r3, 8013184 <_vfiprintf_r+0x18>
 8013180:	f7ff fe6c 	bl	8012e5c <__sinit>
 8013184:	4b89      	ldr	r3, [pc, #548]	; (80133ac <_vfiprintf_r+0x240>)
 8013186:	429d      	cmp	r5, r3
 8013188:	d11b      	bne.n	80131c2 <_vfiprintf_r+0x56>
 801318a:	6875      	ldr	r5, [r6, #4]
 801318c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801318e:	07d9      	lsls	r1, r3, #31
 8013190:	d405      	bmi.n	801319e <_vfiprintf_r+0x32>
 8013192:	89ab      	ldrh	r3, [r5, #12]
 8013194:	059a      	lsls	r2, r3, #22
 8013196:	d402      	bmi.n	801319e <_vfiprintf_r+0x32>
 8013198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801319a:	f7ff ff0f 	bl	8012fbc <__retarget_lock_acquire_recursive>
 801319e:	89ab      	ldrh	r3, [r5, #12]
 80131a0:	071b      	lsls	r3, r3, #28
 80131a2:	d501      	bpl.n	80131a8 <_vfiprintf_r+0x3c>
 80131a4:	692b      	ldr	r3, [r5, #16]
 80131a6:	b9eb      	cbnz	r3, 80131e4 <_vfiprintf_r+0x78>
 80131a8:	4629      	mov	r1, r5
 80131aa:	4630      	mov	r0, r6
 80131ac:	f000 fb5c 	bl	8013868 <__swsetup_r>
 80131b0:	b1c0      	cbz	r0, 80131e4 <_vfiprintf_r+0x78>
 80131b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131b4:	07dc      	lsls	r4, r3, #31
 80131b6:	d50e      	bpl.n	80131d6 <_vfiprintf_r+0x6a>
 80131b8:	f04f 30ff 	mov.w	r0, #4294967295
 80131bc:	b01d      	add	sp, #116	; 0x74
 80131be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c2:	4b7b      	ldr	r3, [pc, #492]	; (80133b0 <_vfiprintf_r+0x244>)
 80131c4:	429d      	cmp	r5, r3
 80131c6:	d101      	bne.n	80131cc <_vfiprintf_r+0x60>
 80131c8:	68b5      	ldr	r5, [r6, #8]
 80131ca:	e7df      	b.n	801318c <_vfiprintf_r+0x20>
 80131cc:	4b79      	ldr	r3, [pc, #484]	; (80133b4 <_vfiprintf_r+0x248>)
 80131ce:	429d      	cmp	r5, r3
 80131d0:	bf08      	it	eq
 80131d2:	68f5      	ldreq	r5, [r6, #12]
 80131d4:	e7da      	b.n	801318c <_vfiprintf_r+0x20>
 80131d6:	89ab      	ldrh	r3, [r5, #12]
 80131d8:	0598      	lsls	r0, r3, #22
 80131da:	d4ed      	bmi.n	80131b8 <_vfiprintf_r+0x4c>
 80131dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131de:	f7ff feee 	bl	8012fbe <__retarget_lock_release_recursive>
 80131e2:	e7e9      	b.n	80131b8 <_vfiprintf_r+0x4c>
 80131e4:	2300      	movs	r3, #0
 80131e6:	9309      	str	r3, [sp, #36]	; 0x24
 80131e8:	2320      	movs	r3, #32
 80131ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131ee:	2330      	movs	r3, #48	; 0x30
 80131f0:	f04f 0901 	mov.w	r9, #1
 80131f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80131f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80133b8 <_vfiprintf_r+0x24c>
 80131fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013200:	4623      	mov	r3, r4
 8013202:	469a      	mov	sl, r3
 8013204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013208:	b10a      	cbz	r2, 801320e <_vfiprintf_r+0xa2>
 801320a:	2a25      	cmp	r2, #37	; 0x25
 801320c:	d1f9      	bne.n	8013202 <_vfiprintf_r+0x96>
 801320e:	ebba 0b04 	subs.w	fp, sl, r4
 8013212:	d00b      	beq.n	801322c <_vfiprintf_r+0xc0>
 8013214:	465b      	mov	r3, fp
 8013216:	4622      	mov	r2, r4
 8013218:	4629      	mov	r1, r5
 801321a:	4630      	mov	r0, r6
 801321c:	f7ff ff93 	bl	8013146 <__sfputs_r>
 8013220:	3001      	adds	r0, #1
 8013222:	f000 80aa 	beq.w	801337a <_vfiprintf_r+0x20e>
 8013226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013228:	445a      	add	r2, fp
 801322a:	9209      	str	r2, [sp, #36]	; 0x24
 801322c:	f89a 3000 	ldrb.w	r3, [sl]
 8013230:	2b00      	cmp	r3, #0
 8013232:	f000 80a2 	beq.w	801337a <_vfiprintf_r+0x20e>
 8013236:	2300      	movs	r3, #0
 8013238:	f04f 32ff 	mov.w	r2, #4294967295
 801323c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013240:	f10a 0a01 	add.w	sl, sl, #1
 8013244:	9304      	str	r3, [sp, #16]
 8013246:	9307      	str	r3, [sp, #28]
 8013248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801324c:	931a      	str	r3, [sp, #104]	; 0x68
 801324e:	4654      	mov	r4, sl
 8013250:	2205      	movs	r2, #5
 8013252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013256:	4858      	ldr	r0, [pc, #352]	; (80133b8 <_vfiprintf_r+0x24c>)
 8013258:	f000 fcc4 	bl	8013be4 <memchr>
 801325c:	9a04      	ldr	r2, [sp, #16]
 801325e:	b9d8      	cbnz	r0, 8013298 <_vfiprintf_r+0x12c>
 8013260:	06d1      	lsls	r1, r2, #27
 8013262:	bf44      	itt	mi
 8013264:	2320      	movmi	r3, #32
 8013266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801326a:	0713      	lsls	r3, r2, #28
 801326c:	bf44      	itt	mi
 801326e:	232b      	movmi	r3, #43	; 0x2b
 8013270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013274:	f89a 3000 	ldrb.w	r3, [sl]
 8013278:	2b2a      	cmp	r3, #42	; 0x2a
 801327a:	d015      	beq.n	80132a8 <_vfiprintf_r+0x13c>
 801327c:	4654      	mov	r4, sl
 801327e:	2000      	movs	r0, #0
 8013280:	f04f 0c0a 	mov.w	ip, #10
 8013284:	9a07      	ldr	r2, [sp, #28]
 8013286:	4621      	mov	r1, r4
 8013288:	f811 3b01 	ldrb.w	r3, [r1], #1
 801328c:	3b30      	subs	r3, #48	; 0x30
 801328e:	2b09      	cmp	r3, #9
 8013290:	d94e      	bls.n	8013330 <_vfiprintf_r+0x1c4>
 8013292:	b1b0      	cbz	r0, 80132c2 <_vfiprintf_r+0x156>
 8013294:	9207      	str	r2, [sp, #28]
 8013296:	e014      	b.n	80132c2 <_vfiprintf_r+0x156>
 8013298:	eba0 0308 	sub.w	r3, r0, r8
 801329c:	fa09 f303 	lsl.w	r3, r9, r3
 80132a0:	4313      	orrs	r3, r2
 80132a2:	46a2      	mov	sl, r4
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	e7d2      	b.n	801324e <_vfiprintf_r+0xe2>
 80132a8:	9b03      	ldr	r3, [sp, #12]
 80132aa:	1d19      	adds	r1, r3, #4
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	9103      	str	r1, [sp, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	bfbb      	ittet	lt
 80132b4:	425b      	neglt	r3, r3
 80132b6:	f042 0202 	orrlt.w	r2, r2, #2
 80132ba:	9307      	strge	r3, [sp, #28]
 80132bc:	9307      	strlt	r3, [sp, #28]
 80132be:	bfb8      	it	lt
 80132c0:	9204      	strlt	r2, [sp, #16]
 80132c2:	7823      	ldrb	r3, [r4, #0]
 80132c4:	2b2e      	cmp	r3, #46	; 0x2e
 80132c6:	d10c      	bne.n	80132e2 <_vfiprintf_r+0x176>
 80132c8:	7863      	ldrb	r3, [r4, #1]
 80132ca:	2b2a      	cmp	r3, #42	; 0x2a
 80132cc:	d135      	bne.n	801333a <_vfiprintf_r+0x1ce>
 80132ce:	9b03      	ldr	r3, [sp, #12]
 80132d0:	3402      	adds	r4, #2
 80132d2:	1d1a      	adds	r2, r3, #4
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	9203      	str	r2, [sp, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bfb8      	it	lt
 80132dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80132e0:	9305      	str	r3, [sp, #20]
 80132e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80133c8 <_vfiprintf_r+0x25c>
 80132e6:	2203      	movs	r2, #3
 80132e8:	4650      	mov	r0, sl
 80132ea:	7821      	ldrb	r1, [r4, #0]
 80132ec:	f000 fc7a 	bl	8013be4 <memchr>
 80132f0:	b140      	cbz	r0, 8013304 <_vfiprintf_r+0x198>
 80132f2:	2340      	movs	r3, #64	; 0x40
 80132f4:	eba0 000a 	sub.w	r0, r0, sl
 80132f8:	fa03 f000 	lsl.w	r0, r3, r0
 80132fc:	9b04      	ldr	r3, [sp, #16]
 80132fe:	3401      	adds	r4, #1
 8013300:	4303      	orrs	r3, r0
 8013302:	9304      	str	r3, [sp, #16]
 8013304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013308:	2206      	movs	r2, #6
 801330a:	482c      	ldr	r0, [pc, #176]	; (80133bc <_vfiprintf_r+0x250>)
 801330c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013310:	f000 fc68 	bl	8013be4 <memchr>
 8013314:	2800      	cmp	r0, #0
 8013316:	d03f      	beq.n	8013398 <_vfiprintf_r+0x22c>
 8013318:	4b29      	ldr	r3, [pc, #164]	; (80133c0 <_vfiprintf_r+0x254>)
 801331a:	bb1b      	cbnz	r3, 8013364 <_vfiprintf_r+0x1f8>
 801331c:	9b03      	ldr	r3, [sp, #12]
 801331e:	3307      	adds	r3, #7
 8013320:	f023 0307 	bic.w	r3, r3, #7
 8013324:	3308      	adds	r3, #8
 8013326:	9303      	str	r3, [sp, #12]
 8013328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801332a:	443b      	add	r3, r7
 801332c:	9309      	str	r3, [sp, #36]	; 0x24
 801332e:	e767      	b.n	8013200 <_vfiprintf_r+0x94>
 8013330:	460c      	mov	r4, r1
 8013332:	2001      	movs	r0, #1
 8013334:	fb0c 3202 	mla	r2, ip, r2, r3
 8013338:	e7a5      	b.n	8013286 <_vfiprintf_r+0x11a>
 801333a:	2300      	movs	r3, #0
 801333c:	f04f 0c0a 	mov.w	ip, #10
 8013340:	4619      	mov	r1, r3
 8013342:	3401      	adds	r4, #1
 8013344:	9305      	str	r3, [sp, #20]
 8013346:	4620      	mov	r0, r4
 8013348:	f810 2b01 	ldrb.w	r2, [r0], #1
 801334c:	3a30      	subs	r2, #48	; 0x30
 801334e:	2a09      	cmp	r2, #9
 8013350:	d903      	bls.n	801335a <_vfiprintf_r+0x1ee>
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0c5      	beq.n	80132e2 <_vfiprintf_r+0x176>
 8013356:	9105      	str	r1, [sp, #20]
 8013358:	e7c3      	b.n	80132e2 <_vfiprintf_r+0x176>
 801335a:	4604      	mov	r4, r0
 801335c:	2301      	movs	r3, #1
 801335e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013362:	e7f0      	b.n	8013346 <_vfiprintf_r+0x1da>
 8013364:	ab03      	add	r3, sp, #12
 8013366:	9300      	str	r3, [sp, #0]
 8013368:	462a      	mov	r2, r5
 801336a:	4630      	mov	r0, r6
 801336c:	4b15      	ldr	r3, [pc, #84]	; (80133c4 <_vfiprintf_r+0x258>)
 801336e:	a904      	add	r1, sp, #16
 8013370:	f3af 8000 	nop.w
 8013374:	4607      	mov	r7, r0
 8013376:	1c78      	adds	r0, r7, #1
 8013378:	d1d6      	bne.n	8013328 <_vfiprintf_r+0x1bc>
 801337a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801337c:	07d9      	lsls	r1, r3, #31
 801337e:	d405      	bmi.n	801338c <_vfiprintf_r+0x220>
 8013380:	89ab      	ldrh	r3, [r5, #12]
 8013382:	059a      	lsls	r2, r3, #22
 8013384:	d402      	bmi.n	801338c <_vfiprintf_r+0x220>
 8013386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013388:	f7ff fe19 	bl	8012fbe <__retarget_lock_release_recursive>
 801338c:	89ab      	ldrh	r3, [r5, #12]
 801338e:	065b      	lsls	r3, r3, #25
 8013390:	f53f af12 	bmi.w	80131b8 <_vfiprintf_r+0x4c>
 8013394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013396:	e711      	b.n	80131bc <_vfiprintf_r+0x50>
 8013398:	ab03      	add	r3, sp, #12
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	462a      	mov	r2, r5
 801339e:	4630      	mov	r0, r6
 80133a0:	4b08      	ldr	r3, [pc, #32]	; (80133c4 <_vfiprintf_r+0x258>)
 80133a2:	a904      	add	r1, sp, #16
 80133a4:	f000 f882 	bl	80134ac <_printf_i>
 80133a8:	e7e4      	b.n	8013374 <_vfiprintf_r+0x208>
 80133aa:	bf00      	nop
 80133ac:	080143cc 	.word	0x080143cc
 80133b0:	080143ec 	.word	0x080143ec
 80133b4:	080143ac 	.word	0x080143ac
 80133b8:	0801440c 	.word	0x0801440c
 80133bc:	08014416 	.word	0x08014416
 80133c0:	00000000 	.word	0x00000000
 80133c4:	08013147 	.word	0x08013147
 80133c8:	08014412 	.word	0x08014412

080133cc <_printf_common>:
 80133cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133d0:	4616      	mov	r6, r2
 80133d2:	4699      	mov	r9, r3
 80133d4:	688a      	ldr	r2, [r1, #8]
 80133d6:	690b      	ldr	r3, [r1, #16]
 80133d8:	4607      	mov	r7, r0
 80133da:	4293      	cmp	r3, r2
 80133dc:	bfb8      	it	lt
 80133de:	4613      	movlt	r3, r2
 80133e0:	6033      	str	r3, [r6, #0]
 80133e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133e6:	460c      	mov	r4, r1
 80133e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133ec:	b10a      	cbz	r2, 80133f2 <_printf_common+0x26>
 80133ee:	3301      	adds	r3, #1
 80133f0:	6033      	str	r3, [r6, #0]
 80133f2:	6823      	ldr	r3, [r4, #0]
 80133f4:	0699      	lsls	r1, r3, #26
 80133f6:	bf42      	ittt	mi
 80133f8:	6833      	ldrmi	r3, [r6, #0]
 80133fa:	3302      	addmi	r3, #2
 80133fc:	6033      	strmi	r3, [r6, #0]
 80133fe:	6825      	ldr	r5, [r4, #0]
 8013400:	f015 0506 	ands.w	r5, r5, #6
 8013404:	d106      	bne.n	8013414 <_printf_common+0x48>
 8013406:	f104 0a19 	add.w	sl, r4, #25
 801340a:	68e3      	ldr	r3, [r4, #12]
 801340c:	6832      	ldr	r2, [r6, #0]
 801340e:	1a9b      	subs	r3, r3, r2
 8013410:	42ab      	cmp	r3, r5
 8013412:	dc28      	bgt.n	8013466 <_printf_common+0x9a>
 8013414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013418:	1e13      	subs	r3, r2, #0
 801341a:	6822      	ldr	r2, [r4, #0]
 801341c:	bf18      	it	ne
 801341e:	2301      	movne	r3, #1
 8013420:	0692      	lsls	r2, r2, #26
 8013422:	d42d      	bmi.n	8013480 <_printf_common+0xb4>
 8013424:	4649      	mov	r1, r9
 8013426:	4638      	mov	r0, r7
 8013428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801342c:	47c0      	blx	r8
 801342e:	3001      	adds	r0, #1
 8013430:	d020      	beq.n	8013474 <_printf_common+0xa8>
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	68e5      	ldr	r5, [r4, #12]
 8013436:	f003 0306 	and.w	r3, r3, #6
 801343a:	2b04      	cmp	r3, #4
 801343c:	bf18      	it	ne
 801343e:	2500      	movne	r5, #0
 8013440:	6832      	ldr	r2, [r6, #0]
 8013442:	f04f 0600 	mov.w	r6, #0
 8013446:	68a3      	ldr	r3, [r4, #8]
 8013448:	bf08      	it	eq
 801344a:	1aad      	subeq	r5, r5, r2
 801344c:	6922      	ldr	r2, [r4, #16]
 801344e:	bf08      	it	eq
 8013450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013454:	4293      	cmp	r3, r2
 8013456:	bfc4      	itt	gt
 8013458:	1a9b      	subgt	r3, r3, r2
 801345a:	18ed      	addgt	r5, r5, r3
 801345c:	341a      	adds	r4, #26
 801345e:	42b5      	cmp	r5, r6
 8013460:	d11a      	bne.n	8013498 <_printf_common+0xcc>
 8013462:	2000      	movs	r0, #0
 8013464:	e008      	b.n	8013478 <_printf_common+0xac>
 8013466:	2301      	movs	r3, #1
 8013468:	4652      	mov	r2, sl
 801346a:	4649      	mov	r1, r9
 801346c:	4638      	mov	r0, r7
 801346e:	47c0      	blx	r8
 8013470:	3001      	adds	r0, #1
 8013472:	d103      	bne.n	801347c <_printf_common+0xb0>
 8013474:	f04f 30ff 	mov.w	r0, #4294967295
 8013478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347c:	3501      	adds	r5, #1
 801347e:	e7c4      	b.n	801340a <_printf_common+0x3e>
 8013480:	2030      	movs	r0, #48	; 0x30
 8013482:	18e1      	adds	r1, r4, r3
 8013484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013488:	1c5a      	adds	r2, r3, #1
 801348a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801348e:	4422      	add	r2, r4
 8013490:	3302      	adds	r3, #2
 8013492:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013496:	e7c5      	b.n	8013424 <_printf_common+0x58>
 8013498:	2301      	movs	r3, #1
 801349a:	4622      	mov	r2, r4
 801349c:	4649      	mov	r1, r9
 801349e:	4638      	mov	r0, r7
 80134a0:	47c0      	blx	r8
 80134a2:	3001      	adds	r0, #1
 80134a4:	d0e6      	beq.n	8013474 <_printf_common+0xa8>
 80134a6:	3601      	adds	r6, #1
 80134a8:	e7d9      	b.n	801345e <_printf_common+0x92>
	...

080134ac <_printf_i>:
 80134ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134b0:	460c      	mov	r4, r1
 80134b2:	7e27      	ldrb	r7, [r4, #24]
 80134b4:	4691      	mov	r9, r2
 80134b6:	2f78      	cmp	r7, #120	; 0x78
 80134b8:	4680      	mov	r8, r0
 80134ba:	469a      	mov	sl, r3
 80134bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80134be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134c2:	d807      	bhi.n	80134d4 <_printf_i+0x28>
 80134c4:	2f62      	cmp	r7, #98	; 0x62
 80134c6:	d80a      	bhi.n	80134de <_printf_i+0x32>
 80134c8:	2f00      	cmp	r7, #0
 80134ca:	f000 80d9 	beq.w	8013680 <_printf_i+0x1d4>
 80134ce:	2f58      	cmp	r7, #88	; 0x58
 80134d0:	f000 80a4 	beq.w	801361c <_printf_i+0x170>
 80134d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80134d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134dc:	e03a      	b.n	8013554 <_printf_i+0xa8>
 80134de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134e2:	2b15      	cmp	r3, #21
 80134e4:	d8f6      	bhi.n	80134d4 <_printf_i+0x28>
 80134e6:	a001      	add	r0, pc, #4	; (adr r0, 80134ec <_printf_i+0x40>)
 80134e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80134ec:	08013545 	.word	0x08013545
 80134f0:	08013559 	.word	0x08013559
 80134f4:	080134d5 	.word	0x080134d5
 80134f8:	080134d5 	.word	0x080134d5
 80134fc:	080134d5 	.word	0x080134d5
 8013500:	080134d5 	.word	0x080134d5
 8013504:	08013559 	.word	0x08013559
 8013508:	080134d5 	.word	0x080134d5
 801350c:	080134d5 	.word	0x080134d5
 8013510:	080134d5 	.word	0x080134d5
 8013514:	080134d5 	.word	0x080134d5
 8013518:	08013667 	.word	0x08013667
 801351c:	08013589 	.word	0x08013589
 8013520:	08013649 	.word	0x08013649
 8013524:	080134d5 	.word	0x080134d5
 8013528:	080134d5 	.word	0x080134d5
 801352c:	08013689 	.word	0x08013689
 8013530:	080134d5 	.word	0x080134d5
 8013534:	08013589 	.word	0x08013589
 8013538:	080134d5 	.word	0x080134d5
 801353c:	080134d5 	.word	0x080134d5
 8013540:	08013651 	.word	0x08013651
 8013544:	680b      	ldr	r3, [r1, #0]
 8013546:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801354a:	1d1a      	adds	r2, r3, #4
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	600a      	str	r2, [r1, #0]
 8013550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013554:	2301      	movs	r3, #1
 8013556:	e0a4      	b.n	80136a2 <_printf_i+0x1f6>
 8013558:	6825      	ldr	r5, [r4, #0]
 801355a:	6808      	ldr	r0, [r1, #0]
 801355c:	062e      	lsls	r6, r5, #24
 801355e:	f100 0304 	add.w	r3, r0, #4
 8013562:	d50a      	bpl.n	801357a <_printf_i+0xce>
 8013564:	6805      	ldr	r5, [r0, #0]
 8013566:	600b      	str	r3, [r1, #0]
 8013568:	2d00      	cmp	r5, #0
 801356a:	da03      	bge.n	8013574 <_printf_i+0xc8>
 801356c:	232d      	movs	r3, #45	; 0x2d
 801356e:	426d      	negs	r5, r5
 8013570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013574:	230a      	movs	r3, #10
 8013576:	485e      	ldr	r0, [pc, #376]	; (80136f0 <_printf_i+0x244>)
 8013578:	e019      	b.n	80135ae <_printf_i+0x102>
 801357a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801357e:	6805      	ldr	r5, [r0, #0]
 8013580:	600b      	str	r3, [r1, #0]
 8013582:	bf18      	it	ne
 8013584:	b22d      	sxthne	r5, r5
 8013586:	e7ef      	b.n	8013568 <_printf_i+0xbc>
 8013588:	680b      	ldr	r3, [r1, #0]
 801358a:	6825      	ldr	r5, [r4, #0]
 801358c:	1d18      	adds	r0, r3, #4
 801358e:	6008      	str	r0, [r1, #0]
 8013590:	0628      	lsls	r0, r5, #24
 8013592:	d501      	bpl.n	8013598 <_printf_i+0xec>
 8013594:	681d      	ldr	r5, [r3, #0]
 8013596:	e002      	b.n	801359e <_printf_i+0xf2>
 8013598:	0669      	lsls	r1, r5, #25
 801359a:	d5fb      	bpl.n	8013594 <_printf_i+0xe8>
 801359c:	881d      	ldrh	r5, [r3, #0]
 801359e:	2f6f      	cmp	r7, #111	; 0x6f
 80135a0:	bf0c      	ite	eq
 80135a2:	2308      	moveq	r3, #8
 80135a4:	230a      	movne	r3, #10
 80135a6:	4852      	ldr	r0, [pc, #328]	; (80136f0 <_printf_i+0x244>)
 80135a8:	2100      	movs	r1, #0
 80135aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135ae:	6866      	ldr	r6, [r4, #4]
 80135b0:	2e00      	cmp	r6, #0
 80135b2:	bfa8      	it	ge
 80135b4:	6821      	ldrge	r1, [r4, #0]
 80135b6:	60a6      	str	r6, [r4, #8]
 80135b8:	bfa4      	itt	ge
 80135ba:	f021 0104 	bicge.w	r1, r1, #4
 80135be:	6021      	strge	r1, [r4, #0]
 80135c0:	b90d      	cbnz	r5, 80135c6 <_printf_i+0x11a>
 80135c2:	2e00      	cmp	r6, #0
 80135c4:	d04d      	beq.n	8013662 <_printf_i+0x1b6>
 80135c6:	4616      	mov	r6, r2
 80135c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80135cc:	fb03 5711 	mls	r7, r3, r1, r5
 80135d0:	5dc7      	ldrb	r7, [r0, r7]
 80135d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135d6:	462f      	mov	r7, r5
 80135d8:	42bb      	cmp	r3, r7
 80135da:	460d      	mov	r5, r1
 80135dc:	d9f4      	bls.n	80135c8 <_printf_i+0x11c>
 80135de:	2b08      	cmp	r3, #8
 80135e0:	d10b      	bne.n	80135fa <_printf_i+0x14e>
 80135e2:	6823      	ldr	r3, [r4, #0]
 80135e4:	07df      	lsls	r7, r3, #31
 80135e6:	d508      	bpl.n	80135fa <_printf_i+0x14e>
 80135e8:	6923      	ldr	r3, [r4, #16]
 80135ea:	6861      	ldr	r1, [r4, #4]
 80135ec:	4299      	cmp	r1, r3
 80135ee:	bfde      	ittt	le
 80135f0:	2330      	movle	r3, #48	; 0x30
 80135f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135fa:	1b92      	subs	r2, r2, r6
 80135fc:	6122      	str	r2, [r4, #16]
 80135fe:	464b      	mov	r3, r9
 8013600:	4621      	mov	r1, r4
 8013602:	4640      	mov	r0, r8
 8013604:	f8cd a000 	str.w	sl, [sp]
 8013608:	aa03      	add	r2, sp, #12
 801360a:	f7ff fedf 	bl	80133cc <_printf_common>
 801360e:	3001      	adds	r0, #1
 8013610:	d14c      	bne.n	80136ac <_printf_i+0x200>
 8013612:	f04f 30ff 	mov.w	r0, #4294967295
 8013616:	b004      	add	sp, #16
 8013618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801361c:	4834      	ldr	r0, [pc, #208]	; (80136f0 <_printf_i+0x244>)
 801361e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013622:	680e      	ldr	r6, [r1, #0]
 8013624:	6823      	ldr	r3, [r4, #0]
 8013626:	f856 5b04 	ldr.w	r5, [r6], #4
 801362a:	061f      	lsls	r7, r3, #24
 801362c:	600e      	str	r6, [r1, #0]
 801362e:	d514      	bpl.n	801365a <_printf_i+0x1ae>
 8013630:	07d9      	lsls	r1, r3, #31
 8013632:	bf44      	itt	mi
 8013634:	f043 0320 	orrmi.w	r3, r3, #32
 8013638:	6023      	strmi	r3, [r4, #0]
 801363a:	b91d      	cbnz	r5, 8013644 <_printf_i+0x198>
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	f023 0320 	bic.w	r3, r3, #32
 8013642:	6023      	str	r3, [r4, #0]
 8013644:	2310      	movs	r3, #16
 8013646:	e7af      	b.n	80135a8 <_printf_i+0xfc>
 8013648:	6823      	ldr	r3, [r4, #0]
 801364a:	f043 0320 	orr.w	r3, r3, #32
 801364e:	6023      	str	r3, [r4, #0]
 8013650:	2378      	movs	r3, #120	; 0x78
 8013652:	4828      	ldr	r0, [pc, #160]	; (80136f4 <_printf_i+0x248>)
 8013654:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013658:	e7e3      	b.n	8013622 <_printf_i+0x176>
 801365a:	065e      	lsls	r6, r3, #25
 801365c:	bf48      	it	mi
 801365e:	b2ad      	uxthmi	r5, r5
 8013660:	e7e6      	b.n	8013630 <_printf_i+0x184>
 8013662:	4616      	mov	r6, r2
 8013664:	e7bb      	b.n	80135de <_printf_i+0x132>
 8013666:	680b      	ldr	r3, [r1, #0]
 8013668:	6826      	ldr	r6, [r4, #0]
 801366a:	1d1d      	adds	r5, r3, #4
 801366c:	6960      	ldr	r0, [r4, #20]
 801366e:	600d      	str	r5, [r1, #0]
 8013670:	0635      	lsls	r5, r6, #24
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	d501      	bpl.n	801367a <_printf_i+0x1ce>
 8013676:	6018      	str	r0, [r3, #0]
 8013678:	e002      	b.n	8013680 <_printf_i+0x1d4>
 801367a:	0671      	lsls	r1, r6, #25
 801367c:	d5fb      	bpl.n	8013676 <_printf_i+0x1ca>
 801367e:	8018      	strh	r0, [r3, #0]
 8013680:	2300      	movs	r3, #0
 8013682:	4616      	mov	r6, r2
 8013684:	6123      	str	r3, [r4, #16]
 8013686:	e7ba      	b.n	80135fe <_printf_i+0x152>
 8013688:	680b      	ldr	r3, [r1, #0]
 801368a:	1d1a      	adds	r2, r3, #4
 801368c:	600a      	str	r2, [r1, #0]
 801368e:	681e      	ldr	r6, [r3, #0]
 8013690:	2100      	movs	r1, #0
 8013692:	4630      	mov	r0, r6
 8013694:	6862      	ldr	r2, [r4, #4]
 8013696:	f000 faa5 	bl	8013be4 <memchr>
 801369a:	b108      	cbz	r0, 80136a0 <_printf_i+0x1f4>
 801369c:	1b80      	subs	r0, r0, r6
 801369e:	6060      	str	r0, [r4, #4]
 80136a0:	6863      	ldr	r3, [r4, #4]
 80136a2:	6123      	str	r3, [r4, #16]
 80136a4:	2300      	movs	r3, #0
 80136a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136aa:	e7a8      	b.n	80135fe <_printf_i+0x152>
 80136ac:	4632      	mov	r2, r6
 80136ae:	4649      	mov	r1, r9
 80136b0:	4640      	mov	r0, r8
 80136b2:	6923      	ldr	r3, [r4, #16]
 80136b4:	47d0      	blx	sl
 80136b6:	3001      	adds	r0, #1
 80136b8:	d0ab      	beq.n	8013612 <_printf_i+0x166>
 80136ba:	6823      	ldr	r3, [r4, #0]
 80136bc:	079b      	lsls	r3, r3, #30
 80136be:	d413      	bmi.n	80136e8 <_printf_i+0x23c>
 80136c0:	68e0      	ldr	r0, [r4, #12]
 80136c2:	9b03      	ldr	r3, [sp, #12]
 80136c4:	4298      	cmp	r0, r3
 80136c6:	bfb8      	it	lt
 80136c8:	4618      	movlt	r0, r3
 80136ca:	e7a4      	b.n	8013616 <_printf_i+0x16a>
 80136cc:	2301      	movs	r3, #1
 80136ce:	4632      	mov	r2, r6
 80136d0:	4649      	mov	r1, r9
 80136d2:	4640      	mov	r0, r8
 80136d4:	47d0      	blx	sl
 80136d6:	3001      	adds	r0, #1
 80136d8:	d09b      	beq.n	8013612 <_printf_i+0x166>
 80136da:	3501      	adds	r5, #1
 80136dc:	68e3      	ldr	r3, [r4, #12]
 80136de:	9903      	ldr	r1, [sp, #12]
 80136e0:	1a5b      	subs	r3, r3, r1
 80136e2:	42ab      	cmp	r3, r5
 80136e4:	dcf2      	bgt.n	80136cc <_printf_i+0x220>
 80136e6:	e7eb      	b.n	80136c0 <_printf_i+0x214>
 80136e8:	2500      	movs	r5, #0
 80136ea:	f104 0619 	add.w	r6, r4, #25
 80136ee:	e7f5      	b.n	80136dc <_printf_i+0x230>
 80136f0:	0801441d 	.word	0x0801441d
 80136f4:	0801442e 	.word	0x0801442e

080136f8 <_sbrk_r>:
 80136f8:	b538      	push	{r3, r4, r5, lr}
 80136fa:	2300      	movs	r3, #0
 80136fc:	4d05      	ldr	r5, [pc, #20]	; (8013714 <_sbrk_r+0x1c>)
 80136fe:	4604      	mov	r4, r0
 8013700:	4608      	mov	r0, r1
 8013702:	602b      	str	r3, [r5, #0]
 8013704:	f7f2 fab6 	bl	8005c74 <_sbrk>
 8013708:	1c43      	adds	r3, r0, #1
 801370a:	d102      	bne.n	8013712 <_sbrk_r+0x1a>
 801370c:	682b      	ldr	r3, [r5, #0]
 801370e:	b103      	cbz	r3, 8013712 <_sbrk_r+0x1a>
 8013710:	6023      	str	r3, [r4, #0]
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	20001950 	.word	0x20001950

08013718 <__sread>:
 8013718:	b510      	push	{r4, lr}
 801371a:	460c      	mov	r4, r1
 801371c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013720:	f000 fa7a 	bl	8013c18 <_read_r>
 8013724:	2800      	cmp	r0, #0
 8013726:	bfab      	itete	ge
 8013728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801372a:	89a3      	ldrhlt	r3, [r4, #12]
 801372c:	181b      	addge	r3, r3, r0
 801372e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013732:	bfac      	ite	ge
 8013734:	6563      	strge	r3, [r4, #84]	; 0x54
 8013736:	81a3      	strhlt	r3, [r4, #12]
 8013738:	bd10      	pop	{r4, pc}

0801373a <__swrite>:
 801373a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373e:	461f      	mov	r7, r3
 8013740:	898b      	ldrh	r3, [r1, #12]
 8013742:	4605      	mov	r5, r0
 8013744:	05db      	lsls	r3, r3, #23
 8013746:	460c      	mov	r4, r1
 8013748:	4616      	mov	r6, r2
 801374a:	d505      	bpl.n	8013758 <__swrite+0x1e>
 801374c:	2302      	movs	r3, #2
 801374e:	2200      	movs	r2, #0
 8013750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013754:	f000 f9d0 	bl	8013af8 <_lseek_r>
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	4632      	mov	r2, r6
 801375c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013760:	81a3      	strh	r3, [r4, #12]
 8013762:	4628      	mov	r0, r5
 8013764:	463b      	mov	r3, r7
 8013766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801376a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801376e:	f000 b869 	b.w	8013844 <_write_r>

08013772 <__sseek>:
 8013772:	b510      	push	{r4, lr}
 8013774:	460c      	mov	r4, r1
 8013776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801377a:	f000 f9bd 	bl	8013af8 <_lseek_r>
 801377e:	1c43      	adds	r3, r0, #1
 8013780:	89a3      	ldrh	r3, [r4, #12]
 8013782:	bf15      	itete	ne
 8013784:	6560      	strne	r0, [r4, #84]	; 0x54
 8013786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801378a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801378e:	81a3      	strheq	r3, [r4, #12]
 8013790:	bf18      	it	ne
 8013792:	81a3      	strhne	r3, [r4, #12]
 8013794:	bd10      	pop	{r4, pc}

08013796 <__sclose>:
 8013796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801379a:	f000 b8db 	b.w	8013954 <_close_r>
	...

080137a0 <__swbuf_r>:
 80137a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a2:	460e      	mov	r6, r1
 80137a4:	4614      	mov	r4, r2
 80137a6:	4605      	mov	r5, r0
 80137a8:	b118      	cbz	r0, 80137b2 <__swbuf_r+0x12>
 80137aa:	6983      	ldr	r3, [r0, #24]
 80137ac:	b90b      	cbnz	r3, 80137b2 <__swbuf_r+0x12>
 80137ae:	f7ff fb55 	bl	8012e5c <__sinit>
 80137b2:	4b21      	ldr	r3, [pc, #132]	; (8013838 <__swbuf_r+0x98>)
 80137b4:	429c      	cmp	r4, r3
 80137b6:	d12b      	bne.n	8013810 <__swbuf_r+0x70>
 80137b8:	686c      	ldr	r4, [r5, #4]
 80137ba:	69a3      	ldr	r3, [r4, #24]
 80137bc:	60a3      	str	r3, [r4, #8]
 80137be:	89a3      	ldrh	r3, [r4, #12]
 80137c0:	071a      	lsls	r2, r3, #28
 80137c2:	d52f      	bpl.n	8013824 <__swbuf_r+0x84>
 80137c4:	6923      	ldr	r3, [r4, #16]
 80137c6:	b36b      	cbz	r3, 8013824 <__swbuf_r+0x84>
 80137c8:	6923      	ldr	r3, [r4, #16]
 80137ca:	6820      	ldr	r0, [r4, #0]
 80137cc:	b2f6      	uxtb	r6, r6
 80137ce:	1ac0      	subs	r0, r0, r3
 80137d0:	6963      	ldr	r3, [r4, #20]
 80137d2:	4637      	mov	r7, r6
 80137d4:	4283      	cmp	r3, r0
 80137d6:	dc04      	bgt.n	80137e2 <__swbuf_r+0x42>
 80137d8:	4621      	mov	r1, r4
 80137da:	4628      	mov	r0, r5
 80137dc:	f000 f950 	bl	8013a80 <_fflush_r>
 80137e0:	bb30      	cbnz	r0, 8013830 <__swbuf_r+0x90>
 80137e2:	68a3      	ldr	r3, [r4, #8]
 80137e4:	3001      	adds	r0, #1
 80137e6:	3b01      	subs	r3, #1
 80137e8:	60a3      	str	r3, [r4, #8]
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	1c5a      	adds	r2, r3, #1
 80137ee:	6022      	str	r2, [r4, #0]
 80137f0:	701e      	strb	r6, [r3, #0]
 80137f2:	6963      	ldr	r3, [r4, #20]
 80137f4:	4283      	cmp	r3, r0
 80137f6:	d004      	beq.n	8013802 <__swbuf_r+0x62>
 80137f8:	89a3      	ldrh	r3, [r4, #12]
 80137fa:	07db      	lsls	r3, r3, #31
 80137fc:	d506      	bpl.n	801380c <__swbuf_r+0x6c>
 80137fe:	2e0a      	cmp	r6, #10
 8013800:	d104      	bne.n	801380c <__swbuf_r+0x6c>
 8013802:	4621      	mov	r1, r4
 8013804:	4628      	mov	r0, r5
 8013806:	f000 f93b 	bl	8013a80 <_fflush_r>
 801380a:	b988      	cbnz	r0, 8013830 <__swbuf_r+0x90>
 801380c:	4638      	mov	r0, r7
 801380e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013810:	4b0a      	ldr	r3, [pc, #40]	; (801383c <__swbuf_r+0x9c>)
 8013812:	429c      	cmp	r4, r3
 8013814:	d101      	bne.n	801381a <__swbuf_r+0x7a>
 8013816:	68ac      	ldr	r4, [r5, #8]
 8013818:	e7cf      	b.n	80137ba <__swbuf_r+0x1a>
 801381a:	4b09      	ldr	r3, [pc, #36]	; (8013840 <__swbuf_r+0xa0>)
 801381c:	429c      	cmp	r4, r3
 801381e:	bf08      	it	eq
 8013820:	68ec      	ldreq	r4, [r5, #12]
 8013822:	e7ca      	b.n	80137ba <__swbuf_r+0x1a>
 8013824:	4621      	mov	r1, r4
 8013826:	4628      	mov	r0, r5
 8013828:	f000 f81e 	bl	8013868 <__swsetup_r>
 801382c:	2800      	cmp	r0, #0
 801382e:	d0cb      	beq.n	80137c8 <__swbuf_r+0x28>
 8013830:	f04f 37ff 	mov.w	r7, #4294967295
 8013834:	e7ea      	b.n	801380c <__swbuf_r+0x6c>
 8013836:	bf00      	nop
 8013838:	080143cc 	.word	0x080143cc
 801383c:	080143ec 	.word	0x080143ec
 8013840:	080143ac 	.word	0x080143ac

08013844 <_write_r>:
 8013844:	b538      	push	{r3, r4, r5, lr}
 8013846:	4604      	mov	r4, r0
 8013848:	4608      	mov	r0, r1
 801384a:	4611      	mov	r1, r2
 801384c:	2200      	movs	r2, #0
 801384e:	4d05      	ldr	r5, [pc, #20]	; (8013864 <_write_r+0x20>)
 8013850:	602a      	str	r2, [r5, #0]
 8013852:	461a      	mov	r2, r3
 8013854:	f7f2 f9c2 	bl	8005bdc <_write>
 8013858:	1c43      	adds	r3, r0, #1
 801385a:	d102      	bne.n	8013862 <_write_r+0x1e>
 801385c:	682b      	ldr	r3, [r5, #0]
 801385e:	b103      	cbz	r3, 8013862 <_write_r+0x1e>
 8013860:	6023      	str	r3, [r4, #0]
 8013862:	bd38      	pop	{r3, r4, r5, pc}
 8013864:	20001950 	.word	0x20001950

08013868 <__swsetup_r>:
 8013868:	4b32      	ldr	r3, [pc, #200]	; (8013934 <__swsetup_r+0xcc>)
 801386a:	b570      	push	{r4, r5, r6, lr}
 801386c:	681d      	ldr	r5, [r3, #0]
 801386e:	4606      	mov	r6, r0
 8013870:	460c      	mov	r4, r1
 8013872:	b125      	cbz	r5, 801387e <__swsetup_r+0x16>
 8013874:	69ab      	ldr	r3, [r5, #24]
 8013876:	b913      	cbnz	r3, 801387e <__swsetup_r+0x16>
 8013878:	4628      	mov	r0, r5
 801387a:	f7ff faef 	bl	8012e5c <__sinit>
 801387e:	4b2e      	ldr	r3, [pc, #184]	; (8013938 <__swsetup_r+0xd0>)
 8013880:	429c      	cmp	r4, r3
 8013882:	d10f      	bne.n	80138a4 <__swsetup_r+0x3c>
 8013884:	686c      	ldr	r4, [r5, #4]
 8013886:	89a3      	ldrh	r3, [r4, #12]
 8013888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801388c:	0719      	lsls	r1, r3, #28
 801388e:	d42c      	bmi.n	80138ea <__swsetup_r+0x82>
 8013890:	06dd      	lsls	r5, r3, #27
 8013892:	d411      	bmi.n	80138b8 <__swsetup_r+0x50>
 8013894:	2309      	movs	r3, #9
 8013896:	6033      	str	r3, [r6, #0]
 8013898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801389c:	f04f 30ff 	mov.w	r0, #4294967295
 80138a0:	81a3      	strh	r3, [r4, #12]
 80138a2:	e03e      	b.n	8013922 <__swsetup_r+0xba>
 80138a4:	4b25      	ldr	r3, [pc, #148]	; (801393c <__swsetup_r+0xd4>)
 80138a6:	429c      	cmp	r4, r3
 80138a8:	d101      	bne.n	80138ae <__swsetup_r+0x46>
 80138aa:	68ac      	ldr	r4, [r5, #8]
 80138ac:	e7eb      	b.n	8013886 <__swsetup_r+0x1e>
 80138ae:	4b24      	ldr	r3, [pc, #144]	; (8013940 <__swsetup_r+0xd8>)
 80138b0:	429c      	cmp	r4, r3
 80138b2:	bf08      	it	eq
 80138b4:	68ec      	ldreq	r4, [r5, #12]
 80138b6:	e7e6      	b.n	8013886 <__swsetup_r+0x1e>
 80138b8:	0758      	lsls	r0, r3, #29
 80138ba:	d512      	bpl.n	80138e2 <__swsetup_r+0x7a>
 80138bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138be:	b141      	cbz	r1, 80138d2 <__swsetup_r+0x6a>
 80138c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138c4:	4299      	cmp	r1, r3
 80138c6:	d002      	beq.n	80138ce <__swsetup_r+0x66>
 80138c8:	4630      	mov	r0, r6
 80138ca:	f7ff fb81 	bl	8012fd0 <_free_r>
 80138ce:	2300      	movs	r3, #0
 80138d0:	6363      	str	r3, [r4, #52]	; 0x34
 80138d2:	89a3      	ldrh	r3, [r4, #12]
 80138d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138d8:	81a3      	strh	r3, [r4, #12]
 80138da:	2300      	movs	r3, #0
 80138dc:	6063      	str	r3, [r4, #4]
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	89a3      	ldrh	r3, [r4, #12]
 80138e4:	f043 0308 	orr.w	r3, r3, #8
 80138e8:	81a3      	strh	r3, [r4, #12]
 80138ea:	6923      	ldr	r3, [r4, #16]
 80138ec:	b94b      	cbnz	r3, 8013902 <__swsetup_r+0x9a>
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80138f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138f8:	d003      	beq.n	8013902 <__swsetup_r+0x9a>
 80138fa:	4621      	mov	r1, r4
 80138fc:	4630      	mov	r0, r6
 80138fe:	f000 f931 	bl	8013b64 <__smakebuf_r>
 8013902:	89a0      	ldrh	r0, [r4, #12]
 8013904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013908:	f010 0301 	ands.w	r3, r0, #1
 801390c:	d00a      	beq.n	8013924 <__swsetup_r+0xbc>
 801390e:	2300      	movs	r3, #0
 8013910:	60a3      	str	r3, [r4, #8]
 8013912:	6963      	ldr	r3, [r4, #20]
 8013914:	425b      	negs	r3, r3
 8013916:	61a3      	str	r3, [r4, #24]
 8013918:	6923      	ldr	r3, [r4, #16]
 801391a:	b943      	cbnz	r3, 801392e <__swsetup_r+0xc6>
 801391c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013920:	d1ba      	bne.n	8013898 <__swsetup_r+0x30>
 8013922:	bd70      	pop	{r4, r5, r6, pc}
 8013924:	0781      	lsls	r1, r0, #30
 8013926:	bf58      	it	pl
 8013928:	6963      	ldrpl	r3, [r4, #20]
 801392a:	60a3      	str	r3, [r4, #8]
 801392c:	e7f4      	b.n	8013918 <__swsetup_r+0xb0>
 801392e:	2000      	movs	r0, #0
 8013930:	e7f7      	b.n	8013922 <__swsetup_r+0xba>
 8013932:	bf00      	nop
 8013934:	20000010 	.word	0x20000010
 8013938:	080143cc 	.word	0x080143cc
 801393c:	080143ec 	.word	0x080143ec
 8013940:	080143ac 	.word	0x080143ac

08013944 <abort>:
 8013944:	2006      	movs	r0, #6
 8013946:	b508      	push	{r3, lr}
 8013948:	f000 f9a0 	bl	8013c8c <raise>
 801394c:	2001      	movs	r0, #1
 801394e:	f7f2 f91e 	bl	8005b8e <_exit>
	...

08013954 <_close_r>:
 8013954:	b538      	push	{r3, r4, r5, lr}
 8013956:	2300      	movs	r3, #0
 8013958:	4d05      	ldr	r5, [pc, #20]	; (8013970 <_close_r+0x1c>)
 801395a:	4604      	mov	r4, r0
 801395c:	4608      	mov	r0, r1
 801395e:	602b      	str	r3, [r5, #0]
 8013960:	f7f2 f958 	bl	8005c14 <_close>
 8013964:	1c43      	adds	r3, r0, #1
 8013966:	d102      	bne.n	801396e <_close_r+0x1a>
 8013968:	682b      	ldr	r3, [r5, #0]
 801396a:	b103      	cbz	r3, 801396e <_close_r+0x1a>
 801396c:	6023      	str	r3, [r4, #0]
 801396e:	bd38      	pop	{r3, r4, r5, pc}
 8013970:	20001950 	.word	0x20001950

08013974 <__sflush_r>:
 8013974:	898a      	ldrh	r2, [r1, #12]
 8013976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801397a:	4605      	mov	r5, r0
 801397c:	0710      	lsls	r0, r2, #28
 801397e:	460c      	mov	r4, r1
 8013980:	d458      	bmi.n	8013a34 <__sflush_r+0xc0>
 8013982:	684b      	ldr	r3, [r1, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	dc05      	bgt.n	8013994 <__sflush_r+0x20>
 8013988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801398a:	2b00      	cmp	r3, #0
 801398c:	dc02      	bgt.n	8013994 <__sflush_r+0x20>
 801398e:	2000      	movs	r0, #0
 8013990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013996:	2e00      	cmp	r6, #0
 8013998:	d0f9      	beq.n	801398e <__sflush_r+0x1a>
 801399a:	2300      	movs	r3, #0
 801399c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139a0:	682f      	ldr	r7, [r5, #0]
 80139a2:	602b      	str	r3, [r5, #0]
 80139a4:	d032      	beq.n	8013a0c <__sflush_r+0x98>
 80139a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139a8:	89a3      	ldrh	r3, [r4, #12]
 80139aa:	075a      	lsls	r2, r3, #29
 80139ac:	d505      	bpl.n	80139ba <__sflush_r+0x46>
 80139ae:	6863      	ldr	r3, [r4, #4]
 80139b0:	1ac0      	subs	r0, r0, r3
 80139b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139b4:	b10b      	cbz	r3, 80139ba <__sflush_r+0x46>
 80139b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139b8:	1ac0      	subs	r0, r0, r3
 80139ba:	2300      	movs	r3, #0
 80139bc:	4602      	mov	r2, r0
 80139be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139c0:	4628      	mov	r0, r5
 80139c2:	6a21      	ldr	r1, [r4, #32]
 80139c4:	47b0      	blx	r6
 80139c6:	1c43      	adds	r3, r0, #1
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	d106      	bne.n	80139da <__sflush_r+0x66>
 80139cc:	6829      	ldr	r1, [r5, #0]
 80139ce:	291d      	cmp	r1, #29
 80139d0:	d82c      	bhi.n	8013a2c <__sflush_r+0xb8>
 80139d2:	4a2a      	ldr	r2, [pc, #168]	; (8013a7c <__sflush_r+0x108>)
 80139d4:	40ca      	lsrs	r2, r1
 80139d6:	07d6      	lsls	r6, r2, #31
 80139d8:	d528      	bpl.n	8013a2c <__sflush_r+0xb8>
 80139da:	2200      	movs	r2, #0
 80139dc:	6062      	str	r2, [r4, #4]
 80139de:	6922      	ldr	r2, [r4, #16]
 80139e0:	04d9      	lsls	r1, r3, #19
 80139e2:	6022      	str	r2, [r4, #0]
 80139e4:	d504      	bpl.n	80139f0 <__sflush_r+0x7c>
 80139e6:	1c42      	adds	r2, r0, #1
 80139e8:	d101      	bne.n	80139ee <__sflush_r+0x7a>
 80139ea:	682b      	ldr	r3, [r5, #0]
 80139ec:	b903      	cbnz	r3, 80139f0 <__sflush_r+0x7c>
 80139ee:	6560      	str	r0, [r4, #84]	; 0x54
 80139f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139f2:	602f      	str	r7, [r5, #0]
 80139f4:	2900      	cmp	r1, #0
 80139f6:	d0ca      	beq.n	801398e <__sflush_r+0x1a>
 80139f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139fc:	4299      	cmp	r1, r3
 80139fe:	d002      	beq.n	8013a06 <__sflush_r+0x92>
 8013a00:	4628      	mov	r0, r5
 8013a02:	f7ff fae5 	bl	8012fd0 <_free_r>
 8013a06:	2000      	movs	r0, #0
 8013a08:	6360      	str	r0, [r4, #52]	; 0x34
 8013a0a:	e7c1      	b.n	8013990 <__sflush_r+0x1c>
 8013a0c:	6a21      	ldr	r1, [r4, #32]
 8013a0e:	2301      	movs	r3, #1
 8013a10:	4628      	mov	r0, r5
 8013a12:	47b0      	blx	r6
 8013a14:	1c41      	adds	r1, r0, #1
 8013a16:	d1c7      	bne.n	80139a8 <__sflush_r+0x34>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d0c4      	beq.n	80139a8 <__sflush_r+0x34>
 8013a1e:	2b1d      	cmp	r3, #29
 8013a20:	d001      	beq.n	8013a26 <__sflush_r+0xb2>
 8013a22:	2b16      	cmp	r3, #22
 8013a24:	d101      	bne.n	8013a2a <__sflush_r+0xb6>
 8013a26:	602f      	str	r7, [r5, #0]
 8013a28:	e7b1      	b.n	801398e <__sflush_r+0x1a>
 8013a2a:	89a3      	ldrh	r3, [r4, #12]
 8013a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a30:	81a3      	strh	r3, [r4, #12]
 8013a32:	e7ad      	b.n	8013990 <__sflush_r+0x1c>
 8013a34:	690f      	ldr	r7, [r1, #16]
 8013a36:	2f00      	cmp	r7, #0
 8013a38:	d0a9      	beq.n	801398e <__sflush_r+0x1a>
 8013a3a:	0793      	lsls	r3, r2, #30
 8013a3c:	bf18      	it	ne
 8013a3e:	2300      	movne	r3, #0
 8013a40:	680e      	ldr	r6, [r1, #0]
 8013a42:	bf08      	it	eq
 8013a44:	694b      	ldreq	r3, [r1, #20]
 8013a46:	eba6 0807 	sub.w	r8, r6, r7
 8013a4a:	600f      	str	r7, [r1, #0]
 8013a4c:	608b      	str	r3, [r1, #8]
 8013a4e:	f1b8 0f00 	cmp.w	r8, #0
 8013a52:	dd9c      	ble.n	801398e <__sflush_r+0x1a>
 8013a54:	4643      	mov	r3, r8
 8013a56:	463a      	mov	r2, r7
 8013a58:	4628      	mov	r0, r5
 8013a5a:	6a21      	ldr	r1, [r4, #32]
 8013a5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a5e:	47b0      	blx	r6
 8013a60:	2800      	cmp	r0, #0
 8013a62:	dc06      	bgt.n	8013a72 <__sflush_r+0xfe>
 8013a64:	89a3      	ldrh	r3, [r4, #12]
 8013a66:	f04f 30ff 	mov.w	r0, #4294967295
 8013a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a6e:	81a3      	strh	r3, [r4, #12]
 8013a70:	e78e      	b.n	8013990 <__sflush_r+0x1c>
 8013a72:	4407      	add	r7, r0
 8013a74:	eba8 0800 	sub.w	r8, r8, r0
 8013a78:	e7e9      	b.n	8013a4e <__sflush_r+0xda>
 8013a7a:	bf00      	nop
 8013a7c:	20400001 	.word	0x20400001

08013a80 <_fflush_r>:
 8013a80:	b538      	push	{r3, r4, r5, lr}
 8013a82:	690b      	ldr	r3, [r1, #16]
 8013a84:	4605      	mov	r5, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	b913      	cbnz	r3, 8013a90 <_fflush_r+0x10>
 8013a8a:	2500      	movs	r5, #0
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	bd38      	pop	{r3, r4, r5, pc}
 8013a90:	b118      	cbz	r0, 8013a9a <_fflush_r+0x1a>
 8013a92:	6983      	ldr	r3, [r0, #24]
 8013a94:	b90b      	cbnz	r3, 8013a9a <_fflush_r+0x1a>
 8013a96:	f7ff f9e1 	bl	8012e5c <__sinit>
 8013a9a:	4b14      	ldr	r3, [pc, #80]	; (8013aec <_fflush_r+0x6c>)
 8013a9c:	429c      	cmp	r4, r3
 8013a9e:	d11b      	bne.n	8013ad8 <_fflush_r+0x58>
 8013aa0:	686c      	ldr	r4, [r5, #4]
 8013aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d0ef      	beq.n	8013a8a <_fflush_r+0xa>
 8013aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013aac:	07d0      	lsls	r0, r2, #31
 8013aae:	d404      	bmi.n	8013aba <_fflush_r+0x3a>
 8013ab0:	0599      	lsls	r1, r3, #22
 8013ab2:	d402      	bmi.n	8013aba <_fflush_r+0x3a>
 8013ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ab6:	f7ff fa81 	bl	8012fbc <__retarget_lock_acquire_recursive>
 8013aba:	4628      	mov	r0, r5
 8013abc:	4621      	mov	r1, r4
 8013abe:	f7ff ff59 	bl	8013974 <__sflush_r>
 8013ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	07da      	lsls	r2, r3, #31
 8013ac8:	d4e0      	bmi.n	8013a8c <_fflush_r+0xc>
 8013aca:	89a3      	ldrh	r3, [r4, #12]
 8013acc:	059b      	lsls	r3, r3, #22
 8013ace:	d4dd      	bmi.n	8013a8c <_fflush_r+0xc>
 8013ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ad2:	f7ff fa74 	bl	8012fbe <__retarget_lock_release_recursive>
 8013ad6:	e7d9      	b.n	8013a8c <_fflush_r+0xc>
 8013ad8:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <_fflush_r+0x70>)
 8013ada:	429c      	cmp	r4, r3
 8013adc:	d101      	bne.n	8013ae2 <_fflush_r+0x62>
 8013ade:	68ac      	ldr	r4, [r5, #8]
 8013ae0:	e7df      	b.n	8013aa2 <_fflush_r+0x22>
 8013ae2:	4b04      	ldr	r3, [pc, #16]	; (8013af4 <_fflush_r+0x74>)
 8013ae4:	429c      	cmp	r4, r3
 8013ae6:	bf08      	it	eq
 8013ae8:	68ec      	ldreq	r4, [r5, #12]
 8013aea:	e7da      	b.n	8013aa2 <_fflush_r+0x22>
 8013aec:	080143cc 	.word	0x080143cc
 8013af0:	080143ec 	.word	0x080143ec
 8013af4:	080143ac 	.word	0x080143ac

08013af8 <_lseek_r>:
 8013af8:	b538      	push	{r3, r4, r5, lr}
 8013afa:	4604      	mov	r4, r0
 8013afc:	4608      	mov	r0, r1
 8013afe:	4611      	mov	r1, r2
 8013b00:	2200      	movs	r2, #0
 8013b02:	4d05      	ldr	r5, [pc, #20]	; (8013b18 <_lseek_r+0x20>)
 8013b04:	602a      	str	r2, [r5, #0]
 8013b06:	461a      	mov	r2, r3
 8013b08:	f7f2 f8a8 	bl	8005c5c <_lseek>
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	d102      	bne.n	8013b16 <_lseek_r+0x1e>
 8013b10:	682b      	ldr	r3, [r5, #0]
 8013b12:	b103      	cbz	r3, 8013b16 <_lseek_r+0x1e>
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	bd38      	pop	{r3, r4, r5, pc}
 8013b18:	20001950 	.word	0x20001950

08013b1c <__swhatbuf_r>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	460e      	mov	r6, r1
 8013b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b24:	4614      	mov	r4, r2
 8013b26:	2900      	cmp	r1, #0
 8013b28:	461d      	mov	r5, r3
 8013b2a:	b096      	sub	sp, #88	; 0x58
 8013b2c:	da07      	bge.n	8013b3e <__swhatbuf_r+0x22>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	602b      	str	r3, [r5, #0]
 8013b32:	89b3      	ldrh	r3, [r6, #12]
 8013b34:	061a      	lsls	r2, r3, #24
 8013b36:	d410      	bmi.n	8013b5a <__swhatbuf_r+0x3e>
 8013b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b3c:	e00e      	b.n	8013b5c <__swhatbuf_r+0x40>
 8013b3e:	466a      	mov	r2, sp
 8013b40:	f000 f8c0 	bl	8013cc4 <_fstat_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	dbf2      	blt.n	8013b2e <__swhatbuf_r+0x12>
 8013b48:	9a01      	ldr	r2, [sp, #4]
 8013b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b52:	425a      	negs	r2, r3
 8013b54:	415a      	adcs	r2, r3
 8013b56:	602a      	str	r2, [r5, #0]
 8013b58:	e7ee      	b.n	8013b38 <__swhatbuf_r+0x1c>
 8013b5a:	2340      	movs	r3, #64	; 0x40
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	6023      	str	r3, [r4, #0]
 8013b60:	b016      	add	sp, #88	; 0x58
 8013b62:	bd70      	pop	{r4, r5, r6, pc}

08013b64 <__smakebuf_r>:
 8013b64:	898b      	ldrh	r3, [r1, #12]
 8013b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b68:	079d      	lsls	r5, r3, #30
 8013b6a:	4606      	mov	r6, r0
 8013b6c:	460c      	mov	r4, r1
 8013b6e:	d507      	bpl.n	8013b80 <__smakebuf_r+0x1c>
 8013b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b74:	6023      	str	r3, [r4, #0]
 8013b76:	6123      	str	r3, [r4, #16]
 8013b78:	2301      	movs	r3, #1
 8013b7a:	6163      	str	r3, [r4, #20]
 8013b7c:	b002      	add	sp, #8
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}
 8013b80:	466a      	mov	r2, sp
 8013b82:	ab01      	add	r3, sp, #4
 8013b84:	f7ff ffca 	bl	8013b1c <__swhatbuf_r>
 8013b88:	9900      	ldr	r1, [sp, #0]
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff fa6b 	bl	8013068 <_malloc_r>
 8013b92:	b948      	cbnz	r0, 8013ba8 <__smakebuf_r+0x44>
 8013b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b98:	059a      	lsls	r2, r3, #22
 8013b9a:	d4ef      	bmi.n	8013b7c <__smakebuf_r+0x18>
 8013b9c:	f023 0303 	bic.w	r3, r3, #3
 8013ba0:	f043 0302 	orr.w	r3, r3, #2
 8013ba4:	81a3      	strh	r3, [r4, #12]
 8013ba6:	e7e3      	b.n	8013b70 <__smakebuf_r+0xc>
 8013ba8:	4b0d      	ldr	r3, [pc, #52]	; (8013be0 <__smakebuf_r+0x7c>)
 8013baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bac:	89a3      	ldrh	r3, [r4, #12]
 8013bae:	6020      	str	r0, [r4, #0]
 8013bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb4:	81a3      	strh	r3, [r4, #12]
 8013bb6:	9b00      	ldr	r3, [sp, #0]
 8013bb8:	6120      	str	r0, [r4, #16]
 8013bba:	6163      	str	r3, [r4, #20]
 8013bbc:	9b01      	ldr	r3, [sp, #4]
 8013bbe:	b15b      	cbz	r3, 8013bd8 <__smakebuf_r+0x74>
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bc6:	f000 f88f 	bl	8013ce8 <_isatty_r>
 8013bca:	b128      	cbz	r0, 8013bd8 <__smakebuf_r+0x74>
 8013bcc:	89a3      	ldrh	r3, [r4, #12]
 8013bce:	f023 0303 	bic.w	r3, r3, #3
 8013bd2:	f043 0301 	orr.w	r3, r3, #1
 8013bd6:	81a3      	strh	r3, [r4, #12]
 8013bd8:	89a0      	ldrh	r0, [r4, #12]
 8013bda:	4305      	orrs	r5, r0
 8013bdc:	81a5      	strh	r5, [r4, #12]
 8013bde:	e7cd      	b.n	8013b7c <__smakebuf_r+0x18>
 8013be0:	08012df5 	.word	0x08012df5

08013be4 <memchr>:
 8013be4:	4603      	mov	r3, r0
 8013be6:	b510      	push	{r4, lr}
 8013be8:	b2c9      	uxtb	r1, r1
 8013bea:	4402      	add	r2, r0
 8013bec:	4293      	cmp	r3, r2
 8013bee:	4618      	mov	r0, r3
 8013bf0:	d101      	bne.n	8013bf6 <memchr+0x12>
 8013bf2:	2000      	movs	r0, #0
 8013bf4:	e003      	b.n	8013bfe <memchr+0x1a>
 8013bf6:	7804      	ldrb	r4, [r0, #0]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	428c      	cmp	r4, r1
 8013bfc:	d1f6      	bne.n	8013bec <memchr+0x8>
 8013bfe:	bd10      	pop	{r4, pc}

08013c00 <__malloc_lock>:
 8013c00:	4801      	ldr	r0, [pc, #4]	; (8013c08 <__malloc_lock+0x8>)
 8013c02:	f7ff b9db 	b.w	8012fbc <__retarget_lock_acquire_recursive>
 8013c06:	bf00      	nop
 8013c08:	20001948 	.word	0x20001948

08013c0c <__malloc_unlock>:
 8013c0c:	4801      	ldr	r0, [pc, #4]	; (8013c14 <__malloc_unlock+0x8>)
 8013c0e:	f7ff b9d6 	b.w	8012fbe <__retarget_lock_release_recursive>
 8013c12:	bf00      	nop
 8013c14:	20001948 	.word	0x20001948

08013c18 <_read_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	4608      	mov	r0, r1
 8013c1e:	4611      	mov	r1, r2
 8013c20:	2200      	movs	r2, #0
 8013c22:	4d05      	ldr	r5, [pc, #20]	; (8013c38 <_read_r+0x20>)
 8013c24:	602a      	str	r2, [r5, #0]
 8013c26:	461a      	mov	r2, r3
 8013c28:	f7f1 ffbb 	bl	8005ba2 <_read>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d102      	bne.n	8013c36 <_read_r+0x1e>
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	b103      	cbz	r3, 8013c36 <_read_r+0x1e>
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	bd38      	pop	{r3, r4, r5, pc}
 8013c38:	20001950 	.word	0x20001950

08013c3c <_raise_r>:
 8013c3c:	291f      	cmp	r1, #31
 8013c3e:	b538      	push	{r3, r4, r5, lr}
 8013c40:	4604      	mov	r4, r0
 8013c42:	460d      	mov	r5, r1
 8013c44:	d904      	bls.n	8013c50 <_raise_r+0x14>
 8013c46:	2316      	movs	r3, #22
 8013c48:	6003      	str	r3, [r0, #0]
 8013c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}
 8013c50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c52:	b112      	cbz	r2, 8013c5a <_raise_r+0x1e>
 8013c54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c58:	b94b      	cbnz	r3, 8013c6e <_raise_r+0x32>
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f000 f830 	bl	8013cc0 <_getpid_r>
 8013c60:	462a      	mov	r2, r5
 8013c62:	4601      	mov	r1, r0
 8013c64:	4620      	mov	r0, r4
 8013c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c6a:	f000 b817 	b.w	8013c9c <_kill_r>
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d00a      	beq.n	8013c88 <_raise_r+0x4c>
 8013c72:	1c59      	adds	r1, r3, #1
 8013c74:	d103      	bne.n	8013c7e <_raise_r+0x42>
 8013c76:	2316      	movs	r3, #22
 8013c78:	6003      	str	r3, [r0, #0]
 8013c7a:	2001      	movs	r0, #1
 8013c7c:	e7e7      	b.n	8013c4e <_raise_r+0x12>
 8013c7e:	2400      	movs	r4, #0
 8013c80:	4628      	mov	r0, r5
 8013c82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c86:	4798      	blx	r3
 8013c88:	2000      	movs	r0, #0
 8013c8a:	e7e0      	b.n	8013c4e <_raise_r+0x12>

08013c8c <raise>:
 8013c8c:	4b02      	ldr	r3, [pc, #8]	; (8013c98 <raise+0xc>)
 8013c8e:	4601      	mov	r1, r0
 8013c90:	6818      	ldr	r0, [r3, #0]
 8013c92:	f7ff bfd3 	b.w	8013c3c <_raise_r>
 8013c96:	bf00      	nop
 8013c98:	20000010 	.word	0x20000010

08013c9c <_kill_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	4d06      	ldr	r5, [pc, #24]	; (8013cbc <_kill_r+0x20>)
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	4608      	mov	r0, r1
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	602b      	str	r3, [r5, #0]
 8013caa:	f7f1 ff60 	bl	8005b6e <_kill>
 8013cae:	1c43      	adds	r3, r0, #1
 8013cb0:	d102      	bne.n	8013cb8 <_kill_r+0x1c>
 8013cb2:	682b      	ldr	r3, [r5, #0]
 8013cb4:	b103      	cbz	r3, 8013cb8 <_kill_r+0x1c>
 8013cb6:	6023      	str	r3, [r4, #0]
 8013cb8:	bd38      	pop	{r3, r4, r5, pc}
 8013cba:	bf00      	nop
 8013cbc:	20001950 	.word	0x20001950

08013cc0 <_getpid_r>:
 8013cc0:	f7f1 bf4e 	b.w	8005b60 <_getpid>

08013cc4 <_fstat_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	4d06      	ldr	r5, [pc, #24]	; (8013ce4 <_fstat_r+0x20>)
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4608      	mov	r0, r1
 8013cce:	4611      	mov	r1, r2
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	f7f1 ffaa 	bl	8005c2a <_fstat>
 8013cd6:	1c43      	adds	r3, r0, #1
 8013cd8:	d102      	bne.n	8013ce0 <_fstat_r+0x1c>
 8013cda:	682b      	ldr	r3, [r5, #0]
 8013cdc:	b103      	cbz	r3, 8013ce0 <_fstat_r+0x1c>
 8013cde:	6023      	str	r3, [r4, #0]
 8013ce0:	bd38      	pop	{r3, r4, r5, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20001950 	.word	0x20001950

08013ce8 <_isatty_r>:
 8013ce8:	b538      	push	{r3, r4, r5, lr}
 8013cea:	2300      	movs	r3, #0
 8013cec:	4d05      	ldr	r5, [pc, #20]	; (8013d04 <_isatty_r+0x1c>)
 8013cee:	4604      	mov	r4, r0
 8013cf0:	4608      	mov	r0, r1
 8013cf2:	602b      	str	r3, [r5, #0]
 8013cf4:	f7f1 ffa8 	bl	8005c48 <_isatty>
 8013cf8:	1c43      	adds	r3, r0, #1
 8013cfa:	d102      	bne.n	8013d02 <_isatty_r+0x1a>
 8013cfc:	682b      	ldr	r3, [r5, #0]
 8013cfe:	b103      	cbz	r3, 8013d02 <_isatty_r+0x1a>
 8013d00:	6023      	str	r3, [r4, #0]
 8013d02:	bd38      	pop	{r3, r4, r5, pc}
 8013d04:	20001950 	.word	0x20001950

08013d08 <_init>:
 8013d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0a:	bf00      	nop
 8013d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d0e:	bc08      	pop	{r3}
 8013d10:	469e      	mov	lr, r3
 8013d12:	4770      	bx	lr

08013d14 <_fini>:
 8013d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d16:	bf00      	nop
 8013d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d1a:	bc08      	pop	{r3}
 8013d1c:	469e      	mov	lr, r3
 8013d1e:	4770      	bx	lr
