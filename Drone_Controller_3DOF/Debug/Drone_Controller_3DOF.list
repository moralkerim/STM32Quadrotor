
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800e0e8  0800e0e8  0001e0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5c0  0800e5c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5c0  0800e5c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5c0  0800e5c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e5c0  0800e5c0  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e5c8  0800e5c8  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  20000078  0800e644  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  0800e644  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fee  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004329  00000000  00000000  0004408b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000483b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  00049838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d275  00000000  00000000  0004ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ffb  00000000  00000000  00067dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009688d  00000000  00000000  0007edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  001156d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e0cc 	.word	0x0800e0cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800e0cc 	.word	0x0800e0cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001186:	2301      	movs	r3, #1
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	22d0      	movs	r2, #208	; 0xd0
 8001196:	21ef      	movs	r1, #239	; 0xef
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <read_chip_id+0x3c>)
 800119a:	f003 ff01 	bl	8004fa0 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b55      	cmp	r3, #85	; 0x55
 80011a2:	d001      	beq.n	80011a8 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af04      	add	r7, sp, #16
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d81a      	bhi.n	8001204 <set_oss+0x4c>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <set_oss+0x1c>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011fd 	.word	0x080011fd
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	705a      	strb	r2, [r3, #1]
			break;
 80011ea:	e00f      	b.n	800120c <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2208      	movs	r2, #8
 80011f0:	705a      	strb	r2, [r3, #1]
			break;
 80011f2:	e00b      	b.n	800120c <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	220e      	movs	r2, #14
 80011f8:	705a      	strb	r2, [r3, #1]
			break;
 80011fa:	e007      	b.n	800120c <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	221a      	movs	r2, #26
 8001200:	705a      	strb	r2, [r3, #1]
			break;
 8001202:	e003      	b.n	800120c <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2208      	movs	r2, #8
 8001208:	705a      	strb	r2, [r3, #1]
			break;
 800120a:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	019b      	lsls	r3, r3, #6
 8001216:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2302      	movs	r3, #2
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	22f4      	movs	r2, #244	; 0xf4
 800122e:	21ee      	movs	r1, #238	; 0xee
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <set_oss+0x88>)
 8001232:	f003 fdbb 	bl	8004dac <HAL_I2C_Mem_Write>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000009c 	.word	0x2000009c

08001244 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001272:	2301      	movs	r3, #1
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2316      	movs	r3, #22
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22aa      	movs	r2, #170	; 0xaa
 8001284:	21ef      	movs	r1, #239	; 0xef
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <read_calib_data+0xe4>)
 8001288:	f003 fe8a 	bl	8004fa0 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001292:	e03e      	b.n	8001312 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800129e:	4413      	add	r3, r2
 80012a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b219      	sxth	r1, r3
 80012a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4403      	add	r3, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	440b      	add	r3, r1
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8001302:	2302      	movs	r3, #2
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800130c:	3301      	adds	r3, #1
 800130e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001316:	2b0b      	cmp	r3, #11
 8001318:	d9bc      	bls.n	8001294 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000009c 	.word	0x2000009c

0800132c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00c fdb6 	bl	800deac <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001340:	687c      	ldr	r4, [r7, #4]
 8001342:	f7ff ff19 	bl	8001178 <read_chip_id>
 8001346:	4603      	mov	r3, r0
 8001348:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	687c      	ldr	r4, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff77 	bl	8001244 <read_calib_data>
 8001356:	4603      	mov	r3, r0
 8001358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff28 	bl	80011b8 <set_oss>
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 8001376:	232e      	movs	r3, #46	; 0x2e
 8001378:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800137a:	2301      	movs	r3, #1
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	22f4      	movs	r2, #244	; 0xf4
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <write_ut+0x2c>)
 800138e:	f003 fd0d 	bl	8004dac <HAL_I2C_Mem_Write>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <read_ut>:

int32_t read_ut (void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80013a6:	2301      	movs	r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	22f6      	movs	r2, #246	; 0xf6
 80013b6:	21ef      	movs	r1, #239	; 0xef
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <read_ut+0x30>)
 80013ba:	f003 fdf1 	bl	8004fa0 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	797a      	ldrb	r2, [r7, #5]
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7c 	bl	80010ec <__aeabi_f2iz>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	895b      	ldrh	r3, [r3, #10]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	8912      	ldrh	r2, [r2, #8]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	13db      	asrs	r3, r3, #15
 8001406:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800140e:	02da      	lsls	r2, r3, #11
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001416:	4619      	mov	r1, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	440b      	add	r3, r1
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3308      	adds	r3, #8
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc29 	bl	8000c8c <__aeabi_i2f>
 800143a:	4603      	mov	r3, r0
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <get_temp+0xa4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc78 	bl	8000d34 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <get_temp+0xa8>)
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe1a 	bl	8001084 <__aeabi_fcmple>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <get_temp+0x90>
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <get_temp+0xac>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fe1d 	bl	8001098 <__aeabi_fcmpge>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	3dcccccd 	.word	0x3dcccccd
 800147c:	c2200000 	.word	0xc2200000
 8001480:	42aa0000 	.word	0x42aa0000

08001484 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <write_up+0x38>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	803b      	strh	r3, [r7, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001498:	2334      	movs	r3, #52	; 0x34
 800149a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800149c:	2301      	movs	r3, #1
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	463b      	mov	r3, r7
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	22f4      	movs	r2, #244	; 0xf4
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <write_up+0x3c>)
 80014b0:	f003 fc7c 	bl	8004dac <HAL_I2C_Mem_Write>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800e0e8 	.word	0x0800e0e8
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <read_up>:

int32_t read_up (oss_t oss)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <read_up+0x54>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80014da:	2301      	movs	r3, #1
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2303      	movs	r3, #3
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	22f6      	movs	r2, #246	; 0xf6
 80014ec:	21ef      	movs	r1, #239	; 0xef
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <read_up+0x58>)
 80014f0:	f003 fd56 	bl	8004fa0 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80014f4:	7a3b      	ldrb	r3, [r7, #8]
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	7a7b      	ldrb	r3, [r7, #9]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	7aba      	ldrb	r2, [r7, #10]
 8001500:	441a      	add	r2, r3
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	f1c3 0308 	rsb	r3, r3, #8
 8001508:	fa42 f303 	asr.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
	return up;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800e0e8 	.word	0x0800e0e8
 800151c:	2000009c 	.word	0x2000009c

08001520 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001520:	b084      	sub	sp, #16
 8001522:	b480      	push	{r7}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800152c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800153e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f303 	mul.w	r3, r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da01      	bge.n	8001554 <get_pressure+0x34>
 8001550:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001554:	131b      	asrs	r3, r3, #12
 8001556:	fb03 f302 	mul.w	r3, r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	da01      	bge.n	8001562 <get_pressure+0x42>
 800155e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001562:	12db      	asrs	r3, r3, #11
 8001564:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001566:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800156a:	461a      	mov	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fb03 f302 	mul.w	r3, r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	da01      	bge.n	800157a <get_pressure+0x5a>
 8001576:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800157a:	12db      	asrs	r3, r3, #11
 800157c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001586:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800158a:	009a      	lsls	r2, r3, #2
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001594:	4093      	lsls	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <get_pressure+0x7e>
 800159c:	3303      	adds	r3, #3
 800159e:	109b      	asrs	r3, r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80015a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a6:	461a      	mov	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fb03 f302 	mul.w	r3, r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <get_pressure+0x98>
 80015b2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80015b6:	331f      	adds	r3, #31
 80015b8:	135b      	asrs	r3, r3, #13
 80015ba:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80015bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fb03 f303 	mul.w	r3, r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da01      	bge.n	80015d0 <get_pressure+0xb0>
 80015cc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015d0:	131b      	asrs	r3, r3, #12
 80015d2:	fb03 f302 	mul.w	r3, r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da02      	bge.n	80015e0 <get_pressure+0xc0>
 80015da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015de:	33ff      	adds	r3, #255	; 0xff
 80015e0:	141b      	asrs	r3, r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3302      	adds	r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <get_pressure+0xd2>
 80015f0:	3303      	adds	r3, #3
 80015f2:	109b      	asrs	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	0bdb      	lsrs	r3, r3, #15
 8001606:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001614:	4611      	mov	r1, r2
 8001616:	f24c 3250 	movw	r2, #50000	; 0xc350
 800161a:	410a      	asrs	r2, r1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db06      	blt.n	8001636 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	005a      	lsls	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e005      	b.n	8001642 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <get_pressure+0x12a>
 8001648:	33ff      	adds	r3, #255	; 0xff
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	461a      	mov	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <get_pressure+0x136>
 8001654:	33ff      	adds	r3, #255	; 0xff
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	fb03 f302 	mul.w	r3, r3, r2
 800165c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f640 32de 	movw	r2, #3038	; 0xbde
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	da02      	bge.n	8001672 <get_pressure+0x152>
 800166c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001670:	33ff      	adds	r3, #255	; 0xff
 8001672:	141b      	asrs	r3, r3, #16
 8001674:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <get_pressure+0x194>)
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	da02      	bge.n	8001688 <get_pressure+0x168>
 8001682:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001686:	33ff      	adds	r3, #255	; 0xff
 8001688:	141b      	asrs	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001696:	2b00      	cmp	r3, #0
 8001698:	da00      	bge.n	800169c <get_pressure+0x17c>
 800169a:	330f      	adds	r3, #15
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

	return p;
 80016a6:	69fb      	ldr	r3, [r7, #28]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	b004      	add	sp, #16
 80016b2:	4770      	bx	lr
 80016b4:	ffffe343 	.word	0xffffe343

080016b8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fade 	bl	8000c8c <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4923      	ldr	r1, [pc, #140]	; (8001760 <get_altitude+0xa8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbe1 	bl	8000e9c <__aeabi_fdiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe9b 	bl	8000418 <__aeabi_f2d>
 80016e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001750 <get_altitude+0x98>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f00a fc68 	bl	800bfbc <pow>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	491b      	ldr	r1, [pc, #108]	; (8001764 <get_altitude+0xac>)
 80016f6:	f7fe fd2f 	bl	8000158 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a315      	add	r3, pc, #84	; (adr r3, 8001758 <get_altitude+0xa0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe fede 	bl	80004c8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9b0 	bl	8000a78 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <get_altitude+0xb0>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fcb0 	bl	8001084 <__aeabi_fcmple>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <get_altitude+0x80>
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <get_altitude+0xb4>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fcb3 	bl	8001098 <__aeabi_fcmpge>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ccd9456c 	.word	0xccd9456c
 8001754:	3fc85b95 	.word	0x3fc85b95
 8001758:	00000000 	.word	0x00000000
 800175c:	40e5a540 	.word	0x40e5a540
 8001760:	47c5e680 	.word	0x47c5e680
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	c3fa0000 	.word	0xc3fa0000
 800176c:	460ca000 	.word	0x460ca000

08001770 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return b_counter;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_b_counter+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000094 	.word	0x20000094

08001784 <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	b_counter++;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <set_b_counter+0x30>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <set_b_counter+0x30>)
 8001794:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <set_b_counter+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d202      	bcs.n	80017a8 <set_b_counter+0x24>
		b_counter = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <set_b_counter+0x30>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000094 	.word	0x20000094

080017b8 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 80017be:	2351      	movs	r3, #81	; 0x51
 80017c0:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 80017c2:	1dba      	adds	r2, r7, #6
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	21e0      	movs	r1, #224	; 0xe0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <request_range+0x2c>)
 80017ce:	f002 ff8f 	bl	80046f0 <HAL_I2C_Master_Transmit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <request_range+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	20000000 	.word	0x20000000

080017ec <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <getRange+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			write = 1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <getRange+0x38>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	21e1      	movs	r1, #225	; 0xe1
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <getRange+0x3c>)
 800180a:	f003 f86f 	bl	80048ec <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	797a      	ldrb	r2, [r7, #5]
 8001814:	4313      	orrs	r3, r2



	//return -1;

}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000b54 	.word	0x20000b54
 8001824:	20000000 	.word	0x20000000
 8001828:	2000009c 	.word	0x2000009c

0800182c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <set_ucounter+0x30>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <set_ucounter+0x30>)
 800183c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <set_ucounter+0x30>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4293      	cmp	r3, r2
 8001848:	d202      	bcs.n	8001850 <set_ucounter+0x24>
		u_counter = 0;
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <set_ucounter+0x30>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000098 	.word	0x20000098

08001860 <get_ucounter>:

int get_ucounter(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return u_counter;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <get_ucounter+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000098 	.word	0x20000098

08001874 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f00a fc3d 	bl	800c114 <asinf>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f00a fb51 	bl	800bf54 <cosf>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f00a fc4b 	bl	800c160 <sqrtf>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fb8c 	bl	8002ffa <_ZNSaIfED1Ev>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fb6f 	bl	8002fda <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffeb 	bl	80018ec <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f002 f867 	bl	80039f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 800192a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192e:	f002 f8c5 	bl	8003abc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 f8ff 	bl	8001b34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001936:	f000 fc0b 	bl	8002150 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800193a:	f000 fbeb 	bl	8002114 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800193e:	f000 f949 	bl	8001bd4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001942:	f000 fa45 	bl	8001dd0 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001946:	f000 f979 	bl	8001c3c <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 800194a:	f000 fbb3 	bl	80020b4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800194e:	f000 fa9b 	bl	8001e88 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001952:	f000 fb23 	bl	8001f9c <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8001956:	f000 fb7f 	bl	8002058 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 800195a:	2209      	movs	r2, #9
 800195c:	4964      	ldr	r1, [pc, #400]	; (8001af0 <main+0x1d0>)
 800195e:	4865      	ldr	r0, [pc, #404]	; (8001af4 <main+0x1d4>)
 8001960:	f006 fb18 	bl	8007f94 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8001964:	f000 fc78 	bl	8002258 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001968:	4863      	ldr	r0, [pc, #396]	; (8001af8 <main+0x1d8>)
 800196a:	f7ff fcdf 	bl	800132c <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 800196e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001972:	f002 f8a3 	bl	8003abc <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001976:	2043      	movs	r0, #67	; 0x43
 8001978:	f000 feee 	bl	8002758 <_Z7GyroErrh>
 800197c:	4603      	mov	r3, r0
 800197e:	4a5f      	ldr	r2, [pc, #380]	; (8001afc <main+0x1dc>)
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	2045      	movs	r0, #69	; 0x45
 8001984:	f000 fee8 	bl	8002758 <_Z7GyroErrh>
 8001988:	4603      	mov	r3, r0
 800198a:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <main+0x1e0>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	2047      	movs	r0, #71	; 0x47
 8001990:	f000 fee2 	bl	8002758 <_Z7GyroErrh>
 8001994:	4603      	mov	r3, r0
 8001996:	4a5b      	ldr	r2, [pc, #364]	; (8001b04 <main+0x1e4>)
 8001998:	6013      	str	r3, [r2, #0]
  AccXh = GyroErr(ACC_X_ADDR); AccYh = GyroErr(ACC_Y_ADDR); AccZh = GyroErr(ACC_Z_ADDR);
 800199a:	203b      	movs	r0, #59	; 0x3b
 800199c:	f000 fedc 	bl	8002758 <_Z7GyroErrh>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <main+0x1e8>)
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	203d      	movs	r0, #61	; 0x3d
 80019a8:	f000 fed6 	bl	8002758 <_Z7GyroErrh>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <main+0x1ec>)
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	203f      	movs	r0, #63	; 0x3f
 80019b4:	f000 fed0 	bl	8002758 <_Z7GyroErrh>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <main+0x1f0>)
 80019bc:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku
  accX = GyroOku(ACC_X_ADDR);
 80019be:	203b      	movs	r0, #59	; 0x3b
 80019c0:	f000 fe50 	bl	8002664 <_Z7GyroOkuh>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f960 	bl	8000c8c <__aeabi_i2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <main+0x1f4>)
 80019d0:	6013      	str	r3, [r2, #0]
  accY = GyroOku(ACC_Y_ADDR);
 80019d2:	203d      	movs	r0, #61	; 0x3d
 80019d4:	f000 fe46 	bl	8002664 <_Z7GyroOkuh>
 80019d8:	4603      	mov	r3, r0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f956 	bl	8000c8c <__aeabi_i2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <main+0x1f8>)
 80019e4:	6013      	str	r3, [r2, #0]
  accZ = GyroOku(ACC_Z_ADDR);
 80019e6:	203f      	movs	r0, #63	; 0x3f
 80019e8:	f000 fe3c 	bl	8002664 <_Z7GyroOkuh>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f94c 	bl	8000c8c <__aeabi_i2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <main+0x1fc>)
 80019f8:	6013      	str	r3, [r2, #0]

  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 80019fa:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <main+0x1f4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a45      	ldr	r2, [pc, #276]	; (8001b14 <main+0x1f4>)
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f995 	bl	8000d34 <__aeabi_fmul>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461c      	mov	r4, r3
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <main+0x1f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a41      	ldr	r2, [pc, #260]	; (8001b18 <main+0x1f8>)
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98b 	bl	8000d34 <__aeabi_fmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f87e 	bl	8000b24 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <main+0x1fc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <main+0x1fc>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f97c 	bl	8000d34 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff f86f 	bl	8000b24 <__addsf3>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff37 	bl	80018bc <_ZSt4sqrtf>
 8001a4e:	6078      	str	r0, [r7, #4]

  float rad2deg = 57.3248;
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <main+0x200>)
 8001a52:	603b      	str	r3, [r7, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <main+0x1f4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa1e 	bl	8000e9c <__aeabi_fdiv>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff12 	bl	800188c <_ZSt4asinf>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f95f 	bl	8000d34 <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <main+0x204>)
 8001a7c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <main+0x1f8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa08 	bl	8000e9c <__aeabi_fdiv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fefc 	bl	800188c <_ZSt4asinf>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f949 	bl	8000d34 <__aeabi_fmul>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <main+0x204>)
 8001aa8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001aac:	481e      	ldr	r0, [pc, #120]	; (8001b28 <main+0x208>)
 8001aae:	f004 fe3d 	bl	800672c <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <main+0x20c>)
 8001ab4:	f004 fdf0 	bl	8006698 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	481d      	ldr	r0, [pc, #116]	; (8001b30 <main+0x210>)
 8001abc:	f004 fed8 	bl	8006870 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	481b      	ldr	r0, [pc, #108]	; (8001b30 <main+0x210>)
 8001ac4:	f006 f804 	bl	8007ad0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <main+0x210>)
 8001acc:	f006 f800 	bl	8007ad0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ad0:	210c      	movs	r1, #12
 8001ad2:	4817      	ldr	r0, [pc, #92]	; (8001b30 <main+0x210>)
 8001ad4:	f004 fecc 	bl	8006870 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001ad8:	2108      	movs	r1, #8
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <main+0x20c>)
 8001adc:	f004 ffc2 	bl	8006a64 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendTelem();
 8001ae0:	f000 fd96 	bl	8002610 <_Z9SendTelemv>
	  Check_Arm();
 8001ae4:	f000 fc12 	bl	800230c <_Z9Check_Armv>
	  Check_Disarm();
 8001ae8:	f000 fc7e 	bl	80023e8 <_Z12Check_Disarmv>
	  SendTelem();
 8001aec:	e7f8      	b.n	8001ae0 <main+0x1c0>
 8001aee:	bf00      	nop
 8001af0:	20000b38 	.word	0x20000b38
 8001af4:	20000210 	.word	0x20000210
 8001af8:	20000afc 	.word	0x20000afc
 8001afc:	200002ec 	.word	0x200002ec
 8001b00:	200002f0 	.word	0x200002f0
 8001b04:	200002f4 	.word	0x200002f4
 8001b08:	200002f8 	.word	0x200002f8
 8001b0c:	200002fc 	.word	0x200002fc
 8001b10:	20000300 	.word	0x20000300
 8001b14:	200002e0 	.word	0x200002e0
 8001b18:	200002e4 	.word	0x200002e4
 8001b1c:	200002e8 	.word	0x200002e8
 8001b20:	42654c98 	.word	0x42654c98
 8001b24:	20000468 	.word	0x20000468
 8001b28:	20000138 	.word	0x20000138
 8001b2c:	20000180 	.word	0x20000180
 8001b30:	200000f0 	.word	0x200000f0

08001b34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00c f9b2 	bl	800deac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 f921 	bl	8005dc4 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001b92:	f001 fa1d 	bl	8002fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fb87 	bl	80062c4 <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001bc6:	f001 fa03 	bl	8002fd0 <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3740      	adds	r7, #64	; 0x40
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <_ZL12MX_I2C1_Initv+0x60>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001be0:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <_ZL12MX_I2C1_Initv+0x64>)
 8001be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c12:	f002 fc29 	bl	8004468 <HAL_I2C_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001c26:	f001 f9d3 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000009c 	.word	0x2000009c
 8001c34:	40005400 	.word	0x40005400
 8001c38:	00061a80 	.word	0x00061a80

08001c3c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b092      	sub	sp, #72	; 0x48
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00c f920 	bl	800deac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c6c:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <_ZL12MX_TIM1_Initv+0x190>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001c72:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c74:	2247      	movs	r2, #71	; 0x47
 8001c76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c80:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c98:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c9a:	f004 fd99 	bl	80067d0 <HAL_TIM_PWM_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001cae:	f001 f98f 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4841      	ldr	r0, [pc, #260]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001cc2:	f005 ffa3 	bl	8007c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001cd6:	f001 f97b 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	; 0x60
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4832      	ldr	r0, [pc, #200]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d00:	f005 f952 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001d14:	f001 f95c 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4829      	ldr	r0, [pc, #164]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d22:	f005 f941 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001d36:	f001 f94b 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	2208      	movs	r2, #8
 8001d40:	4619      	mov	r1, r3
 8001d42:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d44:	f005 f930 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001d58:	f001 f93a 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	220c      	movs	r2, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d66:	f005 f91f 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001d7a:	f001 f929 	bl	8002fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001da2:	f005 ff91 	bl	8007cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001db6:	f001 f90b 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dbc:	f001 fc54 	bl	8003668 <HAL_TIM_MspPostInit>

}
 8001dc0:	bf00      	nop
 8001dc2:	3748      	adds	r7, #72	; 0x48
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200000f0 	.word	0x200000f0
 8001dcc:	40012c00 	.word	0x40012c00

08001dd0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001df6:	2247      	movs	r2, #71	; 0x47
 8001df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e02:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e14:	481b      	ldr	r0, [pc, #108]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e16:	f004 fbef 	bl	80065f8 <HAL_TIM_Base_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e2a:	f001 f8d1 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e3c:	f005 f972 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e50:	f001 f8be 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e62:	f005 fed3 	bl	8007c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001e76:	f001 f8ab 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000138 	.word	0x20000138

08001e88 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eb4:	4a38      	ldr	r2, [pc, #224]	; (8001f98 <_ZL12MX_TIM3_Initv+0x110>)
 8001eb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eba:	2247      	movs	r2, #71	; 0x47
 8001ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed8:	482e      	ldr	r0, [pc, #184]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eda:	f004 fb8d 	bl	80065f8 <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001eee:	f001 f86f 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4825      	ldr	r0, [pc, #148]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f00:	f005 f910 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001f14:	f001 f85c 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f18:	481e      	ldr	r0, [pc, #120]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f1a:	f004 fd4b 	bl	80069b4 <HAL_TIM_IC_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001f2e:	f001 f84f 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4814      	ldr	r0, [pc, #80]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f42:	f005 fe63 	bl	8007c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001f56:	f001 f83b 	bl	8002fd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4808      	ldr	r0, [pc, #32]	; (8001f94 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f72:	f004 ff85 	bl	8006e80 <HAL_TIM_IC_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001f86:	f001 f823 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000180 	.word	0x20000180
 8001f98:	40000400 	.word	0x40000400

08001f9c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <_ZL12MX_TIM4_Initv+0xb8>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fc0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001fc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fe0:	481b      	ldr	r0, [pc, #108]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8001fe2:	f004 fb09 	bl	80065f8 <HAL_TIM_Base_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001ff6:	f000 ffeb 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	4619      	mov	r1, r3
 8002006:	4812      	ldr	r0, [pc, #72]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 8002008:	f005 f88c 	bl	8007124 <HAL_TIM_ConfigClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800201c:	f000 ffd8 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4808      	ldr	r0, [pc, #32]	; (8002050 <_ZL12MX_TIM4_Initv+0xb4>)
 800202e:	f005 fded 	bl	8007c0c <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8002042:	f000 ffc5 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200001c8 	.word	0x200001c8
 8002054:	40000800 	.word	0x40000800

08002058 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8002064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <_ZL19MX_USART1_UART_Initv+0x54>)
 8002090:	f005 fea1 	bl	8007dd6 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80020a4:	f000 ff94 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000210 	.word	0x20000210
 80020b0:	40013800 	.word	0x40013800

080020b4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ba:	4a14      	ldr	r2, [pc, #80]	; (800210c <_ZL19MX_USART2_UART_Initv+0x58>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c0:	4a13      	ldr	r2, [pc, #76]	; (8002110 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80020c2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d8:	220c      	movs	r2, #12
 80020da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ea:	f005 fe74 	bl	8007dd6 <HAL_UART_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 80020fe:	f000 ff67 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000250 	.word	0x20000250
 800210c:	40004400 	.word	0x40004400
 8002110:	000f4240 	.word	0x000f4240

08002114 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <_ZL11MX_DMA_Initv+0x38>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <_ZL11MX_DMA_Initv+0x38>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <_ZL11MX_DMA_Initv+0x38>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	200f      	movs	r0, #15
 8002138:	f001 fdbb 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800213c:	200f      	movs	r0, #15
 800213e:	f001 fdd4 	bl	8003cea <HAL_NVIC_EnableIRQ>

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000

08002150 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a37      	ldr	r2, [pc, #220]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b35      	ldr	r3, [pc, #212]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a31      	ldr	r2, [pc, #196]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a25      	ldr	r2, [pc, #148]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <_ZL12MX_GPIO_Initv+0xf8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <_ZL12MX_GPIO_Initv+0xfc>)
 80021cc:	f002 f91a 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	481e      	ldr	r0, [pc, #120]	; (8002250 <_ZL12MX_GPIO_Initv+0x100>)
 80021d6:	f002 f915 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e0:	481c      	ldr	r0, [pc, #112]	; (8002254 <_ZL12MX_GPIO_Initv+0x104>)
 80021e2:	f002 f90f 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4619      	mov	r1, r3
 80021fe:	4813      	ldr	r0, [pc, #76]	; (800224c <_ZL12MX_GPIO_Initv+0xfc>)
 8002200:	f001 ff7c 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002204:	2302      	movs	r3, #2
 8002206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2302      	movs	r3, #2
 8002212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	4619      	mov	r1, r3
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <_ZL12MX_GPIO_Initv+0x100>)
 800221c:	f001 ff6e 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2302      	movs	r3, #2
 8002230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4619      	mov	r1, r3
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <_ZL12MX_GPIO_Initv+0x104>)
 800223a:	f001 ff5f 	bl	80040fc <HAL_GPIO_Init>

}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40011000 	.word	0x40011000
 8002250:	40010c00 	.word	0x40010c00
 8002254:	40010800 	.word	0x40010800

08002258 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800225e:	2300      	movs	r3, #0
 8002260:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8002262:	2305      	movs	r3, #5
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	2301      	movs	r3, #1
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	226b      	movs	r2, #107	; 0x6b
 8002272:	21d0      	movs	r1, #208	; 0xd0
 8002274:	4811      	ldr	r0, [pc, #68]	; (80022bc <_Z14MPU6050_Baslatv+0x64>)
 8002276:	f002 fd99 	bl	8004dac <HAL_I2C_Mem_Write>
	config = 0x08;
 800227a:	2308      	movs	r3, #8
 800227c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 800227e:	2305      	movs	r3, #5
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2301      	movs	r3, #1
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2301      	movs	r3, #1
 800228c:	221b      	movs	r2, #27
 800228e:	21d0      	movs	r1, #208	; 0xd0
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <_Z14MPU6050_Baslatv+0x64>)
 8002292:	f002 fd8b 	bl	8004dac <HAL_I2C_Mem_Write>
	config = 0x10;
 8002296:	2310      	movs	r3, #16
 8002298:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800229a:	2305      	movs	r3, #5
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2301      	movs	r3, #1
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	221c      	movs	r2, #28
 80022aa:	21d0      	movs	r1, #208	; 0xd0
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <_Z14MPU6050_Baslatv+0x64>)
 80022ae:	f002 fd7d 	bl	8004dac <HAL_I2C_Mem_Write>
	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000009c 	.word	0x2000009c

080022c0 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1500) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80022ce:	4293      	cmp	r3, r2
 80022d0:	dc0d      	bgt.n	80022ee <_Z9checkModei+0x2e>

		  controller.mod = STABILIZE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <_Z9checkModei+0x40>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
		  controller.z0 = EKF.alt_gnd;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <_Z9checkModei+0x44>)
 80022dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <_Z9checkModei+0x40>)
 80022e2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		  controller.p_alt.reset();
 80022e6:	4808      	ldr	r0, [pc, #32]	; (8002308 <_Z9checkModei+0x48>)
 80022e8:	f009 fc06 	bl	800baf8 <_ZN3PID5resetEv>
		  controller.mod = ALT_HOLD;

		  //z0 = controller.p_alt.zi;

	  }
}
 80022ec:	e003      	b.n	80022f6 <_Z9checkModei+0x36>
		  controller.mod = ALT_HOLD;
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <_Z9checkModei+0x40>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000680 	.word	0x20000680
 8002304:	20000468 	.word	0x20000468
 8002308:	200009c8 	.word	0x200009c8

0800230c <_Z9Check_Armv>:

void Check_Arm() {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	if(!armed) {
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <_Z9Check_Armv+0xb4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04d      	beq.n	80023ba <_Z9Check_Armv+0xae>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <_Z9Check_Armv+0xb8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f240 424b 	movw	r2, #1099	; 0x44b
 8002326:	4293      	cmp	r3, r2
 8002328:	dc43      	bgt.n	80023b2 <_Z9Check_Armv+0xa6>
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <_Z9Check_Armv+0xb8>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8002332:	4293      	cmp	r3, r2
 8002334:	dd3d      	ble.n	80023b2 <_Z9Check_Armv+0xa6>
				if(!arm_start){
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <_Z9Check_Armv+0xbc>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002344:	f001 fbb0 	bl	8003aa8 <HAL_GetTick>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <_Z9Check_Armv+0xc0>)
 800234e:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <_Z9Check_Armv+0xbc>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8002356:	f001 fba7 	bl	8003aa8 <HAL_GetTick>
 800235a:	4603      	mov	r3, r0
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <_Z9Check_Armv+0xc0>)
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002366:	4293      	cmp	r3, r2
 8002368:	bf8c      	ite	hi
 800236a:	2301      	movhi	r3, #1
 800236c:	2300      	movls	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d022      	beq.n	80023ba <_Z9Check_Armv+0xae>
					controller.pid_roll.reset();
 8002374:	4816      	ldr	r0, [pc, #88]	; (80023d0 <_Z9Check_Armv+0xc4>)
 8002376:	f009 fbbf 	bl	800baf8 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 800237a:	4816      	ldr	r0, [pc, #88]	; (80023d4 <_Z9Check_Armv+0xc8>)
 800237c:	f009 fbbc 	bl	800baf8 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002380:	4815      	ldr	r0, [pc, #84]	; (80023d8 <_Z9Check_Armv+0xcc>)
 8002382:	f009 fbb9 	bl	800baf8 <_ZN3PID5resetEv>
					armed = true;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <_Z9Check_Armv+0xb4>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002392:	4812      	ldr	r0, [pc, #72]	; (80023dc <_Z9Check_Armv+0xd0>)
 8002394:	f002 f836 	bl	8004404 <HAL_GPIO_WritePin>

					controller.pid_roll.angle0   = EKF.state.angles[0];
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <_Z9Check_Armv+0xd4>)
 800239a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800239e:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <_Z9Check_Armv+0xd8>)
 80023a0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
					controller.pid_pitch.angle0  = EKF.state.angles[1];
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <_Z9Check_Armv+0xd4>)
 80023a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <_Z9Check_Armv+0xd8>)
 80023ac:	f8c2 32ac 	str.w	r3, [r2, #684]	; 0x2ac
				if(HAL_GetTick() - arm_timer > 3000) {
 80023b0:	e003      	b.n	80023ba <_Z9Check_Armv+0xae>
				}

		}

		else {
			arm_start = false;
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_Z9Check_Armv+0xbc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80023b8:	e7ff      	b.n	80023ba <_Z9Check_Armv+0xae>
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000ad1 	.word	0x20000ad1
 80023c4:	20000a9c 	.word	0x20000a9c
 80023c8:	20000ad0 	.word	0x20000ad0
 80023cc:	20000ac4 	.word	0x20000ac4
 80023d0:	20000800 	.word	0x20000800
 80023d4:	20000898 	.word	0x20000898
 80023d8:	20000930 	.word	0x20000930
 80023dc:	40010800 	.word	0x40010800
 80023e0:	20000468 	.word	0x20000468
 80023e4:	20000680 	.word	0x20000680

080023e8 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	if(armed) {
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <_Z12Check_Disarmv+0x84>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d038      	beq.n	8002466 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <_Z12Check_Disarmv+0x88>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f240 424b 	movw	r2, #1099	; 0x44b
 80023fc:	4293      	cmp	r3, r2
 80023fe:	dc2e      	bgt.n	800245e <_Z12Check_Disarmv+0x76>
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <_Z12Check_Disarmv+0x88>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f240 424b 	movw	r2, #1099	; 0x44b
 8002408:	4293      	cmp	r3, r2
 800240a:	dc28      	bgt.n	800245e <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <_Z12Check_Disarmv+0x8c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 800241a:	f001 fb45 	bl	8003aa8 <HAL_GetTick>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_Z12Check_Disarmv+0x90>)
 8002424:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_Z12Check_Disarmv+0x8c>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 800242c:	f001 fb3c 	bl	8003aa8 <HAL_GetTick>
 8002430:	4603      	mov	r3, r0
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <_Z12Check_Disarmv+0x90>)
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800243c:	4293      	cmp	r3, r2
 800243e:	bf8c      	ite	hi
 8002440:	2301      	movhi	r3, #1
 8002442:	2300      	movls	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <_Z12Check_Disarmv+0x7e>
					armed = false;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <_Z12Check_Disarmv+0x84>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002456:	4809      	ldr	r0, [pc, #36]	; (800247c <_Z12Check_Disarmv+0x94>)
 8002458:	f001 ffd4 	bl	8004404 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 800245c:	e003      	b.n	8002466 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <_Z12Check_Disarmv+0x8c>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002464:	e7ff      	b.n	8002466 <_Z12Check_Disarmv+0x7e>
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000ad1 	.word	0x20000ad1
 8002470:	20000a9c 	.word	0x20000a9c
 8002474:	20000ad3 	.word	0x20000ad3
 8002478:	20000ac8 	.word	0x20000ac8
 800247c:	40010800 	.word	0x40010800

08002480 <_Z9TelemPackv>:

void TelemPack() {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <_Z9TelemPackv+0x16c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <_Z9TelemPackv+0x170>)
 800248a:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 800248c:	4b57      	ldr	r3, [pc, #348]	; (80025ec <_Z9TelemPackv+0x16c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002492:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <_Z9TelemPackv+0x16c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a55      	ldr	r2, [pc, #340]	; (80025f0 <_Z9TelemPackv+0x170>)
 800249a:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <_Z9TelemPackv+0x174>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024a4:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80024a6:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <_Z9TelemPackv+0x174>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024ae:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <_Z9TelemPackv+0x174>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024b8:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <_Z9TelemPackv+0x174>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024c2:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <_Z9TelemPackv+0x178>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024ca:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 80024cc:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <_Z9TelemPackv+0x178>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a47      	ldr	r2, [pc, #284]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024d2:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <_Z9TelemPackv+0x178>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a45      	ldr	r2, [pc, #276]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024da:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <_Z9TelemPackv+0x16c>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a43      	ldr	r2, [pc, #268]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024e2:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <_Z9TelemPackv+0x16c>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024ea:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <_Z9TelemPackv+0x16c>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024f2:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80024f4:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <_Z9TelemPackv+0x178>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a3d      	ldr	r2, [pc, #244]	; (80025f0 <_Z9TelemPackv+0x170>)
 80024fa:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <_Z9TelemPackv+0x178>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002502:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <_Z9TelemPackv+0x17c>)
 8002506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800250a:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <_Z9TelemPackv+0x170>)
 800250c:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <_Z9TelemPackv+0x17c>)
 8002510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002514:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002516:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = gyroX;
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <_Z9TelemPackv+0x180>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <_Z9TelemPackv+0x170>)
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = gyroY;
 8002520:	4b38      	ldr	r3, [pc, #224]	; (8002604 <_Z9TelemPackv+0x184>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002526:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <_Z9TelemPackv+0x17c>)
 800252a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800252e:	4a30      	ldr	r2, [pc, #192]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002530:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <_Z9TelemPackv+0x17c>)
 8002534:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <_Z9TelemPackv+0x170>)
 800253a:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <_Z9TelemPackv+0x17c>)
 800253e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002542:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002544:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <_Z9TelemPackv+0x17c>)
 8002548:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <_Z9TelemPackv+0x170>)
 800254e:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <_Z9TelemPackv+0x188>)
 8002552:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <_Z9TelemPackv+0x188>)
 800255c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002562:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <_Z9TelemPackv+0x188>)
 8002566:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <_Z9TelemPackv+0x170>)
 800256c:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <_Z9TelemPackv+0x188>)
 8002570:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002574:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002576:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <_Z9TelemPackv+0x188>)
 800257a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002580:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <_Z9TelemPackv+0x188>)
 8002584:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <_Z9TelemPackv+0x170>)
 800258a:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <_Z9TelemPackv+0x188>)
 800258e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <_Z9TelemPackv+0x170>)
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <_Z9TelemPackv+0x188>)
 8002598:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_Z9TelemPackv+0x170>)
 800259e:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <_Z9TelemPackv+0x17c>)
 80025a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025a8:	67d3      	str	r3, [r2, #124]	; 0x7c
	  telem_pack.sonar_vel = EKF.vz;
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <_Z9TelemPackv+0x17c>)
 80025ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.baro_alt = EKF.alt_gnd;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_Z9TelemPackv+0x17c>)
 80025b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025be:	6793      	str	r3, [r2, #120]	; 0x78

	  telem_pack.alt_thr = controller.alt_thr;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_Z9TelemPackv+0x188>)
 80025c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 80025cc:	f001 fa6c 	bl	8003aa8 <HAL_GetTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <_Z9TelemPackv+0x18c>)
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <_Z9TelemPackv+0x170>)
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	238c      	movs	r3, #140	; 0x8c
 80025e2:	461a      	mov	r2, r3
 80025e4:	f00b fc3a 	bl	800de5c <memcpy>
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2000032c 	.word	0x2000032c
 80025f0:	20000350 	.word	0x20000350
 80025f4:	20000a68 	.word	0x20000a68
 80025f8:	20000308 	.word	0x20000308
 80025fc:	20000468 	.word	0x20000468
 8002600:	200002d4 	.word	0x200002d4
 8002604:	200002d8 	.word	0x200002d8
 8002608:	20000680 	.word	0x20000680
 800260c:	200003dc 	.word	0x200003dc

08002610 <_Z9SendTelemv>:

void SendTelem() {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
	  TelemPack();
 8002616:	f7ff ff33 	bl	8002480 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 800261a:	2364      	movs	r3, #100	; 0x64
 800261c:	228c      	movs	r2, #140	; 0x8c
 800261e:	490e      	ldr	r1, [pc, #56]	; (8002658 <_Z9SendTelemv+0x48>)
 8002620:	480e      	ldr	r0, [pc, #56]	; (800265c <_Z9SendTelemv+0x4c>)
 8002622:	f005 fc25 	bl	8007e70 <HAL_UART_Transmit>
	  char end_char = '@';
 8002626:	2340      	movs	r3, #64	; 0x40
 8002628:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 800262a:	1df9      	adds	r1, r7, #7
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	2201      	movs	r2, #1
 8002630:	480a      	ldr	r0, [pc, #40]	; (800265c <_Z9SendTelemv+0x4c>)
 8002632:	f005 fc1d 	bl	8007e70 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002636:	1df9      	adds	r1, r7, #7
 8002638:	2364      	movs	r3, #100	; 0x64
 800263a:	2201      	movs	r2, #1
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <_Z9SendTelemv+0x4c>)
 800263e:	f005 fc17 	bl	8007e70 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8002642:	f001 fa31 	bl	8003aa8 <HAL_GetTick>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <_Z9SendTelemv+0x50>)
 800264c:	601a      	str	r2, [r3, #0]


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200003dc 	.word	0x200003dc
 800265c:	20000250 	.word	0x20000250
 8002660:	20000acc 	.word	0x20000acc

08002664 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af04      	add	r7, sp, #16
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	b29a      	uxth	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	2302      	movs	r3, #2
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	21d1      	movs	r1, #209	; 0xd1
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <_Z7GyroOkuh+0x40>)
 8002686:	f002 fc8b 	bl	8004fa0 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 800268a:	7b3b      	ldrb	r3, [r7, #12]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b21a      	sxth	r2, r3
 8002690:	7b7b      	ldrb	r3, [r7, #13]
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000009c 	.word	0x2000009c

080026a8 <_Z6PWMYazv>:




void PWMYaz() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	  if(armed) {
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <_Z6PWMYazv+0x9c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d045      	beq.n	8002740 <_Z6PWMYazv+0x98>

		  if(!motor_start) {
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <_Z6PWMYazv+0xa0>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 80026c2:	f000 f877 	bl	80027b4 <_Z11MotorBaslatv>
		  	  motor_start = true;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <_Z6PWMYazv+0xa0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > 1050) {
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <_Z6PWMYazv+0xa4>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f240 52db 	movw	r2, #1499	; 0x5db
 80026d4:	4293      	cmp	r3, r2
 80026d6:	dc1b      	bgt.n	8002710 <_Z6PWMYazv+0x68>
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <_Z6PWMYazv+0xa4>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f240 421a 	movw	r2, #1050	; 0x41a
 80026e0:	4293      	cmp	r3, r2
 80026e2:	dd15      	ble.n	8002710 <_Z6PWMYazv+0x68>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <_Z6PWMYazv+0xa8>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <_Z6PWMYazv+0xac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <_Z6PWMYazv+0xa8>)
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <_Z6PWMYazv+0xac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <_Z6PWMYazv+0xa8>)
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_Z6PWMYazv+0xac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_Z6PWMYazv+0xa8>)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <_Z6PWMYazv+0xac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
 800270c:	bf00      	nop
		  }
	  }



}
 800270e:	e017      	b.n	8002740 <_Z6PWMYazv+0x98>
		  else if(motor_start) {
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <_Z6PWMYazv+0xa0>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <_Z6PWMYazv+0x98>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <_Z6PWMYazv+0xac>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002720:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <_Z6PWMYazv+0xac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <_Z6PWMYazv+0xac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <_Z6PWMYazv+0xac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000ad1 	.word	0x20000ad1
 8002748:	20000ad2 	.word	0x20000ad2
 800274c:	20000a9c 	.word	0x20000a9c
 8002750:	20000a68 	.word	0x20000a68
 8002754:	200000f0 	.word	0x200000f0

08002758 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002772:	da12      	bge.n	800279a <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff74 	bl	8002664 <_Z7GyroOkuh>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fa84 	bl	8000c8c <__aeabi_i2f>
 8002784:	4603      	mov	r3, r0
 8002786:	4619      	mov	r1, r3
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7fe f9cb 	bl	8000b24 <__addsf3>
 800278e:	4603      	mov	r3, r0
 8002790:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3301      	adds	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	e7e8      	b.n	800276c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800279a:	4905      	ldr	r1, [pc, #20]	; (80027b0 <_Z7GyroErrh+0x58>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7fe fb7d 	bl	8000e9c <__aeabi_fdiv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	44fa0000 	.word	0x44fa0000

080027b4 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <_Z11MotorBaslatv+0x38>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <_Z11MotorBaslatv+0x38>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_Z11MotorBaslatv+0x38>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <_Z11MotorBaslatv+0x38>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80027e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e4:	f001 f96a 	bl	8003abc <HAL_Delay>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200000f0 	.word	0x200000f0

080027f0 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b097      	sub	sp, #92	; 0x5c
 80027f4:	af0c      	add	r7, sp, #48	; 0x30
 80027f6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a85      	ldr	r2, [pc, #532]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f040 8328 	bne.w	8002e52 <HAL_TIM_PeriodElapsedCallback+0x662>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 8002802:	2050      	movs	r0, #80	; 0x50
 8002804:	f7ff f812 	bl	800182c <set_ucounter>
		set_b_counter(12);
 8002808:	200c      	movs	r0, #12
 800280a:	f7fe ffbb 	bl	8001784 <set_b_counter>

		controller_counter++;
 800280e:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002818:	801a      	strh	r2, [r3, #0]

		if(get_ucounter() == 1) {
 800281a:	f7ff f821 	bl	8001860 <get_ucounter>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_TIM_PeriodElapsedCallback+0x44>
			request_range();
 800282e:	f7fe ffc3 	bl	80017b8 <request_range>
 8002832:	e0c0      	b.n	80029b6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8002834:	f7ff f814 	bl	8001860 <get_ucounter>
 8002838:	4603      	mov	r3, r0
 800283a:	2b50      	cmp	r3, #80	; 0x50
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80b6 	beq.w	80029b6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		  sonar_range = getRange();
 800284a:	f7fe ffcf 	bl	80017ec <getRange>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	4b71      	ldr	r3, [pc, #452]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002854:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a71      	ldr	r2, [pc, #452]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800285c:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 800285e:	4b71      	ldr	r3, [pc, #452]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a71      	ldr	r2, [pc, #452]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002864:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8002866:	4b71      	ldr	r3, [pc, #452]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4971      	ldr	r1, [pc, #452]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa61 	bl	8000d34 <__aeabi_fmul>
 8002872:	4603      	mov	r3, r0
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fffd 	bl	8001874 <_ZSt3absf>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	496b      	ldr	r1, [pc, #428]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa56 	bl	8000d34 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fff2 	bl	8001874 <_ZSt3absf>
 8002890:	6238      	str	r0, [r7, #32]
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 8002892:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe f9f4 	bl	8000c84 <__aeabi_ui2f>
 800289c:	4603      	mov	r3, r0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fdba 	bl	8000418 <__aeabi_f2d>
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80028aa:	f7fd ff37 	bl	800071c <__aeabi_ddiv>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4614      	mov	r4, r2
 80028b4:	461d      	mov	r5, r3
 80028b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028b8:	f7fe fff4 	bl	80018a4 <_ZSt3cosf>
 80028bc:	4603      	mov	r3, r0
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fdaa 	bl	8000418 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fdfc 	bl	80004c8 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	6a38      	ldr	r0, [r7, #32]
 80028da:	f7fe ffe3 	bl	80018a4 <_ZSt3cosf>
 80028de:	4603      	mov	r3, r0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fd99 	bl	8000418 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fdeb 	bl	80004c8 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f8bd 	bl	8000a78 <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002902:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8002904:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8002908:	61fb      	str	r3, [r7, #28]
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a44      	ldr	r2, [pc, #272]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f903 	bl	8000b20 <__aeabi_fsub>
 800291a:	4603      	mov	r3, r0
 800291c:	69f9      	ldr	r1, [r7, #28]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fabc 	bl	8000e9c <__aeabi_fdiv>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800292a:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe ff9f 	bl	8001874 <_ZSt3absf>
 8002936:	4603      	mov	r3, r0
 8002938:	2201      	movs	r2, #1
 800293a:	4614      	mov	r4, r2
 800293c:	493e      	ldr	r1, [pc, #248]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fbb4 	bl	80010ac <__aeabi_fcmpgt>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_PeriodElapsedCallback+0x15e>
 800294a:	2300      	movs	r3, #0
 800294c:	461c      	mov	r4, r3
 800294e:	b2e3      	uxtb	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_TIM_PeriodElapsedCallback+0x174>
			  sonar_alt = sonar_alt_;
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800295a:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002962:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fb9e 	bl	80010ac <__aeabi_fcmpgt>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fd4c 	bl	8000418 <__aeabi_f2d>
 8002980:	a321      	add	r3, pc, #132	; (adr r3, 8002a08 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fe f811 	bl	80009ac <__aeabi_dcmplt>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			  EKF.Qs = 9e9;
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002992:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002994:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			  EKF.salt = 50;
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800299c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80029a0:	e009      	b.n	80029b6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		  }

		  else {
			  EKF.Qs = 0.25;
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029a4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80029a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			  EKF.salt = 1;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		  }

		}

		if(get_b_counter() == 1) {
 80029b6:	f7fe fedb 	bl	8001770 <get_b_counter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			write_ut();
 80029ca:	f7fe fcd1 	bl	8001370 <write_ut>
 80029ce:	e06d      	b.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x2bc>
		}

		else if(get_b_counter() == 5) { //5 ms
 80029d0:	f7fe fece 	bl	8001770 <get_b_counter>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d035      	beq.n	8002a50 <HAL_TIM_PeriodElapsedCallback+0x260>
			bmp.uncomp.temp = read_ut ();
 80029e4:	f7fe fcdc 	bl	80013a0 <read_ut>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f94e 	bl	8000c8c <__aeabi_i2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029f4:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 80029f6:	4815      	ldr	r0, [pc, #84]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029f8:	f7fe fcec 	bl	80013d4 <get_temp>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002a00:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8002a02:	f7fe fd3f 	bl	8001484 <write_up>
 8002a06:	e051      	b.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002a08:	33333333 	.word	0x33333333
 8002a0c:	3fd33333 	.word	0x3fd33333
 8002a10:	20000138 	.word	0x20000138
 8002a14:	20000af8 	.word	0x20000af8
 8002a18:	20000af4 	.word	0x20000af4
 8002a1c:	20000ae4 	.word	0x20000ae4
 8002a20:	20000ae8 	.word	0x20000ae8
 8002a24:	20000aec 	.word	0x20000aec
 8002a28:	20000af0 	.word	0x20000af0
 8002a2c:	2000032c 	.word	0x2000032c
 8002a30:	3c8e8a72 	.word	0x3c8e8a72
 8002a34:	40590000 	.word	0x40590000
 8002a38:	40e00000 	.word	0x40e00000
 8002a3c:	40c00000 	.word	0x40c00000
 8002a40:	20000468 	.word	0x20000468
 8002a44:	50061c46 	.word	0x50061c46
 8002a48:	42480000 	.word	0x42480000
 8002a4c:	20000afc 	.word	0x20000afc
		}

		else if(get_b_counter() == 12) { //
 8002a50:	f7fe fe8e 	bl	8001770 <get_b_counter>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x2bc>
			bmp.uncomp.press = read_up (bmp.oss);
 8002a64:	4ba8      	ldr	r3, [pc, #672]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002a66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a68:	f7fe fd2c 	bl	80014c4 <read_up>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4aa6      	ldr	r2, [pc, #664]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002a70:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8002a72:	4ea5      	ldr	r6, [pc, #660]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a8e:	f7fe fd47 	bl	8001520 <get_pressure>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a9c      	ldr	r2, [pc, #624]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8002a98:	489b      	ldr	r0, [pc, #620]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002a9a:	f7fe fe0d 	bl	80016b8 <get_altitude>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a99      	ldr	r2, [pc, #612]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002aa2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8002aa4:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	4a98      	ldr	r2, [pc, #608]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002aaa:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 8002aac:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f040 81ce 	bne.w	8002e52 <HAL_TIM_PeriodElapsedCallback+0x662>

		  controller_counter = 0;
 8002ab6:	4b96      	ldr	r3, [pc, #600]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/65.5 ;
 8002abc:	2043      	movs	r0, #67	; 0x43
 8002abe:	f7ff fdd1 	bl	8002664 <_Z7GyroOkuh>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe f8e1 	bl	8000c8c <__aeabi_i2f>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b91      	ldr	r3, [pc, #580]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7fe f824 	bl	8000b20 <__aeabi_fsub>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	498f      	ldr	r1, [pc, #572]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f9dd 	bl	8000e9c <__aeabi_fdiv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002ae8:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/65.5 ;
 8002aea:	2045      	movs	r0, #69	; 0x45
 8002aec:	f7ff fdba 	bl	8002664 <_Z7GyroOkuh>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f8ca 	bl	8000c8c <__aeabi_i2f>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fe f80d 	bl	8000b20 <__aeabi_fsub>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4983      	ldr	r1, [pc, #524]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f9c6 	bl	8000e9c <__aeabi_fdiv>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002b16:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/65.5 ;
 8002b18:	2047      	movs	r0, #71	; 0x47
 8002b1a:	f7ff fda3 	bl	8002664 <_Z7GyroOkuh>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f8b3 	bl	8000c8c <__aeabi_i2f>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b7f      	ldr	r3, [pc, #508]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7fd fff6 	bl	8000b20 <__aeabi_fsub>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4978      	ldr	r1, [pc, #480]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f9af 	bl	8000e9c <__aeabi_fdiv>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002b44:	601a      	str	r2, [r3, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8002b46:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a79      	ldr	r2, [pc, #484]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b4c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		  EKF.gyro[1] = -1*gyroY;
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b58:	4a75      	ldr	r2, [pc, #468]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b5a:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
		  EKF.gyro[2] = gyroZ;
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a73      	ldr	r2, [pc, #460]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002b64:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8002b68:	203b      	movs	r0, #59	; 0x3b
 8002b6a:	f7ff fd7b 	bl	8002664 <_Z7GyroOkuh>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f88b 	bl	8000c8c <__aeabi_i2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002b7a:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8002b7c:	203d      	movs	r0, #61	; 0x3d
 8002b7e:	f7ff fd71 	bl	8002664 <_Z7GyroOkuh>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f881 	bl	8000c8c <__aeabi_i2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002b8e:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8002b90:	203f      	movs	r0, #63	; 0x3f
 8002b92:	f7ff fd67 	bl	8002664 <_Z7GyroOkuh>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f877 	bl	8000c8c <__aeabi_i2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002ba2:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8002ba4:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002baa:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
		  EKF.acc[1] = accY;// - AccYh;
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bb4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		  EKF.acc[2] = accZ;// - AccZh;
 8002bb8:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5c      	ldr	r2, [pc, #368]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bbe:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f8b1 	bl	8000d34 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f8a7 	bl	8000d34 <__aeabi_fmul>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4619      	mov	r1, r3
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7fd ff9a 	bl	8000b24 <__addsf3>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f898 	bl	8000d34 <__aeabi_fmul>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4619      	mov	r1, r3
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fd ff8b 	bl	8000b24 <__addsf3>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fe53 	bl	80018bc <_ZSt4sqrtf>
 8002c16:	61b8      	str	r0, [r7, #24]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f93c 	bl	8000e9c <__aeabi_fdiv>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fe30 	bl	800188c <_ZSt4asinf>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fbf2 	bl	8000418 <__aeabi_f2d>
 8002c34:	a330      	add	r3, pc, #192	; (adr r3, 8002cf8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fc45 	bl	80004c8 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ff17 	bl	8000a78 <__aeabi_d2f>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002c4e:	6013      	str	r3, [r2, #0]

		  EKF.acc_vert = (accZ - AccZh) / 4096 * 9.81;
 8002c50:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd ff60 	bl	8000b20 <__aeabi_fsub>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f918 	bl	8000e9c <__aeabi_fdiv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fbd2 	bl	8000418 <__aeabi_f2d>
 8002c74:	a322      	add	r3, pc, #136	; (adr r3, 8002d00 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f7fd fc25 	bl	80004c8 <__aeabi_dmul>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd fef7 	bl	8000a78 <__aeabi_d2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c8e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		  EKF.sonar_alt = sonar_alt;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002c98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		  EKF.baro_alt = baro_alt;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002ca2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

		  EKF.Run();
 8002ca6:	4822      	ldr	r0, [pc, #136]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002ca8:	f006 fa96 	bl	80091d8 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002cae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002cb4:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002cb8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002cbc:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002cbe:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002cc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002cc8:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002cd2:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002cd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002cdc:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002ce6:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fae7 	bl	80022c0 <_Z9checkModei>
 8002cf2:	e02f      	b.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0x564>
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	d4fdf3b6 	.word	0xd4fdf3b6
 8002cfc:	404ca978 	.word	0x404ca978
 8002d00:	51eb851f 	.word	0x51eb851f
 8002d04:	40239eb8 	.word	0x40239eb8
 8002d08:	20000afc 	.word	0x20000afc
 8002d0c:	20000ae0 	.word	0x20000ae0
 8002d10:	20000af8 	.word	0x20000af8
 8002d14:	200002ec 	.word	0x200002ec
 8002d18:	42830000 	.word	0x42830000
 8002d1c:	200002d4 	.word	0x200002d4
 8002d20:	200002f0 	.word	0x200002f0
 8002d24:	200002d8 	.word	0x200002d8
 8002d28:	200002f4 	.word	0x200002f4
 8002d2c:	200002dc 	.word	0x200002dc
 8002d30:	20000468 	.word	0x20000468
 8002d34:	200002e0 	.word	0x200002e0
 8002d38:	200002e4 	.word	0x200002e4
 8002d3c:	200002e8 	.word	0x200002e8
 8002d40:	20000304 	.word	0x20000304
 8002d44:	20000300 	.word	0x20000300
 8002d48:	20000ae4 	.word	0x20000ae4
 8002d4c:	2000032c 	.word	0x2000032c
 8002d50:	20000a9c 	.word	0x20000a9c

			controller.z_vel = EKF.vz;
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8002d56:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d5a:	4a41      	ldr	r2, [pc, #260]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d5c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8002d60:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8002d62:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d68:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170

		  controller.state = state;
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d6e:	4a3d      	ldr	r2, [pc, #244]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8002d70:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8002d74:	4615      	mov	r5, r2
 8002d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002d84:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002d86:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8002d8a:	4615      	mov	r5, r2
 8002d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ff75 	bl	8000c8c <__aeabi_i2f>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002da6:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174

		  controller_output_ang = controller.Run();
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	492c      	ldr	r1, [pc, #176]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f005 fbf9 	bl	80085a8 <_ZN10Controller3RunEv>
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	482c      	ldr	r0, [pc, #176]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8002dbe:	f000 f95c 	bl	800307a <_ZNSt6vectorIfSaIfEEaSEOS1_>
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f93c 	bl	8003044 <_ZNSt6vectorIfSaIfEED1Ev>

		  controller_output[0] = controller.controller_output_pwm[0];
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002dce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002dd4:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002dd8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002dde:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002de2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002de8:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002dec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002df0:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002df2:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002df6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002dfc:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002e00:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8002e06:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  w_ang = controller.pd_roll;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb02 	bl	8000418 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4917      	ldr	r1, [pc, #92]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8002e1a:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8002e26:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8002e30:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8002e3a:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8002e44:	801a      	strh	r2, [r3, #0]


		  PWMYaz();
 8002e46:	f7ff fc2f 	bl	80026a8 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	480f      	ldr	r0, [pc, #60]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8002e4e:	f001 faf1 	bl	8004434 <HAL_GPIO_TogglePin>
		}
		}
	}
 8002e52:	bf00      	nop
 8002e54:	372c      	adds	r7, #44	; 0x2c
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000468 	.word	0x20000468
 8002e60:	20000680 	.word	0x20000680
 8002e64:	2000032c 	.word	0x2000032c
 8002e68:	20000308 	.word	0x20000308
 8002e6c:	20000a9c 	.word	0x20000a9c
 8002e70:	20000a78 	.word	0x20000a78
 8002e74:	20000a68 	.word	0x20000a68
 8002e78:	20000ad8 	.word	0x20000ad8
 8002e7c:	20000a84 	.word	0x20000a84
 8002e80:	20000a86 	.word	0x20000a86
 8002e84:	20000a88 	.word	0x20000a88
 8002e88:	20000a8a 	.word	0x20000a8a
 8002e8c:	40010c00 	.word	0x40010c00

08002e90 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d17f      	bne.n	8002fa0 <HAL_TIM_IC_CaptureCallback+0x110>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d17b      	bne.n	8002fa0 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a40      	ldr	r2, [pc, #256]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002eae:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f004 f9fa 	bl	80072ac <HAL_TIM_ReadCapturedValue>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ebe:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	4a3a      	ldr	r2, [pc, #232]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002ecc:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0fdb      	lsrs	r3, r3, #31
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8002eda:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002ee2:	33ff      	adds	r3, #255	; 0xff
 8002ee4:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002ee6:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002ef6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bfcc      	ite	gt
 8002f10:	2301      	movgt	r3, #1
 8002f12:	2300      	movle	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8002f1a:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8002f22:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4824      	ldr	r0, [pc, #144]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f32:	f008 fe7f 	bl	800bc34 <_ZN3PID7pwm2angEt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f3a:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	481f      	ldr	r0, [pc, #124]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f46:	f008 fe75 	bl	800bc34 <_ZN3PID7pwm2angEt>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f4e:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4818      	ldr	r0, [pc, #96]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f62:	f008 fea4 	bl	800bcae <_ZN3PID8pwm2rateEt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f6a:	6153      	str	r3, [r2, #20]

				i++;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f7c:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002f88:	fb83 2301 	smull	r2, r3, r3, r1
 8002f8c:	105a      	asrs	r2, r3, #1
 8002f8e:	17cb      	asrs	r3, r1, #31
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	1aca      	subs	r2, r1, r3
 8002f9a:	b212      	sxth	r2, r2
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f9e:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000180 	.word	0x20000180
 8002fac:	20000a8c 	.word	0x20000a8c
 8002fb0:	20000a90 	.word	0x20000a90
 8002fb4:	20000a94 	.word	0x20000a94
 8002fb8:	20000a98 	.word	0x20000a98
 8002fbc:	20000a9c 	.word	0x20000a9c
 8002fc0:	20000ac0 	.word	0x20000ac0
 8002fc4:	200005e8 	.word	0x200005e8
 8002fc8:	20000308 	.word	0x20000308
 8002fcc:	38e38e39 	.word	0x38e38e39

08002fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd4:	b672      	cpsid	i
}
 8002fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <Error_Handler+0x8>

08002fda <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f85e 	bl	80030a4 <_ZNSaIfEC1Ev>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f866 	bl	80030bc <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f86d 	bl	80030e2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800302a:	461a      	mov	r2, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f862 	bl	80030f6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fc4d 	bl	80018d4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681c      	ldr	r4, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f860 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800305c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800305e:	461a      	mov	r2, r3
 8003060:	4629      	mov	r1, r5
 8003062:	4620      	mov	r0, r4
 8003064:	f000 f864 	bl	8003130 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ffd1 	bl	8003012 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bdb0      	pop	{r4, r5, r7, pc}

0800307a <_ZNSt6vectorIfSaIfEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8003088:	6838      	ldr	r0, [r7, #0]
 800308a:	f000 f85f 	bl	800314c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>
 800308e:	4603      	mov	r3, r0
 8003090:	4622      	mov	r2, r4
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f863 	bl	8003160 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800309a:	687b      	ldr	r3, [r7, #4]
      }
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f895 	bl	80031dc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
	{ }
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
	if (__p)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f86e 	bl	80031f0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f865 	bl	800320e <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f857 	bl	8003228 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>
 800317a:	f107 021c 	add.w	r2, r7, #28
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f860 	bl	800324a <_ZNSt6vectorIfSaIfEEC1ERKS0_>
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff33 	bl	8002ffa <_ZNSaIfED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f864 	bl	8003268 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f85d 	bl	8003268 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ffb3 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031b6:	4604      	mov	r4, r0
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ffae 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f86d 	bl	80032a4 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>
	vector __tmp(get_allocator());
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff38 	bl	8003044 <_ZNSt6vectorIfSaIfEED1Ev>
      }
 80031d4:	bf00      	nop
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}

080031dc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f85d 	bl	80032c0 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f85d 	bl	80032da <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f000 f85b 	bl	80032ee <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003238:	4603      	mov	r3, r0
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f860 	bl	8003302 <_ZNSaIfEC1ERKS_>
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZNSt6vectorIfSaIfEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f860 	bl	800331e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff20 	bl	80030bc <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f85a 	bl	800333c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f856 	bl	800333c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4619      	mov	r1, r3
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	f000 f850 	bl	800333c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80032ae:	461a      	mov	r2, r3
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f858 	bl	8003368 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80032cc:	68b8      	ldr	r0, [r7, #8]
 80032ce:	f008 fe20 	bl	800bf12 <_ZdlPv>
      }
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f837 	bl	8003382 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f833 	bl	8003398 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]
	}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8003374:	68b8      	ldr	r0, [r7, #8]
 8003376:	f000 f821 	bl	80033bc <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffac 	bl	8003302 <_ZNSaIfEC1ERKS_>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fe85 	bl	80030bc <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d110      	bne.n	8003402 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10b      	bne.n	8003402 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 80033ea:	4812      	ldr	r0, [pc, #72]	; (8003434 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80033ec:	f005 fe58 	bl	80090a0 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 80033f0:	4811      	ldr	r0, [pc, #68]	; (8003438 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80033f2:	f008 f919 	bl	800b628 <_ZN3PIDC1Ev>
Controller controller;
 80033f6:	4811      	ldr	r0, [pc, #68]	; (800343c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80033f8:	f004 fffe 	bl	80083f8 <_ZN10ControllerC1Ev>
std::vector<float> controller_output_ang;
 80033fc:	4810      	ldr	r0, [pc, #64]	; (8003440 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80033fe:	f7fe fa82 	bl	8001906 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d110      	bne.n	800342a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800340e:	4293      	cmp	r3, r2
 8003410:	d10b      	bne.n	800342a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003412:	480b      	ldr	r0, [pc, #44]	; (8003440 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003414:	f7ff fe16 	bl	8003044 <_ZNSt6vectorIfSaIfEED1Ev>
Controller controller;
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800341a:	f005 fbef 	bl	8008bfc <_ZN10ControllerD1Ev>
PID pid;
 800341e:	4806      	ldr	r0, [pc, #24]	; (8003438 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003420:	f008 fcee 	bl	800be00 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8003424:	4803      	ldr	r0, [pc, #12]	; (8003434 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003426:	f008 f8ed 	bl	800b604 <_ZN15Kalman_FiltresiD1Ev>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000468 	.word	0x20000468
 8003438:	200005e8 	.word	0x200005e8
 800343c:	20000680 	.word	0x20000680
 8003440:	20000a78 	.word	0x20000a78

08003444 <_GLOBAL__sub_I_hi2c1>:
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
 8003448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800344c:	2001      	movs	r0, #1
 800344e:	f7ff ffbf 	bl	80033d0 <_Z41__static_initialization_and_destruction_0ii>
 8003452:	bd80      	pop	{r7, pc}

08003454 <_GLOBAL__sub_D_hi2c1>:
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
 8003458:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800345c:	2000      	movs	r0, #0
 800345e:	f7ff ffb7 	bl	80033d0 <_Z41__static_initialization_and_destruction_0ii>
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_MspInit+0x5c>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_MspInit+0x5c>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6193      	str	r3, [r2, #24]
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_MspInit+0x5c>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_MspInit+0x5c>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <HAL_MspInit+0x5c>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	61d3      	str	r3, [r2, #28]
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_MspInit+0x5c>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_MspInit+0x60>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_MspInit+0x60>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000

080034c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_I2C_MspInit+0x70>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d123      	bne.n	8003530 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_I2C_MspInit+0x74>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_I2C_MspInit+0x74>)
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_I2C_MspInit+0x74>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003500:	23c0      	movs	r3, #192	; 0xc0
 8003502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003504:	2312      	movs	r3, #18
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4619      	mov	r1, r3
 8003512:	480b      	ldr	r0, [pc, #44]	; (8003540 <HAL_I2C_MspInit+0x78>)
 8003514:	f000 fdf2 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_I2C_MspInit+0x74>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_I2C_MspInit+0x74>)
 800351e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_I2C_MspInit+0x74>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40005400 	.word	0x40005400
 800353c:	40021000 	.word	0x40021000
 8003540:	40010c00 	.word	0x40010c00

08003544 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_TIM_PWM_MspInit+0x34>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10b      	bne.n	800356e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_TIM_PWM_MspInit+0x38>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_TIM_PWM_MspInit+0x38>)
 800355c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003560:	6193      	str	r3, [r2, #24]
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_TIM_PWM_MspInit+0x38>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d114      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	61d3      	str	r3, [r2, #28]
 80035ac:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2101      	movs	r1, #1
 80035bc:	201c      	movs	r0, #28
 80035be:	f000 fb78 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035c2:	201c      	movs	r0, #28
 80035c4:	f000 fb91 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035c8:	e042      	b.n	8003650 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a23      	ldr	r2, [pc, #140]	; (800365c <HAL_TIM_Base_MspInit+0xdc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d12c      	bne.n	800362e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	61d3      	str	r3, [r2, #28]
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6193      	str	r3, [r2, #24]
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003604:	2301      	movs	r3, #1
 8003606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	4619      	mov	r1, r3
 8003616:	4812      	ldr	r0, [pc, #72]	; (8003660 <HAL_TIM_Base_MspInit+0xe0>)
 8003618:	f000 fd70 	bl	80040fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	201d      	movs	r0, #29
 8003622:	f000 fb46 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003626:	201d      	movs	r0, #29
 8003628:	f000 fb5f 	bl	8003cea <HAL_NVIC_EnableIRQ>
}
 800362c:	e010      	b.n	8003650 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_TIM_Base_MspInit+0xe4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10b      	bne.n	8003650 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a06      	ldr	r2, [pc, #24]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <HAL_TIM_Base_MspInit+0xd8>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	40000400 	.word	0x40000400
 8003660:	40010c00 	.word	0x40010c00
 8003664:	40000800 	.word	0x40000800

08003668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_TIM_MspPostInit+0x8c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d131      	bne.n	80036ec <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_TIM_MspPostInit+0x90>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80036b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80036bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	4619      	mov	r1, r3
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <HAL_TIM_MspPostInit+0x94>)
 80036ce:	f000 fd15 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80036d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80036d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2302      	movs	r3, #2
 80036de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	4806      	ldr	r0, [pc, #24]	; (8003700 <HAL_TIM_MspPostInit+0x98>)
 80036e8:	f000 fd08 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036ec:	bf00      	nop
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010c00 	.word	0x40010c00
 8003700:	40010800 	.word	0x40010800

08003704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0318 	add.w	r3, r7, #24
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4b      	ldr	r2, [pc, #300]	; (800384c <HAL_UART_MspInit+0x148>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d159      	bne.n	80037d8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003724:	4b4a      	ldr	r3, [pc, #296]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	4a49      	ldr	r2, [pc, #292]	; (8003850 <HAL_UART_MspInit+0x14c>)
 800372a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372e:	6193      	str	r3, [r2, #24]
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373c:	4b44      	ldr	r3, [pc, #272]	; (8003850 <HAL_UART_MspInit+0x14c>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_UART_MspInit+0x14c>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	f107 0318 	add.w	r3, r7, #24
 8003766:	4619      	mov	r1, r3
 8003768:	483a      	ldr	r0, [pc, #232]	; (8003854 <HAL_UART_MspInit+0x150>)
 800376a:	f000 fcc7 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800376e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377c:	f107 0318 	add.w	r3, r7, #24
 8003780:	4619      	mov	r1, r3
 8003782:	4834      	ldr	r0, [pc, #208]	; (8003854 <HAL_UART_MspInit+0x150>)
 8003784:	f000 fcba 	bl	80040fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003788:	4b33      	ldr	r3, [pc, #204]	; (8003858 <HAL_UART_MspInit+0x154>)
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <HAL_UART_MspInit+0x158>)
 800378c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800378e:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_UART_MspInit+0x154>)
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_UART_MspInit+0x154>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800379a:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_UART_MspInit+0x154>)
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037ae:	2220      	movs	r2, #32
 80037b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037ba:	4827      	ldr	r0, [pc, #156]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037bc:	f000 fab0 	bl	8003d20 <HAL_DMA_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80037c6:	f7ff fc03 	bl	8002fd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34
 80037d0:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_UART_MspInit+0x154>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037d6:	e034      	b.n	8003842 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_UART_MspInit+0x15c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d12f      	bne.n	8003842 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	61d3      	str	r3, [r2, #28]
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_UART_MspInit+0x14c>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6193      	str	r3, [r2, #24]
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_UART_MspInit+0x14c>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003812:	2304      	movs	r3, #4
 8003814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381a:	2303      	movs	r3, #3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381e:	f107 0318 	add.w	r3, r7, #24
 8003822:	4619      	mov	r1, r3
 8003824:	480b      	ldr	r0, [pc, #44]	; (8003854 <HAL_UART_MspInit+0x150>)
 8003826:	f000 fc69 	bl	80040fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800382a:	2308      	movs	r3, #8
 800382c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	f107 0318 	add.w	r3, r7, #24
 800383a:	4619      	mov	r1, r3
 800383c:	4805      	ldr	r0, [pc, #20]	; (8003854 <HAL_UART_MspInit+0x150>)
 800383e:	f000 fc5d 	bl	80040fc <HAL_GPIO_Init>
}
 8003842:	bf00      	nop
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40013800 	.word	0x40013800
 8003850:	40021000 	.word	0x40021000
 8003854:	40010800 	.word	0x40010800
 8003858:	20000290 	.word	0x20000290
 800385c:	40020058 	.word	0x40020058
 8003860:	40004400 	.word	0x40004400

08003864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <NMI_Handler+0x4>

0800386a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <HardFault_Handler+0x4>

08003870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <MemManage_Handler+0x4>

08003876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <BusFault_Handler+0x4>

0800387c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <UsageFault_Handler+0x4>

08003882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038aa:	f000 f8eb 	bl	8003a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <DMA1_Channel5_IRQHandler+0x10>)
 80038ba:	f000 faeb 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000290 	.word	0x20000290

080038c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <TIM2_IRQHandler+0x10>)
 80038ce:	f003 f9cf 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000138 	.word	0x20000138

080038dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <TIM3_IRQHandler+0x10>)
 80038e2:	f003 f9c5 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000180 	.word	0x20000180

080038f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	return 1;
 80038f4:	2301      	movs	r3, #1
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <_kill>:

int _kill(int pid, int sig)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003908:	f00a fa6e 	bl	800dde8 <__errno>
 800390c:	4603      	mov	r3, r0
 800390e:	2216      	movs	r2, #22
 8003910:	601a      	str	r2, [r3, #0]
	return -1;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <_exit>:

void _exit (int status)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003926:	f04f 31ff 	mov.w	r1, #4294967295
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffe7 	bl	80038fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8003930:	e7fe      	b.n	8003930 <_exit+0x12>
	...

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f00a fa40 	bl	800dde8 <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20005000 	.word	0x20005000
 8003994:	00000400 	.word	0x00000400
 8003998:	20000b44 	.word	0x20000b44
 800399c:	20000b70 	.word	0x20000b70

080039a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039ae:	e003      	b.n	80039b8 <LoopCopyDataInit>

080039b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80039b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039b6:	3104      	adds	r1, #4

080039b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80039b8:	480a      	ldr	r0, [pc, #40]	; (80039e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80039bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80039be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80039c0:	d3f6      	bcc.n	80039b0 <CopyDataInit>
  ldr r2, =_sbss
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80039c4:	e002      	b.n	80039cc <LoopFillZerobss>

080039c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80039c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80039c8:	f842 3b04 	str.w	r3, [r2], #4

080039cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80039ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039d0:	d3f9      	bcc.n	80039c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039d2:	f7ff ffe5 	bl	80039a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039d6:	f00a fa0d 	bl	800ddf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039da:	f7fd ffa1 	bl	8001920 <main>
  bx lr
 80039de:	4770      	bx	lr
  ldr r3, =_sidata
 80039e0:	0800e5d0 	.word	0x0800e5d0
  ldr r0, =_sdata
 80039e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039e8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80039ec:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80039f0:	20000b6c 	.word	0x20000b6c

080039f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039f4:	e7fe      	b.n	80039f4 <ADC1_2_IRQHandler>
	...

080039f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_Init+0x28>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <HAL_Init+0x28>)
 8003a02:	f043 0310 	orr.w	r3, r3, #16
 8003a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a08:	2003      	movs	r0, #3
 8003a0a:	f000 f947 	bl	8003c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f000 f808 	bl	8003a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a14:	f7ff fd26 	bl	8003464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000

08003a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_InitTick+0x54>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_InitTick+0x58>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f95f 	bl	8003d06 <HAL_SYSTICK_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00e      	b.n	8003a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d80a      	bhi.n	8003a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f000 f927 	bl	8003cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a64:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <HAL_InitTick+0x5c>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000004 	.word	0x20000004
 8003a7c:	2000000c 	.word	0x2000000c
 8003a80:	20000008 	.word	0x20000008

08003a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_IncTick+0x1c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_IncTick+0x20>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_IncTick+0x20>)
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	2000000c 	.word	0x2000000c
 8003aa4:	20000b58 	.word	0x20000b58

08003aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <HAL_GetTick+0x10>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000b58 	.word	0x20000b58

08003abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d005      	beq.n	8003ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_Delay+0x44>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ae2:	bf00      	nop
 8003ae4:	f7ff ffe0 	bl	8003aa8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8f7      	bhi.n	8003ae4 <HAL_Delay+0x28>
  {
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4906      	ldr	r1, [pc, #24]	; (8003b9c <__NVIC_EnableIRQ+0x34>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	; (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f1c3 0307 	rsb	r3, r3, #7
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf28      	it	cs
 8003c12:	2304      	movcs	r3, #4
 8003c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d902      	bls.n	8003c24 <NVIC_EncodePriority+0x30>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3b03      	subs	r3, #3
 8003c22:	e000      	b.n	8003c26 <NVIC_EncodePriority+0x32>
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	4313      	orrs	r3, r2
         );
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d301      	bcc.n	8003c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00f      	b.n	8003c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <SysTick_Config+0x40>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c76:	210f      	movs	r1, #15
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	f7ff ff90 	bl	8003ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <SysTick_Config+0x40>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <SysTick_Config+0x40>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff2d 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc4:	f7ff ff42 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7ff ff90 	bl	8003bf4 <NVIC_EncodePriority>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff5f 	bl	8003ba0 <__NVIC_SetPriority>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff35 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffa2 	bl	8003c58 <SysTick_Config>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e043      	b.n	8003dbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_DMA_Init+0xa8>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_DMA_Init+0xac>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	009a      	lsls	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_DMA_Init+0xb0>)
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	bffdfff8 	.word	0xbffdfff8
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	40020000 	.word	0x40020000

08003dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_DMA_Start_IT+0x20>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e04a      	b.n	8003e8a <HAL_DMA_Start_IT+0xb6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d13a      	bne.n	8003e7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f938 	bl	80040a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 020e 	orr.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00f      	b.n	8003e6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0204 	bic.w	r2, r2, #4
 8003e58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 020a 	orr.w	r2, r2, #10
 8003e68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e005      	b.n	8003e88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d04f      	beq.n	8003f5c <HAL_DMA_IRQHandler+0xc8>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04a      	beq.n	8003f5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0204 	bic.w	r2, r2, #4
 8003ee2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a66      	ldr	r2, [pc, #408]	; (8004084 <HAL_DMA_IRQHandler+0x1f0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d029      	beq.n	8003f42 <HAL_DMA_IRQHandler+0xae>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a65      	ldr	r2, [pc, #404]	; (8004088 <HAL_DMA_IRQHandler+0x1f4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xaa>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a63      	ldr	r2, [pc, #396]	; (800408c <HAL_DMA_IRQHandler+0x1f8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01a      	beq.n	8003f38 <HAL_DMA_IRQHandler+0xa4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a62      	ldr	r2, [pc, #392]	; (8004090 <HAL_DMA_IRQHandler+0x1fc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d012      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x9e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a60      	ldr	r2, [pc, #384]	; (8004094 <HAL_DMA_IRQHandler+0x200>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00a      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x98>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5f      	ldr	r2, [pc, #380]	; (8004098 <HAL_DMA_IRQHandler+0x204>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d102      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x92>
 8003f20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f24:	e00e      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f2a:	e00b      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f30:	e008      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f36:	e005      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3c:	e002      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	e000      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb0>
 8003f42:	2304      	movs	r3, #4
 8003f44:	4a55      	ldr	r2, [pc, #340]	; (800409c <HAL_DMA_IRQHandler+0x208>)
 8003f46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8094 	beq.w	800407a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f5a:	e08e      	b.n	800407a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2202      	movs	r2, #2
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d056      	beq.n	800401a <HAL_DMA_IRQHandler+0x186>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d051      	beq.n	800401a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 020a 	bic.w	r2, r2, #10
 8003f92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a38      	ldr	r2, [pc, #224]	; (8004084 <HAL_DMA_IRQHandler+0x1f0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d029      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x166>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a37      	ldr	r2, [pc, #220]	; (8004088 <HAL_DMA_IRQHandler+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x162>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	; (800408c <HAL_DMA_IRQHandler+0x1f8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x15c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_DMA_IRQHandler+0x1fc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d012      	beq.n	8003fea <HAL_DMA_IRQHandler+0x156>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a32      	ldr	r2, [pc, #200]	; (8004094 <HAL_DMA_IRQHandler+0x200>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x150>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a31      	ldr	r2, [pc, #196]	; (8004098 <HAL_DMA_IRQHandler+0x204>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d102      	bne.n	8003fde <HAL_DMA_IRQHandler+0x14a>
 8003fd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fdc:	e00e      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe2:	e00b      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe8:	e008      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fee:	e005      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff4:	e002      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_IRQHandler+0x168>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <HAL_DMA_IRQHandler+0x208>)
 8003ffe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d034      	beq.n	800407a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004018:	e02f      	b.n	800407a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	2208      	movs	r2, #8
 8004020:	409a      	lsls	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_DMA_IRQHandler+0x1e8>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d023      	beq.n	800407c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 020e 	bic.w	r2, r2, #14
 8004042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
    }
  }
  return;
 800407a:	bf00      	nop
 800407c:	bf00      	nop
}
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40020008 	.word	0x40020008
 8004088:	4002001c 	.word	0x4002001c
 800408c:	40020030 	.word	0x40020030
 8004090:	40020044 	.word	0x40020044
 8004094:	40020058 	.word	0x40020058
 8004098:	4002006c 	.word	0x4002006c
 800409c:	40020000 	.word	0x40020000

080040a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2101      	movs	r1, #1
 80040b8:	fa01 f202 	lsl.w	r2, r1, r2
 80040bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d108      	bne.n	80040e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040de:	e007      	b.n	80040f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b08b      	sub	sp, #44	; 0x2c
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410e:	e169      	b.n	80043e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004110:	2201      	movs	r2, #1
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	429a      	cmp	r2, r3
 800412a:	f040 8158 	bne.w	80043de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a9a      	ldr	r2, [pc, #616]	; (800439c <HAL_GPIO_Init+0x2a0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d05e      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
 8004138:	4a98      	ldr	r2, [pc, #608]	; (800439c <HAL_GPIO_Init+0x2a0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d875      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 800413e:	4a98      	ldr	r2, [pc, #608]	; (80043a0 <HAL_GPIO_Init+0x2a4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d058      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
 8004144:	4a96      	ldr	r2, [pc, #600]	; (80043a0 <HAL_GPIO_Init+0x2a4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d86f      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 800414a:	4a96      	ldr	r2, [pc, #600]	; (80043a4 <HAL_GPIO_Init+0x2a8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d052      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
 8004150:	4a94      	ldr	r2, [pc, #592]	; (80043a4 <HAL_GPIO_Init+0x2a8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d869      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 8004156:	4a94      	ldr	r2, [pc, #592]	; (80043a8 <HAL_GPIO_Init+0x2ac>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04c      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
 800415c:	4a92      	ldr	r2, [pc, #584]	; (80043a8 <HAL_GPIO_Init+0x2ac>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d863      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 8004162:	4a92      	ldr	r2, [pc, #584]	; (80043ac <HAL_GPIO_Init+0x2b0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d046      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
 8004168:	4a90      	ldr	r2, [pc, #576]	; (80043ac <HAL_GPIO_Init+0x2b0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d85d      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 800416e:	2b12      	cmp	r3, #18
 8004170:	d82a      	bhi.n	80041c8 <HAL_GPIO_Init+0xcc>
 8004172:	2b12      	cmp	r3, #18
 8004174:	d859      	bhi.n	800422a <HAL_GPIO_Init+0x12e>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_GPIO_Init+0x80>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041f7 	.word	0x080041f7
 8004180:	080041d1 	.word	0x080041d1
 8004184:	080041e3 	.word	0x080041e3
 8004188:	08004225 	.word	0x08004225
 800418c:	0800422b 	.word	0x0800422b
 8004190:	0800422b 	.word	0x0800422b
 8004194:	0800422b 	.word	0x0800422b
 8004198:	0800422b 	.word	0x0800422b
 800419c:	0800422b 	.word	0x0800422b
 80041a0:	0800422b 	.word	0x0800422b
 80041a4:	0800422b 	.word	0x0800422b
 80041a8:	0800422b 	.word	0x0800422b
 80041ac:	0800422b 	.word	0x0800422b
 80041b0:	0800422b 	.word	0x0800422b
 80041b4:	0800422b 	.word	0x0800422b
 80041b8:	0800422b 	.word	0x0800422b
 80041bc:	0800422b 	.word	0x0800422b
 80041c0:	080041d9 	.word	0x080041d9
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	4a79      	ldr	r2, [pc, #484]	; (80043b0 <HAL_GPIO_Init+0x2b4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041ce:	e02c      	b.n	800422a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	623b      	str	r3, [r7, #32]
          break;
 80041d6:	e029      	b.n	800422c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	3304      	adds	r3, #4
 80041de:	623b      	str	r3, [r7, #32]
          break;
 80041e0:	e024      	b.n	800422c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	3308      	adds	r3, #8
 80041e8:	623b      	str	r3, [r7, #32]
          break;
 80041ea:	e01f      	b.n	800422c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	330c      	adds	r3, #12
 80041f2:	623b      	str	r3, [r7, #32]
          break;
 80041f4:	e01a      	b.n	800422c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041fe:	2304      	movs	r3, #4
 8004200:	623b      	str	r3, [r7, #32]
          break;
 8004202:	e013      	b.n	800422c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800420c:	2308      	movs	r3, #8
 800420e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	611a      	str	r2, [r3, #16]
          break;
 8004216:	e009      	b.n	800422c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004218:	2308      	movs	r3, #8
 800421a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	615a      	str	r2, [r3, #20]
          break;
 8004222:	e003      	b.n	800422c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004224:	2300      	movs	r3, #0
 8004226:	623b      	str	r3, [r7, #32]
          break;
 8004228:	e000      	b.n	800422c <HAL_GPIO_Init+0x130>
          break;
 800422a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2bff      	cmp	r3, #255	; 0xff
 8004230:	d801      	bhi.n	8004236 <HAL_GPIO_Init+0x13a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	e001      	b.n	800423a <HAL_GPIO_Init+0x13e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2bff      	cmp	r3, #255	; 0xff
 8004240:	d802      	bhi.n	8004248 <HAL_GPIO_Init+0x14c>
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	e002      	b.n	800424e <HAL_GPIO_Init+0x152>
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	3b08      	subs	r3, #8
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	210f      	movs	r1, #15
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	431a      	orrs	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80b1 	beq.w	80043de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800427c:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a4c      	ldr	r2, [pc, #304]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_GPIO_Init+0x2b8>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004294:	4a48      	ldr	r2, [pc, #288]	; (80043b8 <HAL_GPIO_Init+0x2bc>)
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3302      	adds	r3, #2
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	220f      	movs	r2, #15
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a40      	ldr	r2, [pc, #256]	; (80043bc <HAL_GPIO_Init+0x2c0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_GPIO_Init+0x1ec>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <HAL_GPIO_Init+0x2c4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_GPIO_Init+0x1e8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <HAL_GPIO_Init+0x2c8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <HAL_GPIO_Init+0x1e4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <HAL_GPIO_Init+0x2cc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_GPIO_Init+0x1e0>
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <HAL_GPIO_Init+0x1ee>
 80042dc:	2304      	movs	r3, #4
 80042de:	e004      	b.n	80042ea <HAL_GPIO_Init+0x1ee>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e002      	b.n	80042ea <HAL_GPIO_Init+0x1ee>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_GPIO_Init+0x1ee>
 80042e8:	2300      	movs	r3, #0
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	f002 0203 	and.w	r2, r2, #3
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	4093      	lsls	r3, r2
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042fa:	492f      	ldr	r1, [pc, #188]	; (80043b8 <HAL_GPIO_Init+0x2bc>)
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	492c      	ldr	r1, [pc, #176]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
 8004320:	e006      	b.n	8004330 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	43db      	mvns	r3, r3
 800432a:	4928      	ldr	r1, [pc, #160]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800432c:	4013      	ands	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d006      	beq.n	800434a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800433c:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4922      	ldr	r1, [pc, #136]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	43db      	mvns	r3, r3
 8004352:	491e      	ldr	r1, [pc, #120]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004354:	4013      	ands	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d006      	beq.n	8004372 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	4918      	ldr	r1, [pc, #96]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	e006      	b.n	8004380 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	43db      	mvns	r3, r3
 800437a:	4914      	ldr	r1, [pc, #80]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800437c:	4013      	ands	r3, r2
 800437e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d021      	beq.n	80043d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	490e      	ldr	r1, [pc, #56]	; (80043cc <HAL_GPIO_Init+0x2d0>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4313      	orrs	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
 8004398:	e021      	b.n	80043de <HAL_GPIO_Init+0x2e2>
 800439a:	bf00      	nop
 800439c:	10320000 	.word	0x10320000
 80043a0:	10310000 	.word	0x10310000
 80043a4:	10220000 	.word	0x10220000
 80043a8:	10210000 	.word	0x10210000
 80043ac:	10120000 	.word	0x10120000
 80043b0:	10110000 	.word	0x10110000
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010800 	.word	0x40010800
 80043c0:	40010c00 	.word	0x40010c00
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_GPIO_Init+0x304>)
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	4909      	ldr	r1, [pc, #36]	; (8004400 <HAL_GPIO_Init+0x304>)
 80043da:	4013      	ands	r3, r2
 80043dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	3301      	adds	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f ae8e 	bne.w	8004110 <HAL_GPIO_Init+0x14>
  }
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	372c      	adds	r7, #44	; 0x2c
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40010400 	.word	0x40010400

08004404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
 8004410:	4613      	mov	r3, r2
 8004412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004414:	787b      	ldrb	r3, [r7, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004420:	e003      	b.n	800442a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	041a      	lsls	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	611a      	str	r2, [r3, #16]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43d9      	mvns	r1, r3
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	400b      	ands	r3, r1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e12b      	b.n	80046d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f81a 	bl	80034c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044cc:	f002 f84e 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80044d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a81      	ldr	r2, [pc, #516]	; (80046dc <HAL_I2C_Init+0x274>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d807      	bhi.n	80044ec <HAL_I2C_Init+0x84>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_I2C_Init+0x278>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf94      	ite	ls
 80044e4:	2301      	movls	r3, #1
 80044e6:	2300      	movhi	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e006      	b.n	80044fa <HAL_I2C_Init+0x92>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a7d      	ldr	r2, [pc, #500]	; (80046e4 <HAL_I2C_Init+0x27c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bf94      	ite	ls
 80044f4:	2301      	movls	r3, #1
 80044f6:	2300      	movhi	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0e7      	b.n	80046d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a78      	ldr	r2, [pc, #480]	; (80046e8 <HAL_I2C_Init+0x280>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0c9b      	lsrs	r3, r3, #18
 800450c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a6a      	ldr	r2, [pc, #424]	; (80046dc <HAL_I2C_Init+0x274>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d802      	bhi.n	800453c <HAL_I2C_Init+0xd4>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3301      	adds	r3, #1
 800453a:	e009      	b.n	8004550 <HAL_I2C_Init+0xe8>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	4a69      	ldr	r2, [pc, #420]	; (80046ec <HAL_I2C_Init+0x284>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	3301      	adds	r3, #1
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	430b      	orrs	r3, r1
 8004556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	495c      	ldr	r1, [pc, #368]	; (80046dc <HAL_I2C_Init+0x274>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d819      	bhi.n	80045a4 <HAL_I2C_Init+0x13c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1e59      	subs	r1, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fbb1 f3f3 	udiv	r3, r1, r3
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004584:	400b      	ands	r3, r1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_I2C_Init+0x138>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1e59      	subs	r1, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fbb1 f3f3 	udiv	r3, r1, r3
 8004598:	3301      	adds	r3, #1
 800459a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459e:	e051      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e04f      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <HAL_I2C_Init+0x168>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e58      	subs	r0, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e012      	b.n	80045f6 <HAL_I2C_Init+0x18e>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e58      	subs	r0, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	0099      	lsls	r1, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e6:	3301      	adds	r3, #1
 80045e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Init+0x196>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e022      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <HAL_I2C_Init+0x1bc>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1e58      	subs	r0, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	440b      	add	r3, r1
 8004614:	fbb0 f3f3 	udiv	r3, r0, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	e00f      	b.n	8004644 <HAL_I2C_Init+0x1dc>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	0099      	lsls	r1, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	fbb0 f3f3 	udiv	r3, r0, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	6809      	ldr	r1, [r1, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6911      	ldr	r1, [r2, #16]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	430b      	orrs	r3, r1
 8004686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	000186a0 	.word	0x000186a0
 80046e0:	001e847f 	.word	0x001e847f
 80046e4:	003d08ff 	.word	0x003d08ff
 80046e8:	431bde83 	.word	0x431bde83
 80046ec:	10624dd3 	.word	0x10624dd3

080046f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	460b      	mov	r3, r1
 80046fe:	817b      	strh	r3, [r7, #10]
 8004700:	4613      	mov	r3, r2
 8004702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff f9d0 	bl	8003aa8 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	f040 80e0 	bne.w	80048d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2319      	movs	r3, #25
 800471e:	2201      	movs	r2, #1
 8004720:	4970      	ldr	r1, [pc, #448]	; (80048e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f001 f972 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
 8004730:	e0d3      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_I2C_Master_Transmit+0x50>
 800473c:	2302      	movs	r3, #2
 800473e:	e0cc      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d007      	beq.n	8004766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2210      	movs	r2, #16
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	893a      	ldrh	r2, [r7, #8]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a50      	ldr	r2, [pc, #320]	; (80048e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047a8:	8979      	ldrh	r1, [r7, #10]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fe5e 	bl	8005470 <I2C_MasterRequestWrite>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e08d      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047d4:	e066      	b.n	80048a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6a39      	ldr	r1, [r7, #32]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f001 f9ec 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d107      	bne.n	80047fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_I2C_Master_Transmit+0x188>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	6a39      	ldr	r1, [r7, #32]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f001 f9dc 	bl	8005c3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e01a      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d194      	bne.n	80047d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	00100002 	.word	0x00100002
 80048e8:	ffff0000 	.word	0xffff0000

080048ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	460b      	mov	r3, r1
 80048fa:	817b      	strh	r3, [r7, #10]
 80048fc:	4613      	mov	r3, r2
 80048fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004904:	f7ff f8d0 	bl	8003aa8 <HAL_GetTick>
 8004908:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b20      	cmp	r3, #32
 8004914:	f040 823f 	bne.w	8004d96 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2319      	movs	r3, #25
 800491e:	2201      	movs	r2, #1
 8004920:	497f      	ldr	r1, [pc, #508]	; (8004b20 <HAL_I2C_Master_Receive+0x234>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f001 f872 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	e232      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_I2C_Master_Receive+0x54>
 800493c:	2302      	movs	r3, #2
 800493e:	e22b      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d007      	beq.n	8004966 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2222      	movs	r2, #34	; 0x22
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2210      	movs	r2, #16
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	893a      	ldrh	r2, [r7, #8]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a5f      	ldr	r2, [pc, #380]	; (8004b24 <HAL_I2C_Master_Receive+0x238>)
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049a8:	8979      	ldrh	r1, [r7, #10]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fde0 	bl	8005574 <I2C_MasterRequestRead>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1ec      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d113      	bne.n	80049ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e1c0      	b.n	8004d70 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11e      	bne.n	8004a34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a06:	b672      	cpsid	i
}
 8004a08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a30:	b662      	cpsie	i
}
 8004a32:	e035      	b.n	8004aa0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d11e      	bne.n	8004a7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a4c:	b672      	cpsid	i
}
 8004a4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a76:	b662      	cpsie	i
}
 8004a78:	e012      	b.n	8004aa0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004aa0:	e166      	b.n	8004d70 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	f200 811f 	bhi.w	8004cea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d123      	bne.n	8004afc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f001 f8ff 	bl	8005cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e167      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004afa:	e139      	b.n	8004d70 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d152      	bne.n	8004baa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	4906      	ldr	r1, [pc, #24]	; (8004b28 <HAL_I2C_Master_Receive+0x23c>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 ff7c 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e13c      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
 8004b1e:	bf00      	nop
 8004b20:	00100002 	.word	0x00100002
 8004b24:	ffff0000 	.word	0xffff0000
 8004b28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2c:	b672      	cpsid	i
}
 8004b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b72:	b662      	cpsie	i
}
 8004b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba8:	e0e2      	b.n	8004d70 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	497b      	ldr	r1, [pc, #492]	; (8004da0 <HAL_I2C_Master_Receive+0x4b4>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 ff29 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0e9      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd4:	b672      	cpsid	i
}
 8004bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c0a:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_I2C_Master_Receive+0x4b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	4a65      	ldr	r2, [pc, #404]	; (8004da8 <HAL_I2C_Master_Receive+0x4bc>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a1a      	lsrs	r2, r3, #8
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c52:	b662      	cpsie	i
}
 8004c54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e09a      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d1d9      	bne.n	8004c24 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb2:	b662      	cpsie	i
}
 8004cb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ce8:	e042      	b.n	8004d70 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 ffe4 	bl	8005cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e04c      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d118      	bne.n	8004d70 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f47f ae94 	bne.w	8004aa2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	00010004 	.word	0x00010004
 8004da4:	20000004 	.word	0x20000004
 8004da8:	14f8b589 	.word	0x14f8b589

08004dac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	817b      	strh	r3, [r7, #10]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	813b      	strh	r3, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dc6:	f7fe fe6f 	bl	8003aa8 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	f040 80d9 	bne.w	8004f8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2319      	movs	r3, #25
 8004de0:	2201      	movs	r2, #1
 8004de2:	496d      	ldr	r1, [pc, #436]	; (8004f98 <HAL_I2C_Mem_Write+0x1ec>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fe11 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0cc      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Mem_Write+0x56>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0c5      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d007      	beq.n	8004e28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2240      	movs	r2, #64	; 0x40
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a4d      	ldr	r2, [pc, #308]	; (8004f9c <HAL_I2C_Mem_Write+0x1f0>)
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e6a:	88f8      	ldrh	r0, [r7, #6]
 8004e6c:	893a      	ldrh	r2, [r7, #8]
 8004e6e:	8979      	ldrh	r1, [r7, #10]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4603      	mov	r3, r0
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fc48 	bl	8005710 <I2C_RequestMemoryWrite>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d052      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e081      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fe92 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d107      	bne.n	8004eb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e06b      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d11b      	bne.n	8004f2c <HAL_I2C_Mem_Write+0x180>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1aa      	bne.n	8004e8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fe7e 	bl	8005c3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d107      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e016      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	00100002 	.word	0x00100002
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	; 0x30
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	813b      	strh	r3, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7fe fd73 	bl	8003aa8 <HAL_GetTick>
 8004fc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	f040 8244 	bne.w	800545a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2319      	movs	r3, #25
 8004fd8:	2201      	movs	r2, #1
 8004fda:	4982      	ldr	r1, [pc, #520]	; (80051e4 <HAL_I2C_Mem_Read+0x244>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fd15 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e237      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Mem_Read+0x5a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e230      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d007      	beq.n	8005020 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2222      	movs	r2, #34	; 0x22
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a62      	ldr	r2, [pc, #392]	; (80051e8 <HAL_I2C_Mem_Read+0x248>)
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005062:	88f8      	ldrh	r0, [r7, #6]
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fbe2 	bl	800583c <I2C_RequestMemoryRead>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e1ec      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d113      	bne.n	80050b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e1c0      	b.n	8005434 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d11e      	bne.n	80050f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050ca:	b672      	cpsid	i
}
 80050cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050f4:	b662      	cpsie	i
}
 80050f6:	e035      	b.n	8005164 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d11e      	bne.n	800513e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800510e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005110:	b672      	cpsid	i
}
 8005112:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800513a:	b662      	cpsie	i
}
 800513c:	e012      	b.n	8005164 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005164:	e166      	b.n	8005434 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b03      	cmp	r3, #3
 800516c:	f200 811f 	bhi.w	80053ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b01      	cmp	r3, #1
 8005176:	d123      	bne.n	80051c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fd9d 	bl	8005cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e167      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051be:	e139      	b.n	8005434 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d152      	bne.n	800526e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <HAL_I2C_Mem_Read+0x24c>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fc1a 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e13c      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
 80051e2:	bf00      	nop
 80051e4:	00100002 	.word	0x00100002
 80051e8:	ffff0000 	.word	0xffff0000
 80051ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80051f0:	b672      	cpsid	i
}
 80051f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005236:	b662      	cpsie	i
}
 8005238:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526c:	e0e2      	b.n	8005434 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2200      	movs	r2, #0
 8005276:	497b      	ldr	r1, [pc, #492]	; (8005464 <HAL_I2C_Mem_Read+0x4c4>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fbc7 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0e9      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005296:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
}
 800529a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052ce:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_I2C_Mem_Read+0x4c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_I2C_Mem_Read+0x4cc>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0a1a      	lsrs	r2, r3, #8
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00da      	lsls	r2, r3, #3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d118      	bne.n	8005326 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005316:	b662      	cpsie	i
}
 8005318:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e09a      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b04      	cmp	r3, #4
 8005332:	d1d9      	bne.n	80052e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005376:	b662      	cpsie	i
}
 8005378:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ac:	e042      	b.n	8005434 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fc82 	bl	8005cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e04c      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d118      	bne.n	8005434 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f ae94 	bne.w	8005166 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	00010004 	.word	0x00010004
 8005468:	20000004 	.word	0x20000004
 800546c:	14f8b589 	.word	0x14f8b589

08005470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	460b      	mov	r3, r1
 800547e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d006      	beq.n	800549a <I2C_MasterRequestWrite+0x2a>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d003      	beq.n	800549a <I2C_MasterRequestWrite+0x2a>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005498:	d108      	bne.n	80054ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00b      	b.n	80054c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	2b12      	cmp	r3, #18
 80054b2:	d107      	bne.n	80054c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fa9b 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d103      	bne.n	80054f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e035      	b.n	8005564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005500:	d108      	bne.n	8005514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	e01b      	b.n	800554c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005514:	897b      	ldrh	r3, [r7, #10]
 8005516:	11db      	asrs	r3, r3, #7
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 0306 	and.w	r3, r3, #6
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f063 030f 	orn	r3, r3, #15
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	490e      	ldr	r1, [pc, #56]	; (800556c <I2C_MasterRequestWrite+0xfc>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fac1 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e010      	b.n	8005564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4907      	ldr	r1, [pc, #28]	; (8005570 <I2C_MasterRequestWrite+0x100>)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fab1 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010008 	.word	0x00010008
 8005570:	00010002 	.word	0x00010002

08005574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	460b      	mov	r3, r1
 8005582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d006      	beq.n	80055ae <I2C_MasterRequestRead+0x3a>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d003      	beq.n	80055ae <I2C_MasterRequestRead+0x3a>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ac:	d108      	bne.n	80055c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e00b      	b.n	80055d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2b11      	cmp	r3, #17
 80055c6:	d107      	bne.n	80055d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fa11 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fe:	d103      	bne.n	8005608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e079      	b.n	8005700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005614:	d108      	bne.n	8005628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	e05f      	b.n	80056e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005628:	897b      	ldrh	r3, [r7, #10]
 800562a:	11db      	asrs	r3, r3, #7
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f063 030f 	orn	r3, r3, #15
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4930      	ldr	r1, [pc, #192]	; (8005708 <I2C_MasterRequestRead+0x194>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fa37 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e054      	b.n	8005700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005656:	897b      	ldrh	r3, [r7, #10]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4929      	ldr	r1, [pc, #164]	; (800570c <I2C_MasterRequestRead+0x198>)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fa27 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e044      	b.n	8005700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f9af 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	d103      	bne.n	80056cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e017      	b.n	8005700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056d0:	897b      	ldrh	r3, [r7, #10]
 80056d2:	11db      	asrs	r3, r3, #7
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 0306 	and.w	r3, r3, #6
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f063 030e 	orn	r3, r3, #14
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4907      	ldr	r1, [pc, #28]	; (800570c <I2C_MasterRequestRead+0x198>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f9e3 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	00010008 	.word	0x00010008
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	4603      	mov	r3, r0
 8005720:	817b      	strh	r3, [r7, #10]
 8005722:	460b      	mov	r3, r1
 8005724:	813b      	strh	r3, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	2200      	movs	r2, #0
 8005742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f960 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	d103      	bne.n	800576a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e05f      	b.n	800582e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800576e:	897b      	ldrh	r3, [r7, #10]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800577c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	492d      	ldr	r1, [pc, #180]	; (8005838 <I2C_RequestMemoryWrite+0x128>)
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f998 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04c      	b.n	800582e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	6a39      	ldr	r1, [r7, #32]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fa02 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d107      	bne.n	80057d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e02b      	b.n	800582e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057dc:	893b      	ldrh	r3, [r7, #8]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]
 80057e6:	e021      	b.n	800582c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057e8:	893b      	ldrh	r3, [r7, #8]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	6a39      	ldr	r1, [r7, #32]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f9dc 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b04      	cmp	r3, #4
 800580c:	d107      	bne.n	800581e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e005      	b.n	800582e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005822:	893b      	ldrh	r3, [r7, #8]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	00010002 	.word	0x00010002

0800583c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	461a      	mov	r2, r3
 800584a:	4603      	mov	r3, r0
 800584c:	817b      	strh	r3, [r7, #10]
 800584e:	460b      	mov	r3, r1
 8005850:	813b      	strh	r3, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005864:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2200      	movs	r2, #0
 800587e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8c2 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589c:	d103      	bne.n	80058a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e0aa      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	4952      	ldr	r1, [pc, #328]	; (8005a08 <I2C_RequestMemoryRead+0x1cc>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f8fa 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e097      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	6a39      	ldr	r1, [r7, #32]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f964 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d107      	bne.n	800590e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e076      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005918:	893b      	ldrh	r3, [r7, #8]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	e021      	b.n	8005968 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005924:	893b      	ldrh	r3, [r7, #8]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f93e 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e050      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800595e:	893b      	ldrh	r3, [r7, #8]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	6a39      	ldr	r1, [r7, #32]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f923 	bl	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	2b04      	cmp	r3, #4
 800597e:	d107      	bne.n	8005990 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e035      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f82b 	bl	8005a0c <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	d103      	bne.n	80059d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e013      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059d8:	897b      	ldrh	r3, [r7, #10]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	6a3a      	ldr	r2, [r7, #32]
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <I2C_RequestMemoryRead+0x1cc>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f863 	bl	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	00010002 	.word	0x00010002

08005a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a1c:	e025      	b.n	8005a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d021      	beq.n	8005a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fe f83f 	bl	8003aa8 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d116      	bne.n	8005a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e023      	b.n	8005ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10d      	bne.n	8005a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	e00c      	b.n	8005aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	43da      	mvns	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d0b6      	beq.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac8:	e051      	b.n	8005b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d123      	bne.n	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f043 0204 	orr.w	r2, r3, #4
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e046      	b.n	8005bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d021      	beq.n	8005b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fd ffbd 	bl	8003aa8 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d116      	bne.n	8005b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f043 0220 	orr.w	r2, r3, #32
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e020      	b.n	8005bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10c      	bne.n	8005b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4013      	ands	r3, r2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf14      	ite	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	2300      	moveq	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e00b      	b.n	8005baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	43da      	mvns	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d18d      	bne.n	8005aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc4:	e02d      	b.n	8005c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f8ce 	bl	8005d68 <I2C_IsAcknowledgeFailed>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e02d      	b.n	8005c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d021      	beq.n	8005c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fd ff63 	bl	8003aa8 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e007      	b.n	8005c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d1ca      	bne.n	8005bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c46:	e02d      	b.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f88d 	bl	8005d68 <I2C_IsAcknowledgeFailed>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e02d      	b.n	8005cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d021      	beq.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fd ff22 	bl	8003aa8 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e007      	b.n	8005cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d1ca      	bne.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cc8:	e042      	b.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d119      	bne.n	8005d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0210 	mvn.w	r2, #16
 8005ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e029      	b.n	8005d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0c:	f7fd fecc 	bl	8003aa8 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d302      	bcc.n	8005d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d116      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e007      	b.n	8005d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d1b5      	bne.n	8005cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d11b      	bne.n	8005db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	f043 0204 	orr.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e26c      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8087 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de4:	4b92      	ldr	r3, [pc, #584]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d00c      	beq.n	8005e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005df0:	4b8f      	ldr	r3, [pc, #572]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d112      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
 8005dfc:	4b8c      	ldr	r3, [pc, #560]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d10b      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0a:	4b89      	ldr	r3, [pc, #548]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06c      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d168      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e246      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x76>
 8005e2c:	4b80      	ldr	r3, [pc, #512]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7f      	ldr	r2, [pc, #508]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e02e      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x98>
 8005e42:	4b7b      	ldr	r3, [pc, #492]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a7a      	ldr	r2, [pc, #488]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b78      	ldr	r3, [pc, #480]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a77      	ldr	r2, [pc, #476]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0xbc>
 8005e66:	4b72      	ldr	r3, [pc, #456]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a71      	ldr	r2, [pc, #452]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e80:	4b6b      	ldr	r3, [pc, #428]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a6a      	ldr	r2, [pc, #424]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b68      	ldr	r3, [pc, #416]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a67      	ldr	r2, [pc, #412]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fd fe02 	bl	8003aa8 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fd fdfe 	bl	8003aa8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e1fa      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xe4>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fdee 	bl	8003aa8 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fdea 	bl	8003aa8 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1e6      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x10c>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f0a:	4b49      	ldr	r3, [pc, #292]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x18c>
 8005f16:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b43      	ldr	r3, [pc, #268]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x176>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1ba      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4939      	ldr	r1, [pc, #228]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <HAL_RCC_OscConfig+0x270>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7fd fda3 	bl	8003aa8 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fd fd9f 	bl	8003aa8 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e19b      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4927      	ldr	r1, [pc, #156]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b26      	ldr	r3, [pc, #152]	; (8006034 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa0:	f7fd fd82 	bl	8003aa8 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fd fd7e 	bl	8003aa8 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e17a      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d03a      	beq.n	8006048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fd fd62 	bl	8003aa8 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fd5e 	bl	8003aa8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e15a      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006006:	2001      	movs	r0, #1
 8006008:	f000 fad8 	bl	80065bc <RCC_Delay>
 800600c:	e01c      	b.n	8006048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_RCC_OscConfig+0x274>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006014:	f7fd fd48 	bl	8003aa8 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601a:	e00f      	b.n	800603c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601c:	f7fd fd44 	bl	8003aa8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d908      	bls.n	800603c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e140      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	42420000 	.word	0x42420000
 8006038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800603c:	4b9e      	ldr	r3, [pc, #632]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e9      	bne.n	800601c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80a6 	beq.w	80061a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800605a:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10d      	bne.n	8006082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006066:	4b94      	ldr	r3, [pc, #592]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4a93      	ldr	r2, [pc, #588]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800606c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006070:	61d3      	str	r3, [r2, #28]
 8006072:	4b91      	ldr	r3, [pc, #580]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006082:	4b8e      	ldr	r3, [pc, #568]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d118      	bne.n	80060c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800608e:	4b8b      	ldr	r3, [pc, #556]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a8a      	ldr	r2, [pc, #552]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800609a:	f7fd fd05 	bl	8003aa8 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a2:	f7fd fd01 	bl	8003aa8 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b64      	cmp	r3, #100	; 0x64
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0fd      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d106      	bne.n	80060d6 <HAL_RCC_OscConfig+0x312>
 80060c8:	4b7b      	ldr	r3, [pc, #492]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	4a7a      	ldr	r2, [pc, #488]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6213      	str	r3, [r2, #32]
 80060d4:	e02d      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x334>
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	4a75      	ldr	r2, [pc, #468]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	6213      	str	r3, [r2, #32]
 80060ea:	4b73      	ldr	r3, [pc, #460]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	4a72      	ldr	r2, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	6213      	str	r3, [r2, #32]
 80060f6:	e01c      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d10c      	bne.n	800611a <HAL_RCC_OscConfig+0x356>
 8006100:	4b6d      	ldr	r3, [pc, #436]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4a6c      	ldr	r2, [pc, #432]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	6213      	str	r3, [r2, #32]
 800610c:	4b6a      	ldr	r3, [pc, #424]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	4a69      	ldr	r2, [pc, #420]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6213      	str	r3, [r2, #32]
 8006118:	e00b      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 800611a:	4b67      	ldr	r3, [pc, #412]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4a66      	ldr	r2, [pc, #408]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6213      	str	r3, [r2, #32]
 8006126:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	4a63      	ldr	r2, [pc, #396]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d015      	beq.n	8006166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613a:	f7fd fcb5 	bl	8003aa8 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fd fcb1 	bl	8003aa8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0ab      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006158:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0ee      	beq.n	8006142 <HAL_RCC_OscConfig+0x37e>
 8006164:	e014      	b.n	8006190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fd fc9f 	bl	8003aa8 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fd fc9b 	bl	8003aa8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e095      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006184:	4b4c      	ldr	r3, [pc, #304]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ee      	bne.n	800616e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b48      	ldr	r3, [pc, #288]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	4a47      	ldr	r2, [pc, #284]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8081 	beq.w	80062ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ac:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d061      	beq.n	800627c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d146      	bne.n	800624e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fd fc6f 	bl	8003aa8 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fd fc6b 	bl	8003aa8 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e067      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e0:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d108      	bne.n	8006208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	492d      	ldr	r1, [pc, #180]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a19      	ldr	r1, [r3, #32]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	430b      	orrs	r3, r1
 800621a:	4927      	ldr	r1, [pc, #156]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fd fc3f 	bl	8003aa8 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622e:	f7fd fc3b 	bl	8003aa8 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e037      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x46a>
 800624c:	e02f      	b.n	80062ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fd fc28 	bl	8003aa8 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625c:	f7fd fc24 	bl	8003aa8 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e020      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x498>
 800627a:	e018      	b.n	80062ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e013      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	40007000 	.word	0x40007000
 80062c0:	42420060 	.word	0x42420060

080062c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0d0      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d8:	4b6a      	ldr	r3, [pc, #424]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d910      	bls.n	8006308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b67      	ldr	r3, [pc, #412]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 0207 	bic.w	r2, r3, #7
 80062ee:	4965      	ldr	r1, [pc, #404]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b63      	ldr	r3, [pc, #396]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0b8      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006320:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a58      	ldr	r2, [pc, #352]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800632a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006338:	4b53      	ldr	r3, [pc, #332]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a52      	ldr	r2, [pc, #328]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800633e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006344:	4b50      	ldr	r3, [pc, #320]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	494d      	ldr	r1, [pc, #308]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d040      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b47      	ldr	r3, [pc, #284]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d115      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e07f      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006382:	4b41      	ldr	r3, [pc, #260]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e073      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006392:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e06b      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a2:	4b39      	ldr	r3, [pc, #228]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f023 0203 	bic.w	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4936      	ldr	r1, [pc, #216]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b4:	f7fd fb78 	bl	8003aa8 <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ba:	e00a      	b.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063bc:	f7fd fb74 	bl	8003aa8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e053      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d2:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 020c 	and.w	r2, r3, #12
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1eb      	bne.n	80063bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e4:	4b27      	ldr	r3, [pc, #156]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d210      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	4922      	ldr	r1, [pc, #136]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e032      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4916      	ldr	r1, [pc, #88]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	490e      	ldr	r1, [pc, #56]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006452:	f000 f821 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8006456:	4602      	mov	r2, r0
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	490a      	ldr	r1, [pc, #40]	; (800648c <HAL_RCC_ClockConfig+0x1c8>)
 8006464:	5ccb      	ldrb	r3, [r1, r3]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1cc>)
 800646c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1d0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd fad6 	bl	8003a24 <HAL_InitTick>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40022000 	.word	0x40022000
 8006488:	40021000 	.word	0x40021000
 800648c:	0800e130 	.word	0x0800e130
 8006490:	20000004 	.word	0x20000004
 8006494:	20000008 	.word	0x20000008

08006498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	b490      	push	{r4, r7}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064a0:	1d3c      	adds	r4, r7, #4
 80064a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064a8:	f240 2301 	movw	r3, #513	; 0x201
 80064ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x40>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x46>
 80064d6:	e02d      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064da:	623b      	str	r3, [r7, #32]
      break;
 80064dc:	e02d      	b.n	800653a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	0c9b      	lsrs	r3, r3, #18
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064ea:	4413      	add	r3, r2
 80064ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c5b      	lsrs	r3, r3, #17
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800650a:	4413      	add	r3, r2
 800650c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006510:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4a0e      	ldr	r2, [pc, #56]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006516:	fb02 f203 	mul.w	r2, r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e004      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	623b      	str	r3, [r7, #32]
      break;
 8006532:	e002      	b.n	800653a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006536:	623b      	str	r3, [r7, #32]
      break;
 8006538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653a:	6a3b      	ldr	r3, [r7, #32]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	bc90      	pop	{r4, r7}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	0800e0ec 	.word	0x0800e0ec
 800654c:	40021000 	.word	0x40021000
 8006550:	007a1200 	.word	0x007a1200
 8006554:	003d0900 	.word	0x003d0900

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <HAL_RCC_GetHCLKFreq+0x10>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	20000004 	.word	0x20000004

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006570:	f7ff fff2 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40021000 	.word	0x40021000
 8006590:	0800e140 	.word	0x0800e140

08006594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006598:	f7ff ffde 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	0adb      	lsrs	r3, r3, #11
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40021000 	.word	0x40021000
 80065b8:	0800e140 	.word	0x0800e140

080065bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <RCC_Delay+0x34>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <RCC_Delay+0x38>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065d8:	bf00      	nop
  }
  while (Delay --);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1e5a      	subs	r2, r3, #1
 80065de:	60fa      	str	r2, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f9      	bne.n	80065d8 <RCC_Delay+0x1c>
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	20000004 	.word	0x20000004
 80065f4:	10624dd3 	.word	0x10624dd3

080065f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e041      	b.n	800668e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fc ffae 	bl	8003580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f000 fe98 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e032      	b.n	8006716 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_TIM_Base_Start+0x88>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ca:	d009      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <HAL_TIM_Base_Start+0x8c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a13      	ldr	r2, [pc, #76]	; (8006728 <HAL_TIM_Base_Start+0x90>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d111      	bne.n	8006704 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d010      	beq.n	8006714 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e007      	b.n	8006714 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800

0800672c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d001      	beq.n	8006744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e03a      	b.n	80067ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_TIM_Base_Start_IT+0x98>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_TIM_Base_Start_IT+0x58>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676e:	d009      	beq.n	8006784 <HAL_TIM_Base_Start_IT+0x58>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_TIM_Base_Start_IT+0x58>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a13      	ldr	r2, [pc, #76]	; (80067cc <HAL_TIM_Base_Start_IT+0xa0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d111      	bne.n	80067a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b06      	cmp	r3, #6
 8006794:	d010      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a6:	e007      	b.n	80067b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40000400 	.word	0x40000400
 80067cc:	40000800 	.word	0x40000800

080067d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e041      	b.n	8006866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc fea4 	bl	8003544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fdac 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <HAL_TIM_PWM_Start+0x24>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e022      	b.n	80068da <HAL_TIM_PWM_Start+0x6a>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d109      	bne.n	80068ae <HAL_TIM_PWM_Start+0x3e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	e015      	b.n	80068da <HAL_TIM_PWM_Start+0x6a>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d109      	bne.n	80068c8 <HAL_TIM_PWM_Start+0x58>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	bf14      	ite	ne
 80068c0:	2301      	movne	r3, #1
 80068c2:	2300      	moveq	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	e008      	b.n	80068da <HAL_TIM_PWM_Start+0x6a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e05e      	b.n	80069a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_PWM_Start+0x82>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f0:	e013      	b.n	800691a <HAL_TIM_PWM_Start+0xaa>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_PWM_Start+0x92>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	e00b      	b.n	800691a <HAL_TIM_PWM_Start+0xaa>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d104      	bne.n	8006912 <HAL_TIM_PWM_Start+0xa2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006910:	e003      	b.n	800691a <HAL_TIM_PWM_Start+0xaa>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f8af 	bl	8007a86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_TIM_PWM_Start+0x138>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d107      	bne.n	8006942 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <HAL_TIM_PWM_Start+0x138>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_TIM_PWM_Start+0xfa>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d009      	beq.n	800696a <HAL_TIM_PWM_Start+0xfa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a14      	ldr	r2, [pc, #80]	; (80069ac <HAL_TIM_PWM_Start+0x13c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIM_PWM_Start+0xfa>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <HAL_TIM_PWM_Start+0x140>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b06      	cmp	r3, #6
 800697a:	d010      	beq.n	800699e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698c:	e007      	b.n	800699e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800

080069b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e041      	b.n	8006a4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f839 	bl	8006a52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 fcba 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_IC_Start_IT+0x1a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	e013      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_IC_Start_IT+0x2a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	e00b      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_IC_Start_IT+0x3a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	e003      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_TIM_IC_Start_IT+0x54>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e013      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d104      	bne.n	8006ac8 <HAL_TIM_IC_Start_IT+0x64>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e00b      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d104      	bne.n	8006ad8 <HAL_TIM_IC_Start_IT+0x74>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d102      	bne.n	8006aee <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d001      	beq.n	8006af2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0b3      	b.n	8006c5a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_IC_Start_IT+0x9e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b00:	e013      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_IC_Start_IT+0xae>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b10:	e00b      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_IC_Start_IT+0xbe>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b20:	e003      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_IC_Start_IT+0xd6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b38:	e013      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_IC_Start_IT+0xe6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b48:	e00b      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_IC_Start_IT+0xf6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b58:	e003      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d841      	bhi.n	8006bec <HAL_TIM_IC_Start_IT+0x188>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_TIM_IC_Start_IT+0x10c>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006ba5 	.word	0x08006ba5
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bb7 	.word	0x08006bb7
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bc9 	.word	0x08006bc9
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bdb 	.word	0x08006bdb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0202 	orr.w	r2, r2, #2
 8006bb2:	60da      	str	r2, [r3, #12]
      break;
 8006bb4:	e01b      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0204 	orr.w	r2, r2, #4
 8006bc4:	60da      	str	r2, [r3, #12]
      break;
 8006bc6:	e012      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	60da      	str	r2, [r3, #12]
      break;
 8006bd8:	e009      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0210 	orr.w	r2, r2, #16
 8006be8:	60da      	str	r2, [r3, #12]
      break;
 8006bea:	e000      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006bec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 ff45 	bl	8007a86 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_TIM_IC_Start_IT+0x200>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d009      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <HAL_TIM_IC_Start_IT+0x204>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <HAL_TIM_IC_Start_IT+0x208>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d111      	bne.n	8006c48 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d010      	beq.n	8006c58 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	e007      	b.n	8006c58 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800

08006c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0202 	mvn.w	r2, #2
 8006c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fc f8ec 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fb3a 	bl	8007334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb40 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0204 	mvn.w	r2, #4
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fc f8c2 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb10 	bl	8007334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb16 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d122      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d11b      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0208 	mvn.w	r2, #8
 8006d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc f898 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8006d60:	e005      	b.n	8006d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fae6 	bl	8007334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 faec 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d122      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d11b      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0210 	mvn.w	r2, #16
 8006d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fc f86e 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8006db4:	e005      	b.n	8006dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fabc 	bl	8007334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fac2 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0201 	mvn.w	r2, #1
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fb fcfe 	bl	80027f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b80      	cmp	r3, #128	; 0x80
 8006e00:	d10e      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0c:	2b80      	cmp	r3, #128	; 0x80
 8006e0e:	d107      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 ffae 	bl	8007d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d10e      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d107      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa86 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d10e      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0220 	mvn.w	r2, #32
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 ff79 	bl	8007d6a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e082      	b.n	8006fa0 <HAL_TIM_IC_ConfigChannel+0x120>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f000 fc42 	bl	8007740 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 020c 	bic.w	r2, r2, #12
 8006eca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6999      	ldr	r1, [r3, #24]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	619a      	str	r2, [r3, #24]
 8006ede:	e05a      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d11c      	bne.n	8006f20 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f000 fcab 	bl	8007850 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f08:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6999      	ldr	r1, [r3, #24]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	021a      	lsls	r2, r3, #8
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	619a      	str	r2, [r3, #24]
 8006f1e:	e03a      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d11b      	bne.n	8006f5e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f000 fcf6 	bl	8007926 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 020c 	bic.w	r2, r2, #12
 8006f48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69d9      	ldr	r1, [r3, #28]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	61da      	str	r2, [r3, #28]
 8006f5c:	e01b      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6819      	ldr	r1, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f000 fd15 	bl	800799c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f80:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69d9      	ldr	r1, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e0ac      	b.n	800711c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	f200 809f 	bhi.w	8007110 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	08007111 	.word	0x08007111
 8006fe0:	08007111 	.word	0x08007111
 8006fe4:	08007111 	.word	0x08007111
 8006fe8:	0800704d 	.word	0x0800704d
 8006fec:	08007111 	.word	0x08007111
 8006ff0:	08007111 	.word	0x08007111
 8006ff4:	08007111 	.word	0x08007111
 8006ff8:	0800708f 	.word	0x0800708f
 8006ffc:	08007111 	.word	0x08007111
 8007000:	08007111 	.word	0x08007111
 8007004:	08007111 	.word	0x08007111
 8007008:	080070cf 	.word	0x080070cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fa0c 	bl	8007430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0208 	orr.w	r2, r2, #8
 8007026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0204 	bic.w	r2, r2, #4
 8007036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6999      	ldr	r1, [r3, #24]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691a      	ldr	r2, [r3, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	619a      	str	r2, [r3, #24]
      break;
 800704a:	e062      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fa52 	bl	80074fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6999      	ldr	r1, [r3, #24]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	021a      	lsls	r2, r3, #8
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	619a      	str	r2, [r3, #24]
      break;
 800708c:	e041      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fa9b 	bl	80075d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0204 	bic.w	r2, r2, #4
 80070b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69d9      	ldr	r1, [r3, #28]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	61da      	str	r2, [r3, #28]
      break;
 80070cc:	e021      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fae5 	bl	80076a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69d9      	ldr	r1, [r3, #28]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	021a      	lsls	r2, r3, #8
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	61da      	str	r2, [r3, #28]
      break;
 800710e:	e000      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIM_ConfigClockSource+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e0b3      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x180>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800715a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007162:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d03e      	beq.n	80071f4 <HAL_TIM_ConfigClockSource+0xd0>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	f200 8087 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x168>
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007182:	f000 8085 	beq.w	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	d87f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 800718c:	2b70      	cmp	r3, #112	; 0x70
 800718e:	d01a      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0xa2>
 8007190:	2b70      	cmp	r3, #112	; 0x70
 8007192:	d87b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 8007194:	2b60      	cmp	r3, #96	; 0x60
 8007196:	d050      	beq.n	800723a <HAL_TIM_ConfigClockSource+0x116>
 8007198:	2b60      	cmp	r3, #96	; 0x60
 800719a:	d877      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 800719c:	2b50      	cmp	r3, #80	; 0x50
 800719e:	d03c      	beq.n	800721a <HAL_TIM_ConfigClockSource+0xf6>
 80071a0:	2b50      	cmp	r3, #80	; 0x50
 80071a2:	d873      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d058      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x136>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d86f      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	d064      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071b0:	2b30      	cmp	r3, #48	; 0x30
 80071b2:	d86b      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d060      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d867      	bhi.n	800728c <HAL_TIM_ConfigClockSource+0x168>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d05c      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d05a      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80071c4:	e062      	b.n	800728c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6899      	ldr	r1, [r3, #8]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f000 fc37 	bl	8007a48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]
      break;
 80071f2:	e04e      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6899      	ldr	r1, [r3, #8]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f000 fc20 	bl	8007a48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007216:	609a      	str	r2, [r3, #8]
      break;
 8007218:	e03b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	461a      	mov	r2, r3
 8007228:	f000 fae4 	bl	80077f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2150      	movs	r1, #80	; 0x50
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fbee 	bl	8007a14 <TIM_ITRx_SetConfig>
      break;
 8007238:	e02b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	461a      	mov	r2, r3
 8007248:	f000 fb3e 	bl	80078c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2160      	movs	r1, #96	; 0x60
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fbde 	bl	8007a14 <TIM_ITRx_SetConfig>
      break;
 8007258:	e01b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	461a      	mov	r2, r3
 8007268:	f000 fac4 	bl	80077f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fbce 	bl	8007a14 <TIM_ITRx_SetConfig>
      break;
 8007278:	e00b      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f000 fbc5 	bl	8007a14 <TIM_ITRx_SetConfig>
        break;
 800728a:	e002      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007290:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b0c      	cmp	r3, #12
 80072be:	d831      	bhi.n	8007324 <HAL_TIM_ReadCapturedValue+0x78>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072fd 	.word	0x080072fd
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007325 	.word	0x08007325
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007307 	.word	0x08007307
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007325 	.word	0x08007325
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007325 	.word	0x08007325
 80072f0:	08007325 	.word	0x08007325
 80072f4:	08007325 	.word	0x08007325
 80072f8:	0800731b 	.word	0x0800731b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	60fb      	str	r3, [r7, #12]

      break;
 8007304:	e00f      	b.n	8007326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	60fb      	str	r3, [r7, #12]

      break;
 800730e:	e00a      	b.n	8007326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	60fb      	str	r3, [r7, #12]

      break;
 8007318:	e005      	b.n	8007326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	60fb      	str	r3, [r7, #12]

      break;
 8007322:	e000      	b.n	8007326 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007324:	bf00      	nop
  }

  return tmpreg;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop

08007334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr
	...

0800736c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a29      	ldr	r2, [pc, #164]	; (8007424 <TIM_Base_SetConfig+0xb8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00b      	beq.n	800739c <TIM_Base_SetConfig+0x30>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d007      	beq.n	800739c <TIM_Base_SetConfig+0x30>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a26      	ldr	r2, [pc, #152]	; (8007428 <TIM_Base_SetConfig+0xbc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_Base_SetConfig+0x30>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a25      	ldr	r2, [pc, #148]	; (800742c <TIM_Base_SetConfig+0xc0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d108      	bne.n	80073ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <TIM_Base_SetConfig+0xb8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00b      	beq.n	80073ce <TIM_Base_SetConfig+0x62>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073bc:	d007      	beq.n	80073ce <TIM_Base_SetConfig+0x62>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a19      	ldr	r2, [pc, #100]	; (8007428 <TIM_Base_SetConfig+0xbc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d003      	beq.n	80073ce <TIM_Base_SetConfig+0x62>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a18      	ldr	r2, [pc, #96]	; (800742c <TIM_Base_SetConfig+0xc0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d108      	bne.n	80073e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a07      	ldr	r2, [pc, #28]	; (8007424 <TIM_Base_SetConfig+0xb8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	615a      	str	r2, [r3, #20]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800

08007430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0201 	bic.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0303 	bic.w	r3, r3, #3
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 0302 	bic.w	r3, r3, #2
 8007478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <TIM_OC1_SetConfig+0xc8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d10c      	bne.n	80074a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f023 0308 	bic.w	r3, r3, #8
 8007492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f023 0304 	bic.w	r3, r3, #4
 80074a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a13      	ldr	r2, [pc, #76]	; (80074f8 <TIM_OC1_SetConfig+0xc8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d111      	bne.n	80074d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	621a      	str	r2, [r3, #32]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00

080074fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0210 	bic.w	r2, r3, #16
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f023 0320 	bic.w	r3, r3, #32
 8007546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a1d      	ldr	r2, [pc, #116]	; (80075cc <TIM_OC2_SetConfig+0xd0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d10d      	bne.n	8007578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a14      	ldr	r2, [pc, #80]	; (80075cc <TIM_OC2_SetConfig+0xd0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d113      	bne.n	80075a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800758e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00

080075d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <TIM_OC3_SetConfig+0xd0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d10d      	bne.n	800764a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <TIM_OC3_SetConfig+0xd0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d113      	bne.n	800767a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	621a      	str	r2, [r3, #32]
}
 8007694:	bf00      	nop
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40012c00 	.word	0x40012c00

080076a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	031b      	lsls	r3, r3, #12
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a0f      	ldr	r2, [pc, #60]	; (800773c <TIM_OC4_SetConfig+0x98>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d109      	bne.n	8007718 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800770a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	019b      	lsls	r3, r3, #6
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	40012c00 	.word	0x40012c00

08007740 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f023 0201 	bic.w	r2, r3, #1
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <TIM_TI1_SetConfig+0xa8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_TI1_SetConfig+0x46>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007774:	d007      	beq.n	8007786 <TIM_TI1_SetConfig+0x46>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <TIM_TI1_SetConfig+0xac>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_TI1_SetConfig+0x46>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <TIM_TI1_SetConfig+0xb0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <TIM_TI1_SetConfig+0x4a>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <TIM_TI1_SetConfig+0x4c>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e003      	b.n	80077aa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f043 0301 	orr.w	r3, r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f023 030a 	bic.w	r3, r3, #10
 80077c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 030a 	and.w	r3, r3, #10
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	621a      	str	r2, [r3, #32]
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800

080077f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0201 	bic.w	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800781e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f023 030a 	bic.w	r3, r3, #10
 8007830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0210 	bic.w	r2, r3, #16
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800788e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	031b      	lsls	r3, r3, #12
 8007894:	b29b      	uxth	r3, r3
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f023 0210 	bic.w	r2, r3, #16
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	031b      	lsls	r3, r3, #12
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
 8007932:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007962:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	b2db      	uxtb	r3, r3
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007976:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	031b      	lsls	r3, r3, #12
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	031b      	lsls	r3, r3, #12
 80079f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr

08007a14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f043 0307 	orr.w	r3, r3, #7
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	609a      	str	r2, [r3, #8]
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr

08007a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bc80      	pop	{r7}
 8007a84:	4770      	bx	lr

08007a86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b087      	sub	sp, #28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	2201      	movs	r2, #1
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	401a      	ands	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	fa01 f303 	lsl.w	r3, r1, r3
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	621a      	str	r2, [r3, #32]
}
 8007ac4:	bf00      	nop
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
	...

08007ad0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_TIMEx_PWMN_Start+0x24>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	bf14      	ite	ne
 8007aec:	2301      	movne	r3, #1
 8007aee:	2300      	moveq	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	e022      	b.n	8007b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d109      	bne.n	8007b0e <HAL_TIMEx_PWMN_Start+0x3e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	bf14      	ite	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	2300      	moveq	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	e015      	b.n	8007b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d109      	bne.n	8007b28 <HAL_TIMEx_PWMN_Start+0x58>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e008      	b.n	8007b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e059      	b.n	8007bf6 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <HAL_TIMEx_PWMN_Start+0x82>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	e013      	b.n	8007b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d104      	bne.n	8007b62 <HAL_TIMEx_PWMN_Start+0x92>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b60:	e00b      	b.n	8007b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d104      	bne.n	8007b72 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b70:	e003      	b.n	8007b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f903 	bl	8007d8e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_TIMEx_PWMN_Start+0x130>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_TIMEx_PWMN_Start+0xf0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d009      	beq.n	8007bc0 <HAL_TIMEx_PWMN_Start+0xf0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <HAL_TIMEx_PWMN_Start+0x134>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_TIMEx_PWMN_Start+0xf0>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <HAL_TIMEx_PWMN_Start+0x138>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d111      	bne.n	8007be4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d010      	beq.n	8007bf4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be2:	e007      	b.n	8007bf4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800

08007c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e046      	b.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00e      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c70:	d009      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a12      	ldr	r2, [pc, #72]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a10      	ldr	r2, [pc, #64]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10c      	bne.n	8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800

08007cc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e03d      	b.n	8007d60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr

08007d6a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	2204      	movs	r2, #4
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	43db      	mvns	r3, r3
 8007db0:	401a      	ands	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]
}
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e03f      	b.n	8007e68 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fb fc81 	bl	8003704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2224      	movs	r2, #36	; 0x24
 8007e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa5e 	bl	80082dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d17c      	bne.n	8007f8a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_UART_Transmit+0x2c>
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e075      	b.n	8007f8c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_UART_Transmit+0x3e>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e06e      	b.n	8007f8c <HAL_UART_Transmit+0x11c>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2221      	movs	r2, #33	; 0x21
 8007ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ec4:	f7fb fdf0 	bl	8003aa8 <HAL_GetTick>
 8007ec8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ede:	d108      	bne.n	8007ef2 <HAL_UART_Transmit+0x82>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e003      	b.n	8007efa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007f02:	e02a      	b.n	8007f5a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f967 	bl	80081e2 <UART_WaitOnFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e036      	b.n	8007f8c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f32:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	3302      	adds	r3, #2
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	e007      	b.n	8007f4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1cf      	bne.n	8007f04 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2140      	movs	r1, #64	; 0x40
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f937 	bl	80081e2 <UART_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e006      	b.n	8007f8c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d166      	bne.n	800807c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Receive_DMA+0x26>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e05f      	b.n	800807e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_UART_Receive_DMA+0x38>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e058      	b.n	800807e <HAL_UART_Receive_DMA+0xea>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2222      	movs	r2, #34	; 0x22
 8007fea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	4a25      	ldr	r2, [pc, #148]	; (8008088 <HAL_UART_Receive_DMA+0xf4>)
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	4a24      	ldr	r2, [pc, #144]	; (800808c <HAL_UART_Receive_DMA+0xf8>)
 8007ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	4a23      	ldr	r2, [pc, #140]	; (8008090 <HAL_UART_Receive_DMA+0xfc>)
 8008004:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	2200      	movs	r2, #0
 800800c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	f7fb fed5 	bl	8003dd4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800802a:	2300      	movs	r3, #0
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008056:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695a      	ldr	r2, [r3, #20]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695a      	ldr	r2, [r3, #20]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	080080cb 	.word	0x080080cb
 800808c:	08008133 	.word	0x08008133
 8008090:	0800814f 	.word	0x0800814f

08008094 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr

080080ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11e      	bne.n	8008124 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080fa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800811a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff ffb5 	bl	8008094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff ffb0 	bl	80080a6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816a:	2b00      	cmp	r3, #0
 800816c:	bf14      	ite	ne
 800816e:	2301      	movne	r3, #1
 8008170:	2300      	moveq	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b21      	cmp	r3, #33	; 0x21
 8008180:	d108      	bne.n	8008194 <UART_DMAError+0x46>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800818e:	68b8      	ldr	r0, [r7, #8]
 8008190:	f000 f871 	bl	8008276 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b22      	cmp	r3, #34	; 0x22
 80081b4:	d108      	bne.n	80081c8 <UART_DMAError+0x7a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80081c2:	68b8      	ldr	r0, [r7, #8]
 80081c4:	f000 f86c 	bl	80082a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081cc:	f043 0210 	orr.w	r2, r3, #16
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081d4:	68b8      	ldr	r0, [r7, #8]
 80081d6:	f7ff ff6f 	bl	80080b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f2:	e02c      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d028      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0x30>
 8008202:	f7fb fc51 	bl	8003aa8 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	429a      	cmp	r2, r3
 8008210:	d21d      	bcs.n	800824e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008220:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e00f      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d0c3      	beq.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800828c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0201 	bic.w	r2, r2, #1
 80082c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr
	...

080082dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008316:	f023 030c 	bic.w	r3, r3, #12
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	430b      	orrs	r3, r1
 8008322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a2c      	ldr	r2, [pc, #176]	; (80083f0 <UART_SetConfig+0x114>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d103      	bne.n	800834c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fe f926 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	e002      	b.n	8008352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800834c:	f7fe f90e 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8008350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009a      	lsls	r2, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	4a22      	ldr	r2, [pc, #136]	; (80083f4 <UART_SetConfig+0x118>)
 800836a:	fba2 2303 	umull	r2, r3, r2, r3
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	0119      	lsls	r1, r3, #4
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009a      	lsls	r2, r3, #2
 800837c:	441a      	add	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	fbb2 f2f3 	udiv	r2, r2, r3
 8008388:	4b1a      	ldr	r3, [pc, #104]	; (80083f4 <UART_SetConfig+0x118>)
 800838a:	fba3 0302 	umull	r0, r3, r3, r2
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2064      	movs	r0, #100	; 0x64
 8008392:	fb00 f303 	mul.w	r3, r0, r3
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	; 0x32
 800839c:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <UART_SetConfig+0x118>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083a8:	4419      	add	r1, r3
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009a      	lsls	r2, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <UART_SetConfig+0x118>)
 80083c2:	fba3 0302 	umull	r0, r3, r3, r2
 80083c6:	095b      	lsrs	r3, r3, #5
 80083c8:	2064      	movs	r0, #100	; 0x64
 80083ca:	fb00 f303 	mul.w	r3, r0, r3
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	3332      	adds	r3, #50	; 0x32
 80083d4:	4a07      	ldr	r2, [pc, #28]	; (80083f4 <UART_SetConfig+0x118>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	440a      	add	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083e8:	bf00      	nop
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	40013800 	.word	0x40013800
 80083f4:	51eb851f 	.word	0x51eb851f

080083f8 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a5d      	ldr	r2, [pc, #372]	; (8008578 <_ZN10ControllerC1Ev+0x180>)
 8008404:	635a      	str	r2, [r3, #52]	; 0x34
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a5c      	ldr	r2, [pc, #368]	; (800857c <_ZN10ControllerC1Ev+0x184>)
 800840a:	639a      	str	r2, [r3, #56]	; 0x38
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	4618      	mov	r0, r3
 800841a:	f7f8 fc37 	bl	8000c8c <__aeabi_i2f>
 800841e:	4603      	mov	r3, r0
 8008420:	4619      	mov	r1, r3
 8008422:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008426:	f7f8 fd39 	bl	8000e9c <__aeabi_fdiv>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	641a      	str	r2, [r3, #64]	; 0x40
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a52      	ldr	r2, [pc, #328]	; (8008580 <_ZN10ControllerC1Ev+0x188>)
 8008436:	645a      	str	r2, [r3, #68]	; 0x44
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a52      	ldr	r2, [pc, #328]	; (8008584 <_ZN10ControllerC1Ev+0x18c>)
 800843c:	649a      	str	r2, [r3, #72]	; 0x48
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a51      	ldr	r2, [pc, #324]	; (8008588 <_ZN10ControllerC1Ev+0x190>)
 8008442:	64da      	str	r2, [r3, #76]	; 0x4c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	651a      	str	r2, [r3, #80]	; 0x50
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a4f      	ldr	r2, [pc, #316]	; (800858c <_ZN10ControllerC1Ev+0x194>)
 8008450:	655a      	str	r2, [r3, #84]	; 0x54
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a4e      	ldr	r2, [pc, #312]	; (8008590 <_ZN10ControllerC1Ev+0x198>)
 8008456:	659a      	str	r2, [r3, #88]	; 0x58
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a4e      	ldr	r2, [pc, #312]	; (8008594 <_ZN10ControllerC1Ev+0x19c>)
 800845c:	65da      	str	r2, [r3, #92]	; 0x5c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	661a      	str	r2, [r3, #96]	; 0x60
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	665a      	str	r2, [r3, #100]	; 0x64
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	669a      	str	r2, [r3, #104]	; 0x68
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a47      	ldr	r2, [pc, #284]	; (8008598 <_ZN10ControllerC1Ev+0x1a0>)
 800847a:	66da      	str	r2, [r3, #108]	; 0x6c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a47      	ldr	r2, [pc, #284]	; (800859c <_ZN10ControllerC1Ev+0x1a4>)
 8008480:	671a      	str	r2, [r3, #112]	; 0x70
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	4618      	mov	r0, r3
 8008488:	f7f7 ffb4 	bl	80003f4 <__aeabi_i2d>
 800848c:	a334      	add	r3, pc, #208	; (adr r3, 8008560 <_ZN10ControllerC1Ev+0x168>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f8 f819 	bl	80004c8 <__aeabi_dmul>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	f7f8 faeb 	bl	8000a78 <__aeabi_d2f>
 80084a2:	4602      	mov	r2, r0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	675a      	str	r2, [r3, #116]	; 0x74
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a3d      	ldr	r2, [pc, #244]	; (80085a0 <_ZN10ControllerC1Ev+0x1a8>)
 80084ac:	679a      	str	r2, [r3, #120]	; 0x78
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <_ZN10ControllerC1Ev+0x1ac>)
 80084b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80084ba:	a32b      	add	r3, pc, #172	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084c4:	a328      	add	r3, pc, #160	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	e9cd 2300 	strd	r2, r3, [sp]
 80084ce:	a328      	add	r3, pc, #160	; (adr r3, 8008570 <_ZN10ControllerC1Ev+0x178>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	4608      	mov	r0, r1
 80084d6:	f003 fca1 	bl	800be1c <_ZN3lpfC1Eddd>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80084e0:	a321      	add	r3, pc, #132	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084ea:	a31f      	add	r3, pc, #124	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	e9cd 2300 	strd	r2, r3, [sp]
 80084f4:	a31e      	add	r3, pc, #120	; (adr r3, 8008570 <_ZN10ControllerC1Ev+0x178>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	4608      	mov	r0, r1
 80084fc:	f003 fc8e 	bl	800be1c <_ZN3lpfC1Eddd>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8008506:	a318      	add	r3, pc, #96	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008510:	a315      	add	r3, pc, #84	; (adr r3, 8008568 <_ZN10ControllerC1Ev+0x170>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	e9cd 2300 	strd	r2, r3, [sp]
 800851a:	a315      	add	r3, pc, #84	; (adr r3, 8008570 <_ZN10ControllerC1Ev+0x178>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	4608      	mov	r0, r1
 8008522:	f003 fc7b 	bl	800be1c <_ZN3lpfC1Eddd>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800852c:	4618      	mov	r0, r3
 800852e:	f003 f87b 	bl	800b628 <_ZN3PIDC1Ev>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8008538:	4618      	mov	r0, r3
 800853a:	f003 f875 	bl	800b628 <_ZN3PIDC1Ev>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008544:	4618      	mov	r0, r3
 8008546:	f003 f86f 	bl	800b628 <_ZN3PIDC1Ev>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008550:	4618      	mov	r0, r3
 8008552:	f003 f869 	bl	800b628 <_ZN3PIDC1Ev>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	eb851eb8 	.word	0xeb851eb8
 8008564:	3f9eb851 	.word	0x3f9eb851
 8008568:	fc3b4f61 	.word	0xfc3b4f61
 800856c:	3fa35935 	.word	0x3fa35935
 8008570:	4f0d844d 	.word	0x4f0d844d
 8008574:	3fed94af 	.word	0x3fed94af
 8008578:	44c1c000 	.word	0x44c1c000
 800857c:	42654ca3 	.word	0x42654ca3
 8008580:	3fb33333 	.word	0x3fb33333
 8008584:	411cf5c3 	.word	0x411cf5c3
 8008588:	41f9d70a 	.word	0x41f9d70a
 800858c:	3e19999a 	.word	0x3e19999a
 8008590:	3c03126f 	.word	0x3c03126f
 8008594:	3cbc6a7f 	.word	0x3cbc6a7f
 8008598:	40a00000 	.word	0x40a00000
 800859c:	40d00000 	.word	0x40d00000
 80085a0:	41200000 	.word	0x41200000
 80085a4:	41700000 	.word	0x41700000

080085a8 <_ZN10Controller3RunEv>:

std::vector<float> Controller::Run (void) {
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	b09a      	sub	sp, #104	; 0x68
 80085ae:	af04      	add	r7, sp, #16
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008614:	653b      	str	r3, [r7, #80]	; 0x50
        float pitch_des 	 = state_des.angles[1];
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800861c:	64fb      	str	r3, [r7, #76]	; 0x4c
        float yaw_rate_des = state_des.rates[2];
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008624:	64bb      	str	r3, [r7, #72]	; 0x48

        roll_des 	  	= roll_des_filt.Run(roll_des);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	3380      	adds	r3, #128	; 0x80
 800862a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800862c:	4618      	mov	r0, r3
 800862e:	f003 fc10 	bl	800be52 <_ZN3lpf3RunEf>
 8008632:	6538      	str	r0, [r7, #80]	; 0x50
        pitch_des 		= pitch_des_filt.Run(pitch_des);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	33a8      	adds	r3, #168	; 0xa8
 8008638:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800863a:	4618      	mov	r0, r3
 800863c:	f003 fc09 	bl	800be52 <_ZN3lpf3RunEf>
 8008640:	64f8      	str	r0, [r7, #76]	; 0x4c
        yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	33d0      	adds	r3, #208	; 0xd0
 8008646:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008648:	4618      	mov	r0, r3
 800864a:	f003 fc02 	bl	800be52 <_ZN3lpf3RunEf>
 800864e:	64b8      	str	r0, [r7, #72]	; 0x48
    roll_rate_des  = pid_roll.P_Sqrt(roll_des,  roll,  Kp_angle);
    pitch_rate_des = pid_roll.P_Sqrt(pitch_des, pitch, Kp_angle);
*/


    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008660:	f003 f834 	bl	800b6cc <_ZN3PID7P_AngleEfff>
 8008664:	4602      	mov	r2, r0
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691a      	ldr	r2, [r3, #16]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800867c:	f003 f826 	bl	800b6cc <_ZN3PID7P_AngleEfff>
 8008680:	4602      	mov	r2, r0
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
    //p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
*/
    //PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle)
    pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	699e      	ldr	r6, [r3, #24]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80086aa:	6838      	ldr	r0, [r7, #0]
 80086ac:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80086ae:	9003      	str	r0, [sp, #12]
 80086b0:	9102      	str	r1, [sp, #8]
 80086b2:	9201      	str	r2, [sp, #4]
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	4663      	mov	r3, ip
 80086b8:	4632      	mov	r2, r6
 80086ba:	4629      	mov	r1, r5
 80086bc:	4620      	mov	r0, r4
 80086be:	f003 f87f 	bl	800b7c0 <_ZN3PID9PID_Rate2Efffffff>
 80086c2:	4602      	mov	r2, r0
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f503 7406 	add.w	r4, r3, #536	; 0x218
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	69de      	ldr	r6, [r3, #28]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80086ec:	6838      	ldr	r0, [r7, #0]
 80086ee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80086f0:	9003      	str	r0, [sp, #12]
 80086f2:	9102      	str	r1, [sp, #8]
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4663      	mov	r3, ip
 80086fa:	4632      	mov	r2, r6
 80086fc:	4629      	mov	r1, r5
 80086fe:	4620      	mov	r0, r4
 8008700:	f003 f85e 	bl	800b7c0 <_ZN3PID9PID_Rate2Efffffff>
 8008704:	4602      	mov	r2, r0
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	f04f 0400 	mov.w	r4, #0
 8008722:	9401      	str	r4, [sp, #4]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	460b      	mov	r3, r1
 8008728:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800872a:	f003 f905 	bl	800b938 <_ZN3PID7PD_RateEfffff>
 800872e:	4602      	mov	r2, r0
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);
    int thr;
    switch(mod) {
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <_ZN10Controller3RunEv+0x19e>
 8008740:	2b01      	cmp	r3, #1
 8008742:	d013      	beq.n	800876c <_ZN10Controller3RunEv+0x1c4>
 8008744:	e0c1      	b.n	80088ca <_ZN10Controller3RunEv+0x322>
    	case STABILIZE:
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
 8008752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008756:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800875a:	f003 fa3b 	bl	800bbd4 <_ZN3PID3SatEfii>
 800875e:	4603      	mov	r3, r0
 8008760:	4618      	mov	r0, r3
 8008762:	f7f8 fcc3 	bl	80010ec <__aeabi_f2iz>
 8008766:	4603      	mov	r3, r0
 8008768:	657b      	str	r3, [r7, #84]	; 0x54
    	    break;
 800876a:	e0ae      	b.n	80088ca <_ZN10Controller3RunEv+0x322>
    	case ALT_HOLD:
    		F = p_alt.PI_Alt(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f503 7652 	add.w	r6, r3, #840	; 0x348
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f8d3 816c 	ldr.w	r8, [r3, #364]	; 0x16c
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f8d3 9170 	ldr.w	r9, [r3, #368]	; 0x170
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	f8d3 a168 	ldr.w	sl, [r3, #360]	; 0x168
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008792:	4618      	mov	r0, r3
 8008794:	f7f8 fcd0 	bl	8001138 <__aeabi_f2uiz>
 8008798:	4603      	mov	r3, r0
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	9501      	str	r5, [sp, #4]
 800879e:	9400      	str	r4, [sp, #0]
 80087a0:	4653      	mov	r3, sl
 80087a2:	464a      	mov	r2, r9
 80087a4:	4641      	mov	r1, r8
 80087a6:	4630      	mov	r0, r6
 80087a8:	f002 ffae 	bl	800b708 <_ZN3PID6PI_AltEfffffj>
 80087ac:	4604      	mov	r4, r0
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7f8 fabb 	bl	8000d34 <__aeabi_fmul>
 80087be:	4603      	mov	r3, r0
 80087c0:	4619      	mov	r1, r3
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7f8 f9ae 	bl	8000b24 <__addsf3>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			float deg2rad = 0.0175;
 80087d2:	4bb3      	ldr	r3, [pc, #716]	; (8008aa0 <_ZN10Controller3RunEv+0x4f8>)
 80087d4:	647b      	str	r3, [r7, #68]	; 0x44
			float roll_r = roll * deg2rad;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4619      	mov	r1, r3
 80087dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087de:	f7f8 faa9 	bl	8000d34 <__aeabi_fmul>
 80087e2:	4603      	mov	r3, r0
 80087e4:	643b      	str	r3, [r7, #64]	; 0x40
			float pitch_r = pitch * deg2rad;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087ee:	f7f8 faa1 	bl	8000d34 <__aeabi_fmul>
 80087f2:	4603      	mov	r3, r0
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 80087f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80087f8:	f7f9 f854 	bl	80018a4 <_ZSt3cosf>
 80087fc:	4603      	mov	r3, r0
 80087fe:	4619      	mov	r1, r3
 8008800:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008804:	f7f8 fb4a 	bl	8000e9c <__aeabi_fdiv>
 8008808:	4603      	mov	r3, r0
 800880a:	461c      	mov	r4, r3
 800880c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800880e:	f7f9 f849 	bl	80018a4 <_ZSt3cosf>
 8008812:	4603      	mov	r3, r0
 8008814:	4619      	mov	r1, r3
 8008816:	4620      	mov	r0, r4
 8008818:	f7f8 fb40 	bl	8000e9c <__aeabi_fdiv>
 800881c:	4603      	mov	r3, r0
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38

			F = F * b2e ; // Body to Earth
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008828:	4618      	mov	r0, r3
 800882a:	f7f8 fa83 	bl	8000d34 <__aeabi_fmul>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			F = p_alt.Sat(F, F_max, F_min);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f503 7452 	add.w	r4, r3, #840	; 0x348
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	f8d3 511c 	ldr.w	r5, [r3, #284]	; 0x11c
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008848:	4618      	mov	r0, r3
 800884a:	f7f8 fc4f 	bl	80010ec <__aeabi_f2iz>
 800884e:	4606      	mov	r6, r0
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008854:	4618      	mov	r0, r3
 8008856:	f7f8 fc49 	bl	80010ec <__aeabi_f2iz>
 800885a:	4603      	mov	r3, r0
 800885c:	4632      	mov	r2, r6
 800885e:	4629      	mov	r1, r5
 8008860:	4620      	mov	r0, r4
 8008862:	f003 f9b7 	bl	800bbd4 <_ZN3PID3SatEfii>
 8008866:	4602      	mov	r2, r0
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			thr = p_alt.F2thr(F);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f503 7252 	add.w	r2, r3, #840	; 0x348
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f003 fa87 	bl	800bd90 <_ZN3PID5F2thrEf>
 8008882:	4603      	mov	r3, r0
 8008884:	657b      	str	r3, [r7, #84]	; 0x54
			thr = p_alt.Sat(thr, 1800, 1100);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	f503 7452 	add.w	r4, r3, #840	; 0x348
 800888c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800888e:	f7f8 f9fd 	bl	8000c8c <__aeabi_i2f>
 8008892:	4601      	mov	r1, r0
 8008894:	f240 434c 	movw	r3, #1100	; 0x44c
 8008898:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800889c:	4620      	mov	r0, r4
 800889e:	f003 f999 	bl	800bbd4 <_ZN3PID3SatEfii>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7f8 fc21 	bl	80010ec <__aeabi_f2iz>
 80088aa:	4603      	mov	r3, r0
 80088ac:	657b      	str	r3, [r7, #84]	; 0x54
			alt_thr = thr;
 80088ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80088b0:	f7f8 f9ec 	bl	8000c8c <__aeabi_i2f>
 80088b4:	4602      	mov	r2, r0
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
			z0 = p_alt.zi;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			break;
 80088c8:	bf00      	nop

    }


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 80088ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80088cc:	f7f8 f9de 	bl	8000c8c <__aeabi_i2f>
 80088d0:	4602      	mov	r2, r0
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f7f8 f922 	bl	8000b24 <__addsf3>
 80088e0:	4603      	mov	r3, r0
 80088e2:	461a      	mov	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7f8 f917 	bl	8000b20 <__aeabi_fsub>
 80088f2:	4603      	mov	r3, r0
 80088f4:	461a      	mov	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7f8 f90e 	bl	8000b20 <__aeabi_fsub>
 8008904:	4603      	mov	r3, r0
 8008906:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800890a:	4618      	mov	r0, r3
 800890c:	f7f8 f90a 	bl	8000b24 <__addsf3>
 8008910:	4603      	mov	r3, r0
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fd80 	bl	8000418 <__aeabi_f2d>
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	4b61      	ldr	r3, [pc, #388]	; (8008aa4 <_ZN10Controller3RunEv+0x4fc>)
 800891e:	f7f7 fc1b 	bl	8000158 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4610      	mov	r0, r2
 8008928:	4619      	mov	r1, r3
 800892a:	f7f8 f87d 	bl	8000a28 <__aeabi_d2iz>
 800892e:	4603      	mov	r3, r0
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8008932:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008934:	f7f8 f9aa 	bl	8000c8c <__aeabi_i2f>
 8008938:	4602      	mov	r2, r0
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7f8 f8ec 	bl	8000b20 <__aeabi_fsub>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008952:	4619      	mov	r1, r3
 8008954:	4610      	mov	r0, r2
 8008956:	f7f8 f8e5 	bl	8000b24 <__addsf3>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7f8 f8da 	bl	8000b20 <__aeabi_fsub>
 800896c:	4603      	mov	r3, r0
 800896e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008972:	4618      	mov	r0, r3
 8008974:	f7f8 f8d4 	bl	8000b20 <__aeabi_fsub>
 8008978:	4603      	mov	r3, r0
 800897a:	4618      	mov	r0, r3
 800897c:	f7f7 fd4c 	bl	8000418 <__aeabi_f2d>
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	4b47      	ldr	r3, [pc, #284]	; (8008aa4 <_ZN10Controller3RunEv+0x4fc>)
 8008986:	f7f7 fbe9 	bl	800015c <__adddf3>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	f7f8 f849 	bl	8000a28 <__aeabi_d2iz>
 8008996:	4603      	mov	r3, r0
 8008998:	633b      	str	r3, [r7, #48]	; 0x30
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800899a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800899c:	f7f8 f976 	bl	8000c8c <__aeabi_i2f>
 80089a0:	4602      	mov	r2, r0
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7f8 f8ba 	bl	8000b24 <__addsf3>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f7f8 f8b1 	bl	8000b24 <__addsf3>
 80089c2:	4603      	mov	r3, r0
 80089c4:	461a      	mov	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7f8 f8a8 	bl	8000b24 <__addsf3>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f8 f8a2 	bl	8000b24 <__addsf3>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f7 fd18 	bl	8000418 <__aeabi_f2d>
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	4b2d      	ldr	r3, [pc, #180]	; (8008aa4 <_ZN10Controller3RunEv+0x4fc>)
 80089ee:	f7f7 fbb5 	bl	800015c <__adddf3>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4610      	mov	r0, r2
 80089f8:	4619      	mov	r1, r3
 80089fa:	f7f8 f815 	bl	8000a28 <__aeabi_d2iz>
 80089fe:	4603      	mov	r3, r0
 8008a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 8008a02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008a04:	f7f8 f942 	bl	8000c8c <__aeabi_i2f>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008a10:	4619      	mov	r1, r3
 8008a12:	4610      	mov	r0, r2
 8008a14:	f7f8 f884 	bl	8000b20 <__aeabi_fsub>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7f8 f87b 	bl	8000b20 <__aeabi_fsub>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7f8 f874 	bl	8000b24 <__addsf3>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f8 f86c 	bl	8000b20 <__aeabi_fsub>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7f7 fce4 	bl	8000418 <__aeabi_f2d>
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	4b13      	ldr	r3, [pc, #76]	; (8008aa4 <_ZN10Controller3RunEv+0x4fc>)
 8008a56:	f7f7 fb7f 	bl	8000158 <__aeabi_dsub>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7f7 ffe1 	bl	8000a28 <__aeabi_d2iz>
 8008a66:	4603      	mov	r3, r0
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008a70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a72:	f7f8 f90b 	bl	8000c8c <__aeabi_i2f>
 8008a76:	4601      	mov	r1, r0
 8008a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	f240 434c 	movw	r3, #1100	; 0x44c
 8008a80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008a84:	4620      	mov	r0, r4
 8008a86:	f003 f86b 	bl	800bb60 <_ZN3PID3SatEfiii>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f8 fb2d 	bl	80010ec <__aeabi_f2iz>
 8008a92:	4603      	mov	r3, r0
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008a9c:	e004      	b.n	8008aa8 <_ZN10Controller3RunEv+0x500>
 8008a9e:	bf00      	nop
 8008aa0:	3c8f5c29 	.word	0x3c8f5c29
 8008aa4:	40120000 	.word	0x40120000
 8008aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aaa:	f7f8 f8ef 	bl	8000c8c <__aeabi_i2f>
 8008aae:	4601      	mov	r1, r0
 8008ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	f240 434c 	movw	r3, #1100	; 0x44c
 8008ab8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008abc:	4620      	mov	r0, r4
 8008abe:	f003 f84f 	bl	800bb60 <_ZN3PID3SatEfiii>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f8 fb11 	bl	80010ec <__aeabi_f2iz>
 8008aca:	4603      	mov	r3, r0
 8008acc:	633b      	str	r3, [r7, #48]	; 0x30
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ad6:	f7f8 f8d9 	bl	8000c8c <__aeabi_i2f>
 8008ada:	4601      	mov	r1, r0
 8008adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	f240 434c 	movw	r3, #1100	; 0x44c
 8008ae4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f003 f839 	bl	800bb60 <_ZN3PID3SatEfiii>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7f8 fafb 	bl	80010ec <__aeabi_f2iz>
 8008af6:	4603      	mov	r3, r0
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8008b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b02:	f7f8 f8c3 	bl	8000c8c <__aeabi_i2f>
 8008b06:	4601      	mov	r1, r0
 8008b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	f240 434c 	movw	r3, #1100	; 0x44c
 8008b10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f003 f823 	bl	800bb60 <_ZN3PID3SatEfiii>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f8 fae5 	bl	80010ec <__aeabi_f2iz>
 8008b22:	4603      	mov	r3, r0
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28
    pwm2 = 1000;
    pwm3 = 1000;
    pwm4 = 1000;*/

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b2e:	b291      	uxth	r1, r2
 8008b30:	2201      	movs	r2, #1
 8008b32:	4618      	mov	r0, r3
 8008b34:	f003 f8e4 	bl	800bd00 <_ZN3PID7pwm2motEti>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	b291      	uxth	r1, r2
 8008b48:	2201      	movs	r2, #1
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f003 f8d8 	bl	800bd00 <_ZN3PID7pwm2motEti>
 8008b50:	4602      	mov	r2, r0
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	629a      	str	r2, [r3, #40]	; 0x28
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5e:	b291      	uxth	r1, r2
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	4618      	mov	r0, r3
 8008b66:	f003 f8cb 	bl	800bd00 <_ZN3PID7pwm2motEti>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b78:	b291      	uxth	r1, r2
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f003 f8be 	bl	800bd00 <_ZN3PID7pwm2motEti>
 8008b84:	4602      	mov	r2, r0
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	631a      	str	r2, [r3, #48]	; 0x30


    std::vector<float> controller_output = 	{w1,w2,w3,w4};
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	623b      	str	r3, [r7, #32]
 8008ba2:	f107 0314 	add.w	r3, r7, #20
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	2304      	movs	r3, #4
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fa fa77 	bl	80030a4 <_ZNSaIfEC1Ev>
 8008bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bba:	f107 020c 	add.w	r2, r7, #12
 8008bbe:	ca06      	ldmia	r2, {r1, r2}
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f84b 	bl	8008c5c <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8008bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fa fa15 	bl	8002ffa <_ZNSaIfED1Ev>
    controller_output_pwm[0] = pwm1;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    controller_output_pwm[1] = pwm2;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bdc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    controller_output_pwm[2] = pwm3;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    controller_output_pwm[3] = pwm4;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    return controller_output;
 8008bf0:	bf00      	nop
}
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	3758      	adds	r7, #88	; 0x58
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008bfc <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

    return controller_output;
}
*/
Controller::~Controller() {}
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f003 f8f8 	bl	800be00 <_ZN3PIDD1Ev>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f003 f8f2 	bl	800be00 <_ZN3PIDD1Ev>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8008c22:	4618      	mov	r0, r3
 8008c24:	f003 f8ec 	bl	800be00 <_ZN3PIDD1Ev>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f003 f8e6 	bl	800be00 <_ZN3PIDD1Ev>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	33d0      	adds	r3, #208	; 0xd0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f003 f960 	bl	800befe <_ZN3lpfD1Ev>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	33a8      	adds	r3, #168	; 0xa8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f003 f95b 	bl	800befe <_ZN3lpfD1Ev>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3380      	adds	r3, #128	; 0x80
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f003 f956 	bl	800befe <_ZN3lpfD1Ev>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8008c5c:	b5b0      	push	{r4, r5, r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	1d38      	adds	r0, r7, #4
 8008c66:	e880 0006 	stmia.w	r0, {r1, r2}
 8008c6a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fa fb54 	bl	800331e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8008c76:	1d3b      	adds	r3, r7, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f810 	bl	8008c9e <_ZNKSt16initializer_listIfE5beginEv>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f816 	bl	8008cb4 <_ZNKSt16initializer_listIfE3endEv>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 f822 	bl	8008cd8 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bdb0      	pop	{r4, r5, r7, pc}

08008c9e <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ffee 	bl	8008c9e <_ZNKSt16initializer_listIfE5beginEv>
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f840 	bl	8008d4a <_ZNKSt16initializer_listIfE4sizeEv>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4423      	add	r3, r4
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd90      	pop	{r4, r7, pc}

08008cd8 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f000 f839 	bl	8008d60 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008cf2:	68fc      	ldr	r4, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fa fa10 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6978      	ldr	r0, [r7, #20]
 8008d02:	f000 f841 	bl	8008d88 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 f864 	bl	8008dd8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8008d10:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fa f9f6 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008d30:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8008d32:	4622      	mov	r2, r4
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	68b8      	ldr	r0, [r7, #8]
 8008d38:	f000 f862 	bl	8008e00 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8008d3c:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	605a      	str	r2, [r3, #4]
	}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd90      	pop	{r4, r7, pc}

08008d4a <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr

08008d60 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008d60:	b5b0      	push	{r4, r5, r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008d6a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f857 	bl	8008e22 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8008d74:	462a      	mov	r2, r5
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f85b 	bl	8008e34 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008d7e:	4603      	mov	r3, r0
    }
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bdb0      	pop	{r4, r5, r7, pc}

08008d88 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8008d92:	f107 030c 	add.w	r3, r7, #12
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fa fab2 	bl	8003302 <_ZNSaIfEC1ERKS_>
 8008d9e:	f107 030c 	add.w	r3, r7, #12
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f855 	bl	8008e52 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8008da8:	4602      	mov	r2, r0
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bf8c      	ite	hi
 8008db0:	2301      	movhi	r3, #1
 8008db2:	2300      	movls	r3, #0
 8008db4:	b2dc      	uxtb	r4, r3
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fa f91d 	bl	8002ffa <_ZNSaIfED1Ev>
 8008dc0:	2c00      	cmp	r4, #0
 8008dc2:	d002      	beq.n	8008dca <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8008dc4:	4803      	ldr	r0, [pc, #12]	; (8008dd4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8008dc6:	f003 f8ba 	bl	800bf3e <_ZSt20__throw_length_errorPKc>
	return __n;
 8008dca:	687b      	ldr	r3, [r7, #4]
      }
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}
 8008dd4:	0800e0fc 	.word	0x0800e0fc

08008dd8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f84a 	bl	8008e86 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8008df2:	4603      	mov	r3, r0
 8008df4:	e000      	b.n	8008df8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8008df6:	2300      	movs	r3, #0
      }
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f846 	bl	8008ea4 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	109b      	asrs	r3, r3, #2
    }
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr

08008e52 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8008e5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008e5e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f831 	bl	8008ec8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8008e66:	4603      	mov	r3, r0
 8008e68:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008e6a:	f107 0208 	add.w	r2, r7, #8
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f833 	bl	8008ee0 <_ZSt3minIjERKT_S2_S2_>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	681b      	ldr	r3, [r3, #0]
      }
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008e90:	2200      	movs	r2, #0
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f836 	bl	8008f06 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f842 	bl	8008f42 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8008ebe:	4603      	mov	r3, r0
    }
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f846 	bl	8008f62 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d201      	bcs.n	8008efa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	e000      	b.n	8008efc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8008efa:	687b      	ldr	r3, [r7, #4]
    }
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr

08008f06 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f825 	bl	8008f62 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	bf8c      	ite	hi
 8008f20:	2301      	movhi	r3, #1
 8008f22:	2300      	movls	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008f2a:	f003 f805 	bl	800bf38 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f002 ffef 	bl	800bf16 <_Znwj>
 8008f38:	4603      	mov	r3, r0
      }
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f810 	bl	8008f78 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8008f6a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 f80f 	bl	8008fa8 <_ZSt12__miter_baseIPKfET_S2_>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	68b8      	ldr	r0, [r7, #8]
 8008f8e:	f000 f80b 	bl	8008fa8 <_ZSt12__miter_baseIPKfET_S2_>
 8008f92:	4603      	mov	r3, r0
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	4619      	mov	r1, r3
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 f80f 	bl	8008fbc <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8008f9e:	4603      	mov	r3, r0
    }
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd90      	pop	{r4, r7, pc}

08008fa8 <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008fbc:	b5b0      	push	{r4, r5, r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f81a 	bl	8009002 <_ZSt12__niter_baseIPKfET_S2_>
 8008fce:	4604      	mov	r4, r0
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f000 f816 	bl	8009002 <_ZSt12__niter_baseIPKfET_S2_>
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f81b 	bl	8009016 <_ZSt12__niter_baseIPfET_S1_>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 f81f 	bl	800902a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8008fec:	4602      	mov	r2, r0
 8008fee:	1d3b      	adds	r3, r7, #4
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f82b 	bl	800904e <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8008ff8:	4603      	mov	r3, r0
    }
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bdb0      	pop	{r4, r5, r7, pc}

08009002 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
    { return __it; }
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr

0800902a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8009036:	2301      	movs	r3, #1
 8009038:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f810 	bl	8009064 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8009044:	4603      	mov	r3, r0
    }
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr

08009064 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	109b      	asrs	r3, r3, #2
 8009078:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	461a      	mov	r2, r3
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f004 fef5 	bl	800de78 <memmove>
	  return __result + _Num;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4413      	add	r3, r2
	}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	625a      	str	r2, [r3, #36]	; 0x24
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	629a      	str	r2, [r3, #40]	; 0x28
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3d      	ldr	r2, [pc, #244]	; (80091b8 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a3c      	ldr	r2, [pc, #240]	; (80091bc <_ZN15Kalman_FiltresiC1Ev+0x11c>)
 80090ca:	649a      	str	r2, [r3, #72]	; 0x48
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a3b      	ldr	r2, [pc, #236]	; (80091bc <_ZN15Kalman_FiltresiC1Ev+0x11c>)
 80090d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a3a      	ldr	r2, [pc, #232]	; (80091c0 <_ZN15Kalman_FiltresiC1Ev+0x120>)
 80090d6:	651a      	str	r2, [r3, #80]	; 0x50
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	659a      	str	r2, [r3, #88]	; 0x58
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a31      	ldr	r2, [pc, #196]	; (80091b8 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a32      	ldr	r2, [pc, #200]	; (80091c4 <_ZN15Kalman_FiltresiC1Ev+0x124>)
 80090fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a2d      	ldr	r2, [pc, #180]	; (80091b8 <_ZN15Kalman_FiltresiC1Ev+0x118>)
 8009102:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a2f      	ldr	r2, [pc, #188]	; (80091c8 <_ZN15Kalman_FiltresiC1Ev+0x128>)
 800910a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <_ZN15Kalman_FiltresiC1Ev+0x12c>)
 8009112:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800911c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2b      	ldr	r2, [pc, #172]	; (80091d0 <_ZN15Kalman_FiltresiC1Ev+0x130>)
 8009124:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a2a      	ldr	r2, [pc, #168]	; (80091d4 <_ZN15Kalman_FiltresiC1Ev+0x134>)
 800912c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009136:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009140:	4618      	mov	r0, r3
 8009142:	f7f7 fda3 	bl	8000c8c <__aeabi_i2f>
 8009146:	4603      	mov	r3, r0
 8009148:	4619      	mov	r1, r3
 800914a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800914e:	f7f7 fea5 	bl	8000e9c <__aeabi_fdiv>
 8009152:	4603      	mov	r3, r0
 8009154:	4618      	mov	r0, r3
 8009156:	f7f7 f95f 	bl	8000418 <__aeabi_f2d>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800916a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009174:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800917e:	a30a      	add	r3, pc, #40	; (adr r3, 80091a8 <_ZN15Kalman_FiltresiC1Ev+0x108>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009188:	a307      	add	r3, pc, #28	; (adr r3, 80091a8 <_ZN15Kalman_FiltresiC1Ev+0x108>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	e9cd 2300 	strd	r2, r3, [sp]
 8009192:	a307      	add	r3, pc, #28	; (adr r3, 80091b0 <_ZN15Kalman_FiltresiC1Ev+0x110>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	4608      	mov	r0, r1
 800919a:	f002 fe3f 	bl	800be1c <_ZN3lpfC1Eddd>

}
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	de7ea5f8 	.word	0xde7ea5f8
 80091ac:	3fb2a454 	.word	0x3fb2a454
 80091b0:	ab367a10 	.word	0xab367a10
 80091b4:	3feb573e 	.word	0x3feb573e
 80091b8:	47c35000 	.word	0x47c35000
 80091bc:	3a83126f 	.word	0x3a83126f
 80091c0:	3ca3d70a 	.word	0x3ca3d70a
 80091c4:	461c4000 	.word	0x461c4000
 80091c8:	41200000 	.word	0x41200000
 80091cc:	4b189680 	.word	0x4b189680
 80091d0:	40a00000 	.word	0x40a00000
 80091d4:	42654ca3 	.word	0x42654ca3

080091d8 <_ZN15Kalman_Filtresi3RunEv>:


void Kalman_Filtresi::Run() {
 80091d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091dc:	b098      	sub	sp, #96	; 0x60
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]

  float accX = acc[0]; 
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80091e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float accY = acc[1];
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80091f0:	65bb      	str	r3, [r7, #88]	; 0x58
  float accZ = acc[2];
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80091f8:	657b      	str	r3, [r7, #84]	; 0x54

  float gyroX = gyro[0]; 
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009200:	653b      	str	r3, [r7, #80]	; 0x50
  float gyroY = gyro[1];
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009208:	64fb      	str	r3, [r7, #76]	; 0x4c
  float gyroZ = gyro[2];
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009210:	64bb      	str	r3, [r7, #72]	; 0x48

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8009212:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009214:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009216:	f7f7 fd8d 	bl	8000d34 <__aeabi_fmul>
 800921a:	4603      	mov	r3, r0
 800921c:	461c      	mov	r4, r3
 800921e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009220:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009222:	f7f7 fd87 	bl	8000d34 <__aeabi_fmul>
 8009226:	4603      	mov	r3, r0
 8009228:	4619      	mov	r1, r3
 800922a:	4620      	mov	r0, r4
 800922c:	f7f7 fc7a 	bl	8000b24 <__addsf3>
 8009230:	4603      	mov	r3, r0
 8009232:	461c      	mov	r4, r3
 8009234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009238:	f7f7 fd7c 	bl	8000d34 <__aeabi_fmul>
 800923c:	4603      	mov	r3, r0
 800923e:	4619      	mov	r1, r3
 8009240:	4620      	mov	r0, r4
 8009242:	f7f7 fc6f 	bl	8000b24 <__addsf3>
 8009246:	4603      	mov	r3, r0
 8009248:	4618      	mov	r0, r3
 800924a:	f7f8 fb37 	bl	80018bc <_ZSt4sqrtf>
 800924e:	6478      	str	r0, [r7, #68]	; 0x44

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8009250:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009252:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009254:	f7f7 fe22 	bl	8000e9c <__aeabi_fdiv>
 8009258:	4603      	mov	r3, r0
 800925a:	4618      	mov	r0, r3
 800925c:	f7f8 fb16 	bl	800188c <_ZSt4asinf>
 8009260:	4602      	mov	r2, r0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7f7 fd62 	bl	8000d34 <__aeabi_fmul>
 8009270:	4603      	mov	r3, r0
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7f7 fc51 	bl	8000b24 <__addsf3>
 8009282:	4603      	mov	r3, r0
 8009284:	461a      	mov	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800928c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800928e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009290:	f7f7 fe04 	bl	8000e9c <__aeabi_fdiv>
 8009294:	4603      	mov	r3, r0
 8009296:	4618      	mov	r0, r3
 8009298:	f7f8 faf8 	bl	800188c <_ZSt4asinf>
 800929c:	4602      	mov	r2, r0
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7f7 fd44 	bl	8000d34 <__aeabi_fmul>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f7f7 fc33 	bl	8000b24 <__addsf3>
 80092be:	4603      	mov	r3, r0
 80092c0:	461a      	mov	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 80092c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80092ca:	f7f7 f8a5 	bl	8000418 <__aeabi_f2d>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80092d4:	f7f7 f8f8 	bl	80004c8 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4610      	mov	r0, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	f7f7 fbca 	bl	8000a78 <__aeabi_d2f>
 80092e4:	4602      	mov	r2, r0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  roll_gyro =  gyroX * st;
 80092ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80092ee:	f7f7 f893 	bl	8000418 <__aeabi_f2d>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80092f8:	f7f7 f8e6 	bl	80004c8 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4610      	mov	r0, r2
 8009302:	4619      	mov	r1, r3
 8009304:	f7f7 fbb8 	bl	8000a78 <__aeabi_d2f>
 8009308:	4602      	mov	r2, r0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  #endif
    
    //if(gyro_ready) {


    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	f7f7 fc00 	bl	8000b24 <__addsf3>
 8009324:	4603      	mov	r3, r0
 8009326:	4618      	mov	r0, r3
 8009328:	f7f7 f876 	bl	8000418 <__aeabi_f2d>
 800932c:	a3bc      	add	r3, pc, #752	; (adr r3, 8009620 <_ZN15Kalman_Filtresi3RunEv+0x448>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f7 f8c9 	bl	80004c8 <__aeabi_dmul>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4614      	mov	r4, r2
 800933c:	461d      	mov	r5, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009344:	4618      	mov	r0, r3
 8009346:	f7f7 f867 	bl	8000418 <__aeabi_f2d>
 800934a:	a3b7      	add	r3, pc, #732	; (adr r3, 8009628 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f7 f8ba 	bl	80004c8 <__aeabi_dmul>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f6 fefe 	bl	800015c <__adddf3>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4610      	mov	r0, r2
 8009366:	4619      	mov	r1, r3
 8009368:	f7f7 fb86 	bl	8000a78 <__aeabi_d2f>
 800936c:	4602      	mov	r2, r0
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7f7 fbce 	bl	8000b24 <__addsf3>
 8009388:	4603      	mov	r3, r0
 800938a:	4618      	mov	r0, r3
 800938c:	f7f7 f844 	bl	8000418 <__aeabi_f2d>
 8009390:	a3a3      	add	r3, pc, #652	; (adr r3, 8009620 <_ZN15Kalman_Filtresi3RunEv+0x448>)
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	f7f7 f897 	bl	80004c8 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4614      	mov	r4, r2
 80093a0:	461d      	mov	r5, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f7 f835 	bl	8000418 <__aeabi_f2d>
 80093ae:	a39e      	add	r3, pc, #632	; (adr r3, 8009628 <_ZN15Kalman_Filtresi3RunEv+0x450>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f7f7 f888 	bl	80004c8 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f6 fecc 	bl	800015c <__adddf3>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4610      	mov	r0, r2
 80093ca:	4619      	mov	r1, r3
 80093cc:	f7f7 fb54 	bl	8000a78 <__aeabi_d2f>
 80093d0:	4602      	mov	r2, r0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108


    //ANGLE PREDICTION
    roll_ekf = (roll_ekf) + st*(roll_rate);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f7 f81a 	bl	8000418 <__aeabi_f2d>
 80093e4:	4680      	mov	r8, r0
 80093e6:	4689      	mov	r9, r1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f7 f810 	bl	8000418 <__aeabi_f2d>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 f862 	bl	80004c8 <__aeabi_dmul>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	f7f6 fea6 	bl	800015c <__adddf3>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4610      	mov	r0, r2
 8009416:	4619      	mov	r1, r3
 8009418:	f7f7 fb2e 	bl	8000a78 <__aeabi_d2f>
 800941c:	4602      	mov	r2, r0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    S11_roll = S11_roll + sa + S31_roll*st + (st*st*(S13_roll + S33_roll*st))/st;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7f7 fb78 	bl	8000b24 <__addsf3>
 8009434:	4603      	mov	r3, r0
 8009436:	4618      	mov	r0, r3
 8009438:	f7f6 ffee 	bl	8000418 <__aeabi_f2d>
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009444:	4618      	mov	r0, r3
 8009446:	f7f6 ffe7 	bl	8000418 <__aeabi_f2d>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009450:	f7f7 f83a 	bl	80004c8 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f6 fe7e 	bl	800015c <__adddf3>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4690      	mov	r8, r2
 8009466:	4699      	mov	r9, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009474:	f7f7 f828 	bl	80004c8 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4692      	mov	sl, r2
 800947e:	469b      	mov	fp, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009484:	4618      	mov	r0, r3
 8009486:	f7f6 ffc7 	bl	8000418 <__aeabi_f2d>
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009492:	4618      	mov	r0, r3
 8009494:	f7f6 ffc0 	bl	8000418 <__aeabi_f2d>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800949e:	f7f7 f813 	bl	80004c8 <__aeabi_dmul>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4620      	mov	r0, r4
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7f6 fe57 	bl	800015c <__adddf3>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	f7f7 f807 	bl	80004c8 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4610      	mov	r0, r2
 80094c0:	4619      	mov	r1, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80094c8:	f7f7 f928 	bl	800071c <__aeabi_ddiv>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f6 fe42 	bl	800015c <__adddf3>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4610      	mov	r0, r2
 80094de:	4619      	mov	r1, r3
 80094e0:	f7f7 faca 	bl	8000a78 <__aeabi_d2f>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	655a      	str	r2, [r3, #84]	; 0x54
    S12_roll = S12_roll + S32_roll*st;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f6 ff92 	bl	8000418 <__aeabi_f2d>
 80094f4:	4604      	mov	r4, r0
 80094f6:	460d      	mov	r5, r1
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f6 ff8b 	bl	8000418 <__aeabi_f2d>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009508:	f7f6 ffde 	bl	80004c8 <__aeabi_dmul>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	f7f6 fe22 	bl	800015c <__adddf3>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4610      	mov	r0, r2
 800951e:	4619      	mov	r1, r3
 8009520:	f7f7 faaa 	bl	8000a78 <__aeabi_d2f>
 8009524:	4602      	mov	r2, r0
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	659a      	str	r2, [r3, #88]	; 0x58
    S13_roll = S13_roll + S33_roll*st;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800952e:	4618      	mov	r0, r3
 8009530:	f7f6 ff72 	bl	8000418 <__aeabi_f2d>
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953c:	4618      	mov	r0, r3
 800953e:	f7f6 ff6b 	bl	8000418 <__aeabi_f2d>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009548:	f7f6 ffbe 	bl	80004c8 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4620      	mov	r0, r4
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fe02 	bl	800015c <__adddf3>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4610      	mov	r0, r2
 800955e:	4619      	mov	r1, r3
 8009560:	f7f7 fa8a 	bl	8000a78 <__aeabi_d2f>
 8009564:	4602      	mov	r2, r0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	665a      	str	r2, [r3, #100]	; 0x64

    S21_roll = S21_roll + S23_roll*(st);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800956e:	4618      	mov	r0, r3
 8009570:	f7f6 ff52 	bl	8000418 <__aeabi_f2d>
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 ff4b 	bl	8000418 <__aeabi_f2d>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009588:	f7f6 ff9e 	bl	80004c8 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f6 fde2 	bl	800015c <__adddf3>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	f7f7 fa6a 	bl	8000a78 <__aeabi_d2f>
 80095a4:	4602      	mov	r2, r0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	65da      	str	r2, [r3, #92]	; 0x5c
    S22_roll = S22_roll + sb;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7f7 fab5 	bl	8000b24 <__addsf3>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	661a      	str	r2, [r3, #96]	; 0x60
    //S23_roll = S23_roll;

    S31_roll = S31_roll + S33_roll*(st);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7f6 ff26 	bl	8000418 <__aeabi_f2d>
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7f6 ff1f 	bl	8000418 <__aeabi_f2d>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80095e0:	f7f6 ff72 	bl	80004c8 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f6 fdb6 	bl	800015c <__adddf3>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4610      	mov	r0, r2
 80095f6:	4619      	mov	r1, r3
 80095f8:	f7f7 fa3e 	bl	8000a78 <__aeabi_d2f>
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	66da      	str	r2, [r3, #108]	; 0x6c
    //S32_roll = S32_roll;
    S33_roll = S33_roll + sr;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f7f7 fa89 	bl	8000b24 <__addsf3>
 8009612:	4603      	mov	r3, r0
 8009614:	461a      	mov	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	675a      	str	r2, [r3, #116]	; 0x74
 800961a:	e009      	b.n	8009630 <_ZN15Kalman_Filtresi3RunEv+0x458>
 800961c:	f3af 8000 	nop.w
 8009620:	b22d0e56 	.word	0xb22d0e56
 8009624:	3fefef9d 	.word	0x3fefef9d
 8009628:	d2f1a9fc 	.word	0xd2f1a9fc
 800962c:	3f60624d 	.word	0x3f60624d

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_roll + Qa*S23_roll + Qa*S32_roll + Qa*S33_roll + Qg*S11_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7f7 fb78 	bl	8000d34 <__aeabi_fmul>
 8009644:	4603      	mov	r3, r0
 8009646:	461c      	mov	r4, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7f7 fb6d 	bl	8000d34 <__aeabi_fmul>
 800965a:	4603      	mov	r3, r0
 800965c:	4619      	mov	r1, r3
 800965e:	4620      	mov	r0, r4
 8009660:	f7f7 fa60 	bl	8000b24 <__addsf3>
 8009664:	4603      	mov	r3, r0
 8009666:	461c      	mov	r4, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7f7 fb5d 	bl	8000d34 <__aeabi_fmul>
 800967a:	4603      	mov	r3, r0
 800967c:	4619      	mov	r1, r3
 800967e:	4620      	mov	r0, r4
 8009680:	f7f7 fa50 	bl	8000b24 <__addsf3>
 8009684:	4603      	mov	r3, r0
 8009686:	461c      	mov	r4, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7f7 fb4d 	bl	8000d34 <__aeabi_fmul>
 800969a:	4603      	mov	r3, r0
 800969c:	4619      	mov	r1, r3
 800969e:	4620      	mov	r0, r4
 80096a0:	f7f7 fa40 	bl	8000b24 <__addsf3>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461c      	mov	r4, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7f7 fb3d 	bl	8000d34 <__aeabi_fmul>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4619      	mov	r1, r3
 80096be:	4620      	mov	r0, r4
 80096c0:	f7f7 fa30 	bl	8000b24 <__addsf3>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461c      	mov	r4, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7f7 fb2d 	bl	8000d34 <__aeabi_fmul>
 80096da:	4603      	mov	r3, r0
 80096dc:	4619      	mov	r1, r3
 80096de:	4620      	mov	r0, r4
 80096e0:	f7f7 fa20 	bl	8000b24 <__addsf3>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461c      	mov	r4, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7f7 fb1e 	bl	8000d34 <__aeabi_fmul>
 80096f8:	4603      	mov	r3, r0
 80096fa:	4619      	mov	r1, r3
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7f7 fa11 	bl	8000b24 <__addsf3>
 8009702:	4603      	mov	r3, r0
 8009704:	461c      	mov	r4, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7f7 fb0f 	bl	8000d34 <__aeabi_fmul>
 8009716:	4603      	mov	r3, r0
 8009718:	4619      	mov	r1, r3
 800971a:	4620      	mov	r0, r4
 800971c:	f7f7 fa00 	bl	8000b20 <__aeabi_fsub>
 8009720:	4603      	mov	r3, r0
 8009722:	461c      	mov	r4, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7f7 fb00 	bl	8000d34 <__aeabi_fmul>
 8009734:	4603      	mov	r3, r0
 8009736:	4619      	mov	r1, r3
 8009738:	4620      	mov	r0, r4
 800973a:	f7f7 f9f3 	bl	8000b24 <__addsf3>
 800973e:	4603      	mov	r3, r0
 8009740:	461c      	mov	r4, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7f7 faf1 	bl	8000d34 <__aeabi_fmul>
 8009752:	4603      	mov	r3, r0
 8009754:	4619      	mov	r1, r3
 8009756:	4620      	mov	r0, r4
 8009758:	f7f7 f9e2 	bl	8000b20 <__aeabi_fsub>
 800975c:	4603      	mov	r3, r0
 800975e:	461c      	mov	r4, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7f7 fae2 	bl	8000d34 <__aeabi_fmul>
 8009770:	4603      	mov	r3, r0
 8009772:	4619      	mov	r1, r3
 8009774:	4620      	mov	r0, r4
 8009776:	f7f7 f9d5 	bl	8000b24 <__addsf3>
 800977a:	4603      	mov	r3, r0
 800977c:	461c      	mov	r4, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7f7 fad3 	bl	8000d34 <__aeabi_fmul>
 800978e:	4603      	mov	r3, r0
 8009790:	4619      	mov	r1, r3
 8009792:	4620      	mov	r0, r4
 8009794:	f7f7 f9c4 	bl	8000b20 <__aeabi_fsub>
 8009798:	4603      	mov	r3, r0
 800979a:	461c      	mov	r4, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	4619      	mov	r1, r3
 80097a6:	4610      	mov	r0, r2
 80097a8:	f7f7 fac4 	bl	8000d34 <__aeabi_fmul>
 80097ac:	4603      	mov	r3, r0
 80097ae:	4619      	mov	r1, r3
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7f7 f9b7 	bl	8000b24 <__addsf3>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461c      	mov	r4, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f7f7 fab5 	bl	8000d34 <__aeabi_fmul>
 80097ca:	4603      	mov	r3, r0
 80097cc:	4619      	mov	r1, r3
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7f7 f9a6 	bl	8000b20 <__aeabi_fsub>
 80097d4:	4603      	mov	r3, r0
 80097d6:	643b      	str	r3, [r7, #64]	; 0x40
    float Kt11_att = 1 - (Qa*(Qg + S22_roll + S23_roll + S32_roll + S33_roll))/A;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7f7 f99a 	bl	8000b24 <__addsf3>
 80097f0:	4603      	mov	r3, r0
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7f7 f992 	bl	8000b24 <__addsf3>
 8009800:	4603      	mov	r3, r0
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7f7 f98a 	bl	8000b24 <__addsf3>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7f7 f982 	bl	8000b24 <__addsf3>
 8009820:	4603      	mov	r3, r0
 8009822:	4619      	mov	r1, r3
 8009824:	4620      	mov	r0, r4
 8009826:	f7f7 fa85 	bl	8000d34 <__aeabi_fmul>
 800982a:	4603      	mov	r3, r0
 800982c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800982e:	4618      	mov	r0, r3
 8009830:	f7f7 fb34 	bl	8000e9c <__aeabi_fdiv>
 8009834:	4603      	mov	r3, r0
 8009836:	4619      	mov	r1, r3
 8009838:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800983c:	f7f7 f970 	bl	8000b20 <__aeabi_fsub>
 8009840:	4603      	mov	r3, r0
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
    float Kt12_att = (Qa*(S12_roll + S13_roll))/A;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7f7 f965 	bl	8000b24 <__addsf3>
 800985a:	4603      	mov	r3, r0
 800985c:	4619      	mov	r1, r3
 800985e:	4620      	mov	r0, r4
 8009860:	f7f7 fa68 	bl	8000d34 <__aeabi_fmul>
 8009864:	4603      	mov	r3, r0
 8009866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 fb17 	bl	8000e9c <__aeabi_fdiv>
 800986e:	4603      	mov	r3, r0
 8009870:	63bb      	str	r3, [r7, #56]	; 0x38
    float Kt21_att = (Qg*S21_roll + S21_roll*S32_roll - S22_roll*S31_roll + S21_roll*S33_roll - S23_roll*S31_roll)/A;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7f7 fa58 	bl	8000d34 <__aeabi_fmul>
 8009884:	4603      	mov	r3, r0
 8009886:	461c      	mov	r4, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7f7 fa4e 	bl	8000d34 <__aeabi_fmul>
 8009898:	4603      	mov	r3, r0
 800989a:	4619      	mov	r1, r3
 800989c:	4620      	mov	r0, r4
 800989e:	f7f7 f941 	bl	8000b24 <__addsf3>
 80098a2:	4603      	mov	r3, r0
 80098a4:	461c      	mov	r4, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ae:	4619      	mov	r1, r3
 80098b0:	4610      	mov	r0, r2
 80098b2:	f7f7 fa3f 	bl	8000d34 <__aeabi_fmul>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4619      	mov	r1, r3
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7f7 f930 	bl	8000b20 <__aeabi_fsub>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461c      	mov	r4, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f7f7 fa30 	bl	8000d34 <__aeabi_fmul>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4619      	mov	r1, r3
 80098d8:	4620      	mov	r0, r4
 80098da:	f7f7 f923 	bl	8000b24 <__addsf3>
 80098de:	4603      	mov	r3, r0
 80098e0:	461c      	mov	r4, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f7f7 fa21 	bl	8000d34 <__aeabi_fmul>
 80098f2:	4603      	mov	r3, r0
 80098f4:	4619      	mov	r1, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7f7 f912 	bl	8000b20 <__aeabi_fsub>
 80098fc:	4603      	mov	r3, r0
 80098fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009900:	4618      	mov	r0, r3
 8009902:	f7f7 facb 	bl	8000e9c <__aeabi_fdiv>
 8009906:	4603      	mov	r3, r0
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
    float Kt22_att = (Qa*S22_roll + Qa*S23_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll)/A;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7f7 fa0c 	bl	8000d34 <__aeabi_fmul>
 800991c:	4603      	mov	r3, r0
 800991e:	461c      	mov	r4, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f7f7 fa01 	bl	8000d34 <__aeabi_fmul>
 8009932:	4603      	mov	r3, r0
 8009934:	4619      	mov	r1, r3
 8009936:	4620      	mov	r0, r4
 8009938:	f7f7 f8f4 	bl	8000b24 <__addsf3>
 800993c:	4603      	mov	r3, r0
 800993e:	461c      	mov	r4, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f7f7 f9f2 	bl	8000d34 <__aeabi_fmul>
 8009950:	4603      	mov	r3, r0
 8009952:	4619      	mov	r1, r3
 8009954:	4620      	mov	r0, r4
 8009956:	f7f7 f8e5 	bl	8000b24 <__addsf3>
 800995a:	4603      	mov	r3, r0
 800995c:	461c      	mov	r4, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009966:	4619      	mov	r1, r3
 8009968:	4610      	mov	r0, r2
 800996a:	f7f7 f9e3 	bl	8000d34 <__aeabi_fmul>
 800996e:	4603      	mov	r3, r0
 8009970:	4619      	mov	r1, r3
 8009972:	4620      	mov	r0, r4
 8009974:	f7f7 f8d4 	bl	8000b20 <__aeabi_fsub>
 8009978:	4603      	mov	r3, r0
 800997a:	461c      	mov	r4, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7f7 f9d4 	bl	8000d34 <__aeabi_fmul>
 800998c:	4603      	mov	r3, r0
 800998e:	4619      	mov	r1, r3
 8009990:	4620      	mov	r0, r4
 8009992:	f7f7 f8c7 	bl	8000b24 <__addsf3>
 8009996:	4603      	mov	r3, r0
 8009998:	461c      	mov	r4, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f7f7 f9c5 	bl	8000d34 <__aeabi_fmul>
 80099aa:	4603      	mov	r3, r0
 80099ac:	4619      	mov	r1, r3
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7f7 f8b6 	bl	8000b20 <__aeabi_fsub>
 80099b4:	4603      	mov	r3, r0
 80099b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7f7 fa6f 	bl	8000e9c <__aeabi_fdiv>
 80099be:	4603      	mov	r3, r0
 80099c0:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt31_att = (Qg*S31_roll - S21_roll*S32_roll + S22_roll*S31_roll - S21_roll*S33_roll + S23_roll*S31_roll)/A;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7f7 f9b0 	bl	8000d34 <__aeabi_fmul>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461c      	mov	r4, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f7f7 f9a6 	bl	8000d34 <__aeabi_fmul>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4619      	mov	r1, r3
 80099ec:	4620      	mov	r0, r4
 80099ee:	f7f7 f897 	bl	8000b20 <__aeabi_fsub>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461c      	mov	r4, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f7f7 f997 	bl	8000d34 <__aeabi_fmul>
 8009a06:	4603      	mov	r3, r0
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7f7 f88a 	bl	8000b24 <__addsf3>
 8009a10:	4603      	mov	r3, r0
 8009a12:	461c      	mov	r4, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7f7 f988 	bl	8000d34 <__aeabi_fmul>
 8009a24:	4603      	mov	r3, r0
 8009a26:	4619      	mov	r1, r3
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7f7 f879 	bl	8000b20 <__aeabi_fsub>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461c      	mov	r4, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7f7 f979 	bl	8000d34 <__aeabi_fmul>
 8009a42:	4603      	mov	r3, r0
 8009a44:	4619      	mov	r1, r3
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7f7 f86c 	bl	8000b24 <__addsf3>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f7 fa23 	bl	8000e9c <__aeabi_fdiv>
 8009a56:	4603      	mov	r3, r0
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt32_att = (Qa*S32_roll + Qa*S33_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll)/A;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7f7 f964 	bl	8000d34 <__aeabi_fmul>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461c      	mov	r4, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7f7 f959 	bl	8000d34 <__aeabi_fmul>
 8009a82:	4603      	mov	r3, r0
 8009a84:	4619      	mov	r1, r3
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7f7 f84c 	bl	8000b24 <__addsf3>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461c      	mov	r4, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7f7 f94a 	bl	8000d34 <__aeabi_fmul>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7f7 f83d 	bl	8000b24 <__addsf3>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	461c      	mov	r4, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7f7 f93b 	bl	8000d34 <__aeabi_fmul>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7f7 f82c 	bl	8000b20 <__aeabi_fsub>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461c      	mov	r4, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7f7 f92c 	bl	8000d34 <__aeabi_fmul>
 8009adc:	4603      	mov	r3, r0
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7f7 f81f 	bl	8000b24 <__addsf3>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	461c      	mov	r4, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7f7 f91d 	bl	8000d34 <__aeabi_fmul>
 8009afa:	4603      	mov	r3, r0
 8009afc:	4619      	mov	r1, r3
 8009afe:	4620      	mov	r0, r4
 8009b00:	f7f7 f80e 	bl	8000b20 <__aeabi_fsub>
 8009b04:	4603      	mov	r3, r0
 8009b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f7 f9c7 	bl	8000e9c <__aeabi_fdiv>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28

    roll_ekf = (roll_ekf) + Kt11_att*((roll_acc) - (roll_ekf)) - Kt12_att*((roll_bias) - (gyroX) + (roll_rate));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7f6 fffa 	bl	8000b20 <__aeabi_fsub>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f7 f8ff 	bl	8000d34 <__aeabi_fmul>
 8009b36:	4603      	mov	r3, r0
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7f6 fff2 	bl	8000b24 <__addsf3>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461c      	mov	r4, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f6 ffe8 	bl	8000b20 <__aeabi_fsub>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f7f6 ffe2 	bl	8000b24 <__addsf3>
 8009b60:	4603      	mov	r3, r0
 8009b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7f7 f8e5 	bl	8000d34 <__aeabi_fmul>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7f6 ffd6 	bl	8000b20 <__aeabi_fsub>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c


    roll_bias = (roll_bias) + Kt21_att*((roll_acc) - (roll_ekf)) - Kt22_att*((roll_bias) - (gyroX) + (roll_rate));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69dc      	ldr	r4, [r3, #28]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f7f6 ffc5 	bl	8000b20 <__aeabi_fsub>
 8009b96:	4603      	mov	r3, r0
 8009b98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f7 f8ca 	bl	8000d34 <__aeabi_fmul>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7f6 ffbd 	bl	8000b24 <__addsf3>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461c      	mov	r4, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7f6 ffb3 	bl	8000b20 <__aeabi_fsub>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7f6 ffad 	bl	8000b24 <__addsf3>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f7 f8b0 	bl	8000d34 <__aeabi_fmul>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7f6 ffa1 	bl	8000b20 <__aeabi_fsub>
 8009bde:	4603      	mov	r3, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	61da      	str	r2, [r3, #28]


    roll_rate = (roll_rate) + Kt31_att*((roll_acc) - (roll_ekf)) - Kt32_att*((roll_bias) - (gyroX) + (roll_rate));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68dc      	ldr	r4, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7f6 ff91 	bl	8000b20 <__aeabi_fsub>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f7 f896 	bl	8000d34 <__aeabi_fmul>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7f6 ff89 	bl	8000b24 <__addsf3>
 8009c12:	4603      	mov	r3, r0
 8009c14:	461c      	mov	r4, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f6 ff7f 	bl	8000b20 <__aeabi_fsub>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7f6 ff79 	bl	8000b24 <__addsf3>
 8009c32:	4603      	mov	r3, r0
 8009c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f7 f87c 	bl	8000d34 <__aeabi_fmul>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7f6 ff6d 	bl	8000b20 <__aeabi_fsub>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60da      	str	r2, [r3, #12]


    S11_roll = - S11_roll*(Kt11_att - 1) - Kt12_att*S21_roll - Kt12_att*S31_roll;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009c56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009c5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009c5c:	f7f6 ff60 	bl	8000b20 <__aeabi_fsub>
 8009c60:	4603      	mov	r3, r0
 8009c62:	4619      	mov	r1, r3
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7f7 f865 	bl	8000d34 <__aeabi_fmul>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461c      	mov	r4, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7f7 f85d 	bl	8000d34 <__aeabi_fmul>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7f6 ff4e 	bl	8000b20 <__aeabi_fsub>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461c      	mov	r4, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f7 f850 	bl	8000d34 <__aeabi_fmul>
 8009c94:	4603      	mov	r3, r0
 8009c96:	4619      	mov	r1, r3
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7f6 ff41 	bl	8000b20 <__aeabi_fsub>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	655a      	str	r2, [r3, #84]	; 0x54


    S12_roll = - S12_roll*(Kt11_att - 1) - Kt12_att*S22_roll - Kt12_att*S32_roll;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009caa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009cae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009cb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009cb4:	f7f6 ff34 	bl	8000b20 <__aeabi_fsub>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7f7 f839 	bl	8000d34 <__aeabi_fmul>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	461c      	mov	r4, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f7 f831 	bl	8000d34 <__aeabi_fmul>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7f6 ff22 	bl	8000b20 <__aeabi_fsub>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	461c      	mov	r4, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f7 f824 	bl	8000d34 <__aeabi_fmul>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7f6 ff15 	bl	8000b20 <__aeabi_fsub>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	659a      	str	r2, [r3, #88]	; 0x58


    S13_roll = - S13_roll*(Kt11_att - 1) - Kt12_att*S23_roll - Kt12_att*S33_roll;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d02:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009d06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d0c:	f7f6 ff08 	bl	8000b20 <__aeabi_fsub>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4619      	mov	r1, r3
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7f7 f80d 	bl	8000d34 <__aeabi_fmul>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7f7 f805 	bl	8000d34 <__aeabi_fmul>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7f6 fef6 	bl	8000b20 <__aeabi_fsub>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461c      	mov	r4, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f6 fff8 	bl	8000d34 <__aeabi_fmul>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4619      	mov	r1, r3
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7f6 fee9 	bl	8000b20 <__aeabi_fsub>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	665a      	str	r2, [r3, #100]	; 0x64


    S21_roll = - S21_roll*(Kt22_att - 1) - Kt21_att*S11_roll - Kt22_att*S31_roll;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d5a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009d5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d64:	f7f6 fedc 	bl	8000b20 <__aeabi_fsub>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7f6 ffe1 	bl	8000d34 <__aeabi_fmul>
 8009d72:	4603      	mov	r3, r0
 8009d74:	461c      	mov	r4, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f6 ffd9 	bl	8000d34 <__aeabi_fmul>
 8009d82:	4603      	mov	r3, r0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7f6 feca 	bl	8000b20 <__aeabi_fsub>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461c      	mov	r4, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 ffcc 	bl	8000d34 <__aeabi_fmul>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7f6 febd 	bl	8000b20 <__aeabi_fsub>
 8009da6:	4603      	mov	r3, r0
 8009da8:	461a      	mov	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	65da      	str	r2, [r3, #92]	; 0x5c


    S22_roll = - S22_roll*(Kt22_att - 1) - Kt21_att*S12_roll - Kt22_att*S32_roll;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009db2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009db6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dbc:	f7f6 feb0 	bl	8000b20 <__aeabi_fsub>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7f6 ffb5 	bl	8000d34 <__aeabi_fmul>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	461c      	mov	r4, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f6 ffad 	bl	8000d34 <__aeabi_fmul>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7f6 fe9e 	bl	8000b20 <__aeabi_fsub>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461c      	mov	r4, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f6 ffa0 	bl	8000d34 <__aeabi_fmul>
 8009df4:	4603      	mov	r3, r0
 8009df6:	4619      	mov	r1, r3
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7f6 fe91 	bl	8000b20 <__aeabi_fsub>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	461a      	mov	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	661a      	str	r2, [r3, #96]	; 0x60


    S23_roll = - S23_roll*(Kt22_att - 1) - Kt21_att*S13_roll - Kt22_att*S33_roll;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e0a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009e0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e14:	f7f6 fe84 	bl	8000b20 <__aeabi_fsub>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7f6 ff89 	bl	8000d34 <__aeabi_fmul>
 8009e22:	4603      	mov	r3, r0
 8009e24:	461c      	mov	r4, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7f6 ff81 	bl	8000d34 <__aeabi_fmul>
 8009e32:	4603      	mov	r3, r0
 8009e34:	4619      	mov	r1, r3
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7f6 fe72 	bl	8000b20 <__aeabi_fsub>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	461c      	mov	r4, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f6 ff74 	bl	8000d34 <__aeabi_fmul>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7f6 fe65 	bl	8000b20 <__aeabi_fsub>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	669a      	str	r2, [r3, #104]	; 0x68


    S31_roll = - S31_roll*(Kt32_att - 1) - Kt31_att*S11_roll - Kt32_att*S21_roll;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e62:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009e66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6c:	f7f6 fe58 	bl	8000b20 <__aeabi_fsub>
 8009e70:	4603      	mov	r3, r0
 8009e72:	4619      	mov	r1, r3
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7f6 ff5d 	bl	8000d34 <__aeabi_fmul>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	461c      	mov	r4, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 ff55 	bl	8000d34 <__aeabi_fmul>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7f6 fe46 	bl	8000b20 <__aeabi_fsub>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461c      	mov	r4, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7f6 ff48 	bl	8000d34 <__aeabi_fmul>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7f6 fe39 	bl	8000b20 <__aeabi_fsub>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	66da      	str	r2, [r3, #108]	; 0x6c


    S32_roll = - S32_roll*(Kt32_att - 1) - Kt31_att*S12_roll - Kt32_att*S22_roll;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eba:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009ebe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec4:	f7f6 fe2c 	bl	8000b20 <__aeabi_fsub>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7f6 ff31 	bl	8000d34 <__aeabi_fmul>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461c      	mov	r4, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f6 ff29 	bl	8000d34 <__aeabi_fmul>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7f6 fe1a 	bl	8000b20 <__aeabi_fsub>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461c      	mov	r4, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f6 ff1c 	bl	8000d34 <__aeabi_fmul>
 8009efc:	4603      	mov	r3, r0
 8009efe:	4619      	mov	r1, r3
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7f6 fe0d 	bl	8000b20 <__aeabi_fsub>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	671a      	str	r2, [r3, #112]	; 0x70


    S33_roll = - S33_roll*(Kt32_att - 1) - Kt31_att*S13_roll - Kt32_att*S23_roll;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f12:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8009f16:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f1c:	f7f6 fe00 	bl	8000b20 <__aeabi_fsub>
 8009f20:	4603      	mov	r3, r0
 8009f22:	4619      	mov	r1, r3
 8009f24:	4620      	mov	r0, r4
 8009f26:	f7f6 ff05 	bl	8000d34 <__aeabi_fmul>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7f6 fefd 	bl	8000d34 <__aeabi_fmul>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7f6 fdee 	bl	8000b20 <__aeabi_fsub>
 8009f44:	4603      	mov	r3, r0
 8009f46:	461c      	mov	r4, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f6 fef0 	bl	8000d34 <__aeabi_fmul>
 8009f54:	4603      	mov	r3, r0
 8009f56:	4619      	mov	r1, r3
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f7f6 fde1 	bl	8000b20 <__aeabi_fsub>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	675a      	str	r2, [r3, #116]	; 0x74

    //============================

    //ANGLE PREDICTION
    pitch_ekf = (pitch_ekf) + st*(pitch_rate);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f6 fa53 	bl	8000418 <__aeabi_f2d>
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f6 fa49 	bl	8000418 <__aeabi_f2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 fa9b 	bl	80004c8 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 f8df 	bl	800015c <__adddf3>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f7f6 fd67 	bl	8000a78 <__aeabi_d2f>
 8009faa:	4602      	mov	r2, r0
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    S11_pitch = S11_pitch + sa + S31_pitch*st + (st*st*(S13_pitch + S33_pitch*st))/st;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7f6 fdb1 	bl	8000b24 <__addsf3>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f6 fa27 	bl	8000418 <__aeabi_f2d>
 8009fca:	4604      	mov	r4, r0
 8009fcc:	460d      	mov	r5, r1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f6 fa20 	bl	8000418 <__aeabi_f2d>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009fde:	f7f6 fa73 	bl	80004c8 <__aeabi_dmul>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f8b7 	bl	800015c <__adddf3>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4690      	mov	r8, r2
 8009ff4:	4699      	mov	r9, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a002:	f7f6 fa61 	bl	80004c8 <__aeabi_dmul>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4692      	mov	sl, r2
 800a00c:	469b      	mov	fp, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a012:	4618      	mov	r0, r3
 800a014:	f7f6 fa00 	bl	8000418 <__aeabi_f2d>
 800a018:	4604      	mov	r4, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a020:	4618      	mov	r0, r3
 800a022:	f7f6 f9f9 	bl	8000418 <__aeabi_f2d>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a02c:	f7f6 fa4c 	bl	80004c8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 f890 	bl	800015c <__adddf3>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	f7f6 fa40 	bl	80004c8 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4610      	mov	r0, r2
 800a04e:	4619      	mov	r1, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a056:	f7f6 fb61 	bl	800071c <__aeabi_ddiv>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 f87b 	bl	800015c <__adddf3>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4610      	mov	r0, r2
 800a06c:	4619      	mov	r1, r3
 800a06e:	f7f6 fd03 	bl	8000a78 <__aeabi_d2f>
 800a072:	4602      	mov	r2, r0
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24
    S12_pitch = S12_pitch + S32_pitch*st;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7f6 f9cb 	bl	8000418 <__aeabi_f2d>
 800a082:	4604      	mov	r4, r0
 800a084:	460d      	mov	r5, r1
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f6 f9c4 	bl	8000418 <__aeabi_f2d>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a096:	f7f6 fa17 	bl	80004c8 <__aeabi_dmul>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 f85b 	bl	800015c <__adddf3>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f7f6 fce3 	bl	8000a78 <__aeabi_d2f>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	629a      	str	r2, [r3, #40]	; 0x28
    S13_pitch = S13_pitch + S33_pitch*st;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7f6 f9ab 	bl	8000418 <__aeabi_f2d>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7f6 f9a4 	bl	8000418 <__aeabi_f2d>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a0d6:	f7f6 f9f7 	bl	80004c8 <__aeabi_dmul>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 f83b 	bl	800015c <__adddf3>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f7f6 fcc3 	bl	8000a78 <__aeabi_d2f>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	635a      	str	r2, [r3, #52]	; 0x34

    S21_pitch = S21_pitch + S23_pitch*(st);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f6 f98b 	bl	8000418 <__aeabi_f2d>
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f6 f984 	bl	8000418 <__aeabi_f2d>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a116:	f7f6 f9d7 	bl	80004c8 <__aeabi_dmul>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 f81b 	bl	800015c <__adddf3>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4610      	mov	r0, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	f7f6 fca3 	bl	8000a78 <__aeabi_d2f>
 800a132:	4602      	mov	r2, r0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	62da      	str	r2, [r3, #44]	; 0x2c
    S22_pitch = S22_pitch + sb;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7f6 fcee 	bl	8000b24 <__addsf3>
 800a148:	4603      	mov	r3, r0
 800a14a:	461a      	mov	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	631a      	str	r2, [r3, #48]	; 0x30
    //S23_pitch = S23_pitch;

    S31_pitch = S31_pitch + S33_pitch*(st);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a154:	4618      	mov	r0, r3
 800a156:	f7f6 f95f 	bl	8000418 <__aeabi_f2d>
 800a15a:	4604      	mov	r4, r0
 800a15c:	460d      	mov	r5, r1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a162:	4618      	mov	r0, r3
 800a164:	f7f6 f958 	bl	8000418 <__aeabi_f2d>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800a16e:	f7f6 f9ab 	bl	80004c8 <__aeabi_dmul>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f5 ffef 	bl	800015c <__adddf3>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4610      	mov	r0, r2
 800a184:	4619      	mov	r1, r3
 800a186:	f7f6 fc77 	bl	8000a78 <__aeabi_d2f>
 800a18a:	4602      	mov	r2, r0
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	63da      	str	r2, [r3, #60]	; 0x3c
    //S32_pitch = S32_pitch;
    S33_pitch = S33_pitch + sr;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7f6 fcc2 	bl	8000b24 <__addsf3>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	645a      	str	r2, [r3, #68]	; 0x44

    //ANGLE CORRECTION
    A = (Qa*Qg + Qa*S22_pitch + Qa*S23_pitch + Qa*S32_pitch + Qa*S33_pitch + Qg*S11_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7f6 fdbc 	bl	8000d34 <__aeabi_fmul>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461c      	mov	r4, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f7f6 fdb1 	bl	8000d34 <__aeabi_fmul>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7f6 fca4 	bl	8000b24 <__addsf3>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	461c      	mov	r4, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7f6 fda1 	bl	8000d34 <__aeabi_fmul>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7f6 fc94 	bl	8000b24 <__addsf3>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461c      	mov	r4, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7f6 fd91 	bl	8000d34 <__aeabi_fmul>
 800a212:	4603      	mov	r3, r0
 800a214:	4619      	mov	r1, r3
 800a216:	4620      	mov	r0, r4
 800a218:	f7f6 fc84 	bl	8000b24 <__addsf3>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461c      	mov	r4, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f7f6 fd81 	bl	8000d34 <__aeabi_fmul>
 800a232:	4603      	mov	r3, r0
 800a234:	4619      	mov	r1, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f7f6 fc74 	bl	8000b24 <__addsf3>
 800a23c:	4603      	mov	r3, r0
 800a23e:	461c      	mov	r4, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f7f6 fd71 	bl	8000d34 <__aeabi_fmul>
 800a252:	4603      	mov	r3, r0
 800a254:	4619      	mov	r1, r3
 800a256:	4620      	mov	r0, r4
 800a258:	f7f6 fc64 	bl	8000b24 <__addsf3>
 800a25c:	4603      	mov	r3, r0
 800a25e:	461c      	mov	r4, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a268:	4619      	mov	r1, r3
 800a26a:	4610      	mov	r0, r2
 800a26c:	f7f6 fd62 	bl	8000d34 <__aeabi_fmul>
 800a270:	4603      	mov	r3, r0
 800a272:	4619      	mov	r1, r3
 800a274:	4620      	mov	r0, r4
 800a276:	f7f6 fc55 	bl	8000b24 <__addsf3>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461c      	mov	r4, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7f6 fd53 	bl	8000d34 <__aeabi_fmul>
 800a28e:	4603      	mov	r3, r0
 800a290:	4619      	mov	r1, r3
 800a292:	4620      	mov	r0, r4
 800a294:	f7f6 fc44 	bl	8000b20 <__aeabi_fsub>
 800a298:	4603      	mov	r3, r0
 800a29a:	461c      	mov	r4, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	f7f6 fd44 	bl	8000d34 <__aeabi_fmul>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7f6 fc37 	bl	8000b24 <__addsf3>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	461c      	mov	r4, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	f7f6 fd35 	bl	8000d34 <__aeabi_fmul>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f7f6 fc26 	bl	8000b20 <__aeabi_fsub>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461c      	mov	r4, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f7f6 fd26 	bl	8000d34 <__aeabi_fmul>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f7f6 fc19 	bl	8000b24 <__addsf3>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461c      	mov	r4, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f7f6 fd17 	bl	8000d34 <__aeabi_fmul>
 800a306:	4603      	mov	r3, r0
 800a308:	4619      	mov	r1, r3
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7f6 fc08 	bl	8000b20 <__aeabi_fsub>
 800a310:	4603      	mov	r3, r0
 800a312:	461c      	mov	r4, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7f6 fd08 	bl	8000d34 <__aeabi_fmul>
 800a324:	4603      	mov	r3, r0
 800a326:	4619      	mov	r1, r3
 800a328:	4620      	mov	r0, r4
 800a32a:	f7f6 fbfb 	bl	8000b24 <__addsf3>
 800a32e:	4603      	mov	r3, r0
 800a330:	461c      	mov	r4, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f7f6 fcf9 	bl	8000d34 <__aeabi_fmul>
 800a342:	4603      	mov	r3, r0
 800a344:	4619      	mov	r1, r3
 800a346:	4620      	mov	r0, r4
 800a348:	f7f6 fbea 	bl	8000b20 <__aeabi_fsub>
 800a34c:	4603      	mov	r3, r0
 800a34e:	643b      	str	r3, [r7, #64]	; 0x40
     Kt11_att = 1 - (Qa*(Qg + S22_pitch + S23_pitch + S32_pitch + S33_pitch))/A;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7f6 fbde 	bl	8000b24 <__addsf3>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7f6 fbd6 	bl	8000b24 <__addsf3>
 800a378:	4603      	mov	r3, r0
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7f6 fbce 	bl	8000b24 <__addsf3>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7f6 fbc6 	bl	8000b24 <__addsf3>
 800a398:	4603      	mov	r3, r0
 800a39a:	4619      	mov	r1, r3
 800a39c:	4620      	mov	r0, r4
 800a39e:	f7f6 fcc9 	bl	8000d34 <__aeabi_fmul>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f6 fd78 	bl	8000e9c <__aeabi_fdiv>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a3b4:	f7f6 fbb4 	bl	8000b20 <__aeabi_fsub>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
     Kt12_att = (Qa*(S12_pitch + S13_pitch))/A;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	f7f6 fba9 	bl	8000b24 <__addsf3>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7f6 fcac 	bl	8000d34 <__aeabi_fmul>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7f6 fd5b 	bl	8000e9c <__aeabi_fdiv>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	63bb      	str	r3, [r7, #56]	; 0x38
     Kt21_att = (Qg*S21_pitch + S21_pitch*S32_pitch - S22_pitch*S31_pitch + S21_pitch*S33_pitch - S23_pitch*S31_pitch)/A;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7f6 fc9c 	bl	8000d34 <__aeabi_fmul>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461c      	mov	r4, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	4619      	mov	r1, r3
 800a40a:	4610      	mov	r0, r2
 800a40c:	f7f6 fc92 	bl	8000d34 <__aeabi_fmul>
 800a410:	4603      	mov	r3, r0
 800a412:	4619      	mov	r1, r3
 800a414:	4620      	mov	r0, r4
 800a416:	f7f6 fb85 	bl	8000b24 <__addsf3>
 800a41a:	4603      	mov	r3, r0
 800a41c:	461c      	mov	r4, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f7f6 fc83 	bl	8000d34 <__aeabi_fmul>
 800a42e:	4603      	mov	r3, r0
 800a430:	4619      	mov	r1, r3
 800a432:	4620      	mov	r0, r4
 800a434:	f7f6 fb74 	bl	8000b20 <__aeabi_fsub>
 800a438:	4603      	mov	r3, r0
 800a43a:	461c      	mov	r4, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f7f6 fc74 	bl	8000d34 <__aeabi_fmul>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4619      	mov	r1, r3
 800a450:	4620      	mov	r0, r4
 800a452:	f7f6 fb67 	bl	8000b24 <__addsf3>
 800a456:	4603      	mov	r3, r0
 800a458:	461c      	mov	r4, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	4619      	mov	r1, r3
 800a464:	4610      	mov	r0, r2
 800a466:	f7f6 fc65 	bl	8000d34 <__aeabi_fmul>
 800a46a:	4603      	mov	r3, r0
 800a46c:	4619      	mov	r1, r3
 800a46e:	4620      	mov	r0, r4
 800a470:	f7f6 fb56 	bl	8000b20 <__aeabi_fsub>
 800a474:	4603      	mov	r3, r0
 800a476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a478:	4618      	mov	r0, r3
 800a47a:	f7f6 fd0f 	bl	8000e9c <__aeabi_fdiv>
 800a47e:	4603      	mov	r3, r0
 800a480:	637b      	str	r3, [r7, #52]	; 0x34
     Kt22_att = (Qa*S22_pitch + Qa*S23_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch)/A;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f7f6 fc50 	bl	8000d34 <__aeabi_fmul>
 800a494:	4603      	mov	r3, r0
 800a496:	461c      	mov	r4, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7f6 fc45 	bl	8000d34 <__aeabi_fmul>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7f6 fb38 	bl	8000b24 <__addsf3>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f7f6 fc36 	bl	8000d34 <__aeabi_fmul>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7f6 fb29 	bl	8000b24 <__addsf3>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461c      	mov	r4, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f7f6 fc27 	bl	8000d34 <__aeabi_fmul>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7f6 fb18 	bl	8000b20 <__aeabi_fsub>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	461c      	mov	r4, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7f6 fc18 	bl	8000d34 <__aeabi_fmul>
 800a504:	4603      	mov	r3, r0
 800a506:	4619      	mov	r1, r3
 800a508:	4620      	mov	r0, r4
 800a50a:	f7f6 fb0b 	bl	8000b24 <__addsf3>
 800a50e:	4603      	mov	r3, r0
 800a510:	461c      	mov	r4, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7f6 fc09 	bl	8000d34 <__aeabi_fmul>
 800a522:	4603      	mov	r3, r0
 800a524:	4619      	mov	r1, r3
 800a526:	4620      	mov	r0, r4
 800a528:	f7f6 fafa 	bl	8000b20 <__aeabi_fsub>
 800a52c:	4603      	mov	r3, r0
 800a52e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a530:	4618      	mov	r0, r3
 800a532:	f7f6 fcb3 	bl	8000e9c <__aeabi_fdiv>
 800a536:	4603      	mov	r3, r0
 800a538:	633b      	str	r3, [r7, #48]	; 0x30
     Kt31_att = (Qg*S31_pitch - S21_pitch*S32_pitch + S22_pitch*S31_pitch - S21_pitch*S33_pitch + S23_pitch*S31_pitch)/A;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7f6 fbf4 	bl	8000d34 <__aeabi_fmul>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461c      	mov	r4, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7f6 fbea 	bl	8000d34 <__aeabi_fmul>
 800a560:	4603      	mov	r3, r0
 800a562:	4619      	mov	r1, r3
 800a564:	4620      	mov	r0, r4
 800a566:	f7f6 fadb 	bl	8000b20 <__aeabi_fsub>
 800a56a:	4603      	mov	r3, r0
 800a56c:	461c      	mov	r4, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f7f6 fbdb 	bl	8000d34 <__aeabi_fmul>
 800a57e:	4603      	mov	r3, r0
 800a580:	4619      	mov	r1, r3
 800a582:	4620      	mov	r0, r4
 800a584:	f7f6 face 	bl	8000b24 <__addsf3>
 800a588:	4603      	mov	r3, r0
 800a58a:	461c      	mov	r4, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7f6 fbcc 	bl	8000d34 <__aeabi_fmul>
 800a59c:	4603      	mov	r3, r0
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f7f6 fabd 	bl	8000b20 <__aeabi_fsub>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461c      	mov	r4, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7f6 fbbd 	bl	8000d34 <__aeabi_fmul>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7f6 fab0 	bl	8000b24 <__addsf3>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f6 fc67 	bl	8000e9c <__aeabi_fdiv>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
     Kt32_att = (Qa*S32_pitch + Qa*S33_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch)/A;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f7f6 fba8 	bl	8000d34 <__aeabi_fmul>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461c      	mov	r4, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7f6 fb9d 	bl	8000d34 <__aeabi_fmul>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7f6 fa90 	bl	8000b24 <__addsf3>
 800a604:	4603      	mov	r3, r0
 800a606:	461c      	mov	r4, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f7f6 fb8e 	bl	8000d34 <__aeabi_fmul>
 800a618:	4603      	mov	r3, r0
 800a61a:	4619      	mov	r1, r3
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7f6 fa81 	bl	8000b24 <__addsf3>
 800a622:	4603      	mov	r3, r0
 800a624:	461c      	mov	r4, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f7f6 fb7f 	bl	8000d34 <__aeabi_fmul>
 800a636:	4603      	mov	r3, r0
 800a638:	4619      	mov	r1, r3
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7f6 fa70 	bl	8000b20 <__aeabi_fsub>
 800a640:	4603      	mov	r3, r0
 800a642:	461c      	mov	r4, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	4619      	mov	r1, r3
 800a64e:	4610      	mov	r0, r2
 800a650:	f7f6 fb70 	bl	8000d34 <__aeabi_fmul>
 800a654:	4603      	mov	r3, r0
 800a656:	4619      	mov	r1, r3
 800a658:	4620      	mov	r0, r4
 800a65a:	f7f6 fa63 	bl	8000b24 <__addsf3>
 800a65e:	4603      	mov	r3, r0
 800a660:	461c      	mov	r4, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7f6 fb61 	bl	8000d34 <__aeabi_fmul>
 800a672:	4603      	mov	r3, r0
 800a674:	4619      	mov	r1, r3
 800a676:	4620      	mov	r0, r4
 800a678:	f7f6 fa52 	bl	8000b20 <__aeabi_fsub>
 800a67c:	4603      	mov	r3, r0
 800a67e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a680:	4618      	mov	r0, r3
 800a682:	f7f6 fc0b 	bl	8000e9c <__aeabi_fdiv>
 800a686:	4603      	mov	r3, r0
 800a688:	62bb      	str	r3, [r7, #40]	; 0x28

    pitch_ekf = (pitch_ekf) + Kt11_att*((pitch_acc) - (pitch_ekf)) - Kt12_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f7f6 fa3e 	bl	8000b20 <__aeabi_fsub>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f6 fb43 	bl	8000d34 <__aeabi_fmul>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f7f6 fa36 	bl	8000b24 <__addsf3>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461c      	mov	r4, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f6 fa2c 	bl	8000b20 <__aeabi_fsub>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f7f6 fa26 	bl	8000b24 <__addsf3>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7f6 fb29 	bl	8000d34 <__aeabi_fmul>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7f6 fa1a 	bl	8000b20 <__aeabi_fsub>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    //pitch_ekf = 0;
    pitch_bias = (pitch_bias) + Kt21_att*((pitch_acc) - (pitch_ekf)) - Kt22_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699c      	ldr	r4, [r3, #24]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a706:	4619      	mov	r1, r3
 800a708:	4610      	mov	r0, r2
 800a70a:	f7f6 fa09 	bl	8000b20 <__aeabi_fsub>
 800a70e:	4603      	mov	r3, r0
 800a710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a712:	4618      	mov	r0, r3
 800a714:	f7f6 fb0e 	bl	8000d34 <__aeabi_fmul>
 800a718:	4603      	mov	r3, r0
 800a71a:	4619      	mov	r1, r3
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7f6 fa01 	bl	8000b24 <__addsf3>
 800a722:	4603      	mov	r3, r0
 800a724:	461c      	mov	r4, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f6 f9f7 	bl	8000b20 <__aeabi_fsub>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	4619      	mov	r1, r3
 800a73c:	4610      	mov	r0, r2
 800a73e:	f7f6 f9f1 	bl	8000b24 <__addsf3>
 800a742:	4603      	mov	r3, r0
 800a744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a746:	4618      	mov	r0, r3
 800a748:	f7f6 faf4 	bl	8000d34 <__aeabi_fmul>
 800a74c:	4603      	mov	r3, r0
 800a74e:	4619      	mov	r1, r3
 800a750:	4620      	mov	r0, r4
 800a752:	f7f6 f9e5 	bl	8000b20 <__aeabi_fsub>
 800a756:	4603      	mov	r3, r0
 800a758:	461a      	mov	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	619a      	str	r2, [r3, #24]
    //pitch_bias = 0;

    pitch_rate = (pitch_rate) + Kt31_att*((pitch_acc) - (pitch_ekf)) - Kt32_att*((pitch_bias) - (gyroY) + (pitch_rate));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691c      	ldr	r4, [r3, #16]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7f6 f9d5 	bl	8000b20 <__aeabi_fsub>
 800a776:	4603      	mov	r3, r0
 800a778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f6 fada 	bl	8000d34 <__aeabi_fmul>
 800a780:	4603      	mov	r3, r0
 800a782:	4619      	mov	r1, r3
 800a784:	4620      	mov	r0, r4
 800a786:	f7f6 f9cd 	bl	8000b24 <__addsf3>
 800a78a:	4603      	mov	r3, r0
 800a78c:	461c      	mov	r4, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a794:	4618      	mov	r0, r3
 800a796:	f7f6 f9c3 	bl	8000b20 <__aeabi_fsub>
 800a79a:	4603      	mov	r3, r0
 800a79c:	461a      	mov	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f7f6 f9bd 	bl	8000b24 <__addsf3>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f6 fac0 	bl	8000d34 <__aeabi_fmul>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7f6 f9b1 	bl	8000b20 <__aeabi_fsub>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	611a      	str	r2, [r3, #16]


    S11_pitch = - S11_pitch*(Kt11_att - 1) - Kt12_att*S21_pitch - Kt12_att*S31_pitch;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a7ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a7d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7d4:	f7f6 f9a4 	bl	8000b20 <__aeabi_fsub>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7f6 faa9 	bl	8000d34 <__aeabi_fmul>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461c      	mov	r4, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f6 faa1 	bl	8000d34 <__aeabi_fmul>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f7f6 f992 	bl	8000b20 <__aeabi_fsub>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	461c      	mov	r4, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a806:	4618      	mov	r0, r3
 800a808:	f7f6 fa94 	bl	8000d34 <__aeabi_fmul>
 800a80c:	4603      	mov	r3, r0
 800a80e:	4619      	mov	r1, r3
 800a810:	4620      	mov	r0, r4
 800a812:	f7f6 f985 	bl	8000b20 <__aeabi_fsub>
 800a816:	4603      	mov	r3, r0
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	625a      	str	r2, [r3, #36]	; 0x24


    S12_pitch = - S12_pitch*(Kt11_att - 1) - Kt12_att*S22_pitch - Kt12_att*S32_pitch;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a826:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a82a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a82c:	f7f6 f978 	bl	8000b20 <__aeabi_fsub>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	4620      	mov	r0, r4
 800a836:	f7f6 fa7d 	bl	8000d34 <__aeabi_fmul>
 800a83a:	4603      	mov	r3, r0
 800a83c:	461c      	mov	r4, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a844:	4618      	mov	r0, r3
 800a846:	f7f6 fa75 	bl	8000d34 <__aeabi_fmul>
 800a84a:	4603      	mov	r3, r0
 800a84c:	4619      	mov	r1, r3
 800a84e:	4620      	mov	r0, r4
 800a850:	f7f6 f966 	bl	8000b20 <__aeabi_fsub>
 800a854:	4603      	mov	r3, r0
 800a856:	461c      	mov	r4, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f6 fa68 	bl	8000d34 <__aeabi_fmul>
 800a864:	4603      	mov	r3, r0
 800a866:	4619      	mov	r1, r3
 800a868:	4620      	mov	r0, r4
 800a86a:	f7f6 f959 	bl	8000b20 <__aeabi_fsub>
 800a86e:	4603      	mov	r3, r0
 800a870:	461a      	mov	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	629a      	str	r2, [r3, #40]	; 0x28


    S13_pitch = - S13_pitch*(Kt11_att - 1) - Kt12_att*S23_pitch - Kt12_att*S33_pitch;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a87e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a882:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a884:	f7f6 f94c 	bl	8000b20 <__aeabi_fsub>
 800a888:	4603      	mov	r3, r0
 800a88a:	4619      	mov	r1, r3
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7f6 fa51 	bl	8000d34 <__aeabi_fmul>
 800a892:	4603      	mov	r3, r0
 800a894:	461c      	mov	r4, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f6 fa49 	bl	8000d34 <__aeabi_fmul>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7f6 f93a 	bl	8000b20 <__aeabi_fsub>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	461c      	mov	r4, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7f6 fa3c 	bl	8000d34 <__aeabi_fmul>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f7f6 f92d 	bl	8000b20 <__aeabi_fsub>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	635a      	str	r2, [r3, #52]	; 0x34


    S21_pitch = - S21_pitch*(Kt22_att - 1) - Kt21_att*S11_pitch - Kt22_att*S31_pitch;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a8d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8dc:	f7f6 f920 	bl	8000b20 <__aeabi_fsub>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f7f6 fa25 	bl	8000d34 <__aeabi_fmul>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461c      	mov	r4, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7f6 fa1d 	bl	8000d34 <__aeabi_fmul>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7f6 f90e 	bl	8000b20 <__aeabi_fsub>
 800a904:	4603      	mov	r3, r0
 800a906:	461c      	mov	r4, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f6 fa10 	bl	8000d34 <__aeabi_fmul>
 800a914:	4603      	mov	r3, r0
 800a916:	4619      	mov	r1, r3
 800a918:	4620      	mov	r0, r4
 800a91a:	f7f6 f901 	bl	8000b20 <__aeabi_fsub>
 800a91e:	4603      	mov	r3, r0
 800a920:	461a      	mov	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	62da      	str	r2, [r3, #44]	; 0x2c


    S22_pitch = - S22_pitch*(Kt22_att - 1) - Kt21_att*S12_pitch - Kt22_att*S32_pitch;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a92e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a934:	f7f6 f8f4 	bl	8000b20 <__aeabi_fsub>
 800a938:	4603      	mov	r3, r0
 800a93a:	4619      	mov	r1, r3
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7f6 f9f9 	bl	8000d34 <__aeabi_fmul>
 800a942:	4603      	mov	r3, r0
 800a944:	461c      	mov	r4, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7f6 f9f1 	bl	8000d34 <__aeabi_fmul>
 800a952:	4603      	mov	r3, r0
 800a954:	4619      	mov	r1, r3
 800a956:	4620      	mov	r0, r4
 800a958:	f7f6 f8e2 	bl	8000b20 <__aeabi_fsub>
 800a95c:	4603      	mov	r3, r0
 800a95e:	461c      	mov	r4, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a966:	4618      	mov	r0, r3
 800a968:	f7f6 f9e4 	bl	8000d34 <__aeabi_fmul>
 800a96c:	4603      	mov	r3, r0
 800a96e:	4619      	mov	r1, r3
 800a970:	4620      	mov	r0, r4
 800a972:	f7f6 f8d5 	bl	8000b20 <__aeabi_fsub>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	631a      	str	r2, [r3, #48]	; 0x30


    S23_pitch = - S23_pitch*(Kt22_att - 1) - Kt21_att*S13_pitch - Kt22_att*S33_pitch;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a986:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a98a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a98c:	f7f6 f8c8 	bl	8000b20 <__aeabi_fsub>
 800a990:	4603      	mov	r3, r0
 800a992:	4619      	mov	r1, r3
 800a994:	4620      	mov	r0, r4
 800a996:	f7f6 f9cd 	bl	8000d34 <__aeabi_fmul>
 800a99a:	4603      	mov	r3, r0
 800a99c:	461c      	mov	r4, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f6 f9c5 	bl	8000d34 <__aeabi_fmul>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7f6 f8b6 	bl	8000b20 <__aeabi_fsub>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461c      	mov	r4, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7f6 f9b8 	bl	8000d34 <__aeabi_fmul>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7f6 f8a9 	bl	8000b20 <__aeabi_fsub>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	639a      	str	r2, [r3, #56]	; 0x38


    S31_pitch = - S31_pitch*(Kt32_att - 1) - Kt31_att*S11_pitch - Kt32_att*S21_pitch;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9da:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a9de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e4:	f7f6 f89c 	bl	8000b20 <__aeabi_fsub>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7f6 f9a1 	bl	8000d34 <__aeabi_fmul>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	461c      	mov	r4, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 f999 	bl	8000d34 <__aeabi_fmul>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4619      	mov	r1, r3
 800aa06:	4620      	mov	r0, r4
 800aa08:	f7f6 f88a 	bl	8000b20 <__aeabi_fsub>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461c      	mov	r4, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f6 f98c 	bl	8000d34 <__aeabi_fmul>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7f6 f87d 	bl	8000b20 <__aeabi_fsub>
 800aa26:	4603      	mov	r3, r0
 800aa28:	461a      	mov	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	63da      	str	r2, [r3, #60]	; 0x3c


    S32_pitch = - S32_pitch*(Kt32_att - 1) - Kt31_att*S12_pitch - Kt32_att*S22_pitch;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3c:	f7f6 f870 	bl	8000b20 <__aeabi_fsub>
 800aa40:	4603      	mov	r3, r0
 800aa42:	4619      	mov	r1, r3
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7f6 f975 	bl	8000d34 <__aeabi_fmul>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 f96d 	bl	8000d34 <__aeabi_fmul>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f7f6 f85e 	bl	8000b20 <__aeabi_fsub>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461c      	mov	r4, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f6 f960 	bl	8000d34 <__aeabi_fmul>
 800aa74:	4603      	mov	r3, r0
 800aa76:	4619      	mov	r1, r3
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f7f6 f851 	bl	8000b20 <__aeabi_fsub>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	641a      	str	r2, [r3, #64]	; 0x40


    S33_pitch = - S33_pitch*(Kt32_att - 1) - Kt31_att*S13_pitch - Kt32_att*S23_pitch;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa94:	f7f6 f844 	bl	8000b20 <__aeabi_fsub>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f7f6 f949 	bl	8000d34 <__aeabi_fmul>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461c      	mov	r4, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f6 f941 	bl	8000d34 <__aeabi_fmul>
 800aab2:	4603      	mov	r3, r0
 800aab4:	4619      	mov	r1, r3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7f6 f832 	bl	8000b20 <__aeabi_fsub>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461c      	mov	r4, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f6 f934 	bl	8000d34 <__aeabi_fmul>
 800aacc:	4603      	mov	r3, r0
 800aace:	4619      	mov	r1, r3
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7f6 f825 	bl	8000b20 <__aeabi_fsub>
 800aad6:	4603      	mov	r3, r0
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44

/*
  roll_rate  = lpf_roll.Run(gyroX);
  pitch_rate = lpf_pitch.Run(gyroY);*/

  yaw_rate   = lpf_yaw.Run(gyroZ);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aae4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 f9b3 	bl	800be52 <_ZN3lpf3RunEf>
 800aaec:	4602      	mov	r2, r0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	615a      	str	r2, [r3, #20]
    	pitch_comp = pitch_acc;

    	gyro_ready = true;
    } */

      float u = acc_vert;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24

      //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f5 fc89 	bl	8000418 <__aeabi_f2d>
 800ab06:	4680      	mov	r8, r0
 800ab08:	4689      	mov	r9, r1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f5 fc7e 	bl	8000418 <__aeabi_f2d>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fcd0 	bl	80004c8 <__aeabi_dmul>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	4649      	mov	r1, r9
 800ab30:	f7f5 fb14 	bl	800015c <__adddf3>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	461d      	mov	r5, r3
 800ab3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab3e:	f7f5 fc6b 	bl	8000418 <__aeabi_f2d>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ab48:	f7f5 fcbe 	bl	80004c8 <__aeabi_dmul>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4610      	mov	r0, r2
 800ab52:	4619      	mov	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ab5a:	f7f5 fcb5 	bl	80004c8 <__aeabi_dmul>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4610      	mov	r0, r2
 800ab64:	4619      	mov	r1, r3
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab6e:	f7f5 fdd5 	bl	800071c <__aeabi_ddiv>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4620      	mov	r0, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7f5 faef 	bl	800015c <__adddf3>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4610      	mov	r0, r2
 800ab84:	4619      	mov	r1, r3
 800ab86:	f7f5 ff77 	bl	8000a78 <__aeabi_d2f>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	  vz = (vz) + u*(st);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f5 fc3d 	bl	8000418 <__aeabi_f2d>
 800ab9e:	4604      	mov	r4, r0
 800aba0:	460d      	mov	r5, r1
 800aba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aba4:	f7f5 fc38 	bl	8000418 <__aeabi_f2d>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800abae:	f7f5 fc8b 	bl	80004c8 <__aeabi_dmul>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	f7f5 facf 	bl	800015c <__adddf3>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4610      	mov	r0, r2
 800abc4:	4619      	mov	r1, r3
 800abc6:	f7f5 ff57 	bl	8000a78 <__aeabi_d2f>
 800abca:	4602      	mov	r2, r0
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f7f5 ffa0 	bl	8000b24 <__addsf3>
 800abe4:	4603      	mov	r3, r0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7f5 fc16 	bl	8000418 <__aeabi_f2d>
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f5 fc0e 	bl	8000418 <__aeabi_f2d>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ac02:	f7f5 fc61 	bl	80004c8 <__aeabi_dmul>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 faa5 	bl	800015c <__adddf3>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4692      	mov	sl, r2
 800ac18:	469b      	mov	fp, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7f5 fbf7 	bl	8000418 <__aeabi_f2d>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	4689      	mov	r9, r1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f5 fbef 	bl	8000418 <__aeabi_f2d>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ac40:	f7f5 fc42 	bl	80004c8 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 fa86 	bl	800015c <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fc36 	bl	80004c8 <__aeabi_dmul>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4650      	mov	r0, sl
 800ac62:	4659      	mov	r1, fp
 800ac64:	f7f5 fa7a 	bl	800015c <__adddf3>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f7f5 ff02 	bl	8000a78 <__aeabi_d2f>
 800ac74:	4602      	mov	r2, r0
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	679a      	str	r2, [r3, #120]	; 0x78
	  S12_alt = S12_alt + S22_alt*st;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f5 fbca 	bl	8000418 <__aeabi_f2d>
 800ac84:	4604      	mov	r4, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f5 fbc2 	bl	8000418 <__aeabi_f2d>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ac9a:	f7f5 fc15 	bl	80004c8 <__aeabi_dmul>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	f7f5 fa59 	bl	800015c <__adddf3>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4610      	mov	r0, r2
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7f5 fee1 	bl	8000a78 <__aeabi_d2f>
 800acb6:	4602      	mov	r2, r0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	67da      	str	r2, [r3, #124]	; 0x7c
	  S13_alt = S13_alt + S23_alt*st;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f5 fba8 	bl	8000418 <__aeabi_f2d>
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f5 fba0 	bl	8000418 <__aeabi_f2d>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800acde:	f7f5 fbf3 	bl	80004c8 <__aeabi_dmul>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4620      	mov	r0, r4
 800ace8:	4629      	mov	r1, r5
 800acea:	f7f5 fa37 	bl	800015c <__adddf3>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4610      	mov	r0, r2
 800acf4:	4619      	mov	r1, r3
 800acf6:	f7f5 febf 	bl	8000a78 <__aeabi_d2f>
 800acfa:	4602      	mov	r2, r0
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	  S21_alt = S21_alt + S22_alt*(st);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f5 fb85 	bl	8000418 <__aeabi_f2d>
 800ad0e:	4604      	mov	r4, r0
 800ad10:	460d      	mov	r5, r1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f5 fb7d 	bl	8000418 <__aeabi_f2d>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ad24:	f7f5 fbd0 	bl	80004c8 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fa14 	bl	800015c <__adddf3>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f7f5 fe9c 	bl	8000a78 <__aeabi_d2f>
 800ad40:	4602      	mov	r2, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  S22_alt =  S22_alt + svel;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f7f5 fee4 	bl	8000b24 <__addsf3>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7f5 fb53 	bl	8000418 <__aeabi_f2d>
 800ad72:	4604      	mov	r4, r0
 800ad74:	460d      	mov	r5, r1
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f5 fb4b 	bl	8000418 <__aeabi_f2d>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ad88:	f7f5 fb9e 	bl	80004c8 <__aeabi_dmul>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4620      	mov	r0, r4
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7f5 f9e2 	bl	800015c <__adddf3>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f7f5 fe6a 	bl	8000a78 <__aeabi_d2f>
 800ada4:	4602      	mov	r2, r0
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7f5 feb2 	bl	8000b24 <__addsf3>
 800adc0:	4603      	mov	r3, r0
 800adc2:	461a      	mov	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	  A = (Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800add6:	4619      	mov	r1, r3
 800add8:	4610      	mov	r0, r2
 800adda:	f7f5 ffab 	bl	8000d34 <__aeabi_fmul>
 800adde:	4603      	mov	r3, r0
 800ade0:	461c      	mov	r4, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f7f5 ffa0 	bl	8000d34 <__aeabi_fmul>
 800adf4:	4603      	mov	r3, r0
 800adf6:	4619      	mov	r1, r3
 800adf8:	4620      	mov	r0, r4
 800adfa:	f7f5 fe93 	bl	8000b24 <__addsf3>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461c      	mov	r4, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f7f5 ff90 	bl	8000d34 <__aeabi_fmul>
 800ae14:	4603      	mov	r3, r0
 800ae16:	4619      	mov	r1, r3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7f5 fe83 	bl	8000b24 <__addsf3>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461c      	mov	r4, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f7f5 ff7f 	bl	8000d34 <__aeabi_fmul>
 800ae36:	4603      	mov	r3, r0
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7f5 fe72 	bl	8000b24 <__addsf3>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461c      	mov	r4, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7f5 ff6e 	bl	8000d34 <__aeabi_fmul>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f7f5 fe61 	bl	8000b24 <__addsf3>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461c      	mov	r4, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae72:	4619      	mov	r1, r3
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7f5 ff5d 	bl	8000d34 <__aeabi_fmul>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7f5 fe50 	bl	8000b24 <__addsf3>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461c      	mov	r4, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f7f5 ff4d 	bl	8000d34 <__aeabi_fmul>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7f5 fe40 	bl	8000b24 <__addsf3>
 800aea4:	4603      	mov	r3, r0
 800aea6:	461c      	mov	r4, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	f7f5 ff3c 	bl	8000d34 <__aeabi_fmul>
 800aebc:	4603      	mov	r3, r0
 800aebe:	4619      	mov	r1, r3
 800aec0:	4620      	mov	r0, r4
 800aec2:	f7f5 fe2d 	bl	8000b20 <__aeabi_fsub>
 800aec6:	4603      	mov	r3, r0
 800aec8:	643b      	str	r3, [r7, #64]	; 0x40

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt))/A;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7f5 fe21 	bl	8000b24 <__addsf3>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4619      	mov	r1, r3
 800aee6:	4620      	mov	r0, r4
 800aee8:	f7f5 ff24 	bl	8000d34 <__aeabi_fmul>
 800aeec:	4603      	mov	r3, r0
 800aeee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f5 ffd3 	bl	8000e9c <__aeabi_fdiv>
 800aef6:	4603      	mov	r3, r0
 800aef8:	623b      	str	r3, [r7, #32]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f7f5 ff14 	bl	8000d34 <__aeabi_fmul>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461c      	mov	r4, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7f5 ff09 	bl	8000d34 <__aeabi_fmul>
 800af22:	4603      	mov	r3, r0
 800af24:	4619      	mov	r1, r3
 800af26:	4620      	mov	r0, r4
 800af28:	f7f5 fdfc 	bl	8000b24 <__addsf3>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461c      	mov	r4, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f7f5 fef8 	bl	8000d34 <__aeabi_fmul>
 800af44:	4603      	mov	r3, r0
 800af46:	4619      	mov	r1, r3
 800af48:	4620      	mov	r0, r4
 800af4a:	f7f5 fde9 	bl	8000b20 <__aeabi_fsub>
 800af4e:	4603      	mov	r3, r0
 800af50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af52:	4618      	mov	r0, r3
 800af54:	f7f5 ffa2 	bl	8000e9c <__aeabi_fdiv>
 800af58:	4603      	mov	r3, r0
 800af5a:	61fb      	str	r3, [r7, #28]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt)/A;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af68:	4619      	mov	r1, r3
 800af6a:	4610      	mov	r0, r2
 800af6c:	f7f5 fee2 	bl	8000d34 <__aeabi_fmul>
 800af70:	4603      	mov	r3, r0
 800af72:	461c      	mov	r4, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7f5 fed6 	bl	8000d34 <__aeabi_fmul>
 800af88:	4603      	mov	r3, r0
 800af8a:	4619      	mov	r1, r3
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7f5 fdc9 	bl	8000b24 <__addsf3>
 800af92:	4603      	mov	r3, r0
 800af94:	461c      	mov	r4, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f7f5 fec6 	bl	8000d34 <__aeabi_fmul>
 800afa8:	4603      	mov	r3, r0
 800afaa:	4619      	mov	r1, r3
 800afac:	4620      	mov	r0, r4
 800afae:	f7f5 fdb9 	bl	8000b24 <__addsf3>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461c      	mov	r4, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc2:	4619      	mov	r1, r3
 800afc4:	4610      	mov	r0, r2
 800afc6:	f7f5 feb5 	bl	8000d34 <__aeabi_fmul>
 800afca:	4603      	mov	r3, r0
 800afcc:	4619      	mov	r1, r3
 800afce:	4620      	mov	r0, r4
 800afd0:	f7f5 fda6 	bl	8000b20 <__aeabi_fsub>
 800afd4:	4603      	mov	r3, r0
 800afd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f5 ff5f 	bl	8000e9c <__aeabi_fdiv>
 800afde:	4603      	mov	r3, r0
 800afe0:	61bb      	str	r3, [r7, #24]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt)/A;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7f5 fe9f 	bl	8000d34 <__aeabi_fmul>
 800aff6:	4603      	mov	r3, r0
 800aff8:	461c      	mov	r4, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7f5 fe94 	bl	8000d34 <__aeabi_fmul>
 800b00c:	4603      	mov	r3, r0
 800b00e:	4619      	mov	r1, r3
 800b010:	4620      	mov	r0, r4
 800b012:	f7f5 fd85 	bl	8000b20 <__aeabi_fsub>
 800b016:	4603      	mov	r3, r0
 800b018:	461c      	mov	r4, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7f5 fe83 	bl	8000d34 <__aeabi_fmul>
 800b02e:	4603      	mov	r3, r0
 800b030:	4619      	mov	r1, r3
 800b032:	4620      	mov	r0, r4
 800b034:	f7f5 fd76 	bl	8000b24 <__addsf3>
 800b038:	4603      	mov	r3, r0
 800b03a:	461c      	mov	r4, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b048:	4619      	mov	r1, r3
 800b04a:	4610      	mov	r0, r2
 800b04c:	f7f5 fe72 	bl	8000d34 <__aeabi_fmul>
 800b050:	4603      	mov	r3, r0
 800b052:	4619      	mov	r1, r3
 800b054:	4620      	mov	r0, r4
 800b056:	f7f5 fd65 	bl	8000b24 <__addsf3>
 800b05a:	4603      	mov	r3, r0
 800b05c:	461c      	mov	r4, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7f5 fe61 	bl	8000d34 <__aeabi_fmul>
 800b072:	4603      	mov	r3, r0
 800b074:	4619      	mov	r1, r3
 800b076:	4620      	mov	r0, r4
 800b078:	f7f5 fd52 	bl	8000b20 <__aeabi_fsub>
 800b07c:	4603      	mov	r3, r0
 800b07e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b080:	4618      	mov	r0, r3
 800b082:	f7f5 ff0b 	bl	8000e9c <__aeabi_fdiv>
 800b086:	4603      	mov	r3, r0
 800b088:	617b      	str	r3, [r7, #20]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt)/A;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7f5 fe4b 	bl	8000d34 <__aeabi_fmul>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461c      	mov	r4, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7f5 fe3f 	bl	8000d34 <__aeabi_fmul>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7f5 fd32 	bl	8000b24 <__addsf3>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	461c      	mov	r4, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7f5 fe2f 	bl	8000d34 <__aeabi_fmul>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7f5 fd22 	bl	8000b24 <__addsf3>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	461c      	mov	r4, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	f7f5 fe1e 	bl	8000d34 <__aeabi_fmul>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7f5 fd0f 	bl	8000b20 <__aeabi_fsub>
 800b102:	4603      	mov	r3, r0
 800b104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b106:	4618      	mov	r0, r3
 800b108:	f7f5 fec8 	bl	8000e9c <__aeabi_fdiv>
 800b10c:	4603      	mov	r3, r0
 800b10e:	613b      	str	r3, [r7, #16]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt)/A;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7f5 fe08 	bl	8000d34 <__aeabi_fmul>
 800b124:	4603      	mov	r3, r0
 800b126:	461c      	mov	r4, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f7f5 fdfd 	bl	8000d34 <__aeabi_fmul>
 800b13a:	4603      	mov	r3, r0
 800b13c:	4619      	mov	r1, r3
 800b13e:	4620      	mov	r0, r4
 800b140:	f7f5 fcee 	bl	8000b20 <__aeabi_fsub>
 800b144:	4603      	mov	r3, r0
 800b146:	461c      	mov	r4, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7f5 fdec 	bl	8000d34 <__aeabi_fmul>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4619      	mov	r1, r3
 800b160:	4620      	mov	r0, r4
 800b162:	f7f5 fcdf 	bl	8000b24 <__addsf3>
 800b166:	4603      	mov	r3, r0
 800b168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 fe96 	bl	8000e9c <__aeabi_fdiv>
 800b170:	4603      	mov	r3, r0
 800b172:	60fb      	str	r3, [r7, #12]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7f5 fcc9 	bl	8000b20 <__aeabi_fsub>
 800b18e:	4603      	mov	r3, r0
 800b190:	69f9      	ldr	r1, [r7, #28]
 800b192:	4618      	mov	r0, r3
 800b194:	f7f5 fdce 	bl	8000d34 <__aeabi_fmul>
 800b198:	4603      	mov	r3, r0
 800b19a:	4619      	mov	r1, r3
 800b19c:	4620      	mov	r0, r4
 800b19e:	f7f5 fcbf 	bl	8000b20 <__aeabi_fsub>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	461c      	mov	r4, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7f5 fcb3 	bl	8000b20 <__aeabi_fsub>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7f5 fcac 	bl	8000b24 <__addsf3>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	6a39      	ldr	r1, [r7, #32]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f5 fdaf 	bl	8000d34 <__aeabi_fmul>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7f5 fca0 	bl	8000b20 <__aeabi_fsub>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7f5 fc8e 	bl	8000b20 <__aeabi_fsub>
 800b204:	4603      	mov	r3, r0
 800b206:	6979      	ldr	r1, [r7, #20]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f5 fd93 	bl	8000d34 <__aeabi_fmul>
 800b20e:	4603      	mov	r3, r0
 800b210:	4619      	mov	r1, r3
 800b212:	4620      	mov	r0, r4
 800b214:	f7f5 fc84 	bl	8000b20 <__aeabi_fsub>
 800b218:	4603      	mov	r3, r0
 800b21a:	461c      	mov	r4, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b228:	4619      	mov	r1, r3
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7f5 fc78 	bl	8000b20 <__aeabi_fsub>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f7f5 fc71 	bl	8000b24 <__addsf3>
 800b242:	4603      	mov	r3, r0
 800b244:	69b9      	ldr	r1, [r7, #24]
 800b246:	4618      	mov	r0, r3
 800b248:	f7f5 fd74 	bl	8000d34 <__aeabi_fmul>
 800b24c:	4603      	mov	r3, r0
 800b24e:	4619      	mov	r1, r3
 800b250:	4620      	mov	r0, r4
 800b252:	f7f5 fc65 	bl	8000b20 <__aeabi_fsub>
 800b256:	4603      	mov	r3, r0
 800b258:	461a      	mov	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b272:	4619      	mov	r1, r3
 800b274:	4610      	mov	r0, r2
 800b276:	f7f5 fc53 	bl	8000b20 <__aeabi_fsub>
 800b27a:	4603      	mov	r3, r0
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f5 fd58 	bl	8000d34 <__aeabi_fmul>
 800b284:	4603      	mov	r3, r0
 800b286:	4619      	mov	r1, r3
 800b288:	4620      	mov	r0, r4
 800b28a:	f7f5 fc49 	bl	8000b20 <__aeabi_fsub>
 800b28e:	4603      	mov	r3, r0
 800b290:	461c      	mov	r4, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f7f5 fc3d 	bl	8000b20 <__aeabi_fsub>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7f5 fc36 	bl	8000b24 <__addsf3>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	6939      	ldr	r1, [r7, #16]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7f5 fd39 	bl	8000d34 <__aeabi_fmul>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7f5 fc2a 	bl	8000b20 <__aeabi_fsub>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2da:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b2de:	69f9      	ldr	r1, [r7, #28]
 800b2e0:	6a38      	ldr	r0, [r7, #32]
 800b2e2:	f7f5 fc1f 	bl	8000b24 <__addsf3>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f5 fc17 	bl	8000b20 <__aeabi_fsub>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7f5 fd1c 	bl	8000d34 <__aeabi_fmul>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461c      	mov	r4, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b306:	6a39      	ldr	r1, [r7, #32]
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f5 fd13 	bl	8000d34 <__aeabi_fmul>
 800b30e:	4603      	mov	r3, r0
 800b310:	4619      	mov	r1, r3
 800b312:	4620      	mov	r0, r4
 800b314:	f7f5 fc04 	bl	8000b20 <__aeabi_fsub>
 800b318:	4603      	mov	r3, r0
 800b31a:	461a      	mov	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	679a      	str	r2, [r3, #120]	; 0x78


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b324:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b328:	69f9      	ldr	r1, [r7, #28]
 800b32a:	6a38      	ldr	r0, [r7, #32]
 800b32c:	f7f5 fbfa 	bl	8000b24 <__addsf3>
 800b330:	4603      	mov	r3, r0
 800b332:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b336:	4618      	mov	r0, r3
 800b338:	f7f5 fbf2 	bl	8000b20 <__aeabi_fsub>
 800b33c:	4603      	mov	r3, r0
 800b33e:	4619      	mov	r1, r3
 800b340:	4620      	mov	r0, r4
 800b342:	f7f5 fcf7 	bl	8000d34 <__aeabi_fmul>
 800b346:	4603      	mov	r3, r0
 800b348:	461c      	mov	r4, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b350:	6a39      	ldr	r1, [r7, #32]
 800b352:	4618      	mov	r0, r3
 800b354:	f7f5 fcee 	bl	8000d34 <__aeabi_fmul>
 800b358:	4603      	mov	r3, r0
 800b35a:	4619      	mov	r1, r3
 800b35c:	4620      	mov	r0, r4
 800b35e:	f7f5 fbdf 	bl	8000b20 <__aeabi_fsub>
 800b362:	4603      	mov	r3, r0
 800b364:	461a      	mov	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	67da      	str	r2, [r3, #124]	; 0x7c


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b370:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b374:	69f9      	ldr	r1, [r7, #28]
 800b376:	6a38      	ldr	r0, [r7, #32]
 800b378:	f7f5 fbd4 	bl	8000b24 <__addsf3>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b382:	4618      	mov	r0, r3
 800b384:	f7f5 fbcc 	bl	8000b20 <__aeabi_fsub>
 800b388:	4603      	mov	r3, r0
 800b38a:	4619      	mov	r1, r3
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7f5 fcd1 	bl	8000d34 <__aeabi_fmul>
 800b392:	4603      	mov	r3, r0
 800b394:	461c      	mov	r4, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b39c:	6a39      	ldr	r1, [r7, #32]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7f5 fcc8 	bl	8000d34 <__aeabi_fmul>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7f5 fbb9 	bl	8000b20 <__aeabi_fsub>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800b3c2:	6979      	ldr	r1, [r7, #20]
 800b3c4:	69b8      	ldr	r0, [r7, #24]
 800b3c6:	f7f5 fbad 	bl	8000b24 <__addsf3>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7f5 fcb0 	bl	8000d34 <__aeabi_fmul>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7f5 fba1 	bl	8000b20 <__aeabi_fsub>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e8:	69b9      	ldr	r1, [r7, #24]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f5 fca2 	bl	8000d34 <__aeabi_fmul>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7f5 fb93 	bl	8000b20 <__aeabi_fsub>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 800b40e:	6979      	ldr	r1, [r7, #20]
 800b410:	69b8      	ldr	r0, [r7, #24]
 800b412:	f7f5 fb87 	bl	8000b24 <__addsf3>
 800b416:	4603      	mov	r3, r0
 800b418:	4619      	mov	r1, r3
 800b41a:	4628      	mov	r0, r5
 800b41c:	f7f5 fc8a 	bl	8000d34 <__aeabi_fmul>
 800b420:	4603      	mov	r3, r0
 800b422:	4619      	mov	r1, r3
 800b424:	4620      	mov	r0, r4
 800b426:	f7f5 fb7b 	bl	8000b20 <__aeabi_fsub>
 800b42a:	4603      	mov	r3, r0
 800b42c:	461c      	mov	r4, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b434:	69b9      	ldr	r1, [r7, #24]
 800b436:	4618      	mov	r0, r3
 800b438:	f7f5 fc7c 	bl	8000d34 <__aeabi_fmul>
 800b43c:	4603      	mov	r3, r0
 800b43e:	4619      	mov	r1, r3
 800b440:	4620      	mov	r0, r4
 800b442:	f7f5 fb6d 	bl	8000b20 <__aeabi_fsub>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	69b8      	ldr	r0, [r7, #24]
 800b460:	f7f5 fb60 	bl	8000b24 <__addsf3>
 800b464:	4603      	mov	r3, r0
 800b466:	4619      	mov	r1, r3
 800b468:	4628      	mov	r0, r5
 800b46a:	f7f5 fc63 	bl	8000d34 <__aeabi_fmul>
 800b46e:	4603      	mov	r3, r0
 800b470:	4619      	mov	r1, r3
 800b472:	4620      	mov	r0, r4
 800b474:	f7f5 fb54 	bl	8000b20 <__aeabi_fsub>
 800b478:	4603      	mov	r3, r0
 800b47a:	461c      	mov	r4, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b482:	69b9      	ldr	r1, [r7, #24]
 800b484:	4618      	mov	r0, r3
 800b486:	f7f5 fc55 	bl	8000d34 <__aeabi_fmul>
 800b48a:	4603      	mov	r3, r0
 800b48c:	4619      	mov	r1, r3
 800b48e:	4620      	mov	r0, r4
 800b490:	f7f5 fb46 	bl	8000b20 <__aeabi_fsub>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b4a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b4ac:	6938      	ldr	r0, [r7, #16]
 800b4ae:	f7f5 fb37 	bl	8000b20 <__aeabi_fsub>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7f5 fc3c 	bl	8000d34 <__aeabi_fmul>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	461d      	mov	r5, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b4c4:	68f9      	ldr	r1, [r7, #12]
 800b4c6:	6938      	ldr	r0, [r7, #16]
 800b4c8:	f7f5 fb2c 	bl	8000b24 <__addsf3>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7f5 fc2f 	bl	8000d34 <__aeabi_fmul>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f7f5 fb20 	bl	8000b20 <__aeabi_fsub>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4f0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b4f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b4f8:	6938      	ldr	r0, [r7, #16]
 800b4fa:	f7f5 fb11 	bl	8000b20 <__aeabi_fsub>
 800b4fe:	4603      	mov	r3, r0
 800b500:	4619      	mov	r1, r3
 800b502:	4620      	mov	r0, r4
 800b504:	f7f5 fc16 	bl	8000d34 <__aeabi_fmul>
 800b508:	4603      	mov	r3, r0
 800b50a:	461d      	mov	r5, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800b510:	68f9      	ldr	r1, [r7, #12]
 800b512:	6938      	ldr	r0, [r7, #16]
 800b514:	f7f5 fb06 	bl	8000b24 <__addsf3>
 800b518:	4603      	mov	r3, r0
 800b51a:	4619      	mov	r1, r3
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7f5 fc09 	bl	8000d34 <__aeabi_fmul>
 800b522:	4603      	mov	r3, r0
 800b524:	4619      	mov	r1, r3
 800b526:	4628      	mov	r0, r5
 800b528:	f7f5 fafa 	bl	8000b20 <__aeabi_fsub>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b53c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b540:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b544:	6938      	ldr	r0, [r7, #16]
 800b546:	f7f5 faeb 	bl	8000b20 <__aeabi_fsub>
 800b54a:	4603      	mov	r3, r0
 800b54c:	4619      	mov	r1, r3
 800b54e:	4620      	mov	r0, r4
 800b550:	f7f5 fbf0 	bl	8000d34 <__aeabi_fmul>
 800b554:	4603      	mov	r3, r0
 800b556:	461d      	mov	r5, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	6938      	ldr	r0, [r7, #16]
 800b562:	f7f5 fadf 	bl	8000b24 <__addsf3>
 800b566:	4603      	mov	r3, r0
 800b568:	4619      	mov	r1, r3
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7f5 fbe2 	bl	8000d34 <__aeabi_fmul>
 800b570:	4603      	mov	r3, r0
 800b572:	4619      	mov	r1, r3
 800b574:	4628      	mov	r0, r5
 800b576:	f7f5 fad3 	bl	8000b20 <__aeabi_fsub>
 800b57a:	4603      	mov	r3, r0
 800b57c:	461a      	mov	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98


	pitch_eski=pitch_comp;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	roll_eski=roll_comp;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    state.angles[0] = roll_ekf;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    state.angles[1] = pitch_ekf;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    state.angles[2] = 0;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f04f 0200 	mov.w	r2, #0
 800b5ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    state.rates[0] = roll_rate;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    state.rates[1] = pitch_rate;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691a      	ldr	r2, [r3, #16]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    state.rates[2] = yaw_rate;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695a      	ldr	r2, [r3, #20]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    state.bias[0] = roll_bias;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69da      	ldr	r2, [r3, #28]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    state.bias[1] = pitch_bias;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	699a      	ldr	r2, [r3, #24]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    state.bias[2] = yaw_bias;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1a      	ldr	r2, [r3, #32]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

}
 800b5fa:	bf00      	nop
 800b5fc:	3760      	adds	r7, #96	; 0x60
 800b5fe:	46bd      	mov	sp, r7
 800b600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b604 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fc73 	bl	800befe <_ZN3lpfD1Ev>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	0000      	movs	r0, r0
 800b624:	0000      	movs	r0, r0
	...

0800b628 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a23      	ldr	r2, [pc, #140]	; (800b6c0 <_ZN3PIDC1Ev+0x98>)
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a22      	ldr	r2, [pc, #136]	; (800b6c4 <_ZN3PIDC1Ev+0x9c>)
 800b63a:	605a      	str	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b642:	609a      	str	r2, [r3, #8]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7f5 fb1f 	bl	8000c8c <__aeabi_i2f>
 800b64e:	4603      	mov	r3, r0
 800b650:	4619      	mov	r1, r3
 800b652:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b656:	f7f5 fc21 	bl	8000e9c <__aeabi_fdiv>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <_ZN3PIDC1Ev+0xa0>)
 800b666:	611a      	str	r2, [r3, #16]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	4619      	mov	r1, r3
 800b672:	4610      	mov	r0, r2
 800b674:	f7f5 fb5e 	bl	8000d34 <__aeabi_fmul>
 800b678:	4603      	mov	r3, r0
 800b67a:	461a      	mov	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	615a      	str	r2, [r3, #20]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b686:	a30a      	add	r3, pc, #40	; (adr r3, 800b6b0 <_ZN3PIDC1Ev+0x88>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b690:	a307      	add	r3, pc, #28	; (adr r3, 800b6b0 <_ZN3PIDC1Ev+0x88>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	e9cd 2300 	strd	r2, r3, [sp]
 800b69a:	a307      	add	r3, pc, #28	; (adr r3, 800b6b8 <_ZN3PIDC1Ev+0x90>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	f000 fbbb 	bl	800be1c <_ZN3lpfC1Eddd>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	de7ea5f8 	.word	0xde7ea5f8
 800b6b4:	3fb2a454 	.word	0x3fb2a454
 800b6b8:	ab367a10 	.word	0xab367a10
 800b6bc:	3feb573e 	.word	0x3feb573e
 800b6c0:	42f00000 	.word	0x42f00000
 800b6c4:	c2f00000 	.word	0xc2f00000
 800b6c8:	3e99999a 	.word	0x3e99999a

0800b6cc <_ZN3PID7P_AngleEfff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
	float P;
	e_angle = alpha_des - alpha;
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	68b8      	ldr	r0, [r7, #8]
 800b6de:	f7f5 fa1f 	bl	8000b20 <__aeabi_fsub>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	P = Kp_angle*e_angle;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6838      	ldr	r0, [r7, #0]
 800b6f6:	f7f5 fb1d 	bl	8000d34 <__aeabi_fmul>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	617b      	str	r3, [r7, #20]
    return P;
 800b6fe:	697b      	ldr	r3, [r7, #20]

}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZN3PID6PI_AltEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Alt(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch3) {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	; 0x28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch3 > 1700) {
 800b716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b718:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d90e      	bls.n	800b73e <_ZN3PID6PI_AltEfffffj+0x36>
		zi = z0 + x_inc;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	68b9      	ldr	r1, [r7, #8]
 800b726:	4618      	mov	r0, r3
 800b728:	f7f5 f9fc 	bl	8000b24 <__addsf3>
 800b72c:	4603      	mov	r3, r0
 800b72e:	461a      	mov	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = vz_def;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
 800b73c:	e01c      	b.n	800b778 <_ZN3PID6PI_AltEfffffj+0x70>
	}

	else if (ch3 < 1300) {
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	f240 5213 	movw	r2, #1299	; 0x513
 800b744:	4293      	cmp	r3, r2
 800b746:	d810      	bhi.n	800b76a <_ZN3PID6PI_AltEfffffj+0x62>
		zi = z0 - x_inc;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	4619      	mov	r1, r3
 800b74e:	68b8      	ldr	r0, [r7, #8]
 800b750:	f7f5 f9e6 	bl	8000b20 <__aeabi_fsub>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = -1 * vz_def;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
 800b768:	e006      	b.n	800b778 <_ZN3PID6PI_AltEfffffj+0x70>
	}

	else {
		zi = z0;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		v_des = 0;
 800b772:	f04f 0300 	mov.w	r3, #0
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b77c:	f7f5 f9d0 	bl	8000b20 <__aeabi_fsub>
 800b780:	4603      	mov	r3, r0
 800b782:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800b784:	6a39      	ldr	r1, [r7, #32]
 800b786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b788:	f7f5 fad4 	bl	8000d34 <__aeabi_fmul>
 800b78c:	4603      	mov	r3, r0
 800b78e:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	68b8      	ldr	r0, [r7, #8]
 800b794:	f7f5 f9c4 	bl	8000b20 <__aeabi_fsub>
 800b798:	4603      	mov	r3, r0
 800b79a:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800b79c:	69b9      	ldr	r1, [r7, #24]
 800b79e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7a0:	f7f5 fac8 	bl	8000d34 <__aeabi_fmul>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	69f8      	ldr	r0, [r7, #28]
 800b7ac:	f7f5 f9ba 	bl	8000b24 <__addsf3>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	613b      	str	r3, [r7, #16]
    return PI;
 800b7b4:	693b      	ldr	r3, [r7, #16]

}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3728      	adds	r7, #40	; 0x28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f7f5 f9a5 	bl	8000b20 <__aeabi_fsub>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	461a      	mov	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	651a      	str	r2, [r3, #80]	; 0x50
	P = Kp * e_roll;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f5 faa5 	bl	8000d34 <__aeabi_fmul>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	67da      	str	r2, [r3, #124]	; 0x7c

	ie_roll += e_angle*st;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f7f5 fa96 	bl	8000d34 <__aeabi_fmul>
 800b808:	4603      	mov	r3, r0
 800b80a:	4619      	mov	r1, r3
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7f5 f989 	bl	8000b24 <__addsf3>
 800b812:	4603      	mov	r3, r0
 800b814:	461a      	mov	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	661a      	str	r2, [r3, #96]	; 0x60

	I = Ki * (ie_roll * Kp_angle - alpha);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b81e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b820:	4618      	mov	r0, r3
 800b822:	f7f5 fa87 	bl	8000d34 <__aeabi_fmul>
 800b826:	4603      	mov	r3, r0
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7f5 f978 	bl	8000b20 <__aeabi_fsub>
 800b830:	4603      	mov	r3, r0
 800b832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b834:	4618      	mov	r0, r3
 800b836:	f7f5 fa7d 	bl	8000d34 <__aeabi_fmul>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	4619      	mov	r1, r3
 800b84a:	68b8      	ldr	r0, [r7, #8]
 800b84c:	f7f5 f968 	bl	8000b20 <__aeabi_fsub>
 800b850:	4603      	mov	r3, r0
 800b852:	617b      	str	r3, [r7, #20]
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7f5 f960 	bl	8000b20 <__aeabi_fsub>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	4619      	mov	r1, r3
 800b86a:	4610      	mov	r0, r2
 800b86c:	f7f5 fb16 	bl	8000e9c <__aeabi_fdiv>
 800b870:	4603      	mov	r3, r0
 800b872:	613b      	str	r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4619      	mov	r1, r3
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f7f5 fb0e 	bl	8000e9c <__aeabi_fdiv>
 800b880:	4603      	mov	r3, r0
 800b882:	617b      	str	r3, [r7, #20]
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3328      	adds	r3, #40	; 0x28
 800b888:	6939      	ldr	r1, [r7, #16]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fae1 	bl	800be52 <_ZN3lpf3RunEf>
 800b890:	6138      	str	r0, [r7, #16]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7f5 fa4a 	bl	8000d34 <__aeabi_fmul>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	6939      	ldr	r1, [r7, #16]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7f5 f93b 	bl	8000b20 <__aeabi_fsub>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f5 fa40 	bl	8000d34 <__aeabi_fmul>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	f7f5 f92a 	bl	8000b24 <__addsf3>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8da:	4619      	mov	r1, r3
 800b8dc:	4610      	mov	r0, r2
 800b8de:	f7f5 f921 	bl	8000b24 <__addsf3>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800b8fc:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <_ZN3PID9PID_Rate2Efffffff+0x174>)
 800b8fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f966 	bl	800bbd4 <_ZN3PID3SatEfii>
 800b908:	4602      	mov	r2, r0
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	66da      	str	r2, [r3, #108]	; 0x6c
	alpha_dot_des_ = alpha_dot_des;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	371c      	adds	r7, #28
 800b930:	46bd      	mov	sp, r7
 800b932:	bd90      	pop	{r4, r7, pc}
 800b934:	fffffed4 	.word	0xfffffed4

0800b938 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	68b8      	ldr	r0, [r7, #8]
 800b94a:	f7f5 f8e9 	bl	8000b20 <__aeabi_fsub>
 800b94e:	4603      	mov	r3, r0
 800b950:	461a      	mov	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	651a      	str	r2, [r3, #80]	; 0x50
  float e_roll_der = - alpha_dot;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b95c:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b962:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7f5 fbbf 	bl	80010ec <__aeabi_f2iz>
 800b96e:	4604      	mov	r4, r0
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b974:	4618      	mov	r0, r3
 800b976:	f7f5 fbb9 	bl	80010ec <__aeabi_f2iz>
 800b97a:	4603      	mov	r3, r0
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d018      	beq.n	800b9b2 <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b984:	4619      	mov	r1, r3
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f8cb 	bl	800bb22 <_ZN3PID3sgnEf>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461c      	mov	r4, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b994:	4619      	mov	r1, r3
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f8c3 	bl	800bb22 <_ZN3PID3sgnEf>
 800b99c:	4603      	mov	r3, r0
 800b99e:	429c      	cmp	r4, r3
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2301      	moveq	r3, #1
 800b9a4:	2300      	movne	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7f5 f9bb 	bl	8000d34 <__aeabi_fmul>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	f7f5 f8a9 	bl	8000b20 <__aeabi_fsub>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4947      	ldr	r1, [pc, #284]	; (800baf0 <_ZN3PID7PD_RateEfffff+0x1b8>)
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f5 f9ae 	bl	8000d34 <__aeabi_fmul>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	461a      	mov	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	675a      	str	r2, [r3, #116]	; 0x74
  	de_int += de_filt*st;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	f7f5 f9a0 	bl	8000d34 <__aeabi_fmul>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f7f5 f893 	bl	8000b24 <__addsf3>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	679a      	str	r2, [r3, #120]	; 0x78

	de = e_roll - e_eski_roll;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4610      	mov	r0, r2
 800ba12:	f7f5 f885 	bl	8000b20 <__aeabi_fsub>
 800ba16:	4603      	mov	r3, r0
 800ba18:	461a      	mov	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	671a      	str	r2, [r3, #112]	; 0x70
	e_eski_roll = e_roll;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	659a      	str	r2, [r3, #88]	; 0x58

  ie_roll += e_roll_int*st;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	6979      	ldr	r1, [r7, #20]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f5 f97f 	bl	8000d34 <__aeabi_fmul>
 800ba36:	4603      	mov	r3, r0
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f7f5 f872 	bl	8000b24 <__addsf3>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	661a      	str	r2, [r3, #96]	; 0x60

  ie_roll_sat = ie_roll;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	669a      	str	r2, [r3, #104]	; 0x68
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f5 f96c 	bl	8000d34 <__aeabi_fmul>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	67da      	str	r2, [r3, #124]	; 0x7c
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7f5 f95d 	bl	8000d34 <__aeabi_fmul>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//D = lpf.update(D);
	pd = P + I + D;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7f5 f847 	bl	8000b24 <__addsf3>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa0:	4619      	mov	r1, r3
 800baa2:	4610      	mov	r0, r2
 800baa4:	f7f5 f83e 	bl	8000b24 <__addsf3>
 800baa8:	4603      	mov	r3, r0
 800baaa:	461a      	mov	r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	pd_roll_buf = pd;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800bac2:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <_ZN3PID7PD_RateEfffff+0x1bc>)
 800bac4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f883 	bl	800bbd4 <_ZN3PID3SatEfii>
 800bace:	4602      	mov	r2, r0
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pd_roll_sat_buf = pd;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	66da      	str	r2, [r3, #108]	; 0x6c
    return pd;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

}
 800bae6:	4618      	mov	r0, r3
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	bd90      	pop	{r4, r7, pc}
 800baee:	bf00      	nop
 800baf0:	42c80000 	.word	0x42c80000
 800baf4:	fffffed4 	.word	0xfffffed4

0800baf8 <_ZN3PID5resetEv>:

void PID::reset() {
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f04f 0200 	mov.w	r2, #0
 800bb06:	669a      	str	r2, [r3, #104]	; 0x68
	de_filt = 0;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f04f 0200 	mov.w	r2, #0
 800bb0e:	675a      	str	r2, [r3, #116]	; 0x74
	de_int = 0;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f04f 0200 	mov.w	r2, #0
 800bb16:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bc80      	pop	{r7}
 800bb20:	4770      	bx	lr

0800bb22 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800bb2c:	f04f 0100 	mov.w	r1, #0
 800bb30:	6838      	ldr	r0, [r7, #0]
 800bb32:	f7f5 fa9d 	bl	8001070 <__aeabi_fcmplt>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <_ZN3PID3sgnEf+0x1e>
 800bb3c:	23ff      	movs	r3, #255	; 0xff
 800bb3e:	e00a      	b.n	800bb56 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800bb40:	f04f 0100 	mov.w	r1, #0
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	f7f5 fab1 	bl	80010ac <__aeabi_fcmpgt>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <_ZN3PID3sgnEf+0x32>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <_ZN3PID3sgnEf+0x34>
  return 0;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
	...

0800bb60 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800bb74:	dd24      	ble.n	800bbc0 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f5 f888 	bl	8000c8c <__aeabi_i2f>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68b8      	ldr	r0, [r7, #8]
 800bb82:	f7f5 fa93 	bl	80010ac <__aeabi_fcmpgt>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d005      	beq.n	800bb98 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7f5 f87d 	bl	8000c8c <__aeabi_i2f>
 800bb92:	4603      	mov	r3, r0
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	e015      	b.n	800bbc4 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800bb98:	6838      	ldr	r0, [r7, #0]
 800bb9a:	f7f5 f877 	bl	8000c8c <__aeabi_i2f>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4619      	mov	r1, r3
 800bba2:	68b8      	ldr	r0, [r7, #8]
 800bba4:	f7f5 fa64 	bl	8001070 <__aeabi_fcmplt>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800bbae:	6838      	ldr	r0, [r7, #0]
 800bbb0:	f7f5 f86c 	bl	8000c8c <__aeabi_i2f>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e004      	b.n	800bbc4 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	e001      	b.n	800bbc4 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800bbc0:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <_ZN3PID3SatEfiii+0x70>)
 800bbc2:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800bbc4:	697b      	ldr	r3, [r7, #20]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	447a0000 	.word	0x447a0000

0800bbd4 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7f5 f852 	bl	8000c8c <__aeabi_i2f>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	4619      	mov	r1, r3
 800bbec:	68b8      	ldr	r0, [r7, #8]
 800bbee:	f7f5 fa5d 	bl	80010ac <__aeabi_fcmpgt>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7f5 f847 	bl	8000c8c <__aeabi_i2f>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	e012      	b.n	800bc2a <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800bc04:	6838      	ldr	r0, [r7, #0]
 800bc06:	f7f5 f841 	bl	8000c8c <__aeabi_i2f>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	68b8      	ldr	r0, [r7, #8]
 800bc10:	f7f5 fa2e 	bl	8001070 <__aeabi_fcmplt>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800bc1a:	6838      	ldr	r0, [r7, #0]
 800bc1c:	f7f5 f836 	bl	8000c8c <__aeabi_i2f>
 800bc20:	4603      	mov	r3, r0
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	e001      	b.n	800bc2a <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800bc2a:	697b      	ldr	r3, [r7, #20]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	807b      	strh	r3, [r7, #2]
	int dead_zone = 5;
 800bc40:	2305      	movs	r3, #5
 800bc42:	61bb      	str	r3, [r7, #24]
	int in_min  = 1000;
 800bc44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc48:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800bc4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bc4e:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800bc50:	f06f 031d 	mvn.w	r3, #29
 800bc54:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 800bc56:	231e      	movs	r3, #30
 800bc58:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 800bc5a:	887a      	ldrh	r2, [r7, #2]
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800bc62:	3304      	adds	r3, #4
 800bc64:	429a      	cmp	r2, r3
 800bc66:	dd09      	ble.n	800bc7c <_ZN3PID7pwm2angEt+0x48>
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800bc6e:	887b      	ldrh	r3, [r7, #2]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	db03      	blt.n	800bc7c <_ZN3PID7pwm2angEt+0x48>
		pwm_out = 1500;
 800bc74:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bc78:	83fb      	strh	r3, [r7, #30]
 800bc7a:	e001      	b.n	800bc80 <_ZN3PID7pwm2angEt+0x4c>
	}

	else {
		pwm_out = pwm;
 800bc7c:	887b      	ldrh	r3, [r7, #2]
 800bc7e:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800bc80:	8bfa      	ldrh	r2, [r7, #30]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	1a8a      	subs	r2, r1, r2
 800bc8c:	fb02 f203 	mul.w	r2, r2, r3
 800bc90:	6939      	ldr	r1, [r7, #16]
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	1acb      	subs	r3, r1, r3
 800bc96:	fb92 f2f3 	sdiv	r2, r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f4 fff4 	bl	8000c8c <__aeabi_i2f>
 800bca4:	4603      	mov	r3, r0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3720      	adds	r7, #32
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800bcba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcbe:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800bcc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bcc4:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800bcc6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bcca:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800bccc:	2364      	movs	r3, #100	; 0x64
 800bcce:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800bcd0:	887a      	ldrh	r2, [r7, #2]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	1a8a      	subs	r2, r1, r2
 800bcdc:	fb02 f203 	mul.w	r2, r2, r3
 800bce0:	6939      	ldr	r1, [r7, #16]
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	1acb      	subs	r3, r1, r3
 800bce6:	fb92 f2f3 	sdiv	r2, r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4413      	add	r3, r2
 800bcee:	425b      	negs	r3, r3
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f4 ffcb 	bl	8000c8c <__aeabi_i2f>
 800bcf6:	4603      	mov	r3, r0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3718      	adds	r7, #24
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b089      	sub	sp, #36	; 0x24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	607a      	str	r2, [r7, #4]
 800bd0c:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800bd0e:	4b1d      	ldr	r3, [pc, #116]	; (800bd84 <_ZN3PID7pwm2motEti+0x84>)
 800bd10:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800bd12:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <_ZN3PID7pwm2motEti+0x88>)
 800bd14:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800bd16:	f04f 0300 	mov.w	r3, #0
 800bd1a:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800bd1c:	4b1b      	ldr	r3, [pc, #108]	; (800bd8c <_ZN3PID7pwm2motEti+0x8c>)
 800bd1e:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7f4 ffb3 	bl	8000c8c <__aeabi_i2f>
 800bd26:	4604      	mov	r4, r0
 800bd28:	897b      	ldrh	r3, [r7, #10]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7f4 ffaa 	bl	8000c84 <__aeabi_ui2f>
 800bd30:	4603      	mov	r3, r0
 800bd32:	69f9      	ldr	r1, [r7, #28]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7f4 fef3 	bl	8000b20 <__aeabi_fsub>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7f4 fff8 	bl	8000d34 <__aeabi_fmul>
 800bd44:	4603      	mov	r3, r0
 800bd46:	461c      	mov	r4, r3
 800bd48:	6979      	ldr	r1, [r7, #20]
 800bd4a:	6938      	ldr	r0, [r7, #16]
 800bd4c:	f7f4 fee8 	bl	8000b20 <__aeabi_fsub>
 800bd50:	4603      	mov	r3, r0
 800bd52:	4619      	mov	r1, r3
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7f4 ffed 	bl	8000d34 <__aeabi_fmul>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461c      	mov	r4, r3
 800bd5e:	69f9      	ldr	r1, [r7, #28]
 800bd60:	69b8      	ldr	r0, [r7, #24]
 800bd62:	f7f4 fedd 	bl	8000b20 <__aeabi_fsub>
 800bd66:	4603      	mov	r3, r0
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7f5 f896 	bl	8000e9c <__aeabi_fdiv>
 800bd70:	4603      	mov	r3, r0
 800bd72:	6979      	ldr	r1, [r7, #20]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7f4 fed5 	bl	8000b24 <__addsf3>
 800bd7a:	4603      	mov	r3, r0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3724      	adds	r7, #36	; 0x24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd90      	pop	{r4, r7, pc}
 800bd84:	447a0000 	.word	0x447a0000
 800bd88:	44fa0000 	.word	0x44fa0000
 800bd8c:	44a5c000 	.word	0x44a5c000

0800bd90 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800bd9a:	4b16      	ldr	r3, [pc, #88]	; (800bdf4 <_ZN3PID5F2thrEf+0x64>)
 800bd9c:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800bd9e:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <_ZN3PID5F2thrEf+0x68>)
 800bda0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800bda2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800bda6:	6838      	ldr	r0, [r7, #0]
 800bda8:	f7f5 f878 	bl	8000e9c <__aeabi_fdiv>
 800bdac:	4603      	mov	r3, r0
 800bdae:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800bdb0:	69f9      	ldr	r1, [r7, #28]
 800bdb2:	6978      	ldr	r0, [r7, #20]
 800bdb4:	f7f5 f872 	bl	8000e9c <__aeabi_fdiv>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f5 fd7e 	bl	80018bc <_ZSt4sqrtf>
 800bdc0:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800bdc2:	490e      	ldr	r1, [pc, #56]	; (800bdfc <_ZN3PID5F2thrEf+0x6c>)
 800bdc4:	6938      	ldr	r0, [r7, #16]
 800bdc6:	f7f4 ffb5 	bl	8000d34 <__aeabi_fmul>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	69b9      	ldr	r1, [r7, #24]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f5 f864 	bl	8000e9c <__aeabi_fdiv>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	4909      	ldr	r1, [pc, #36]	; (800bdfc <_ZN3PID5F2thrEf+0x6c>)
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7f4 fea3 	bl	8000b24 <__addsf3>
 800bdde:	4603      	mov	r3, r0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f5 f9a9 	bl	8001138 <__aeabi_f2uiz>
 800bde6:	4603      	mov	r3, r0
 800bde8:	60fb      	str	r3, [r7, #12]
	return thr;
 800bdea:	68fb      	ldr	r3, [r7, #12]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	3359f513 	.word	0x3359f513
 800bdf8:	46896e00 	.word	0x46896e00
 800bdfc:	447a0000 	.word	0x447a0000

0800be00 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3328      	adds	r3, #40	; 0x28
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f876 	bl	800befe <_ZN3lpfD1Ev>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800be28:	68f9      	ldr	r1, [r7, #12]
 800be2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800be32:	68f9      	ldr	r1, [r7, #12]
 800be34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be38:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800be3c:	68f9      	ldr	r1, [r7, #12]
 800be3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be42:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr

0800be52 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800be52:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 fad5 	bl	8000418 <__aeabi_f2d>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fb27 	bl	80004c8 <__aeabi_dmul>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4690      	mov	r8, r2
 800be80:	4699      	mov	r9, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800be88:	6838      	ldr	r0, [r7, #0]
 800be8a:	f7f4 fac5 	bl	8000418 <__aeabi_f2d>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4620      	mov	r0, r4
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 fb17 	bl	80004c8 <__aeabi_dmul>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 f95b 	bl	800015c <__adddf3>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4690      	mov	r8, r2
 800beac:	4699      	mov	r9, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7f4 faad 	bl	8000418 <__aeabi_f2d>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4620      	mov	r0, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	f7f4 faff 	bl	80004c8 <__aeabi_dmul>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	f7f4 f943 	bl	800015c <__adddf3>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4610      	mov	r0, r2
 800bedc:	4619      	mov	r1, r3
 800bede:	f7f4 fdcb 	bl	8000a78 <__aeabi_d2f>
 800bee2:	4603      	mov	r3, r0
 800bee4:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
	y_ = y;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	605a      	str	r2, [r3, #4]
	return y;
 800bef2:	68fb      	ldr	r3, [r7, #12]

}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800befe <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bc80      	pop	{r7}
 800bf10:	4770      	bx	lr

0800bf12 <_ZdlPv>:
 800bf12:	f001 bf9b 	b.w	800de4c <free>

0800bf16 <_Znwj>:
 800bf16:	2801      	cmp	r0, #1
 800bf18:	bf38      	it	cc
 800bf1a:	2001      	movcc	r0, #1
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 ff8b 	bl	800de3c <malloc>
 800bf26:	b930      	cbnz	r0, 800bf36 <_Znwj+0x20>
 800bf28:	f000 f80c 	bl	800bf44 <_ZSt15get_new_handlerv>
 800bf2c:	b908      	cbnz	r0, 800bf32 <_Znwj+0x1c>
 800bf2e:	f001 ff53 	bl	800ddd8 <abort>
 800bf32:	4780      	blx	r0
 800bf34:	e7f4      	b.n	800bf20 <_Znwj+0xa>
 800bf36:	bd10      	pop	{r4, pc}

0800bf38 <_ZSt17__throw_bad_allocv>:
 800bf38:	b508      	push	{r3, lr}
 800bf3a:	f001 ff4d 	bl	800ddd8 <abort>

0800bf3e <_ZSt20__throw_length_errorPKc>:
 800bf3e:	b508      	push	{r3, lr}
 800bf40:	f001 ff4a 	bl	800ddd8 <abort>

0800bf44 <_ZSt15get_new_handlerv>:
 800bf44:	4b02      	ldr	r3, [pc, #8]	; (800bf50 <_ZSt15get_new_handlerv+0xc>)
 800bf46:	6818      	ldr	r0, [r3, #0]
 800bf48:	f3bf 8f5b 	dmb	ish
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	20000b48 	.word	0x20000b48

0800bf54 <cosf>:
 800bf54:	b507      	push	{r0, r1, r2, lr}
 800bf56:	4a18      	ldr	r2, [pc, #96]	; (800bfb8 <cosf+0x64>)
 800bf58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	4601      	mov	r1, r0
 800bf60:	dc03      	bgt.n	800bf6a <cosf+0x16>
 800bf62:	2100      	movs	r1, #0
 800bf64:	f001 f9d6 	bl	800d314 <__kernel_cosf>
 800bf68:	e004      	b.n	800bf74 <cosf+0x20>
 800bf6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bf6e:	db04      	blt.n	800bf7a <cosf+0x26>
 800bf70:	f7f4 fdd6 	bl	8000b20 <__aeabi_fsub>
 800bf74:	b003      	add	sp, #12
 800bf76:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf7a:	4669      	mov	r1, sp
 800bf7c:	f001 f81a 	bl	800cfb4 <__ieee754_rem_pio2f>
 800bf80:	f000 0203 	and.w	r2, r0, #3
 800bf84:	2a01      	cmp	r2, #1
 800bf86:	d005      	beq.n	800bf94 <cosf+0x40>
 800bf88:	2a02      	cmp	r2, #2
 800bf8a:	d00a      	beq.n	800bfa2 <cosf+0x4e>
 800bf8c:	b972      	cbnz	r2, 800bfac <cosf+0x58>
 800bf8e:	9901      	ldr	r1, [sp, #4]
 800bf90:	9800      	ldr	r0, [sp, #0]
 800bf92:	e7e7      	b.n	800bf64 <cosf+0x10>
 800bf94:	9901      	ldr	r1, [sp, #4]
 800bf96:	9800      	ldr	r0, [sp, #0]
 800bf98:	f001 fcf2 	bl	800d980 <__kernel_sinf>
 800bf9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bfa0:	e7e8      	b.n	800bf74 <cosf+0x20>
 800bfa2:	9901      	ldr	r1, [sp, #4]
 800bfa4:	9800      	ldr	r0, [sp, #0]
 800bfa6:	f001 f9b5 	bl	800d314 <__kernel_cosf>
 800bfaa:	e7f7      	b.n	800bf9c <cosf+0x48>
 800bfac:	2201      	movs	r2, #1
 800bfae:	9901      	ldr	r1, [sp, #4]
 800bfb0:	9800      	ldr	r0, [sp, #0]
 800bfb2:	f001 fce5 	bl	800d980 <__kernel_sinf>
 800bfb6:	e7dd      	b.n	800bf74 <cosf+0x20>
 800bfb8:	3f490fd8 	.word	0x3f490fd8

0800bfbc <pow>:
 800bfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	461f      	mov	r7, r3
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4689      	mov	r9, r1
 800bfc6:	4616      	mov	r6, r2
 800bfc8:	f000 f8ee 	bl	800c1a8 <__ieee754_pow>
 800bfcc:	4b4d      	ldr	r3, [pc, #308]	; (800c104 <pow+0x148>)
 800bfce:	4604      	mov	r4, r0
 800bfd0:	f993 3000 	ldrsb.w	r3, [r3]
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	d015      	beq.n	800c006 <pow+0x4a>
 800bfda:	4632      	mov	r2, r6
 800bfdc:	463b      	mov	r3, r7
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	f7f4 fd0b 	bl	80009fc <__aeabi_dcmpun>
 800bfe6:	b970      	cbnz	r0, 800c006 <pow+0x4a>
 800bfe8:	4642      	mov	r2, r8
 800bfea:	464b      	mov	r3, r9
 800bfec:	4640      	mov	r0, r8
 800bfee:	4649      	mov	r1, r9
 800bff0:	f7f4 fd04 	bl	80009fc <__aeabi_dcmpun>
 800bff4:	2200      	movs	r2, #0
 800bff6:	2300      	movs	r3, #0
 800bff8:	b148      	cbz	r0, 800c00e <pow+0x52>
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	f7f4 fccb 	bl	8000998 <__aeabi_dcmpeq>
 800c002:	2800      	cmp	r0, #0
 800c004:	d17b      	bne.n	800c0fe <pow+0x142>
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00e:	4640      	mov	r0, r8
 800c010:	4649      	mov	r1, r9
 800c012:	f7f4 fcc1 	bl	8000998 <__aeabi_dcmpeq>
 800c016:	b1e0      	cbz	r0, 800c052 <pow+0x96>
 800c018:	2200      	movs	r2, #0
 800c01a:	2300      	movs	r3, #0
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 fcba 	bl	8000998 <__aeabi_dcmpeq>
 800c024:	2800      	cmp	r0, #0
 800c026:	d16a      	bne.n	800c0fe <pow+0x142>
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f001 fd21 	bl	800da72 <finite>
 800c030:	2800      	cmp	r0, #0
 800c032:	d0e8      	beq.n	800c006 <pow+0x4a>
 800c034:	2200      	movs	r2, #0
 800c036:	2300      	movs	r3, #0
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 fcb6 	bl	80009ac <__aeabi_dcmplt>
 800c040:	2800      	cmp	r0, #0
 800c042:	d0e0      	beq.n	800c006 <pow+0x4a>
 800c044:	f001 fed0 	bl	800dde8 <__errno>
 800c048:	2321      	movs	r3, #33	; 0x21
 800c04a:	2400      	movs	r4, #0
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	4d2e      	ldr	r5, [pc, #184]	; (800c108 <pow+0x14c>)
 800c050:	e7d9      	b.n	800c006 <pow+0x4a>
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	f001 fd0c 	bl	800da72 <finite>
 800c05a:	bba8      	cbnz	r0, 800c0c8 <pow+0x10c>
 800c05c:	4640      	mov	r0, r8
 800c05e:	4649      	mov	r1, r9
 800c060:	f001 fd07 	bl	800da72 <finite>
 800c064:	b380      	cbz	r0, 800c0c8 <pow+0x10c>
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f001 fd02 	bl	800da72 <finite>
 800c06e:	b358      	cbz	r0, 800c0c8 <pow+0x10c>
 800c070:	4622      	mov	r2, r4
 800c072:	462b      	mov	r3, r5
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	f7f4 fcc0 	bl	80009fc <__aeabi_dcmpun>
 800c07c:	b160      	cbz	r0, 800c098 <pow+0xdc>
 800c07e:	f001 feb3 	bl	800dde8 <__errno>
 800c082:	2321      	movs	r3, #33	; 0x21
 800c084:	2200      	movs	r2, #0
 800c086:	6003      	str	r3, [r0, #0]
 800c088:	2300      	movs	r3, #0
 800c08a:	4610      	mov	r0, r2
 800c08c:	4619      	mov	r1, r3
 800c08e:	f7f4 fb45 	bl	800071c <__aeabi_ddiv>
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	e7b6      	b.n	800c006 <pow+0x4a>
 800c098:	f001 fea6 	bl	800dde8 <__errno>
 800c09c:	2322      	movs	r3, #34	; 0x22
 800c09e:	2200      	movs	r2, #0
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	f7f4 fc80 	bl	80009ac <__aeabi_dcmplt>
 800c0ac:	2400      	movs	r4, #0
 800c0ae:	b148      	cbz	r0, 800c0c4 <pow+0x108>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	f001 fcea 	bl	800da8c <rint>
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	f7f4 fc6c 	bl	8000998 <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d0c4      	beq.n	800c04e <pow+0x92>
 800c0c4:	4d11      	ldr	r5, [pc, #68]	; (800c10c <pow+0x150>)
 800c0c6:	e79e      	b.n	800c006 <pow+0x4a>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f7f4 fc62 	bl	8000998 <__aeabi_dcmpeq>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d096      	beq.n	800c006 <pow+0x4a>
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f001 fcc9 	bl	800da72 <finite>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d090      	beq.n	800c006 <pow+0x4a>
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	f001 fcc3 	bl	800da72 <finite>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d08a      	beq.n	800c006 <pow+0x4a>
 800c0f0:	f001 fe7a 	bl	800dde8 <__errno>
 800c0f4:	2322      	movs	r3, #34	; 0x22
 800c0f6:	2400      	movs	r4, #0
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	6003      	str	r3, [r0, #0]
 800c0fc:	e783      	b.n	800c006 <pow+0x4a>
 800c0fe:	2400      	movs	r4, #0
 800c100:	4d03      	ldr	r5, [pc, #12]	; (800c110 <pow+0x154>)
 800c102:	e780      	b.n	800c006 <pow+0x4a>
 800c104:	2000000d 	.word	0x2000000d
 800c108:	fff00000 	.word	0xfff00000
 800c10c:	7ff00000 	.word	0x7ff00000
 800c110:	3ff00000 	.word	0x3ff00000

0800c114 <asinf>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4604      	mov	r4, r0
 800c118:	f000 fe08 	bl	800cd2c <__ieee754_asinf>
 800c11c:	4b0e      	ldr	r3, [pc, #56]	; (800c158 <asinf+0x44>)
 800c11e:	4605      	mov	r5, r0
 800c120:	f993 3000 	ldrsb.w	r3, [r3]
 800c124:	3301      	adds	r3, #1
 800c126:	d015      	beq.n	800c154 <asinf+0x40>
 800c128:	4621      	mov	r1, r4
 800c12a:	4620      	mov	r0, r4
 800c12c:	f7f4 ffc8 	bl	80010c0 <__aeabi_fcmpun>
 800c130:	b980      	cbnz	r0, 800c154 <asinf+0x40>
 800c132:	4620      	mov	r0, r4
 800c134:	f001 fdba 	bl	800dcac <fabsf>
 800c138:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c13c:	f7f4 ffb6 	bl	80010ac <__aeabi_fcmpgt>
 800c140:	b140      	cbz	r0, 800c154 <asinf+0x40>
 800c142:	f001 fe51 	bl	800dde8 <__errno>
 800c146:	2321      	movs	r3, #33	; 0x21
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	4804      	ldr	r0, [pc, #16]	; (800c15c <asinf+0x48>)
 800c14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c150:	f001 bdf2 	b.w	800dd38 <nanf>
 800c154:	4628      	mov	r0, r5
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	2000000d 	.word	0x2000000d
 800c15c:	0800e148 	.word	0x0800e148

0800c160 <sqrtf>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4605      	mov	r5, r0
 800c164:	f001 f884 	bl	800d270 <__ieee754_sqrtf>
 800c168:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <sqrtf+0x40>)
 800c16a:	4604      	mov	r4, r0
 800c16c:	f993 3000 	ldrsb.w	r3, [r3]
 800c170:	3301      	adds	r3, #1
 800c172:	d012      	beq.n	800c19a <sqrtf+0x3a>
 800c174:	4629      	mov	r1, r5
 800c176:	4628      	mov	r0, r5
 800c178:	f7f4 ffa2 	bl	80010c0 <__aeabi_fcmpun>
 800c17c:	b968      	cbnz	r0, 800c19a <sqrtf+0x3a>
 800c17e:	2100      	movs	r1, #0
 800c180:	4628      	mov	r0, r5
 800c182:	f7f4 ff75 	bl	8001070 <__aeabi_fcmplt>
 800c186:	b140      	cbz	r0, 800c19a <sqrtf+0x3a>
 800c188:	f001 fe2e 	bl	800dde8 <__errno>
 800c18c:	2321      	movs	r3, #33	; 0x21
 800c18e:	2100      	movs	r1, #0
 800c190:	6003      	str	r3, [r0, #0]
 800c192:	4608      	mov	r0, r1
 800c194:	f7f4 fe82 	bl	8000e9c <__aeabi_fdiv>
 800c198:	4604      	mov	r4, r0
 800c19a:	4620      	mov	r0, r4
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	bf00      	nop
 800c1a0:	2000000d 	.word	0x2000000d
 800c1a4:	00000000 	.word	0x00000000

0800c1a8 <__ieee754_pow>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	b093      	sub	sp, #76	; 0x4c
 800c1ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1b2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800c1b6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c1ba:	ea55 0302 	orrs.w	r3, r5, r2
 800c1be:	4607      	mov	r7, r0
 800c1c0:	4688      	mov	r8, r1
 800c1c2:	f000 84bf 	beq.w	800cb44 <__ieee754_pow+0x99c>
 800c1c6:	4b7e      	ldr	r3, [pc, #504]	; (800c3c0 <__ieee754_pow+0x218>)
 800c1c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c1cc:	429c      	cmp	r4, r3
 800c1ce:	4689      	mov	r9, r1
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	dc09      	bgt.n	800c1e8 <__ieee754_pow+0x40>
 800c1d4:	d103      	bne.n	800c1de <__ieee754_pow+0x36>
 800c1d6:	b978      	cbnz	r0, 800c1f8 <__ieee754_pow+0x50>
 800c1d8:	42a5      	cmp	r5, r4
 800c1da:	dd02      	ble.n	800c1e2 <__ieee754_pow+0x3a>
 800c1dc:	e00c      	b.n	800c1f8 <__ieee754_pow+0x50>
 800c1de:	429d      	cmp	r5, r3
 800c1e0:	dc02      	bgt.n	800c1e8 <__ieee754_pow+0x40>
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	d10e      	bne.n	800c204 <__ieee754_pow+0x5c>
 800c1e6:	b16a      	cbz	r2, 800c204 <__ieee754_pow+0x5c>
 800c1e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c1ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c1f0:	ea54 030a 	orrs.w	r3, r4, sl
 800c1f4:	f000 84a6 	beq.w	800cb44 <__ieee754_pow+0x99c>
 800c1f8:	4872      	ldr	r0, [pc, #456]	; (800c3c4 <__ieee754_pow+0x21c>)
 800c1fa:	b013      	add	sp, #76	; 0x4c
 800c1fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c200:	f001 bc3e 	b.w	800da80 <nan>
 800c204:	f1b9 0f00 	cmp.w	r9, #0
 800c208:	da39      	bge.n	800c27e <__ieee754_pow+0xd6>
 800c20a:	4b6f      	ldr	r3, [pc, #444]	; (800c3c8 <__ieee754_pow+0x220>)
 800c20c:	429d      	cmp	r5, r3
 800c20e:	dc54      	bgt.n	800c2ba <__ieee754_pow+0x112>
 800c210:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c214:	429d      	cmp	r5, r3
 800c216:	f340 84a6 	ble.w	800cb66 <__ieee754_pow+0x9be>
 800c21a:	152b      	asrs	r3, r5, #20
 800c21c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c220:	2b14      	cmp	r3, #20
 800c222:	dd0f      	ble.n	800c244 <__ieee754_pow+0x9c>
 800c224:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c228:	fa22 f103 	lsr.w	r1, r2, r3
 800c22c:	fa01 f303 	lsl.w	r3, r1, r3
 800c230:	4293      	cmp	r3, r2
 800c232:	f040 8498 	bne.w	800cb66 <__ieee754_pow+0x9be>
 800c236:	f001 0101 	and.w	r1, r1, #1
 800c23a:	f1c1 0302 	rsb	r3, r1, #2
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	b182      	cbz	r2, 800c264 <__ieee754_pow+0xbc>
 800c242:	e05e      	b.n	800c302 <__ieee754_pow+0x15a>
 800c244:	2a00      	cmp	r2, #0
 800c246:	d15a      	bne.n	800c2fe <__ieee754_pow+0x156>
 800c248:	f1c3 0314 	rsb	r3, r3, #20
 800c24c:	fa45 f103 	asr.w	r1, r5, r3
 800c250:	fa01 f303 	lsl.w	r3, r1, r3
 800c254:	42ab      	cmp	r3, r5
 800c256:	f040 8483 	bne.w	800cb60 <__ieee754_pow+0x9b8>
 800c25a:	f001 0101 	and.w	r1, r1, #1
 800c25e:	f1c1 0302 	rsb	r3, r1, #2
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	4b59      	ldr	r3, [pc, #356]	; (800c3cc <__ieee754_pow+0x224>)
 800c266:	429d      	cmp	r5, r3
 800c268:	d130      	bne.n	800c2cc <__ieee754_pow+0x124>
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	f280 8474 	bge.w	800cb58 <__ieee754_pow+0x9b0>
 800c270:	463a      	mov	r2, r7
 800c272:	4643      	mov	r3, r8
 800c274:	2000      	movs	r0, #0
 800c276:	4955      	ldr	r1, [pc, #340]	; (800c3cc <__ieee754_pow+0x224>)
 800c278:	f7f4 fa50 	bl	800071c <__aeabi_ddiv>
 800c27c:	e02f      	b.n	800c2de <__ieee754_pow+0x136>
 800c27e:	2300      	movs	r3, #0
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	2a00      	cmp	r2, #0
 800c284:	d13d      	bne.n	800c302 <__ieee754_pow+0x15a>
 800c286:	4b4e      	ldr	r3, [pc, #312]	; (800c3c0 <__ieee754_pow+0x218>)
 800c288:	429d      	cmp	r5, r3
 800c28a:	d1eb      	bne.n	800c264 <__ieee754_pow+0xbc>
 800c28c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c290:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c294:	ea53 030a 	orrs.w	r3, r3, sl
 800c298:	f000 8454 	beq.w	800cb44 <__ieee754_pow+0x99c>
 800c29c:	4b4c      	ldr	r3, [pc, #304]	; (800c3d0 <__ieee754_pow+0x228>)
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	dd0d      	ble.n	800c2be <__ieee754_pow+0x116>
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	f280 8454 	bge.w	800cb50 <__ieee754_pow+0x9a8>
 800c2a8:	f04f 0b00 	mov.w	fp, #0
 800c2ac:	f04f 0c00 	mov.w	ip, #0
 800c2b0:	4658      	mov	r0, fp
 800c2b2:	4661      	mov	r1, ip
 800c2b4:	b013      	add	sp, #76	; 0x4c
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	e7e0      	b.n	800c280 <__ieee754_pow+0xd8>
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	daf2      	bge.n	800c2a8 <__ieee754_pow+0x100>
 800c2c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c2c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c2ca:	e7f1      	b.n	800c2b0 <__ieee754_pow+0x108>
 800c2cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c2d0:	d108      	bne.n	800c2e4 <__ieee754_pow+0x13c>
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4643      	mov	r3, r8
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	4641      	mov	r1, r8
 800c2da:	f7f4 f8f5 	bl	80004c8 <__aeabi_dmul>
 800c2de:	4683      	mov	fp, r0
 800c2e0:	468c      	mov	ip, r1
 800c2e2:	e7e5      	b.n	800c2b0 <__ieee754_pow+0x108>
 800c2e4:	4b3b      	ldr	r3, [pc, #236]	; (800c3d4 <__ieee754_pow+0x22c>)
 800c2e6:	429e      	cmp	r6, r3
 800c2e8:	d10b      	bne.n	800c302 <__ieee754_pow+0x15a>
 800c2ea:	f1b9 0f00 	cmp.w	r9, #0
 800c2ee:	db08      	blt.n	800c302 <__ieee754_pow+0x15a>
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	4641      	mov	r1, r8
 800c2f4:	b013      	add	sp, #76	; 0x4c
 800c2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f000 bc6b 	b.w	800cbd4 <__ieee754_sqrt>
 800c2fe:	2300      	movs	r3, #0
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	4638      	mov	r0, r7
 800c304:	4641      	mov	r1, r8
 800c306:	f001 fbb1 	bl	800da6c <fabs>
 800c30a:	4683      	mov	fp, r0
 800c30c:	468c      	mov	ip, r1
 800c30e:	f1ba 0f00 	cmp.w	sl, #0
 800c312:	d129      	bne.n	800c368 <__ieee754_pow+0x1c0>
 800c314:	b124      	cbz	r4, 800c320 <__ieee754_pow+0x178>
 800c316:	4b2d      	ldr	r3, [pc, #180]	; (800c3cc <__ieee754_pow+0x224>)
 800c318:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d123      	bne.n	800c368 <__ieee754_pow+0x1c0>
 800c320:	2e00      	cmp	r6, #0
 800c322:	da07      	bge.n	800c334 <__ieee754_pow+0x18c>
 800c324:	465a      	mov	r2, fp
 800c326:	4663      	mov	r3, ip
 800c328:	2000      	movs	r0, #0
 800c32a:	4928      	ldr	r1, [pc, #160]	; (800c3cc <__ieee754_pow+0x224>)
 800c32c:	f7f4 f9f6 	bl	800071c <__aeabi_ddiv>
 800c330:	4683      	mov	fp, r0
 800c332:	468c      	mov	ip, r1
 800c334:	f1b9 0f00 	cmp.w	r9, #0
 800c338:	daba      	bge.n	800c2b0 <__ieee754_pow+0x108>
 800c33a:	9b00      	ldr	r3, [sp, #0]
 800c33c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c340:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c344:	4323      	orrs	r3, r4
 800c346:	d108      	bne.n	800c35a <__ieee754_pow+0x1b2>
 800c348:	465a      	mov	r2, fp
 800c34a:	4663      	mov	r3, ip
 800c34c:	4658      	mov	r0, fp
 800c34e:	4661      	mov	r1, ip
 800c350:	f7f3 ff02 	bl	8000158 <__aeabi_dsub>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	e78e      	b.n	800c278 <__ieee754_pow+0xd0>
 800c35a:	9b00      	ldr	r3, [sp, #0]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d1a7      	bne.n	800c2b0 <__ieee754_pow+0x108>
 800c360:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c364:	469c      	mov	ip, r3
 800c366:	e7a3      	b.n	800c2b0 <__ieee754_pow+0x108>
 800c368:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800c36c:	3b01      	subs	r3, #1
 800c36e:	930c      	str	r3, [sp, #48]	; 0x30
 800c370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	4313      	orrs	r3, r2
 800c376:	d104      	bne.n	800c382 <__ieee754_pow+0x1da>
 800c378:	463a      	mov	r2, r7
 800c37a:	4643      	mov	r3, r8
 800c37c:	4638      	mov	r0, r7
 800c37e:	4641      	mov	r1, r8
 800c380:	e7e6      	b.n	800c350 <__ieee754_pow+0x1a8>
 800c382:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <__ieee754_pow+0x230>)
 800c384:	429d      	cmp	r5, r3
 800c386:	f340 80f9 	ble.w	800c57c <__ieee754_pow+0x3d4>
 800c38a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c38e:	429d      	cmp	r5, r3
 800c390:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <__ieee754_pow+0x228>)
 800c392:	dd09      	ble.n	800c3a8 <__ieee754_pow+0x200>
 800c394:	429c      	cmp	r4, r3
 800c396:	dc0c      	bgt.n	800c3b2 <__ieee754_pow+0x20a>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	da85      	bge.n	800c2a8 <__ieee754_pow+0x100>
 800c39c:	a306      	add	r3, pc, #24	; (adr r3, 800c3b8 <__ieee754_pow+0x210>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	e798      	b.n	800c2da <__ieee754_pow+0x132>
 800c3a8:	429c      	cmp	r4, r3
 800c3aa:	dbf5      	blt.n	800c398 <__ieee754_pow+0x1f0>
 800c3ac:	4b07      	ldr	r3, [pc, #28]	; (800c3cc <__ieee754_pow+0x224>)
 800c3ae:	429c      	cmp	r4, r3
 800c3b0:	dd14      	ble.n	800c3dc <__ieee754_pow+0x234>
 800c3b2:	2e00      	cmp	r6, #0
 800c3b4:	dcf2      	bgt.n	800c39c <__ieee754_pow+0x1f4>
 800c3b6:	e777      	b.n	800c2a8 <__ieee754_pow+0x100>
 800c3b8:	8800759c 	.word	0x8800759c
 800c3bc:	7e37e43c 	.word	0x7e37e43c
 800c3c0:	7ff00000 	.word	0x7ff00000
 800c3c4:	0800e148 	.word	0x0800e148
 800c3c8:	433fffff 	.word	0x433fffff
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	3fefffff 	.word	0x3fefffff
 800c3d4:	3fe00000 	.word	0x3fe00000
 800c3d8:	41e00000 	.word	0x41e00000
 800c3dc:	4661      	mov	r1, ip
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4658      	mov	r0, fp
 800c3e2:	4b61      	ldr	r3, [pc, #388]	; (800c568 <__ieee754_pow+0x3c0>)
 800c3e4:	f7f3 feb8 	bl	8000158 <__aeabi_dsub>
 800c3e8:	a355      	add	r3, pc, #340	; (adr r3, 800c540 <__ieee754_pow+0x398>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	f7f4 f869 	bl	80004c8 <__aeabi_dmul>
 800c3f6:	a354      	add	r3, pc, #336	; (adr r3, 800c548 <__ieee754_pow+0x3a0>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	4620      	mov	r0, r4
 800c402:	4629      	mov	r1, r5
 800c404:	f7f4 f860 	bl	80004c8 <__aeabi_dmul>
 800c408:	2200      	movs	r2, #0
 800c40a:	4682      	mov	sl, r0
 800c40c:	468b      	mov	fp, r1
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	4b56      	ldr	r3, [pc, #344]	; (800c56c <__ieee754_pow+0x3c4>)
 800c414:	f7f4 f858 	bl	80004c8 <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	a14c      	add	r1, pc, #304	; (adr r1, 800c550 <__ieee754_pow+0x3a8>)
 800c41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c422:	f7f3 fe99 	bl	8000158 <__aeabi_dsub>
 800c426:	4622      	mov	r2, r4
 800c428:	462b      	mov	r3, r5
 800c42a:	f7f4 f84d 	bl	80004c8 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	2000      	movs	r0, #0
 800c434:	494e      	ldr	r1, [pc, #312]	; (800c570 <__ieee754_pow+0x3c8>)
 800c436:	f7f3 fe8f 	bl	8000158 <__aeabi_dsub>
 800c43a:	4622      	mov	r2, r4
 800c43c:	462b      	mov	r3, r5
 800c43e:	4680      	mov	r8, r0
 800c440:	4689      	mov	r9, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 f83f 	bl	80004c8 <__aeabi_dmul>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f7f4 f839 	bl	80004c8 <__aeabi_dmul>
 800c456:	a340      	add	r3, pc, #256	; (adr r3, 800c558 <__ieee754_pow+0x3b0>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f7f4 f834 	bl	80004c8 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4650      	mov	r0, sl
 800c466:	4659      	mov	r1, fp
 800c468:	f7f3 fe76 	bl	8000158 <__aeabi_dsub>
 800c46c:	f04f 0a00 	mov.w	sl, #0
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4604      	mov	r4, r0
 800c476:	460d      	mov	r5, r1
 800c478:	4630      	mov	r0, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	f7f3 fe6e 	bl	800015c <__adddf3>
 800c480:	4632      	mov	r2, r6
 800c482:	463b      	mov	r3, r7
 800c484:	4650      	mov	r0, sl
 800c486:	468b      	mov	fp, r1
 800c488:	f7f3 fe66 	bl	8000158 <__aeabi_dsub>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	4620      	mov	r0, r4
 800c492:	4629      	mov	r1, r5
 800c494:	f7f3 fe60 	bl	8000158 <__aeabi_dsub>
 800c498:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c49c:	9b00      	ldr	r3, [sp, #0]
 800c49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	f04f 0600 	mov.w	r6, #0
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	bf0c      	ite	eq
 800c4ae:	4b31      	ldreq	r3, [pc, #196]	; (800c574 <__ieee754_pow+0x3cc>)
 800c4b0:	4b2d      	ldrne	r3, [pc, #180]	; (800c568 <__ieee754_pow+0x3c0>)
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ba:	e9cd 2300 	strd	r2, r3, [sp]
 800c4be:	4632      	mov	r2, r6
 800c4c0:	463b      	mov	r3, r7
 800c4c2:	f7f3 fe49 	bl	8000158 <__aeabi_dsub>
 800c4c6:	4652      	mov	r2, sl
 800c4c8:	465b      	mov	r3, fp
 800c4ca:	f7f3 fffd 	bl	80004c8 <__aeabi_dmul>
 800c4ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	4689      	mov	r9, r1
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f3 fff5 	bl	80004c8 <__aeabi_dmul>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	f7f3 fe39 	bl	800015c <__adddf3>
 800c4ea:	4632      	mov	r2, r6
 800c4ec:	463b      	mov	r3, r7
 800c4ee:	4680      	mov	r8, r0
 800c4f0:	4689      	mov	r9, r1
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	4659      	mov	r1, fp
 800c4f6:	f7f3 ffe7 	bl	80004c8 <__aeabi_dmul>
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	460d      	mov	r5, r1
 800c4fe:	460b      	mov	r3, r1
 800c500:	4602      	mov	r2, r0
 800c502:	4649      	mov	r1, r9
 800c504:	4640      	mov	r0, r8
 800c506:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c50a:	f7f3 fe27 	bl	800015c <__adddf3>
 800c50e:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <__ieee754_pow+0x3d0>)
 800c510:	4682      	mov	sl, r0
 800c512:	4299      	cmp	r1, r3
 800c514:	460f      	mov	r7, r1
 800c516:	460e      	mov	r6, r1
 800c518:	f340 82ed 	ble.w	800caf6 <__ieee754_pow+0x94e>
 800c51c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c520:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c524:	4303      	orrs	r3, r0
 800c526:	f000 81e7 	beq.w	800c8f8 <__ieee754_pow+0x750>
 800c52a:	a30d      	add	r3, pc, #52	; (adr r3, 800c560 <__ieee754_pow+0x3b8>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c534:	f7f3 ffc8 	bl	80004c8 <__aeabi_dmul>
 800c538:	a309      	add	r3, pc, #36	; (adr r3, 800c560 <__ieee754_pow+0x3b8>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	e6cc      	b.n	800c2da <__ieee754_pow+0x132>
 800c540:	60000000 	.word	0x60000000
 800c544:	3ff71547 	.word	0x3ff71547
 800c548:	f85ddf44 	.word	0xf85ddf44
 800c54c:	3e54ae0b 	.word	0x3e54ae0b
 800c550:	55555555 	.word	0x55555555
 800c554:	3fd55555 	.word	0x3fd55555
 800c558:	652b82fe 	.word	0x652b82fe
 800c55c:	3ff71547 	.word	0x3ff71547
 800c560:	8800759c 	.word	0x8800759c
 800c564:	7e37e43c 	.word	0x7e37e43c
 800c568:	3ff00000 	.word	0x3ff00000
 800c56c:	3fd00000 	.word	0x3fd00000
 800c570:	3fe00000 	.word	0x3fe00000
 800c574:	bff00000 	.word	0xbff00000
 800c578:	408fffff 	.word	0x408fffff
 800c57c:	4bd4      	ldr	r3, [pc, #848]	; (800c8d0 <__ieee754_pow+0x728>)
 800c57e:	2200      	movs	r2, #0
 800c580:	ea09 0303 	and.w	r3, r9, r3
 800c584:	b943      	cbnz	r3, 800c598 <__ieee754_pow+0x3f0>
 800c586:	4658      	mov	r0, fp
 800c588:	4661      	mov	r1, ip
 800c58a:	4bd2      	ldr	r3, [pc, #840]	; (800c8d4 <__ieee754_pow+0x72c>)
 800c58c:	f7f3 ff9c 	bl	80004c8 <__aeabi_dmul>
 800c590:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c594:	4683      	mov	fp, r0
 800c596:	460c      	mov	r4, r1
 800c598:	1523      	asrs	r3, r4, #20
 800c59a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c59e:	4413      	add	r3, r2
 800c5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5a2:	4bcd      	ldr	r3, [pc, #820]	; (800c8d8 <__ieee754_pow+0x730>)
 800c5a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c5a8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c5b2:	dd08      	ble.n	800c5c6 <__ieee754_pow+0x41e>
 800c5b4:	4bc9      	ldr	r3, [pc, #804]	; (800c8dc <__ieee754_pow+0x734>)
 800c5b6:	429c      	cmp	r4, r3
 800c5b8:	f340 819c 	ble.w	800c8f4 <__ieee754_pow+0x74c>
 800c5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5c6:	2600      	movs	r6, #0
 800c5c8:	00f3      	lsls	r3, r6, #3
 800c5ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c5cc:	4bc4      	ldr	r3, [pc, #784]	; (800c8e0 <__ieee754_pow+0x738>)
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5d8:	4629      	mov	r1, r5
 800c5da:	461a      	mov	r2, r3
 800c5dc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	f7f3 fdb9 	bl	8000158 <__aeabi_dsub>
 800c5e6:	46da      	mov	sl, fp
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c5f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5f4:	f7f3 fdb2 	bl	800015c <__adddf3>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	49b9      	ldr	r1, [pc, #740]	; (800c8e4 <__ieee754_pow+0x73c>)
 800c600:	f7f4 f88c 	bl	800071c <__aeabi_ddiv>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c60c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c610:	f7f3 ff5a 	bl	80004c8 <__aeabi_dmul>
 800c614:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c618:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c61c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c620:	2300      	movs	r3, #0
 800c622:	2200      	movs	r2, #0
 800c624:	46ab      	mov	fp, r5
 800c626:	106d      	asrs	r5, r5, #1
 800c628:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c632:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c636:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	4614      	mov	r4, r2
 800c640:	461d      	mov	r5, r3
 800c642:	f7f3 ff41 	bl	80004c8 <__aeabi_dmul>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c64e:	f7f3 fd83 	bl	8000158 <__aeabi_dsub>
 800c652:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	4620      	mov	r0, r4
 800c65c:	4629      	mov	r1, r5
 800c65e:	f7f3 fd7b 	bl	8000158 <__aeabi_dsub>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4650      	mov	r0, sl
 800c668:	4659      	mov	r1, fp
 800c66a:	f7f3 fd75 	bl	8000158 <__aeabi_dsub>
 800c66e:	4642      	mov	r2, r8
 800c670:	464b      	mov	r3, r9
 800c672:	f7f3 ff29 	bl	80004c8 <__aeabi_dmul>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	4630      	mov	r0, r6
 800c67c:	4639      	mov	r1, r7
 800c67e:	f7f3 fd6b 	bl	8000158 <__aeabi_dsub>
 800c682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c686:	f7f3 ff1f 	bl	80004c8 <__aeabi_dmul>
 800c68a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c68e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c692:	4610      	mov	r0, r2
 800c694:	4619      	mov	r1, r3
 800c696:	f7f3 ff17 	bl	80004c8 <__aeabi_dmul>
 800c69a:	a37b      	add	r3, pc, #492	; (adr r3, 800c888 <__ieee754_pow+0x6e0>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	f7f3 ff10 	bl	80004c8 <__aeabi_dmul>
 800c6a8:	a379      	add	r3, pc, #484	; (adr r3, 800c890 <__ieee754_pow+0x6e8>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f7f3 fd55 	bl	800015c <__adddf3>
 800c6b2:	4622      	mov	r2, r4
 800c6b4:	462b      	mov	r3, r5
 800c6b6:	f7f3 ff07 	bl	80004c8 <__aeabi_dmul>
 800c6ba:	a377      	add	r3, pc, #476	; (adr r3, 800c898 <__ieee754_pow+0x6f0>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 fd4c 	bl	800015c <__adddf3>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	462b      	mov	r3, r5
 800c6c8:	f7f3 fefe 	bl	80004c8 <__aeabi_dmul>
 800c6cc:	a374      	add	r3, pc, #464	; (adr r3, 800c8a0 <__ieee754_pow+0x6f8>)
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	f7f3 fd43 	bl	800015c <__adddf3>
 800c6d6:	4622      	mov	r2, r4
 800c6d8:	462b      	mov	r3, r5
 800c6da:	f7f3 fef5 	bl	80004c8 <__aeabi_dmul>
 800c6de:	a372      	add	r3, pc, #456	; (adr r3, 800c8a8 <__ieee754_pow+0x700>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 fd3a 	bl	800015c <__adddf3>
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	f7f3 feec 	bl	80004c8 <__aeabi_dmul>
 800c6f0:	a36f      	add	r3, pc, #444	; (adr r3, 800c8b0 <__ieee754_pow+0x708>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 fd31 	bl	800015c <__adddf3>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	460f      	mov	r7, r1
 800c700:	462b      	mov	r3, r5
 800c702:	4620      	mov	r0, r4
 800c704:	4629      	mov	r1, r5
 800c706:	f7f3 fedf 	bl	80004c8 <__aeabi_dmul>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f3 fed9 	bl	80004c8 <__aeabi_dmul>
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c71e:	4642      	mov	r2, r8
 800c720:	464b      	mov	r3, r9
 800c722:	f7f3 fd1b 	bl	800015c <__adddf3>
 800c726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c72a:	f7f3 fecd 	bl	80004c8 <__aeabi_dmul>
 800c72e:	4622      	mov	r2, r4
 800c730:	462b      	mov	r3, r5
 800c732:	f7f3 fd13 	bl	800015c <__adddf3>
 800c736:	4642      	mov	r2, r8
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	464b      	mov	r3, r9
 800c73e:	4640      	mov	r0, r8
 800c740:	4649      	mov	r1, r9
 800c742:	f7f3 fec1 	bl	80004c8 <__aeabi_dmul>
 800c746:	2200      	movs	r2, #0
 800c748:	4b67      	ldr	r3, [pc, #412]	; (800c8e8 <__ieee754_pow+0x740>)
 800c74a:	4682      	mov	sl, r0
 800c74c:	468b      	mov	fp, r1
 800c74e:	f7f3 fd05 	bl	800015c <__adddf3>
 800c752:	4632      	mov	r2, r6
 800c754:	463b      	mov	r3, r7
 800c756:	f7f3 fd01 	bl	800015c <__adddf3>
 800c75a:	9c04      	ldr	r4, [sp, #16]
 800c75c:	460d      	mov	r5, r1
 800c75e:	4622      	mov	r2, r4
 800c760:	460b      	mov	r3, r1
 800c762:	4640      	mov	r0, r8
 800c764:	4649      	mov	r1, r9
 800c766:	f7f3 feaf 	bl	80004c8 <__aeabi_dmul>
 800c76a:	2200      	movs	r2, #0
 800c76c:	4680      	mov	r8, r0
 800c76e:	4689      	mov	r9, r1
 800c770:	4620      	mov	r0, r4
 800c772:	4629      	mov	r1, r5
 800c774:	4b5c      	ldr	r3, [pc, #368]	; (800c8e8 <__ieee754_pow+0x740>)
 800c776:	f7f3 fcef 	bl	8000158 <__aeabi_dsub>
 800c77a:	4652      	mov	r2, sl
 800c77c:	465b      	mov	r3, fp
 800c77e:	f7f3 fceb 	bl	8000158 <__aeabi_dsub>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f3 fce5 	bl	8000158 <__aeabi_dsub>
 800c78e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c792:	f7f3 fe99 	bl	80004c8 <__aeabi_dmul>
 800c796:	4622      	mov	r2, r4
 800c798:	4606      	mov	r6, r0
 800c79a:	460f      	mov	r7, r1
 800c79c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	f7f3 fe91 	bl	80004c8 <__aeabi_dmul>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 fcd5 	bl	800015c <__adddf3>
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	460f      	mov	r7, r1
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	4649      	mov	r1, r9
 800c7be:	f7f3 fccd 	bl	800015c <__adddf3>
 800c7c2:	a33d      	add	r3, pc, #244	; (adr r3, 800c8b8 <__ieee754_pow+0x710>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	9c04      	ldr	r4, [sp, #16]
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f7f3 fe7b 	bl	80004c8 <__aeabi_dmul>
 800c7d2:	4642      	mov	r2, r8
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f3 fcbb 	bl	8000158 <__aeabi_dsub>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	f7f3 fcb5 	bl	8000158 <__aeabi_dsub>
 800c7ee:	a334      	add	r3, pc, #208	; (adr r3, 800c8c0 <__ieee754_pow+0x718>)
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	f7f3 fe68 	bl	80004c8 <__aeabi_dmul>
 800c7f8:	a333      	add	r3, pc, #204	; (adr r3, 800c8c8 <__ieee754_pow+0x720>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	4606      	mov	r6, r0
 800c800:	460f      	mov	r7, r1
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f3 fe5f 	bl	80004c8 <__aeabi_dmul>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4630      	mov	r0, r6
 800c810:	4639      	mov	r1, r7
 800c812:	f7f3 fca3 	bl	800015c <__adddf3>
 800c816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c818:	4b34      	ldr	r3, [pc, #208]	; (800c8ec <__ieee754_pow+0x744>)
 800c81a:	4413      	add	r3, r2
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fc9c 	bl	800015c <__adddf3>
 800c824:	4680      	mov	r8, r0
 800c826:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c828:	4689      	mov	r9, r1
 800c82a:	f7f3 fde3 	bl	80003f4 <__aeabi_i2d>
 800c82e:	4604      	mov	r4, r0
 800c830:	460d      	mov	r5, r1
 800c832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c834:	4b2e      	ldr	r3, [pc, #184]	; (800c8f0 <__ieee754_pow+0x748>)
 800c836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c83a:	4413      	add	r3, r2
 800c83c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c840:	4642      	mov	r2, r8
 800c842:	464b      	mov	r3, r9
 800c844:	f7f3 fc8a 	bl	800015c <__adddf3>
 800c848:	4632      	mov	r2, r6
 800c84a:	463b      	mov	r3, r7
 800c84c:	f7f3 fc86 	bl	800015c <__adddf3>
 800c850:	4622      	mov	r2, r4
 800c852:	462b      	mov	r3, r5
 800c854:	f7f3 fc82 	bl	800015c <__adddf3>
 800c858:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c85c:	4622      	mov	r2, r4
 800c85e:	462b      	mov	r3, r5
 800c860:	4650      	mov	r0, sl
 800c862:	468b      	mov	fp, r1
 800c864:	f7f3 fc78 	bl	8000158 <__aeabi_dsub>
 800c868:	4632      	mov	r2, r6
 800c86a:	463b      	mov	r3, r7
 800c86c:	f7f3 fc74 	bl	8000158 <__aeabi_dsub>
 800c870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c874:	f7f3 fc70 	bl	8000158 <__aeabi_dsub>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4640      	mov	r0, r8
 800c87e:	4649      	mov	r1, r9
 800c880:	e608      	b.n	800c494 <__ieee754_pow+0x2ec>
 800c882:	bf00      	nop
 800c884:	f3af 8000 	nop.w
 800c888:	4a454eef 	.word	0x4a454eef
 800c88c:	3fca7e28 	.word	0x3fca7e28
 800c890:	93c9db65 	.word	0x93c9db65
 800c894:	3fcd864a 	.word	0x3fcd864a
 800c898:	a91d4101 	.word	0xa91d4101
 800c89c:	3fd17460 	.word	0x3fd17460
 800c8a0:	518f264d 	.word	0x518f264d
 800c8a4:	3fd55555 	.word	0x3fd55555
 800c8a8:	db6fabff 	.word	0xdb6fabff
 800c8ac:	3fdb6db6 	.word	0x3fdb6db6
 800c8b0:	33333303 	.word	0x33333303
 800c8b4:	3fe33333 	.word	0x3fe33333
 800c8b8:	e0000000 	.word	0xe0000000
 800c8bc:	3feec709 	.word	0x3feec709
 800c8c0:	dc3a03fd 	.word	0xdc3a03fd
 800c8c4:	3feec709 	.word	0x3feec709
 800c8c8:	145b01f5 	.word	0x145b01f5
 800c8cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	43400000 	.word	0x43400000
 800c8d8:	0003988e 	.word	0x0003988e
 800c8dc:	000bb679 	.word	0x000bb679
 800c8e0:	0800e150 	.word	0x0800e150
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	40080000 	.word	0x40080000
 800c8ec:	0800e170 	.word	0x0800e170
 800c8f0:	0800e160 	.word	0x0800e160
 800c8f4:	2601      	movs	r6, #1
 800c8f6:	e667      	b.n	800c5c8 <__ieee754_pow+0x420>
 800c8f8:	a39d      	add	r3, pc, #628	; (adr r3, 800cb70 <__ieee754_pow+0x9c8>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f3 fc2b 	bl	800015c <__adddf3>
 800c906:	4622      	mov	r2, r4
 800c908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c90c:	462b      	mov	r3, r5
 800c90e:	4650      	mov	r0, sl
 800c910:	4639      	mov	r1, r7
 800c912:	f7f3 fc21 	bl	8000158 <__aeabi_dsub>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c91e:	f7f4 f863 	bl	80009e8 <__aeabi_dcmpgt>
 800c922:	2800      	cmp	r0, #0
 800c924:	f47f ae01 	bne.w	800c52a <__ieee754_pow+0x382>
 800c928:	4aa5      	ldr	r2, [pc, #660]	; (800cbc0 <__ieee754_pow+0xa18>)
 800c92a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c92e:	4293      	cmp	r3, r2
 800c930:	f340 8103 	ble.w	800cb3a <__ieee754_pow+0x992>
 800c934:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c938:	2000      	movs	r0, #0
 800c93a:	151b      	asrs	r3, r3, #20
 800c93c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c940:	fa4a f303 	asr.w	r3, sl, r3
 800c944:	4433      	add	r3, r6
 800c946:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c94a:	4f9e      	ldr	r7, [pc, #632]	; (800cbc4 <__ieee754_pow+0xa1c>)
 800c94c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c950:	4117      	asrs	r7, r2
 800c952:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c956:	ea23 0107 	bic.w	r1, r3, r7
 800c95a:	f1c2 0214 	rsb	r2, r2, #20
 800c95e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c962:	460b      	mov	r3, r1
 800c964:	fa4a fa02 	asr.w	sl, sl, r2
 800c968:	2e00      	cmp	r6, #0
 800c96a:	4602      	mov	r2, r0
 800c96c:	4629      	mov	r1, r5
 800c96e:	4620      	mov	r0, r4
 800c970:	bfb8      	it	lt
 800c972:	f1ca 0a00 	rsblt	sl, sl, #0
 800c976:	f7f3 fbef 	bl	8000158 <__aeabi_dsub>
 800c97a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c982:	2400      	movs	r4, #0
 800c984:	4642      	mov	r2, r8
 800c986:	464b      	mov	r3, r9
 800c988:	f7f3 fbe8 	bl	800015c <__adddf3>
 800c98c:	a37a      	add	r3, pc, #488	; (adr r3, 800cb78 <__ieee754_pow+0x9d0>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	4620      	mov	r0, r4
 800c994:	460d      	mov	r5, r1
 800c996:	f7f3 fd97 	bl	80004c8 <__aeabi_dmul>
 800c99a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7f3 fbd7 	bl	8000158 <__aeabi_dsub>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f3 fbd1 	bl	8000158 <__aeabi_dsub>
 800c9b6:	a372      	add	r3, pc, #456	; (adr r3, 800cb80 <__ieee754_pow+0x9d8>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f7f3 fd84 	bl	80004c8 <__aeabi_dmul>
 800c9c0:	a371      	add	r3, pc, #452	; (adr r3, 800cb88 <__ieee754_pow+0x9e0>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	4689      	mov	r9, r1
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7f3 fd7b 	bl	80004c8 <__aeabi_dmul>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f3 fbbf 	bl	800015c <__adddf3>
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	f7f3 fbb7 	bl	800015c <__adddf3>
 800c9ee:	4632      	mov	r2, r6
 800c9f0:	463b      	mov	r3, r7
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	f7f3 fbaf 	bl	8000158 <__aeabi_dsub>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7f3 fba9 	bl	8000158 <__aeabi_dsub>
 800ca06:	4642      	mov	r2, r8
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	464b      	mov	r3, r9
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f3 fd59 	bl	80004c8 <__aeabi_dmul>
 800ca16:	a35e      	add	r3, pc, #376	; (adr r3, 800cb90 <__ieee754_pow+0x9e8>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	460d      	mov	r5, r1
 800ca20:	f7f3 fd52 	bl	80004c8 <__aeabi_dmul>
 800ca24:	a35c      	add	r3, pc, #368	; (adr r3, 800cb98 <__ieee754_pow+0x9f0>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	f7f3 fb95 	bl	8000158 <__aeabi_dsub>
 800ca2e:	4622      	mov	r2, r4
 800ca30:	462b      	mov	r3, r5
 800ca32:	f7f3 fd49 	bl	80004c8 <__aeabi_dmul>
 800ca36:	a35a      	add	r3, pc, #360	; (adr r3, 800cba0 <__ieee754_pow+0x9f8>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f7f3 fb8e 	bl	800015c <__adddf3>
 800ca40:	4622      	mov	r2, r4
 800ca42:	462b      	mov	r3, r5
 800ca44:	f7f3 fd40 	bl	80004c8 <__aeabi_dmul>
 800ca48:	a357      	add	r3, pc, #348	; (adr r3, 800cba8 <__ieee754_pow+0xa00>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 fb83 	bl	8000158 <__aeabi_dsub>
 800ca52:	4622      	mov	r2, r4
 800ca54:	462b      	mov	r3, r5
 800ca56:	f7f3 fd37 	bl	80004c8 <__aeabi_dmul>
 800ca5a:	a355      	add	r3, pc, #340	; (adr r3, 800cbb0 <__ieee754_pow+0xa08>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fb7c 	bl	800015c <__adddf3>
 800ca64:	4622      	mov	r2, r4
 800ca66:	462b      	mov	r3, r5
 800ca68:	f7f3 fd2e 	bl	80004c8 <__aeabi_dmul>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4640      	mov	r0, r8
 800ca72:	4649      	mov	r1, r9
 800ca74:	f7f3 fb70 	bl	8000158 <__aeabi_dsub>
 800ca78:	4604      	mov	r4, r0
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4640      	mov	r0, r8
 800ca82:	4649      	mov	r1, r9
 800ca84:	f7f3 fd20 	bl	80004c8 <__aeabi_dmul>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7f3 fb5f 	bl	8000158 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa2:	f7f3 fe3b 	bl	800071c <__aeabi_ddiv>
 800caa6:	4632      	mov	r2, r6
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	463b      	mov	r3, r7
 800caae:	4640      	mov	r0, r8
 800cab0:	4649      	mov	r1, r9
 800cab2:	f7f3 fd09 	bl	80004c8 <__aeabi_dmul>
 800cab6:	4632      	mov	r2, r6
 800cab8:	463b      	mov	r3, r7
 800caba:	f7f3 fb4f 	bl	800015c <__adddf3>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4620      	mov	r0, r4
 800cac4:	4629      	mov	r1, r5
 800cac6:	f7f3 fb47 	bl	8000158 <__aeabi_dsub>
 800caca:	4642      	mov	r2, r8
 800cacc:	464b      	mov	r3, r9
 800cace:	f7f3 fb43 	bl	8000158 <__aeabi_dsub>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	2000      	movs	r0, #0
 800cad8:	493b      	ldr	r1, [pc, #236]	; (800cbc8 <__ieee754_pow+0xa20>)
 800cada:	f7f3 fb3d 	bl	8000158 <__aeabi_dsub>
 800cade:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cae2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cae6:	da2b      	bge.n	800cb40 <__ieee754_pow+0x998>
 800cae8:	4652      	mov	r2, sl
 800caea:	f001 f859 	bl	800dba0 <scalbn>
 800caee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caf2:	f7ff bbf2 	b.w	800c2da <__ieee754_pow+0x132>
 800caf6:	4b35      	ldr	r3, [pc, #212]	; (800cbcc <__ieee754_pow+0xa24>)
 800caf8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cafc:	429f      	cmp	r7, r3
 800cafe:	f77f af13 	ble.w	800c928 <__ieee754_pow+0x780>
 800cb02:	4b33      	ldr	r3, [pc, #204]	; (800cbd0 <__ieee754_pow+0xa28>)
 800cb04:	440b      	add	r3, r1
 800cb06:	4303      	orrs	r3, r0
 800cb08:	d00b      	beq.n	800cb22 <__ieee754_pow+0x97a>
 800cb0a:	a32b      	add	r3, pc, #172	; (adr r3, 800cbb8 <__ieee754_pow+0xa10>)
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb14:	f7f3 fcd8 	bl	80004c8 <__aeabi_dmul>
 800cb18:	a327      	add	r3, pc, #156	; (adr r3, 800cbb8 <__ieee754_pow+0xa10>)
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f7ff bbdc 	b.w	800c2da <__ieee754_pow+0x132>
 800cb22:	4622      	mov	r2, r4
 800cb24:	462b      	mov	r3, r5
 800cb26:	f7f3 fb17 	bl	8000158 <__aeabi_dsub>
 800cb2a:	4642      	mov	r2, r8
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	f7f3 ff51 	bl	80009d4 <__aeabi_dcmpge>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	f43f aef8 	beq.w	800c928 <__ieee754_pow+0x780>
 800cb38:	e7e7      	b.n	800cb0a <__ieee754_pow+0x962>
 800cb3a:	f04f 0a00 	mov.w	sl, #0
 800cb3e:	e71e      	b.n	800c97e <__ieee754_pow+0x7d6>
 800cb40:	4621      	mov	r1, r4
 800cb42:	e7d4      	b.n	800caee <__ieee754_pow+0x946>
 800cb44:	f04f 0b00 	mov.w	fp, #0
 800cb48:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cbc8 <__ieee754_pow+0xa20>
 800cb4c:	f7ff bbb0 	b.w	800c2b0 <__ieee754_pow+0x108>
 800cb50:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cb54:	f7ff bbac 	b.w	800c2b0 <__ieee754_pow+0x108>
 800cb58:	4638      	mov	r0, r7
 800cb5a:	4641      	mov	r1, r8
 800cb5c:	f7ff bbbf 	b.w	800c2de <__ieee754_pow+0x136>
 800cb60:	9200      	str	r2, [sp, #0]
 800cb62:	f7ff bb7f 	b.w	800c264 <__ieee754_pow+0xbc>
 800cb66:	2300      	movs	r3, #0
 800cb68:	f7ff bb69 	b.w	800c23e <__ieee754_pow+0x96>
 800cb6c:	f3af 8000 	nop.w
 800cb70:	652b82fe 	.word	0x652b82fe
 800cb74:	3c971547 	.word	0x3c971547
 800cb78:	00000000 	.word	0x00000000
 800cb7c:	3fe62e43 	.word	0x3fe62e43
 800cb80:	fefa39ef 	.word	0xfefa39ef
 800cb84:	3fe62e42 	.word	0x3fe62e42
 800cb88:	0ca86c39 	.word	0x0ca86c39
 800cb8c:	be205c61 	.word	0xbe205c61
 800cb90:	72bea4d0 	.word	0x72bea4d0
 800cb94:	3e663769 	.word	0x3e663769
 800cb98:	c5d26bf1 	.word	0xc5d26bf1
 800cb9c:	3ebbbd41 	.word	0x3ebbbd41
 800cba0:	af25de2c 	.word	0xaf25de2c
 800cba4:	3f11566a 	.word	0x3f11566a
 800cba8:	16bebd93 	.word	0x16bebd93
 800cbac:	3f66c16c 	.word	0x3f66c16c
 800cbb0:	5555553e 	.word	0x5555553e
 800cbb4:	3fc55555 	.word	0x3fc55555
 800cbb8:	c2f8f359 	.word	0xc2f8f359
 800cbbc:	01a56e1f 	.word	0x01a56e1f
 800cbc0:	3fe00000 	.word	0x3fe00000
 800cbc4:	000fffff 	.word	0x000fffff
 800cbc8:	3ff00000 	.word	0x3ff00000
 800cbcc:	4090cbff 	.word	0x4090cbff
 800cbd0:	3f6f3400 	.word	0x3f6f3400

0800cbd4 <__ieee754_sqrt>:
 800cbd4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800cd28 <__ieee754_sqrt+0x154>
 800cbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbdc:	ea3c 0c01 	bics.w	ip, ip, r1
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	460d      	mov	r5, r1
 800cbe6:	460a      	mov	r2, r1
 800cbe8:	4607      	mov	r7, r0
 800cbea:	4604      	mov	r4, r0
 800cbec:	d10e      	bne.n	800cc0c <__ieee754_sqrt+0x38>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	f7f3 fc6a 	bl	80004c8 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 faae 	bl	800015c <__adddf3>
 800cc00:	4606      	mov	r6, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	4630      	mov	r0, r6
 800cc06:	4629      	mov	r1, r5
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	dc0d      	bgt.n	800cc2c <__ieee754_sqrt+0x58>
 800cc10:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cc14:	ea5c 0707 	orrs.w	r7, ip, r7
 800cc18:	d0f4      	beq.n	800cc04 <__ieee754_sqrt+0x30>
 800cc1a:	b139      	cbz	r1, 800cc2c <__ieee754_sqrt+0x58>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	f7f3 fa9b 	bl	8000158 <__aeabi_dsub>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	f7f3 fd79 	bl	800071c <__aeabi_ddiv>
 800cc2a:	e7e9      	b.n	800cc00 <__ieee754_sqrt+0x2c>
 800cc2c:	1512      	asrs	r2, r2, #20
 800cc2e:	d074      	beq.n	800cd1a <__ieee754_sqrt+0x146>
 800cc30:	2000      	movs	r0, #0
 800cc32:	07d5      	lsls	r5, r2, #31
 800cc34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc38:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800cc3c:	bf5e      	ittt	pl
 800cc3e:	0fe3      	lsrpl	r3, r4, #31
 800cc40:	0064      	lslpl	r4, r4, #1
 800cc42:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800cc46:	0fe3      	lsrs	r3, r4, #31
 800cc48:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cc4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800cc50:	2516      	movs	r5, #22
 800cc52:	4601      	mov	r1, r0
 800cc54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cc58:	1076      	asrs	r6, r6, #1
 800cc5a:	0064      	lsls	r4, r4, #1
 800cc5c:	188f      	adds	r7, r1, r2
 800cc5e:	429f      	cmp	r7, r3
 800cc60:	bfde      	ittt	le
 800cc62:	1bdb      	suble	r3, r3, r7
 800cc64:	18b9      	addle	r1, r7, r2
 800cc66:	1880      	addle	r0, r0, r2
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	3d01      	subs	r5, #1
 800cc6c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cc70:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc74:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cc78:	d1f0      	bne.n	800cc5c <__ieee754_sqrt+0x88>
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	f04f 0e20 	mov.w	lr, #32
 800cc80:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cc84:	428b      	cmp	r3, r1
 800cc86:	eb07 0c05 	add.w	ip, r7, r5
 800cc8a:	dc02      	bgt.n	800cc92 <__ieee754_sqrt+0xbe>
 800cc8c:	d113      	bne.n	800ccb6 <__ieee754_sqrt+0xe2>
 800cc8e:	45a4      	cmp	ip, r4
 800cc90:	d811      	bhi.n	800ccb6 <__ieee754_sqrt+0xe2>
 800cc92:	f1bc 0f00 	cmp.w	ip, #0
 800cc96:	eb0c 0507 	add.w	r5, ip, r7
 800cc9a:	da43      	bge.n	800cd24 <__ieee754_sqrt+0x150>
 800cc9c:	2d00      	cmp	r5, #0
 800cc9e:	db41      	blt.n	800cd24 <__ieee754_sqrt+0x150>
 800cca0:	f101 0801 	add.w	r8, r1, #1
 800cca4:	1a5b      	subs	r3, r3, r1
 800cca6:	4641      	mov	r1, r8
 800cca8:	45a4      	cmp	ip, r4
 800ccaa:	bf88      	it	hi
 800ccac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ccb0:	eba4 040c 	sub.w	r4, r4, ip
 800ccb4:	443a      	add	r2, r7
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	f1be 0e01 	subs.w	lr, lr, #1
 800ccbc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ccc0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ccc4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ccc8:	d1dc      	bne.n	800cc84 <__ieee754_sqrt+0xb0>
 800ccca:	4323      	orrs	r3, r4
 800cccc:	d006      	beq.n	800ccdc <__ieee754_sqrt+0x108>
 800ccce:	1c54      	adds	r4, r2, #1
 800ccd0:	bf0b      	itete	eq
 800ccd2:	4672      	moveq	r2, lr
 800ccd4:	3201      	addne	r2, #1
 800ccd6:	3001      	addeq	r0, #1
 800ccd8:	f022 0201 	bicne.w	r2, r2, #1
 800ccdc:	1043      	asrs	r3, r0, #1
 800ccde:	07c1      	lsls	r1, r0, #31
 800cce0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cce4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cce8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ccec:	bf48      	it	mi
 800ccee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ccf8:	e782      	b.n	800cc00 <__ieee754_sqrt+0x2c>
 800ccfa:	0ae3      	lsrs	r3, r4, #11
 800ccfc:	3915      	subs	r1, #21
 800ccfe:	0564      	lsls	r4, r4, #21
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d0fa      	beq.n	800ccfa <__ieee754_sqrt+0x126>
 800cd04:	02de      	lsls	r6, r3, #11
 800cd06:	d50a      	bpl.n	800cd1e <__ieee754_sqrt+0x14a>
 800cd08:	f1c2 0020 	rsb	r0, r2, #32
 800cd0c:	fa24 f000 	lsr.w	r0, r4, r0
 800cd10:	1e55      	subs	r5, r2, #1
 800cd12:	4094      	lsls	r4, r2
 800cd14:	4303      	orrs	r3, r0
 800cd16:	1b4a      	subs	r2, r1, r5
 800cd18:	e78a      	b.n	800cc30 <__ieee754_sqrt+0x5c>
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	e7f0      	b.n	800cd00 <__ieee754_sqrt+0x12c>
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	3201      	adds	r2, #1
 800cd22:	e7ef      	b.n	800cd04 <__ieee754_sqrt+0x130>
 800cd24:	4688      	mov	r8, r1
 800cd26:	e7bd      	b.n	800cca4 <__ieee754_sqrt+0xd0>
 800cd28:	7ff00000 	.word	0x7ff00000

0800cd2c <__ieee754_asinf>:
 800cd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800cd34:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cd38:	4604      	mov	r4, r0
 800cd3a:	4605      	mov	r5, r0
 800cd3c:	d10c      	bne.n	800cd58 <__ieee754_asinf+0x2c>
 800cd3e:	498d      	ldr	r1, [pc, #564]	; (800cf74 <__ieee754_asinf+0x248>)
 800cd40:	f7f3 fff8 	bl	8000d34 <__aeabi_fmul>
 800cd44:	498c      	ldr	r1, [pc, #560]	; (800cf78 <__ieee754_asinf+0x24c>)
 800cd46:	4605      	mov	r5, r0
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7f3 fff3 	bl	8000d34 <__aeabi_fmul>
 800cd4e:	4601      	mov	r1, r0
 800cd50:	4628      	mov	r0, r5
 800cd52:	f7f3 fee7 	bl	8000b24 <__addsf3>
 800cd56:	e006      	b.n	800cd66 <__ieee754_asinf+0x3a>
 800cd58:	dd07      	ble.n	800cd6a <__ieee754_asinf+0x3e>
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	f7f3 fee0 	bl	8000b20 <__aeabi_fsub>
 800cd60:	4601      	mov	r1, r0
 800cd62:	f7f4 f89b 	bl	8000e9c <__aeabi_fdiv>
 800cd66:	4604      	mov	r4, r0
 800cd68:	e00e      	b.n	800cd88 <__ieee754_asinf+0x5c>
 800cd6a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800cd6e:	da58      	bge.n	800ce22 <__ieee754_asinf+0xf6>
 800cd70:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800cd74:	da0b      	bge.n	800cd8e <__ieee754_asinf+0x62>
 800cd76:	4981      	ldr	r1, [pc, #516]	; (800cf7c <__ieee754_asinf+0x250>)
 800cd78:	f7f3 fed4 	bl	8000b24 <__addsf3>
 800cd7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cd80:	f7f4 f994 	bl	80010ac <__aeabi_fcmpgt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d04c      	beq.n	800ce22 <__ieee754_asinf+0xf6>
 800cd88:	4620      	mov	r0, r4
 800cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8e:	4601      	mov	r1, r0
 800cd90:	f7f3 ffd0 	bl	8000d34 <__aeabi_fmul>
 800cd94:	4605      	mov	r5, r0
 800cd96:	497a      	ldr	r1, [pc, #488]	; (800cf80 <__ieee754_asinf+0x254>)
 800cd98:	f7f3 ffcc 	bl	8000d34 <__aeabi_fmul>
 800cd9c:	4979      	ldr	r1, [pc, #484]	; (800cf84 <__ieee754_asinf+0x258>)
 800cd9e:	f7f3 fec1 	bl	8000b24 <__addsf3>
 800cda2:	4629      	mov	r1, r5
 800cda4:	f7f3 ffc6 	bl	8000d34 <__aeabi_fmul>
 800cda8:	4977      	ldr	r1, [pc, #476]	; (800cf88 <__ieee754_asinf+0x25c>)
 800cdaa:	f7f3 feb9 	bl	8000b20 <__aeabi_fsub>
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 ffc0 	bl	8000d34 <__aeabi_fmul>
 800cdb4:	4975      	ldr	r1, [pc, #468]	; (800cf8c <__ieee754_asinf+0x260>)
 800cdb6:	f7f3 feb5 	bl	8000b24 <__addsf3>
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 ffba 	bl	8000d34 <__aeabi_fmul>
 800cdc0:	4973      	ldr	r1, [pc, #460]	; (800cf90 <__ieee754_asinf+0x264>)
 800cdc2:	f7f3 fead 	bl	8000b20 <__aeabi_fsub>
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7f3 ffb4 	bl	8000d34 <__aeabi_fmul>
 800cdcc:	4971      	ldr	r1, [pc, #452]	; (800cf94 <__ieee754_asinf+0x268>)
 800cdce:	f7f3 fea9 	bl	8000b24 <__addsf3>
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	f7f3 ffae 	bl	8000d34 <__aeabi_fmul>
 800cdd8:	496f      	ldr	r1, [pc, #444]	; (800cf98 <__ieee754_asinf+0x26c>)
 800cdda:	4606      	mov	r6, r0
 800cddc:	4628      	mov	r0, r5
 800cdde:	f7f3 ffa9 	bl	8000d34 <__aeabi_fmul>
 800cde2:	496e      	ldr	r1, [pc, #440]	; (800cf9c <__ieee754_asinf+0x270>)
 800cde4:	f7f3 fe9c 	bl	8000b20 <__aeabi_fsub>
 800cde8:	4629      	mov	r1, r5
 800cdea:	f7f3 ffa3 	bl	8000d34 <__aeabi_fmul>
 800cdee:	496c      	ldr	r1, [pc, #432]	; (800cfa0 <__ieee754_asinf+0x274>)
 800cdf0:	f7f3 fe98 	bl	8000b24 <__addsf3>
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	f7f3 ff9d 	bl	8000d34 <__aeabi_fmul>
 800cdfa:	496a      	ldr	r1, [pc, #424]	; (800cfa4 <__ieee754_asinf+0x278>)
 800cdfc:	f7f3 fe90 	bl	8000b20 <__aeabi_fsub>
 800ce00:	4629      	mov	r1, r5
 800ce02:	f7f3 ff97 	bl	8000d34 <__aeabi_fmul>
 800ce06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ce0a:	f7f3 fe8b 	bl	8000b24 <__addsf3>
 800ce0e:	4601      	mov	r1, r0
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7f4 f843 	bl	8000e9c <__aeabi_fdiv>
 800ce16:	4621      	mov	r1, r4
 800ce18:	f7f3 ff8c 	bl	8000d34 <__aeabi_fmul>
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	e797      	b.n	800cd52 <__ieee754_asinf+0x26>
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 ff42 	bl	800dcac <fabsf>
 800ce28:	4601      	mov	r1, r0
 800ce2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ce2e:	f7f3 fe77 	bl	8000b20 <__aeabi_fsub>
 800ce32:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ce36:	f7f3 ff7d 	bl	8000d34 <__aeabi_fmul>
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	4950      	ldr	r1, [pc, #320]	; (800cf80 <__ieee754_asinf+0x254>)
 800ce3e:	f7f3 ff79 	bl	8000d34 <__aeabi_fmul>
 800ce42:	4950      	ldr	r1, [pc, #320]	; (800cf84 <__ieee754_asinf+0x258>)
 800ce44:	f7f3 fe6e 	bl	8000b24 <__addsf3>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	f7f3 ff73 	bl	8000d34 <__aeabi_fmul>
 800ce4e:	494e      	ldr	r1, [pc, #312]	; (800cf88 <__ieee754_asinf+0x25c>)
 800ce50:	f7f3 fe66 	bl	8000b20 <__aeabi_fsub>
 800ce54:	4631      	mov	r1, r6
 800ce56:	f7f3 ff6d 	bl	8000d34 <__aeabi_fmul>
 800ce5a:	494c      	ldr	r1, [pc, #304]	; (800cf8c <__ieee754_asinf+0x260>)
 800ce5c:	f7f3 fe62 	bl	8000b24 <__addsf3>
 800ce60:	4631      	mov	r1, r6
 800ce62:	f7f3 ff67 	bl	8000d34 <__aeabi_fmul>
 800ce66:	494a      	ldr	r1, [pc, #296]	; (800cf90 <__ieee754_asinf+0x264>)
 800ce68:	f7f3 fe5a 	bl	8000b20 <__aeabi_fsub>
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	f7f3 ff61 	bl	8000d34 <__aeabi_fmul>
 800ce72:	4948      	ldr	r1, [pc, #288]	; (800cf94 <__ieee754_asinf+0x268>)
 800ce74:	f7f3 fe56 	bl	8000b24 <__addsf3>
 800ce78:	4631      	mov	r1, r6
 800ce7a:	f7f3 ff5b 	bl	8000d34 <__aeabi_fmul>
 800ce7e:	4946      	ldr	r1, [pc, #280]	; (800cf98 <__ieee754_asinf+0x26c>)
 800ce80:	4681      	mov	r9, r0
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7f3 ff56 	bl	8000d34 <__aeabi_fmul>
 800ce88:	4944      	ldr	r1, [pc, #272]	; (800cf9c <__ieee754_asinf+0x270>)
 800ce8a:	f7f3 fe49 	bl	8000b20 <__aeabi_fsub>
 800ce8e:	4631      	mov	r1, r6
 800ce90:	f7f3 ff50 	bl	8000d34 <__aeabi_fmul>
 800ce94:	4942      	ldr	r1, [pc, #264]	; (800cfa0 <__ieee754_asinf+0x274>)
 800ce96:	f7f3 fe45 	bl	8000b24 <__addsf3>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	f7f3 ff4a 	bl	8000d34 <__aeabi_fmul>
 800cea0:	4940      	ldr	r1, [pc, #256]	; (800cfa4 <__ieee754_asinf+0x278>)
 800cea2:	f7f3 fe3d 	bl	8000b20 <__aeabi_fsub>
 800cea6:	4631      	mov	r1, r6
 800cea8:	f7f3 ff44 	bl	8000d34 <__aeabi_fmul>
 800ceac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ceb0:	f7f3 fe38 	bl	8000b24 <__addsf3>
 800ceb4:	4682      	mov	sl, r0
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f000 f9da 	bl	800d270 <__ieee754_sqrtf>
 800cebc:	4b3a      	ldr	r3, [pc, #232]	; (800cfa8 <__ieee754_asinf+0x27c>)
 800cebe:	4607      	mov	r7, r0
 800cec0:	4598      	cmp	r8, r3
 800cec2:	dd1a      	ble.n	800cefa <__ieee754_asinf+0x1ce>
 800cec4:	4651      	mov	r1, sl
 800cec6:	4648      	mov	r0, r9
 800cec8:	f7f3 ffe8 	bl	8000e9c <__aeabi_fdiv>
 800cecc:	4639      	mov	r1, r7
 800cece:	f7f3 ff31 	bl	8000d34 <__aeabi_fmul>
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 fe26 	bl	8000b24 <__addsf3>
 800ced8:	4601      	mov	r1, r0
 800ceda:	f7f3 fe23 	bl	8000b24 <__addsf3>
 800cede:	4933      	ldr	r1, [pc, #204]	; (800cfac <__ieee754_asinf+0x280>)
 800cee0:	f7f3 fe20 	bl	8000b24 <__addsf3>
 800cee4:	4601      	mov	r1, r0
 800cee6:	4823      	ldr	r0, [pc, #140]	; (800cf74 <__ieee754_asinf+0x248>)
 800cee8:	f7f3 fe1a 	bl	8000b20 <__aeabi_fsub>
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	f73f af4a 	bgt.w	800cd88 <__ieee754_asinf+0x5c>
 800cef4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cef8:	e735      	b.n	800cd66 <__ieee754_asinf+0x3a>
 800cefa:	4601      	mov	r1, r0
 800cefc:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800cf00:	f7f3 fe10 	bl	8000b24 <__addsf3>
 800cf04:	4651      	mov	r1, sl
 800cf06:	4604      	mov	r4, r0
 800cf08:	4648      	mov	r0, r9
 800cf0a:	f7f3 ffc7 	bl	8000e9c <__aeabi_fdiv>
 800cf0e:	4601      	mov	r1, r0
 800cf10:	4620      	mov	r0, r4
 800cf12:	f7f3 ff0f 	bl	8000d34 <__aeabi_fmul>
 800cf16:	f028 080f 	bic.w	r8, r8, #15
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	4641      	mov	r1, r8
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f7f3 ff08 	bl	8000d34 <__aeabi_fmul>
 800cf24:	4601      	mov	r1, r0
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7f3 fdfa 	bl	8000b20 <__aeabi_fsub>
 800cf2c:	4641      	mov	r1, r8
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7f3 fdf7 	bl	8000b24 <__addsf3>
 800cf36:	4601      	mov	r1, r0
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f7f3 ffaf 	bl	8000e9c <__aeabi_fdiv>
 800cf3e:	4601      	mov	r1, r0
 800cf40:	f7f3 fdf0 	bl	8000b24 <__addsf3>
 800cf44:	4601      	mov	r1, r0
 800cf46:	480c      	ldr	r0, [pc, #48]	; (800cf78 <__ieee754_asinf+0x24c>)
 800cf48:	f7f3 fdea 	bl	8000b20 <__aeabi_fsub>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f7f3 fde6 	bl	8000b20 <__aeabi_fsub>
 800cf54:	4641      	mov	r1, r8
 800cf56:	4604      	mov	r4, r0
 800cf58:	4640      	mov	r0, r8
 800cf5a:	f7f3 fde3 	bl	8000b24 <__addsf3>
 800cf5e:	4601      	mov	r1, r0
 800cf60:	4813      	ldr	r0, [pc, #76]	; (800cfb0 <__ieee754_asinf+0x284>)
 800cf62:	f7f3 fddd 	bl	8000b20 <__aeabi_fsub>
 800cf66:	4601      	mov	r1, r0
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7f3 fdd9 	bl	8000b20 <__aeabi_fsub>
 800cf6e:	4601      	mov	r1, r0
 800cf70:	480f      	ldr	r0, [pc, #60]	; (800cfb0 <__ieee754_asinf+0x284>)
 800cf72:	e7b9      	b.n	800cee8 <__ieee754_asinf+0x1bc>
 800cf74:	3fc90fdb 	.word	0x3fc90fdb
 800cf78:	b33bbd2e 	.word	0xb33bbd2e
 800cf7c:	7149f2ca 	.word	0x7149f2ca
 800cf80:	3811ef08 	.word	0x3811ef08
 800cf84:	3a4f7f04 	.word	0x3a4f7f04
 800cf88:	3d241146 	.word	0x3d241146
 800cf8c:	3e4e0aa8 	.word	0x3e4e0aa8
 800cf90:	3ea6b090 	.word	0x3ea6b090
 800cf94:	3e2aaaab 	.word	0x3e2aaaab
 800cf98:	3d9dc62e 	.word	0x3d9dc62e
 800cf9c:	3f303361 	.word	0x3f303361
 800cfa0:	4001572d 	.word	0x4001572d
 800cfa4:	4019d139 	.word	0x4019d139
 800cfa8:	3f799999 	.word	0x3f799999
 800cfac:	333bbd2e 	.word	0x333bbd2e
 800cfb0:	3f490fdb 	.word	0x3f490fdb

0800cfb4 <__ieee754_rem_pio2f>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4aa0      	ldr	r2, [pc, #640]	; (800d23c <__ieee754_rem_pio2f+0x288>)
 800cfba:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800cfbe:	4296      	cmp	r6, r2
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	4682      	mov	sl, r0
 800cfc4:	b087      	sub	sp, #28
 800cfc6:	dc04      	bgt.n	800cfd2 <__ieee754_rem_pio2f+0x1e>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	6008      	str	r0, [r1, #0]
 800cfcc:	604b      	str	r3, [r1, #4]
 800cfce:	2500      	movs	r5, #0
 800cfd0:	e01a      	b.n	800d008 <__ieee754_rem_pio2f+0x54>
 800cfd2:	4a9b      	ldr	r2, [pc, #620]	; (800d240 <__ieee754_rem_pio2f+0x28c>)
 800cfd4:	4296      	cmp	r6, r2
 800cfd6:	dc4b      	bgt.n	800d070 <__ieee754_rem_pio2f+0xbc>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	499a      	ldr	r1, [pc, #616]	; (800d244 <__ieee754_rem_pio2f+0x290>)
 800cfdc:	4f9a      	ldr	r7, [pc, #616]	; (800d248 <__ieee754_rem_pio2f+0x294>)
 800cfde:	f026 060f 	bic.w	r6, r6, #15
 800cfe2:	dd23      	ble.n	800d02c <__ieee754_rem_pio2f+0x78>
 800cfe4:	f7f3 fd9c 	bl	8000b20 <__aeabi_fsub>
 800cfe8:	42be      	cmp	r6, r7
 800cfea:	4605      	mov	r5, r0
 800cfec:	d010      	beq.n	800d010 <__ieee754_rem_pio2f+0x5c>
 800cfee:	4997      	ldr	r1, [pc, #604]	; (800d24c <__ieee754_rem_pio2f+0x298>)
 800cff0:	f7f3 fd96 	bl	8000b20 <__aeabi_fsub>
 800cff4:	4601      	mov	r1, r0
 800cff6:	6020      	str	r0, [r4, #0]
 800cff8:	4628      	mov	r0, r5
 800cffa:	f7f3 fd91 	bl	8000b20 <__aeabi_fsub>
 800cffe:	4993      	ldr	r1, [pc, #588]	; (800d24c <__ieee754_rem_pio2f+0x298>)
 800d000:	f7f3 fd8e 	bl	8000b20 <__aeabi_fsub>
 800d004:	2501      	movs	r5, #1
 800d006:	6060      	str	r0, [r4, #4]
 800d008:	4628      	mov	r0, r5
 800d00a:	b007      	add	sp, #28
 800d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d010:	498f      	ldr	r1, [pc, #572]	; (800d250 <__ieee754_rem_pio2f+0x29c>)
 800d012:	f7f3 fd85 	bl	8000b20 <__aeabi_fsub>
 800d016:	498f      	ldr	r1, [pc, #572]	; (800d254 <__ieee754_rem_pio2f+0x2a0>)
 800d018:	4605      	mov	r5, r0
 800d01a:	f7f3 fd81 	bl	8000b20 <__aeabi_fsub>
 800d01e:	4601      	mov	r1, r0
 800d020:	6020      	str	r0, [r4, #0]
 800d022:	4628      	mov	r0, r5
 800d024:	f7f3 fd7c 	bl	8000b20 <__aeabi_fsub>
 800d028:	498a      	ldr	r1, [pc, #552]	; (800d254 <__ieee754_rem_pio2f+0x2a0>)
 800d02a:	e7e9      	b.n	800d000 <__ieee754_rem_pio2f+0x4c>
 800d02c:	f7f3 fd7a 	bl	8000b24 <__addsf3>
 800d030:	42be      	cmp	r6, r7
 800d032:	4605      	mov	r5, r0
 800d034:	d00e      	beq.n	800d054 <__ieee754_rem_pio2f+0xa0>
 800d036:	4985      	ldr	r1, [pc, #532]	; (800d24c <__ieee754_rem_pio2f+0x298>)
 800d038:	f7f3 fd74 	bl	8000b24 <__addsf3>
 800d03c:	4601      	mov	r1, r0
 800d03e:	6020      	str	r0, [r4, #0]
 800d040:	4628      	mov	r0, r5
 800d042:	f7f3 fd6d 	bl	8000b20 <__aeabi_fsub>
 800d046:	4981      	ldr	r1, [pc, #516]	; (800d24c <__ieee754_rem_pio2f+0x298>)
 800d048:	f7f3 fd6c 	bl	8000b24 <__addsf3>
 800d04c:	f04f 35ff 	mov.w	r5, #4294967295
 800d050:	6060      	str	r0, [r4, #4]
 800d052:	e7d9      	b.n	800d008 <__ieee754_rem_pio2f+0x54>
 800d054:	497e      	ldr	r1, [pc, #504]	; (800d250 <__ieee754_rem_pio2f+0x29c>)
 800d056:	f7f3 fd65 	bl	8000b24 <__addsf3>
 800d05a:	497e      	ldr	r1, [pc, #504]	; (800d254 <__ieee754_rem_pio2f+0x2a0>)
 800d05c:	4605      	mov	r5, r0
 800d05e:	f7f3 fd61 	bl	8000b24 <__addsf3>
 800d062:	4601      	mov	r1, r0
 800d064:	6020      	str	r0, [r4, #0]
 800d066:	4628      	mov	r0, r5
 800d068:	f7f3 fd5a 	bl	8000b20 <__aeabi_fsub>
 800d06c:	4979      	ldr	r1, [pc, #484]	; (800d254 <__ieee754_rem_pio2f+0x2a0>)
 800d06e:	e7eb      	b.n	800d048 <__ieee754_rem_pio2f+0x94>
 800d070:	4a79      	ldr	r2, [pc, #484]	; (800d258 <__ieee754_rem_pio2f+0x2a4>)
 800d072:	4296      	cmp	r6, r2
 800d074:	f300 8091 	bgt.w	800d19a <__ieee754_rem_pio2f+0x1e6>
 800d078:	f000 fe18 	bl	800dcac <fabsf>
 800d07c:	4977      	ldr	r1, [pc, #476]	; (800d25c <__ieee754_rem_pio2f+0x2a8>)
 800d07e:	4607      	mov	r7, r0
 800d080:	f7f3 fe58 	bl	8000d34 <__aeabi_fmul>
 800d084:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d088:	f7f3 fd4c 	bl	8000b24 <__addsf3>
 800d08c:	f7f4 f82e 	bl	80010ec <__aeabi_f2iz>
 800d090:	4605      	mov	r5, r0
 800d092:	f7f3 fdfb 	bl	8000c8c <__aeabi_i2f>
 800d096:	496b      	ldr	r1, [pc, #428]	; (800d244 <__ieee754_rem_pio2f+0x290>)
 800d098:	4681      	mov	r9, r0
 800d09a:	f7f3 fe4b 	bl	8000d34 <__aeabi_fmul>
 800d09e:	4601      	mov	r1, r0
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f7f3 fd3d 	bl	8000b20 <__aeabi_fsub>
 800d0a6:	4969      	ldr	r1, [pc, #420]	; (800d24c <__ieee754_rem_pio2f+0x298>)
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	4648      	mov	r0, r9
 800d0ac:	f7f3 fe42 	bl	8000d34 <__aeabi_fmul>
 800d0b0:	2d1f      	cmp	r5, #31
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	dc0c      	bgt.n	800d0d0 <__ieee754_rem_pio2f+0x11c>
 800d0b6:	4a6a      	ldr	r2, [pc, #424]	; (800d260 <__ieee754_rem_pio2f+0x2ac>)
 800d0b8:	1e69      	subs	r1, r5, #1
 800d0ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d0be:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d004      	beq.n	800d0d0 <__ieee754_rem_pio2f+0x11c>
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f7f3 fd29 	bl	8000b20 <__aeabi_fsub>
 800d0ce:	e00b      	b.n	800d0e8 <__ieee754_rem_pio2f+0x134>
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7f3 fd24 	bl	8000b20 <__aeabi_fsub>
 800d0d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d0dc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800d0e0:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800d0e4:	2e08      	cmp	r6, #8
 800d0e6:	dc01      	bgt.n	800d0ec <__ieee754_rem_pio2f+0x138>
 800d0e8:	6020      	str	r0, [r4, #0]
 800d0ea:	e026      	b.n	800d13a <__ieee754_rem_pio2f+0x186>
 800d0ec:	4958      	ldr	r1, [pc, #352]	; (800d250 <__ieee754_rem_pio2f+0x29c>)
 800d0ee:	4648      	mov	r0, r9
 800d0f0:	f7f3 fe20 	bl	8000d34 <__aeabi_fmul>
 800d0f4:	4607      	mov	r7, r0
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	f7f3 fd11 	bl	8000b20 <__aeabi_fsub>
 800d0fe:	4601      	mov	r1, r0
 800d100:	4606      	mov	r6, r0
 800d102:	4640      	mov	r0, r8
 800d104:	f7f3 fd0c 	bl	8000b20 <__aeabi_fsub>
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fd09 	bl	8000b20 <__aeabi_fsub>
 800d10e:	4607      	mov	r7, r0
 800d110:	4950      	ldr	r1, [pc, #320]	; (800d254 <__ieee754_rem_pio2f+0x2a0>)
 800d112:	4648      	mov	r0, r9
 800d114:	f7f3 fe0e 	bl	8000d34 <__aeabi_fmul>
 800d118:	4639      	mov	r1, r7
 800d11a:	f7f3 fd01 	bl	8000b20 <__aeabi_fsub>
 800d11e:	4601      	mov	r1, r0
 800d120:	4607      	mov	r7, r0
 800d122:	4630      	mov	r0, r6
 800d124:	f7f3 fcfc 	bl	8000b20 <__aeabi_fsub>
 800d128:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d12c:	ebab 0b03 	sub.w	fp, fp, r3
 800d130:	f1bb 0f19 	cmp.w	fp, #25
 800d134:	dc16      	bgt.n	800d164 <__ieee754_rem_pio2f+0x1b0>
 800d136:	46b0      	mov	r8, r6
 800d138:	6020      	str	r0, [r4, #0]
 800d13a:	6826      	ldr	r6, [r4, #0]
 800d13c:	4640      	mov	r0, r8
 800d13e:	4631      	mov	r1, r6
 800d140:	f7f3 fcee 	bl	8000b20 <__aeabi_fsub>
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 fceb 	bl	8000b20 <__aeabi_fsub>
 800d14a:	f1ba 0f00 	cmp.w	sl, #0
 800d14e:	6060      	str	r0, [r4, #4]
 800d150:	f6bf af5a 	bge.w	800d008 <__ieee754_rem_pio2f+0x54>
 800d154:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d158:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d15c:	6026      	str	r6, [r4, #0]
 800d15e:	6060      	str	r0, [r4, #4]
 800d160:	426d      	negs	r5, r5
 800d162:	e751      	b.n	800d008 <__ieee754_rem_pio2f+0x54>
 800d164:	493f      	ldr	r1, [pc, #252]	; (800d264 <__ieee754_rem_pio2f+0x2b0>)
 800d166:	4648      	mov	r0, r9
 800d168:	f7f3 fde4 	bl	8000d34 <__aeabi_fmul>
 800d16c:	4607      	mov	r7, r0
 800d16e:	4601      	mov	r1, r0
 800d170:	4630      	mov	r0, r6
 800d172:	f7f3 fcd5 	bl	8000b20 <__aeabi_fsub>
 800d176:	4601      	mov	r1, r0
 800d178:	4680      	mov	r8, r0
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7f3 fcd0 	bl	8000b20 <__aeabi_fsub>
 800d180:	4639      	mov	r1, r7
 800d182:	f7f3 fccd 	bl	8000b20 <__aeabi_fsub>
 800d186:	4606      	mov	r6, r0
 800d188:	4937      	ldr	r1, [pc, #220]	; (800d268 <__ieee754_rem_pio2f+0x2b4>)
 800d18a:	4648      	mov	r0, r9
 800d18c:	f7f3 fdd2 	bl	8000d34 <__aeabi_fmul>
 800d190:	4631      	mov	r1, r6
 800d192:	f7f3 fcc5 	bl	8000b20 <__aeabi_fsub>
 800d196:	4607      	mov	r7, r0
 800d198:	e795      	b.n	800d0c6 <__ieee754_rem_pio2f+0x112>
 800d19a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800d19e:	db05      	blt.n	800d1ac <__ieee754_rem_pio2f+0x1f8>
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	f7f3 fcbd 	bl	8000b20 <__aeabi_fsub>
 800d1a6:	6060      	str	r0, [r4, #4]
 800d1a8:	6020      	str	r0, [r4, #0]
 800d1aa:	e710      	b.n	800cfce <__ieee754_rem_pio2f+0x1a>
 800d1ac:	15f7      	asrs	r7, r6, #23
 800d1ae:	3f86      	subs	r7, #134	; 0x86
 800d1b0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f7f3 ff99 	bl	80010ec <__aeabi_f2iz>
 800d1ba:	f7f3 fd67 	bl	8000c8c <__aeabi_i2f>
 800d1be:	4601      	mov	r1, r0
 800d1c0:	9003      	str	r0, [sp, #12]
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7f3 fcac 	bl	8000b20 <__aeabi_fsub>
 800d1c8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d1cc:	f7f3 fdb2 	bl	8000d34 <__aeabi_fmul>
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	f7f3 ff8b 	bl	80010ec <__aeabi_f2iz>
 800d1d6:	f7f3 fd59 	bl	8000c8c <__aeabi_i2f>
 800d1da:	4601      	mov	r1, r0
 800d1dc:	9004      	str	r0, [sp, #16]
 800d1de:	4605      	mov	r5, r0
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7f3 fc9d 	bl	8000b20 <__aeabi_fsub>
 800d1e6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d1ea:	f7f3 fda3 	bl	8000d34 <__aeabi_fmul>
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	9005      	str	r0, [sp, #20]
 800d1f2:	f7f3 ff33 	bl	800105c <__aeabi_fcmpeq>
 800d1f6:	b1f0      	cbz	r0, 800d236 <__ieee754_rem_pio2f+0x282>
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f7f3 ff2e 	bl	800105c <__aeabi_fcmpeq>
 800d200:	2800      	cmp	r0, #0
 800d202:	bf14      	ite	ne
 800d204:	2301      	movne	r3, #1
 800d206:	2302      	moveq	r3, #2
 800d208:	4a18      	ldr	r2, [pc, #96]	; (800d26c <__ieee754_rem_pio2f+0x2b8>)
 800d20a:	4621      	mov	r1, r4
 800d20c:	9201      	str	r2, [sp, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	a803      	add	r0, sp, #12
 800d212:	9200      	str	r2, [sp, #0]
 800d214:	463a      	mov	r2, r7
 800d216:	f000 f8fd 	bl	800d414 <__kernel_rem_pio2f>
 800d21a:	f1ba 0f00 	cmp.w	sl, #0
 800d21e:	4605      	mov	r5, r0
 800d220:	f6bf aef2 	bge.w	800d008 <__ieee754_rem_pio2f+0x54>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d232:	6063      	str	r3, [r4, #4]
 800d234:	e794      	b.n	800d160 <__ieee754_rem_pio2f+0x1ac>
 800d236:	2303      	movs	r3, #3
 800d238:	e7e6      	b.n	800d208 <__ieee754_rem_pio2f+0x254>
 800d23a:	bf00      	nop
 800d23c:	3f490fd8 	.word	0x3f490fd8
 800d240:	4016cbe3 	.word	0x4016cbe3
 800d244:	3fc90f80 	.word	0x3fc90f80
 800d248:	3fc90fd0 	.word	0x3fc90fd0
 800d24c:	37354443 	.word	0x37354443
 800d250:	37354400 	.word	0x37354400
 800d254:	2e85a308 	.word	0x2e85a308
 800d258:	43490f80 	.word	0x43490f80
 800d25c:	3f22f984 	.word	0x3f22f984
 800d260:	0800e180 	.word	0x0800e180
 800d264:	2e85a300 	.word	0x2e85a300
 800d268:	248d3132 	.word	0x248d3132
 800d26c:	0800e200 	.word	0x0800e200

0800d270 <__ieee754_sqrtf>:
 800d270:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d274:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	4603      	mov	r3, r0
 800d27c:	4604      	mov	r4, r0
 800d27e:	d309      	bcc.n	800d294 <__ieee754_sqrtf+0x24>
 800d280:	4601      	mov	r1, r0
 800d282:	f7f3 fd57 	bl	8000d34 <__aeabi_fmul>
 800d286:	4601      	mov	r1, r0
 800d288:	4620      	mov	r0, r4
 800d28a:	f7f3 fc4b 	bl	8000b24 <__addsf3>
 800d28e:	4604      	mov	r4, r0
 800d290:	4620      	mov	r0, r4
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	2a00      	cmp	r2, #0
 800d296:	d0fb      	beq.n	800d290 <__ieee754_sqrtf+0x20>
 800d298:	2800      	cmp	r0, #0
 800d29a:	da06      	bge.n	800d2aa <__ieee754_sqrtf+0x3a>
 800d29c:	4601      	mov	r1, r0
 800d29e:	f7f3 fc3f 	bl	8000b20 <__aeabi_fsub>
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	f7f3 fdfa 	bl	8000e9c <__aeabi_fdiv>
 800d2a8:	e7f1      	b.n	800d28e <__ieee754_sqrtf+0x1e>
 800d2aa:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800d2ae:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d2b2:	d029      	beq.n	800d308 <__ieee754_sqrtf+0x98>
 800d2b4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d2b8:	07cb      	lsls	r3, r1, #31
 800d2ba:	f04f 0300 	mov.w	r3, #0
 800d2be:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800d2c2:	f04f 0419 	mov.w	r4, #25
 800d2c6:	461e      	mov	r6, r3
 800d2c8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d2cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d2d0:	bf58      	it	pl
 800d2d2:	0052      	lslpl	r2, r2, #1
 800d2d4:	1040      	asrs	r0, r0, #1
 800d2d6:	0052      	lsls	r2, r2, #1
 800d2d8:	1875      	adds	r5, r6, r1
 800d2da:	4295      	cmp	r5, r2
 800d2dc:	bfde      	ittt	le
 800d2de:	186e      	addle	r6, r5, r1
 800d2e0:	1b52      	suble	r2, r2, r5
 800d2e2:	185b      	addle	r3, r3, r1
 800d2e4:	3c01      	subs	r4, #1
 800d2e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d2ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d2ee:	d1f3      	bne.n	800d2d8 <__ieee754_sqrtf+0x68>
 800d2f0:	b112      	cbz	r2, 800d2f8 <__ieee754_sqrtf+0x88>
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	f023 0301 	bic.w	r3, r3, #1
 800d2f8:	105c      	asrs	r4, r3, #1
 800d2fa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d2fe:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800d302:	e7c5      	b.n	800d290 <__ieee754_sqrtf+0x20>
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	3201      	adds	r2, #1
 800d308:	0218      	lsls	r0, r3, #8
 800d30a:	d5fb      	bpl.n	800d304 <__ieee754_sqrtf+0x94>
 800d30c:	3a01      	subs	r2, #1
 800d30e:	1a89      	subs	r1, r1, r2
 800d310:	e7d0      	b.n	800d2b4 <__ieee754_sqrtf+0x44>
	...

0800d314 <__kernel_cosf>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800d31c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d320:	4606      	mov	r6, r0
 800d322:	4688      	mov	r8, r1
 800d324:	da03      	bge.n	800d32e <__kernel_cosf+0x1a>
 800d326:	f7f3 fee1 	bl	80010ec <__aeabi_f2iz>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d05c      	beq.n	800d3e8 <__kernel_cosf+0xd4>
 800d32e:	4631      	mov	r1, r6
 800d330:	4630      	mov	r0, r6
 800d332:	f7f3 fcff 	bl	8000d34 <__aeabi_fmul>
 800d336:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d33a:	4605      	mov	r5, r0
 800d33c:	f7f3 fcfa 	bl	8000d34 <__aeabi_fmul>
 800d340:	492b      	ldr	r1, [pc, #172]	; (800d3f0 <__kernel_cosf+0xdc>)
 800d342:	4607      	mov	r7, r0
 800d344:	4628      	mov	r0, r5
 800d346:	f7f3 fcf5 	bl	8000d34 <__aeabi_fmul>
 800d34a:	492a      	ldr	r1, [pc, #168]	; (800d3f4 <__kernel_cosf+0xe0>)
 800d34c:	f7f3 fbea 	bl	8000b24 <__addsf3>
 800d350:	4629      	mov	r1, r5
 800d352:	f7f3 fcef 	bl	8000d34 <__aeabi_fmul>
 800d356:	4928      	ldr	r1, [pc, #160]	; (800d3f8 <__kernel_cosf+0xe4>)
 800d358:	f7f3 fbe2 	bl	8000b20 <__aeabi_fsub>
 800d35c:	4629      	mov	r1, r5
 800d35e:	f7f3 fce9 	bl	8000d34 <__aeabi_fmul>
 800d362:	4926      	ldr	r1, [pc, #152]	; (800d3fc <__kernel_cosf+0xe8>)
 800d364:	f7f3 fbde 	bl	8000b24 <__addsf3>
 800d368:	4629      	mov	r1, r5
 800d36a:	f7f3 fce3 	bl	8000d34 <__aeabi_fmul>
 800d36e:	4924      	ldr	r1, [pc, #144]	; (800d400 <__kernel_cosf+0xec>)
 800d370:	f7f3 fbd6 	bl	8000b20 <__aeabi_fsub>
 800d374:	4629      	mov	r1, r5
 800d376:	f7f3 fcdd 	bl	8000d34 <__aeabi_fmul>
 800d37a:	4922      	ldr	r1, [pc, #136]	; (800d404 <__kernel_cosf+0xf0>)
 800d37c:	f7f3 fbd2 	bl	8000b24 <__addsf3>
 800d380:	4629      	mov	r1, r5
 800d382:	f7f3 fcd7 	bl	8000d34 <__aeabi_fmul>
 800d386:	4629      	mov	r1, r5
 800d388:	f7f3 fcd4 	bl	8000d34 <__aeabi_fmul>
 800d38c:	4641      	mov	r1, r8
 800d38e:	4605      	mov	r5, r0
 800d390:	4630      	mov	r0, r6
 800d392:	f7f3 fccf 	bl	8000d34 <__aeabi_fmul>
 800d396:	4601      	mov	r1, r0
 800d398:	4628      	mov	r0, r5
 800d39a:	f7f3 fbc1 	bl	8000b20 <__aeabi_fsub>
 800d39e:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <__kernel_cosf+0xf4>)
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	dc0a      	bgt.n	800d3bc <__kernel_cosf+0xa8>
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f7f3 fbb9 	bl	8000b20 <__aeabi_fsub>
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3b4:	f7f3 fbb4 	bl	8000b20 <__aeabi_fsub>
 800d3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3bc:	4b13      	ldr	r3, [pc, #76]	; (800d40c <__kernel_cosf+0xf8>)
 800d3be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3c2:	429c      	cmp	r4, r3
 800d3c4:	bfcc      	ite	gt
 800d3c6:	4c12      	ldrgt	r4, [pc, #72]	; (800d410 <__kernel_cosf+0xfc>)
 800d3c8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	f7f3 fba7 	bl	8000b20 <__aeabi_fsub>
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4606      	mov	r6, r0
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	f7f3 fba2 	bl	8000b20 <__aeabi_fsub>
 800d3dc:	4629      	mov	r1, r5
 800d3de:	f7f3 fb9f 	bl	8000b20 <__aeabi_fsub>
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	e7e5      	b.n	800d3b4 <__kernel_cosf+0xa0>
 800d3e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3ec:	e7e4      	b.n	800d3b8 <__kernel_cosf+0xa4>
 800d3ee:	bf00      	nop
 800d3f0:	ad47d74e 	.word	0xad47d74e
 800d3f4:	310f74f6 	.word	0x310f74f6
 800d3f8:	3493f27c 	.word	0x3493f27c
 800d3fc:	37d00d01 	.word	0x37d00d01
 800d400:	3ab60b61 	.word	0x3ab60b61
 800d404:	3d2aaaab 	.word	0x3d2aaaab
 800d408:	3e999999 	.word	0x3e999999
 800d40c:	3f480000 	.word	0x3f480000
 800d410:	3e900000 	.word	0x3e900000

0800d414 <__kernel_rem_pio2f>:
 800d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d418:	b0db      	sub	sp, #364	; 0x16c
 800d41a:	9202      	str	r2, [sp, #8]
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d420:	4bc5      	ldr	r3, [pc, #788]	; (800d738 <__kernel_rem_pio2f+0x324>)
 800d422:	9005      	str	r0, [sp, #20]
 800d424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d428:	9100      	str	r1, [sp, #0]
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	9b04      	ldr	r3, [sp, #16]
 800d42e:	3b01      	subs	r3, #1
 800d430:	9303      	str	r3, [sp, #12]
 800d432:	9b02      	ldr	r3, [sp, #8]
 800d434:	1d1a      	adds	r2, r3, #4
 800d436:	f2c0 809b 	blt.w	800d570 <__kernel_rem_pio2f+0x15c>
 800d43a:	1edc      	subs	r4, r3, #3
 800d43c:	bf48      	it	mi
 800d43e:	1d1c      	addmi	r4, r3, #4
 800d440:	10e4      	asrs	r4, r4, #3
 800d442:	2500      	movs	r5, #0
 800d444:	f04f 0a00 	mov.w	sl, #0
 800d448:	1c67      	adds	r7, r4, #1
 800d44a:	00fb      	lsls	r3, r7, #3
 800d44c:	9306      	str	r3, [sp, #24]
 800d44e:	9b02      	ldr	r3, [sp, #8]
 800d450:	9a03      	ldr	r2, [sp, #12]
 800d452:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	1aa6      	subs	r6, r4, r2
 800d45a:	eb03 0802 	add.w	r8, r3, r2
 800d45e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d460:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800d464:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800d468:	4545      	cmp	r5, r8
 800d46a:	f340 8083 	ble.w	800d574 <__kernel_rem_pio2f+0x160>
 800d46e:	f04f 0800 	mov.w	r8, #0
 800d472:	f04f 0b00 	mov.w	fp, #0
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	aa1e      	add	r2, sp, #120	; 0x78
 800d47a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d47e:	ab46      	add	r3, sp, #280	; 0x118
 800d480:	9a01      	ldr	r2, [sp, #4]
 800d482:	4590      	cmp	r8, r2
 800d484:	f340 809c 	ble.w	800d5c0 <__kernel_rem_pio2f+0x1ac>
 800d488:	4613      	mov	r3, r2
 800d48a:	aa0a      	add	r2, sp, #40	; 0x28
 800d48c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d490:	9308      	str	r3, [sp, #32]
 800d492:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d494:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d498:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d49c:	9307      	str	r3, [sp, #28]
 800d49e:	ad0a      	add	r5, sp, #40	; 0x28
 800d4a0:	462e      	mov	r6, r5
 800d4a2:	46c3      	mov	fp, r8
 800d4a4:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800d4a8:	ab5a      	add	r3, sp, #360	; 0x168
 800d4aa:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800d4ae:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800d4b2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800d4b6:	f1bb 0f00 	cmp.w	fp, #0
 800d4ba:	f300 8086 	bgt.w	800d5ca <__kernel_rem_pio2f+0x1b6>
 800d4be:	4639      	mov	r1, r7
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fc3d 	bl	800dd40 <scalbnf>
 800d4c6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	f7f3 fc32 	bl	8000d34 <__aeabi_fmul>
 800d4d0:	f000 fbf0 	bl	800dcb4 <floorf>
 800d4d4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800d4d8:	f7f3 fc2c 	bl	8000d34 <__aeabi_fmul>
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f7f3 fb1e 	bl	8000b20 <__aeabi_fsub>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	f7f3 fe01 	bl	80010ec <__aeabi_f2iz>
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	f7f3 fbce 	bl	8000c8c <__aeabi_i2f>
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f7f3 fb14 	bl	8000b20 <__aeabi_fsub>
 800d4f8:	2f00      	cmp	r7, #0
 800d4fa:	4681      	mov	r9, r0
 800d4fc:	f340 8084 	ble.w	800d608 <__kernel_rem_pio2f+0x1f4>
 800d500:	f108 32ff 	add.w	r2, r8, #4294967295
 800d504:	ab0a      	add	r3, sp, #40	; 0x28
 800d506:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800d50a:	f1c7 0108 	rsb	r1, r7, #8
 800d50e:	fa44 f301 	asr.w	r3, r4, r1
 800d512:	441e      	add	r6, r3
 800d514:	408b      	lsls	r3, r1
 800d516:	1ae4      	subs	r4, r4, r3
 800d518:	f1c7 0007 	rsb	r0, r7, #7
 800d51c:	ab0a      	add	r3, sp, #40	; 0x28
 800d51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d522:	4104      	asrs	r4, r0
 800d524:	2c00      	cmp	r4, #0
 800d526:	dd7e      	ble.n	800d626 <__kernel_rem_pio2f+0x212>
 800d528:	2200      	movs	r2, #0
 800d52a:	4692      	mov	sl, r2
 800d52c:	3601      	adds	r6, #1
 800d52e:	4590      	cmp	r8, r2
 800d530:	f300 80b0 	bgt.w	800d694 <__kernel_rem_pio2f+0x280>
 800d534:	2f00      	cmp	r7, #0
 800d536:	dd05      	ble.n	800d544 <__kernel_rem_pio2f+0x130>
 800d538:	2f01      	cmp	r7, #1
 800d53a:	f000 80bd 	beq.w	800d6b8 <__kernel_rem_pio2f+0x2a4>
 800d53e:	2f02      	cmp	r7, #2
 800d540:	f000 80c5 	beq.w	800d6ce <__kernel_rem_pio2f+0x2ba>
 800d544:	2c02      	cmp	r4, #2
 800d546:	d16e      	bne.n	800d626 <__kernel_rem_pio2f+0x212>
 800d548:	4649      	mov	r1, r9
 800d54a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d54e:	f7f3 fae7 	bl	8000b20 <__aeabi_fsub>
 800d552:	4681      	mov	r9, r0
 800d554:	f1ba 0f00 	cmp.w	sl, #0
 800d558:	d065      	beq.n	800d626 <__kernel_rem_pio2f+0x212>
 800d55a:	4639      	mov	r1, r7
 800d55c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d560:	f000 fbee 	bl	800dd40 <scalbnf>
 800d564:	4601      	mov	r1, r0
 800d566:	4648      	mov	r0, r9
 800d568:	f7f3 fada 	bl	8000b20 <__aeabi_fsub>
 800d56c:	4681      	mov	r9, r0
 800d56e:	e05a      	b.n	800d626 <__kernel_rem_pio2f+0x212>
 800d570:	2400      	movs	r4, #0
 800d572:	e766      	b.n	800d442 <__kernel_rem_pio2f+0x2e>
 800d574:	42ee      	cmn	r6, r5
 800d576:	d407      	bmi.n	800d588 <__kernel_rem_pio2f+0x174>
 800d578:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d57c:	f7f3 fb86 	bl	8000c8c <__aeabi_i2f>
 800d580:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800d584:	3501      	adds	r5, #1
 800d586:	e76f      	b.n	800d468 <__kernel_rem_pio2f+0x54>
 800d588:	4650      	mov	r0, sl
 800d58a:	e7f9      	b.n	800d580 <__kernel_rem_pio2f+0x16c>
 800d58c:	9b05      	ldr	r3, [sp, #20]
 800d58e:	f8da 1000 	ldr.w	r1, [sl]
 800d592:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800d596:	f7f3 fbcd 	bl	8000d34 <__aeabi_fmul>
 800d59a:	4601      	mov	r1, r0
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7f3 fac1 	bl	8000b24 <__addsf3>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	f109 0901 	add.w	r9, r9, #1
 800d5a8:	ab46      	add	r3, sp, #280	; 0x118
 800d5aa:	9a03      	ldr	r2, [sp, #12]
 800d5ac:	f1aa 0a04 	sub.w	sl, sl, #4
 800d5b0:	4591      	cmp	r9, r2
 800d5b2:	ddeb      	ble.n	800d58c <__kernel_rem_pio2f+0x178>
 800d5b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d5b8:	3504      	adds	r5, #4
 800d5ba:	f108 0801 	add.w	r8, r8, #1
 800d5be:	e75f      	b.n	800d480 <__kernel_rem_pio2f+0x6c>
 800d5c0:	46aa      	mov	sl, r5
 800d5c2:	465e      	mov	r6, fp
 800d5c4:	f04f 0900 	mov.w	r9, #0
 800d5c8:	e7ef      	b.n	800d5aa <__kernel_rem_pio2f+0x196>
 800d5ca:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7f3 fbb0 	bl	8000d34 <__aeabi_fmul>
 800d5d4:	f7f3 fd8a 	bl	80010ec <__aeabi_f2iz>
 800d5d8:	f7f3 fb58 	bl	8000c8c <__aeabi_i2f>
 800d5dc:	4649      	mov	r1, r9
 800d5de:	9009      	str	r0, [sp, #36]	; 0x24
 800d5e0:	f7f3 fba8 	bl	8000d34 <__aeabi_fmul>
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f7f3 fa9a 	bl	8000b20 <__aeabi_fsub>
 800d5ec:	f7f3 fd7e 	bl	80010ec <__aeabi_f2iz>
 800d5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5f6:	f846 0b04 	str.w	r0, [r6], #4
 800d5fa:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f3 fa90 	bl	8000b24 <__addsf3>
 800d604:	4604      	mov	r4, r0
 800d606:	e756      	b.n	800d4b6 <__kernel_rem_pio2f+0xa2>
 800d608:	d106      	bne.n	800d618 <__kernel_rem_pio2f+0x204>
 800d60a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d60e:	aa0a      	add	r2, sp, #40	; 0x28
 800d610:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d614:	1224      	asrs	r4, r4, #8
 800d616:	e785      	b.n	800d524 <__kernel_rem_pio2f+0x110>
 800d618:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d61c:	f7f3 fd3c 	bl	8001098 <__aeabi_fcmpge>
 800d620:	4604      	mov	r4, r0
 800d622:	2800      	cmp	r0, #0
 800d624:	d134      	bne.n	800d690 <__kernel_rem_pio2f+0x27c>
 800d626:	2100      	movs	r1, #0
 800d628:	4648      	mov	r0, r9
 800d62a:	f7f3 fd17 	bl	800105c <__aeabi_fcmpeq>
 800d62e:	2800      	cmp	r0, #0
 800d630:	f000 809a 	beq.w	800d768 <__kernel_rem_pio2f+0x354>
 800d634:	f108 35ff 	add.w	r5, r8, #4294967295
 800d638:	462b      	mov	r3, r5
 800d63a:	2200      	movs	r2, #0
 800d63c:	9901      	ldr	r1, [sp, #4]
 800d63e:	428b      	cmp	r3, r1
 800d640:	da4d      	bge.n	800d6de <__kernel_rem_pio2f+0x2ca>
 800d642:	2a00      	cmp	r2, #0
 800d644:	d07c      	beq.n	800d740 <__kernel_rem_pio2f+0x32c>
 800d646:	ab0a      	add	r3, sp, #40	; 0x28
 800d648:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d64c:	3f08      	subs	r7, #8
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8088 	beq.w	800d764 <__kernel_rem_pio2f+0x350>
 800d654:	4639      	mov	r1, r7
 800d656:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d65a:	f000 fb71 	bl	800dd40 <scalbnf>
 800d65e:	46aa      	mov	sl, r5
 800d660:	4681      	mov	r9, r0
 800d662:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800d666:	af46      	add	r7, sp, #280	; 0x118
 800d668:	f1ba 0f00 	cmp.w	sl, #0
 800d66c:	f280 80b1 	bge.w	800d7d2 <__kernel_rem_pio2f+0x3be>
 800d670:	46a9      	mov	r9, r5
 800d672:	f04f 0a00 	mov.w	sl, #0
 800d676:	2200      	movs	r2, #0
 800d678:	f1b9 0f00 	cmp.w	r9, #0
 800d67c:	f2c0 80db 	blt.w	800d836 <__kernel_rem_pio2f+0x422>
 800d680:	a946      	add	r1, sp, #280	; 0x118
 800d682:	4617      	mov	r7, r2
 800d684:	f04f 0800 	mov.w	r8, #0
 800d688:	4b2c      	ldr	r3, [pc, #176]	; (800d73c <__kernel_rem_pio2f+0x328>)
 800d68a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800d68e:	e0c3      	b.n	800d818 <__kernel_rem_pio2f+0x404>
 800d690:	2402      	movs	r4, #2
 800d692:	e749      	b.n	800d528 <__kernel_rem_pio2f+0x114>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	f1ba 0f00 	cmp.w	sl, #0
 800d69a:	d108      	bne.n	800d6ae <__kernel_rem_pio2f+0x29a>
 800d69c:	b11b      	cbz	r3, 800d6a6 <__kernel_rem_pio2f+0x292>
 800d69e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d6a2:	602b      	str	r3, [r5, #0]
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	469a      	mov	sl, r3
 800d6a8:	3201      	adds	r2, #1
 800d6aa:	3504      	adds	r5, #4
 800d6ac:	e73f      	b.n	800d52e <__kernel_rem_pio2f+0x11a>
 800d6ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d6b2:	602b      	str	r3, [r5, #0]
 800d6b4:	4653      	mov	r3, sl
 800d6b6:	e7f6      	b.n	800d6a6 <__kernel_rem_pio2f+0x292>
 800d6b8:	f108 32ff 	add.w	r2, r8, #4294967295
 800d6bc:	ab0a      	add	r3, sp, #40	; 0x28
 800d6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6c6:	a90a      	add	r1, sp, #40	; 0x28
 800d6c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d6cc:	e73a      	b.n	800d544 <__kernel_rem_pio2f+0x130>
 800d6ce:	f108 32ff 	add.w	r2, r8, #4294967295
 800d6d2:	ab0a      	add	r3, sp, #40	; 0x28
 800d6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6dc:	e7f3      	b.n	800d6c6 <__kernel_rem_pio2f+0x2b2>
 800d6de:	a90a      	add	r1, sp, #40	; 0x28
 800d6e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	e7a8      	b.n	800d63c <__kernel_rem_pio2f+0x228>
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	d0fa      	beq.n	800d6ea <__kernel_rem_pio2f+0x2d6>
 800d6f4:	9a04      	ldr	r2, [sp, #16]
 800d6f6:	f108 0501 	add.w	r5, r8, #1
 800d6fa:	eb08 0402 	add.w	r4, r8, r2
 800d6fe:	aa1e      	add	r2, sp, #120	; 0x78
 800d700:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d704:	4498      	add	r8, r3
 800d706:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800d70a:	45a8      	cmp	r8, r5
 800d70c:	f6ff aec7 	blt.w	800d49e <__kernel_rem_pio2f+0x8a>
 800d710:	9b07      	ldr	r3, [sp, #28]
 800d712:	46a3      	mov	fp, r4
 800d714:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d718:	f7f3 fab8 	bl	8000c8c <__aeabi_i2f>
 800d71c:	f04f 0a00 	mov.w	sl, #0
 800d720:	2600      	movs	r6, #0
 800d722:	f84b 0b04 	str.w	r0, [fp], #4
 800d726:	9b03      	ldr	r3, [sp, #12]
 800d728:	459a      	cmp	sl, r3
 800d72a:	dd0c      	ble.n	800d746 <__kernel_rem_pio2f+0x332>
 800d72c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800d730:	465c      	mov	r4, fp
 800d732:	3501      	adds	r5, #1
 800d734:	e7e9      	b.n	800d70a <__kernel_rem_pio2f+0x2f6>
 800d736:	bf00      	nop
 800d738:	0800e544 	.word	0x0800e544
 800d73c:	0800e518 	.word	0x0800e518
 800d740:	2301      	movs	r3, #1
 800d742:	9a08      	ldr	r2, [sp, #32]
 800d744:	e7d2      	b.n	800d6ec <__kernel_rem_pio2f+0x2d8>
 800d746:	9b05      	ldr	r3, [sp, #20]
 800d748:	f854 0904 	ldr.w	r0, [r4], #-4
 800d74c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d750:	f7f3 faf0 	bl	8000d34 <__aeabi_fmul>
 800d754:	4601      	mov	r1, r0
 800d756:	4630      	mov	r0, r6
 800d758:	f7f3 f9e4 	bl	8000b24 <__addsf3>
 800d75c:	f10a 0a01 	add.w	sl, sl, #1
 800d760:	4606      	mov	r6, r0
 800d762:	e7e0      	b.n	800d726 <__kernel_rem_pio2f+0x312>
 800d764:	3d01      	subs	r5, #1
 800d766:	e76e      	b.n	800d646 <__kernel_rem_pio2f+0x232>
 800d768:	9b06      	ldr	r3, [sp, #24]
 800d76a:	9a02      	ldr	r2, [sp, #8]
 800d76c:	4648      	mov	r0, r9
 800d76e:	1a99      	subs	r1, r3, r2
 800d770:	f000 fae6 	bl	800dd40 <scalbnf>
 800d774:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d778:	4605      	mov	r5, r0
 800d77a:	f7f3 fc8d 	bl	8001098 <__aeabi_fcmpge>
 800d77e:	b300      	cbz	r0, 800d7c2 <__kernel_rem_pio2f+0x3ae>
 800d780:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d784:	4628      	mov	r0, r5
 800d786:	f7f3 fad5 	bl	8000d34 <__aeabi_fmul>
 800d78a:	f7f3 fcaf 	bl	80010ec <__aeabi_f2iz>
 800d78e:	f7f3 fa7d 	bl	8000c8c <__aeabi_i2f>
 800d792:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d796:	4681      	mov	r9, r0
 800d798:	f7f3 facc 	bl	8000d34 <__aeabi_fmul>
 800d79c:	4601      	mov	r1, r0
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7f3 f9be 	bl	8000b20 <__aeabi_fsub>
 800d7a4:	f7f3 fca2 	bl	80010ec <__aeabi_f2iz>
 800d7a8:	ab0a      	add	r3, sp, #40	; 0x28
 800d7aa:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d7ae:	4648      	mov	r0, r9
 800d7b0:	f7f3 fc9c 	bl	80010ec <__aeabi_f2iz>
 800d7b4:	f108 0501 	add.w	r5, r8, #1
 800d7b8:	ab0a      	add	r3, sp, #40	; 0x28
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d7c0:	e748      	b.n	800d654 <__kernel_rem_pio2f+0x240>
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f7f3 fc92 	bl	80010ec <__aeabi_f2iz>
 800d7c8:	ab0a      	add	r3, sp, #40	; 0x28
 800d7ca:	4645      	mov	r5, r8
 800d7cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d7d0:	e740      	b.n	800d654 <__kernel_rem_pio2f+0x240>
 800d7d2:	ab0a      	add	r3, sp, #40	; 0x28
 800d7d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d7d8:	f7f3 fa58 	bl	8000c8c <__aeabi_i2f>
 800d7dc:	4649      	mov	r1, r9
 800d7de:	f7f3 faa9 	bl	8000d34 <__aeabi_fmul>
 800d7e2:	4641      	mov	r1, r8
 800d7e4:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800d7e8:	4648      	mov	r0, r9
 800d7ea:	f7f3 faa3 	bl	8000d34 <__aeabi_fmul>
 800d7ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7f2:	4681      	mov	r9, r0
 800d7f4:	e738      	b.n	800d668 <__kernel_rem_pio2f+0x254>
 800d7f6:	f853 0b04 	ldr.w	r0, [r3], #4
 800d7fa:	f85b 1b04 	ldr.w	r1, [fp], #4
 800d7fe:	9203      	str	r2, [sp, #12]
 800d800:	9302      	str	r3, [sp, #8]
 800d802:	f7f3 fa97 	bl	8000d34 <__aeabi_fmul>
 800d806:	4601      	mov	r1, r0
 800d808:	4638      	mov	r0, r7
 800d80a:	f7f3 f98b 	bl	8000b24 <__addsf3>
 800d80e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d812:	4607      	mov	r7, r0
 800d814:	f108 0801 	add.w	r8, r8, #1
 800d818:	9901      	ldr	r1, [sp, #4]
 800d81a:	4588      	cmp	r8, r1
 800d81c:	dc01      	bgt.n	800d822 <__kernel_rem_pio2f+0x40e>
 800d81e:	45c2      	cmp	sl, r8
 800d820:	dae9      	bge.n	800d7f6 <__kernel_rem_pio2f+0x3e2>
 800d822:	ab5a      	add	r3, sp, #360	; 0x168
 800d824:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d828:	f843 7ca0 	str.w	r7, [r3, #-160]
 800d82c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d830:	f10a 0a01 	add.w	sl, sl, #1
 800d834:	e720      	b.n	800d678 <__kernel_rem_pio2f+0x264>
 800d836:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d838:	2b02      	cmp	r3, #2
 800d83a:	dc07      	bgt.n	800d84c <__kernel_rem_pio2f+0x438>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dc4d      	bgt.n	800d8dc <__kernel_rem_pio2f+0x4c8>
 800d840:	d02e      	beq.n	800d8a0 <__kernel_rem_pio2f+0x48c>
 800d842:	f006 0007 	and.w	r0, r6, #7
 800d846:	b05b      	add	sp, #364	; 0x16c
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d1f7      	bne.n	800d842 <__kernel_rem_pio2f+0x42e>
 800d852:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800d856:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800d85a:	46b8      	mov	r8, r7
 800d85c:	46aa      	mov	sl, r5
 800d85e:	f1ba 0f00 	cmp.w	sl, #0
 800d862:	dc48      	bgt.n	800d8f6 <__kernel_rem_pio2f+0x4e2>
 800d864:	46a9      	mov	r9, r5
 800d866:	f1b9 0f01 	cmp.w	r9, #1
 800d86a:	dc5f      	bgt.n	800d92c <__kernel_rem_pio2f+0x518>
 800d86c:	2000      	movs	r0, #0
 800d86e:	2d01      	cmp	r5, #1
 800d870:	dc75      	bgt.n	800d95e <__kernel_rem_pio2f+0x54a>
 800d872:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d874:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800d876:	2c00      	cmp	r4, #0
 800d878:	d177      	bne.n	800d96a <__kernel_rem_pio2f+0x556>
 800d87a:	9900      	ldr	r1, [sp, #0]
 800d87c:	600a      	str	r2, [r1, #0]
 800d87e:	460a      	mov	r2, r1
 800d880:	604b      	str	r3, [r1, #4]
 800d882:	6090      	str	r0, [r2, #8]
 800d884:	e7dd      	b.n	800d842 <__kernel_rem_pio2f+0x42e>
 800d886:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800d88a:	f7f3 f94b 	bl	8000b24 <__addsf3>
 800d88e:	3d01      	subs	r5, #1
 800d890:	2d00      	cmp	r5, #0
 800d892:	daf8      	bge.n	800d886 <__kernel_rem_pio2f+0x472>
 800d894:	b10c      	cbz	r4, 800d89a <__kernel_rem_pio2f+0x486>
 800d896:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d89a:	9b00      	ldr	r3, [sp, #0]
 800d89c:	6018      	str	r0, [r3, #0]
 800d89e:	e7d0      	b.n	800d842 <__kernel_rem_pio2f+0x42e>
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	af32      	add	r7, sp, #200	; 0xc8
 800d8a4:	e7f4      	b.n	800d890 <__kernel_rem_pio2f+0x47c>
 800d8a6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800d8aa:	f7f3 f93b 	bl	8000b24 <__addsf3>
 800d8ae:	3f01      	subs	r7, #1
 800d8b0:	2f00      	cmp	r7, #0
 800d8b2:	daf8      	bge.n	800d8a6 <__kernel_rem_pio2f+0x492>
 800d8b4:	b1bc      	cbz	r4, 800d8e6 <__kernel_rem_pio2f+0x4d2>
 800d8b6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800d8ba:	9a00      	ldr	r2, [sp, #0]
 800d8bc:	4601      	mov	r1, r0
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800d8c2:	f7f3 f92d 	bl	8000b20 <__aeabi_fsub>
 800d8c6:	2701      	movs	r7, #1
 800d8c8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800d8cc:	42bd      	cmp	r5, r7
 800d8ce:	da0c      	bge.n	800d8ea <__kernel_rem_pio2f+0x4d6>
 800d8d0:	b10c      	cbz	r4, 800d8d6 <__kernel_rem_pio2f+0x4c2>
 800d8d2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d8d6:	9b00      	ldr	r3, [sp, #0]
 800d8d8:	6058      	str	r0, [r3, #4]
 800d8da:	e7b2      	b.n	800d842 <__kernel_rem_pio2f+0x42e>
 800d8dc:	462f      	mov	r7, r5
 800d8de:	2000      	movs	r0, #0
 800d8e0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800d8e4:	e7e4      	b.n	800d8b0 <__kernel_rem_pio2f+0x49c>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	e7e7      	b.n	800d8ba <__kernel_rem_pio2f+0x4a6>
 800d8ea:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800d8ee:	f7f3 f919 	bl	8000b24 <__addsf3>
 800d8f2:	3701      	adds	r7, #1
 800d8f4:	e7ea      	b.n	800d8cc <__kernel_rem_pio2f+0x4b8>
 800d8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8fa:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	9302      	str	r3, [sp, #8]
 800d904:	9201      	str	r2, [sp, #4]
 800d906:	f7f3 f90d 	bl	8000b24 <__addsf3>
 800d90a:	9a01      	ldr	r2, [sp, #4]
 800d90c:	4601      	mov	r1, r0
 800d90e:	4681      	mov	r9, r0
 800d910:	4610      	mov	r0, r2
 800d912:	f7f3 f905 	bl	8000b20 <__aeabi_fsub>
 800d916:	9b02      	ldr	r3, [sp, #8]
 800d918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d91c:	4619      	mov	r1, r3
 800d91e:	f7f3 f901 	bl	8000b24 <__addsf3>
 800d922:	f848 0904 	str.w	r0, [r8], #-4
 800d926:	f8c8 9000 	str.w	r9, [r8]
 800d92a:	e798      	b.n	800d85e <__kernel_rem_pio2f+0x44a>
 800d92c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800d930:	f8d7 a000 	ldr.w	sl, [r7]
 800d934:	4618      	mov	r0, r3
 800d936:	4651      	mov	r1, sl
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	f7f3 f8f3 	bl	8000b24 <__addsf3>
 800d93e:	9b01      	ldr	r3, [sp, #4]
 800d940:	4601      	mov	r1, r0
 800d942:	4680      	mov	r8, r0
 800d944:	4618      	mov	r0, r3
 800d946:	f7f3 f8eb 	bl	8000b20 <__aeabi_fsub>
 800d94a:	4651      	mov	r1, sl
 800d94c:	f7f3 f8ea 	bl	8000b24 <__addsf3>
 800d950:	f847 0904 	str.w	r0, [r7], #-4
 800d954:	f109 39ff 	add.w	r9, r9, #4294967295
 800d958:	f8c7 8000 	str.w	r8, [r7]
 800d95c:	e783      	b.n	800d866 <__kernel_rem_pio2f+0x452>
 800d95e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800d962:	f7f3 f8df 	bl	8000b24 <__addsf3>
 800d966:	3d01      	subs	r5, #1
 800d968:	e781      	b.n	800d86e <__kernel_rem_pio2f+0x45a>
 800d96a:	9900      	ldr	r1, [sp, #0]
 800d96c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800d970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d974:	600a      	str	r2, [r1, #0]
 800d976:	604b      	str	r3, [r1, #4]
 800d978:	460a      	mov	r2, r1
 800d97a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d97e:	e780      	b.n	800d882 <__kernel_rem_pio2f+0x46e>

0800d980 <__kernel_sinf>:
 800d980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d984:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d988:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d98c:	4604      	mov	r4, r0
 800d98e:	460f      	mov	r7, r1
 800d990:	4691      	mov	r9, r2
 800d992:	da03      	bge.n	800d99c <__kernel_sinf+0x1c>
 800d994:	f7f3 fbaa 	bl	80010ec <__aeabi_f2iz>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d035      	beq.n	800da08 <__kernel_sinf+0x88>
 800d99c:	4621      	mov	r1, r4
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7f3 f9c8 	bl	8000d34 <__aeabi_fmul>
 800d9a4:	4605      	mov	r5, r0
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f7f3 f9c3 	bl	8000d34 <__aeabi_fmul>
 800d9ae:	4929      	ldr	r1, [pc, #164]	; (800da54 <__kernel_sinf+0xd4>)
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f7f3 f9be 	bl	8000d34 <__aeabi_fmul>
 800d9b8:	4927      	ldr	r1, [pc, #156]	; (800da58 <__kernel_sinf+0xd8>)
 800d9ba:	f7f3 f8b1 	bl	8000b20 <__aeabi_fsub>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f3 f9b8 	bl	8000d34 <__aeabi_fmul>
 800d9c4:	4925      	ldr	r1, [pc, #148]	; (800da5c <__kernel_sinf+0xdc>)
 800d9c6:	f7f3 f8ad 	bl	8000b24 <__addsf3>
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f3 f9b2 	bl	8000d34 <__aeabi_fmul>
 800d9d0:	4923      	ldr	r1, [pc, #140]	; (800da60 <__kernel_sinf+0xe0>)
 800d9d2:	f7f3 f8a5 	bl	8000b20 <__aeabi_fsub>
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f3 f9ac 	bl	8000d34 <__aeabi_fmul>
 800d9dc:	4921      	ldr	r1, [pc, #132]	; (800da64 <__kernel_sinf+0xe4>)
 800d9de:	f7f3 f8a1 	bl	8000b24 <__addsf3>
 800d9e2:	4680      	mov	r8, r0
 800d9e4:	f1b9 0f00 	cmp.w	r9, #0
 800d9e8:	d111      	bne.n	800da0e <__kernel_sinf+0x8e>
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f7f3 f9a1 	bl	8000d34 <__aeabi_fmul>
 800d9f2:	491d      	ldr	r1, [pc, #116]	; (800da68 <__kernel_sinf+0xe8>)
 800d9f4:	f7f3 f894 	bl	8000b20 <__aeabi_fsub>
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	f7f3 f99b 	bl	8000d34 <__aeabi_fmul>
 800d9fe:	4601      	mov	r1, r0
 800da00:	4620      	mov	r0, r4
 800da02:	f7f3 f88f 	bl	8000b24 <__addsf3>
 800da06:	4604      	mov	r4, r0
 800da08:	4620      	mov	r0, r4
 800da0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800da12:	4638      	mov	r0, r7
 800da14:	f7f3 f98e 	bl	8000d34 <__aeabi_fmul>
 800da18:	4641      	mov	r1, r8
 800da1a:	4681      	mov	r9, r0
 800da1c:	4630      	mov	r0, r6
 800da1e:	f7f3 f989 	bl	8000d34 <__aeabi_fmul>
 800da22:	4601      	mov	r1, r0
 800da24:	4648      	mov	r0, r9
 800da26:	f7f3 f87b 	bl	8000b20 <__aeabi_fsub>
 800da2a:	4629      	mov	r1, r5
 800da2c:	f7f3 f982 	bl	8000d34 <__aeabi_fmul>
 800da30:	4639      	mov	r1, r7
 800da32:	f7f3 f875 	bl	8000b20 <__aeabi_fsub>
 800da36:	490c      	ldr	r1, [pc, #48]	; (800da68 <__kernel_sinf+0xe8>)
 800da38:	4605      	mov	r5, r0
 800da3a:	4630      	mov	r0, r6
 800da3c:	f7f3 f97a 	bl	8000d34 <__aeabi_fmul>
 800da40:	4601      	mov	r1, r0
 800da42:	4628      	mov	r0, r5
 800da44:	f7f3 f86e 	bl	8000b24 <__addsf3>
 800da48:	4601      	mov	r1, r0
 800da4a:	4620      	mov	r0, r4
 800da4c:	f7f3 f868 	bl	8000b20 <__aeabi_fsub>
 800da50:	e7d9      	b.n	800da06 <__kernel_sinf+0x86>
 800da52:	bf00      	nop
 800da54:	2f2ec9d3 	.word	0x2f2ec9d3
 800da58:	32d72f34 	.word	0x32d72f34
 800da5c:	3638ef1b 	.word	0x3638ef1b
 800da60:	39500d01 	.word	0x39500d01
 800da64:	3c088889 	.word	0x3c088889
 800da68:	3e2aaaab 	.word	0x3e2aaaab

0800da6c <fabs>:
 800da6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800da70:	4770      	bx	lr

0800da72 <finite>:
 800da72:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800da76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800da7a:	0fc0      	lsrs	r0, r0, #31
 800da7c:	4770      	bx	lr
	...

0800da80 <nan>:
 800da80:	2000      	movs	r0, #0
 800da82:	4901      	ldr	r1, [pc, #4]	; (800da88 <nan+0x8>)
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	7ff80000 	.word	0x7ff80000

0800da8c <rint>:
 800da8c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800da90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da92:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800da96:	2f13      	cmp	r7, #19
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	460c      	mov	r4, r1
 800da9e:	4605      	mov	r5, r0
 800daa0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800daa4:	dc59      	bgt.n	800db5a <rint+0xce>
 800daa6:	2f00      	cmp	r7, #0
 800daa8:	da2a      	bge.n	800db00 <rint+0x74>
 800daaa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800daae:	4301      	orrs	r1, r0
 800dab0:	d022      	beq.n	800daf8 <rint+0x6c>
 800dab2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800dab6:	4301      	orrs	r1, r0
 800dab8:	424d      	negs	r5, r1
 800daba:	430d      	orrs	r5, r1
 800dabc:	4936      	ldr	r1, [pc, #216]	; (800db98 <rint+0x10c>)
 800dabe:	0c5c      	lsrs	r4, r3, #17
 800dac0:	0b2d      	lsrs	r5, r5, #12
 800dac2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800dac6:	0464      	lsls	r4, r4, #17
 800dac8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dacc:	ea45 0304 	orr.w	r3, r5, r4
 800dad0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fb40 	bl	800015c <__adddf3>
 800dadc:	e9cd 0100 	strd	r0, r1, [sp]
 800dae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dae4:	462b      	mov	r3, r5
 800dae6:	4622      	mov	r2, r4
 800dae8:	f7f2 fb36 	bl	8000158 <__aeabi_dsub>
 800daec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800daf0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4610      	mov	r0, r2
 800dafa:	4619      	mov	r1, r3
 800dafc:	b003      	add	sp, #12
 800dafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db00:	4926      	ldr	r1, [pc, #152]	; (800db9c <rint+0x110>)
 800db02:	4139      	asrs	r1, r7
 800db04:	ea03 0001 	and.w	r0, r3, r1
 800db08:	4310      	orrs	r0, r2
 800db0a:	d0f5      	beq.n	800daf8 <rint+0x6c>
 800db0c:	084b      	lsrs	r3, r1, #1
 800db0e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800db12:	ea52 0501 	orrs.w	r5, r2, r1
 800db16:	d00c      	beq.n	800db32 <rint+0xa6>
 800db18:	ea24 0303 	bic.w	r3, r4, r3
 800db1c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800db20:	2f13      	cmp	r7, #19
 800db22:	bf0c      	ite	eq
 800db24:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800db28:	2500      	movne	r5, #0
 800db2a:	fa44 f707 	asr.w	r7, r4, r7
 800db2e:	ea43 0407 	orr.w	r4, r3, r7
 800db32:	4919      	ldr	r1, [pc, #100]	; (800db98 <rint+0x10c>)
 800db34:	4623      	mov	r3, r4
 800db36:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800db3a:	462a      	mov	r2, r5
 800db3c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800db40:	4620      	mov	r0, r4
 800db42:	4629      	mov	r1, r5
 800db44:	f7f2 fb0a 	bl	800015c <__adddf3>
 800db48:	e9cd 0100 	strd	r0, r1, [sp]
 800db4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db50:	4622      	mov	r2, r4
 800db52:	462b      	mov	r3, r5
 800db54:	f7f2 fb00 	bl	8000158 <__aeabi_dsub>
 800db58:	e7cc      	b.n	800daf4 <rint+0x68>
 800db5a:	2f33      	cmp	r7, #51	; 0x33
 800db5c:	dd05      	ble.n	800db6a <rint+0xde>
 800db5e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800db62:	d1c9      	bne.n	800daf8 <rint+0x6c>
 800db64:	f7f2 fafa 	bl	800015c <__adddf3>
 800db68:	e7c4      	b.n	800daf4 <rint+0x68>
 800db6a:	f04f 31ff 	mov.w	r1, #4294967295
 800db6e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800db72:	fa21 f10c 	lsr.w	r1, r1, ip
 800db76:	4208      	tst	r0, r1
 800db78:	d0be      	beq.n	800daf8 <rint+0x6c>
 800db7a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800db7e:	bf18      	it	ne
 800db80:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800db84:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800db88:	bf1e      	ittt	ne
 800db8a:	ea20 0303 	bicne.w	r3, r0, r3
 800db8e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800db92:	ea43 050c 	orrne.w	r5, r3, ip
 800db96:	e7cc      	b.n	800db32 <rint+0xa6>
 800db98:	0800e550 	.word	0x0800e550
 800db9c:	000fffff 	.word	0x000fffff

0800dba0 <scalbn>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800dba6:	4604      	mov	r4, r0
 800dba8:	460d      	mov	r5, r1
 800dbaa:	4617      	mov	r7, r2
 800dbac:	460b      	mov	r3, r1
 800dbae:	b996      	cbnz	r6, 800dbd6 <scalbn+0x36>
 800dbb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbb4:	4303      	orrs	r3, r0
 800dbb6:	d039      	beq.n	800dc2c <scalbn+0x8c>
 800dbb8:	4b35      	ldr	r3, [pc, #212]	; (800dc90 <scalbn+0xf0>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f7f2 fc84 	bl	80004c8 <__aeabi_dmul>
 800dbc0:	4b34      	ldr	r3, [pc, #208]	; (800dc94 <scalbn+0xf4>)
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	429f      	cmp	r7, r3
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	da0f      	bge.n	800dbea <scalbn+0x4a>
 800dbca:	a32d      	add	r3, pc, #180	; (adr r3, 800dc80 <scalbn+0xe0>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f7f2 fc7a 	bl	80004c8 <__aeabi_dmul>
 800dbd4:	e006      	b.n	800dbe4 <scalbn+0x44>
 800dbd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dbda:	4296      	cmp	r6, r2
 800dbdc:	d10a      	bne.n	800dbf4 <scalbn+0x54>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f7f2 fabc 	bl	800015c <__adddf3>
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	460d      	mov	r5, r1
 800dbe8:	e020      	b.n	800dc2c <scalbn+0x8c>
 800dbea:	460b      	mov	r3, r1
 800dbec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dbf0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800dbf4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800dbf8:	19b9      	adds	r1, r7, r6
 800dbfa:	4291      	cmp	r1, r2
 800dbfc:	dd0e      	ble.n	800dc1c <scalbn+0x7c>
 800dbfe:	a322      	add	r3, pc, #136	; (adr r3, 800dc88 <scalbn+0xe8>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800dc08:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800dc0c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800dc10:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800dc14:	4820      	ldr	r0, [pc, #128]	; (800dc98 <scalbn+0xf8>)
 800dc16:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800dc1a:	e7d9      	b.n	800dbd0 <scalbn+0x30>
 800dc1c:	2900      	cmp	r1, #0
 800dc1e:	dd08      	ble.n	800dc32 <scalbn+0x92>
 800dc20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc28:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	4629      	mov	r1, r5
 800dc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc32:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800dc36:	da16      	bge.n	800dc66 <scalbn+0xc6>
 800dc38:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc3c:	429f      	cmp	r7, r3
 800dc3e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800dc42:	dd08      	ble.n	800dc56 <scalbn+0xb6>
 800dc44:	4c15      	ldr	r4, [pc, #84]	; (800dc9c <scalbn+0xfc>)
 800dc46:	4814      	ldr	r0, [pc, #80]	; (800dc98 <scalbn+0xf8>)
 800dc48:	f363 74df 	bfi	r4, r3, #31, #1
 800dc4c:	a30e      	add	r3, pc, #56	; (adr r3, 800dc88 <scalbn+0xe8>)
 800dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc52:	4621      	mov	r1, r4
 800dc54:	e7bc      	b.n	800dbd0 <scalbn+0x30>
 800dc56:	4c12      	ldr	r4, [pc, #72]	; (800dca0 <scalbn+0x100>)
 800dc58:	4812      	ldr	r0, [pc, #72]	; (800dca4 <scalbn+0x104>)
 800dc5a:	f363 74df 	bfi	r4, r3, #31, #1
 800dc5e:	a308      	add	r3, pc, #32	; (adr r3, 800dc80 <scalbn+0xe0>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	e7f5      	b.n	800dc52 <scalbn+0xb2>
 800dc66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc6a:	3136      	adds	r1, #54	; 0x36
 800dc6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800dc74:	4620      	mov	r0, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	2200      	movs	r2, #0
 800dc7a:	4b0b      	ldr	r3, [pc, #44]	; (800dca8 <scalbn+0x108>)
 800dc7c:	e7a8      	b.n	800dbd0 <scalbn+0x30>
 800dc7e:	bf00      	nop
 800dc80:	c2f8f359 	.word	0xc2f8f359
 800dc84:	01a56e1f 	.word	0x01a56e1f
 800dc88:	8800759c 	.word	0x8800759c
 800dc8c:	7e37e43c 	.word	0x7e37e43c
 800dc90:	43500000 	.word	0x43500000
 800dc94:	ffff3cb0 	.word	0xffff3cb0
 800dc98:	8800759c 	.word	0x8800759c
 800dc9c:	7e37e43c 	.word	0x7e37e43c
 800dca0:	01a56e1f 	.word	0x01a56e1f
 800dca4:	c2f8f359 	.word	0xc2f8f359
 800dca8:	3c900000 	.word	0x3c900000

0800dcac <fabsf>:
 800dcac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <floorf>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800dcba:	3d7f      	subs	r5, #127	; 0x7f
 800dcbc:	2d16      	cmp	r5, #22
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800dcc6:	dc26      	bgt.n	800dd16 <floorf+0x62>
 800dcc8:	2d00      	cmp	r5, #0
 800dcca:	da0e      	bge.n	800dcea <floorf+0x36>
 800dccc:	4917      	ldr	r1, [pc, #92]	; (800dd2c <floorf+0x78>)
 800dcce:	f7f2 ff29 	bl	8000b24 <__addsf3>
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	f7f3 f9ea 	bl	80010ac <__aeabi_fcmpgt>
 800dcd8:	b128      	cbz	r0, 800dce6 <floorf+0x32>
 800dcda:	2c00      	cmp	r4, #0
 800dcdc:	da23      	bge.n	800dd26 <floorf+0x72>
 800dcde:	4b14      	ldr	r3, [pc, #80]	; (800dd30 <floorf+0x7c>)
 800dce0:	2e00      	cmp	r6, #0
 800dce2:	bf18      	it	ne
 800dce4:	461c      	movne	r4, r3
 800dce6:	4621      	mov	r1, r4
 800dce8:	e01b      	b.n	800dd22 <floorf+0x6e>
 800dcea:	4e12      	ldr	r6, [pc, #72]	; (800dd34 <floorf+0x80>)
 800dcec:	412e      	asrs	r6, r5
 800dcee:	4230      	tst	r0, r6
 800dcf0:	d017      	beq.n	800dd22 <floorf+0x6e>
 800dcf2:	490e      	ldr	r1, [pc, #56]	; (800dd2c <floorf+0x78>)
 800dcf4:	f7f2 ff16 	bl	8000b24 <__addsf3>
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	f7f3 f9d7 	bl	80010ac <__aeabi_fcmpgt>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0f1      	beq.n	800dce6 <floorf+0x32>
 800dd02:	2c00      	cmp	r4, #0
 800dd04:	bfbe      	ittt	lt
 800dd06:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800dd0a:	fa43 f505 	asrlt.w	r5, r3, r5
 800dd0e:	1964      	addlt	r4, r4, r5
 800dd10:	ea24 0406 	bic.w	r4, r4, r6
 800dd14:	e7e7      	b.n	800dce6 <floorf+0x32>
 800dd16:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dd1a:	d302      	bcc.n	800dd22 <floorf+0x6e>
 800dd1c:	f7f2 ff02 	bl	8000b24 <__addsf3>
 800dd20:	4601      	mov	r1, r0
 800dd22:	4608      	mov	r0, r1
 800dd24:	bd70      	pop	{r4, r5, r6, pc}
 800dd26:	2400      	movs	r4, #0
 800dd28:	e7dd      	b.n	800dce6 <floorf+0x32>
 800dd2a:	bf00      	nop
 800dd2c:	7149f2ca 	.word	0x7149f2ca
 800dd30:	bf800000 	.word	0xbf800000
 800dd34:	007fffff 	.word	0x007fffff

0800dd38 <nanf>:
 800dd38:	4800      	ldr	r0, [pc, #0]	; (800dd3c <nanf+0x4>)
 800dd3a:	4770      	bx	lr
 800dd3c:	7fc00000 	.word	0x7fc00000

0800dd40 <scalbnf>:
 800dd40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800dd44:	b538      	push	{r3, r4, r5, lr}
 800dd46:	4603      	mov	r3, r0
 800dd48:	460d      	mov	r5, r1
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	d02a      	beq.n	800dda4 <scalbnf+0x64>
 800dd4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd52:	d304      	bcc.n	800dd5e <scalbnf+0x1e>
 800dd54:	4601      	mov	r1, r0
 800dd56:	f7f2 fee5 	bl	8000b24 <__addsf3>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	e022      	b.n	800dda4 <scalbnf+0x64>
 800dd5e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800dd62:	d117      	bne.n	800dd94 <scalbnf+0x54>
 800dd64:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800dd68:	f7f2 ffe4 	bl	8000d34 <__aeabi_fmul>
 800dd6c:	4a17      	ldr	r2, [pc, #92]	; (800ddcc <scalbnf+0x8c>)
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4295      	cmp	r5, r2
 800dd72:	db0b      	blt.n	800dd8c <scalbnf+0x4c>
 800dd74:	4604      	mov	r4, r0
 800dd76:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dd7a:	3a19      	subs	r2, #25
 800dd7c:	442a      	add	r2, r5
 800dd7e:	2afe      	cmp	r2, #254	; 0xfe
 800dd80:	dd0a      	ble.n	800dd98 <scalbnf+0x58>
 800dd82:	4913      	ldr	r1, [pc, #76]	; (800ddd0 <scalbnf+0x90>)
 800dd84:	4618      	mov	r0, r3
 800dd86:	f361 001e 	bfi	r0, r1, #0, #31
 800dd8a:	e000      	b.n	800dd8e <scalbnf+0x4e>
 800dd8c:	4911      	ldr	r1, [pc, #68]	; (800ddd4 <scalbnf+0x94>)
 800dd8e:	f7f2 ffd1 	bl	8000d34 <__aeabi_fmul>
 800dd92:	e7e2      	b.n	800dd5a <scalbnf+0x1a>
 800dd94:	0dd2      	lsrs	r2, r2, #23
 800dd96:	e7f1      	b.n	800dd7c <scalbnf+0x3c>
 800dd98:	2a00      	cmp	r2, #0
 800dd9a:	dd05      	ble.n	800dda8 <scalbnf+0x68>
 800dd9c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800dda0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800dda4:	4618      	mov	r0, r3
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	f112 0f16 	cmn.w	r2, #22
 800ddac:	da05      	bge.n	800ddba <scalbnf+0x7a>
 800ddae:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ddb2:	4295      	cmp	r5, r2
 800ddb4:	dce5      	bgt.n	800dd82 <scalbnf+0x42>
 800ddb6:	4907      	ldr	r1, [pc, #28]	; (800ddd4 <scalbnf+0x94>)
 800ddb8:	e7e4      	b.n	800dd84 <scalbnf+0x44>
 800ddba:	3219      	adds	r2, #25
 800ddbc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ddc0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ddc4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ddc8:	e7e1      	b.n	800dd8e <scalbnf+0x4e>
 800ddca:	bf00      	nop
 800ddcc:	ffff3cb0 	.word	0xffff3cb0
 800ddd0:	7149f2ca 	.word	0x7149f2ca
 800ddd4:	0da24260 	.word	0x0da24260

0800ddd8 <abort>:
 800ddd8:	2006      	movs	r0, #6
 800ddda:	b508      	push	{r3, lr}
 800dddc:	f000 f94c 	bl	800e078 <raise>
 800dde0:	2001      	movs	r0, #1
 800dde2:	f7f5 fd9c 	bl	800391e <_exit>
	...

0800dde8 <__errno>:
 800dde8:	4b01      	ldr	r3, [pc, #4]	; (800ddf0 <__errno+0x8>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	20000010 	.word	0x20000010

0800ddf4 <__libc_init_array>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	2600      	movs	r6, #0
 800ddf8:	4d0c      	ldr	r5, [pc, #48]	; (800de2c <__libc_init_array+0x38>)
 800ddfa:	4c0d      	ldr	r4, [pc, #52]	; (800de30 <__libc_init_array+0x3c>)
 800ddfc:	1b64      	subs	r4, r4, r5
 800ddfe:	10a4      	asrs	r4, r4, #2
 800de00:	42a6      	cmp	r6, r4
 800de02:	d109      	bne.n	800de18 <__libc_init_array+0x24>
 800de04:	f000 f962 	bl	800e0cc <_init>
 800de08:	2600      	movs	r6, #0
 800de0a:	4d0a      	ldr	r5, [pc, #40]	; (800de34 <__libc_init_array+0x40>)
 800de0c:	4c0a      	ldr	r4, [pc, #40]	; (800de38 <__libc_init_array+0x44>)
 800de0e:	1b64      	subs	r4, r4, r5
 800de10:	10a4      	asrs	r4, r4, #2
 800de12:	42a6      	cmp	r6, r4
 800de14:	d105      	bne.n	800de22 <__libc_init_array+0x2e>
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1c:	4798      	blx	r3
 800de1e:	3601      	adds	r6, #1
 800de20:	e7ee      	b.n	800de00 <__libc_init_array+0xc>
 800de22:	f855 3b04 	ldr.w	r3, [r5], #4
 800de26:	4798      	blx	r3
 800de28:	3601      	adds	r6, #1
 800de2a:	e7f2      	b.n	800de12 <__libc_init_array+0x1e>
 800de2c:	0800e5c0 	.word	0x0800e5c0
 800de30:	0800e5c0 	.word	0x0800e5c0
 800de34:	0800e5c0 	.word	0x0800e5c0
 800de38:	0800e5c8 	.word	0x0800e5c8

0800de3c <malloc>:
 800de3c:	4b02      	ldr	r3, [pc, #8]	; (800de48 <malloc+0xc>)
 800de3e:	4601      	mov	r1, r0
 800de40:	6818      	ldr	r0, [r3, #0]
 800de42:	f000 b887 	b.w	800df54 <_malloc_r>
 800de46:	bf00      	nop
 800de48:	20000010 	.word	0x20000010

0800de4c <free>:
 800de4c:	4b02      	ldr	r3, [pc, #8]	; (800de58 <free+0xc>)
 800de4e:	4601      	mov	r1, r0
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f000 b833 	b.w	800debc <_free_r>
 800de56:	bf00      	nop
 800de58:	20000010 	.word	0x20000010

0800de5c <memcpy>:
 800de5c:	440a      	add	r2, r1
 800de5e:	4291      	cmp	r1, r2
 800de60:	f100 33ff 	add.w	r3, r0, #4294967295
 800de64:	d100      	bne.n	800de68 <memcpy+0xc>
 800de66:	4770      	bx	lr
 800de68:	b510      	push	{r4, lr}
 800de6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6e:	4291      	cmp	r1, r2
 800de70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de74:	d1f9      	bne.n	800de6a <memcpy+0xe>
 800de76:	bd10      	pop	{r4, pc}

0800de78 <memmove>:
 800de78:	4288      	cmp	r0, r1
 800de7a:	b510      	push	{r4, lr}
 800de7c:	eb01 0402 	add.w	r4, r1, r2
 800de80:	d902      	bls.n	800de88 <memmove+0x10>
 800de82:	4284      	cmp	r4, r0
 800de84:	4623      	mov	r3, r4
 800de86:	d807      	bhi.n	800de98 <memmove+0x20>
 800de88:	1e43      	subs	r3, r0, #1
 800de8a:	42a1      	cmp	r1, r4
 800de8c:	d008      	beq.n	800dea0 <memmove+0x28>
 800de8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de96:	e7f8      	b.n	800de8a <memmove+0x12>
 800de98:	4601      	mov	r1, r0
 800de9a:	4402      	add	r2, r0
 800de9c:	428a      	cmp	r2, r1
 800de9e:	d100      	bne.n	800dea2 <memmove+0x2a>
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deaa:	e7f7      	b.n	800de9c <memmove+0x24>

0800deac <memset>:
 800deac:	4603      	mov	r3, r0
 800deae:	4402      	add	r2, r0
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d100      	bne.n	800deb6 <memset+0xa>
 800deb4:	4770      	bx	lr
 800deb6:	f803 1b01 	strb.w	r1, [r3], #1
 800deba:	e7f9      	b.n	800deb0 <memset+0x4>

0800debc <_free_r>:
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	4605      	mov	r5, r0
 800dec0:	2900      	cmp	r1, #0
 800dec2:	d043      	beq.n	800df4c <_free_r+0x90>
 800dec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dec8:	1f0c      	subs	r4, r1, #4
 800deca:	2b00      	cmp	r3, #0
 800decc:	bfb8      	it	lt
 800dece:	18e4      	addlt	r4, r4, r3
 800ded0:	f000 f8f0 	bl	800e0b4 <__malloc_lock>
 800ded4:	4a1e      	ldr	r2, [pc, #120]	; (800df50 <_free_r+0x94>)
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	4610      	mov	r0, r2
 800deda:	b933      	cbnz	r3, 800deea <_free_r+0x2e>
 800dedc:	6063      	str	r3, [r4, #4]
 800dede:	6014      	str	r4, [r2, #0]
 800dee0:	4628      	mov	r0, r5
 800dee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee6:	f000 b8eb 	b.w	800e0c0 <__malloc_unlock>
 800deea:	42a3      	cmp	r3, r4
 800deec:	d90a      	bls.n	800df04 <_free_r+0x48>
 800deee:	6821      	ldr	r1, [r4, #0]
 800def0:	1862      	adds	r2, r4, r1
 800def2:	4293      	cmp	r3, r2
 800def4:	bf01      	itttt	eq
 800def6:	681a      	ldreq	r2, [r3, #0]
 800def8:	685b      	ldreq	r3, [r3, #4]
 800defa:	1852      	addeq	r2, r2, r1
 800defc:	6022      	streq	r2, [r4, #0]
 800defe:	6063      	str	r3, [r4, #4]
 800df00:	6004      	str	r4, [r0, #0]
 800df02:	e7ed      	b.n	800dee0 <_free_r+0x24>
 800df04:	461a      	mov	r2, r3
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	b10b      	cbz	r3, 800df0e <_free_r+0x52>
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	d9fa      	bls.n	800df04 <_free_r+0x48>
 800df0e:	6811      	ldr	r1, [r2, #0]
 800df10:	1850      	adds	r0, r2, r1
 800df12:	42a0      	cmp	r0, r4
 800df14:	d10b      	bne.n	800df2e <_free_r+0x72>
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	4401      	add	r1, r0
 800df1a:	1850      	adds	r0, r2, r1
 800df1c:	4283      	cmp	r3, r0
 800df1e:	6011      	str	r1, [r2, #0]
 800df20:	d1de      	bne.n	800dee0 <_free_r+0x24>
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4401      	add	r1, r0
 800df28:	6011      	str	r1, [r2, #0]
 800df2a:	6053      	str	r3, [r2, #4]
 800df2c:	e7d8      	b.n	800dee0 <_free_r+0x24>
 800df2e:	d902      	bls.n	800df36 <_free_r+0x7a>
 800df30:	230c      	movs	r3, #12
 800df32:	602b      	str	r3, [r5, #0]
 800df34:	e7d4      	b.n	800dee0 <_free_r+0x24>
 800df36:	6820      	ldr	r0, [r4, #0]
 800df38:	1821      	adds	r1, r4, r0
 800df3a:	428b      	cmp	r3, r1
 800df3c:	bf01      	itttt	eq
 800df3e:	6819      	ldreq	r1, [r3, #0]
 800df40:	685b      	ldreq	r3, [r3, #4]
 800df42:	1809      	addeq	r1, r1, r0
 800df44:	6021      	streq	r1, [r4, #0]
 800df46:	6063      	str	r3, [r4, #4]
 800df48:	6054      	str	r4, [r2, #4]
 800df4a:	e7c9      	b.n	800dee0 <_free_r+0x24>
 800df4c:	bd38      	pop	{r3, r4, r5, pc}
 800df4e:	bf00      	nop
 800df50:	20000b4c 	.word	0x20000b4c

0800df54 <_malloc_r>:
 800df54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df56:	1ccd      	adds	r5, r1, #3
 800df58:	f025 0503 	bic.w	r5, r5, #3
 800df5c:	3508      	adds	r5, #8
 800df5e:	2d0c      	cmp	r5, #12
 800df60:	bf38      	it	cc
 800df62:	250c      	movcc	r5, #12
 800df64:	2d00      	cmp	r5, #0
 800df66:	4606      	mov	r6, r0
 800df68:	db01      	blt.n	800df6e <_malloc_r+0x1a>
 800df6a:	42a9      	cmp	r1, r5
 800df6c:	d903      	bls.n	800df76 <_malloc_r+0x22>
 800df6e:	230c      	movs	r3, #12
 800df70:	6033      	str	r3, [r6, #0]
 800df72:	2000      	movs	r0, #0
 800df74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df76:	f000 f89d 	bl	800e0b4 <__malloc_lock>
 800df7a:	4921      	ldr	r1, [pc, #132]	; (800e000 <_malloc_r+0xac>)
 800df7c:	680a      	ldr	r2, [r1, #0]
 800df7e:	4614      	mov	r4, r2
 800df80:	b99c      	cbnz	r4, 800dfaa <_malloc_r+0x56>
 800df82:	4f20      	ldr	r7, [pc, #128]	; (800e004 <_malloc_r+0xb0>)
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	b923      	cbnz	r3, 800df92 <_malloc_r+0x3e>
 800df88:	4621      	mov	r1, r4
 800df8a:	4630      	mov	r0, r6
 800df8c:	f000 f83c 	bl	800e008 <_sbrk_r>
 800df90:	6038      	str	r0, [r7, #0]
 800df92:	4629      	mov	r1, r5
 800df94:	4630      	mov	r0, r6
 800df96:	f000 f837 	bl	800e008 <_sbrk_r>
 800df9a:	1c43      	adds	r3, r0, #1
 800df9c:	d123      	bne.n	800dfe6 <_malloc_r+0x92>
 800df9e:	230c      	movs	r3, #12
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	6033      	str	r3, [r6, #0]
 800dfa4:	f000 f88c 	bl	800e0c0 <__malloc_unlock>
 800dfa8:	e7e3      	b.n	800df72 <_malloc_r+0x1e>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	1b5b      	subs	r3, r3, r5
 800dfae:	d417      	bmi.n	800dfe0 <_malloc_r+0x8c>
 800dfb0:	2b0b      	cmp	r3, #11
 800dfb2:	d903      	bls.n	800dfbc <_malloc_r+0x68>
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	441c      	add	r4, r3
 800dfb8:	6025      	str	r5, [r4, #0]
 800dfba:	e004      	b.n	800dfc6 <_malloc_r+0x72>
 800dfbc:	6863      	ldr	r3, [r4, #4]
 800dfbe:	42a2      	cmp	r2, r4
 800dfc0:	bf0c      	ite	eq
 800dfc2:	600b      	streq	r3, [r1, #0]
 800dfc4:	6053      	strne	r3, [r2, #4]
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f000 f87a 	bl	800e0c0 <__malloc_unlock>
 800dfcc:	f104 000b 	add.w	r0, r4, #11
 800dfd0:	1d23      	adds	r3, r4, #4
 800dfd2:	f020 0007 	bic.w	r0, r0, #7
 800dfd6:	1ac2      	subs	r2, r0, r3
 800dfd8:	d0cc      	beq.n	800df74 <_malloc_r+0x20>
 800dfda:	1a1b      	subs	r3, r3, r0
 800dfdc:	50a3      	str	r3, [r4, r2]
 800dfde:	e7c9      	b.n	800df74 <_malloc_r+0x20>
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	6864      	ldr	r4, [r4, #4]
 800dfe4:	e7cc      	b.n	800df80 <_malloc_r+0x2c>
 800dfe6:	1cc4      	adds	r4, r0, #3
 800dfe8:	f024 0403 	bic.w	r4, r4, #3
 800dfec:	42a0      	cmp	r0, r4
 800dfee:	d0e3      	beq.n	800dfb8 <_malloc_r+0x64>
 800dff0:	1a21      	subs	r1, r4, r0
 800dff2:	4630      	mov	r0, r6
 800dff4:	f000 f808 	bl	800e008 <_sbrk_r>
 800dff8:	3001      	adds	r0, #1
 800dffa:	d1dd      	bne.n	800dfb8 <_malloc_r+0x64>
 800dffc:	e7cf      	b.n	800df9e <_malloc_r+0x4a>
 800dffe:	bf00      	nop
 800e000:	20000b4c 	.word	0x20000b4c
 800e004:	20000b50 	.word	0x20000b50

0800e008 <_sbrk_r>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	2300      	movs	r3, #0
 800e00c:	4d05      	ldr	r5, [pc, #20]	; (800e024 <_sbrk_r+0x1c>)
 800e00e:	4604      	mov	r4, r0
 800e010:	4608      	mov	r0, r1
 800e012:	602b      	str	r3, [r5, #0]
 800e014:	f7f5 fc8e 	bl	8003934 <_sbrk>
 800e018:	1c43      	adds	r3, r0, #1
 800e01a:	d102      	bne.n	800e022 <_sbrk_r+0x1a>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	b103      	cbz	r3, 800e022 <_sbrk_r+0x1a>
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	20000b68 	.word	0x20000b68

0800e028 <_raise_r>:
 800e028:	291f      	cmp	r1, #31
 800e02a:	b538      	push	{r3, r4, r5, lr}
 800e02c:	4604      	mov	r4, r0
 800e02e:	460d      	mov	r5, r1
 800e030:	d904      	bls.n	800e03c <_raise_r+0x14>
 800e032:	2316      	movs	r3, #22
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	f04f 30ff 	mov.w	r0, #4294967295
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e03e:	b112      	cbz	r2, 800e046 <_raise_r+0x1e>
 800e040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e044:	b94b      	cbnz	r3, 800e05a <_raise_r+0x32>
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f830 	bl	800e0ac <_getpid_r>
 800e04c:	462a      	mov	r2, r5
 800e04e:	4601      	mov	r1, r0
 800e050:	4620      	mov	r0, r4
 800e052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e056:	f000 b817 	b.w	800e088 <_kill_r>
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d00a      	beq.n	800e074 <_raise_r+0x4c>
 800e05e:	1c59      	adds	r1, r3, #1
 800e060:	d103      	bne.n	800e06a <_raise_r+0x42>
 800e062:	2316      	movs	r3, #22
 800e064:	6003      	str	r3, [r0, #0]
 800e066:	2001      	movs	r0, #1
 800e068:	e7e7      	b.n	800e03a <_raise_r+0x12>
 800e06a:	2400      	movs	r4, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e072:	4798      	blx	r3
 800e074:	2000      	movs	r0, #0
 800e076:	e7e0      	b.n	800e03a <_raise_r+0x12>

0800e078 <raise>:
 800e078:	4b02      	ldr	r3, [pc, #8]	; (800e084 <raise+0xc>)
 800e07a:	4601      	mov	r1, r0
 800e07c:	6818      	ldr	r0, [r3, #0]
 800e07e:	f7ff bfd3 	b.w	800e028 <_raise_r>
 800e082:	bf00      	nop
 800e084:	20000010 	.word	0x20000010

0800e088 <_kill_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	2300      	movs	r3, #0
 800e08c:	4d06      	ldr	r5, [pc, #24]	; (800e0a8 <_kill_r+0x20>)
 800e08e:	4604      	mov	r4, r0
 800e090:	4608      	mov	r0, r1
 800e092:	4611      	mov	r1, r2
 800e094:	602b      	str	r3, [r5, #0]
 800e096:	f7f5 fc32 	bl	80038fe <_kill>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	d102      	bne.n	800e0a4 <_kill_r+0x1c>
 800e09e:	682b      	ldr	r3, [r5, #0]
 800e0a0:	b103      	cbz	r3, 800e0a4 <_kill_r+0x1c>
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	bd38      	pop	{r3, r4, r5, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000b68 	.word	0x20000b68

0800e0ac <_getpid_r>:
 800e0ac:	f7f5 bc20 	b.w	80038f0 <_getpid>

0800e0b0 <__retarget_lock_acquire_recursive>:
 800e0b0:	4770      	bx	lr

0800e0b2 <__retarget_lock_release_recursive>:
 800e0b2:	4770      	bx	lr

0800e0b4 <__malloc_lock>:
 800e0b4:	4801      	ldr	r0, [pc, #4]	; (800e0bc <__malloc_lock+0x8>)
 800e0b6:	f7ff bffb 	b.w	800e0b0 <__retarget_lock_acquire_recursive>
 800e0ba:	bf00      	nop
 800e0bc:	20000b60 	.word	0x20000b60

0800e0c0 <__malloc_unlock>:
 800e0c0:	4801      	ldr	r0, [pc, #4]	; (800e0c8 <__malloc_unlock+0x8>)
 800e0c2:	f7ff bff6 	b.w	800e0b2 <__retarget_lock_release_recursive>
 800e0c6:	bf00      	nop
 800e0c8:	20000b60 	.word	0x20000b60

0800e0cc <_init>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	bf00      	nop
 800e0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d2:	bc08      	pop	{r3}
 800e0d4:	469e      	mov	lr, r3
 800e0d6:	4770      	bx	lr

0800e0d8 <_fini>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	bf00      	nop
 800e0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0de:	bc08      	pop	{r3}
 800e0e0:	469e      	mov	lr, r3
 800e0e2:	4770      	bx	lr
