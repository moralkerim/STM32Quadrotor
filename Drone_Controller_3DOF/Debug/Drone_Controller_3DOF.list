
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  08011b78  08011b78  00021b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012860  08012860  00030088  2**0
                  CONTENTS
  4 .ARM          00000000  08012860  08012860  00030088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012860  08012860  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012860  08012860  00022860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012868  08012868  00022868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012870  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000088  080128f8  00030088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bdc  080128f8  00031bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e456  00000000  00000000  000300b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a12  00000000  00000000  0005e507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00063f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00065928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5e6  00000000  00000000  00067170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002037e  00000000  00000000  00086756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099436  00000000  00000000  000a6ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ff0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db8  00000000  00000000  0013ff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08011b5c 	.word	0x08011b5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08011b5c 	.word	0x08011b5c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HMC5883L_initialize+0x44>)
 8001180:	223c      	movs	r2, #60	; 0x3c
 8001182:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001184:	2378      	movs	r3, #120	; 0x78
 8001186:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HMC5883L_initialize+0x44>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b299      	uxth	r1, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HMC5883L_initialize+0x48>)
 80011a2:	f006 fad7 	bl	8007754 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f80c 	bl	80011c4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f829 	bl	8001204 <HMC5883L_setMode>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000a4 	.word	0x200000a4
 80011c0:	200018b4 	.word	0x200018b4

080011c4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HMC5883L_setGain+0x38>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b299      	uxth	r1, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2201      	movs	r2, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HMC5883L_setGain+0x3c>)
 80011f0:	f006 fab0 	bl	8007754 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a4 	.word	0x200000a4
 8001200:	200018b4 	.word	0x200018b4

08001204 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HMC5883L_setMode+0x3c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <HMC5883L_setMode+0x40>)
 800122c:	f006 fa92 	bl	8007754 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HMC5883L_setMode+0x44>)
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000a4 	.word	0x200000a4
 8001244:	200018b4 	.word	0x200018b4
 8001248:	200000ae 	.word	0x200000ae

0800124c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af04      	add	r7, sp, #16
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HMC5883L_getMagData+0x84>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b299      	uxth	r1, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <HMC5883L_getMagData+0x8c>)
 8001272:	f006 fb69 	bl	8007948 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HMC5883L_getMagData+0x90>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HMC5883L_getMagData+0x38>
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffc0 	bl	8001204 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HMC5883L_getMagData+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000a4 	.word	0x200000a4
 80012d4:	200000a8 	.word	0x200000a8
 80012d8:	200018b4 	.word	0x200018b4
 80012dc:	200000ae 	.word	0x200000ae

080012e0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <Ringbuf_init+0x38>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <Ringbuf_init+0x3c>)
 80012e8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Ringbuf_init+0x40>)
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Ringbuf_init+0x44>)
 80012ee:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <Ringbuf_init+0x48>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <Ringbuf_init+0x48>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <Ringbuf_init+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Ringbuf_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	60da      	str	r2, [r3, #12]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200018ac 	.word	0x200018ac
 800131c:	200000b0 	.word	0x200000b0
 8001320:	200018a8 	.word	0x200018a8
 8001324:	200004b8 	.word	0x200004b8
 8001328:	20001a80 	.word	0x20001a80

0800132c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d009      	beq.n	8001366 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	79f9      	ldrb	r1, [r7, #7]
 800135c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d013      	beq.n	80013ba <Uart_isr+0x4a>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00e      	beq.n	80013ba <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <Uart_isr+0xb4>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffba 	bl	800132c <store_char>
        return;
 80013b8:	e031      	b.n	800141e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d02c      	beq.n	800141e <Uart_isr+0xae>
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d027      	beq.n	800141e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <Uart_isr+0xb8>)
 80013d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <Uart_isr+0xb8>)
 80013d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013da:	429a      	cmp	r2, r3
 80013dc:	d108      	bne.n	80013f0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80013ee:	e015      	b.n	800141c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <Uart_isr+0xb8>)
 80013f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <Uart_isr+0xb8>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <Uart_isr+0xb8>)
 80013fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <Uart_isr+0xb8>)
 800140a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7bba      	ldrb	r2, [r7, #14]
 800141a:	605a      	str	r2, [r3, #4]
    	return;
 800141c:	bf00      	nop
    }
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200018ac 	.word	0x200018ac
 8001428:	200004b8 	.word	0x200004b8

0800142c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800143a:	2301      	movs	r3, #1
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	1dbb      	adds	r3, r7, #6
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	22d0      	movs	r2, #208	; 0xd0
 800144a:	21ef      	movs	r1, #239	; 0xef
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <read_chip_id+0x3c>)
 800144e:	f006 fa7b 	bl	8007948 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b55      	cmp	r3, #85	; 0x55
 8001456:	d001      	beq.n	800145c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001458:	2301      	movs	r3, #1
 800145a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200018b4 	.word	0x200018b4

0800146c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001478:	2300      	movs	r3, #0
 800147a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d81a      	bhi.n	80014b8 <set_oss+0x4c>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <set_oss+0x1c>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014b1 	.word	0x080014b1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	705a      	strb	r2, [r3, #1]
			break;
 800149e:	e00f      	b.n	80014c0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2208      	movs	r2, #8
 80014a4:	705a      	strb	r2, [r3, #1]
			break;
 80014a6:	e00b      	b.n	80014c0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	220e      	movs	r2, #14
 80014ac:	705a      	strb	r2, [r3, #1]
			break;
 80014ae:	e007      	b.n	80014c0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	221a      	movs	r2, #26
 80014b4:	705a      	strb	r2, [r3, #1]
			break;
 80014b6:	e003      	b.n	80014c0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2208      	movs	r2, #8
 80014bc:	705a      	strb	r2, [r3, #1]
			break;
 80014be:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80014d0:	2301      	movs	r3, #1
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2302      	movs	r3, #2
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	22f4      	movs	r2, #244	; 0xf4
 80014e2:	21ee      	movs	r1, #238	; 0xee
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <set_oss+0x88>)
 80014e6:	f006 f935 	bl	8007754 <HAL_I2C_Mem_Write>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200018b4 	.word	0x200018b4

080014f8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001526:	2301      	movs	r3, #1
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	2316      	movs	r3, #22
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	22aa      	movs	r2, #170	; 0xaa
 8001538:	21ef      	movs	r1, #239	; 0xef
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <read_calib_data+0xe4>)
 800153c:	f006 fa04 	bl	8007948 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001546:	e03e      	b.n	80015c6 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b219      	sxth	r1, r3
 800155c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001560:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001564:	4413      	add	r3, r2
 8001566:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4403      	add	r3, r0
 8001576:	430a      	orrs	r2, r1
 8001578:	b212      	sxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	440b      	add	r3, r1
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ca:	2b0b      	cmp	r3, #11
 80015cc:	d9bc      	bls.n	8001548 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80015ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200018b4 	.word	0x200018b4

080015e0 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00f f912 	bl	8010818 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80015f4:	687c      	ldr	r4, [r7, #4]
 80015f6:	f7ff ff19 	bl	800142c <read_chip_id>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	687c      	ldr	r4, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff77 	bl	80014f8 <read_calib_data>
 800160a:	4603      	mov	r3, r0
 800160c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3338      	adds	r3, #56	; 0x38
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff28 	bl	800146c <set_oss>
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800162a:	232e      	movs	r3, #46	; 0x2e
 800162c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	22f4      	movs	r2, #244	; 0xf4
 800163e:	21ee      	movs	r1, #238	; 0xee
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <write_ut+0x2c>)
 8001642:	f006 f887 	bl	8007754 <HAL_I2C_Mem_Write>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200018b4 	.word	0x200018b4

08001654 <read_ut>:

int32_t read_ut (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800165a:	2301      	movs	r3, #1
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2302      	movs	r3, #2
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	22f6      	movs	r2, #246	; 0xf6
 800166a:	21ef      	movs	r1, #239	; 0xef
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <read_ut+0x30>)
 800166e:	f006 f96b 	bl	8007948 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001672:	793b      	ldrb	r3, [r7, #4]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	797a      	ldrb	r2, [r7, #5]
 8001678:	4313      	orrs	r3, r2
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200018b4 	.word	0x200018b4

08001688 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd22 	bl	80010ec <__aeabi_f2iz>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	895b      	ldrh	r3, [r3, #10]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	8912      	ldrh	r2, [r2, #8]
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	13db      	asrs	r3, r3, #15
 80016ba:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016c2:	02da      	lsls	r2, r3, #11
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016ca:	4619      	mov	r1, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	440b      	add	r3, r1
 80016d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d4:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	441a      	add	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	3308      	adds	r3, #8
 80016e6:	111b      	asrs	r3, r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff facf 	bl	8000c8c <__aeabi_i2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <get_temp+0xa4>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb1e 	bl	8000d34 <__aeabi_fmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <get_temp+0xa8>)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fcc0 	bl	8001084 <__aeabi_fcmple>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <get_temp+0x90>
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <get_temp+0xac>)
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fcc3 	bl	8001098 <__aeabi_fcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	3dcccccd 	.word	0x3dcccccd
 8001730:	c2200000 	.word	0xc2200000
 8001734:	42aa0000 	.word	0x42aa0000

08001738 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <write_up+0x38>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	803b      	strh	r3, [r7, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 800174c:	2334      	movs	r3, #52	; 0x34
 800174e:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	463b      	mov	r3, r7
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f4      	movs	r2, #244	; 0xf4
 8001760:	21ee      	movs	r1, #238	; 0xee
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <write_up+0x3c>)
 8001764:	f005 fff6 	bl	8007754 <HAL_I2C_Mem_Write>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08011b78 	.word	0x08011b78
 8001774:	200018b4 	.word	0x200018b4

08001778 <read_up>:

int32_t read_up (oss_t oss)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <read_up+0x54>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	813b      	strh	r3, [r7, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800178e:	2301      	movs	r3, #1
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2303      	movs	r3, #3
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f6      	movs	r2, #246	; 0xf6
 80017a0:	21ef      	movs	r1, #239	; 0xef
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <read_up+0x58>)
 80017a4:	f006 f8d0 	bl	8007948 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	7a7b      	ldrb	r3, [r7, #9]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4413      	add	r3, r2
 80017b2:	7aba      	ldrb	r2, [r7, #10]
 80017b4:	441a      	add	r2, r3
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	f1c3 0308 	rsb	r3, r3, #8
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
	return up;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08011b78 	.word	0x08011b78
 80017d0:	200018b4 	.word	0x200018b4

080017d4 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017d4:	b084      	sub	sp, #16
 80017d6:	b480      	push	{r7}
 80017d8:	b089      	sub	sp, #36	; 0x24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80017ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ee:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80017f2:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80017f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80017f8:	461a      	mov	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fb03 f303 	mul.w	r3, r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	da01      	bge.n	8001808 <get_pressure+0x34>
 8001804:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001808:	131b      	asrs	r3, r3, #12
 800180a:	fb03 f302 	mul.w	r3, r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	da01      	bge.n	8001816 <get_pressure+0x42>
 8001812:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001816:	12db      	asrs	r3, r3, #11
 8001818:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800181a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800181e:	461a      	mov	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fb03 f302 	mul.w	r3, r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <get_pressure+0x5a>
 800182a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800182e:	12db      	asrs	r3, r3, #11
 8001830:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800183a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001848:	4093      	lsls	r3, r2
 800184a:	3302      	adds	r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	da00      	bge.n	8001852 <get_pressure+0x7e>
 8001850:	3303      	adds	r3, #3
 8001852:	109b      	asrs	r3, r3, #2
 8001854:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001856:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fb03 f302 	mul.w	r3, r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <get_pressure+0x98>
 8001866:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800186a:	331f      	adds	r3, #31
 800186c:	135b      	asrs	r3, r3, #13
 800186e:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001874:	461a      	mov	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fb03 f303 	mul.w	r3, r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da01      	bge.n	8001884 <get_pressure+0xb0>
 8001880:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001884:	131b      	asrs	r3, r3, #12
 8001886:	fb03 f302 	mul.w	r3, r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	da02      	bge.n	8001894 <get_pressure+0xc0>
 800188e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001892:	33ff      	adds	r3, #255	; 0xff
 8001894:	141b      	asrs	r3, r3, #16
 8001896:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da00      	bge.n	80018a6 <get_pressure+0xd2>
 80018a4:	3303      	adds	r3, #3
 80018a6:	109b      	asrs	r3, r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	0bdb      	lsrs	r3, r3, #15
 80018ba:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018c8:	4611      	mov	r1, r2
 80018ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018ce:	410a      	asrs	r2, r1
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db06      	blt.n	80018ea <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	005a      	lsls	r2, r3, #1
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e005      	b.n	80018f6 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <get_pressure+0x12a>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da00      	bge.n	800190a <get_pressure+0x136>
 8001908:	33ff      	adds	r3, #255	; 0xff
 800190a:	121b      	asrs	r3, r3, #8
 800190c:	fb03 f302 	mul.w	r3, r3, r2
 8001910:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f640 32de 	movw	r2, #3038	; 0xbde
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	da02      	bge.n	8001926 <get_pressure+0x152>
 8001920:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001924:	33ff      	adds	r3, #255	; 0xff
 8001926:	141b      	asrs	r3, r3, #16
 8001928:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <get_pressure+0x194>)
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	da02      	bge.n	800193c <get_pressure+0x168>
 8001936:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800193a:	33ff      	adds	r3, #255	; 0xff
 800193c:	141b      	asrs	r3, r3, #16
 800193e:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <get_pressure+0x17c>
 800194e:	330f      	adds	r3, #15
 8001950:	111b      	asrs	r3, r3, #4
 8001952:	461a      	mov	r2, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]

	return p;
 800195a:	69fb      	ldr	r3, [r7, #28]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3724      	adds	r7, #36	; 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	b004      	add	sp, #16
 8001966:	4770      	bx	lr
 8001968:	ffffe343 	.word	0xffffe343
 800196c:	00000000 	.word	0x00000000

08001970 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f982 	bl	8000c8c <__aeabi_i2f>
 8001988:	4603      	mov	r3, r0
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <get_altitude+0xa8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa85 	bl	8000e9c <__aeabi_fdiv>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd3f 	bl	8000418 <__aeabi_f2d>
 800199a:	a31b      	add	r3, pc, #108	; (adr r3, 8001a08 <get_altitude+0x98>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f00c ff44 	bl	800e82c <pow>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	491b      	ldr	r1, [pc, #108]	; (8001a1c <get_altitude+0xac>)
 80019ae:	f7fe fbd3 	bl	8000158 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	a315      	add	r3, pc, #84	; (adr r3, 8001a10 <get_altitude+0xa0>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fd82 	bl	80004c8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f854 	bl	8000a78 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <get_altitude+0xb0>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fb54 	bl	8001084 <__aeabi_fcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <get_altitude+0x80>
 80019e2:	4910      	ldr	r1, [pc, #64]	; (8001a24 <get_altitude+0xb4>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fb57 	bl	8001098 <__aeabi_fcmpge>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	ccd9456c 	.word	0xccd9456c
 8001a0c:	3fc85b95 	.word	0x3fc85b95
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40e5a540 	.word	0x40e5a540
 8001a18:	47c5e680 	.word	0x47c5e680
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	c3fa0000 	.word	0xc3fa0000
 8001a24:	460ca000 	.word	0x460ca000

08001a28 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return b_counter;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <get_b_counter+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200008c0 	.word	0x200008c0

08001a3c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

	b_counter++;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <set_b_counter+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <set_b_counter+0x30>)
 8001a4c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <set_b_counter+0x30>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d202      	bcs.n	8001a60 <set_b_counter+0x24>
		b_counter = 0;
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <set_b_counter+0x30>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	}
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200008c0 	.word	0x200008c0

08001a70 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	2007      	movs	r0, #7
 8001a80:	f000 fba4 	bl	80021cc <bno055_writeData>
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	203d      	movs	r0, #61	; 0x3d
 8001a9c:	f000 fb96 	bl	80021cc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001aa6:	2013      	movs	r0, #19
 8001aa8:	f000 fb84 	bl	80021b4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001aac:	e002      	b.n	8001ab4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001aae:	2007      	movs	r0, #7
 8001ab0:	f000 fb80 	bl	80021b4 <bno055_delay>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ffe3 	bl	8001a8c <bno055_setOperationMode>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001ace:	200c      	movs	r0, #12
 8001ad0:	f7ff ffdc 	bl	8001a8c <bno055_setOperationMode>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001adc:	2120      	movs	r1, #32
 8001ade:	203f      	movs	r0, #63	; 0x3f
 8001ae0:	f000 fb74 	bl	80021cc <bno055_writeData>
  bno055_delay(700);
 8001ae4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001ae8:	f000 fb64 	bl	80021b4 <bno055_delay>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  bno055_reset();
 8001af6:	f7ff ffef 	bl	8001ad8 <bno055_reset>

  uint8_t id = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fc4d 	bl	80023a4 <bno055_readData>
  if (id != BNO055_ID) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b0e:	d004      	beq.n	8001b1a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <bno055_setup+0x4c>)
 8001b16:	f00e ff2d 	bl	8010974 <iprintf>
  }
  bno055_setPage(0);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffa8 	bl	8001a70 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	203f      	movs	r0, #63	; 0x3f
 8001b24:	f000 fb52 	bl	80021cc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001b28:	f7ff ffc8 	bl	8001abc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 fb41 	bl	80021b4 <bno055_delay>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08011b7c 	.word	0x08011b7c

08001b40 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ff8f 	bl	8001a70 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d107      	bne.n	8001b68 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8001b58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	2208      	movs	r2, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fc1f 	bl	80023a4 <bno055_readData>
 8001b66:	e006      	b.n	8001b76 <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8001b68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2206      	movs	r2, #6
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fc17 	bl	80023a4 <bno055_readData>

  double scale = 1;
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <bno055_getVector+0x218>)
 8001b7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	2b0e      	cmp	r3, #14
 8001b84:	d109      	bne.n	8001b9a <bno055_getVector+0x5a>
    scale = magScale;
 8001b86:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <bno055_getVector+0x21c>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc22 	bl	80003d4 <__aeabi_ui2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001b98:	e038      	b.n	8001c0c <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d005      	beq.n	8001bac <bno055_getVector+0x6c>
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	2b28      	cmp	r3, #40	; 0x28
 8001ba4:	d002      	beq.n	8001bac <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8001baa:	d109      	bne.n	8001bc0 <bno055_getVector+0x80>
    scale = accelScale;
 8001bac:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <bno055_getVector+0x220>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc0f 	bl	80003d4 <__aeabi_ui2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001bbe:	e025      	b.n	8001c0c <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b14      	cmp	r3, #20
 8001bc4:	d109      	bne.n	8001bda <bno055_getVector+0x9a>
    scale = angularRateScale;
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <bno055_getVector+0x224>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc02 	bl	80003d4 <__aeabi_ui2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001bd8:	e018      	b.n	8001c0c <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	2b1a      	cmp	r3, #26
 8001bde:	d109      	bne.n	8001bf4 <bno055_getVector+0xb4>
    scale = eulerScale;
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <bno055_getVector+0x228>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fbf5 	bl	80003d4 <__aeabi_ui2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001bf2:	e00b      	b.n	8001c0c <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d108      	bne.n	8001c0c <bno055_getVector+0xcc>
    scale = quaScale;
 8001bfa:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <bno055_getVector+0x22c>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fbe8 	bl	80003d4 <__aeabi_ui2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2220      	movs	r2, #32
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00e fdff 	bl	8010818 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d150      	bne.n	8001cc2 <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001c20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fbde 	bl	80003f4 <__aeabi_i2d>
 8001c38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c3c:	f7fe fd6e 	bl	800071c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001c48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fbca 	bl	80003f4 <__aeabi_i2d>
 8001c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c64:	f7fe fd5a 	bl	800071c <__aeabi_ddiv>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001c70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fbb6 	bl	80003f4 <__aeabi_i2d>
 8001c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c8c:	f7fe fd46 	bl	800071c <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fba2 	bl	80003f4 <__aeabi_i2d>
 8001cb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cb4:	f7fe fd32 	bl	800071c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001cc0:	e03b      	b.n	8001d3a <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001cc2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fb8d 	bl	80003f4 <__aeabi_i2d>
 8001cda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cde:	f7fe fd1d 	bl	800071c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fb79 	bl	80003f4 <__aeabi_i2d>
 8001d02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d06:	f7fe fd09 	bl	800071c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001d12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fb65 	bl	80003f4 <__aeabi_i2d>
 8001d2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d2e:	f7fe fcf5 	bl	800071c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	f107 0408 	add.w	r4, r7, #8
 8001d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	3738      	adds	r7, #56	; 0x38
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	3ff00000 	.word	0x3ff00000
 8001d5c:	20000006 	.word	0x20000006
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000002 	.word	0x20000002
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000008 	.word	0x20000008

08001d70 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2114      	movs	r1, #20
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fedf 	bl	8001b40 <bno055_getVector>
}
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	211a      	movs	r1, #26
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fed2 	bl	8001b40 <bno055_getVector>
}
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <bno055_setAxisMap>:
}
bno055_vector_t bno055_getVectorQuaternion() {
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
}

void bno055_setAxisMap(bno055_axis_map_t axis) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	463b      	mov	r3, r7
 8001dac:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t axisRemap = (axis.z << 4) | (axis.y << 2) | (axis.x);
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	78bb      	ldrb	r3, [r7, #2]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	783b      	ldrb	r3, [r7, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
 8001dca:	787b      	ldrb	r3, [r7, #1]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	73bb      	strb	r3, [r7, #14]
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	4619      	mov	r1, r3
 8001de8:	2041      	movs	r0, #65	; 0x41
 8001dea:	f000 f9ef 	bl	80021cc <bno055_writeData>
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	4619      	mov	r1, r3
 8001df2:	2042      	movs	r0, #66	; 0x42
 8001df4:	f000 f9ea 	bl	80021cc <bno055_writeData>
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f00c fca1 	bl	800e750 <cosf>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f00c fccd 	bl	800e7c0 <sinf>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_DMA_Init+0x48>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <MX_DMA_Init+0x48>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6153      	str	r3, [r2, #20]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <MX_DMA_Init+0x48>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	200f      	movs	r0, #15
 8001e54:	f004 fb8b 	bl	800656e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f004 fba4 	bl	80065a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2011      	movs	r0, #17
 8001e64:	f004 fb83 	bl	800656e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001e68:	2011      	movs	r0, #17
 8001e6a:	f004 fb9c 	bl	80065a6 <HAL_NVIC_EnableIRQ>

}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <MX_GPIO_Init+0xfc>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef6:	4821      	ldr	r0, [pc, #132]	; (8001f7c <MX_GPIO_Init+0x100>)
 8001ef8:	f004 ff58 	bl	8006dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	f243 0102 	movw	r1, #12290	; 0x3002
 8001f02:	481f      	ldr	r0, [pc, #124]	; (8001f80 <MX_GPIO_Init+0x104>)
 8001f04:	f004 ff52 	bl	8006dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <MX_GPIO_Init+0x108>)
 8001f10:	f004 ff4c 	bl	8006dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_GPIO_Init+0x100>)
 8001f2e:	f004 fdb9 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8001f32:	f243 0302 	movw	r3, #12290	; 0x3002
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_GPIO_Init+0x104>)
 8001f4c:	f004 fdaa 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_GPIO_Init+0x108>)
 8001f6a:	f004 fd9b 	bl	8006aa4 <HAL_GPIO_Init>

}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40010800 	.word	0x40010800

08001f88 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001f8e:	2351      	movs	r3, #81	; 0x51
 8001f90:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8001f92:	1dba      	adds	r2, r7, #6
 8001f94:	2364      	movs	r3, #100	; 0x64
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	21e0      	movs	r1, #224	; 0xe0
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <request_range+0x2c>)
 8001f9e:	f005 f87b 	bl	8007098 <HAL_I2C_Master_Transmit>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <request_range+0x30>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200018b4 	.word	0x200018b4
 8001fb8:	2000000a 	.word	0x2000000a

08001fbc <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <getRange+0x34>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <getRange+0x38>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001fce:	1d3a      	adds	r2, r7, #4
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	21e1      	movs	r1, #225	; 0xe1
 8001fd8:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <getRange+0x3c>)
 8001fda:	f005 f95b 	bl	8007294 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	797a      	ldrb	r2, [r7, #5]
 8001fe4:	4313      	orrs	r3, r2



	//return -1;

}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200018b2 	.word	0x200018b2
 8001ff4:	2000000a 	.word	0x2000000a
 8001ff8:	200018b4 	.word	0x200018b4

08001ffc <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

	u_counter++;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <set_ucounter+0x30>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <set_ucounter+0x30>)
 800200c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <set_ucounter+0x30>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4293      	cmp	r3, r2
 8002018:	d202      	bcs.n	8002020 <set_ucounter+0x24>
		u_counter = 0;
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <set_ucounter+0x30>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
	}
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200008c4 	.word	0x200008c4

08002030 <get_ucounter>:

int get_ucounter(void) {
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	return u_counter;
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <get_ucounter+0x10>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	200008c4 	.word	0x200008c4

08002044 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <MX_I2C1_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_I2C1_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_I2C1_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_I2C1_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_I2C1_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_I2C1_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_I2C1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_I2C1_Init+0x50>)
 8002082:	f004 fec5 	bl	8006e10 <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800208c:	f002 fb14 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200018b4 	.word	0x200018b4
 8002098:	40005400 	.word	0x40005400
 800209c:	00061a80 	.word	0x00061a80

080020a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <HAL_I2C_MspInit+0x70>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d123      	bne.n	8002108 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020dc:	2312      	movs	r3, #18
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_I2C_MspInit+0x78>)
 80020ec:	f004 fcda 	bl	8006aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fa:	61d3      	str	r3, [r2, #28]
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_I2C_MspInit+0x74>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005400 	.word	0x40005400
 8002114:	40021000 	.word	0x40021000
 8002118:	40010c00 	.word	0x40010c00

0800211c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f00c fc4d 	bl	800e9dc <asinf>
 8002142:	4603      	mov	r3, r0
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f00c f9ef 	bl	800e538 <atanf>
 800215a:	4603      	mov	r3, r0
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f00c fc59 	bl	800ea28 <atan2f>
 8002176:	4603      	mov	r3, r0
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f00c fc4f 	bl	800ea2c <sqrtf>
 800218e:	4603      	mov	r3, r0
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <bno055_assignI2C+0x18>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	200008c8 	.word	0x200008c8

080021b4 <bno055_delay>:

void bno055_delay(int time) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f8da 	bl	8006378 <HAL_Delay>
#endif
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	733b      	strb	r3, [r7, #12]
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <bno055_writeData+0x184>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	230a      	movs	r3, #10
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2302      	movs	r3, #2
 80021f2:	2150      	movs	r1, #80	; 0x50
 80021f4:	f004 ff50 	bl	8007098 <HAL_I2C_Master_Transmit>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80a0 	beq.w	8002344 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d103      	bne.n	8002212 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800220a:	4852      	ldr	r0, [pc, #328]	; (8002354 <bno055_writeData+0x188>)
 800220c:	f00e fc38 	bl	8010a80 <puts>
 8002210:	e012      	b.n	8002238 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d103      	bne.n	8002220 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002218:	484f      	ldr	r0, [pc, #316]	; (8002358 <bno055_writeData+0x18c>)
 800221a:	f00e fc31 	bl	8010a80 <puts>
 800221e:	e00b      	b.n	8002238 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d103      	bne.n	800222e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002226:	484d      	ldr	r0, [pc, #308]	; (800235c <bno055_writeData+0x190>)
 8002228:	f00e fc2a 	bl	8010a80 <puts>
 800222c:	e004      	b.n	8002238 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	4619      	mov	r1, r3
 8002232:	484b      	ldr	r0, [pc, #300]	; (8002360 <bno055_writeData+0x194>)
 8002234:	f00e fb9e 	bl	8010974 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002238:	4b45      	ldr	r3, [pc, #276]	; (8002350 <bno055_writeData+0x184>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f005 fdf8 	bl	8007e32 <HAL_I2C_GetError>
 8002242:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07e      	beq.n	8002348 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d103      	bne.n	8002258 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002250:	4844      	ldr	r0, [pc, #272]	; (8002364 <bno055_writeData+0x198>)
 8002252:	f00e fc15 	bl	8010a80 <puts>
 8002256:	e021      	b.n	800229c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d103      	bne.n	8002266 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800225e:	4842      	ldr	r0, [pc, #264]	; (8002368 <bno055_writeData+0x19c>)
 8002260:	f00e fc0e 	bl	8010a80 <puts>
 8002264:	e01a      	b.n	800229c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d103      	bne.n	8002274 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800226c:	483f      	ldr	r0, [pc, #252]	; (800236c <bno055_writeData+0x1a0>)
 800226e:	f00e fc07 	bl	8010a80 <puts>
 8002272:	e013      	b.n	800229c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b08      	cmp	r3, #8
 8002278:	d103      	bne.n	8002282 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800227a:	483d      	ldr	r0, [pc, #244]	; (8002370 <bno055_writeData+0x1a4>)
 800227c:	f00e fc00 	bl	8010a80 <puts>
 8002280:	e00c      	b.n	800229c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b10      	cmp	r3, #16
 8002286:	d103      	bne.n	8002290 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002288:	483a      	ldr	r0, [pc, #232]	; (8002374 <bno055_writeData+0x1a8>)
 800228a:	f00e fbf9 	bl	8010a80 <puts>
 800228e:	e005      	b.n	800229c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b20      	cmp	r3, #32
 8002294:	d102      	bne.n	800229c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002296:	4838      	ldr	r0, [pc, #224]	; (8002378 <bno055_writeData+0x1ac>)
 8002298:	f00e fbf2 	bl	8010a80 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <bno055_writeData+0x184>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 fdb9 	bl	8007e18 <HAL_I2C_GetState>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80022b0:	4832      	ldr	r0, [pc, #200]	; (800237c <bno055_writeData+0x1b0>)
 80022b2:	f00e fbe5 	bl	8010a80 <puts>
 80022b6:	e048      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d103      	bne.n	80022c6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80022be:	482f      	ldr	r0, [pc, #188]	; (800237c <bno055_writeData+0x1b0>)
 80022c0:	f00e fbde 	bl	8010a80 <puts>
 80022c4:	e041      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b24      	cmp	r3, #36	; 0x24
 80022ca:	d103      	bne.n	80022d4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80022cc:	482c      	ldr	r0, [pc, #176]	; (8002380 <bno055_writeData+0x1b4>)
 80022ce:	f00e fbd7 	bl	8010a80 <puts>
 80022d2:	e03a      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b21      	cmp	r3, #33	; 0x21
 80022d8:	d103      	bne.n	80022e2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80022da:	482a      	ldr	r0, [pc, #168]	; (8002384 <bno055_writeData+0x1b8>)
 80022dc:	f00e fbd0 	bl	8010a80 <puts>
 80022e0:	e033      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b22      	cmp	r3, #34	; 0x22
 80022e6:	d103      	bne.n	80022f0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <bno055_writeData+0x1bc>)
 80022ea:	f00e fbc9 	bl	8010a80 <puts>
 80022ee:	e02c      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b28      	cmp	r3, #40	; 0x28
 80022f4:	d103      	bne.n	80022fe <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80022f6:	4825      	ldr	r0, [pc, #148]	; (800238c <bno055_writeData+0x1c0>)
 80022f8:	f00e fbc2 	bl	8010a80 <puts>
 80022fc:	e025      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b29      	cmp	r3, #41	; 0x29
 8002302:	d103      	bne.n	800230c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002304:	4822      	ldr	r0, [pc, #136]	; (8002390 <bno055_writeData+0x1c4>)
 8002306:	f00e fbbb 	bl	8010a80 <puts>
 800230a:	e01e      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b2a      	cmp	r3, #42	; 0x2a
 8002310:	d103      	bne.n	800231a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002312:	4820      	ldr	r0, [pc, #128]	; (8002394 <bno055_writeData+0x1c8>)
 8002314:	f00e fbb4 	bl	8010a80 <puts>
 8002318:	e017      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b60      	cmp	r3, #96	; 0x60
 800231e:	d103      	bne.n	8002328 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002320:	481d      	ldr	r0, [pc, #116]	; (8002398 <bno055_writeData+0x1cc>)
 8002322:	f00e fbad 	bl	8010a80 <puts>
 8002326:	e010      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2ba0      	cmp	r3, #160	; 0xa0
 800232c:	d103      	bne.n	8002336 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800232e:	481b      	ldr	r0, [pc, #108]	; (800239c <bno055_writeData+0x1d0>)
 8002330:	f00e fba6 	bl	8010a80 <puts>
 8002334:	e009      	b.n	800234a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2be0      	cmp	r3, #224	; 0xe0
 800233a:	d106      	bne.n	800234a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <bno055_writeData+0x1d4>)
 800233e:	f00e fb9f 	bl	8010a80 <puts>
 8002342:	e002      	b.n	800234a <bno055_writeData+0x17e>
    return;
 8002344:	bf00      	nop
 8002346:	e000      	b.n	800234a <bno055_writeData+0x17e>
    return;
 8002348:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200008c8 	.word	0x200008c8
 8002354:	08011bb8 	.word	0x08011bb8
 8002358:	08011bdc 	.word	0x08011bdc
 800235c:	08011c04 	.word	0x08011c04
 8002360:	08011c28 	.word	0x08011c28
 8002364:	08011c40 	.word	0x08011c40
 8002368:	08011c54 	.word	0x08011c54
 800236c:	08011c68 	.word	0x08011c68
 8002370:	08011c7c 	.word	0x08011c7c
 8002374:	08011c90 	.word	0x08011c90
 8002378:	08011ca4 	.word	0x08011ca4
 800237c:	08011cbc 	.word	0x08011cbc
 8002380:	08011cd4 	.word	0x08011cd4
 8002384:	08011ce8 	.word	0x08011ce8
 8002388:	08011d00 	.word	0x08011d00
 800238c:	08011d18 	.word	0x08011d18
 8002390:	08011d30 	.word	0x08011d30
 8002394:	08011d50 	.word	0x08011d50
 8002398:	08011d70 	.word	0x08011d70
 800239c:	08011d88 	.word	0x08011d88
 80023a0:	08011da0 	.word	0x08011da0

080023a4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <bno055_readData+0x40>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	1dfa      	adds	r2, r7, #7
 80023ba:	2364      	movs	r3, #100	; 0x64
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2301      	movs	r3, #1
 80023c0:	2150      	movs	r1, #80	; 0x50
 80023c2:	f004 fe69 	bl	8007098 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <bno055_readData+0x40>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2264      	movs	r2, #100	; 0x64
 80023d0:	9200      	str	r2, [sp, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	2150      	movs	r1, #80	; 0x50
 80023d6:	f004 ff5d 	bl	8007294 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200008c8 	.word	0x200008c8

080023e8 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_UART_TxCpltCallback+0xa0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d140      	bne.n	800247e <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_UART_TxCpltCallback+0xa4>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d013      	beq.n	800242c <HAL_UART_TxCpltCallback+0x44>
 8002404:	2b02      	cmp	r3, #2
 8002406:	dc3a      	bgt.n	800247e <HAL_UART_TxCpltCallback+0x96>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_UART_TxCpltCallback+0x2a>
 800240c:	2b01      	cmp	r3, #1
 800240e:	d017      	beq.n	8002440 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 8002410:	e035      	b.n	800247e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 8002412:	2301      	movs	r3, #1
 8002414:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002416:	f107 030b 	add.w	r3, r7, #11
 800241a:	2201      	movs	r2, #1
 800241c:	4619      	mov	r1, r3
 800241e:	481a      	ldr	r0, [pc, #104]	; (8002488 <HAL_UART_TxCpltCallback+0xa0>)
 8002420:	f009 f810 	bl	800b444 <HAL_UART_Transmit_DMA>
			tx_type = package;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_UART_TxCpltCallback+0xa4>)
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
			break;
 800242a:	e028      	b.n	800247e <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 800242c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8002430:	4917      	ldr	r1, [pc, #92]	; (8002490 <HAL_UART_TxCpltCallback+0xa8>)
 8002432:	4815      	ldr	r0, [pc, #84]	; (8002488 <HAL_UART_TxCpltCallback+0xa0>)
 8002434:	f009 f806 	bl	800b444 <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_TxCpltCallback+0xa4>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
			break;
 800243e:	e01e      	b.n	800247e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 8002440:	2304      	movs	r3, #4
 8002442:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002444:	f107 030b 	add.w	r3, r7, #11
 8002448:	2201      	movs	r2, #1
 800244a:	4619      	mov	r1, r3
 800244c:	480e      	ldr	r0, [pc, #56]	; (8002488 <HAL_UART_TxCpltCallback+0xa0>)
 800244e:	f008 fff9 	bl	800b444 <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_UART_TxCpltCallback+0xa4>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_UART_TxCpltCallback+0xac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 800245e:	f003 ff81 	bl	8006364 <HAL_GetTick>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_UART_TxCpltCallback+0xac>)
 8002468:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_UART_TxCpltCallback+0xac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_UART_TxCpltCallback+0xb0>)
 800247a:	701a      	strb	r2, [r3, #0]
		    break;
 800247c:	bf00      	nop
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20001b88 	.word	0x20001b88
 800248c:	200017e8 	.word	0x200017e8
 8002490:	20000b00 	.word	0x20000b00
 8002494:	200016d4 	.word	0x200016d4
 8002498:	20001784 	.word	0x20001784
 800249c:	00000000 	.word	0x00000000

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b09d      	sub	sp, #116	; 0x74
 80024a4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a6:	f003 ff05 	bl	80062b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80024aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024ae:	f003 ff63 	bl	8006378 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b2:	f000 f94d 	bl	8002750 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b6:	f7ff fce1 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80024ba:	f7ff fcb9 	bl	8001e30 <MX_DMA_Init>
  MX_I2C1_Init();
 80024be:	f7ff fdc1 	bl	8002044 <MX_I2C1_Init>
  MX_TIM2_Init();
 80024c2:	f003 fb43 	bl	8005b4c <MX_TIM2_Init>
  MX_TIM1_Init();
 80024c6:	f003 fa99 	bl	80059fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80024ca:	f003 fd53 	bl	8005f74 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80024ce:	f003 fb89 	bl	8005be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024d2:	f003 fbf7 	bl	8005cc4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80024d6:	f003 fd23 	bl	8005f20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80024da:	f003 fd75 	bl	8005fc8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80024de:	f003 f8a9 	bl	8005634 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 80024e2:	2209      	movs	r2, #9
 80024e4:	4982      	ldr	r1, [pc, #520]	; (80026f0 <main+0x250>)
 80024e6:	4883      	ldr	r0, [pc, #524]	; (80026f4 <main+0x254>)
 80024e8:	f009 f818 	bl	800b51c <HAL_UART_Receive_DMA>

  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
#ifdef BMO_DEBUG
  bno055_assignI2C(&hi2c1);
 80024ec:	4882      	ldr	r0, [pc, #520]	; (80026f8 <main+0x258>)
 80024ee:	f7ff fe53 	bl	8002198 <bno055_assignI2C>
  bno055_setup();
 80024f2:	f7ff fafd 	bl	8001af0 <bno055_setup>
  bno055_setOperationModeNDOF();
 80024f6:	f7ff fae8 	bl	8001aca <bno055_setOperationModeNDOF>
  //bno055_setAxisDefualt();
  bno055_axis_map_t axis = {
 80024fa:	4a80      	ldr	r2, [pc, #512]	; (80026fc <main+0x25c>)
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002504:	6018      	str	r0, [r3, #0]
 8002506:	3304      	adds	r3, #4
 8002508:	8019      	strh	r1, [r3, #0]
    .y = BNO055_AXIS_X,
    .y_sign = BNO055_AXIS_SIGN_POSITIVE,
    .z = BNO055_AXIS_Y,
    .z_sign = BNO055_AXIS_SIGN_POSITIVE
  };
  bno055_setAxisMap(axis);
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002512:	f7ff fc47 	bl	8001da4 <bno055_setAxisMap>
#endif

#ifdef UAV1
  MPU6050_Baslat();
 8002516:	f000 f96b 	bl	80027f0 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 800251a:	4879      	ldr	r0, [pc, #484]	; (8002700 <main+0x260>)
 800251c:	f7ff f860 	bl	80015e0 <bmp_init>
  HMC5883L_initialize();
 8002520:	f7fe fe2a 	bl	8001178 <HMC5883L_initialize>
#endif
  MotorBaslat();
 8002524:	f001 f9cc 	bl	80038c0 <_Z11MotorBaslatv>
  //GPSInit();
  HAL_Delay(1000);
 8002528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800252c:	f003 ff24 	bl	8006378 <HAL_Delay>

  Ringbuf_init();
 8002530:	f7fe fed6 	bl	80012e0 <Ringbuf_init>

	/***********NRF Ayarlari****************/

#ifdef UAV1

	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8002534:	4c73      	ldr	r4, [pc, #460]	; (8002704 <main+0x264>)
 8002536:	4668      	mov	r0, sp
 8002538:	1d23      	adds	r3, r4, #4
 800253a:	2254      	movs	r2, #84	; 0x54
 800253c:	4619      	mov	r1, r3
 800253e:	f00e f95d 	bl	80107fc <memcpy>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800254c:	486e      	ldr	r0, [pc, #440]	; (8002708 <main+0x268>)
 800254e:	f002 fa2d 	bl	80049ac <NRF24_begin>
	NRF24_stopListening();
 8002552:	f002 fb0b 	bl	8004b6c <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <main+0x26c>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f002 fb64 	bl	8004c2c <NRF24_openWritingPipe>
	nrf24_DebugUART_Init(huart3);
 8002564:	4e6a      	ldr	r6, [pc, #424]	; (8002710 <main+0x270>)
 8002566:	466d      	mov	r5, sp
 8002568:	f106 0410 	add.w	r4, r6, #16
 800256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002574:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002578:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800257c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002580:	f003 f83c 	bl	80055fc <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8002584:	2000      	movs	r0, #0
 8002586:	f002 fbdb 	bl	8004d40 <NRF24_setAutoAck>
	NRF24_setChannel(34);
 800258a:	2022      	movs	r0, #34	; 0x22
 800258c:	f002 fb8d 	bl	8004caa <NRF24_setChannel>
	NRF24_setPayloadSize(sizeof(struct pwm));
 8002590:	2008      	movs	r0, #8
 8002592:	f002 fb9f 	bl	8004cd4 <NRF24_setPayloadSize>
	char test_data[] = "Testing...";
 8002596:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <main+0x274>)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	ca07      	ldmia	r2, {r0, r1, r2}
 800259c:	c303      	stmia	r3!, {r0, r1}
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	3302      	adds	r3, #2
 80025a2:	0c12      	lsrs	r2, r2, #16
 80025a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
 80025a6:	1d39      	adds	r1, r7, #4
 80025a8:	2305      	movs	r3, #5
 80025aa:	220b      	movs	r2, #11
 80025ac:	4858      	ldr	r0, [pc, #352]	; (8002710 <main+0x270>)
 80025ae:	f008 feb7 	bl	800b320 <HAL_UART_Transmit>
	printRadioSettings();
 80025b2:	f002 fd45 	bl	8005040 <printRadioSettings>
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
	printRadioSettings();
#endif

  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(5000);
 80025b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80025ba:	f003 fedd 	bl	8006378 <HAL_Delay>

#ifdef UAV1

  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 80025be:	201d      	movs	r0, #29
 80025c0:	f001 f922 	bl	8003808 <_Z7GyroErrh>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a54      	ldr	r2, [pc, #336]	; (8002718 <main+0x278>)
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	201f      	movs	r0, #31
 80025cc:	f001 f91c 	bl	8003808 <_Z7GyroErrh>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a52      	ldr	r2, [pc, #328]	; (800271c <main+0x27c>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	2021      	movs	r0, #33	; 0x21
 80025d8:	f001 f916 	bl	8003808 <_Z7GyroErrh>
 80025dc:	4603      	mov	r3, r0
 80025de:	4a50      	ldr	r2, [pc, #320]	; (8002720 <main+0x280>)
 80025e0:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 80025e2:	2032      	movs	r0, #50	; 0x32
 80025e4:	f001 f93e 	bl	8003864 <_Z6AccErrh>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff14 	bl	8000418 <__aeabi_f2d>
 80025f0:	a33d      	add	r3, pc, #244	; (adr r3, 80026e8 <main+0x248>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd ff67 	bl	80004c8 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fa39 	bl	8000a78 <__aeabi_d2f>
 8002606:	4603      	mov	r3, r0
 8002608:	4a46      	ldr	r2, [pc, #280]	; (8002724 <main+0x284>)
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	2034      	movs	r0, #52	; 0x34
 800260e:	f001 f929 	bl	8003864 <_Z6AccErrh>
 8002612:	4603      	mov	r3, r0
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd feff 	bl	8000418 <__aeabi_f2d>
 800261a:	a333      	add	r3, pc, #204	; (adr r3, 80026e8 <main+0x248>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f7fd ff52 	bl	80004c8 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fa24 	bl	8000a78 <__aeabi_d2f>
 8002630:	4603      	mov	r3, r0
 8002632:	4a3d      	ldr	r2, [pc, #244]	; (8002728 <main+0x288>)
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	2036      	movs	r0, #54	; 0x36
 8002638:	f001 f914 	bl	8003864 <_Z6AccErrh>
 800263c:	4603      	mov	r3, r0
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd feea 	bl	8000418 <__aeabi_f2d>
 8002644:	a328      	add	r3, pc, #160	; (adr r3, 80026e8 <main+0x248>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd ff3d 	bl	80004c8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fa0f 	bl	8000a78 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4a33      	ldr	r2, [pc, #204]	; (800272c <main+0x28c>)
 800265e:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002660:	2032      	movs	r0, #50	; 0x32
 8002662:	f000 fe2b 	bl	80032bc <_Z6AccOkuh>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fb0f 	bl	8000c8c <__aeabi_i2f>
 800266e:	4603      	mov	r3, r0
 8002670:	4a2f      	ldr	r2, [pc, #188]	; (8002730 <main+0x290>)
 8002672:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002674:	2034      	movs	r0, #52	; 0x34
 8002676:	f000 fe21 	bl	80032bc <_Z6AccOkuh>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fb05 	bl	8000c8c <__aeabi_i2f>
 8002682:	4603      	mov	r3, r0
 8002684:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <main+0x294>)
 8002686:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8002688:	2036      	movs	r0, #54	; 0x36
 800268a:	f000 fe17 	bl	80032bc <_Z6AccOkuh>
 800268e:	4603      	mov	r3, r0
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fafb 	bl	8000c8c <__aeabi_i2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <main+0x298>)
 800269a:	6013      	str	r3, [r2, #0]
#endif
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800269c:	4827      	ldr	r0, [pc, #156]	; (800273c <main+0x29c>)
 800269e:	f007 fa9d 	bl	8009bdc <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 80026a2:	4827      	ldr	r0, [pc, #156]	; (8002740 <main+0x2a0>)
 80026a4:	f007 fa50 	bl	8009b48 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026a8:	2100      	movs	r1, #0
 80026aa:	4826      	ldr	r0, [pc, #152]	; (8002744 <main+0x2a4>)
 80026ac:	f007 fb38 	bl	8009d20 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80026b0:	2104      	movs	r1, #4
 80026b2:	4824      	ldr	r0, [pc, #144]	; (8002744 <main+0x2a4>)
 80026b4:	f008 fc64 	bl	800af80 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80026b8:	2108      	movs	r1, #8
 80026ba:	4822      	ldr	r0, [pc, #136]	; (8002744 <main+0x2a4>)
 80026bc:	f008 fc60 	bl	800af80 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80026c0:	210c      	movs	r1, #12
 80026c2:	4820      	ldr	r0, [pc, #128]	; (8002744 <main+0x2a4>)
 80026c4:	f007 fb2c 	bl	8009d20 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80026c8:	2108      	movs	r1, #8
 80026ca:	481d      	ldr	r0, [pc, #116]	; (8002740 <main+0x2a0>)
 80026cc:	f007 fc22 	bl	8009f14 <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 80026d0:	2301      	movs	r3, #1
 80026d2:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 80026d4:	1cfb      	adds	r3, r7, #3
 80026d6:	2201      	movs	r2, #1
 80026d8:	4619      	mov	r1, r3
 80026da:	481b      	ldr	r0, [pc, #108]	; (8002748 <main+0x2a8>)
 80026dc:	f008 feb2 	bl	800b444 <HAL_UART_Transmit_DMA>
  tx_type = package;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <main+0x2ac>)
 80026e2:	2202      	movs	r2, #2
 80026e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80026e6:	e7fe      	b.n	80026e6 <main+0x246>
 80026e8:	8e8a71de 	.word	0x8e8a71de
 80026ec:	3f7ff2e4 	.word	0x3f7ff2e4
 80026f0:	2000174c 	.word	0x2000174c
 80026f4:	20001b48 	.word	0x20001b48
 80026f8:	200018b4 	.word	0x200018b4
 80026fc:	08011dc8 	.word	0x08011dc8
 8002700:	200016fc 	.word	0x200016fc
 8002704:	20001908 	.word	0x20001908
 8002708:	40010c00 	.word	0x40010c00
 800270c:	20000010 	.word	0x20000010
 8002710:	20001a80 	.word	0x20001a80
 8002714:	08011dd0 	.word	0x08011dd0
 8002718:	200008fc 	.word	0x200008fc
 800271c:	20000900 	.word	0x20000900
 8002720:	20000904 	.word	0x20000904
 8002724:	20000908 	.word	0x20000908
 8002728:	2000090c 	.word	0x2000090c
 800272c:	20000910 	.word	0x20000910
 8002730:	200008d8 	.word	0x200008d8
 8002734:	200008dc 	.word	0x200008dc
 8002738:	200008e0 	.word	0x200008e0
 800273c:	20001a38 	.word	0x20001a38
 8002740:	200019a8 	.word	0x200019a8
 8002744:	200019f0 	.word	0x200019f0
 8002748:	20001b88 	.word	0x20001b88
 800274c:	200017e8 	.word	0x200017e8

08002750 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b090      	sub	sp, #64	; 0x40
 8002754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002756:	f107 0318 	add.w	r3, r7, #24
 800275a:	2228      	movs	r2, #40	; 0x28
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f00e f85a 	bl	8010818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002780:	2301      	movs	r3, #1
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002784:	2302      	movs	r3, #2
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800278e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002794:	f107 0318 	add.w	r3, r7, #24
 8002798:	4618      	mov	r0, r3
 800279a:	f005 ffff 	bl	800879c <HAL_RCC_OscConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80027ae:	f001 ff83 	bl	80046b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b2:	230f      	movs	r3, #15
 80027b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b6:	2302      	movs	r3, #2
 80027b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2102      	movs	r1, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 fa65 	bl	8008c9c <HAL_RCC_ClockConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80027e2:	f001 ff69 	bl	80046b8 <Error_Handler>
  }
}
 80027e6:	bf00      	nop
 80027e8:	3740      	adds	r7, #64	; 0x40
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 50); //Güç registerını aktif et
 80027fa:	2332      	movs	r3, #50	; 0x32
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	223e      	movs	r2, #62	; 0x3e
 800280a:	21d0      	movs	r1, #208	; 0xd0
 800280c:	482f      	ldr	r0, [pc, #188]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 800280e:	f004 ffa1 	bl	8007754 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002812:	2005      	movs	r0, #5
 8002814:	f003 fdb0 	bl	8006378 <HAL_Delay>
	//config = 0x18; //NO DLPF
	config = 0x1B; //1B 42Hz DLPF || 1C 20Hz DLPF
 8002818:	231b      	movs	r3, #27
 800281a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 50); //Gyro 250 d/s'ye ayarlandi.
 800281c:	2332      	movs	r3, #50	; 0x32
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	2301      	movs	r3, #1
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	2216      	movs	r2, #22
 800282c:	21d0      	movs	r1, #208	; 0xd0
 800282e:	4827      	ldr	r0, [pc, #156]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 8002830:	f004 ff90 	bl	8007754 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8002834:	2005      	movs	r0, #5
 8002836:	f003 fd9f 	bl	8006378 <HAL_Delay>


	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, GYRO_CONF_REG, 1, gyro_conf, 1, 5);
 800283a:	2305      	movs	r3, #5
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	2301      	movs	r3, #1
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <_Z14MPU6050_Baslatv+0xe0>)
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2301      	movs	r3, #1
 8002848:	2216      	movs	r2, #22
 800284a:	21d1      	movs	r1, #209	; 0xd1
 800284c:	481f      	ldr	r0, [pc, #124]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 800284e:	f005 f87b 	bl	8007948 <HAL_I2C_Mem_Read>

	config = 0x00;
 8002852:	2300      	movs	r3, #0
 8002854:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002856:	2305      	movs	r3, #5
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2301      	movs	r3, #1
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2301      	movs	r3, #1
 8002864:	222d      	movs	r2, #45	; 0x2d
 8002866:	21a6      	movs	r1, #166	; 0xa6
 8002868:	4818      	ldr	r0, [pc, #96]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 800286a:	f004 ff73 	bl	8007754 <HAL_I2C_Mem_Write>
	config = 0x08;
 800286e:	2308      	movs	r3, #8
 8002870:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002872:	2305      	movs	r3, #5
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	2301      	movs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	222d      	movs	r2, #45	; 0x2d
 8002882:	21a6      	movs	r1, #166	; 0xa6
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 8002886:	f004 ff65 	bl	8007754 <HAL_I2C_Mem_Write>
	//config = 0x0D;
	config = 0x0B; //100 HZ LPF
 800288a:	230b      	movs	r3, #11
 800288c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800288e:	2305      	movs	r3, #5
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	2301      	movs	r3, #1
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	222c      	movs	r2, #44	; 0x2c
 800289e:	21a6      	movs	r1, #166	; 0xa6
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 80028a2:	f004 ff57 	bl	8007754 <HAL_I2C_Mem_Write>
	config = 0x01;
 80028a6:	2301      	movs	r3, #1
 80028a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80028aa:	2305      	movs	r3, #5
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	2301      	movs	r3, #1
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	2231      	movs	r2, #49	; 0x31
 80028ba:	21a6      	movs	r1, #166	; 0xa6
 80028bc:	4803      	ldr	r0, [pc, #12]	; (80028cc <_Z14MPU6050_Baslatv+0xdc>)
 80028be:	f004 ff49 	bl	8007754 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200018b4 	.word	0x200018b4
 80028d0:	200017f4 	.word	0x200017f4
 80028d4:	00000000 	.word	0x00000000

080028d8 <_Z8MagCalibsss>:



void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
 80028e2:	460b      	mov	r3, r1
 80028e4:	80bb      	strh	r3, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 80028ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fd80 	bl	80003f4 <__aeabi_i2d>
 80028f4:	a366      	add	r3, pc, #408	; (adr r3, 8002a90 <_Z8MagCalibsss+0x1b8>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fde5 	bl	80004c8 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4614      	mov	r4, r2
 8002904:	461d      	mov	r5, r3
 8002906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fd72 	bl	80003f4 <__aeabi_i2d>
 8002910:	a361      	add	r3, pc, #388	; (adr r3, 8002a98 <_Z8MagCalibsss+0x1c0>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fdd7 	bl	80004c8 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4620      	mov	r0, r4
 8002920:	4629      	mov	r1, r5
 8002922:	f7fd fc1b 	bl	800015c <__adddf3>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4614      	mov	r4, r2
 800292c:	461d      	mov	r5, r3
 800292e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fd5e 	bl	80003f4 <__aeabi_i2d>
 8002938:	a359      	add	r3, pc, #356	; (adr r3, 8002aa0 <_Z8MagCalibsss+0x1c8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fdc3 	bl	80004c8 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fc05 	bl	8000158 <__aeabi_dsub>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <_Z8MagCalibsss+0x1f8>)
 800295c:	f7fd fbfe 	bl	800015c <__adddf3>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f7fe f85e 	bl	8000a28 <__aeabi_d2iz>
 800296c:	4603      	mov	r3, r0
 800296e:	b21a      	sxth	r2, r3
 8002970:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <_Z8MagCalibsss+0x1fc>)
 8002972:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 8002974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd3b 	bl	80003f4 <__aeabi_i2d>
 800297e:	a346      	add	r3, pc, #280	; (adr r3, 8002a98 <_Z8MagCalibsss+0x1c0>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fda0 	bl	80004c8 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	461d      	mov	r5, r3
 8002990:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fd2d 	bl	80003f4 <__aeabi_i2d>
 800299a:	a343      	add	r3, pc, #268	; (adr r3, 8002aa8 <_Z8MagCalibsss+0x1d0>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fd92 	bl	80004c8 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fbd6 	bl	800015c <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4614      	mov	r4, r2
 80029b6:	461d      	mov	r5, r3
 80029b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd19 	bl	80003f4 <__aeabi_i2d>
 80029c2:	a33b      	add	r3, pc, #236	; (adr r3, 8002ab0 <_Z8MagCalibsss+0x1d8>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fd7e 	bl	80004c8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fbc2 	bl	800015c <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	a335      	add	r3, pc, #212	; (adr r3, 8002ab8 <_Z8MagCalibsss+0x1e0>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fbb9 	bl	800015c <__adddf3>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f819 	bl	8000a28 <__aeabi_d2iz>
 80029f6:	4603      	mov	r3, r0
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <_Z8MagCalibsss+0x200>)
 80029fc:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 80029fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fcf6 	bl	80003f4 <__aeabi_i2d>
 8002a08:	a329      	add	r3, pc, #164	; (adr r3, 8002ab0 <_Z8MagCalibsss+0x1d8>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fd5b 	bl	80004c8 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	461d      	mov	r5, r3
 8002a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fce8 	bl	80003f4 <__aeabi_i2d>
 8002a24:	a31e      	add	r3, pc, #120	; (adr r3, 8002aa0 <_Z8MagCalibsss+0x1c8>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fd4d 	bl	80004c8 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fd fb8f 	bl	8000158 <__aeabi_dsub>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4614      	mov	r4, r2
 8002a40:	461d      	mov	r5, r3
 8002a42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fcd4 	bl	80003f4 <__aeabi_i2d>
 8002a4c:	a31c      	add	r3, pc, #112	; (adr r3, 8002ac0 <_Z8MagCalibsss+0x1e8>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fd39 	bl	80004c8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fb7d 	bl	800015c <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	a317      	add	r3, pc, #92	; (adr r3, 8002ac8 <_Z8MagCalibsss+0x1f0>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fb72 	bl	8000158 <__aeabi_dsub>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fd ffd4 	bl	8000a28 <__aeabi_d2iz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <_Z8MagCalibsss+0x204>)
 8002a86:	801a      	strh	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a90:	4189374c 	.word	0x4189374c
 8002a94:	3feee560 	.word	0x3feee560
 8002a98:	3dee7818 	.word	0x3dee7818
 8002a9c:	3f8c725c 	.word	0x3f8c725c
 8002aa0:	f861a60d 	.word	0xf861a60d
 8002aa4:	3f929888 	.word	0x3f929888
 8002aa8:	3c361134 	.word	0x3c361134
 8002aac:	3fee52bd 	.word	0x3fee52bd
 8002ab0:	a6ce3583 	.word	0xa6ce3583
 8002ab4:	3f7b8023 	.word	0x3f7b8023
 8002ab8:	33333333 	.word	0x33333333
 8002abc:	4059d333 	.word	0x4059d333
 8002ac0:	24dd2f1b 	.word	0x24dd2f1b
 8002ac4:	3ff18106 	.word	0x3ff18106
 8002ac8:	e353f7cf 	.word	0xe353f7cf
 8002acc:	40211ba5 	.word	0x40211ba5
 8002ad0:	40300000 	.word	0x40300000
 8002ad4:	20001776 	.word	0x20001776
 8002ad8:	20001778 	.word	0x20001778
 8002adc:	2000177a 	.word	0x2000177a

08002ae0 <_Z9checkModei>:

void checkMode(int mod_ch) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002aee:	da07      	bge.n	8002b00 <_Z9checkModei+0x20>

		  controller.mod = STABILIZE;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_Z9checkModei+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
//		  controller.z0 = EKF.alt_gnd;
//		  controller.x0 = EKF.x;
//		  controller.y0 = EKF.y;
		  controller.p_alt.reset();
 8002af8:	4810      	ldr	r0, [pc, #64]	; (8002b3c <_Z9checkModei+0x5c>)
 8002afa:	f00b fbb7 	bl	800e26c <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 8002afe:	e016      	b.n	8002b2e <_Z9checkModei+0x4e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002b06:	db0e      	blt.n	8002b26 <_Z9checkModei+0x46>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	dc09      	bgt.n	8002b26 <_Z9checkModei+0x46>
		  controller.mod = STABILIZE;
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <_Z9checkModei+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		  z0 = controller.p_alt.zi;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_Z9checkModei+0x58>)
 8002b1c:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <_Z9checkModei+0x60>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	e003      	b.n	8002b2e <_Z9checkModei+0x4e>
		  controller.mod = STABILIZE;
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <_Z9checkModei+0x58>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000ff0 	.word	0x20000ff0
 8002b3c:	20001410 	.word	0x20001410
 8002b40:	20001738 	.word	0x20001738

08002b44 <_Z10CheckSwarmv>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
		break;
	}
}

void CheckSwarm() {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <_Z10CheckSwarmv+0x68>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b50:	4293      	cmp	r3, r2
 8002b52:	dd14      	ble.n	8002b7e <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <_Z10CheckSwarmv+0x6c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d024      	beq.n	8002ba6 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <_Z10CheckSwarmv+0x6c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <_Z10CheckSwarmv+0x70>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

			controller.pid_roll.reset();
 8002b6a:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <_Z10CheckSwarmv+0x74>)
 8002b6c:	f00b fb7e 	bl	800e26c <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 8002b70:	4812      	ldr	r0, [pc, #72]	; (8002bbc <_Z10CheckSwarmv+0x78>)
 8002b72:	f00b fb7b 	bl	800e26c <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8002b76:	4812      	ldr	r0, [pc, #72]	; (8002bc0 <_Z10CheckSwarmv+0x7c>)
 8002b78:	f00b fb78 	bl	800e26c <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 8002b7c:	e013      	b.n	8002ba6 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <_Z10CheckSwarmv+0x6c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00f      	beq.n	8002ba6 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <_Z10CheckSwarmv+0x70>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
			swarm_mode = NORMAL;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <_Z10CheckSwarmv+0x6c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 8002b94:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <_Z10CheckSwarmv+0x74>)
 8002b96:	f00b fb69 	bl	800e26c <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 8002b9a:	4808      	ldr	r0, [pc, #32]	; (8002bbc <_Z10CheckSwarmv+0x78>)
 8002b9c:	f00b fb66 	bl	800e26c <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <_Z10CheckSwarmv+0x7c>)
 8002ba2:	f00b fb63 	bl	800e26c <_ZN3PID5resetEv>
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20001670 	.word	0x20001670
 8002bb0:	200017e9 	.word	0x200017e9
 8002bb4:	20000ff0 	.word	0x20000ff0
 8002bb8:	200011e8 	.word	0x200011e8
 8002bbc:	200012a0 	.word	0x200012a0
 8002bc0:	20001358 	.word	0x20001358

08002bc4 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 8002bc4:	b598      	push	{r3, r4, r7, lr}
 8002bc6:	af00      	add	r7, sp, #0

	if(armed) {
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <_Z13CheckFailsafev+0xa4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d048      	beq.n	8002c62 <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 8002bd0:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <_Z13CheckFailsafev+0xa8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	dc0d      	bgt.n	8002bf8 <_Z13CheckFailsafev+0x34>
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <_Z13CheckFailsafev+0xac>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <_Z13CheckFailsafev+0xac>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <_Z13CheckFailsafev+0xb0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <_Z13CheckFailsafev+0xb4>)
 8002bf6:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <_Z13CheckFailsafev+0xb8>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c00:	d226      	bcs.n	8002c50 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <_Z13CheckFailsafev+0xac>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02b      	beq.n	8002c62 <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <_Z13CheckFailsafev+0xb0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <_Z13CheckFailsafev+0xb4>)
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd ff83 	bl	8000b20 <__aeabi_fsub>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fa7d 	bl	800211c <_ZSt3absf>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2201      	movs	r2, #1
 8002c26:	4614      	mov	r4, r2
 8002c28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fa1f 	bl	8001070 <__aeabi_fcmplt>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <_Z13CheckFailsafev+0x78>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	b2e3      	uxtb	r3, r4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00f      	beq.n	8002c62 <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <_Z13CheckFailsafev+0xb8>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <_Z13CheckFailsafev+0xb8>)
 8002c4c:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 8002c4e:	e008      	b.n	8002c62 <_Z13CheckFailsafev+0x9e>
			armed = false;
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <_Z13CheckFailsafev+0xa4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <_Z13CheckFailsafev+0xac>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_Z13CheckFailsafev+0xb8>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	bd98      	pop	{r3, r4, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200016d9 	.word	0x200016d9
 8002c6c:	20001670 	.word	0x20001670
 8002c70:	2000177e 	.word	0x2000177e
 8002c74:	200008e4 	.word	0x200008e4
 8002c78:	20001780 	.word	0x20001780
 8002c7c:	2000177c 	.word	0x2000177c

08002c80 <_Z9Check_Armv>:


void Check_Arm() {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	if(!armed) {
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <_Z9Check_Armv+0xa4>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d045      	beq.n	8002d1e <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <_Z9Check_Armv+0xa8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f240 424b 	movw	r2, #1099	; 0x44b
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	dc3b      	bgt.n	8002d16 <_Z9Check_Armv+0x96>
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <_Z9Check_Armv+0xa8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	dd35      	ble.n	8002d16 <_Z9Check_Armv+0x96>
				if(!arm_start){
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <_Z9Check_Armv+0xac>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002cb8:	f003 fb54 	bl	8006364 <HAL_GetTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <_Z9Check_Armv+0xb0>)
 8002cc2:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <_Z9Check_Armv+0xac>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8002cca:	f003 fb4b 	bl	8006364 <HAL_GetTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <_Z9Check_Armv+0xb0>)
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	bf8c      	ite	hi
 8002cde:	2301      	movhi	r3, #1
 8002ce0:	2300      	movls	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01a      	beq.n	8002d1e <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 8002ce8:	4812      	ldr	r0, [pc, #72]	; (8002d34 <_Z9Check_Armv+0xb4>)
 8002cea:	f00b fabf 	bl	800e26c <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8002cee:	4812      	ldr	r0, [pc, #72]	; (8002d38 <_Z9Check_Armv+0xb8>)
 8002cf0:	f00b fabc 	bl	800e26c <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <_Z9Check_Armv+0xbc>)
 8002cf6:	f00b fab9 	bl	800e26c <_ZN3PID5resetEv>
					armed = true;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <_Z9Check_Armv+0xa4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <_Z9Check_Armv+0xc0>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0e:	480d      	ldr	r0, [pc, #52]	; (8002d44 <_Z9Check_Armv+0xc4>)
 8002d10:	f004 f84c 	bl	8006dac <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8002d14:	e003      	b.n	8002d1e <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <_Z9Check_Armv+0xac>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8002d1c:	e7ff      	b.n	8002d1e <_Z9Check_Armv+0x9e>
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200016d9 	.word	0x200016d9
 8002d28:	20001670 	.word	0x20001670
 8002d2c:	200016d8 	.word	0x200016d8
 8002d30:	200016cc 	.word	0x200016cc
 8002d34:	200011e8 	.word	0x200011e8
 8002d38:	200012a0 	.word	0x200012a0
 8002d3c:	20001358 	.word	0x20001358
 8002d40:	20000ca8 	.word	0x20000ca8
 8002d44:	40010800 	.word	0x40010800

08002d48 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	if(armed) {
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <_Z12Check_Disarmv+0x8c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d03c      	beq.n	8002dce <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <_Z12Check_Disarmv+0x90>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f240 424b 	movw	r2, #1099	; 0x44b
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	dc32      	bgt.n	8002dc6 <_Z12Check_Disarmv+0x7e>
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <_Z12Check_Disarmv+0x90>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f240 424b 	movw	r2, #1099	; 0x44b
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	dc2c      	bgt.n	8002dc6 <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <_Z12Check_Disarmv+0x94>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8002d7a:	f003 faf3 	bl	8006364 <HAL_GetTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <_Z12Check_Disarmv+0x98>)
 8002d84:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_Z12Check_Disarmv+0x94>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8002d8c:	f003 faea 	bl	8006364 <HAL_GetTick>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <_Z12Check_Disarmv+0x98>)
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf8c      	ite	hi
 8002da0:	2301      	movhi	r3, #1
 8002da2:	2300      	movls	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d011      	beq.n	8002dce <_Z12Check_Disarmv+0x86>
					armed = false;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <_Z12Check_Disarmv+0x8c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <_Z12Check_Disarmv+0x9c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dbe:	480a      	ldr	r0, [pc, #40]	; (8002de8 <_Z12Check_Disarmv+0xa0>)
 8002dc0:	f003 fff4 	bl	8006dac <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002dc4:	e003      	b.n	8002dce <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <_Z12Check_Disarmv+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002dcc:	e7ff      	b.n	8002dce <_Z12Check_Disarmv+0x86>
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200016d9 	.word	0x200016d9
 8002dd8:	20001670 	.word	0x20001670
 8002ddc:	200016da 	.word	0x200016da
 8002de0:	200016d0 	.word	0x200016d0
 8002de4:	20000ca8 	.word	0x20000ca8
 8002de8:	40010800 	.word	0x40010800

08002dec <_Z9TelemPackv>:

void TelemPack() {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8002df0:	4b9c      	ldr	r3, [pc, #624]	; (8003064 <_Z9TelemPackv+0x278>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a9c      	ldr	r2, [pc, #624]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002df6:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002df8:	4b9a      	ldr	r3, [pc, #616]	; (8003064 <_Z9TelemPackv+0x278>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a9a      	ldr	r2, [pc, #616]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002dfe:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <_Z9TelemPackv+0x278>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a98      	ldr	r2, [pc, #608]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e06:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8002e08:	4b98      	ldr	r3, [pc, #608]	; (800306c <_Z9TelemPackv+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4b96      	ldr	r3, [pc, #600]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e10:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8002e12:	4b96      	ldr	r3, [pc, #600]	; (800306c <_Z9TelemPackv+0x280>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b93      	ldr	r3, [pc, #588]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e1a:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8002e1c:	4b93      	ldr	r3, [pc, #588]	; (800306c <_Z9TelemPackv+0x280>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	4b91      	ldr	r3, [pc, #580]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e24:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002e26:	4b91      	ldr	r3, [pc, #580]	; (800306c <_Z9TelemPackv+0x280>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e2e:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 8002e30:	4b8f      	ldr	r3, [pc, #572]	; (8003070 <_Z9TelemPackv+0x284>)
 8002e32:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002e36:	4a8c      	ldr	r2, [pc, #560]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e38:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <_Z9TelemPackv+0x284>)
 8002e3c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8002e40:	4a89      	ldr	r2, [pc, #548]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e42:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = controller.yaw_rate_des;
 8002e44:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <_Z9TelemPackv+0x284>)
 8002e46:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002e4a:	4a87      	ldr	r2, [pc, #540]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e4c:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <_Z9TelemPackv+0x278>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a85      	ldr	r2, [pc, #532]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e54:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8002e56:	4b83      	ldr	r3, [pc, #524]	; (8003064 <_Z9TelemPackv+0x278>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	4a83      	ldr	r2, [pc, #524]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e5c:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8002e5e:	4b81      	ldr	r3, [pc, #516]	; (8003064 <_Z9TelemPackv+0x278>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4a81      	ldr	r2, [pc, #516]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e64:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <_Z9TelemPackv+0x288>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a7f      	ldr	r2, [pc, #508]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e6c:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8002e6e:	4b81      	ldr	r3, [pc, #516]	; (8003074 <_Z9TelemPackv+0x288>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e74:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002e78:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e7e:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8002e80:	4b7d      	ldr	r3, [pc, #500]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002e82:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002e86:	4a78      	ldr	r2, [pc, #480]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e88:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = yaw_unwrapped;
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <_Z9TelemPackv+0x290>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8002e92:	4b79      	ldr	r3, [pc, #484]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002e94:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002e98:	4a73      	ldr	r2, [pc, #460]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002e9a:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 8002e9c:	4b76      	ldr	r3, [pc, #472]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002e9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ea2:	4a71      	ldr	r2, [pc, #452]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ea4:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.yaw_gyro   = EKF.gyro[2];
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002ea8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002eac:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002eae:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_comp =  yaw_comp;
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <_Z9TelemPackv+0x294>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002eb6:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002eba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ec0:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002ec4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002ec8:	4a67      	ldr	r2, [pc, #412]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002eca:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002ece:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ed4:	65d3      	str	r3, [r2, #92]	; 0x5c

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <_Z9TelemPackv+0x284>)
 8002ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8002edc:	4a62      	ldr	r2, [pc, #392]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ede:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8002ee0:	4b63      	ldr	r3, [pc, #396]	; (8003070 <_Z9TelemPackv+0x284>)
 8002ee2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8002ee6:	4a60      	ldr	r2, [pc, #384]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ee8:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <_Z9TelemPackv+0x284>)
 8002eec:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ef2:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <_Z9TelemPackv+0x284>)
 8002ef6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8002efa:	4a5b      	ldr	r2, [pc, #364]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002efc:	66d3      	str	r3, [r2, #108]	; 0x6c

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f00:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f0a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f10:	6753      	str	r3, [r2, #116]	; 0x74
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f14:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8002f18:	4a53      	ldr	r2, [pc, #332]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f1a:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8002f1c:	4b54      	ldr	r3, [pc, #336]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f1e:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8002f22:	4a51      	ldr	r2, [pc, #324]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f24:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.p_yaw.P = controller.pid_yaw.P;
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f28:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f2e:	f8c3 210d 	str.w	r2, [r3, #269]	; 0x10d
	  telem_pack.p_yaw.D = controller.pid_yaw.D;
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f34:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f3a:	f8c3 2115 	str.w	r2, [r3, #277]	; 0x115
	  telem_pack.p_yaw.I = controller.pid_yaw.I;
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f46:	f8c3 2111 	str.w	r2, [r3, #273]	; 0x111
	  telem_pack.p_yaw.pd_roll_sat_buf = controller.pid_yaw.pd_roll_sat_buf;
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f4c:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 8002f50:	4b45      	ldr	r3, [pc, #276]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f52:	f8c3 2119 	str.w	r2, [r3, #281]	; 0x119

	  telem_pack.sonar_alt = EKF.roll_bias;
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <_Z9TelemPackv+0x28c>)
 8002f58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f5c:	4a42      	ldr	r2, [pc, #264]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.z = controller.angle_ff_roll;
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f64:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002f68:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	  telem_pack.position_body.z = controller.angle_ff_pitch;
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <_Z9TelemPackv+0x284>)
 8002f70:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002f74:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8002f7a:	4b42      	ldr	r3, [pc, #264]	; (8003084 <_Z9TelemPackv+0x298>)
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	  telem_pack.cam_data.x = cam_data_20.x;
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <_Z9TelemPackv+0x298>)
 8002f86:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8002f8a:	b21a      	sxth	r2, r3
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f8e:	f8a3 20a5 	strh.w	r2, [r3, #165]	; 0xa5
	  telem_pack.cam_data.y = cam_data_20.y;
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <_Z9TelemPackv+0x298>)
 8002f94:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002f9c:	f8a3 20a7 	strh.w	r2, [r3, #167]	; 0xa7
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <_Z9TelemPackv+0x298>)
 8002fa2:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002faa:	f8a3 20a9 	strh.w	r2, [r3, #169]	; 0xa9
//	  telem_pack.position_body.x = EKF.x;
//	  telem_pack.velocity_body.x = EKF.vx;
//	  telem_pack.position_body.y = EKF.y;
//	  telem_pack.velocity_body.y = EKF.vy;

	  telem_pack.alt_thr = controller.alt_thr;
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <_Z9TelemPackv+0x284>)
 8002fb0:	f8d3 3648 	ldr.w	r3, [r3, #1608]	; 0x648
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 8002fba:	f003 f9d3 	bl	8006364 <HAL_GetTick>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fc2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	  telem_pack.acc.x = accXc;
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <_Z9TelemPackv+0x29c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fcc:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad
	  telem_pack.acc.y = accYc;
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	; (800308c <_Z9TelemPackv+0x2a0>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fd6:	f8c3 20b1 	str.w	r2, [r3, #177]	; 0xb1
	  telem_pack.acc.z = accZm;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <_Z9TelemPackv+0x2a4>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fe0:	f8c3 20b5 	str.w	r2, [r3, #181]	; 0xb5

	  telem_pack.mag.x = MAG_X_CALIB;
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <_Z9TelemPackv+0x2a8>)
 8002fe6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002fec:	f8a3 20b9 	strh.w	r2, [r3, #185]	; 0xb9
	  telem_pack.mag.y = MAG_Y_CALIB;
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <_Z9TelemPackv+0x2ac>)
 8002ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <_Z9TelemPackv+0x27c>)
 8002ff8:	f8a3 20bb 	strh.w	r2, [r3, #187]	; 0xbb
	  telem_pack.mag.z = MAG_Z_CALIB;
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <_Z9TelemPackv+0x2b0>)
 8002ffe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003004:	f8a3 20bd 	strh.w	r2, [r3, #189]	; 0xbd

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003010:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8003014:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_Z9TelemPackv+0x27c>)
 800301c:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	b29a      	uxth	r2, r3
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003028:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 800302c:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003034:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003040:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_Z9TelemPackv+0x27c>)
 800304c:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	b29a      	uxth	r2, r3
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <_Z9TelemPackv+0x27c>)
 8003058:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <_Z9TelemPackv+0x2b4>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	b29a      	uxth	r2, r3
 8003062:	e01f      	b.n	80030a4 <_Z9TelemPackv+0x2b8>
 8003064:	20000938 	.word	0x20000938
 8003068:	2000095c 	.word	0x2000095c
 800306c:	20001640 	.word	0x20001640
 8003070:	20000ff0 	.word	0x20000ff0
 8003074:	20000914 	.word	0x20000914
 8003078:	20000ca8 	.word	0x20000ca8
 800307c:	200017f0 	.word	0x200017f0
 8003080:	200017ec 	.word	0x200017ec
 8003084:	20001758 	.word	0x20001758
 8003088:	200008e4 	.word	0x200008e4
 800308c:	200008e8 	.word	0x200008e8
 8003090:	200008f8 	.word	0x200008f8
 8003094:	20001776 	.word	0x20001776
 8003098:	20001778 	.word	0x20001778
 800309c:	2000177a 	.word	0x2000177a
 80030a0:	20001670 	.word	0x20001670
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030a6:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 80030aa:	4b3c      	ldr	r3, [pc, #240]	; (800319c <_Z9TelemPackv+0x3b0>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030b2:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <_Z9TelemPackv+0x3b0>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030be:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <_Z9TelemPackv+0x3b0>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030ca:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  telem_pack.pwm2.w1 = controller_output_2[0];
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <_Z9TelemPackv+0x3b4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030d6:	f8a3 2105 	strh.w	r2, [r3, #261]	; 0x105
	  telem_pack.pwm2.w2 = controller_output_2[1];
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <_Z9TelemPackv+0x3b4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030e2:	f8a3 2107 	strh.w	r2, [r3, #263]	; 0x107
	  telem_pack.pwm2.w3 = controller_output_2[2];
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <_Z9TelemPackv+0x3b4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030ee:	f8a3 2109 	strh.w	r2, [r3, #265]	; 0x109
	  telem_pack.pwm2.w4 = controller_output_2[3];
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <_Z9TelemPackv+0x3b4>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <_Z9TelemPackv+0x3ac>)
 80030fa:	f8a3 210b 	strh.w	r2, [r3, #267]	; 0x10b
//	  telem_pack.S_yaw.S23 = EKF.S23_yaw;
//	  telem_pack.S_yaw.S31 = EKF.S31_yaw;
//	  telem_pack.S_yaw.S32 = EKF.S32_yaw;
//	  telem_pack.S_yaw.S33 = EKF.S33_yaw;

	  telem_pack.bno_attitude.roll  = bno_dat.x;
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <_Z9TelemPackv+0x3b8>)
 8003100:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fcb6 	bl	8000a78 <__aeabi_d2f>
 800310c:	4602      	mov	r2, r0
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <_Z9TelemPackv+0x3ac>)
 8003110:	f8c3 2189 	str.w	r2, [r3, #393]	; 0x189
	  telem_pack.bno_attitude.pitch = bno_dat.y;
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <_Z9TelemPackv+0x3b8>)
 8003116:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fcab 	bl	8000a78 <__aeabi_d2f>
 8003122:	4602      	mov	r2, r0
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <_Z9TelemPackv+0x3ac>)
 8003126:	f8c3 218d 	str.w	r2, [r3, #397]	; 0x18d
	  telem_pack.bno_attitude.yaw   = bno_dat.z;
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <_Z9TelemPackv+0x3b8>)
 800312c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fca0 	bl	8000a78 <__aeabi_d2f>
 8003138:	4602      	mov	r2, r0
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <_Z9TelemPackv+0x3ac>)
 800313c:	f8c3 2191 	str.w	r2, [r3, #401]	; 0x191

	  telem_pack.bno_rates.roll  = bno_gyro.x;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <_Z9TelemPackv+0x3bc>)
 8003142:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fc95 	bl	8000a78 <__aeabi_d2f>
 800314e:	4602      	mov	r2, r0
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <_Z9TelemPackv+0x3ac>)
 8003152:	f8c3 2195 	str.w	r2, [r3, #405]	; 0x195
	  telem_pack.bno_rates.pitch = bno_gyro.y;
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <_Z9TelemPackv+0x3bc>)
 8003158:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fc8a 	bl	8000a78 <__aeabi_d2f>
 8003164:	4602      	mov	r2, r0
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <_Z9TelemPackv+0x3ac>)
 8003168:	f8c3 2199 	str.w	r2, [r3, #409]	; 0x199
	  telem_pack.bno_rates.yaw   = bno_gyro.z;
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <_Z9TelemPackv+0x3bc>)
 800316e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f7fd fc7f 	bl	8000a78 <__aeabi_d2f>
 800317a:	4602      	mov	r2, r0
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_Z9TelemPackv+0x3ac>)
 800317e:	f8c3 219d 	str.w	r2, [r3, #413]	; 0x19d

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <_Z9TelemPackv+0x3c0>)
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <_Z9TelemPackv+0x3ac>)
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f240 13a1 	movw	r3, #417	; 0x1a1
 800318e:	461a      	mov	r2, r3
 8003190:	f00d fb34 	bl	80107fc <memcpy>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	2000095c 	.word	0x2000095c
 800319c:	20001670 	.word	0x20001670
 80031a0:	20001650 	.word	0x20001650
 80031a4:	200017a8 	.word	0x200017a8
 80031a8:	200017c8 	.word	0x200017c8
 80031ac:	20000b00 	.word	0x20000b00

080031b0 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af04      	add	r7, sp, #16
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	9302      	str	r3, [sp, #8]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	21d1      	movs	r1, #209	; 0xd1
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_Z7GyroOkuh+0x40>)
 80031d2:	f004 fbb9 	bl	8007948 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 80031d6:	7b3b      	ldrb	r3, [r7, #12]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b21a      	sxth	r2, r3
 80031dc:	7b7b      	ldrb	r3, [r7, #13]
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	81fb      	strh	r3, [r7, #14]
	return gyro;
 80031e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200018b4 	.word	0x200018b4

080031f4 <_Z7pwm2angt>:

      return yaw_warped;
}


float pwm2ang(unsigned short int pwm) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 80031fe:	2305      	movs	r3, #5
 8003200:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8003202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003206:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003208:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800320c:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 800320e:	f06f 0313 	mvn.w	r3, #19
 8003212:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8003214:	2314      	movs	r3, #20
 8003216:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8003220:	3304      	adds	r3, #4
 8003222:	429a      	cmp	r2, r3
 8003224:	dd09      	ble.n	800323a <_Z7pwm2angt+0x46>
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	429a      	cmp	r2, r3
 8003230:	db03      	blt.n	800323a <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8003232:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003236:	83fb      	strh	r3, [r7, #30]
 8003238:	e001      	b.n	800323e <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800323e:	8bfa      	ldrh	r2, [r7, #30]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	1a8a      	subs	r2, r1, r2
 800324a:	fb02 f203 	mul.w	r2, r2, r3
 800324e:	6939      	ldr	r1, [r7, #16]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1acb      	subs	r3, r1, r3
 8003254:	fb92 f2f3 	sdiv	r2, r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fd15 	bl	8000c8c <__aeabi_i2f>
 8003262:	4603      	mov	r3, r0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800327c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003280:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8003282:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003286:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8003288:	2364      	movs	r3, #100	; 0x64
 800328a:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	1a8a      	subs	r2, r1, r2
 8003298:	fb02 f203 	mul.w	r2, r2, r3
 800329c:	6939      	ldr	r1, [r7, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1acb      	subs	r3, r1, r3
 80032a2:	fb92 f2f3 	sdiv	r2, r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	425b      	negs	r3, r3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fced 	bl	8000c8c <__aeabi_i2f>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af04      	add	r7, sp, #16
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	2301      	movs	r3, #1
 80032cc:	9302      	str	r3, [sp, #8]
 80032ce:	2302      	movs	r3, #2
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2301      	movs	r3, #1
 80032da:	21a7      	movs	r1, #167	; 0xa7
 80032dc:	4807      	ldr	r0, [pc, #28]	; (80032fc <_Z6AccOkuh+0x40>)
 80032de:	f004 fb33 	bl	8007948 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 80032e2:	7b7b      	ldrb	r3, [r7, #13]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b21a      	sxth	r2, r3
 80032e8:	7b3b      	ldrb	r3, [r7, #12]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	81fb      	strh	r3, [r7, #14]
	return gyro;
 80032f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200018b4 	.word	0x200018b4

08003300 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd f873 	bl	80003f4 <__aeabi_i2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f00b fb35 	bl	800e984 <sqrt>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8003334:	4bc6      	ldr	r3, [pc, #792]	; (8003650 <_Z9DCM2EulerPsS_+0x328>)
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003346:	fb03 f202 	mul.w	r2, r3, r2
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3302      	adds	r3, #2
 800334e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003352:	4619      	mov	r1, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3302      	adds	r3, #2
 8003358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335c:	fb03 f301 	mul.w	r3, r3, r1
 8003360:	441a      	add	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3304      	adds	r3, #4
 8003366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336a:	4619      	mov	r1, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	3304      	adds	r3, #4
 8003370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003374:	fb03 f301 	mul.w	r3, r3, r1
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ffc0 	bl	8003300 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f7fd fb76 	bl	8000a78 <__aeabi_d2f>
 800338c:	4603      	mov	r3, r0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
//		  EKF.ekf_update = true;
//	  }

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3302      	adds	r3, #2
 800339c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a0:	fb03 f302 	mul.w	r3, r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	3202      	adds	r2, #2
 80033a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80033ac:	fb02 f203 	mul.w	r2, r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b6:	4619      	mov	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3302      	adds	r3, #2
 80033bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c0:	fb03 f301 	mul.w	r3, r3, r1
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	3102      	adds	r1, #2
 80033c8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	1ad2      	subs	r2, r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d8:	4619      	mov	r1, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3304      	adds	r3, #4
 80033de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e2:	fb03 f301 	mul.w	r3, r3, r1
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	3104      	adds	r1, #4
 80033ea:	f9b1 1000 	ldrsh.w	r1, [r1]
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	441a      	add	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033fa:	4619      	mov	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003404:	fb03 f301 	mul.w	r3, r3, r1
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	3104      	adds	r1, #4
 800340c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fc38 	bl	8000c8c <__aeabi_i2f>
 800341c:	4604      	mov	r4, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3302      	adds	r3, #2
 800342a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342e:	fb03 f202 	mul.w	r2, r3, r2
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3302      	adds	r3, #2
 8003436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343a:	4619      	mov	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003442:	fb03 f301 	mul.w	r3, r3, r1
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fc1f 	bl	8000c8c <__aeabi_i2f>
 800344e:	4603      	mov	r3, r0
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f951 	bl	80036f8 <_Z6squaref>
 8003456:	4605      	mov	r5, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	461a      	mov	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003468:	fb03 f202 	mul.w	r2, r3, r2
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3304      	adds	r3, #4
 8003470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003474:	4619      	mov	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347c:	fb03 f301 	mul.w	r3, r3, r1
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc02 	bl	8000c8c <__aeabi_i2f>
 8003488:	4603      	mov	r3, r0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f934 	bl	80036f8 <_Z6squaref>
 8003490:	4603      	mov	r3, r0
 8003492:	4619      	mov	r1, r3
 8003494:	4628      	mov	r0, r5
 8003496:	f7fd fb45 	bl	8000b24 <__addsf3>
 800349a:	4603      	mov	r3, r0
 800349c:	461d      	mov	r5, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3302      	adds	r3, #2
 80034a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b0:	fb03 f202 	mul.w	r2, r3, r2
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3304      	adds	r3, #4
 80034b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034bc:	4619      	mov	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3302      	adds	r3, #2
 80034c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c6:	fb03 f301 	mul.w	r3, r3, r1
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fbdd 	bl	8000c8c <__aeabi_i2f>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f90f 	bl	80036f8 <_Z6squaref>
 80034da:	4603      	mov	r3, r0
 80034dc:	4619      	mov	r1, r3
 80034de:	4628      	mov	r0, r5
 80034e0:	f7fd fb20 	bl	8000b24 <__addsf3>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fe4a 	bl	8002180 <_ZSt4sqrtf>
 80034ec:	4603      	mov	r3, r0
 80034ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fc1f 	bl	8000d34 <__aeabi_fmul>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4619      	mov	r1, r3
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fd fcce 	bl	8000e9c <__aeabi_fdiv>
 8003500:	4603      	mov	r3, r0
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3304      	adds	r3, #4
 8003508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3302      	adds	r3, #2
 8003512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003516:	fb03 f202 	mul.w	r2, r3, r2
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3302      	adds	r3, #2
 800351e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003522:	4619      	mov	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352c:	fb03 f301 	mul.w	r3, r3, r1
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fbaa 	bl	8000c8c <__aeabi_i2f>
 8003538:	4604      	mov	r4, r0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3302      	adds	r3, #2
 8003546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3302      	adds	r3, #2
 8003552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003556:	4619      	mov	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355e:	fb03 f301 	mul.w	r3, r3, r1
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fb91 	bl	8000c8c <__aeabi_i2f>
 800356a:	4603      	mov	r3, r0
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f8c3 	bl	80036f8 <_Z6squaref>
 8003572:	4605      	mov	r5, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003584:	fb03 f202 	mul.w	r2, r3, r2
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3304      	adds	r3, #4
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	4619      	mov	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003598:	fb03 f301 	mul.w	r3, r3, r1
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fb74 	bl	8000c8c <__aeabi_i2f>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8a6 	bl	80036f8 <_Z6squaref>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4619      	mov	r1, r3
 80035b0:	4628      	mov	r0, r5
 80035b2:	f7fd fab7 	bl	8000b24 <__addsf3>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461d      	mov	r5, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3302      	adds	r3, #2
 80035be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035cc:	fb03 f202 	mul.w	r2, r3, r2
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3304      	adds	r3, #4
 80035d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d8:	4619      	mov	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3302      	adds	r3, #2
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	fb03 f301 	mul.w	r3, r3, r1
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fb4f 	bl	8000c8c <__aeabi_i2f>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f881 	bl	80036f8 <_Z6squaref>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4619      	mov	r1, r3
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7fd fa92 	bl	8000b24 <__addsf3>
 8003600:	4603      	mov	r3, r0
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fdbc 	bl	8002180 <_ZSt4sqrtf>
 8003608:	4603      	mov	r3, r0
 800360a:	4619      	mov	r1, r3
 800360c:	4620      	mov	r0, r4
 800360e:	f7fd fc45 	bl	8000e9c <__aeabi_fdiv>
 8003612:	4603      	mov	r3, r0
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361c:	425b      	negs	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd fb34 	bl	8000c8c <__aeabi_i2f>
 8003624:	4603      	mov	r3, r0
 8003626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fc37 	bl	8000e9c <__aeabi_fdiv>
 800362e:	4603      	mov	r3, r0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3302      	adds	r3, #2
 8003636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363a:	425b      	negs	r3, r3
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd fb25 	bl	8000c8c <__aeabi_i2f>
 8003642:	4603      	mov	r3, r0
 8003644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fc28 	bl	8000e9c <__aeabi_fdiv>
 800364c:	4603      	mov	r3, r0
 800364e:	e001      	b.n	8003654 <_Z9DCM2EulerPsS_+0x32c>
 8003650:	42654ca3 	.word	0x42654ca3
 8003654:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3304      	adds	r3, #4
 800365a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365e:	425b      	negs	r3, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fb13 	bl	8000c8c <__aeabi_i2f>
 8003666:	4603      	mov	r3, r0
 8003668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fc16 	bl	8000e9c <__aeabi_fdiv>
 8003670:	4603      	mov	r3, r0
 8003672:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fd5a 	bl	8002134 <_ZSt4asinf>
 8003680:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 8003682:	69b8      	ldr	r0, [r7, #24]
 8003684:	f7fe fbbc 	bl	8001e00 <_ZSt3cosf>
 8003688:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800368e:	f7fd fb51 	bl	8000d34 <__aeabi_fmul>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 800369a:	69f9      	ldr	r1, [r7, #28]
 800369c:	6a38      	ldr	r0, [r7, #32]
 800369e:	f7fd fbfd 	bl	8000e9c <__aeabi_fdiv>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fd51 	bl	800214c <_ZSt4atanf>
 80036aa:	4603      	mov	r3, r0
 80036ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fb40 	bl	8000d34 <__aeabi_fmul>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c0:	f7fd fbec 	bl	8000e9c <__aeabi_fdiv>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461c      	mov	r4, r3
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036cc:	f7fd fbe6 	bl	8000e9c <__aeabi_fdiv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4619      	mov	r1, r3
 80036d4:	4620      	mov	r0, r4
 80036d6:	f7fe fd45 	bl	8002164 <_ZSt5atan2ff>
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036e0:	f7fd fb28 	bl	8000d34 <__aeabi_fmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);



	euler_angles.yaw = yaw;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	609a      	str	r2, [r3, #8]

	return euler_angles;
 80036ee:	bf00      	nop

}
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	3738      	adds	r7, #56	; 0x38
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}

080036f8 <_Z6squaref>:

float square(float x) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fb16 	bl	8000d34 <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]
	return y;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <_Z6PWMYazv>:

void PWMYaz() {
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <_Z6PWMYazv+0xdc>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d04f      	beq.n	80037c4 <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <_Z6PWMYazv+0xe0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d014      	beq.n	8003756 <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 800372c:	4b33      	ldr	r3, [pc, #204]	; (80037fc <_Z6PWMYazv+0xe4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f240 5214 	movw	r2, #1300	; 0x514
 8003734:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <_Z6PWMYazv+0xe4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f240 5214 	movw	r2, #1300	; 0x514
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <_Z6PWMYazv+0xe4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f240 5214 	movw	r2, #1300	; 0x514
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <_Z6PWMYazv+0xe4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f240 5214 	movw	r2, #1300	; 0x514
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 8003754:	e04a      	b.n	80037ec <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <_Z6PWMYazv+0xe8>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f240 52db 	movw	r2, #1499	; 0x5db
 800375e:	4293      	cmp	r3, r2
 8003760:	dc1b      	bgt.n	800379a <_Z6PWMYazv+0x82>
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <_Z6PWMYazv+0xe8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f240 424c 	movw	r2, #1100	; 0x44c
 800376a:	4293      	cmp	r3, r2
 800376c:	dd15      	ble.n	800379a <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 800376e:	4b25      	ldr	r3, [pc, #148]	; (8003804 <_Z6PWMYazv+0xec>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <_Z6PWMYazv+0xe4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <_Z6PWMYazv+0xec>)
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <_Z6PWMYazv+0xe4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <_Z6PWMYazv+0xec>)
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <_Z6PWMYazv+0xe4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <_Z6PWMYazv+0xec>)
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <_Z6PWMYazv+0xe4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
 8003796:	bf00      	nop
}
 8003798:	e028      	b.n	80037ec <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <_Z6PWMYazv+0xe4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037c2:	e013      	b.n	80037ec <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <_Z6PWMYazv+0xe4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	200016d9 	.word	0x200016d9
 80037f8:	2000177e 	.word	0x2000177e
 80037fc:	200019f0 	.word	0x200019f0
 8003800:	20001670 	.word	0x20001670
 8003804:	20001640 	.word	0x20001640

08003808 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003822:	da12      	bge.n	800384a <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fcc2 	bl	80031b0 <_Z7GyroOkuh>
 800382c:	4603      	mov	r3, r0
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fa2c 	bl	8000c8c <__aeabi_i2f>
 8003834:	4603      	mov	r3, r0
 8003836:	4619      	mov	r1, r3
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7fd f973 	bl	8000b24 <__addsf3>
 800383e:	4603      	mov	r3, r0
 8003840:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	e7e8      	b.n	800381c <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800384a:	4905      	ldr	r1, [pc, #20]	; (8003860 <_Z7GyroErrh+0x58>)
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7fd fb25 	bl	8000e9c <__aeabi_fdiv>
 8003852:	4603      	mov	r3, r0
 8003854:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	44fa0000 	.word	0x44fa0000

08003864 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800387e:	da12      	bge.n	80038a6 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fd1a 	bl	80032bc <_Z6AccOkuh>
 8003888:	4603      	mov	r3, r0
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd f9fe 	bl	8000c8c <__aeabi_i2f>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7fd f945 	bl	8000b24 <__addsf3>
 800389a:	4603      	mov	r3, r0
 800389c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	e7e8      	b.n	8003878 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80038a6:	4905      	ldr	r1, [pc, #20]	; (80038bc <_Z6AccErrh+0x58>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7fd faf7 	bl	8000e9c <__aeabi_fdiv>
 80038ae:	4603      	mov	r3, r0
 80038b0:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	44fa0000 	.word	0x44fa0000

080038c0 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <_Z11MotorBaslatv+0x38>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <_Z11MotorBaslatv+0x38>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <_Z11MotorBaslatv+0x38>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <_Z11MotorBaslatv+0x38>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80038ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038f0:	f002 fd42 	bl	8006378 <HAL_Delay>
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200019f0 	.word	0x200019f0
 80038fc:	00000000 	.word	0x00000000

08003900 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	b0b3      	sub	sp, #204	; 0xcc
 8003906:	af0c      	add	r7, sp, #48	; 0x30
 8003908:	6378      	str	r0, [r7, #52]	; 0x34

	if(htim == &htim2) {
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800390e:	4293      	cmp	r3, r2
 8003910:	f040 85e6 	bne.w	80044e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>
		//1.25 ms || 800 Hz
		Check_Arm();
 8003914:	f7ff f9b4 	bl	8002c80 <_Z9Check_Armv>
		Check_Disarm();
 8003918:	f7ff fa16 	bl	8002d48 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 800391c:	2014      	movs	r0, #20
 800391e:	f7fe fb6d 	bl	8001ffc <set_ucounter>
		set_b_counter(12);
 8003922:	200c      	movs	r0, #12
 8003924:	f7fe f88a 	bl	8001a3c <set_b_counter>

		controller_counter++;
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003932:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800393e:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 8003940:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800394a:	801a      	strh	r2, [r3, #0]

#ifdef UAV1


		if(mag_counter == MAG_CLOCK_RATE) {
 800394c:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d14e      	bne.n	80039f2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			mag_counter = 0;
 8003954:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003956:	2200      	movs	r2, #0
 8003958:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 800395a:	4a45      	ldr	r2, [pc, #276]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800395c:	4945      	ldr	r1, [pc, #276]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800395e:	4846      	ldr	r0, [pc, #280]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003960:	f7fd fc74 	bl	800124c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8003964:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396a:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800396c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8003970:	4a3f      	ldr	r2, [pc, #252]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003972:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe ffae 	bl	80028d8 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 800397c:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800397e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003982:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			mag[1] = MAG_Y_CALIB;
 8003986:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			mag[2] = MAG_Z_CALIB;
 8003990:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003996:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

			int16_t acc[3];
			acc[0] = accX;
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fba4 	bl	80010ec <__aeabi_f2iz>
 80039a4:	4603      	mov	r3, r0
 80039a6:	b21b      	sxth	r3, r3
 80039a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			acc[1] = accY;
 80039ac:	4b37      	ldr	r3, [pc, #220]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd fb9b 	bl	80010ec <__aeabi_f2iz>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			acc[2] = accZ;
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fb92 	bl	80010ec <__aeabi_f2iz>
 80039c8:	4603      	mov	r3, r0
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			euler_angles = DCM2Euler(acc, mag);
 80039d0:	4c30      	ldr	r4, [pc, #192]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80039d2:	f107 0320 	add.w	r3, r7, #32
 80039d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80039da:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fca2 	bl	8003328 <_Z9DCM2EulerPsS_>
 80039e4:	4623      	mov	r3, r4
 80039e6:	f107 0220 	add.w	r2, r7, #32
 80039ea:	6810      	ldr	r0, [r2, #0]
 80039ec:	6851      	ldr	r1, [r2, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	c307      	stmia	r3!, {r0, r1, r2}


		}

		if(camera_counter == 40) {
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	2b28      	cmp	r3, #40	; 0x28
 80039f8:	d125      	bne.n	8003a46 <HAL_TIM_PeriodElapsedCallback+0x146>
			  camera_counter = 0;
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a06:	c303      	stmia	r3!, {r0, r1}
 8003a08:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003a0c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd f93a 	bl	8000c8c <__aeabi_i2f>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd fa3d 	bl	8000e9c <__aeabi_fdiv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003a28:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

			  if(!cam_data.detected) {
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0x13e>
				  EKF.Qc = 9e9;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003a36:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003a38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8003a3c:	e003      	b.n	8003a46 <HAL_TIM_PeriodElapsedCallback+0x146>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 8003a3e:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003a40:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003a42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
			  }
		}

		if(get_ucounter() == 1) {
 8003a46:	f7fe faf3 	bl	8002030 <get_ucounter>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02a      	beq.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			request_range();
 8003a5a:	f7fe fa95 	bl	8001f88 <request_range>
 8003a5e:	e0ee      	b.n	8003c3e <HAL_TIM_PeriodElapsedCallback+0x33e>
 8003a60:	20001a38 	.word	0x20001a38
 8003a64:	200016f4 	.word	0x200016f4
 8003a68:	200016f6 	.word	0x200016f6
 8003a6c:	200016f8 	.word	0x200016f8
 8003a70:	20001774 	.word	0x20001774
 8003a74:	20001772 	.word	0x20001772
 8003a78:	20001770 	.word	0x20001770
 8003a7c:	20001776 	.word	0x20001776
 8003a80:	20001778 	.word	0x20001778
 8003a84:	2000177a 	.word	0x2000177a
 8003a88:	200008d8 	.word	0x200008d8
 8003a8c:	200008dc 	.word	0x200008dc
 8003a90:	200008e0 	.word	0x200008e0
 8003a94:	20001764 	.word	0x20001764
 8003a98:	20001758 	.word	0x20001758
 8003a9c:	2000174c 	.word	0x2000174c
 8003aa0:	42c80000 	.word	0x42c80000
 8003aa4:	20000ca8 	.word	0x20000ca8
 8003aa8:	50061c46 	.word	0x50061c46
 8003aac:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003ab0:	f7fe fabe 	bl	8002030 <get_ucounter>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b14      	cmp	r3, #20
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80bc 	beq.w	8003c3e <HAL_TIM_PeriodElapsedCallback+0x33e>

		  sonar_range = getRange();
 8003ac6:	f7fe fa79 	bl	8001fbc <getRange>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b72      	ldr	r3, [pc, #456]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003ad0:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8003ad2:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a72      	ldr	r2, [pc, #456]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003ad8:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a72      	ldr	r2, [pc, #456]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003ae0:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8003ae2:	4b72      	ldr	r3, [pc, #456]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4972      	ldr	r1, [pc, #456]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f923 	bl	8000d34 <__aeabi_fmul>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fb13 	bl	800211c <_ZSt3absf>
 8003af6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8003afa:	4b6c      	ldr	r3, [pc, #432]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	496c      	ldr	r1, [pc, #432]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd f917 	bl	8000d34 <__aeabi_fmul>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb07 	bl	800211c <_ZSt3absf>
 8003b0e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 8003b12:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f8b4 	bl	8000c84 <__aeabi_ui2f>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fc7a 	bl	8000418 <__aeabi_f2d>
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4b62      	ldr	r3, [pc, #392]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8003b2a:	f7fc fdf7 	bl	800071c <__aeabi_ddiv>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4614      	mov	r4, r2
 8003b34:	461d      	mov	r5, r3
 8003b36:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003b3a:	f7fe f961 	bl	8001e00 <_ZSt3cosf>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fc69 	bl	8000418 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f7fc fcbb 	bl	80004c8 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4614      	mov	r4, r2
 8003b58:	461d      	mov	r5, r3
 8003b5a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003b5e:	f7fe f94f 	bl	8001e00 <_ZSt3cosf>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fc57 	bl	8000418 <__aeabi_f2d>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7fc fca9 	bl	80004c8 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fc ff7b 	bl	8000a78 <__aeabi_d2f>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4a45      	ldr	r2, [pc, #276]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003b86:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8003b88:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8003b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc ffc0 	bl	8000b20 <__aeabi_fsub>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd f978 	bl	8000e9c <__aeabi_fdiv>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003bb2:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe faaf 	bl	800211c <_ZSt3absf>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	493c      	ldr	r1, [pc, #240]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fa70 	bl	80010ac <__aeabi_fcmpgt>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PeriodElapsedCallback+0x2d6>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	b2e3      	uxtb	r3, r4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_TIM_PeriodElapsedCallback+0x2ec>
			  sonar_alt = sonar_alt_;
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003be2:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003bea:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4932      	ldr	r1, [pc, #200]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fa5a 	bl	80010ac <__aeabi_fcmpgt>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc08 	bl	8000418 <__aeabi_f2d>
 8003c08:	a321      	add	r3, pc, #132	; (adr r3, 8003c90 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fecd 	bl	80009ac <__aeabi_dcmplt>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_TIM_PeriodElapsedCallback+0x32a>
			  EKF.Qs = 9e9;
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8003c1a:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8003c1c:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 50;
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8003c22:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8003c24:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8003c28:	e009      	b.n	8003c3e <HAL_TIM_PeriodElapsedCallback+0x33e>
		  }

		  else {
			  EKF.Qs = 0.25;
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8003c2c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003c30:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 1;
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8003c36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c3a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		  }


		}

		if(get_b_counter() == 1) {
 8003c3e:	f7fd fef3 	bl	8001a28 <get_b_counter>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_TIM_PeriodElapsedCallback+0x358>
			write_ut();
 8003c52:	f7fd fce7 	bl	8001624 <write_ut>
 8003c56:	e069      	b.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0x42c>
		}

		else if(get_b_counter() == 5) { //5 ms
 8003c58:	f7fd fee6 	bl	8001a28 <get_b_counter>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d031      	beq.n	8003cd0 <HAL_TIM_PeriodElapsedCallback+0x3d0>
			bmp.uncomp.temp = read_ut ();
 8003c6c:	f7fd fcf2 	bl	8001654 <read_ut>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f80a 	bl	8000c8c <__aeabi_i2f>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003c7c:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8003c7e:	4813      	ldr	r0, [pc, #76]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003c80:	f7fd fd02 	bl	8001688 <get_temp>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8003c88:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8003c8a:	f7fd fd55 	bl	8001738 <write_up>
 8003c8e:	e04d      	b.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0x42c>
 8003c90:	33333333 	.word	0x33333333
 8003c94:	3fd33333 	.word	0x3fd33333
 8003c98:	200016f0 	.word	0x200016f0
 8003c9c:	200016e0 	.word	0x200016e0
 8003ca0:	200016e4 	.word	0x200016e4
 8003ca4:	200016e8 	.word	0x200016e8
 8003ca8:	200016ec 	.word	0x200016ec
 8003cac:	20000938 	.word	0x20000938
 8003cb0:	3c8e8a72 	.word	0x3c8e8a72
 8003cb4:	40590000 	.word	0x40590000
 8003cb8:	40e00000 	.word	0x40e00000
 8003cbc:	40c00000 	.word	0x40c00000
 8003cc0:	20000ca8 	.word	0x20000ca8
 8003cc4:	50061c46 	.word	0x50061c46
 8003cc8:	42480000 	.word	0x42480000
 8003ccc:	200016fc 	.word	0x200016fc
		}

		else if(get_b_counter() == 12) { //
 8003cd0:	f7fd feaa 	bl	8001a28 <get_b_counter>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d023      	beq.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0x42c>
			bmp.uncomp.press = read_up (bmp.oss);
 8003ce4:	4ba6      	ldr	r3, [pc, #664]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003ce6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ce8:	f7fd fd46 	bl	8001778 <read_up>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4aa4      	ldr	r2, [pc, #656]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003cf0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8003cf2:	4ea3      	ldr	r6, [pc, #652]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003cf4:	466d      	mov	r5, sp
 8003cf6:	f106 0410 	add.w	r4, r6, #16
 8003cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003d06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003d0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d0e:	f7fd fd61 	bl	80017d4 <get_pressure>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a9a      	ldr	r2, [pc, #616]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003d16:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8003d18:	4899      	ldr	r0, [pc, #612]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003d1a:	f7fd fe29 	bl	8001970 <get_altitude>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a97      	ldr	r2, [pc, #604]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003d22:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8003d24:	4b96      	ldr	r3, [pc, #600]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	4a96      	ldr	r2, [pc, #600]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8003d2a:	6013      	str	r3, [r2, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8003d2c:	4b96      	ldr	r3, [pc, #600]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 83d5 	bne.w	80044e0 <HAL_TIM_PeriodElapsedCallback+0xbe0>
			_controller_timer = controller_timer;
 8003d36:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a95      	ldr	r2, [pc, #596]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003d3c:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8003d3e:	f002 fb11 	bl	8006364 <HAL_GetTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b91      	ldr	r3, [pc, #580]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003d48:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8003d4a:	4b90      	ldr	r3, [pc, #576]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	4a8f      	ldr	r2, [pc, #572]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003d56:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 8003d58:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8003d5e:	201d      	movs	r0, #29
 8003d60:	f7ff fa26 	bl	80031b0 <_Z7GyroOkuh>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ff90 	bl	8000c8c <__aeabi_i2f>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b8a      	ldr	r3, [pc, #552]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f7fc fed3 	bl	8000b20 <__aeabi_fsub>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4987      	ldr	r1, [pc, #540]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f88c 	bl	8000e9c <__aeabi_fdiv>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b85      	ldr	r3, [pc, #532]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003d8a:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8003d8c:	201f      	movs	r0, #31
 8003d8e:	f7ff fa0f 	bl	80031b0 <_Z7GyroOkuh>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc ff79 	bl	8000c8c <__aeabi_i2f>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b81      	ldr	r3, [pc, #516]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7fc febc 	bl	8000b20 <__aeabi_fsub>
 8003da8:	4603      	mov	r3, r0
 8003daa:	497c      	ldr	r1, [pc, #496]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd f875 	bl	8000e9c <__aeabi_fdiv>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003db8:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8003dba:	2021      	movs	r0, #33	; 0x21
 8003dbc:	f7ff f9f8 	bl	80031b0 <_Z7GyroOkuh>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc ff62 	bl	8000c8c <__aeabi_i2f>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b78      	ldr	r3, [pc, #480]	; (8003fac <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7fc fea5 	bl	8000b20 <__aeabi_fsub>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd f85e 	bl	8000e9c <__aeabi_fdiv>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b72      	ldr	r3, [pc, #456]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003de6:	601a      	str	r2, [r3, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/14.375;
		  //gyroX_a += gyroX_a_x * st;

#ifdef BMO_DEBUG
		  v = bno055_getVectorEuler();
 8003de8:	4c72      	ldr	r4, [pc, #456]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003dea:	463b      	mov	r3, r7
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd ffcc 	bl	8001d8a <bno055_getVectorEuler>
 8003df2:	4625      	mov	r5, r4
 8003df4:	463c      	mov	r4, r7
 8003df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003dfe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		  bno_dat.x = v.y+3;
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003e04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003e0e:	f7fc f9a5 	bl	800015c <__adddf3>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4969      	ldr	r1, [pc, #420]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8003e18:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  bno_dat.y = v.z-10;
 8003e1c:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003e1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	4b66      	ldr	r3, [pc, #408]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8003e28:	f7fc f996 	bl	8000158 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4962      	ldr	r1, [pc, #392]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8003e32:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  bno_dat.z = v.x;
 8003e36:	4b5f      	ldr	r3, [pc, #380]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003e38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e3c:	495f      	ldr	r1, [pc, #380]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8003e3e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		  bno055_vector_t gv = bno055_getVectorGyroscope();
 8003e42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd ff92 	bl	8001d70 <bno055_getVectorGyroscope>
		  bno_gyro.x = -gv.y;
 8003e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e50:	4692      	mov	sl, r2
 8003e52:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003e56:	4b5b      	ldr	r3, [pc, #364]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003e58:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		  bno_gyro.y = -gv.x;
 8003e5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e60:	4690      	mov	r8, r2
 8003e62:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003e66:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003e68:	e9c3 8904 	strd	r8, r9, [r3, #16]
		  bno_gyro.z =  gv.z;
 8003e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e70:	4954      	ldr	r1, [pc, #336]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003e72:	e9c1 2306 	strd	r2, r3, [r1, #24]
#endif

		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003e7c:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
		  EKF.gyro[1] = -1*gyroY;
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e88:	4a4f      	ldr	r2, [pc, #316]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003e8a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.gyro[2] = gyroZ;
 8003e8e:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003e94:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204


		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8003e98:	2032      	movs	r0, #50	; 0x32
 8003e9a:	f7ff fa0f 	bl	80032bc <_Z6AccOkuh>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fef3 	bl	8000c8c <__aeabi_i2f>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4a48      	ldr	r2, [pc, #288]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003eaa:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8003eac:	2034      	movs	r0, #52	; 0x34
 8003eae:	f7ff fa05 	bl	80032bc <_Z6AccOkuh>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fee9 	bl	8000c8c <__aeabi_i2f>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003ebe:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 8003ec0:	2036      	movs	r0, #54	; 0x36
 8003ec2:	f7ff f9fb 	bl	80032bc <_Z6AccOkuh>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fedf 	bl	8000c8c <__aeabi_i2f>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003ed2:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	493f      	ldr	r1, [pc, #252]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc ff2a 	bl	8000d34 <__aeabi_fmul>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	493e      	ldr	r1, [pc, #248]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc fe1b 	bl	8000b20 <__aeabi_fsub>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003ef0:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	493a      	ldr	r1, [pc, #232]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc ff1b 	bl	8000d34 <__aeabi_fmul>
 8003efe:	4603      	mov	r3, r0
 8003f00:	4938      	ldr	r1, [pc, #224]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fe0e 	bl	8000b24 <__addsf3>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003f0e:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc ff0c 	bl	8000d34 <__aeabi_fmul>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4933      	ldr	r1, [pc, #204]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fdff 	bl	8000b24 <__addsf3>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003f2c:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc fa70 	bl	8000418 <__aeabi_f2d>
 8003f38:	a30f      	add	r3, pc, #60	; (adr r3, 8003f78 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc fac3 	bl	80004c8 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fd95 	bl	8000a78 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003f52:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003f54:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fa5d 	bl	8000418 <__aeabi_f2d>
 8003f5e:	a306      	add	r3, pc, #24	; (adr r3, 8003f78 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc fab0 	bl	80004c8 <__aeabi_dmul>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7fc fd82 	bl	8000a78 <__aeabi_d2f>
 8003f74:	4603      	mov	r3, r0
 8003f76:	e03d      	b.n	8003ff4 <HAL_TIM_PeriodElapsedCallback+0x6f4>
 8003f78:	8e8a71de 	.word	0x8e8a71de
 8003f7c:	3f7ff2e4 	.word	0x3f7ff2e4
 8003f80:	200016fc 	.word	0x200016fc
 8003f84:	200016dc 	.word	0x200016dc
 8003f88:	200016f4 	.word	0x200016f4
 8003f8c:	20001740 	.word	0x20001740
 8003f90:	20001744 	.word	0x20001744
 8003f94:	20001748 	.word	0x20001748
 8003f98:	200008fc 	.word	0x200008fc
 8003f9c:	41660000 	.word	0x41660000
 8003fa0:	200008cc 	.word	0x200008cc
 8003fa4:	20000900 	.word	0x20000900
 8003fa8:	200008d0 	.word	0x200008d0
 8003fac:	20000904 	.word	0x20000904
 8003fb0:	200008d4 	.word	0x200008d4
 8003fb4:	20001788 	.word	0x20001788
 8003fb8:	40080000 	.word	0x40080000
 8003fbc:	200017a8 	.word	0x200017a8
 8003fc0:	40240000 	.word	0x40240000
 8003fc4:	200017c8 	.word	0x200017c8
 8003fc8:	20000ca8 	.word	0x20000ca8
 8003fcc:	200008d8 	.word	0x200008d8
 8003fd0:	200008dc 	.word	0x200008dc
 8003fd4:	200008e0 	.word	0x200008e0
 8003fd8:	3f7f3b64 	.word	0x3f7f3b64
 8003fdc:	3efae148 	.word	0x3efae148
 8003fe0:	3f7e978d 	.word	0x3f7e978d
 8003fe4:	414d0a3d 	.word	0x414d0a3d
 8003fe8:	3f797f63 	.word	0x3f797f63
 8003fec:	404d1eb8 	.word	0x404d1eb8
 8003ff0:	200008e4 	.word	0x200008e4
 8003ff4:	4aa6      	ldr	r2, [pc, #664]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003ff6:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8003ff8:	4ba6      	ldr	r3, [pc, #664]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fa0b 	bl	8000418 <__aeabi_f2d>
 8004002:	a3a1      	add	r3, pc, #644	; (adr r3, 8004288 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fa5e 	bl	80004c8 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f7fc fd30 	bl	8000a78 <__aeabi_d2f>
 8004018:	4603      	mov	r3, r0
 800401a:	4a9f      	ldr	r2, [pc, #636]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800401c:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 800401e:	4b9f      	ldr	r3, [pc, #636]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a9f      	ldr	r2, [pc, #636]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8004024:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		  EKF.acc[1] = accY;// - AccYh;
 8004028:	4b9e      	ldr	r3, [pc, #632]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9c      	ldr	r2, [pc, #624]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800402e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		  EKF.acc[2] = accZ;// - AccZh;
 8004032:	4b98      	ldr	r3, [pc, #608]	; (8004294 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a9a      	ldr	r2, [pc, #616]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8004038:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		  //Check if healty acc

		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 800403c:	4b9a      	ldr	r3, [pc, #616]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800403e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8004042:	4b97      	ldr	r3, [pc, #604]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8004044:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004048:	4998      	ldr	r1, [pc, #608]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fe72 	bl	8000d34 <__aeabi_fmul>
 8004050:	4603      	mov	r3, r0
 8004052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8004056:	4b92      	ldr	r3, [pc, #584]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8004058:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800405c:	4993      	ldr	r1, [pc, #588]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fe68 	bl	8000d34 <__aeabi_fmul>
 8004064:	4603      	mov	r3, r0
 8004066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 800406a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800406e:	f7fd fed3 	bl	8001e18 <_ZSt3sinf>
 8004072:	67f8      	str	r0, [r7, #124]	; 0x7c
		  float gy = cos(pitch_r)*sin(roll_r);
 8004074:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004078:	f7fd fec2 	bl	8001e00 <_ZSt3cosf>
 800407c:	4604      	mov	r4, r0
 800407e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004082:	f7fd fec9 	bl	8001e18 <_ZSt3sinf>
 8004086:	4603      	mov	r3, r0
 8004088:	4619      	mov	r1, r3
 800408a:	4620      	mov	r0, r4
 800408c:	f7fc fe52 	bl	8000d34 <__aeabi_fmul>
 8004090:	4603      	mov	r3, r0
 8004092:	67bb      	str	r3, [r7, #120]	; 0x78
		  float gz = cos(roll_r)*cos(pitch_r);
 8004094:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004098:	f7fd feb2 	bl	8001e00 <_ZSt3cosf>
 800409c:	4604      	mov	r4, r0
 800409e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80040a2:	f7fd fead 	bl	8001e00 <_ZSt3cosf>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4619      	mov	r1, r3
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7fc fe42 	bl	8000d34 <__aeabi_fmul>
 80040b0:	4603      	mov	r3, r0
 80040b2:	677b      	str	r3, [r7, #116]	; 0x74



		  accXc -= gx;
 80040b4:	4b7e      	ldr	r3, [pc, #504]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fd30 	bl	8000b20 <__aeabi_fsub>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80040c6:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 80040c8:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fd26 	bl	8000b20 <__aeabi_fsub>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 80040da:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fd1c 	bl	8000b20 <__aeabi_fsub>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80040ee:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 80040f0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80040f4:	f7fd fe84 	bl	8001e00 <_ZSt3cosf>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b6d      	ldr	r3, [pc, #436]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f7fc fe17 	bl	8000d34 <__aeabi_fmul>
 8004106:	4603      	mov	r3, r0
 8004108:	461c      	mov	r4, r3
 800410a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800410e:	f7fd fe77 	bl	8001e00 <_ZSt3cosf>
 8004112:	4602      	mov	r2, r0
 8004114:	4b60      	ldr	r3, [pc, #384]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fc fe0a 	bl	8000d34 <__aeabi_fmul>
 8004120:	4603      	mov	r3, r0
 8004122:	461d      	mov	r5, r3
 8004124:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004128:	f7fd fe76 	bl	8001e18 <_ZSt3sinf>
 800412c:	4603      	mov	r3, r0
 800412e:	4619      	mov	r1, r3
 8004130:	4628      	mov	r0, r5
 8004132:	f7fc fdff 	bl	8000d34 <__aeabi_fmul>
 8004136:	4603      	mov	r3, r0
 8004138:	4619      	mov	r1, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f7fc fcf0 	bl	8000b20 <__aeabi_fsub>
 8004140:	4603      	mov	r3, r0
 8004142:	461c      	mov	r4, r3
 8004144:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004148:	f7fd fe66 	bl	8001e18 <_ZSt3sinf>
 800414c:	4602      	mov	r2, r0
 800414e:	4b50      	ldr	r3, [pc, #320]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fc fded 	bl	8000d34 <__aeabi_fmul>
 800415a:	4603      	mov	r3, r0
 800415c:	461d      	mov	r5, r3
 800415e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004162:	f7fd fe59 	bl	8001e18 <_ZSt3sinf>
 8004166:	4603      	mov	r3, r0
 8004168:	4619      	mov	r1, r3
 800416a:	4628      	mov	r0, r5
 800416c:	f7fc fde2 	bl	8000d34 <__aeabi_fmul>
 8004170:	4603      	mov	r3, r0
 8004172:	4619      	mov	r1, r3
 8004174:	4620      	mov	r0, r4
 8004176:	f7fc fcd3 	bl	8000b20 <__aeabi_fsub>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8004180:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8004182:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004186:	f7fd fe3b 	bl	8001e00 <_ZSt3cosf>
 800418a:	4602      	mov	r2, r0
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fc fdce 	bl	8000d34 <__aeabi_fmul>
 8004198:	4603      	mov	r3, r0
 800419a:	461c      	mov	r4, r3
 800419c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80041a0:	f7fd fe3a 	bl	8001e18 <_ZSt3sinf>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fc fdc1 	bl	8000d34 <__aeabi_fmul>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4619      	mov	r1, r3
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7fc fcb2 	bl	8000b20 <__aeabi_fsub>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80041c2:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 80041c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80041c8:	f7fd fe1a 	bl	8001e00 <_ZSt3cosf>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fc fdad 	bl	8000d34 <__aeabi_fmul>
 80041da:	4603      	mov	r3, r0
 80041dc:	461c      	mov	r4, r3
 80041de:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80041e2:	f7fd fe0d 	bl	8001e00 <_ZSt3cosf>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4619      	mov	r1, r3
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7fc fda2 	bl	8000d34 <__aeabi_fmul>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461c      	mov	r4, r3
 80041f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80041f8:	f7fd fe0e 	bl	8001e18 <_ZSt3sinf>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7fc fd95 	bl	8000d34 <__aeabi_fmul>
 800420a:	4603      	mov	r3, r0
 800420c:	4619      	mov	r1, r3
 800420e:	4620      	mov	r0, r4
 8004210:	f7fc fc88 	bl	8000b24 <__addsf3>
 8004214:	4603      	mov	r3, r0
 8004216:	461c      	mov	r4, r3
 8004218:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800421c:	f7fd fdf0 	bl	8001e00 <_ZSt3cosf>
 8004220:	4602      	mov	r2, r0
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fc fd83 	bl	8000d34 <__aeabi_fmul>
 800422e:	4603      	mov	r3, r0
 8004230:	461d      	mov	r5, r3
 8004232:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004236:	f7fd fdef 	bl	8001e18 <_ZSt3sinf>
 800423a:	4603      	mov	r3, r0
 800423c:	4619      	mov	r1, r3
 800423e:	4628      	mov	r0, r5
 8004240:	f7fc fd78 	bl	8000d34 <__aeabi_fmul>
 8004244:	4603      	mov	r3, r0
 8004246:	4619      	mov	r1, r3
 8004248:	4620      	mov	r0, r4
 800424a:	f7fc fc6b 	bl	8000b24 <__addsf3>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8004254:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc fd68 	bl	8000d34 <__aeabi_fmul>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fd5d 	bl	8000d34 <__aeabi_fmul>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x9c0>
 8004284:	f3af 8000 	nop.w
 8004288:	8e8a71de 	.word	0x8e8a71de
 800428c:	3f7ff2e4 	.word	0x3f7ff2e4
 8004290:	200008e8 	.word	0x200008e8
 8004294:	200008e0 	.word	0x200008e0
 8004298:	200008ec 	.word	0x200008ec
 800429c:	200008d8 	.word	0x200008d8
 80042a0:	20000ca8 	.word	0x20000ca8
 80042a4:	200008dc 	.word	0x200008dc
 80042a8:	411cf5c3 	.word	0x411cf5c3
 80042ac:	3c8e8a72 	.word	0x3c8e8a72
 80042b0:	200008e4 	.word	0x200008e4
 80042b4:	200008f0 	.word	0x200008f0
 80042b8:	200008f4 	.word	0x200008f4
 80042bc:	200008f8 	.word	0x200008f8
 80042c0:	4b8a      	ldr	r3, [pc, #552]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0xbec>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc fd33 	bl	8000d34 <__aeabi_fmul>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0xbec>)
 80042d4:	601a      	str	r2, [r3, #0]

		  EKF.acc_vert = accZm;
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0xbec>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a85      	ldr	r2, [pc, #532]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80042dc:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 80042e0:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80042e6:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.accYm = accYm;
 80042ea:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a80      	ldr	r2, [pc, #512]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80042f0:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
//		  EKF.acc_pos_x = accXm;
//		  EKF.acc_pos_y = -accYm;

		  EKF.sonar_alt = sonar_alt;
 80042f4:	4b81      	ldr	r3, [pc, #516]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7d      	ldr	r2, [pc, #500]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80042fa:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.baro_alt = baro_alt;
 80042fe:	4b80      	ldr	r3, [pc, #512]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7b      	ldr	r2, [pc, #492]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004304:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c

//		  yaw_comp_prev = yaw_comp;
//		  yaw_comp = comp_filter(yaw_comp_prev, gyroZ, -1*euler_angles.yaw, EKF.armed);
//		  if(EKF.armed)
//			  yaw_unwrapped = unwrap_yaw2(yaw_comp, yaw_comp_prev);
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004310:	4a77      	ldr	r2, [pc, #476]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004312:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc

		  EKF.Run();
 8004316:	4876      	ldr	r0, [pc, #472]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004318:	f009 fbfe 	bl	800db18 <_ZN15Kalman_Filtresi3RunEv>


		  state.angles[0]  	  = EKF.state.angles[0];
 800431c:	4b74      	ldr	r3, [pc, #464]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800431e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004322:	4a79      	ldr	r2, [pc, #484]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004324:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004328:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800432c:	4a76      	ldr	r2, [pc, #472]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800432e:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8004330:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004332:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004336:	4a74      	ldr	r2, [pc, #464]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004338:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 800433a:	4b6d      	ldr	r3, [pc, #436]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800433c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004340:	4a71      	ldr	r2, [pc, #452]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004342:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8004344:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004346:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800434a:	4a6f      	ldr	r2, [pc, #444]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800434c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 800434e:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004350:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004354:	4a6c      	ldr	r2, [pc, #432]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8004356:	6153      	str	r3, [r2, #20]
//
//		  state.rates[0] = bno_gyro.x;
//		  state.rates[1] = bno_gyro.y;
//		  state.rates[2] = bno_gyro.z;

		   checkMode(ch[MOD_CH-1]);
 8004358:	4b6c      	ldr	r3, [pc, #432]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fbbf 	bl	8002ae0 <_Z9checkModei>

		   controller.z_vel = EKF.vz;
 8004362:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004364:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8004368:	4a69      	ldr	r2, [pc, #420]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800436a:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		   controller.z = EKF.alt_gnd;
 800436e:	4b60      	ldr	r3, [pc, #384]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004370:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8004374:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004376:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
//		   controller.x     = EKF.x;
//
//		   controller.vy	 = EKF.vy;
//		   controller.y     = EKF.y;

		  controller.state = state;
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800437c:	4a62      	ldr	r2, [pc, #392]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800437e:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8004382:	4615      	mov	r5, r2
 8004384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800438a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8004390:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004392:	4a60      	ldr	r2, [pc, #384]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8004394:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8004398:	4615      	mov	r5, r2
 800439a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 80043a6:	4b59      	ldr	r3, [pc, #356]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc fc6e 	bl	8000c8c <__aeabi_i2f>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043b4:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		  controller.ch2 = ch[1];
 80043b8:	4b54      	ldr	r3, [pc, #336]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc fc65 	bl	8000c8c <__aeabi_i2f>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4a52      	ldr	r2, [pc, #328]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043c6:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
		  controller.ch1 = ch[0];
 80043ca:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fc5c 	bl	8000c8c <__aeabi_i2f>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043d8:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
		  controller.Run();
 80043dc:	484c      	ldr	r0, [pc, #304]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043de:	f007 fe07 	bl	800bff0 <_ZN10Controller3RunEv>



		  controller_output[0] = controller.controller_output_pwm[0];
 80043e2:	4b4b      	ldr	r3, [pc, #300]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80043e8:	4a4b      	ldr	r2, [pc, #300]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80043ea:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 80043ec:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043ee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80043f2:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80043f4:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 80043f6:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80043f8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80043fc:	4a46      	ldr	r2, [pc, #280]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80043fe:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8004400:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004402:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004406:	4a44      	ldr	r2, [pc, #272]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8004408:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 800440a:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d031      	beq.n	8004476 <HAL_TIM_PeriodElapsedCallback+0xb76>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8004412:	4b3e      	ldr	r3, [pc, #248]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f240 52db 	movw	r2, #1499	; 0x5db
 800441a:	4293      	cmp	r3, r2
 800441c:	dc1a      	bgt.n	8004454 <HAL_TIM_PeriodElapsedCallback+0xb54>
 800441e:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f240 424c 	movw	r2, #1100	; 0x44c
 8004426:	4293      	cmp	r3, r2
 8004428:	dd14      	ble.n	8004454 <HAL_TIM_PeriodElapsedCallback+0xb54>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800442c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004430:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004432:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004436:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800443c:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004440:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004446:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800444a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800444e:	4a34      	ldr	r2, [pc, #208]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004450:	60d3      	str	r3, [r2, #12]
 8004452:	e020      	b.n	8004496 <HAL_TIM_PeriodElapsedCallback+0xb96>

			  }

			  else {
				  controller_output_2[0] = 1000;
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445a:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 800445c:	4b30      	ldr	r3, [pc, #192]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800445e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004462:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 8004464:	4b2e      	ldr	r3, [pc, #184]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800446a:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800446e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e00f      	b.n	8004496 <HAL_TIM_PeriodElapsedCallback+0xb96>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 8004476:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800447c:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004484:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800448c:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8004490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004494:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 8004498:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800449e:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 80044a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80044a8:	6113      	str	r3, [r2, #16]


		  TelemPack();
 80044aa:	f7fe fc9f 	bl	8002dec <_Z9TelemPackv>
		  CheckFailsafe();
 80044ae:	f7fe fb89 	bl	8002bc4 <_Z13CheckFailsafev>
		  CheckSwarm();
 80044b2:	f7fe fb47 	bl	8002b44 <_Z10CheckSwarmv>
		  PWMYaz();
 80044b6:	f7ff f92f 	bl	8003718 <_Z6PWMYazv>

		#ifdef UAV1
		  	  	//Pack motor outputs to nrf24 buffer.
		  	  	char nrf_buf[sizeof(struct pwm)];
		  	  	memcpy(nrf_buf,&telem_pack.pwm2,sizeof(struct pwm));
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80044bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044c0:	f202 1205 	addw	r2, r2, #261	; 0x105
 80044c4:	6810      	ldr	r0, [r2, #0]
 80044c6:	6851      	ldr	r1, [r2, #4]
 80044c8:	c303      	stmia	r3!, {r0, r1}
				NRF24_write(nrf_buf, sizeof(struct pwm));
 80044ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044ce:	2108      	movs	r1, #8
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fb57 	bl	8004b84 <NRF24_write>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80044d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044da:	4813      	ldr	r0, [pc, #76]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80044dc:	f002 fc7e 	bl	8006ddc <HAL_GPIO_TogglePin>
		  //SwitchMag();

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 80044e0:	bf00      	nop
 80044e2:	379c      	adds	r7, #156	; 0x9c
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	200008f8 	.word	0x200008f8
 80044f0:	20000ca8 	.word	0x20000ca8
 80044f4:	200008f0 	.word	0x200008f0
 80044f8:	200008f4 	.word	0x200008f4
 80044fc:	200016e0 	.word	0x200016e0
 8004500:	200016dc 	.word	0x200016dc
 8004504:	20001764 	.word	0x20001764
 8004508:	20000938 	.word	0x20000938
 800450c:	20001670 	.word	0x20001670
 8004510:	20000ff0 	.word	0x20000ff0
 8004514:	20000914 	.word	0x20000914
 8004518:	20001640 	.word	0x20001640
 800451c:	200016d9 	.word	0x200016d9
 8004520:	20001650 	.word	0x20001650
 8004524:	2000095c 	.word	0x2000095c
 8004528:	40011000 	.word	0x40011000

0800452c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a55      	ldr	r2, [pc, #340]	; (800468c <HAL_TIM_IC_CaptureCallback+0x160>)
 8004538:	4293      	cmp	r3, r2
 800453a:	f040 80a2 	bne.w	8004682 <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7f1b      	ldrb	r3, [r3, #28]
 8004542:	2b04      	cmp	r3, #4
 8004544:	f040 809d 	bne.w	8004682 <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8004548:	4b51      	ldr	r3, [pc, #324]	; (8004690 <HAL_TIM_IC_CaptureCallback+0x164>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a51      	ldr	r2, [pc, #324]	; (8004694 <HAL_TIM_IC_CaptureCallback+0x168>)
 800454e:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8004550:	2108      	movs	r1, #8
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f006 f902 	bl	800a75c <HAL_TIM_ReadCapturedValue>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	4b4c      	ldr	r3, [pc, #304]	; (8004690 <HAL_TIM_IC_CaptureCallback+0x164>)
 800455e:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	4a4b      	ldr	r2, [pc, #300]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800456c:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	0fdb      	lsrs	r3, r3, #31
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d006      	beq.n	8004588 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004582:	33ff      	adds	r3, #255	; 0xff
 8004584:	4a44      	ldr	r2, [pc, #272]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004586:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004590:	db06      	blt.n	80045a0 <HAL_TIM_IC_CaptureCallback+0x74>
 8004592:	4b41      	ldr	r3, [pc, #260]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800459a:	dc01      	bgt.n	80045a0 <HAL_TIM_IC_CaptureCallback+0x74>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_TIM_IC_CaptureCallback+0x76>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01c      	beq.n	80045e0 <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b21b      	sxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 80045b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_TIM_IC_CaptureCallback+0x178>)
 80045be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b21b      	sxth	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a34      	ldr	r2, [pc, #208]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 80045d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 80045d4:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e015      	b.n	800460c <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 80045e0:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bfcc      	ite	gt
 80045ec:	2301      	movgt	r3, #1
 80045ee:	2300      	movle	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 80045f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045fc:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 80045fe:	4b26      	ldr	r3, [pc, #152]	; (8004698 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004604:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8004606:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_TIM_IC_CaptureCallback+0x180>)
 8004608:	2201      	movs	r2, #1
 800460a:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fdee 	bl	80031f4 <_Z7pwm2angt>
 8004618:	4603      	mov	r3, r0
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x184>)
 800461c:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b29b      	uxth	r3, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fde5 	bl	80031f4 <_Z7pwm2angt>
 800462a:	4603      	mov	r3, r0
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x184>)
 800462e:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	b29b      	uxth	r3, r3
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fe14 	bl	800326c <_Z8pwm2ratet>
 8004644:	4603      	mov	r3, r0
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8004648:	6153      	str	r3, [r2, #20]

				i++;
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b21b      	sxth	r3, r3
 8004650:	b29b      	uxth	r3, r3
 8004652:	3301      	adds	r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	b21a      	sxth	r2, r3
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 800465a:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b21b      	sxth	r3, r3
 8004662:	4619      	mov	r1, r3
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <HAL_TIM_IC_CaptureCallback+0x188>)
 8004666:	fb83 2301 	smull	r2, r3, r3, r1
 800466a:	105a      	asrs	r2, r3, #1
 800466c:	17cb      	asrs	r3, r1, #31
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	1aca      	subs	r2, r1, r3
 800467c:	b212      	sxth	r2, r2
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_TIM_IC_CaptureCallback+0x170>)
 8004680:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200019a8 	.word	0x200019a8
 8004690:	20001660 	.word	0x20001660
 8004694:	20001664 	.word	0x20001664
 8004698:	20001668 	.word	0x20001668
 800469c:	2000166c 	.word	0x2000166c
 80046a0:	20001670 	.word	0x20001670
 80046a4:	2000169c 	.word	0x2000169c
 80046a8:	2000173c 	.word	0x2000173c
 80046ac:	200016c8 	.word	0x200016c8
 80046b0:	20000914 	.word	0x20000914
 80046b4:	2e8ba2e9 	.word	0x2e8ba2e9

080046b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046bc:	b672      	cpsid	i
}
 80046be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046c0:	e7fe      	b.n	80046c0 <Error_Handler+0x8>
	...

080046c4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10a      	bne.n	80046ea <_Z41__static_initialization_and_destruction_0ii+0x26>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046da:	4293      	cmp	r3, r2
 80046dc:	d105      	bne.n	80046ea <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 80046de:	480c      	ldr	r0, [pc, #48]	; (8004710 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80046e0:	f008 fa6a 	bl	800cbb8 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80046e4:	480b      	ldr	r0, [pc, #44]	; (8004714 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80046e6:	f007 fb87 	bl	800bdf8 <_ZN10ControllerC1Ev>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d105      	bne.n	8004706 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80046fa:	4806      	ldr	r0, [pc, #24]	; (8004714 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80046fc:	f008 fa20 	bl	800cb40 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 8004700:	4803      	ldr	r0, [pc, #12]	; (8004710 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004702:	f009 fa71 	bl	800dbe8 <_ZN15Kalman_FiltresiD1Ev>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000ca8 	.word	0x20000ca8
 8004714:	20000ff0 	.word	0x20000ff0

08004718 <_GLOBAL__sub_I__bno055_i2c_port>:
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
 800471c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004720:	2001      	movs	r0, #1
 8004722:	f7ff ffcf 	bl	80046c4 <_Z41__static_initialization_and_destruction_0ii>
 8004726:	bd80      	pop	{r7, pc}

08004728 <_GLOBAL__sub_D__bno055_i2c_port>:
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
 800472c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004730:	2000      	movs	r0, #0
 8004732:	f7ff ffc7 	bl	80046c4 <_Z41__static_initialization_and_destruction_0ii>
 8004736:	bd80      	pop	{r7, pc}

08004738 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <NRF24_DelayMicroSeconds+0x38>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <NRF24_DelayMicroSeconds+0x3c>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9a      	lsrs	r2, r3, #18
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8004758:	bf00      	nop
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1fa      	bne.n	800475a <NRF24_DelayMicroSeconds+0x22>
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	20000018 	.word	0x20000018
 8004774:	165e9f81 	.word	0x165e9f81

08004778 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <NRF24_csn+0x20>
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <NRF24_csn+0x38>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <NRF24_csn+0x3c>)
 800478c:	8811      	ldrh	r1, [r2, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f002 fb0b 	bl	8006dac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8004796:	e007      	b.n	80047a8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <NRF24_csn+0x38>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <NRF24_csn+0x3c>)
 800479e:	8811      	ldrh	r1, [r2, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 fb02 	bl	8006dac <HAL_GPIO_WritePin>
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200017fc 	.word	0x200017fc
 80047b4:	20001800 	.word	0x20001800

080047b8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <NRF24_ce+0x20>
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <NRF24_ce+0x38>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <NRF24_ce+0x3c>)
 80047cc:	8811      	ldrh	r1, [r2, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 faeb 	bl	8006dac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80047d6:	e007      	b.n	80047e8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <NRF24_ce+0x38>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <NRF24_ce+0x3c>)
 80047de:	8811      	ldrh	r1, [r2, #0]
 80047e0:	2200      	movs	r2, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 fae2 	bl	8006dac <HAL_GPIO_WritePin>
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	200017fc 	.word	0x200017fc
 80047f4:	20001802 	.word	0x20001802

080047f8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8004802:	2000      	movs	r0, #0
 8004804:	f7ff ffb8 	bl	8004778 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	b2db      	uxtb	r3, r3
 8004810:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004812:	f107 010c 	add.w	r1, r7, #12
 8004816:	2364      	movs	r3, #100	; 0x64
 8004818:	2201      	movs	r2, #1
 800481a:	480a      	ldr	r0, [pc, #40]	; (8004844 <NRF24_read_register+0x4c>)
 800481c:	f004 fc5c 	bl	80090d8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	2364      	movs	r3, #100	; 0x64
 8004828:	2201      	movs	r2, #1
 800482a:	4806      	ldr	r0, [pc, #24]	; (8004844 <NRF24_read_register+0x4c>)
 800482c:	f004 fd90 	bl	8009350 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8004830:	7b7b      	ldrb	r3, [r7, #13]
 8004832:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8004834:	2001      	movs	r0, #1
 8004836:	f7ff ff9f 	bl	8004778 <NRF24_csn>
	return retData;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20001804 	.word	0x20001804

08004848 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
 8004854:	4613      	mov	r3, r2
 8004856:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004858:	2000      	movs	r0, #0
 800485a:	f7ff ff8d 	bl	8004778 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	b2db      	uxtb	r3, r3
 8004866:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004868:	f107 010c 	add.w	r1, r7, #12
 800486c:	2364      	movs	r3, #100	; 0x64
 800486e:	2201      	movs	r2, #1
 8004870:	4808      	ldr	r0, [pc, #32]	; (8004894 <NRF24_read_registerN+0x4c>)
 8004872:	f004 fc31 	bl	80090d8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8004876:	79bb      	ldrb	r3, [r7, #6]
 8004878:	b29a      	uxth	r2, r3
 800487a:	2364      	movs	r3, #100	; 0x64
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <NRF24_read_registerN+0x4c>)
 8004880:	f004 fd66 	bl	8009350 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8004884:	2001      	movs	r0, #1
 8004886:	f7ff ff77 	bl	8004778 <NRF24_csn>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20001804 	.word	0x20001804

08004898 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	460a      	mov	r2, r1
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7ff ff65 	bl	8004778 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80048b8:	79bb      	ldrb	r3, [r7, #6]
 80048ba:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80048bc:	f107 010c 	add.w	r1, r7, #12
 80048c0:	2364      	movs	r3, #100	; 0x64
 80048c2:	2202      	movs	r2, #2
 80048c4:	4804      	ldr	r0, [pc, #16]	; (80048d8 <NRF24_write_register+0x40>)
 80048c6:	f004 fc07 	bl	80090d8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7ff ff54 	bl	8004778 <NRF24_csn>
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20001804 	.word	0x20001804

080048dc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
 80048e8:	4613      	mov	r3, r2
 80048ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7ff ff43 	bl	8004778 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80048fc:	f107 010c 	add.w	r1, r7, #12
 8004900:	2364      	movs	r3, #100	; 0x64
 8004902:	2201      	movs	r2, #1
 8004904:	4808      	ldr	r0, [pc, #32]	; (8004928 <NRF24_write_registerN+0x4c>)
 8004906:	f004 fbe7 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800490a:	79bb      	ldrb	r3, [r7, #6]
 800490c:	b29a      	uxth	r2, r3
 800490e:	2364      	movs	r3, #100	; 0x64
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4805      	ldr	r0, [pc, #20]	; (8004928 <NRF24_write_registerN+0x4c>)
 8004914:	f004 fbe0 	bl	80090d8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8004918:	2001      	movs	r0, #1
 800491a:	f7ff ff2d 	bl	8004778 <NRF24_csn>
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20001804 	.word	0x20001804

0800492c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8004938:	2000      	movs	r0, #0
 800493a:	f7ff ff1d 	bl	8004778 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800493e:	23a0      	movs	r3, #160	; 0xa0
 8004940:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8004942:	f107 010f 	add.w	r1, r7, #15
 8004946:	2364      	movs	r3, #100	; 0x64
 8004948:	2201      	movs	r2, #1
 800494a:	4808      	ldr	r0, [pc, #32]	; (800496c <NRF24_write_payload+0x40>)
 800494c:	f004 fbc4 	bl	80090d8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b29a      	uxth	r2, r3
 8004954:	2364      	movs	r3, #100	; 0x64
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4804      	ldr	r0, [pc, #16]	; (800496c <NRF24_write_payload+0x40>)
 800495a:	f004 fbbd 	bl	80090d8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800495e:	2001      	movs	r0, #1
 8004960:	f7ff ff0a 	bl	8004778 <NRF24_csn>
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20001804 	.word	0x20001804

08004970 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8004974:	21ff      	movs	r1, #255	; 0xff
 8004976:	20e1      	movs	r0, #225	; 0xe1
 8004978:	f7ff ff8e 	bl	8004898 <NRF24_write_register>
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}

08004980 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004984:	21ff      	movs	r1, #255	; 0xff
 8004986:	20e2      	movs	r0, #226	; 0xe2
 8004988:	f7ff ff86 	bl	8004898 <NRF24_write_register>
}
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}

08004990 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8004996:	2007      	movs	r0, #7
 8004998:	f7ff ff2e 	bl	80047f8 <NRF24_read_register>
 800499c:	4603      	mov	r3, r0
 800499e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80049a0:	79fb      	ldrb	r3, [r7, #7]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80049ac:	b082      	sub	sp, #8
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80049c0:	4b66      	ldr	r3, [pc, #408]	; (8004b5c <NRF24_begin+0x1b0>)
 80049c2:	4618      	mov	r0, r3
 80049c4:	f107 031c 	add.w	r3, r7, #28
 80049c8:	2258      	movs	r2, #88	; 0x58
 80049ca:	4619      	mov	r1, r3
 80049cc:	f00b ff16 	bl	80107fc <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80049d0:	4a63      	ldr	r2, [pc, #396]	; (8004b60 <NRF24_begin+0x1b4>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80049d6:	4a63      	ldr	r2, [pc, #396]	; (8004b64 <NRF24_begin+0x1b8>)
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80049dc:	4a62      	ldr	r2, [pc, #392]	; (8004b68 <NRF24_begin+0x1bc>)
 80049de:	883b      	ldrh	r3, [r7, #0]
 80049e0:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7ff fec8 	bl	8004778 <NRF24_csn>
	NRF24_ce(0);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7ff fee5 	bl	80047b8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80049ee:	2005      	movs	r0, #5
 80049f0:	f001 fcc2 	bl	8006378 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80049f4:	2108      	movs	r1, #8
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7ff ff4e 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80049fc:	213f      	movs	r1, #63	; 0x3f
 80049fe:	2001      	movs	r0, #1
 8004a00:	f7ff ff4a 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8004a04:	2103      	movs	r1, #3
 8004a06:	2002      	movs	r0, #2
 8004a08:	f7ff ff46 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8004a0c:	2103      	movs	r1, #3
 8004a0e:	2003      	movs	r0, #3
 8004a10:	f7ff ff42 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8004a14:	2103      	movs	r1, #3
 8004a16:	2004      	movs	r0, #4
 8004a18:	f7ff ff3e 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	2005      	movs	r0, #5
 8004a20:	f7ff ff3a 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8004a24:	210f      	movs	r1, #15
 8004a26:	2006      	movs	r0, #6
 8004a28:	f7ff ff36 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8004a2c:	210e      	movs	r1, #14
 8004a2e:	2007      	movs	r0, #7
 8004a30:	f7ff ff32 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8004a34:	2100      	movs	r1, #0
 8004a36:	2008      	movs	r0, #8
 8004a38:	f7ff ff2e 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2009      	movs	r0, #9
 8004a40:	f7ff ff2a 	bl	8004898 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8004a44:	23e7      	movs	r3, #231	; 0xe7
 8004a46:	733b      	strb	r3, [r7, #12]
 8004a48:	23e7      	movs	r3, #231	; 0xe7
 8004a4a:	72fb      	strb	r3, [r7, #11]
 8004a4c:	23e7      	movs	r3, #231	; 0xe7
 8004a4e:	72bb      	strb	r3, [r7, #10]
 8004a50:	23e7      	movs	r3, #231	; 0xe7
 8004a52:	727b      	strb	r3, [r7, #9]
 8004a54:	23e7      	movs	r3, #231	; 0xe7
 8004a56:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	2205      	movs	r2, #5
 8004a5e:	4619      	mov	r1, r3
 8004a60:	200a      	movs	r0, #10
 8004a62:	f7ff ff3b 	bl	80048dc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8004a66:	23c2      	movs	r3, #194	; 0xc2
 8004a68:	733b      	strb	r3, [r7, #12]
 8004a6a:	23c2      	movs	r3, #194	; 0xc2
 8004a6c:	72fb      	strb	r3, [r7, #11]
 8004a6e:	23c2      	movs	r3, #194	; 0xc2
 8004a70:	72bb      	strb	r3, [r7, #10]
 8004a72:	23c2      	movs	r3, #194	; 0xc2
 8004a74:	727b      	strb	r3, [r7, #9]
 8004a76:	23c2      	movs	r3, #194	; 0xc2
 8004a78:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	2205      	movs	r2, #5
 8004a80:	4619      	mov	r1, r3
 8004a82:	200b      	movs	r0, #11
 8004a84:	f7ff ff2a 	bl	80048dc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004a88:	21c3      	movs	r1, #195	; 0xc3
 8004a8a:	200c      	movs	r0, #12
 8004a8c:	f7ff ff04 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004a90:	21c4      	movs	r1, #196	; 0xc4
 8004a92:	200d      	movs	r0, #13
 8004a94:	f7ff ff00 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8004a98:	21c5      	movs	r1, #197	; 0xc5
 8004a9a:	200e      	movs	r0, #14
 8004a9c:	f7ff fefc 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004aa0:	21c6      	movs	r1, #198	; 0xc6
 8004aa2:	200f      	movs	r0, #15
 8004aa4:	f7ff fef8 	bl	8004898 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8004aa8:	23e7      	movs	r3, #231	; 0xe7
 8004aaa:	733b      	strb	r3, [r7, #12]
 8004aac:	23e7      	movs	r3, #231	; 0xe7
 8004aae:	72fb      	strb	r3, [r7, #11]
 8004ab0:	23e7      	movs	r3, #231	; 0xe7
 8004ab2:	72bb      	strb	r3, [r7, #10]
 8004ab4:	23e7      	movs	r3, #231	; 0xe7
 8004ab6:	727b      	strb	r3, [r7, #9]
 8004ab8:	23e7      	movs	r3, #231	; 0xe7
 8004aba:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	2205      	movs	r2, #5
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	2010      	movs	r0, #16
 8004ac6:	f7ff ff09 	bl	80048dc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8004aca:	2100      	movs	r1, #0
 8004acc:	2011      	movs	r0, #17
 8004ace:	f7ff fee3 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2012      	movs	r0, #18
 8004ad6:	f7ff fedf 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8004ada:	2100      	movs	r1, #0
 8004adc:	2013      	movs	r0, #19
 8004ade:	f7ff fedb 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	2014      	movs	r0, #20
 8004ae6:	f7ff fed7 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8004aea:	2100      	movs	r1, #0
 8004aec:	2015      	movs	r0, #21
 8004aee:	f7ff fed3 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004af2:	2100      	movs	r1, #0
 8004af4:	2016      	movs	r0, #22
 8004af6:	f7ff fecf 	bl	8004898 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8004afa:	f000 fa87 	bl	800500c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8004afe:	2100      	movs	r1, #0
 8004b00:	201c      	movs	r0, #28
 8004b02:	f7ff fec9 	bl	8004898 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8004b06:	2100      	movs	r1, #0
 8004b08:	201d      	movs	r0, #29
 8004b0a:	f7ff fec5 	bl	8004898 <NRF24_write_register>
	printRadioSettings();
 8004b0e:	f000 fa97 	bl	8005040 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8004b12:	210f      	movs	r1, #15
 8004b14:	200f      	movs	r0, #15
 8004b16:	f000 f8ad 	bl	8004c74 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	f000 f925 	bl	8004d6a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f000 f95b 	bl	8004ddc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8004b26:	2002      	movs	r0, #2
 8004b28:	f000 f99e 	bl	8004e68 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8004b2c:	f000 f8f0 	bl	8004d10 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8004b30:	2020      	movs	r0, #32
 8004b32:	f000 f8cf 	bl	8004cd4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8004b36:	f000 fa60 	bl	8004ffa <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8004b3a:	204c      	movs	r0, #76	; 0x4c
 8004b3c:	f000 f8b5 	bl	8004caa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8004b40:	f7ff ff16 	bl	8004970 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004b44:	f7ff ff1c 	bl	8004980 <NRF24_flush_rx>

	NRF24_powerDown();
 8004b48:	f000 f9b6 	bl	8004eb8 <NRF24_powerDown>

}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b56:	b002      	add	sp, #8
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20001804 	.word	0x20001804
 8004b60:	200017fc 	.word	0x200017fc
 8004b64:	20001800 	.word	0x20001800
 8004b68:	20001802 	.word	0x20001802

08004b6c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7ff fe21 	bl	80047b8 <NRF24_ce>
	NRF24_flush_tx();
 8004b76:	f7ff fefb 	bl	8004970 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004b7a:	f7ff ff01 	bl	8004980 <NRF24_flush_rx>
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8004b90:	f000 fa33 	bl	8004ffa <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9cc 	bl	8004f36 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8004b9e:	f001 fbe1 	bl	8006364 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8004ba8:	f107 030d 	add.w	r3, r7, #13
 8004bac:	2201      	movs	r2, #1
 8004bae:	4619      	mov	r1, r3
 8004bb0:	2008      	movs	r0, #8
 8004bb2:	f7ff fe49 	bl	8004848 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8004bb6:	f7ff feeb 	bl	8004990 <NRF24_get_status>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <NRF24_write+0x54>
 8004bc8:	f001 fbcc 	bl	8006364 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d8e7      	bhi.n	8004ba8 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8004bd8:	f107 010b 	add.w	r1, r7, #11
 8004bdc:	f107 030c 	add.w	r3, r7, #12
 8004be0:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <NRF24_write+0x90>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f9d6 	bl	8004f94 <NRF24_whatHappened>
	retStatus = tx_ok;
 8004be8:	7b3b      	ldrb	r3, [r7, #12]
 8004bea:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <NRF24_write+0x90>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8004bf4:	f000 f884 	bl	8004d00 <NRF24_getDynamicPayloadSize>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <NRF24_write+0x94>)
 8004bfe:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8004c00:	f000 f80c 	bl	8004c1c <NRF24_available>
	NRF24_flush_tx();
 8004c04:	f7ff feb4 	bl	8004970 <NRF24_flush_tx>
	return retStatus;
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200017f5 	.word	0x200017f5
 8004c18:	200017f6 	.word	0x200017f6

08004c1c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8004c20:	2000      	movs	r0, #0
 8004c22:	f000 f958 	bl	8004ed6 <NRF24_availablePipe>
 8004c26:	4603      	mov	r3, r0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8004c36:	463b      	mov	r3, r7
 8004c38:	2205      	movs	r2, #5
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7ff fe4d 	bl	80048dc <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8004c42:	463b      	mov	r3, r7
 8004c44:	2205      	movs	r2, #5
 8004c46:	4619      	mov	r1, r3
 8004c48:	2010      	movs	r0, #16
 8004c4a:	f7ff fe47 	bl	80048dc <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8004c4e:	2320      	movs	r3, #32
 8004c50:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <NRF24_openWritingPipe+0x44>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bf28      	it	cs
 8004c5c:	4613      	movcs	r3, r2
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	2011      	movs	r0, #17
 8004c64:	f7ff fe18 	bl	8004898 <NRF24_write_register>
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200017f7 	.word	0x200017f7

08004c74 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	71fb      	strb	r3, [r7, #7]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	b25a      	sxtb	r2, r3
 8004c8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	2004      	movs	r0, #4
 8004c9e:	f7ff fdfb 	bl	8004898 <NRF24_write_register>
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004cb4:	237f      	movs	r3, #127	; 0x7f
 8004cb6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8004cb8:	7bfa      	ldrb	r2, [r7, #15]
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bf28      	it	cs
 8004cc0:	4613      	movcs	r3, r2
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	2005      	movs	r0, #5
 8004cc8:	f7ff fde6 	bl	8004898 <NRF24_write_register>
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004cde:	2320      	movs	r3, #32
 8004ce0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bf28      	it	cs
 8004cea:	4613      	movcs	r3, r2
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <NRF24_setPayloadSize+0x28>)
 8004cf0:	701a      	strb	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	200017f7 	.word	0x200017f7

08004d00 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8004d04:	2060      	movs	r0, #96	; 0x60
 8004d06:	f7ff fd77 	bl	80047f8 <NRF24_read_register>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004d14:	201d      	movs	r0, #29
 8004d16:	f7ff fd6f 	bl	80047f8 <NRF24_read_register>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	201d      	movs	r0, #29
 8004d26:	f7ff fdb7 	bl	8004898 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	201c      	movs	r0, #28
 8004d2e:	f7ff fdb3 	bl	8004898 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004d32:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <NRF24_disableDynamicPayloads+0x2c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	200017f8 	.word	0x200017f8

08004d40 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8004d50:	213f      	movs	r1, #63	; 0x3f
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff fda0 	bl	8004898 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8004d58:	e003      	b.n	8004d62 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f7ff fd9b 	bl	8004898 <NRF24_write_register>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004d74:	2006      	movs	r0, #6
 8004d76:	f7ff fd3f 	bl	80047f8 <NRF24_read_register>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	f023 0306 	bic.w	r3, r3, #6
 8004d84:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d104      	bne.n	8004d96 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	f043 0306 	orr.w	r3, r3, #6
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e019      	b.n	8004dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d104      	bne.n	8004da6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e011      	b.n	8004dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d104      	bne.n	8004db6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	f043 0302 	orr.w	r3, r3, #2
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	e009      	b.n	8004dca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d103      	bne.n	8004dca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	f043 0306 	orr.w	r3, r3, #6
 8004dc8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	2006      	movs	r0, #6
 8004dd0:	f7ff fd62 	bl	8004898 <NRF24_write_register>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004dea:	2006      	movs	r0, #6
 8004dec:	f7ff fd04 	bl	80047f8 <NRF24_read_register>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <NRF24_setDataRate+0x88>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004e00:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d107      	bne.n	8004e18 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004e08:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <NRF24_setDataRate+0x88>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	f043 0320 	orr.w	r3, r3, #32
 8004e14:	73bb      	strb	r3, [r7, #14]
 8004e16:	e00d      	b.n	8004e34 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <NRF24_setDataRate+0x88>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004e24:	7bbb      	ldrb	r3, [r7, #14]
 8004e26:	f043 0308 	orr.w	r3, r3, #8
 8004e2a:	73bb      	strb	r3, [r7, #14]
 8004e2c:	e002      	b.n	8004e34 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <NRF24_setDataRate+0x88>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004e34:	7bbb      	ldrb	r3, [r7, #14]
 8004e36:	4619      	mov	r1, r3
 8004e38:	2006      	movs	r0, #6
 8004e3a:	f7ff fd2d 	bl	8004898 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004e3e:	2006      	movs	r0, #6
 8004e40:	f7ff fcda 	bl	80047f8 <NRF24_read_register>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d102      	bne.n	8004e54 <NRF24_setDataRate+0x78>
  {
    result = true;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	e002      	b.n	8004e5a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <NRF24_setDataRate+0x88>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200017f9 	.word	0x200017f9

08004e68 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004e72:	2000      	movs	r0, #0
 8004e74:	f7ff fcc0 	bl	80047f8 <NRF24_read_register>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f023 030c 	bic.w	r3, r3, #12
 8004e7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00f      	beq.n	8004ea6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d104      	bne.n	8004e96 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	f043 0308 	orr.w	r3, r3, #8
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e007      	b.n	8004ea6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7ff fcf4 	bl	8004898 <NRF24_write_register>
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7ff fc9b 	bl	80047f8 <NRF24_read_register>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff fce3 	bl	8004898 <NRF24_write_register>
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004ede:	f7ff fd57 	bl	8004990 <NRF24_get_status>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004ef6:	7bbb      	ldrb	r3, [r7, #14]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004f12:	2140      	movs	r1, #64	; 0x40
 8004f14:	2007      	movs	r0, #7
 8004f16:	f7ff fcbf 	bl	8004898 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004f24:	2120      	movs	r1, #32
 8004f26:	2007      	movs	r0, #7
 8004f28:	f7ff fcb6 	bl	8004898 <NRF24_write_register>
    }
  }
  return result;
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7ff fc38 	bl	80047b8 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f7ff fc55 	bl	80047f8 <NRF24_read_register>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7ff fc9a 	bl	8004898 <NRF24_write_register>
  NRF24_ce(1);
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7ff fc27 	bl	80047b8 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8004f6a:	2096      	movs	r0, #150	; 0x96
 8004f6c:	f7ff fbe4 	bl	8004738 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fcd9 	bl	800492c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff fc1c 	bl	80047b8 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8004f80:	200f      	movs	r0, #15
 8004f82:	f7ff fbd9 	bl	8004738 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7ff fc16 	bl	80047b8 <NRF24_ce>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004fa0:	f7ff fcf6 	bl	8004990 <NRF24_get_status>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004fae:	2170      	movs	r1, #112	; 0x70
 8004fb0:	2007      	movs	r0, #7
 8004fb2:	f7ff fc71 	bl	8004898 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	701a      	strb	r2, [r3, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004ffe:	2170      	movs	r1, #112	; 0x70
 8005000:	2007      	movs	r0, #7
 8005002:	f7ff fc49 	bl	8004898 <NRF24_write_register>
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8005012:	2000      	movs	r0, #0
 8005014:	f7ff fbb0 	bl	8004778 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8005018:	2350      	movs	r3, #80	; 0x50
 800501a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800501c:	2373      	movs	r3, #115	; 0x73
 800501e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8005020:	1d39      	adds	r1, r7, #4
 8005022:	2364      	movs	r3, #100	; 0x64
 8005024:	2202      	movs	r2, #2
 8005026:	4805      	ldr	r0, [pc, #20]	; (800503c <NRF24_ACTIVATE_cmd+0x30>)
 8005028:	f004 f856 	bl	80090d8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800502c:	2001      	movs	r0, #1
 800502e:	f7ff fba3 	bl	8004778 <NRF24_csn>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20001804 	.word	0x20001804

08005040 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	b0a1      	sub	sp, #132	; 0x84
 8005044:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4996      	ldr	r1, [pc, #600]	; (80052a4 <printRadioSettings+0x264>)
 800504c:	4618      	mov	r0, r3
 800504e:	f00b fd2f 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8005052:	2000      	movs	r0, #0
 8005054:	f7ff fbd0 	bl	80047f8 <NRF24_read_register>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800505e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d013      	beq.n	8005092 <printRadioSettings+0x52>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800506a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <printRadioSettings+0x44>
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	498b      	ldr	r1, [pc, #556]	; (80052a8 <printRadioSettings+0x268>)
 800507c:	4618      	mov	r0, r3
 800507e:	f00b fd17 	bl	8010ab0 <siprintf>
 8005082:	e00c      	b.n	800509e <printRadioSettings+0x5e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	4988      	ldr	r1, [pc, #544]	; (80052ac <printRadioSettings+0x26c>)
 800508a:	4618      	mov	r0, r3
 800508c:	f00b fd10 	bl	8010ab0 <siprintf>
 8005090:	e005      	b.n	800509e <printRadioSettings+0x5e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4986      	ldr	r1, [pc, #536]	; (80052b0 <printRadioSettings+0x270>)
 8005098:	4618      	mov	r0, r3
 800509a:	f00b fd09 	bl	8010ab0 <siprintf>
	}
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800509e:	2001      	movs	r0, #1
 80050a0:	f7ff fbaa 	bl	80047f8 <NRF24_read_register>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050ae:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfcc      	ite	gt
 80050b6:	2301      	movgt	r3, #1
 80050b8:	2300      	movle	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050c2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfcc      	ite	gt
 80050ca:	2301      	movgt	r3, #1
 80050cc:	2300      	movle	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050d6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfcc      	ite	gt
 80050de:	2301      	movgt	r3, #1
 80050e0:	2300      	movle	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050ea:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfcc      	ite	gt
 80050f2:	2301      	movgt	r3, #1
 80050f4:	2300      	movle	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050fe:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfcc      	ite	gt
 8005106:	2301      	movgt	r3, #1
 8005108:	2300      	movle	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800510e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005112:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfcc      	ite	gt
 800511a:	2301      	movgt	r3, #1
 800511c:	2300      	movle	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f107 0008 	add.w	r0, r7, #8
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	9402      	str	r4, [sp, #8]
 8005128:	9101      	str	r1, [sp, #4]
 800512a:	9200      	str	r2, [sp, #0]
 800512c:	4633      	mov	r3, r6
 800512e:	462a      	mov	r2, r5
 8005130:	4960      	ldr	r1, [pc, #384]	; (80052b4 <printRadioSettings+0x274>)
 8005132:	f00b fcbd 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8005136:	2002      	movs	r0, #2
 8005138:	f7ff fb5e 	bl	80047f8 <NRF24_read_register>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005142:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005146:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfcc      	ite	gt
 800514e:	2301      	movgt	r3, #1
 8005150:	2300      	movle	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800515a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfcc      	ite	gt
 8005162:	2301      	movgt	r3, #1
 8005164:	2300      	movle	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800516a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800516e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfcc      	ite	gt
 8005176:	2301      	movgt	r3, #1
 8005178:	2300      	movle	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800517e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005182:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfcc      	ite	gt
 800518a:	2301      	movgt	r3, #1
 800518c:	2300      	movle	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005196:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfcc      	ite	gt
 800519e:	2301      	movgt	r3, #1
 80051a0:	2300      	movle	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80051a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051aa:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfcc      	ite	gt
 80051b2:	2301      	movgt	r3, #1
 80051b4:	2300      	movle	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f107 0008 	add.w	r0, r7, #8
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	9402      	str	r4, [sp, #8]
 80051c0:	9101      	str	r1, [sp, #4]
 80051c2:	9200      	str	r2, [sp, #0]
 80051c4:	4633      	mov	r3, r6
 80051c6:	462a      	mov	r2, r5
 80051c8:	493b      	ldr	r1, [pc, #236]	; (80052b8 <printRadioSettings+0x278>)
 80051ca:	f00b fc71 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80051ce:	2003      	movs	r0, #3
 80051d0:	f7ff fb12 	bl	80047f8 <NRF24_read_register>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80051de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051e2:	3302      	adds	r3, #2
 80051e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80051e8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4932      	ldr	r1, [pc, #200]	; (80052bc <printRadioSettings+0x27c>)
 80051f2:	4618      	mov	r0, r3
 80051f4:	f00b fc5c 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80051f8:	2005      	movs	r0, #5
 80051fa:	f7ff fafd 	bl	80047f8 <NRF24_read_register>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8005204:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	492b      	ldr	r1, [pc, #172]	; (80052c0 <printRadioSettings+0x280>)
 8005212:	4618      	mov	r0, r3
 8005214:	f00b fc4c 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8005218:	2006      	movs	r0, #6
 800521a:	f7ff faed 	bl	80047f8 <NRF24_read_register>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8005224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <printRadioSettings+0x1fe>
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	4923      	ldr	r1, [pc, #140]	; (80052c4 <printRadioSettings+0x284>)
 8005236:	4618      	mov	r0, r3
 8005238:	f00b fc3a 	bl	8010ab0 <siprintf>
 800523c:	e005      	b.n	800524a <printRadioSettings+0x20a>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4921      	ldr	r1, [pc, #132]	; (80052c8 <printRadioSettings+0x288>)
 8005244:	4618      	mov	r0, r3
 8005246:	f00b fc33 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	reg8Val &= (3 << 1);
 800524a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8005256:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8005260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <printRadioSettings+0x236>
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <printRadioSettings+0x28c>)
 800526e:	4618      	mov	r0, r3
 8005270:	f00b fc1e 	bl	8010ab0 <siprintf>
 8005274:	e03a      	b.n	80052ec <printRadioSettings+0x2ac>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8005276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800527a:	2b01      	cmp	r3, #1
 800527c:	d106      	bne.n	800528c <printRadioSettings+0x24c>
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4913      	ldr	r1, [pc, #76]	; (80052d0 <printRadioSettings+0x290>)
 8005284:	4618      	mov	r0, r3
 8005286:	f00b fc13 	bl	8010ab0 <siprintf>
 800528a:	e02f      	b.n	80052ec <printRadioSettings+0x2ac>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800528c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005290:	2b02      	cmp	r3, #2
 8005292:	d121      	bne.n	80052d8 <printRadioSettings+0x298>
 8005294:	f107 0308 	add.w	r3, r7, #8
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <printRadioSettings+0x294>)
 800529a:	4618      	mov	r0, r3
 800529c:	f00b fc08 	bl	8010ab0 <siprintf>
 80052a0:	e024      	b.n	80052ec <printRadioSettings+0x2ac>
 80052a2:	bf00      	nop
 80052a4:	08011e14 	.word	0x08011e14
 80052a8:	08011e48 	.word	0x08011e48
 80052ac:	08011e64 	.word	0x08011e64
 80052b0:	08011e80 	.word	0x08011e80
 80052b4:	08011e94 	.word	0x08011e94
 80052b8:	08011ed8 	.word	0x08011ed8
 80052bc:	08011f24 	.word	0x08011f24
 80052c0:	08011f40 	.word	0x08011f40
 80052c4:	08011f54 	.word	0x08011f54
 80052c8:	08011f6c 	.word	0x08011f6c
 80052cc:	08011f84 	.word	0x08011f84
 80052d0:	08011f98 	.word	0x08011f98
 80052d4:	08011fac 	.word	0x08011fac
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80052d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d105      	bne.n	80052ec <printRadioSettings+0x2ac>
 80052e0:	f107 0308 	add.w	r3, r7, #8
 80052e4:	49b1      	ldr	r1, [pc, #708]	; (80055ac <printRadioSettings+0x56c>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f00b fbe2 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80052ec:	463b      	mov	r3, r7
 80052ee:	2205      	movs	r2, #5
 80052f0:	4619      	mov	r1, r3
 80052f2:	200a      	movs	r0, #10
 80052f4:	f7ff faa8 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80052f8:	793b      	ldrb	r3, [r7, #4]
 80052fa:	461c      	mov	r4, r3
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	461d      	mov	r5, r3
 8005300:	78bb      	ldrb	r3, [r7, #2]
 8005302:	787a      	ldrb	r2, [r7, #1]
 8005304:	7839      	ldrb	r1, [r7, #0]
 8005306:	f107 0008 	add.w	r0, r7, #8
 800530a:	9102      	str	r1, [sp, #8]
 800530c:	9201      	str	r2, [sp, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	462b      	mov	r3, r5
 8005312:	4622      	mov	r2, r4
 8005314:	49a6      	ldr	r1, [pc, #664]	; (80055b0 <printRadioSettings+0x570>)
 8005316:	f00b fbcb 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800531a:	463b      	mov	r3, r7
 800531c:	2205      	movs	r2, #5
 800531e:	4619      	mov	r1, r3
 8005320:	200b      	movs	r0, #11
 8005322:	f7ff fa91 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8005326:	793b      	ldrb	r3, [r7, #4]
 8005328:	461c      	mov	r4, r3
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	461d      	mov	r5, r3
 800532e:	78bb      	ldrb	r3, [r7, #2]
 8005330:	787a      	ldrb	r2, [r7, #1]
 8005332:	7839      	ldrb	r1, [r7, #0]
 8005334:	f107 0008 	add.w	r0, r7, #8
 8005338:	9102      	str	r1, [sp, #8]
 800533a:	9201      	str	r2, [sp, #4]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462b      	mov	r3, r5
 8005340:	4622      	mov	r2, r4
 8005342:	499c      	ldr	r1, [pc, #624]	; (80055b4 <printRadioSettings+0x574>)
 8005344:	f00b fbb4 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8005348:	463b      	mov	r3, r7
 800534a:	2201      	movs	r2, #1
 800534c:	4619      	mov	r1, r3
 800534e:	200c      	movs	r0, #12
 8005350:	f7ff fa7a 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005354:	783b      	ldrb	r3, [r7, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4996      	ldr	r1, [pc, #600]	; (80055b8 <printRadioSettings+0x578>)
 800535e:	4618      	mov	r0, r3
 8005360:	f00b fba6 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8005364:	463b      	mov	r3, r7
 8005366:	2201      	movs	r2, #1
 8005368:	4619      	mov	r1, r3
 800536a:	200d      	movs	r0, #13
 800536c:	f7ff fa6c 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005370:	783b      	ldrb	r3, [r7, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4990      	ldr	r1, [pc, #576]	; (80055bc <printRadioSettings+0x57c>)
 800537a:	4618      	mov	r0, r3
 800537c:	f00b fb98 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8005380:	463b      	mov	r3, r7
 8005382:	2201      	movs	r2, #1
 8005384:	4619      	mov	r1, r3
 8005386:	200e      	movs	r0, #14
 8005388:	f7ff fa5e 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800538c:	783b      	ldrb	r3, [r7, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	498a      	ldr	r1, [pc, #552]	; (80055c0 <printRadioSettings+0x580>)
 8005396:	4618      	mov	r0, r3
 8005398:	f00b fb8a 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800539c:	463b      	mov	r3, r7
 800539e:	2201      	movs	r2, #1
 80053a0:	4619      	mov	r1, r3
 80053a2:	200f      	movs	r0, #15
 80053a4:	f7ff fa50 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80053a8:	783b      	ldrb	r3, [r7, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f107 0308 	add.w	r3, r7, #8
 80053b0:	4984      	ldr	r1, [pc, #528]	; (80055c4 <printRadioSettings+0x584>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f00b fb7c 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80053b8:	463b      	mov	r3, r7
 80053ba:	2205      	movs	r2, #5
 80053bc:	4619      	mov	r1, r3
 80053be:	2010      	movs	r0, #16
 80053c0:	f7ff fa42 	bl	8004848 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80053c4:	793b      	ldrb	r3, [r7, #4]
 80053c6:	461c      	mov	r4, r3
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	461d      	mov	r5, r3
 80053cc:	78bb      	ldrb	r3, [r7, #2]
 80053ce:	787a      	ldrb	r2, [r7, #1]
 80053d0:	7839      	ldrb	r1, [r7, #0]
 80053d2:	f107 0008 	add.w	r0, r7, #8
 80053d6:	9102      	str	r1, [sp, #8]
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	462b      	mov	r3, r5
 80053de:	4622      	mov	r2, r4
 80053e0:	4979      	ldr	r1, [pc, #484]	; (80055c8 <printRadioSettings+0x588>)
 80053e2:	f00b fb65 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80053e6:	2011      	movs	r0, #17
 80053e8:	f7ff fa06 	bl	80047f8 <NRF24_read_register>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80053f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80053f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4973      	ldr	r1, [pc, #460]	; (80055cc <printRadioSettings+0x58c>)
 8005400:	4618      	mov	r0, r3
 8005402:	f00b fb55 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+1);
 8005406:	2012      	movs	r0, #18
 8005408:	f7ff f9f6 	bl	80047f8 <NRF24_read_register>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005412:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	496c      	ldr	r1, [pc, #432]	; (80055d0 <printRadioSettings+0x590>)
 8005420:	4618      	mov	r0, r3
 8005422:	f00b fb45 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+2);
 8005426:	2013      	movs	r0, #19
 8005428:	f7ff f9e6 	bl	80047f8 <NRF24_read_register>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005432:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4965      	ldr	r1, [pc, #404]	; (80055d4 <printRadioSettings+0x594>)
 8005440:	4618      	mov	r0, r3
 8005442:	f00b fb35 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+3);
 8005446:	2014      	movs	r0, #20
 8005448:	f7ff f9d6 	bl	80047f8 <NRF24_read_register>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005452:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	495e      	ldr	r1, [pc, #376]	; (80055d8 <printRadioSettings+0x598>)
 8005460:	4618      	mov	r0, r3
 8005462:	f00b fb25 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+4);
 8005466:	2015      	movs	r0, #21
 8005468:	f7ff f9c6 	bl	80047f8 <NRF24_read_register>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005472:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4957      	ldr	r1, [pc, #348]	; (80055dc <printRadioSettings+0x59c>)
 8005480:	4618      	mov	r0, r3
 8005482:	f00b fb15 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+5);
 8005486:	2016      	movs	r0, #22
 8005488:	f7ff f9b6 	bl	80047f8 <NRF24_read_register>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4950      	ldr	r1, [pc, #320]	; (80055e0 <printRadioSettings+0x5a0>)
 80054a0:	4618      	mov	r0, r3
 80054a2:	f00b fb05 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80054a6:	201c      	movs	r0, #28
 80054a8:	f7ff f9a6 	bl	80047f8 <NRF24_read_register>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80054b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfcc      	ite	gt
 80054be:	2301      	movgt	r3, #1
 80054c0:	2300      	movle	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80054c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfcc      	ite	gt
 80054d2:	2301      	movgt	r3, #1
 80054d4:	2300      	movle	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80054da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054de:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfcc      	ite	gt
 80054e6:	2301      	movgt	r3, #1
 80054e8:	2300      	movle	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80054ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054f2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfcc      	ite	gt
 80054fa:	2301      	movgt	r3, #1
 80054fc:	2300      	movle	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005502:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005506:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfcc      	ite	gt
 800550e:	2301      	movgt	r3, #1
 8005510:	2300      	movle	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005516:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800551a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800551e:	2b00      	cmp	r3, #0
 8005520:	bfcc      	ite	gt
 8005522:	2301      	movgt	r3, #1
 8005524:	2300      	movle	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f107 0008 	add.w	r0, r7, #8
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	9402      	str	r4, [sp, #8]
 8005530:	9101      	str	r1, [sp, #4]
 8005532:	9200      	str	r2, [sp, #0]
 8005534:	4633      	mov	r3, r6
 8005536:	462a      	mov	r2, r5
 8005538:	492a      	ldr	r1, [pc, #168]	; (80055e4 <printRadioSettings+0x5a4>)
 800553a:	f00b fab9 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800553e:	201d      	movs	r0, #29
 8005540:	f7ff f95a 	bl	80047f8 <NRF24_read_register>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800554a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <printRadioSettings+0x524>
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4923      	ldr	r1, [pc, #140]	; (80055e8 <printRadioSettings+0x5a8>)
 800555c:	4618      	mov	r0, r3
 800555e:	f00b faa7 	bl	8010ab0 <siprintf>
 8005562:	e005      	b.n	8005570 <printRadioSettings+0x530>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	4920      	ldr	r1, [pc, #128]	; (80055ec <printRadioSettings+0x5ac>)
 800556a:	4618      	mov	r0, r3
 800556c:	f00b faa0 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8005570:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <printRadioSettings+0x54a>
 800557c:	f107 0308 	add.w	r3, r7, #8
 8005580:	491b      	ldr	r1, [pc, #108]	; (80055f0 <printRadioSettings+0x5b0>)
 8005582:	4618      	mov	r0, r3
 8005584:	f00b fa94 	bl	8010ab0 <siprintf>
 8005588:	e005      	b.n	8005596 <printRadioSettings+0x556>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4919      	ldr	r1, [pc, #100]	; (80055f4 <printRadioSettings+0x5b4>)
 8005590:	4618      	mov	r0, r3
 8005592:	f00b fa8d 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4917      	ldr	r1, [pc, #92]	; (80055f8 <printRadioSettings+0x5b8>)
 800559c:	4618      	mov	r0, r3
 800559e:	f00b fa87 	bl	8010ab0 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}
 80055a2:	bf00      	nop
 80055a4:	3774      	adds	r7, #116	; 0x74
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	bf00      	nop
 80055ac:	08011fc0 	.word	0x08011fc0
 80055b0:	08011fd4 	.word	0x08011fd4
 80055b4:	08012004 	.word	0x08012004
 80055b8:	08012034 	.word	0x08012034
 80055bc:	0801205c 	.word	0x0801205c
 80055c0:	08012084 	.word	0x08012084
 80055c4:	080120ac 	.word	0x080120ac
 80055c8:	080120d4 	.word	0x080120d4
 80055cc:	08012100 	.word	0x08012100
 80055d0:	0801211c 	.word	0x0801211c
 80055d4:	08012138 	.word	0x08012138
 80055d8:	08012154 	.word	0x08012154
 80055dc:	08012170 	.word	0x08012170
 80055e0:	0801218c 	.word	0x0801218c
 80055e4:	080121a8 	.word	0x080121a8
 80055e8:	080121f4 	.word	0x080121f4
 80055ec:	0801220c 	.word	0x0801220c
 80055f0:	08012224 	.word	0x08012224
 80055f4:	08012240 	.word	0x08012240
 80055f8:	08011e14 	.word	0x08011e14

080055fc <nrf24_DebugUART_Init>:
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80055fc:	b084      	sub	sp, #16
 80055fe:	b4b0      	push	{r4, r5, r7}
 8005600:	af00      	add	r7, sp, #0
 8005602:	f107 040c 	add.w	r4, r7, #12
 8005606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <nrf24_DebugUART_Init+0x34>)
 800560c:	461d      	mov	r5, r3
 800560e:	f107 040c 	add.w	r4, r7, #12
 8005612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800561c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	bcb0      	pop	{r4, r5, r7}
 800562c:	b004      	add	sp, #16
 800562e:	4770      	bx	lr
 8005630:	2000185c 	.word	0x2000185c

08005634 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005638:	4b17      	ldr	r3, [pc, #92]	; (8005698 <MX_SPI1_Init+0x64>)
 800563a:	4a18      	ldr	r2, [pc, #96]	; (800569c <MX_SPI1_Init+0x68>)
 800563c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800563e:	4b16      	ldr	r3, [pc, #88]	; (8005698 <MX_SPI1_Init+0x64>)
 8005640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <MX_SPI1_Init+0x64>)
 8005648:	2200      	movs	r2, #0
 800564a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <MX_SPI1_Init+0x64>)
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <MX_SPI1_Init+0x64>)
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <MX_SPI1_Init+0x64>)
 800565a:	2200      	movs	r2, #0
 800565c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800565e:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <MX_SPI1_Init+0x64>)
 8005660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <MX_SPI1_Init+0x64>)
 8005668:	2220      	movs	r2, #32
 800566a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <MX_SPI1_Init+0x64>)
 800566e:	2200      	movs	r2, #0
 8005670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <MX_SPI1_Init+0x64>)
 8005674:	2200      	movs	r2, #0
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005678:	4b07      	ldr	r3, [pc, #28]	; (8005698 <MX_SPI1_Init+0x64>)
 800567a:	2200      	movs	r2, #0
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <MX_SPI1_Init+0x64>)
 8005680:	220a      	movs	r2, #10
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005684:	4804      	ldr	r0, [pc, #16]	; (8005698 <MX_SPI1_Init+0x64>)
 8005686:	f003 fca3 	bl	8008fd0 <HAL_SPI_Init>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005690:	f7ff f812 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005694:	bf00      	nop
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20001908 	.word	0x20001908
 800569c:	40013000 	.word	0x40013000

080056a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <HAL_SPI_MspInit+0x88>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d12f      	bne.n	8005720 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056c0:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ca:	6193      	str	r3, [r2, #24]
 80056cc:	4b17      	ldr	r3, [pc, #92]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d8:	4b14      	ldr	r3, [pc, #80]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	4a13      	ldr	r2, [pc, #76]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	6193      	str	r3, [r2, #24]
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_SPI_MspInit+0x8c>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80056f0:	23a0      	movs	r3, #160	; 0xa0
 80056f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f4:	2302      	movs	r3, #2
 80056f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056f8:	2303      	movs	r3, #3
 80056fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	4619      	mov	r1, r3
 8005702:	480b      	ldr	r0, [pc, #44]	; (8005730 <HAL_SPI_MspInit+0x90>)
 8005704:	f001 f9ce 	bl	8006aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4619      	mov	r1, r3
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <HAL_SPI_MspInit+0x90>)
 800571c:	f001 f9c2 	bl	8006aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005720:	bf00      	nop
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40013000 	.word	0x40013000
 800572c:	40021000 	.word	0x40021000
 8005730:	40010800 	.word	0x40010800

08005734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_MspInit+0x5c>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_MspInit+0x5c>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6193      	str	r3, [r2, #24]
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <HAL_MspInit+0x5c>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_MspInit+0x5c>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4a0e      	ldr	r2, [pc, #56]	; (8005790 <HAL_MspInit+0x5c>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	61d3      	str	r3, [r2, #28]
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <HAL_MspInit+0x5c>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_MspInit+0x60>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <HAL_MspInit+0x60>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	40021000 	.word	0x40021000
 8005794:	40010000 	.word	0x40010000

08005798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800579c:	e7fe      	b.n	800579c <NMI_Handler+0x4>
	...

080057a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HardFault_Handler+0x30>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057ac:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <HardFault_Handler+0x30>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <HardFault_Handler+0x30>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80057c2:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HardFault_Handler+0x30>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057cc:	e7fe      	b.n	80057cc <HardFault_Handler+0x2c>
 80057ce:	bf00      	nop
 80057d0:	200019f0 	.word	0x200019f0

080057d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057d8:	e7fe      	b.n	80057d8 <MemManage_Handler+0x4>

080057da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057da:	b480      	push	{r7}
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057de:	e7fe      	b.n	80057de <BusFault_Handler+0x4>

080057e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057e4:	e7fe      	b.n	80057e4 <UsageFault_Handler+0x4>

080057e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057fe:	b480      	push	{r7}
 8005800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
	...

0800580c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <SysTick_Handler+0x24>)
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <SysTick_Handler+0x1c>
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <SysTick_Handler+0x24>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <SysTick_Handler+0x24>)
 8005826:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005828:	f000 fd8a 	bl	8006340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800582c:	bf00      	nop
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200018b0 	.word	0x200018b0

08005834 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005838:	4802      	ldr	r0, [pc, #8]	; (8005844 <DMA1_Channel5_IRQHandler+0x10>)
 800583a:	f000 ffff 	bl	800683c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20001ac0 	.word	0x20001ac0

08005848 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800584c:	4802      	ldr	r0, [pc, #8]	; (8005858 <DMA1_Channel7_IRQHandler+0x10>)
 800584e:	f000 fff5 	bl	800683c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20001b04 	.word	0x20001b04

0800585c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <TIM2_IRQHandler+0x10>)
 8005862:	f004 fc5d 	bl	800a120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20001a38 	.word	0x20001a38

08005870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <TIM3_IRQHandler+0x10>)
 8005876:	f004 fc53 	bl	800a120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200019a8 	.word	0x200019a8

08005884 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <USART2_IRQHandler+0x10>)
 800588a:	f005 fec7 	bl	800b61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20001b88 	.word	0x20001b88

08005898 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <USART3_IRQHandler+0x14>)
 800589e:	f7fb fd67 	bl	8001370 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80058a2:	4802      	ldr	r0, [pc, #8]	; (80058ac <USART3_IRQHandler+0x14>)
 80058a4:	f005 feba 	bl	800b61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20001a80 	.word	0x20001a80

080058b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e00a      	b.n	80058d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80058c2:	f3af 8000 	nop.w
 80058c6:	4601      	mov	r1, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	60ba      	str	r2, [r7, #8]
 80058ce:	b2ca      	uxtb	r2, r1
 80058d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	dbf0      	blt.n	80058c2 <_read+0x12>
	}

return len;
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	e009      	b.n	8005910 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	60ba      	str	r2, [r7, #8]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	3301      	adds	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	dbf1      	blt.n	80058fc <_write+0x12>
	}
	return len;
 8005918:	687b      	ldr	r3, [r7, #4]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <_close>:

int _close(int file)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
	return -1;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005948:	605a      	str	r2, [r3, #4]
	return 0;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <_isatty>:

int _isatty(int file)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
	return 1;
 800595e:	2301      	movs	r3, #1
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
	return 0;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
	...

08005984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <_sbrk+0x5c>)
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <_sbrk+0x60>)
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <_sbrk+0x64>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <_sbrk+0x64>)
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <_sbrk+0x68>)
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059a6:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <_sbrk+0x64>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d207      	bcs.n	80059c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059b4:	f00a fef8 	bl	80107a8 <__errno>
 80059b8:	4603      	mov	r3, r0
 80059ba:	220c      	movs	r2, #12
 80059bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	e009      	b.n	80059d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <_sbrk+0x64>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <_sbrk+0x64>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <_sbrk+0x64>)
 80059d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20005000 	.word	0x20005000
 80059e4:	00000400 	.word	0x00000400
 80059e8:	2000189c 	.word	0x2000189c
 80059ec:	20001be0 	.word	0x20001be0

080059f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b092      	sub	sp, #72	; 0x48
 8005a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	615a      	str	r2, [r3, #20]
 8005a1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	2220      	movs	r2, #32
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00a fef6 	bl	8010818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005a2c:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a2e:	4a46      	ldr	r2, [pc, #280]	; (8005b48 <MX_TIM1_Init+0x14c>)
 8005a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8005a32:	4b44      	ldr	r3, [pc, #272]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a34:	2247      	movs	r2, #71	; 0x47
 8005a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8005a3e:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a40:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a46:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a4c:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a52:	4b3c      	ldr	r3, [pc, #240]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a58:	483a      	ldr	r0, [pc, #232]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a5a:	f004 f911 	bl	8009c80 <HAL_TIM_PWM_Init>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005a64:	f7fe fe28 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a74:	4619      	mov	r1, r3
 8005a76:	4833      	ldr	r0, [pc, #204]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005a78:	f005 fb20 	bl	800b0bc <HAL_TIMEx_MasterConfigSynchronization>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005a82:	f7fe fe19 	bl	80046b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a86:	2360      	movs	r3, #96	; 0x60
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a92:	2300      	movs	r3, #0
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4826      	ldr	r0, [pc, #152]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005aac:	f004 fcd4 	bl	800a458 <HAL_TIM_PWM_ConfigChannel>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8005ab6:	f7fe fdff 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4820      	ldr	r0, [pc, #128]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005ac4:	f004 fcc8 	bl	800a458 <HAL_TIM_PWM_ConfigChannel>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005ace:	f7fe fdf3 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	4619      	mov	r1, r3
 8005ada:	481a      	ldr	r0, [pc, #104]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005adc:	f004 fcbc 	bl	800a458 <HAL_TIM_PWM_ConfigChannel>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8005ae6:	f7fe fde7 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aee:	220c      	movs	r2, #12
 8005af0:	4619      	mov	r1, r3
 8005af2:	4814      	ldr	r0, [pc, #80]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005af4:	f004 fcb0 	bl	800a458 <HAL_TIM_PWM_ConfigChannel>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005afe:	f7fe fddb 	bl	80046b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4807      	ldr	r0, [pc, #28]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005b26:	f005 fb27 	bl	800b178 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005b30:	f7fe fdc2 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005b34:	4803      	ldr	r0, [pc, #12]	; (8005b44 <MX_TIM1_Init+0x148>)
 8005b36:	f000 f9a5 	bl	8005e84 <HAL_TIM_MspPostInit>

}
 8005b3a:	bf00      	nop
 8005b3c:	3748      	adds	r7, #72	; 0x48
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200019f0 	.word	0x200019f0
 8005b48:	40012c00 	.word	0x40012c00

08005b4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b60:	463b      	mov	r3, r7
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b72:	2247      	movs	r2, #71	; 0x47
 8005b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b84:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005b90:	4813      	ldr	r0, [pc, #76]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005b92:	f003 ff89 	bl	8009aa8 <HAL_TIM_Base_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005b9c:	f7fe fd8c 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	4619      	mov	r1, r3
 8005bac:	480c      	ldr	r0, [pc, #48]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005bae:	f004 fd11 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005bb8:	f7fe fd7e 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4805      	ldr	r0, [pc, #20]	; (8005be0 <MX_TIM2_Init+0x94>)
 8005bca:	f005 fa77 	bl	800b0bc <HAL_TIMEx_MasterConfigSynchronization>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005bd4:	f7fe fd70 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20001a38 	.word	0x20001a38

08005be4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bea:	f107 0318 	add.w	r3, r7, #24
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	609a      	str	r2, [r3, #8]
 8005bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf8:	f107 0310 	add.w	r3, r7, #16
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005c02:	463b      	mov	r3, r7
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c0e:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c10:	4a2b      	ldr	r2, [pc, #172]	; (8005cc0 <MX_TIM3_Init+0xdc>)
 8005c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005c14:	4b29      	ldr	r3, [pc, #164]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c16:	2247      	movs	r2, #71	; 0x47
 8005c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c1a:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005c20:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c2e:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c34:	4821      	ldr	r0, [pc, #132]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c36:	f003 ff37 	bl	8009aa8 <HAL_TIM_Base_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8005c40:	f7fe fd3a 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	481a      	ldr	r0, [pc, #104]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c52:	f004 fcbf 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005c5c:	f7fe fd2c 	bl	80046b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005c60:	4816      	ldr	r0, [pc, #88]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c62:	f004 f8ff 	bl	8009e64 <HAL_TIM_IC_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005c6c:	f7fe fd24 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c78:	f107 0310 	add.w	r3, r7, #16
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	480f      	ldr	r0, [pc, #60]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005c80:	f005 fa1c 	bl	800b0bc <HAL_TIMEx_MasterConfigSynchronization>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8005c8a:	f7fe fd15 	bl	80046b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c92:	2301      	movs	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4805      	ldr	r0, [pc, #20]	; (8005cbc <MX_TIM3_Init+0xd8>)
 8005ca6:	f004 fb43 	bl	800a330 <HAL_TIM_IC_ConfigChannel>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8005cb0:	f7fe fd02 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005cb4:	bf00      	nop
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	200019a8 	.word	0x200019a8
 8005cc0:	40000400 	.word	0x40000400

08005cc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cd8:	463b      	mov	r3, r7
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005ce2:	4a1e      	ldr	r2, [pc, #120]	; (8005d5c <MX_TIM4_Init+0x98>)
 8005ce4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8005ce6:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005ce8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005cec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005cf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cfc:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005d08:	4813      	ldr	r0, [pc, #76]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005d0a:	f003 fecd 	bl	8009aa8 <HAL_TIM_Base_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005d14:	f7fe fcd0 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4619      	mov	r1, r3
 8005d24:	480c      	ldr	r0, [pc, #48]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005d26:	f004 fc55 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005d30:	f7fe fcc2 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4805      	ldr	r0, [pc, #20]	; (8005d58 <MX_TIM4_Init+0x94>)
 8005d42:	f005 f9bb 	bl	800b0bc <HAL_TIMEx_MasterConfigSynchronization>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005d4c:	f7fe fcb4 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005d50:	bf00      	nop
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20001960 	.word	0x20001960
 8005d5c:	40000800 	.word	0x40000800

08005d60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <HAL_TIM_PWM_MspInit+0x34>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10b      	bne.n	8005d8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <HAL_TIM_PWM_MspInit+0x38>)
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <HAL_TIM_PWM_MspInit+0x38>)
 8005d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d7c:	6193      	str	r3, [r2, #24]
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_TIM_PWM_MspInit+0x38>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40021000 	.word	0x40021000

08005d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d114      	bne.n	8005de6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	61d3      	str	r3, [r2, #28]
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	201c      	movs	r0, #28
 8005dda:	f000 fbc8 	bl	800656e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dde:	201c      	movs	r0, #28
 8005de0:	f000 fbe1 	bl	80065a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005de4:	e042      	b.n	8005e6c <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a23      	ldr	r2, [pc, #140]	; (8005e78 <HAL_TIM_Base_MspInit+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d12c      	bne.n	8005e4a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005df6:	f043 0302 	orr.w	r3, r3, #2
 8005dfa:	61d3      	str	r3, [r2, #28]
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e0e:	f043 0308 	orr.w	r3, r3, #8
 8005e12:	6193      	str	r3, [r2, #24]
 8005e14:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e20:	2301      	movs	r3, #1
 8005e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e2c:	f107 0318 	add.w	r3, r7, #24
 8005e30:	4619      	mov	r1, r3
 8005e32:	4812      	ldr	r0, [pc, #72]	; (8005e7c <HAL_TIM_Base_MspInit+0xe0>)
 8005e34:	f000 fe36 	bl	8006aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	201d      	movs	r0, #29
 8005e3e:	f000 fb96 	bl	800656e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e42:	201d      	movs	r0, #29
 8005e44:	f000 fbaf 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 8005e48:	e010      	b.n	8005e6c <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <HAL_TIM_Base_MspInit+0xe4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10b      	bne.n	8005e6c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	61d3      	str	r3, [r2, #28]
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_TIM_Base_MspInit+0xd8>)
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40010c00 	.word	0x40010c00
 8005e80:	40000800 	.word	0x40000800

08005e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8c:	f107 0310 	add.w	r3, r7, #16
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_TIM_MspPostInit+0x8c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d131      	bne.n	8005f08 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005eaa:	f043 0308 	orr.w	r3, r3, #8
 8005eae:	6193      	str	r3, [r2, #24]
 8005eb0:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	6193      	str	r3, [r2, #24]
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_TIM_MspPostInit+0x90>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005ed4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eda:	2302      	movs	r3, #2
 8005edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee2:	f107 0310 	add.w	r3, r7, #16
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	480b      	ldr	r0, [pc, #44]	; (8005f18 <HAL_TIM_MspPostInit+0x94>)
 8005eea:	f000 fddb 	bl	8006aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005eee:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	4619      	mov	r1, r3
 8005f02:	4806      	ldr	r0, [pc, #24]	; (8005f1c <HAL_TIM_MspPostInit+0x98>)
 8005f04:	f000 fdce 	bl	8006aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005f08:	bf00      	nop
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010c00 	.word	0x40010c00
 8005f1c:	40010800 	.word	0x40010800

08005f20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f24:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f26:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <MX_USART1_UART_Init+0x50>)
 8005f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f32:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f46:	220c      	movs	r2, #12
 8005f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f56:	4805      	ldr	r0, [pc, #20]	; (8005f6c <MX_USART1_UART_Init+0x4c>)
 8005f58:	f005 f995 	bl	800b286 <HAL_UART_Init>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f62:	f7fe fba9 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20001b48 	.word	0x20001b48
 8005f70:	40013800 	.word	0x40013800

08005f74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f7a:	4a12      	ldr	r2, [pc, #72]	; (8005fc4 <MX_USART2_UART_Init+0x50>)
 8005f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f86:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005f9a:	220c      	movs	r2, #12
 8005f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f9e:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005faa:	4805      	ldr	r0, [pc, #20]	; (8005fc0 <MX_USART2_UART_Init+0x4c>)
 8005fac:	f005 f96b 	bl	800b286 <HAL_UART_Init>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005fb6:	f7fe fb7f 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fba:	bf00      	nop
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20001b88 	.word	0x20001b88
 8005fc4:	40004400 	.word	0x40004400

08005fc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <MX_USART3_UART_Init+0x50>)
 8005fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fda:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fec:	4b09      	ldr	r3, [pc, #36]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005fee:	220c      	movs	r2, #12
 8005ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <MX_USART3_UART_Init+0x4c>)
 8006000:	f005 f941 	bl	800b286 <HAL_UART_Init>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800600a:	f7fe fb55 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800600e:	bf00      	nop
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20001a80 	.word	0x20001a80
 8006018:	40004800 	.word	0x40004800

0800601c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 0320 	add.w	r3, r7, #32
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a82      	ldr	r2, [pc, #520]	; (8006240 <HAL_UART_MspInit+0x224>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d159      	bne.n	80060f0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800603c:	4b81      	ldr	r3, [pc, #516]	; (8006244 <HAL_UART_MspInit+0x228>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	4a80      	ldr	r2, [pc, #512]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006046:	6193      	str	r3, [r2, #24]
 8006048:	4b7e      	ldr	r3, [pc, #504]	; (8006244 <HAL_UART_MspInit+0x228>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006054:	4b7b      	ldr	r3, [pc, #492]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	4a7a      	ldr	r2, [pc, #488]	; (8006244 <HAL_UART_MspInit+0x228>)
 800605a:	f043 0304 	orr.w	r3, r3, #4
 800605e:	6193      	str	r3, [r2, #24]
 8006060:	4b78      	ldr	r3, [pc, #480]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800606c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006072:	2302      	movs	r3, #2
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607a:	f107 0320 	add.w	r3, r7, #32
 800607e:	4619      	mov	r1, r3
 8006080:	4871      	ldr	r0, [pc, #452]	; (8006248 <HAL_UART_MspInit+0x22c>)
 8006082:	f000 fd0f 	bl	8006aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608c:	2300      	movs	r3, #0
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	2300      	movs	r3, #0
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006094:	f107 0320 	add.w	r3, r7, #32
 8006098:	4619      	mov	r1, r3
 800609a:	486b      	ldr	r0, [pc, #428]	; (8006248 <HAL_UART_MspInit+0x22c>)
 800609c:	f000 fd02 	bl	8006aa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80060a0:	4b6a      	ldr	r3, [pc, #424]	; (800624c <HAL_UART_MspInit+0x230>)
 80060a2:	4a6b      	ldr	r2, [pc, #428]	; (8006250 <HAL_UART_MspInit+0x234>)
 80060a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060a6:	4b69      	ldr	r3, [pc, #420]	; (800624c <HAL_UART_MspInit+0x230>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ac:	4b67      	ldr	r3, [pc, #412]	; (800624c <HAL_UART_MspInit+0x230>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060b2:	4b66      	ldr	r3, [pc, #408]	; (800624c <HAL_UART_MspInit+0x230>)
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <HAL_UART_MspInit+0x230>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060be:	4b63      	ldr	r3, [pc, #396]	; (800624c <HAL_UART_MspInit+0x230>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80060c4:	4b61      	ldr	r3, [pc, #388]	; (800624c <HAL_UART_MspInit+0x230>)
 80060c6:	2220      	movs	r2, #32
 80060c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80060ca:	4b60      	ldr	r3, [pc, #384]	; (800624c <HAL_UART_MspInit+0x230>)
 80060cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80060d2:	485e      	ldr	r0, [pc, #376]	; (800624c <HAL_UART_MspInit+0x230>)
 80060d4:	f000 fa82 	bl	80065dc <HAL_DMA_Init>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80060de:	f7fe faeb 	bl	80046b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a59      	ldr	r2, [pc, #356]	; (800624c <HAL_UART_MspInit+0x230>)
 80060e6:	635a      	str	r2, [r3, #52]	; 0x34
 80060e8:	4a58      	ldr	r2, [pc, #352]	; (800624c <HAL_UART_MspInit+0x230>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80060ee:	e0a3      	b.n	8006238 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_UART_MspInit+0x238>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d15f      	bne.n	80061ba <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060fa:	4b52      	ldr	r3, [pc, #328]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4a51      	ldr	r2, [pc, #324]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006104:	61d3      	str	r3, [r2, #28]
 8006106:	4b4f      	ldr	r3, [pc, #316]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006112:	4b4c      	ldr	r3, [pc, #304]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	4a4b      	ldr	r2, [pc, #300]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006118:	f043 0304 	orr.w	r3, r3, #4
 800611c:	6193      	str	r3, [r2, #24]
 800611e:	4b49      	ldr	r3, [pc, #292]	; (8006244 <HAL_UART_MspInit+0x228>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800612a:	2304      	movs	r3, #4
 800612c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	2302      	movs	r3, #2
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006132:	2303      	movs	r3, #3
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006136:	f107 0320 	add.w	r3, r7, #32
 800613a:	4619      	mov	r1, r3
 800613c:	4842      	ldr	r0, [pc, #264]	; (8006248 <HAL_UART_MspInit+0x22c>)
 800613e:	f000 fcb1 	bl	8006aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006142:	2308      	movs	r3, #8
 8006144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614a:	2300      	movs	r3, #0
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800614e:	f107 0320 	add.w	r3, r7, #32
 8006152:	4619      	mov	r1, r3
 8006154:	483c      	ldr	r0, [pc, #240]	; (8006248 <HAL_UART_MspInit+0x22c>)
 8006156:	f000 fca5 	bl	8006aa4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800615a:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800615c:	4a3f      	ldr	r2, [pc, #252]	; (800625c <HAL_UART_MspInit+0x240>)
 800615e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006160:	4b3d      	ldr	r3, [pc, #244]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006162:	2210      	movs	r2, #16
 8006164:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006166:	4b3c      	ldr	r3, [pc, #240]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800616c:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800616e:	2280      	movs	r2, #128	; 0x80
 8006170:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006172:	4b39      	ldr	r3, [pc, #228]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006174:	2200      	movs	r2, #0
 8006176:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006178:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800617a:	2200      	movs	r2, #0
 800617c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800617e:	4b36      	ldr	r3, [pc, #216]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006180:	2200      	movs	r2, #0
 8006182:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006184:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800618a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800618c:	4832      	ldr	r0, [pc, #200]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800618e:	f000 fa25 	bl	80065dc <HAL_DMA_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8006198:	f7fe fa8e 	bl	80046b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a2e      	ldr	r2, [pc, #184]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
 80061a2:	4a2d      	ldr	r2, [pc, #180]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061a8:	2200      	movs	r2, #0
 80061aa:	2100      	movs	r1, #0
 80061ac:	2026      	movs	r0, #38	; 0x26
 80061ae:	f000 f9de 	bl	800656e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061b2:	2026      	movs	r0, #38	; 0x26
 80061b4:	f000 f9f7 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 80061b8:	e03e      	b.n	8006238 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a28      	ldr	r2, [pc, #160]	; (8006260 <HAL_UART_MspInit+0x244>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d139      	bne.n	8006238 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80061c4:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ce:	61d3      	str	r3, [r2, #28]
 80061d0:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061dc:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061e2:	f043 0308 	orr.w	r3, r3, #8
 80061e6:	6193      	str	r3, [r2, #24]
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_UART_MspInit+0x228>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061fe:	2303      	movs	r3, #3
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006202:	f107 0320 	add.w	r3, r7, #32
 8006206:	4619      	mov	r1, r3
 8006208:	4816      	ldr	r0, [pc, #88]	; (8006264 <HAL_UART_MspInit+0x248>)
 800620a:	f000 fc4b 	bl	8006aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800620e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006218:	2300      	movs	r3, #0
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621c:	f107 0320 	add.w	r3, r7, #32
 8006220:	4619      	mov	r1, r3
 8006222:	4810      	ldr	r0, [pc, #64]	; (8006264 <HAL_UART_MspInit+0x248>)
 8006224:	f000 fc3e 	bl	8006aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006228:	2200      	movs	r2, #0
 800622a:	2100      	movs	r1, #0
 800622c:	2027      	movs	r0, #39	; 0x27
 800622e:	f000 f99e 	bl	800656e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006232:	2027      	movs	r0, #39	; 0x27
 8006234:	f000 f9b7 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 8006238:	bf00      	nop
 800623a:	3730      	adds	r7, #48	; 0x30
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40013800 	.word	0x40013800
 8006244:	40021000 	.word	0x40021000
 8006248:	40010800 	.word	0x40010800
 800624c:	20001ac0 	.word	0x20001ac0
 8006250:	40020058 	.word	0x40020058
 8006254:	40004400 	.word	0x40004400
 8006258:	20001b04 	.word	0x20001b04
 800625c:	40020080 	.word	0x40020080
 8006260:	40004800 	.word	0x40004800
 8006264:	40010c00 	.word	0x40010c00

08006268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006268:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800626a:	e003      	b.n	8006274 <LoopCopyDataInit>

0800626c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800626e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006270:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006272:	3104      	adds	r1, #4

08006274 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006274:	480a      	ldr	r0, [pc, #40]	; (80062a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006278:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800627a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800627c:	d3f6      	bcc.n	800626c <CopyDataInit>
  ldr r2, =_sbss
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006280:	e002      	b.n	8006288 <LoopFillZerobss>

08006282 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006282:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006284:	f842 3b04 	str.w	r3, [r2], #4

08006288 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800628a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800628c:	d3f9      	bcc.n	8006282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800628e:	f7ff fbaf 	bl	80059f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006292:	f00a fa8f 	bl	80107b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006296:	f7fc f903 	bl	80024a0 <main>
  bx lr
 800629a:	4770      	bx	lr
  ldr r3, =_sidata
 800629c:	08012870 	.word	0x08012870
  ldr r0, =_sdata
 80062a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80062a4:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 80062a8:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80062ac:	20001bdc 	.word	0x20001bdc

080062b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062b0:	e7fe      	b.n	80062b0 <ADC1_2_IRQHandler>
	...

080062b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_Init+0x28>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <HAL_Init+0x28>)
 80062be:	f043 0310 	orr.w	r3, r3, #16
 80062c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062c4:	2003      	movs	r0, #3
 80062c6:	f000 f947 	bl	8006558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ca:	2000      	movs	r0, #0
 80062cc:	f000 f808 	bl	80062e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062d0:	f7ff fa30 	bl	8005734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40022000 	.word	0x40022000

080062e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062e8:	4b12      	ldr	r3, [pc, #72]	; (8006334 <HAL_InitTick+0x54>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_InitTick+0x58>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f95f 	bl	80065c2 <HAL_SYSTICK_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e00e      	b.n	800632c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d80a      	bhi.n	800632a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006314:	2200      	movs	r2, #0
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	f000 f927 	bl	800656e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006320:	4a06      	ldr	r2, [pc, #24]	; (800633c <HAL_InitTick+0x5c>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000018 	.word	0x20000018
 8006338:	20000020 	.word	0x20000020
 800633c:	2000001c 	.word	0x2000001c

08006340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_IncTick+0x1c>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_IncTick+0x20>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4413      	add	r3, r2
 8006350:	4a03      	ldr	r2, [pc, #12]	; (8006360 <HAL_IncTick+0x20>)
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	20000020 	.word	0x20000020
 8006360:	20001bc8 	.word	0x20001bc8

08006364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return uwTick;
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <HAL_GetTick+0x10>)
 800636a:	681b      	ldr	r3, [r3, #0]
}
 800636c:	4618      	mov	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr
 8006374:	20001bc8 	.word	0x20001bc8

08006378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006380:	f7ff fff0 	bl	8006364 <HAL_GetTick>
 8006384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d005      	beq.n	800639e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_Delay+0x44>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800639e:	bf00      	nop
 80063a0:	f7ff ffe0 	bl	8006364 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d8f7      	bhi.n	80063a0 <HAL_Delay+0x28>
  {
  }
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000020 	.word	0x20000020

080063c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <__NVIC_SetPriorityGrouping+0x44>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063dc:	4013      	ands	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063f2:	4a04      	ldr	r2, [pc, #16]	; (8006404 <__NVIC_SetPriorityGrouping+0x44>)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	60d3      	str	r3, [r2, #12]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	e000ed00 	.word	0xe000ed00

08006408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <__NVIC_GetPriorityGrouping+0x18>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 0307 	and.w	r3, r3, #7
}
 8006416:	4618      	mov	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00

08006424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800642e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006432:	2b00      	cmp	r3, #0
 8006434:	db0b      	blt.n	800644e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	f003 021f 	and.w	r2, r3, #31
 800643c:	4906      	ldr	r1, [pc, #24]	; (8006458 <__NVIC_EnableIRQ+0x34>)
 800643e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	2001      	movs	r0, #1
 8006446:	fa00 f202 	lsl.w	r2, r0, r2
 800644a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	e000e100 	.word	0xe000e100

0800645c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646c:	2b00      	cmp	r3, #0
 800646e:	db0a      	blt.n	8006486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	490c      	ldr	r1, [pc, #48]	; (80064a8 <__NVIC_SetPriority+0x4c>)
 8006476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647a:	0112      	lsls	r2, r2, #4
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	440b      	add	r3, r1
 8006480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006484:	e00a      	b.n	800649c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	4908      	ldr	r1, [pc, #32]	; (80064ac <__NVIC_SetPriority+0x50>)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	3b04      	subs	r3, #4
 8006494:	0112      	lsls	r2, r2, #4
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	440b      	add	r3, r1
 800649a:	761a      	strb	r2, [r3, #24]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	e000e100 	.word	0xe000e100
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b089      	sub	sp, #36	; 0x24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f1c3 0307 	rsb	r3, r3, #7
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	bf28      	it	cs
 80064ce:	2304      	movcs	r3, #4
 80064d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3304      	adds	r3, #4
 80064d6:	2b06      	cmp	r3, #6
 80064d8:	d902      	bls.n	80064e0 <NVIC_EncodePriority+0x30>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3b03      	subs	r3, #3
 80064de:	e000      	b.n	80064e2 <NVIC_EncodePriority+0x32>
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	43da      	mvns	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	401a      	ands	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064f8:	f04f 31ff 	mov.w	r1, #4294967295
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	43d9      	mvns	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006508:	4313      	orrs	r3, r2
         );
}
 800650a:	4618      	mov	r0, r3
 800650c:	3724      	adds	r7, #36	; 0x24
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3b01      	subs	r3, #1
 8006520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006524:	d301      	bcc.n	800652a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006526:	2301      	movs	r3, #1
 8006528:	e00f      	b.n	800654a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <SysTick_Config+0x40>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3b01      	subs	r3, #1
 8006530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006532:	210f      	movs	r1, #15
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	f7ff ff90 	bl	800645c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <SysTick_Config+0x40>)
 800653e:	2200      	movs	r2, #0
 8006540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006542:	4b04      	ldr	r3, [pc, #16]	; (8006554 <SysTick_Config+0x40>)
 8006544:	2207      	movs	r2, #7
 8006546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	e000e010 	.word	0xe000e010

08006558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff2d 	bl	80063c0 <__NVIC_SetPriorityGrouping>
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	4603      	mov	r3, r0
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006580:	f7ff ff42 	bl	8006408 <__NVIC_GetPriorityGrouping>
 8006584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	6978      	ldr	r0, [r7, #20]
 800658c:	f7ff ff90 	bl	80064b0 <NVIC_EncodePriority>
 8006590:	4602      	mov	r2, r0
 8006592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006596:	4611      	mov	r1, r2
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ff5f 	bl	800645c <__NVIC_SetPriority>
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	4603      	mov	r3, r0
 80065ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff ff35 	bl	8006424 <__NVIC_EnableIRQ>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ffa2 	bl	8006514 <SysTick_Config>
 80065d0:	4603      	mov	r3, r0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e043      	b.n	800667a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <HAL_DMA_Init+0xa8>)
 80065fa:	4413      	add	r3, r2
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <HAL_DMA_Init+0xac>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	009a      	lsls	r2, r3, #2
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1f      	ldr	r2, [pc, #124]	; (800668c <HAL_DMA_Init+0xb0>)
 800660e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006626:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800662a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr
 8006684:	bffdfff8 	.word	0xbffdfff8
 8006688:	cccccccd 	.word	0xcccccccd
 800668c:	40020000 	.word	0x40020000

08006690 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_DMA_Start_IT+0x20>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e04a      	b.n	8006746 <HAL_DMA_Start_IT+0xb6>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d13a      	bne.n	8006738 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f9ae 	bl	8006a48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 020e 	orr.w	r2, r2, #14
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e00f      	b.n	8006726 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0204 	bic.w	r2, r2, #4
 8006714:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 020a 	orr.w	r2, r2, #10
 8006724:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e005      	b.n	8006744 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006740:	2302      	movs	r3, #2
 8006742:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006762:	2b02      	cmp	r3, #2
 8006764:	d005      	beq.n	8006772 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2204      	movs	r2, #4
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
 8006770:	e051      	b.n	8006816 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 020e 	bic.w	r2, r2, #14
 8006780:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_DMA_Abort_IT+0xd0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d029      	beq.n	80067f0 <HAL_DMA_Abort_IT+0xa0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a20      	ldr	r2, [pc, #128]	; (8006824 <HAL_DMA_Abort_IT+0xd4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_DMA_Abort_IT+0x9c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_DMA_Abort_IT+0xd8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01a      	beq.n	80067e6 <HAL_DMA_Abort_IT+0x96>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_DMA_Abort_IT+0xdc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d012      	beq.n	80067e0 <HAL_DMA_Abort_IT+0x90>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_DMA_Abort_IT+0xe0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00a      	beq.n	80067da <HAL_DMA_Abort_IT+0x8a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_DMA_Abort_IT+0xe4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d102      	bne.n	80067d4 <HAL_DMA_Abort_IT+0x84>
 80067ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067d2:	e00e      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067d8:	e00b      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067de:	e008      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e4:	e005      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ea:	e002      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067ec:	2310      	movs	r3, #16
 80067ee:	e000      	b.n	80067f2 <HAL_DMA_Abort_IT+0xa2>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4a11      	ldr	r2, [pc, #68]	; (8006838 <HAL_DMA_Abort_IT+0xe8>)
 80067f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
    } 
  }
  return status;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40020008 	.word	0x40020008
 8006824:	4002001c 	.word	0x4002001c
 8006828:	40020030 	.word	0x40020030
 800682c:	40020044 	.word	0x40020044
 8006830:	40020058 	.word	0x40020058
 8006834:	4002006c 	.word	0x4002006c
 8006838:	40020000 	.word	0x40020000

0800683c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	2204      	movs	r2, #4
 800685a:	409a      	lsls	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d04f      	beq.n	8006904 <HAL_DMA_IRQHandler+0xc8>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d04a      	beq.n	8006904 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0204 	bic.w	r2, r2, #4
 800688a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a66      	ldr	r2, [pc, #408]	; (8006a2c <HAL_DMA_IRQHandler+0x1f0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d029      	beq.n	80068ea <HAL_DMA_IRQHandler+0xae>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a65      	ldr	r2, [pc, #404]	; (8006a30 <HAL_DMA_IRQHandler+0x1f4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d022      	beq.n	80068e6 <HAL_DMA_IRQHandler+0xaa>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a63      	ldr	r2, [pc, #396]	; (8006a34 <HAL_DMA_IRQHandler+0x1f8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01a      	beq.n	80068e0 <HAL_DMA_IRQHandler+0xa4>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a62      	ldr	r2, [pc, #392]	; (8006a38 <HAL_DMA_IRQHandler+0x1fc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d012      	beq.n	80068da <HAL_DMA_IRQHandler+0x9e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a60      	ldr	r2, [pc, #384]	; (8006a3c <HAL_DMA_IRQHandler+0x200>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00a      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x98>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a5f      	ldr	r2, [pc, #380]	; (8006a40 <HAL_DMA_IRQHandler+0x204>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d102      	bne.n	80068ce <HAL_DMA_IRQHandler+0x92>
 80068c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068cc:	e00e      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068d2:	e00b      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068d8:	e008      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068de:	e005      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e4:	e002      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	e000      	b.n	80068ec <HAL_DMA_IRQHandler+0xb0>
 80068ea:	2304      	movs	r3, #4
 80068ec:	4a55      	ldr	r2, [pc, #340]	; (8006a44 <HAL_DMA_IRQHandler+0x208>)
 80068ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8094 	beq.w	8006a22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006902:	e08e      	b.n	8006a22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2202      	movs	r2, #2
 800690a:	409a      	lsls	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d056      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x186>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d051      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 020a 	bic.w	r2, r2, #10
 800693a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a38      	ldr	r2, [pc, #224]	; (8006a2c <HAL_DMA_IRQHandler+0x1f0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d029      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x166>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a37      	ldr	r2, [pc, #220]	; (8006a30 <HAL_DMA_IRQHandler+0x1f4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d022      	beq.n	800699e <HAL_DMA_IRQHandler+0x162>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a35      	ldr	r2, [pc, #212]	; (8006a34 <HAL_DMA_IRQHandler+0x1f8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d01a      	beq.n	8006998 <HAL_DMA_IRQHandler+0x15c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a34      	ldr	r2, [pc, #208]	; (8006a38 <HAL_DMA_IRQHandler+0x1fc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d012      	beq.n	8006992 <HAL_DMA_IRQHandler+0x156>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a32      	ldr	r2, [pc, #200]	; (8006a3c <HAL_DMA_IRQHandler+0x200>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00a      	beq.n	800698c <HAL_DMA_IRQHandler+0x150>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a31      	ldr	r2, [pc, #196]	; (8006a40 <HAL_DMA_IRQHandler+0x204>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d102      	bne.n	8006986 <HAL_DMA_IRQHandler+0x14a>
 8006980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006984:	e00e      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 8006986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800698a:	e00b      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 800698c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006990:	e008      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 8006992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006996:	e005      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 8006998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699c:	e002      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 800699e:	2320      	movs	r3, #32
 80069a0:	e000      	b.n	80069a4 <HAL_DMA_IRQHandler+0x168>
 80069a2:	2302      	movs	r3, #2
 80069a4:	4a27      	ldr	r2, [pc, #156]	; (8006a44 <HAL_DMA_IRQHandler+0x208>)
 80069a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d034      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80069c0:	e02f      	b.n	8006a22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2208      	movs	r2, #8
 80069c8:	409a      	lsls	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d028      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x1e8>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 020e 	bic.w	r2, r2, #14
 80069ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f202 	lsl.w	r2, r1, r2
 80069fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
    }
  }
  return;
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
}
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40020008 	.word	0x40020008
 8006a30:	4002001c 	.word	0x4002001c
 8006a34:	40020030 	.word	0x40020030
 8006a38:	40020044 	.word	0x40020044
 8006a3c:	40020058 	.word	0x40020058
 8006a40:	4002006c 	.word	0x4002006c
 8006a44:	40020000 	.word	0x40020000

08006a48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	2101      	movs	r1, #1
 8006a60:	fa01 f202 	lsl.w	r2, r1, r2
 8006a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d108      	bne.n	8006a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a86:	e007      	b.n	8006a98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b08b      	sub	sp, #44	; 0x2c
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ab6:	e169      	b.n	8006d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ab8:	2201      	movs	r2, #1
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	f040 8158 	bne.w	8006d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4a9a      	ldr	r2, [pc, #616]	; (8006d44 <HAL_GPIO_Init+0x2a0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d05e      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
 8006ae0:	4a98      	ldr	r2, [pc, #608]	; (8006d44 <HAL_GPIO_Init+0x2a0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d875      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006ae6:	4a98      	ldr	r2, [pc, #608]	; (8006d48 <HAL_GPIO_Init+0x2a4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d058      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
 8006aec:	4a96      	ldr	r2, [pc, #600]	; (8006d48 <HAL_GPIO_Init+0x2a4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d86f      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006af2:	4a96      	ldr	r2, [pc, #600]	; (8006d4c <HAL_GPIO_Init+0x2a8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d052      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
 8006af8:	4a94      	ldr	r2, [pc, #592]	; (8006d4c <HAL_GPIO_Init+0x2a8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d869      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006afe:	4a94      	ldr	r2, [pc, #592]	; (8006d50 <HAL_GPIO_Init+0x2ac>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04c      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
 8006b04:	4a92      	ldr	r2, [pc, #584]	; (8006d50 <HAL_GPIO_Init+0x2ac>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d863      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006b0a:	4a92      	ldr	r2, [pc, #584]	; (8006d54 <HAL_GPIO_Init+0x2b0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d046      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
 8006b10:	4a90      	ldr	r2, [pc, #576]	; (8006d54 <HAL_GPIO_Init+0x2b0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d85d      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006b16:	2b12      	cmp	r3, #18
 8006b18:	d82a      	bhi.n	8006b70 <HAL_GPIO_Init+0xcc>
 8006b1a:	2b12      	cmp	r3, #18
 8006b1c:	d859      	bhi.n	8006bd2 <HAL_GPIO_Init+0x12e>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <HAL_GPIO_Init+0x80>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b9f 	.word	0x08006b9f
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b8b 	.word	0x08006b8b
 8006b30:	08006bcd 	.word	0x08006bcd
 8006b34:	08006bd3 	.word	0x08006bd3
 8006b38:	08006bd3 	.word	0x08006bd3
 8006b3c:	08006bd3 	.word	0x08006bd3
 8006b40:	08006bd3 	.word	0x08006bd3
 8006b44:	08006bd3 	.word	0x08006bd3
 8006b48:	08006bd3 	.word	0x08006bd3
 8006b4c:	08006bd3 	.word	0x08006bd3
 8006b50:	08006bd3 	.word	0x08006bd3
 8006b54:	08006bd3 	.word	0x08006bd3
 8006b58:	08006bd3 	.word	0x08006bd3
 8006b5c:	08006bd3 	.word	0x08006bd3
 8006b60:	08006bd3 	.word	0x08006bd3
 8006b64:	08006bd3 	.word	0x08006bd3
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b95 	.word	0x08006b95
 8006b70:	4a79      	ldr	r2, [pc, #484]	; (8006d58 <HAL_GPIO_Init+0x2b4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006b76:	e02c      	b.n	8006bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	623b      	str	r3, [r7, #32]
          break;
 8006b7e:	e029      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	623b      	str	r3, [r7, #32]
          break;
 8006b88:	e024      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	623b      	str	r3, [r7, #32]
          break;
 8006b92:	e01f      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	623b      	str	r3, [r7, #32]
          break;
 8006b9c:	e01a      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	623b      	str	r3, [r7, #32]
          break;
 8006baa:	e013      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d105      	bne.n	8006bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	611a      	str	r2, [r3, #16]
          break;
 8006bbe:	e009      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	615a      	str	r2, [r3, #20]
          break;
 8006bca:	e003      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	623b      	str	r3, [r7, #32]
          break;
 8006bd0:	e000      	b.n	8006bd4 <HAL_GPIO_Init+0x130>
          break;
 8006bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2bff      	cmp	r3, #255	; 0xff
 8006bd8:	d801      	bhi.n	8006bde <HAL_GPIO_Init+0x13a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	e001      	b.n	8006be2 <HAL_GPIO_Init+0x13e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2bff      	cmp	r3, #255	; 0xff
 8006be8:	d802      	bhi.n	8006bf0 <HAL_GPIO_Init+0x14c>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	e002      	b.n	8006bf6 <HAL_GPIO_Init+0x152>
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3b08      	subs	r3, #8
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	210f      	movs	r1, #15
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	6a39      	ldr	r1, [r7, #32]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c10:	431a      	orrs	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80b1 	beq.w	8006d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c24:	4b4d      	ldr	r3, [pc, #308]	; (8006d5c <HAL_GPIO_Init+0x2b8>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	4a4c      	ldr	r2, [pc, #304]	; (8006d5c <HAL_GPIO_Init+0x2b8>)
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	6193      	str	r3, [r2, #24]
 8006c30:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_GPIO_Init+0x2b8>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c3c:	4a48      	ldr	r2, [pc, #288]	; (8006d60 <HAL_GPIO_Init+0x2bc>)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	089b      	lsrs	r3, r3, #2
 8006c42:	3302      	adds	r3, #2
 8006c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	220f      	movs	r2, #15
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a40      	ldr	r2, [pc, #256]	; (8006d64 <HAL_GPIO_Init+0x2c0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_GPIO_Init+0x1ec>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a3f      	ldr	r2, [pc, #252]	; (8006d68 <HAL_GPIO_Init+0x2c4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00d      	beq.n	8006c8c <HAL_GPIO_Init+0x1e8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a3e      	ldr	r2, [pc, #248]	; (8006d6c <HAL_GPIO_Init+0x2c8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <HAL_GPIO_Init+0x1e4>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3d      	ldr	r2, [pc, #244]	; (8006d70 <HAL_GPIO_Init+0x2cc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <HAL_GPIO_Init+0x1e0>
 8006c80:	2303      	movs	r3, #3
 8006c82:	e006      	b.n	8006c92 <HAL_GPIO_Init+0x1ee>
 8006c84:	2304      	movs	r3, #4
 8006c86:	e004      	b.n	8006c92 <HAL_GPIO_Init+0x1ee>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e002      	b.n	8006c92 <HAL_GPIO_Init+0x1ee>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_GPIO_Init+0x1ee>
 8006c90:	2300      	movs	r3, #0
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	f002 0203 	and.w	r2, r2, #3
 8006c98:	0092      	lsls	r2, r2, #2
 8006c9a:	4093      	lsls	r3, r2
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ca2:	492f      	ldr	r1, [pc, #188]	; (8006d60 <HAL_GPIO_Init+0x2bc>)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	089b      	lsrs	r3, r3, #2
 8006ca8:	3302      	adds	r3, #2
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	492c      	ldr	r1, [pc, #176]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	600b      	str	r3, [r1, #0]
 8006cc8:	e006      	b.n	8006cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	4928      	ldr	r1, [pc, #160]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ce4:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	4922      	ldr	r1, [pc, #136]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	e006      	b.n	8006d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	491e      	ldr	r1, [pc, #120]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	4918      	ldr	r1, [pc, #96]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	608b      	str	r3, [r1, #8]
 8006d18:	e006      	b.n	8006d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d1a:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	4914      	ldr	r1, [pc, #80]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d021      	beq.n	8006d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	490e      	ldr	r1, [pc, #56]	; (8006d74 <HAL_GPIO_Init+0x2d0>)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60cb      	str	r3, [r1, #12]
 8006d40:	e021      	b.n	8006d86 <HAL_GPIO_Init+0x2e2>
 8006d42:	bf00      	nop
 8006d44:	10320000 	.word	0x10320000
 8006d48:	10310000 	.word	0x10310000
 8006d4c:	10220000 	.word	0x10220000
 8006d50:	10210000 	.word	0x10210000
 8006d54:	10120000 	.word	0x10120000
 8006d58:	10110000 	.word	0x10110000
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40010800 	.word	0x40010800
 8006d68:	40010c00 	.word	0x40010c00
 8006d6c:	40011000 	.word	0x40011000
 8006d70:	40011400 	.word	0x40011400
 8006d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <HAL_GPIO_Init+0x304>)
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	4909      	ldr	r1, [pc, #36]	; (8006da8 <HAL_GPIO_Init+0x304>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	3301      	adds	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f ae8e 	bne.w	8006ab8 <HAL_GPIO_Init+0x14>
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	372c      	adds	r7, #44	; 0x2c
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr
 8006da8:	40010400 	.word	0x40010400

08006dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	807b      	strh	r3, [r7, #2]
 8006db8:	4613      	mov	r3, r2
 8006dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dbc:	787b      	ldrb	r3, [r7, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dc2:	887a      	ldrh	r2, [r7, #2]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006dc8:	e003      	b.n	8006dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006dca:	887b      	ldrh	r3, [r7, #2]
 8006dcc:	041a      	lsls	r2, r3, #16
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4013      	ands	r3, r2
 8006df4:	041a      	lsls	r2, r3, #16
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	43d9      	mvns	r1, r3
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	400b      	ands	r3, r1
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	611a      	str	r2, [r3, #16]
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
	...

08006e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e12b      	b.n	800707a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb f932 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e74:	f002 f866 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a81      	ldr	r2, [pc, #516]	; (8007084 <HAL_I2C_Init+0x274>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d807      	bhi.n	8006e94 <HAL_I2C_Init+0x84>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a80      	ldr	r2, [pc, #512]	; (8007088 <HAL_I2C_Init+0x278>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	bf94      	ite	ls
 8006e8c:	2301      	movls	r3, #1
 8006e8e:	2300      	movhi	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	e006      	b.n	8006ea2 <HAL_I2C_Init+0x92>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a7d      	ldr	r2, [pc, #500]	; (800708c <HAL_I2C_Init+0x27c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	bf94      	ite	ls
 8006e9c:	2301      	movls	r3, #1
 8006e9e:	2300      	movhi	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e0e7      	b.n	800707a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a78      	ldr	r2, [pc, #480]	; (8007090 <HAL_I2C_Init+0x280>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	0c9b      	lsrs	r3, r3, #18
 8006eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a6a      	ldr	r2, [pc, #424]	; (8007084 <HAL_I2C_Init+0x274>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d802      	bhi.n	8006ee4 <HAL_I2C_Init+0xd4>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	e009      	b.n	8006ef8 <HAL_I2C_Init+0xe8>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	4a69      	ldr	r2, [pc, #420]	; (8007094 <HAL_I2C_Init+0x284>)
 8006ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef4:	099b      	lsrs	r3, r3, #6
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	495c      	ldr	r1, [pc, #368]	; (8007084 <HAL_I2C_Init+0x274>)
 8006f14:	428b      	cmp	r3, r1
 8006f16:	d819      	bhi.n	8006f4c <HAL_I2C_Init+0x13c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	1e59      	subs	r1, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f26:	1c59      	adds	r1, r3, #1
 8006f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_I2C_Init+0x138>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1e59      	subs	r1, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f46:	e051      	b.n	8006fec <HAL_I2C_Init+0x1dc>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	e04f      	b.n	8006fec <HAL_I2C_Init+0x1dc>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d111      	bne.n	8006f78 <HAL_I2C_Init+0x168>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	1e58      	subs	r0, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	440b      	add	r3, r1
 8006f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f66:	3301      	adds	r3, #1
 8006f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e012      	b.n	8006f9e <HAL_I2C_Init+0x18e>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1e58      	subs	r0, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	0099      	lsls	r1, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_I2C_Init+0x196>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e022      	b.n	8006fec <HAL_I2C_Init+0x1dc>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10e      	bne.n	8006fcc <HAL_I2C_Init+0x1bc>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1e58      	subs	r0, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6859      	ldr	r1, [r3, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	440b      	add	r3, r1
 8006fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	e00f      	b.n	8006fec <HAL_I2C_Init+0x1dc>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	1e58      	subs	r0, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6859      	ldr	r1, [r3, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	0099      	lsls	r1, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	6809      	ldr	r1, [r1, #0]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800701a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6911      	ldr	r1, [r2, #16]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68d2      	ldr	r2, [r2, #12]
 8007026:	4311      	orrs	r1, r2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	430b      	orrs	r3, r1
 800702e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	000186a0 	.word	0x000186a0
 8007088:	001e847f 	.word	0x001e847f
 800708c:	003d08ff 	.word	0x003d08ff
 8007090:	431bde83 	.word	0x431bde83
 8007094:	10624dd3 	.word	0x10624dd3

08007098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	460b      	mov	r3, r1
 80070a6:	817b      	strh	r3, [r7, #10]
 80070a8:	4613      	mov	r3, r2
 80070aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070ac:	f7ff f95a 	bl	8006364 <HAL_GetTick>
 80070b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	f040 80e0 	bne.w	8007280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2319      	movs	r3, #25
 80070c6:	2201      	movs	r2, #1
 80070c8:	4970      	ldr	r1, [pc, #448]	; (800728c <HAL_I2C_Master_Transmit+0x1f4>)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f001 f98a 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
 80070d8:	e0d3      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_I2C_Master_Transmit+0x50>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e0cc      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d007      	beq.n	800710e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0201 	orr.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800711c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2221      	movs	r2, #33	; 0x21
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2210      	movs	r2, #16
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	893a      	ldrh	r2, [r7, #8]
 800713e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4a50      	ldr	r2, [pc, #320]	; (8007290 <HAL_I2C_Master_Transmit+0x1f8>)
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007150:	8979      	ldrh	r1, [r7, #10]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	6a3a      	ldr	r2, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fe76 	bl	8007e48 <I2C_MasterRequestWrite>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e08d      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800717c:	e066      	b.n	800724c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	6a39      	ldr	r1, [r7, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f001 fa04 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	2b04      	cmp	r3, #4
 8007194:	d107      	bne.n	80071a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e06b      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d11b      	bne.n	8007220 <HAL_I2C_Master_Transmit+0x188>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d017      	beq.n	8007220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	6a39      	ldr	r1, [r7, #32]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f001 f9f4 	bl	8008612 <I2C_WaitOnBTFFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	2b04      	cmp	r3, #4
 8007236:	d107      	bne.n	8007248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e01a      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007250:	2b00      	cmp	r3, #0
 8007252:	d194      	bne.n	800717e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	00100002 	.word	0x00100002
 8007290:	ffff0000 	.word	0xffff0000

08007294 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08c      	sub	sp, #48	; 0x30
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	461a      	mov	r2, r3
 80072a0:	460b      	mov	r3, r1
 80072a2:	817b      	strh	r3, [r7, #10]
 80072a4:	4613      	mov	r3, r2
 80072a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ac:	f7ff f85a 	bl	8006364 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	f040 823f 	bne.w	800773e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2319      	movs	r3, #25
 80072c6:	2201      	movs	r2, #1
 80072c8:	497f      	ldr	r1, [pc, #508]	; (80074c8 <HAL_I2C_Master_Receive+0x234>)
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f001 f88a 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
 80072d8:	e232      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_I2C_Master_Receive+0x54>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e22b      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d007      	beq.n	800730e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0201 	orr.w	r2, r2, #1
 800730c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800731c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2222      	movs	r2, #34	; 0x22
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2210      	movs	r2, #16
 800732a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	893a      	ldrh	r2, [r7, #8]
 800733e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a5f      	ldr	r2, [pc, #380]	; (80074cc <HAL_I2C_Master_Receive+0x238>)
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007350:	8979      	ldrh	r1, [r7, #10]
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 fdf8 	bl	8007f4c <I2C_MasterRequestRead>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e1ec      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736a:	2b00      	cmp	r3, #0
 800736c:	d113      	bne.n	8007396 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e1c0      	b.n	8007718 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739a:	2b01      	cmp	r3, #1
 800739c:	d11e      	bne.n	80073dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ae:	b672      	cpsid	i
}
 80073b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80073d8:	b662      	cpsie	i
}
 80073da:	e035      	b.n	8007448 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11e      	bne.n	8007422 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80073f4:	b672      	cpsid	i
}
 80073f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800741e:	b662      	cpsie	i
}
 8007420:	e012      	b.n	8007448 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007448:	e166      	b.n	8007718 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744e:	2b03      	cmp	r3, #3
 8007450:	f200 811f 	bhi.w	8007692 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007458:	2b01      	cmp	r3, #1
 800745a:	d123      	bne.n	80074a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800745c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f001 f917 	bl	8008694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e167      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074a2:	e139      	b.n	8007718 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d152      	bne.n	8007552 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <HAL_I2C_Master_Receive+0x23c>)
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 ff94 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d008      	beq.n	80074d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e13c      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
 80074c6:	bf00      	nop
 80074c8:	00100002 	.word	0x00100002
 80074cc:	ffff0000 	.word	0xffff0000
 80074d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80074d4:	b672      	cpsid	i
}
 80074d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800751a:	b662      	cpsie	i
}
 800751c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007550:	e0e2      	b.n	8007718 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	497b      	ldr	r1, [pc, #492]	; (8007748 <HAL_I2C_Master_Receive+0x4b4>)
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 ff41 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0e9      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800757c:	b672      	cpsid	i
}
 800757e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80075b2:	4b66      	ldr	r3, [pc, #408]	; (800774c <HAL_I2C_Master_Receive+0x4b8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	4a65      	ldr	r2, [pc, #404]	; (8007750 <HAL_I2C_Master_Receive+0x4bc>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0a1a      	lsrs	r2, r3, #8
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	00da      	lsls	r2, r3, #3
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d118      	bne.n	800760a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80075fa:	b662      	cpsie	i
}
 80075fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e09a      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b04      	cmp	r3, #4
 8007616:	d1d9      	bne.n	80075cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800765a:	b662      	cpsie	i
}
 800765c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007690:	e042      	b.n	8007718 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fffc 	bl	8008694 <I2C_WaitOnRXNEFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e04c      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d118      	bne.n	8007718 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	2b00      	cmp	r3, #0
 800771e:	f47f ae94 	bne.w	800744a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	e000      	b.n	8007740 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	3728      	adds	r7, #40	; 0x28
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	00010004 	.word	0x00010004
 800774c:	20000018 	.word	0x20000018
 8007750:	14f8b589 	.word	0x14f8b589

08007754 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4603      	mov	r3, r0
 8007764:	817b      	strh	r3, [r7, #10]
 8007766:	460b      	mov	r3, r1
 8007768:	813b      	strh	r3, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800776e:	f7fe fdf9 	bl	8006364 <HAL_GetTick>
 8007772:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	f040 80d9 	bne.w	8007934 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2319      	movs	r3, #25
 8007788:	2201      	movs	r2, #1
 800778a:	496d      	ldr	r1, [pc, #436]	; (8007940 <HAL_I2C_Mem_Write+0x1ec>)
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fe29 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007798:	2302      	movs	r3, #2
 800779a:	e0cc      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_I2C_Mem_Write+0x56>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e0c5      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d007      	beq.n	80077d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2221      	movs	r2, #33	; 0x21
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a3a      	ldr	r2, [r7, #32]
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a4d      	ldr	r2, [pc, #308]	; (8007944 <HAL_I2C_Mem_Write+0x1f0>)
 8007810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007812:	88f8      	ldrh	r0, [r7, #6]
 8007814:	893a      	ldrh	r2, [r7, #8]
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4603      	mov	r3, r0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fc60 	bl	80080e8 <I2C_RequestMemoryWrite>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d052      	beq.n	80078d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e081      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 feaa 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00d      	beq.n	800785e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	2b04      	cmp	r3, #4
 8007848:	d107      	bne.n	800785a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e06b      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d11b      	bne.n	80078d4 <HAL_I2C_Mem_Write+0x180>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d017      	beq.n	80078d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1aa      	bne.n	8007832 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fe96 	bl	8008612 <I2C_WaitOnBTFFlagUntilTimeout>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d107      	bne.n	8007904 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007902:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e016      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	00100002 	.word	0x00100002
 8007944:	ffff0000 	.word	0xffff0000

08007948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007966:	f7fe fcfd 	bl	8006364 <HAL_GetTick>
 800796a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b20      	cmp	r3, #32
 8007976:	f040 8244 	bne.w	8007e02 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2319      	movs	r3, #25
 8007980:	2201      	movs	r2, #1
 8007982:	4982      	ldr	r1, [pc, #520]	; (8007b8c <HAL_I2C_Mem_Read+0x244>)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fd2d 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
 8007992:	e237      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_I2C_Mem_Read+0x5a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e230      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d007      	beq.n	80079c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2222      	movs	r2, #34	; 0x22
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2240      	movs	r2, #64	; 0x40
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80079f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a62      	ldr	r2, [pc, #392]	; (8007b90 <HAL_I2C_Mem_Read+0x248>)
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a0a:	88f8      	ldrh	r0, [r7, #6]
 8007a0c:	893a      	ldrh	r2, [r7, #8]
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4603      	mov	r3, r0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fbfa 	bl	8008214 <I2C_RequestMemoryRead>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e1ec      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d113      	bne.n	8007a5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e1c0      	b.n	8007ddc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d11e      	bne.n	8007aa0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a72:	b672      	cpsid	i
}
 8007a74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007a9c:	b662      	cpsie	i
}
 8007a9e:	e035      	b.n	8007b0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d11e      	bne.n	8007ae6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ab8:	b672      	cpsid	i
}
 8007aba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007ae2:	b662      	cpsie	i
}
 8007ae4:	e012      	b.n	8007b0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007b0c:	e166      	b.n	8007ddc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	f200 811f 	bhi.w	8007d56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d123      	bne.n	8007b68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fdb5 	bl	8008694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e167      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b66:	e139      	b.n	8007ddc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d152      	bne.n	8007c16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	2200      	movs	r2, #0
 8007b78:	4906      	ldr	r1, [pc, #24]	; (8007b94 <HAL_I2C_Mem_Read+0x24c>)
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fc32 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d008      	beq.n	8007b98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e13c      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
 8007b8a:	bf00      	nop
 8007b8c:	00100002 	.word	0x00100002
 8007b90:	ffff0000 	.word	0xffff0000
 8007b94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007b98:	b672      	cpsid	i
}
 8007b9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007bde:	b662      	cpsie	i
}
 8007be0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c14:	e0e2      	b.n	8007ddc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	497b      	ldr	r1, [pc, #492]	; (8007e0c <HAL_I2C_Mem_Read+0x4c4>)
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fbdf 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0e9      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c40:	b672      	cpsid	i
}
 8007c42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691a      	ldr	r2, [r3, #16]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c76:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <HAL_I2C_Mem_Read+0x4c8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	08db      	lsrs	r3, r3, #3
 8007c7c:	4a65      	ldr	r2, [pc, #404]	; (8007e14 <HAL_I2C_Mem_Read+0x4cc>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	0a1a      	lsrs	r2, r3, #8
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	00da      	lsls	r2, r3, #3
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d118      	bne.n	8007cce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007cbe:	b662      	cpsie	i
}
 8007cc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e09a      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d1d9      	bne.n	8007c90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007d1e:	b662      	cpsie	i
}
 8007d20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d54:	e042      	b.n	8007ddc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fc9a 	bl	8008694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e04c      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d118      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f47f ae94 	bne.w	8007b0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e000      	b.n	8007e04 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
  }
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3728      	adds	r7, #40	; 0x28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	00010004 	.word	0x00010004
 8007e10:	20000018 	.word	0x20000018
 8007e14:	14f8b589 	.word	0x14f8b589

08007e18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e26:	b2db      	uxtb	r3, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr

08007e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d006      	beq.n	8007e72 <I2C_MasterRequestWrite+0x2a>
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d003      	beq.n	8007e72 <I2C_MasterRequestWrite+0x2a>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e70:	d108      	bne.n	8007e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e00b      	b.n	8007e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	2b12      	cmp	r3, #18
 8007e8a:	d107      	bne.n	8007e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fa9b 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00d      	beq.n	8007ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	d103      	bne.n	8007ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e035      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed8:	d108      	bne.n	8007eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ee8:	611a      	str	r2, [r3, #16]
 8007eea:	e01b      	b.n	8007f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007eec:	897b      	ldrh	r3, [r7, #10]
 8007eee:	11db      	asrs	r3, r3, #7
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0306 	and.w	r3, r3, #6
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f063 030f 	orn	r3, r3, #15
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	490e      	ldr	r1, [pc, #56]	; (8007f44 <I2C_MasterRequestWrite+0xfc>)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fac1 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e010      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f1a:	897b      	ldrh	r3, [r7, #10]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4907      	ldr	r1, [pc, #28]	; (8007f48 <I2C_MasterRequestWrite+0x100>)
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fab1 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	00010008 	.word	0x00010008
 8007f48:	00010002 	.word	0x00010002

08007f4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	607a      	str	r2, [r7, #4]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d006      	beq.n	8007f86 <I2C_MasterRequestRead+0x3a>
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d003      	beq.n	8007f86 <I2C_MasterRequestRead+0x3a>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f84:	d108      	bne.n	8007f98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e00b      	b.n	8007fb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	2b11      	cmp	r3, #17
 8007f9e:	d107      	bne.n	8007fb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fa11 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd6:	d103      	bne.n	8007fe0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e079      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fec:	d108      	bne.n	8008000 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fee:	897b      	ldrh	r3, [r7, #10]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	611a      	str	r2, [r3, #16]
 8007ffe:	e05f      	b.n	80080c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008000:	897b      	ldrh	r3, [r7, #10]
 8008002:	11db      	asrs	r3, r3, #7
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f063 030f 	orn	r3, r3, #15
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4930      	ldr	r1, [pc, #192]	; (80080e0 <I2C_MasterRequestRead+0x194>)
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fa37 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e054      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800802e:	897b      	ldrh	r3, [r7, #10]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4929      	ldr	r1, [pc, #164]	; (80080e4 <I2C_MasterRequestRead+0x198>)
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fa27 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e044      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008072:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f9af 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d103      	bne.n	80080a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e017      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80080a8:	897b      	ldrh	r3, [r7, #10]
 80080aa:	11db      	asrs	r3, r3, #7
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0306 	and.w	r3, r3, #6
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f063 030e 	orn	r3, r3, #14
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4907      	ldr	r1, [pc, #28]	; (80080e4 <I2C_MasterRequestRead+0x198>)
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f9e3 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	00010008 	.word	0x00010008
 80080e4:	00010002 	.word	0x00010002

080080e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	817b      	strh	r3, [r7, #10]
 80080fa:	460b      	mov	r3, r1
 80080fc:	813b      	strh	r3, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	2200      	movs	r2, #0
 800811a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f960 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00d      	beq.n	8008146 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008138:	d103      	bne.n	8008142 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e05f      	b.n	8008206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008146:	897b      	ldrh	r3, [r7, #10]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	461a      	mov	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	6a3a      	ldr	r2, [r7, #32]
 800815a:	492d      	ldr	r1, [pc, #180]	; (8008210 <I2C_RequestMemoryWrite+0x128>)
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f998 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e04c      	b.n	8008206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008184:	6a39      	ldr	r1, [r7, #32]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fa02 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	2b04      	cmp	r3, #4
 8008198:	d107      	bne.n	80081aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e02b      	b.n	8008206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ae:	88fb      	ldrh	r3, [r7, #6]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d105      	bne.n	80081c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081b4:	893b      	ldrh	r3, [r7, #8]
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	611a      	str	r2, [r3, #16]
 80081be:	e021      	b.n	8008204 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081c0:	893b      	ldrh	r3, [r7, #8]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d0:	6a39      	ldr	r1, [r7, #32]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f9dc 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d107      	bne.n	80081f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e005      	b.n	8008206 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081fa:	893b      	ldrh	r3, [r7, #8]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	00010002 	.word	0x00010002

08008214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	461a      	mov	r2, r3
 8008222:	4603      	mov	r3, r0
 8008224:	817b      	strh	r3, [r7, #10]
 8008226:	460b      	mov	r3, r1
 8008228:	813b      	strh	r3, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800823c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800824c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	2200      	movs	r2, #0
 8008256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f8c2 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008274:	d103      	bne.n	800827e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e0aa      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008282:	897b      	ldrh	r3, [r7, #10]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	4952      	ldr	r1, [pc, #328]	; (80083e0 <I2C_RequestMemoryRead+0x1cc>)
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f8fa 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e097      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	6a39      	ldr	r1, [r7, #32]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f964 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00d      	beq.n	80082ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d107      	bne.n	80082e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e076      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d105      	bne.n	80082fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082f0:	893b      	ldrh	r3, [r7, #8]
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	611a      	str	r2, [r3, #16]
 80082fa:	e021      	b.n	8008340 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082fc:	893b      	ldrh	r3, [r7, #8]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b29b      	uxth	r3, r3
 8008302:	b2da      	uxtb	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800830a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830c:	6a39      	ldr	r1, [r7, #32]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f93e 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00d      	beq.n	8008336 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	2b04      	cmp	r3, #4
 8008320:	d107      	bne.n	8008332 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e050      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008336:	893b      	ldrh	r3, [r7, #8]
 8008338:	b2da      	uxtb	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	6a39      	ldr	r1, [r7, #32]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f923 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00d      	beq.n	800836c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	2b04      	cmp	r3, #4
 8008356:	d107      	bne.n	8008368 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008366:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e035      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2200      	movs	r2, #0
 8008384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f82b 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00d      	beq.n	80083b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	d103      	bne.n	80083ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e013      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083b0:	897b      	ldrh	r3, [r7, #10]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	6a3a      	ldr	r2, [r7, #32]
 80083c4:	4906      	ldr	r1, [pc, #24]	; (80083e0 <I2C_RequestMemoryRead+0x1cc>)
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f863 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	00010002 	.word	0x00010002

080083e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f4:	e025      	b.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d021      	beq.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fe:	f7fd ffb1 	bl	8006364 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d116      	bne.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	f043 0220 	orr.w	r2, r3, #32
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e023      	b.n	800848a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	0c1b      	lsrs	r3, r3, #16
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	d10d      	bne.n	8008468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	43da      	mvns	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4013      	ands	r3, r2
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf0c      	ite	eq
 800845e:	2301      	moveq	r3, #1
 8008460:	2300      	movne	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	e00c      	b.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	43da      	mvns	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf0c      	ite	eq
 800847a:	2301      	moveq	r3, #1
 800847c:	2300      	movne	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d0b6      	beq.n	80083f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
 800849e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084a0:	e051      	b.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b0:	d123      	bne.n	80084fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	f043 0204 	orr.w	r2, r3, #4
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e046      	b.n	8008588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d021      	beq.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008502:	f7fd ff2f 	bl	8006364 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d302      	bcc.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d116      	bne.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f043 0220 	orr.w	r2, r3, #32
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e020      	b.n	8008588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	d10c      	bne.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	43da      	mvns	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4013      	ands	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	bf14      	ite	ne
 8008562:	2301      	movne	r3, #1
 8008564:	2300      	moveq	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	e00b      	b.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	43da      	mvns	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4013      	ands	r3, r2
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	bf14      	ite	ne
 800857c:	2301      	movne	r3, #1
 800857e:	2300      	moveq	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d18d      	bne.n	80084a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800859c:	e02d      	b.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f8ce 	bl	8008740 <I2C_IsAcknowledgeFailed>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e02d      	b.n	800860a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d021      	beq.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b6:	f7fd fed5 	bl	8006364 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d116      	bne.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e007      	b.n	800860a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d1ca      	bne.n	800859e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800861e:	e02d      	b.n	800867c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f88d 	bl	8008740 <I2C_IsAcknowledgeFailed>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e02d      	b.n	800868c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d021      	beq.n	800867c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008638:	f7fd fe94 	bl	8006364 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	429a      	cmp	r2, r3
 8008646:	d302      	bcc.n	800864e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d116      	bne.n	800867c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	f043 0220 	orr.w	r2, r3, #32
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e007      	b.n	800868c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b04      	cmp	r3, #4
 8008688:	d1ca      	bne.n	8008620 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086a0:	e042      	b.n	8008728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	f003 0310 	and.w	r3, r3, #16
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d119      	bne.n	80086e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0210 	mvn.w	r2, #16
 80086b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e029      	b.n	8008738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e4:	f7fd fe3e 	bl	8006364 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d116      	bne.n	8008728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	f043 0220 	orr.w	r2, r3, #32
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e007      	b.n	8008738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d1b5      	bne.n	80086a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008756:	d11b      	bne.n	8008790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	f043 0204 	orr.w	r2, r3, #4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e000      	b.n	8008792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e26c      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8087 	beq.w	80088ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087bc:	4b92      	ldr	r3, [pc, #584]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f003 030c 	and.w	r3, r3, #12
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d00c      	beq.n	80087e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80087c8:	4b8f      	ldr	r3, [pc, #572]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f003 030c 	and.w	r3, r3, #12
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d112      	bne.n	80087fa <HAL_RCC_OscConfig+0x5e>
 80087d4:	4b8c      	ldr	r3, [pc, #560]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e0:	d10b      	bne.n	80087fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e2:	4b89      	ldr	r3, [pc, #548]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d06c      	beq.n	80088c8 <HAL_RCC_OscConfig+0x12c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d168      	bne.n	80088c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e246      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008802:	d106      	bne.n	8008812 <HAL_RCC_OscConfig+0x76>
 8008804:	4b80      	ldr	r3, [pc, #512]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7f      	ldr	r2, [pc, #508]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800880a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	e02e      	b.n	8008870 <HAL_RCC_OscConfig+0xd4>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <HAL_RCC_OscConfig+0x98>
 800881a:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a7a      	ldr	r2, [pc, #488]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	4b78      	ldr	r3, [pc, #480]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a77      	ldr	r2, [pc, #476]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800882c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e01d      	b.n	8008870 <HAL_RCC_OscConfig+0xd4>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800883c:	d10c      	bne.n	8008858 <HAL_RCC_OscConfig+0xbc>
 800883e:	4b72      	ldr	r3, [pc, #456]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a71      	ldr	r2, [pc, #452]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	4b6f      	ldr	r3, [pc, #444]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a6e      	ldr	r2, [pc, #440]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e00b      	b.n	8008870 <HAL_RCC_OscConfig+0xd4>
 8008858:	4b6b      	ldr	r3, [pc, #428]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a6a      	ldr	r2, [pc, #424]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800885e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	4b68      	ldr	r3, [pc, #416]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a67      	ldr	r2, [pc, #412]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800886a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800886e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d013      	beq.n	80088a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008878:	f7fd fd74 	bl	8006364 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008880:	f7fd fd70 	bl	8006364 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b64      	cmp	r3, #100	; 0x64
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e1fa      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008892:	4b5d      	ldr	r3, [pc, #372]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0xe4>
 800889e:	e014      	b.n	80088ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a0:	f7fd fd60 	bl	8006364 <HAL_GetTick>
 80088a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088a8:	f7fd fd5c 	bl	8006364 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b64      	cmp	r3, #100	; 0x64
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e1e6      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ba:	4b53      	ldr	r3, [pc, #332]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1f0      	bne.n	80088a8 <HAL_RCC_OscConfig+0x10c>
 80088c6:	e000      	b.n	80088ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d063      	beq.n	800899e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088d6:	4b4c      	ldr	r3, [pc, #304]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f003 030c 	and.w	r3, r3, #12
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80088e2:	4b49      	ldr	r3, [pc, #292]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f003 030c 	and.w	r3, r3, #12
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d11c      	bne.n	8008928 <HAL_RCC_OscConfig+0x18c>
 80088ee:	4b46      	ldr	r3, [pc, #280]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d116      	bne.n	8008928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088fa:	4b43      	ldr	r3, [pc, #268]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <HAL_RCC_OscConfig+0x176>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d001      	beq.n	8008912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e1ba      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008912:	4b3d      	ldr	r3, [pc, #244]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	4939      	ldr	r1, [pc, #228]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008926:	e03a      	b.n	800899e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d020      	beq.n	8008972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008930:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCC_OscConfig+0x270>)
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008936:	f7fd fd15 	bl	8006364 <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800893c:	e008      	b.n	8008950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893e:	f7fd fd11 	bl	8006364 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e19b      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008950:	4b2d      	ldr	r3, [pc, #180]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f0      	beq.n	800893e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	4927      	ldr	r1, [pc, #156]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]
 8008970:	e015      	b.n	800899e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008972:	4b26      	ldr	r3, [pc, #152]	; (8008a0c <HAL_RCC_OscConfig+0x270>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008978:	f7fd fcf4 	bl	8006364 <HAL_GetTick>
 800897c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800897e:	e008      	b.n	8008992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008980:	f7fd fcf0 	bl	8006364 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e17a      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008992:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f0      	bne.n	8008980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d03a      	beq.n	8008a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d019      	beq.n	80089e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <HAL_RCC_OscConfig+0x274>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089b8:	f7fd fcd4 	bl	8006364 <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c0:	f7fd fcd0 	bl	8006364 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e15a      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <HAL_RCC_OscConfig+0x26c>)
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80089de:	2001      	movs	r0, #1
 80089e0:	f000 fad8 	bl	8008f94 <RCC_Delay>
 80089e4:	e01c      	b.n	8008a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <HAL_RCC_OscConfig+0x274>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ec:	f7fd fcba 	bl	8006364 <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f2:	e00f      	b.n	8008a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089f4:	f7fd fcb6 	bl	8006364 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d908      	bls.n	8008a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e140      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
 8008a06:	bf00      	nop
 8008a08:	40021000 	.word	0x40021000
 8008a0c:	42420000 	.word	0x42420000
 8008a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a14:	4b9e      	ldr	r3, [pc, #632]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e9      	bne.n	80089f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a6 	beq.w	8008b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a32:	4b97      	ldr	r3, [pc, #604]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a3e:	4b94      	ldr	r3, [pc, #592]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	4a93      	ldr	r2, [pc, #588]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a48:	61d3      	str	r3, [r2, #28]
 8008a4a:	4b91      	ldr	r3, [pc, #580]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a52:	60bb      	str	r3, [r7, #8]
 8008a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a56:	2301      	movs	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a5a:	4b8e      	ldr	r3, [pc, #568]	; (8008c94 <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d118      	bne.n	8008a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a66:	4b8b      	ldr	r3, [pc, #556]	; (8008c94 <HAL_RCC_OscConfig+0x4f8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a8a      	ldr	r2, [pc, #552]	; (8008c94 <HAL_RCC_OscConfig+0x4f8>)
 8008a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a72:	f7fd fc77 	bl	8006364 <HAL_GetTick>
 8008a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a78:	e008      	b.n	8008a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a7a:	f7fd fc73 	bl	8006364 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b64      	cmp	r3, #100	; 0x64
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e0fd      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a8c:	4b81      	ldr	r3, [pc, #516]	; (8008c94 <HAL_RCC_OscConfig+0x4f8>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0f0      	beq.n	8008a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d106      	bne.n	8008aae <HAL_RCC_OscConfig+0x312>
 8008aa0:	4b7b      	ldr	r3, [pc, #492]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	4a7a      	ldr	r2, [pc, #488]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	6213      	str	r3, [r2, #32]
 8008aac:	e02d      	b.n	8008b0a <HAL_RCC_OscConfig+0x36e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10c      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x334>
 8008ab6:	4b76      	ldr	r3, [pc, #472]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	4a75      	ldr	r2, [pc, #468]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	6213      	str	r3, [r2, #32]
 8008ac2:	4b73      	ldr	r3, [pc, #460]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	4a72      	ldr	r2, [pc, #456]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ac8:	f023 0304 	bic.w	r3, r3, #4
 8008acc:	6213      	str	r3, [r2, #32]
 8008ace:	e01c      	b.n	8008b0a <HAL_RCC_OscConfig+0x36e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d10c      	bne.n	8008af2 <HAL_RCC_OscConfig+0x356>
 8008ad8:	4b6d      	ldr	r3, [pc, #436]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	4a6c      	ldr	r2, [pc, #432]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ade:	f043 0304 	orr.w	r3, r3, #4
 8008ae2:	6213      	str	r3, [r2, #32]
 8008ae4:	4b6a      	ldr	r3, [pc, #424]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	4a69      	ldr	r2, [pc, #420]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008aea:	f043 0301 	orr.w	r3, r3, #1
 8008aee:	6213      	str	r3, [r2, #32]
 8008af0:	e00b      	b.n	8008b0a <HAL_RCC_OscConfig+0x36e>
 8008af2:	4b67      	ldr	r3, [pc, #412]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	4a66      	ldr	r2, [pc, #408]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	6213      	str	r3, [r2, #32]
 8008afe:	4b64      	ldr	r3, [pc, #400]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	4a63      	ldr	r2, [pc, #396]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b04:	f023 0304 	bic.w	r3, r3, #4
 8008b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b12:	f7fd fc27 	bl	8006364 <HAL_GetTick>
 8008b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b18:	e00a      	b.n	8008b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b1a:	f7fd fc23 	bl	8006364 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e0ab      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b30:	4b57      	ldr	r3, [pc, #348]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0ee      	beq.n	8008b1a <HAL_RCC_OscConfig+0x37e>
 8008b3c:	e014      	b.n	8008b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b3e:	f7fd fc11 	bl	8006364 <HAL_GetTick>
 8008b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b44:	e00a      	b.n	8008b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b46:	f7fd fc0d 	bl	8006364 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e095      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b5c:	4b4c      	ldr	r3, [pc, #304]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1ee      	bne.n	8008b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d105      	bne.n	8008b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b6e:	4b48      	ldr	r3, [pc, #288]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4a47      	ldr	r2, [pc, #284]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8081 	beq.w	8008c86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b84:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f003 030c 	and.w	r3, r3, #12
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d061      	beq.n	8008c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d146      	bne.n	8008c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b98:	4b3f      	ldr	r3, [pc, #252]	; (8008c98 <HAL_RCC_OscConfig+0x4fc>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9e:	f7fd fbe1 	bl	8006364 <HAL_GetTick>
 8008ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ba4:	e008      	b.n	8008bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba6:	f7fd fbdd 	bl	8006364 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e067      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bb8:	4b35      	ldr	r3, [pc, #212]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f0      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bcc:	d108      	bne.n	8008be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008bce:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	492d      	ldr	r1, [pc, #180]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008be0:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a19      	ldr	r1, [r3, #32]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	4927      	ldr	r1, [pc, #156]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bf8:	4b27      	ldr	r3, [pc, #156]	; (8008c98 <HAL_RCC_OscConfig+0x4fc>)
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bfe:	f7fd fbb1 	bl	8006364 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c06:	f7fd fbad 	bl	8006364 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e037      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c18:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0f0      	beq.n	8008c06 <HAL_RCC_OscConfig+0x46a>
 8008c24:	e02f      	b.n	8008c86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c26:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <HAL_RCC_OscConfig+0x4fc>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2c:	f7fd fb9a 	bl	8006364 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c34:	f7fd fb96 	bl	8006364 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e020      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c46:	4b12      	ldr	r3, [pc, #72]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f0      	bne.n	8008c34 <HAL_RCC_OscConfig+0x498>
 8008c52:	e018      	b.n	8008c86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e013      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <HAL_RCC_OscConfig+0x4f4>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d106      	bne.n	8008c82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d001      	beq.n	8008c86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40021000 	.word	0x40021000
 8008c94:	40007000 	.word	0x40007000
 8008c98:	42420060 	.word	0x42420060

08008c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0d0      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cb0:	4b6a      	ldr	r3, [pc, #424]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d910      	bls.n	8008ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cbe:	4b67      	ldr	r3, [pc, #412]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f023 0207 	bic.w	r2, r3, #7
 8008cc6:	4965      	ldr	r1, [pc, #404]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cce:	4b63      	ldr	r3, [pc, #396]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d001      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e0b8      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d020      	beq.n	8008d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cf8:	4b59      	ldr	r3, [pc, #356]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a58      	ldr	r2, [pc, #352]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d10:	4b53      	ldr	r3, [pc, #332]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	4a52      	ldr	r2, [pc, #328]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d1c:	4b50      	ldr	r3, [pc, #320]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	494d      	ldr	r1, [pc, #308]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d040      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d107      	bne.n	8008d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d42:	4b47      	ldr	r3, [pc, #284]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d115      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e07f      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d107      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d5a:	4b41      	ldr	r3, [pc, #260]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e073      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6a:	4b3d      	ldr	r3, [pc, #244]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e06b      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d7a:	4b39      	ldr	r3, [pc, #228]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f023 0203 	bic.w	r2, r3, #3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4936      	ldr	r1, [pc, #216]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d8c:	f7fd faea 	bl	8006364 <HAL_GetTick>
 8008d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d92:	e00a      	b.n	8008daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d94:	f7fd fae6 	bl	8006364 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e053      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008daa:	4b2d      	ldr	r3, [pc, #180]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f003 020c 	and.w	r2, r3, #12
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d1eb      	bne.n	8008d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dbc:	4b27      	ldr	r3, [pc, #156]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0307 	and.w	r3, r3, #7
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d210      	bcs.n	8008dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dca:	4b24      	ldr	r3, [pc, #144]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 0207 	bic.w	r2, r3, #7
 8008dd2:	4922      	ldr	r1, [pc, #136]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dda:	4b20      	ldr	r3, [pc, #128]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d001      	beq.n	8008dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e032      	b.n	8008e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df8:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	4916      	ldr	r1, [pc, #88]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d009      	beq.n	8008e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e16:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	490e      	ldr	r1, [pc, #56]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e2a:	f000 f821 	bl	8008e70 <HAL_RCC_GetSysClockFreq>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	091b      	lsrs	r3, r3, #4
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	490a      	ldr	r1, [pc, #40]	; (8008e64 <HAL_RCC_ClockConfig+0x1c8>)
 8008e3c:	5ccb      	ldrb	r3, [r1, r3]
 8008e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <HAL_RCC_ClockConfig+0x1cc>)
 8008e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <HAL_RCC_ClockConfig+0x1d0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd fa48 	bl	80062e0 <HAL_InitTick>

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40022000 	.word	0x40022000
 8008e60:	40021000 	.word	0x40021000
 8008e64:	08012368 	.word	0x08012368
 8008e68:	20000018 	.word	0x20000018
 8008e6c:	2000001c 	.word	0x2000001c

08008e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e70:	b490      	push	{r4, r7}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e76:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e78:	1d3c      	adds	r4, r7, #4
 8008e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e80:	f240 2301 	movw	r3, #513	; 0x201
 8008e84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e9a:	4b22      	ldr	r3, [pc, #136]	; (8008f24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f003 030c 	and.w	r3, r3, #12
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d002      	beq.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d003      	beq.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x46>
 8008eae:	e02d      	b.n	8008f0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eb2:	623b      	str	r3, [r7, #32]
      break;
 8008eb4:	e02d      	b.n	8008f12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	0c9b      	lsrs	r3, r3, #18
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008ec8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d013      	beq.n	8008efc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ed4:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	0c5b      	lsrs	r3, r3, #17
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ee8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	4a0e      	ldr	r2, [pc, #56]	; (8008f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eee:	fb02 f203 	mul.w	r2, r2, r3
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8008efa:	e004      	b.n	8008f06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	4a0b      	ldr	r2, [pc, #44]	; (8008f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	623b      	str	r3, [r7, #32]
      break;
 8008f0a:	e002      	b.n	8008f12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f0e:	623b      	str	r3, [r7, #32]
      break;
 8008f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f12:	6a3b      	ldr	r3, [r7, #32]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3728      	adds	r7, #40	; 0x28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bc90      	pop	{r4, r7}
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	08012358 	.word	0x08012358
 8008f24:	40021000 	.word	0x40021000
 8008f28:	007a1200 	.word	0x007a1200
 8008f2c:	003d0900 	.word	0x003d0900

08008f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f34:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8008f36:	681b      	ldr	r3, [r3, #0]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr
 8008f40:	20000018 	.word	0x20000018

08008f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f48:	f7ff fff2 	bl	8008f30 <HAL_RCC_GetHCLKFreq>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	4903      	ldr	r1, [pc, #12]	; (8008f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40021000 	.word	0x40021000
 8008f68:	08012378 	.word	0x08012378

08008f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f70:	f7ff ffde 	bl	8008f30 <HAL_RCC_GetHCLKFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	0adb      	lsrs	r3, r3, #11
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4903      	ldr	r1, [pc, #12]	; (8008f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	08012378 	.word	0x08012378

08008f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <RCC_Delay+0x34>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <RCC_Delay+0x38>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	0a5b      	lsrs	r3, r3, #9
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	fb02 f303 	mul.w	r3, r2, r3
 8008fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008fb0:	bf00      	nop
  }
  while (Delay --);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1e5a      	subs	r2, r3, #1
 8008fb6:	60fa      	str	r2, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f9      	bne.n	8008fb0 <RCC_Delay+0x1c>
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr
 8008fc8:	20000018 	.word	0x20000018
 8008fcc:	10624dd3 	.word	0x10624dd3

08008fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e076      	b.n	80090d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d108      	bne.n	8008ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff2:	d009      	beq.n	8009008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	61da      	str	r2, [r3, #28]
 8008ffa:	e005      	b.n	8009008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fc fb3c 	bl	80056a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908c:	ea42 0103 	orr.w	r1, r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	0c1a      	lsrs	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f002 0204 	and.w	r2, r2, #4
 80090ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_SPI_Transmit+0x22>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e126      	b.n	8009348 <HAL_SPI_Transmit+0x270>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009102:	f7fd f92f 	bl	8006364 <HAL_GetTick>
 8009106:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b01      	cmp	r3, #1
 8009116:	d002      	beq.n	800911e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009118:	2302      	movs	r3, #2
 800911a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800911c:	e10b      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <HAL_SPI_Transmit+0x52>
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800912e:	e102      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2203      	movs	r2, #3
 8009134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009176:	d10f      	bne.n	8009198 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009186:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009196:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d007      	beq.n	80091b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091be:	d14b      	bne.n	8009258 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_SPI_Transmit+0xf6>
 80091c8:	8afb      	ldrh	r3, [r7, #22]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d13e      	bne.n	800924c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091f2:	e02b      	b.n	800924c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d112      	bne.n	8009228 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	881a      	ldrh	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	1c9a      	adds	r2, r3, #2
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	86da      	strh	r2, [r3, #54]	; 0x36
 8009226:	e011      	b.n	800924c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009228:	f7fd f89c 	bl	8006364 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d803      	bhi.n	8009240 <HAL_SPI_Transmit+0x168>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d102      	bne.n	8009246 <HAL_SPI_Transmit+0x16e>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	77fb      	strb	r3, [r7, #31]
          goto error;
 800924a:	e074      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1ce      	bne.n	80091f4 <HAL_SPI_Transmit+0x11c>
 8009256:	e04c      	b.n	80092f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Transmit+0x18e>
 8009260:	8afb      	ldrh	r3, [r7, #22]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d140      	bne.n	80092e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800928c:	e02c      	b.n	80092e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d113      	bne.n	80092c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80092c2:	e011      	b.n	80092e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092c4:	f7fd f84e 	bl	8006364 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d803      	bhi.n	80092dc <HAL_SPI_Transmit+0x204>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d102      	bne.n	80092e2 <HAL_SPI_Transmit+0x20a>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092e6:	e026      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1cd      	bne.n	800928e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fbb8 	bl	8009a6c <SPI_EndRxTxTransaction>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e000      	b.n	8009336 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009334:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009346:	7ffb      	ldrb	r3, [r7, #31]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3720      	adds	r7, #32
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936c:	d112      	bne.n	8009394 <HAL_SPI_Receive+0x44>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10e      	bne.n	8009394 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2204      	movs	r2, #4
 800937a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	4613      	mov	r3, r2
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f8f1 	bl	8009572 <HAL_SPI_TransmitReceive>
 8009390:	4603      	mov	r3, r0
 8009392:	e0ea      	b.n	800956a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_SPI_Receive+0x52>
 800939e:	2302      	movs	r3, #2
 80093a0:	e0e3      	b.n	800956a <HAL_SPI_Receive+0x21a>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093aa:	f7fc ffdb 	bl	8006364 <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d002      	beq.n	80093c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
 80093be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093c0:	e0ca      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_SPI_Receive+0x7e>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093d2:	e0c1      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2204      	movs	r2, #4
 80093d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	88fa      	ldrh	r2, [r7, #6]
 80093ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	88fa      	ldrh	r2, [r7, #6]
 80093f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941a:	d10f      	bne.n	800943c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800943a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b40      	cmp	r3, #64	; 0x40
 8009448:	d007      	beq.n	800945a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d162      	bne.n	8009528 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009462:	e02e      	b.n	80094c2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	d115      	bne.n	800949e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f103 020c 	add.w	r2, r3, #12
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800949c:	e011      	b.n	80094c2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800949e:	f7fc ff61 	bl	8006364 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d803      	bhi.n	80094b6 <HAL_SPI_Receive+0x166>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d102      	bne.n	80094bc <HAL_SPI_Receive+0x16c>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094c0:	e04a      	b.n	8009558 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1cb      	bne.n	8009464 <HAL_SPI_Receive+0x114>
 80094cc:	e031      	b.n	8009532 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d113      	bne.n	8009504 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	b292      	uxth	r2, r2
 80094e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	1c9a      	adds	r2, r3, #2
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009502:	e011      	b.n	8009528 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009504:	f7fc ff2e 	bl	8006364 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d803      	bhi.n	800951c <HAL_SPI_Receive+0x1cc>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d102      	bne.n	8009522 <HAL_SPI_Receive+0x1d2>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009526:	e017      	b.n	8009558 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1cd      	bne.n	80094ce <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fa46 	bl	80099c8 <SPI_EndRxTransaction>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	75fb      	strb	r3, [r7, #23]
 8009554:	e000      	b.n	8009558 <HAL_SPI_Receive+0x208>
  }

error :
 8009556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b08c      	sub	sp, #48	; 0x30
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009580:	2301      	movs	r3, #1
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x26>
 8009594:	2302      	movs	r3, #2
 8009596:	e18a      	b.n	80098ae <HAL_SPI_TransmitReceive+0x33c>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095a0:	f7fc fee0 	bl	8006364 <HAL_GetTick>
 80095a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095b6:	887b      	ldrh	r3, [r7, #2]
 80095b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d00f      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x70>
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c8:	d107      	bne.n	80095da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <HAL_SPI_TransmitReceive+0x68>
 80095d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d003      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80095da:	2302      	movs	r3, #2
 80095dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095e0:	e15b      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <HAL_SPI_TransmitReceive+0x82>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_SPI_TransmitReceive+0x82>
 80095ee:	887b      	ldrh	r3, [r7, #2]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d103      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095fa:	e14e      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b04      	cmp	r3, #4
 8009606:	d003      	beq.n	8009610 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2205      	movs	r2, #5
 800960c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	887a      	ldrh	r2, [r7, #2]
 8009620:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	887a      	ldrh	r2, [r7, #2]
 8009626:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	887a      	ldrh	r2, [r7, #2]
 8009632:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b40      	cmp	r3, #64	; 0x40
 8009652:	d007      	beq.n	8009664 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800966c:	d178      	bne.n	8009760 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_SPI_TransmitReceive+0x10a>
 8009676:	8b7b      	ldrh	r3, [r7, #26]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d166      	bne.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009680:	881a      	ldrh	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	1c9a      	adds	r2, r3, #2
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a0:	e053      	b.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d11b      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d113      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	881a      	ldrh	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d119      	bne.n	800972a <HAL_SPI_TransmitReceive+0x1b8>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d014      	beq.n	800972a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	b292      	uxth	r2, r2
 800970c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	1c9a      	adds	r2, r3, #2
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800971c:	b29b      	uxth	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009726:	2301      	movs	r3, #1
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800972a:	f7fc fe1b 	bl	8006364 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009736:	429a      	cmp	r2, r3
 8009738:	d807      	bhi.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d003      	beq.n	800974a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009748:	e0a7      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974e:	b29b      	uxth	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1a6      	bne.n	80096a2 <HAL_SPI_TransmitReceive+0x130>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009758:	b29b      	uxth	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1a1      	bne.n	80096a2 <HAL_SPI_TransmitReceive+0x130>
 800975e:	e07c      	b.n	800985a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_SPI_TransmitReceive+0x1fc>
 8009768:	8b7b      	ldrh	r3, [r7, #26]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d16b      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009794:	e057      	b.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d11c      	bne.n	80097de <HAL_SPI_TransmitReceive+0x26c>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <HAL_SPI_TransmitReceive+0x26c>
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d114      	bne.n	80097de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	330c      	adds	r3, #12
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d119      	bne.n	8009820 <HAL_SPI_TransmitReceive+0x2ae>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800981c:	2301      	movs	r3, #1
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009820:	f7fc fda0 	bl	8006364 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800982c:	429a      	cmp	r2, r3
 800982e:	d803      	bhi.n	8009838 <HAL_SPI_TransmitReceive+0x2c6>
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d102      	bne.n	800983e <HAL_SPI_TransmitReceive+0x2cc>
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009844:	e029      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1a2      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x224>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d19d      	bne.n	8009796 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f904 	bl	8009a6c <SPI_EndRxTxTransaction>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d006      	beq.n	8009878 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009876:	e010      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	e000      	b.n	800989a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009898:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3730      	adds	r7, #48	; 0x30
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098c8:	f7fc fd4c 	bl	8006364 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	1a9b      	subs	r3, r3, r2
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098d8:	f7fc fd44 	bl	8006364 <HAL_GetTick>
 80098dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098de:	4b39      	ldr	r3, [pc, #228]	; (80099c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	015b      	lsls	r3, r3, #5
 80098e4:	0d1b      	lsrs	r3, r3, #20
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	fb02 f303 	mul.w	r3, r2, r3
 80098ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ee:	e054      	b.n	800999a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d050      	beq.n	800999a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098f8:	f7fc fd34 	bl	8006364 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	429a      	cmp	r2, r3
 8009906:	d902      	bls.n	800990e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d13d      	bne.n	800998a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800991c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009926:	d111      	bne.n	800994c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009930:	d004      	beq.n	800993c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993a:	d107      	bne.n	800994c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009954:	d10f      	bne.n	8009976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e017      	b.n	80099ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	3b01      	subs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4013      	ands	r3, r2
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	bf0c      	ite	eq
 80099aa:	2301      	moveq	r3, #1
 80099ac:	2300      	movne	r3, #0
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d19b      	bne.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3720      	adds	r7, #32
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000018 	.word	0x20000018

080099c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099dc:	d111      	bne.n	8009a02 <SPI_EndRxTransaction+0x3a>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e6:	d004      	beq.n	80099f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f0:	d107      	bne.n	8009a02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a00:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0a:	d117      	bne.n	8009a3c <SPI_EndRxTransaction+0x74>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a14:	d112      	bne.n	8009a3c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2101      	movs	r1, #1
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff ff49 	bl	80098b8 <SPI_WaitFlagStateUntilTimeout>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01a      	beq.n	8009a62 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a30:	f043 0220 	orr.w	r2, r3, #32
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e013      	b.n	8009a64 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	2180      	movs	r1, #128	; 0x80
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7ff ff36 	bl	80098b8 <SPI_WaitFlagStateUntilTimeout>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d007      	beq.n	8009a62 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a56:	f043 0220 	orr.w	r2, r3, #32
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e000      	b.n	8009a64 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2180      	movs	r1, #128	; 0x80
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7ff ff18 	bl	80098b8 <SPI_WaitFlagStateUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	f043 0220 	orr.w	r2, r3, #32
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e000      	b.n	8009aa0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e041      	b.n	8009b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7fc f964 	bl	8005d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f000 fe98 	bl	800a81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d001      	beq.n	8009b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e032      	b.n	8009bc6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a18      	ldr	r2, [pc, #96]	; (8009bd0 <HAL_TIM_Base_Start+0x88>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00e      	beq.n	8009b90 <HAL_TIM_Base_Start+0x48>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7a:	d009      	beq.n	8009b90 <HAL_TIM_Base_Start+0x48>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <HAL_TIM_Base_Start+0x8c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d004      	beq.n	8009b90 <HAL_TIM_Base_Start+0x48>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a13      	ldr	r2, [pc, #76]	; (8009bd8 <HAL_TIM_Base_Start+0x90>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d111      	bne.n	8009bb4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d010      	beq.n	8009bc4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0201 	orr.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb2:	e007      	b.n	8009bc4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0201 	orr.w	r2, r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc80      	pop	{r7}
 8009bce:	4770      	bx	lr
 8009bd0:	40012c00 	.word	0x40012c00
 8009bd4:	40000400 	.word	0x40000400
 8009bd8:	40000800 	.word	0x40000800

08009bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d001      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e03a      	b.n	8009c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0201 	orr.w	r2, r2, #1
 8009c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <HAL_TIM_Base_Start_IT+0x98>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d00e      	beq.n	8009c34 <HAL_TIM_Base_Start_IT+0x58>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c1e:	d009      	beq.n	8009c34 <HAL_TIM_Base_Start_IT+0x58>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d004      	beq.n	8009c34 <HAL_TIM_Base_Start_IT+0x58>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a13      	ldr	r2, [pc, #76]	; (8009c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d111      	bne.n	8009c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b06      	cmp	r3, #6
 8009c44:	d010      	beq.n	8009c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0201 	orr.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c56:	e007      	b.n	8009c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0201 	orr.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bc80      	pop	{r7}
 8009c72:	4770      	bx	lr
 8009c74:	40012c00 	.word	0x40012c00
 8009c78:	40000400 	.word	0x40000400
 8009c7c:	40000800 	.word	0x40000800

08009c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e041      	b.n	8009d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d106      	bne.n	8009cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fc f85a 	bl	8005d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	f000 fdac 	bl	800a81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d109      	bne.n	8009d44 <HAL_TIM_PWM_Start+0x24>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	bf14      	ite	ne
 8009d3c:	2301      	movne	r3, #1
 8009d3e:	2300      	moveq	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	e022      	b.n	8009d8a <HAL_TIM_PWM_Start+0x6a>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d109      	bne.n	8009d5e <HAL_TIM_PWM_Start+0x3e>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	bf14      	ite	ne
 8009d56:	2301      	movne	r3, #1
 8009d58:	2300      	moveq	r3, #0
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	e015      	b.n	8009d8a <HAL_TIM_PWM_Start+0x6a>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d109      	bne.n	8009d78 <HAL_TIM_PWM_Start+0x58>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	e008      	b.n	8009d8a <HAL_TIM_PWM_Start+0x6a>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e05e      	b.n	8009e50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <HAL_TIM_PWM_Start+0x82>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009da0:	e013      	b.n	8009dca <HAL_TIM_PWM_Start+0xaa>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	d104      	bne.n	8009db2 <HAL_TIM_PWM_Start+0x92>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2202      	movs	r2, #2
 8009dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009db0:	e00b      	b.n	8009dca <HAL_TIM_PWM_Start+0xaa>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d104      	bne.n	8009dc2 <HAL_TIM_PWM_Start+0xa2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc0:	e003      	b.n	8009dca <HAL_TIM_PWM_Start+0xaa>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 f8af 	bl	800af36 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1e      	ldr	r2, [pc, #120]	; (8009e58 <HAL_TIM_PWM_Start+0x138>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d107      	bne.n	8009df2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a18      	ldr	r2, [pc, #96]	; (8009e58 <HAL_TIM_PWM_Start+0x138>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_TIM_PWM_Start+0xfa>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e04:	d009      	beq.n	8009e1a <HAL_TIM_PWM_Start+0xfa>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a14      	ldr	r2, [pc, #80]	; (8009e5c <HAL_TIM_PWM_Start+0x13c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIM_PWM_Start+0xfa>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a12      	ldr	r2, [pc, #72]	; (8009e60 <HAL_TIM_PWM_Start+0x140>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d111      	bne.n	8009e3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d010      	beq.n	8009e4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	e007      	b.n	8009e4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40012c00 	.word	0x40012c00
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800

08009e64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e041      	b.n	8009efa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f839 	bl	8009f02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f000 fcba 	bl	800a81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bc80      	pop	{r7}
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <HAL_TIM_IC_Start_IT+0x1a>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	e013      	b.n	8009f56 <HAL_TIM_IC_Start_IT+0x42>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d104      	bne.n	8009f3e <HAL_TIM_IC_Start_IT+0x2a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	e00b      	b.n	8009f56 <HAL_TIM_IC_Start_IT+0x42>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d104      	bne.n	8009f4e <HAL_TIM_IC_Start_IT+0x3a>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	e003      	b.n	8009f56 <HAL_TIM_IC_Start_IT+0x42>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <HAL_TIM_IC_Start_IT+0x54>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	e013      	b.n	8009f90 <HAL_TIM_IC_Start_IT+0x7c>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d104      	bne.n	8009f78 <HAL_TIM_IC_Start_IT+0x64>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	e00b      	b.n	8009f90 <HAL_TIM_IC_Start_IT+0x7c>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	d104      	bne.n	8009f88 <HAL_TIM_IC_Start_IT+0x74>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	e003      	b.n	8009f90 <HAL_TIM_IC_Start_IT+0x7c>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d102      	bne.n	8009f9e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d001      	beq.n	8009fa2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e0b3      	b.n	800a10a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <HAL_TIM_IC_Start_IT+0x9e>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb0:	e013      	b.n	8009fda <HAL_TIM_IC_Start_IT+0xc6>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d104      	bne.n	8009fc2 <HAL_TIM_IC_Start_IT+0xae>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fc0:	e00b      	b.n	8009fda <HAL_TIM_IC_Start_IT+0xc6>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d104      	bne.n	8009fd2 <HAL_TIM_IC_Start_IT+0xbe>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd0:	e003      	b.n	8009fda <HAL_TIM_IC_Start_IT+0xc6>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d104      	bne.n	8009fea <HAL_TIM_IC_Start_IT+0xd6>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe8:	e013      	b.n	800a012 <HAL_TIM_IC_Start_IT+0xfe>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d104      	bne.n	8009ffa <HAL_TIM_IC_Start_IT+0xe6>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ff8:	e00b      	b.n	800a012 <HAL_TIM_IC_Start_IT+0xfe>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d104      	bne.n	800a00a <HAL_TIM_IC_Start_IT+0xf6>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a008:	e003      	b.n	800a012 <HAL_TIM_IC_Start_IT+0xfe>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b0c      	cmp	r3, #12
 800a016:	d841      	bhi.n	800a09c <HAL_TIM_IC_Start_IT+0x188>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <HAL_TIM_IC_Start_IT+0x10c>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a055 	.word	0x0800a055
 800a024:	0800a09d 	.word	0x0800a09d
 800a028:	0800a09d 	.word	0x0800a09d
 800a02c:	0800a09d 	.word	0x0800a09d
 800a030:	0800a067 	.word	0x0800a067
 800a034:	0800a09d 	.word	0x0800a09d
 800a038:	0800a09d 	.word	0x0800a09d
 800a03c:	0800a09d 	.word	0x0800a09d
 800a040:	0800a079 	.word	0x0800a079
 800a044:	0800a09d 	.word	0x0800a09d
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	0800a09d 	.word	0x0800a09d
 800a050:	0800a08b 	.word	0x0800a08b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0202 	orr.w	r2, r2, #2
 800a062:	60da      	str	r2, [r3, #12]
      break;
 800a064:	e01b      	b.n	800a09e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0204 	orr.w	r2, r2, #4
 800a074:	60da      	str	r2, [r3, #12]
      break;
 800a076:	e012      	b.n	800a09e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0208 	orr.w	r2, r2, #8
 800a086:	60da      	str	r2, [r3, #12]
      break;
 800a088:	e009      	b.n	800a09e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f042 0210 	orr.w	r2, r2, #16
 800a098:	60da      	str	r2, [r3, #12]
      break;
 800a09a:	e000      	b.n	800a09e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800a09c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 ff45 	bl	800af36 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <HAL_TIM_IC_Start_IT+0x200>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_TIM_IC_Start_IT+0x1c0>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0be:	d009      	beq.n	800a0d4 <HAL_TIM_IC_Start_IT+0x1c0>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a14      	ldr	r2, [pc, #80]	; (800a118 <HAL_TIM_IC_Start_IT+0x204>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_TIM_IC_Start_IT+0x1c0>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <HAL_TIM_IC_Start_IT+0x208>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d111      	bne.n	800a0f8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d010      	beq.n	800a108 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f6:	e007      	b.n	800a108 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40012c00 	.word	0x40012c00
 800a118:	40000400 	.word	0x40000400
 800a11c:	40000800 	.word	0x40000800

0800a120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b02      	cmp	r3, #2
 800a134:	d122      	bne.n	800a17c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b02      	cmp	r3, #2
 800a142:	d11b      	bne.n	800a17c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0202 	mvn.w	r2, #2
 800a14c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fa f9e2 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fb3a 	bl	800a7e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fb40 	bl	800a7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b04      	cmp	r3, #4
 800a188:	d122      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b04      	cmp	r3, #4
 800a196:	d11b      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0204 	mvn.w	r2, #4
 800a1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7fa f9b8 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 800a1bc:	e005      	b.n	800a1ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fb10 	bl	800a7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fb16 	bl	800a7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d122      	bne.n	800a224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0308 	and.w	r3, r3, #8
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d11b      	bne.n	800a224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0208 	mvn.w	r2, #8
 800a1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2204      	movs	r2, #4
 800a1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7fa f98e 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 800a210:	e005      	b.n	800a21e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fae6 	bl	800a7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 faec 	bl	800a7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	2b10      	cmp	r3, #16
 800a230:	d122      	bne.n	800a278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	2b10      	cmp	r3, #16
 800a23e:	d11b      	bne.n	800a278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f06f 0210 	mvn.w	r2, #16
 800a248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2208      	movs	r2, #8
 800a24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7fa f964 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 800a264:	e005      	b.n	800a272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fabc 	bl	800a7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fac2 	bl	800a7f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	2b01      	cmp	r3, #1
 800a284:	d10e      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b01      	cmp	r3, #1
 800a292:	d107      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0201 	mvn.w	r2, #1
 800a29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7f9 fb2e 	bl	8003900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	2b80      	cmp	r3, #128	; 0x80
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d107      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 ffae 	bl	800b22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d10e      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	d107      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa86 	bl	800a808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b20      	cmp	r3, #32
 800a308:	d10e      	bne.n	800a328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f003 0320 	and.w	r3, r3, #32
 800a314:	2b20      	cmp	r3, #32
 800a316:	d107      	bne.n	800a328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f06f 0220 	mvn.w	r2, #32
 800a320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 ff79 	bl	800b21a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a342:	2b01      	cmp	r3, #1
 800a344:	d101      	bne.n	800a34a <HAL_TIM_IC_ConfigChannel+0x1a>
 800a346:	2302      	movs	r3, #2
 800a348:	e082      	b.n	800a450 <HAL_TIM_IC_ConfigChannel+0x120>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d11b      	bne.n	800a390 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f000 fc42 	bl	800abf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 020c 	bic.w	r2, r2, #12
 800a37a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6999      	ldr	r1, [r3, #24]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	619a      	str	r2, [r3, #24]
 800a38e:	e05a      	b.n	800a446 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b04      	cmp	r3, #4
 800a394:	d11c      	bne.n	800a3d0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	f000 fcab 	bl	800ad00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	699a      	ldr	r2, [r3, #24]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a3b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6999      	ldr	r1, [r3, #24]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	021a      	lsls	r2, r3, #8
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	619a      	str	r2, [r3, #24]
 800a3ce:	e03a      	b.n	800a446 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b08      	cmp	r3, #8
 800a3d4:	d11b      	bne.n	800a40e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6818      	ldr	r0, [r3, #0]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6819      	ldr	r1, [r3, #0]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f000 fcf6 	bl	800add6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 020c 	bic.w	r2, r2, #12
 800a3f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69d9      	ldr	r1, [r3, #28]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	430a      	orrs	r2, r1
 800a40a:	61da      	str	r2, [r3, #28]
 800a40c:	e01b      	b.n	800a446 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	6819      	ldr	r1, [r3, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f000 fd15 	bl	800ae4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a430:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69d9      	ldr	r1, [r3, #28]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	021a      	lsls	r2, r3, #8
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a46e:	2302      	movs	r3, #2
 800a470:	e0ac      	b.n	800a5cc <HAL_TIM_PWM_ConfigChannel+0x174>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b0c      	cmp	r3, #12
 800a47e:	f200 809f 	bhi.w	800a5c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a482:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a488:	0800a4bd 	.word	0x0800a4bd
 800a48c:	0800a5c1 	.word	0x0800a5c1
 800a490:	0800a5c1 	.word	0x0800a5c1
 800a494:	0800a5c1 	.word	0x0800a5c1
 800a498:	0800a4fd 	.word	0x0800a4fd
 800a49c:	0800a5c1 	.word	0x0800a5c1
 800a4a0:	0800a5c1 	.word	0x0800a5c1
 800a4a4:	0800a5c1 	.word	0x0800a5c1
 800a4a8:	0800a53f 	.word	0x0800a53f
 800a4ac:	0800a5c1 	.word	0x0800a5c1
 800a4b0:	0800a5c1 	.word	0x0800a5c1
 800a4b4:	0800a5c1 	.word	0x0800a5c1
 800a4b8:	0800a57f 	.word	0x0800a57f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fa0c 	bl	800a8e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0208 	orr.w	r2, r2, #8
 800a4d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0204 	bic.w	r2, r2, #4
 800a4e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6999      	ldr	r1, [r3, #24]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	691a      	ldr	r2, [r3, #16]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	619a      	str	r2, [r3, #24]
      break;
 800a4fa:	e062      	b.n	800a5c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fa52 	bl	800a9ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699a      	ldr	r2, [r3, #24]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6999      	ldr	r1, [r3, #24]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	021a      	lsls	r2, r3, #8
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	619a      	str	r2, [r3, #24]
      break;
 800a53c:	e041      	b.n	800a5c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fa9b 	bl	800aa80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69da      	ldr	r2, [r3, #28]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f042 0208 	orr.w	r2, r2, #8
 800a558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69da      	ldr	r2, [r3, #28]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0204 	bic.w	r2, r2, #4
 800a568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69d9      	ldr	r1, [r3, #28]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	691a      	ldr	r2, [r3, #16]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	61da      	str	r2, [r3, #28]
      break;
 800a57c:	e021      	b.n	800a5c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fae5 	bl	800ab54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69da      	ldr	r2, [r3, #28]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69d9      	ldr	r1, [r3, #28]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	021a      	lsls	r2, r3, #8
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	61da      	str	r2, [r3, #28]
      break;
 800a5be:	e000      	b.n	800a5c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a5c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_TIM_ConfigClockSource+0x18>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e0b3      	b.n	800a754 <HAL_TIM_ConfigClockSource+0x180>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a60a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a612:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a624:	d03e      	beq.n	800a6a4 <HAL_TIM_ConfigClockSource+0xd0>
 800a626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62a:	f200 8087 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a62e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a632:	f000 8085 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x16c>
 800a636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63a:	d87f      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a63c:	2b70      	cmp	r3, #112	; 0x70
 800a63e:	d01a      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0xa2>
 800a640:	2b70      	cmp	r3, #112	; 0x70
 800a642:	d87b      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a644:	2b60      	cmp	r3, #96	; 0x60
 800a646:	d050      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x116>
 800a648:	2b60      	cmp	r3, #96	; 0x60
 800a64a:	d877      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a64c:	2b50      	cmp	r3, #80	; 0x50
 800a64e:	d03c      	beq.n	800a6ca <HAL_TIM_ConfigClockSource+0xf6>
 800a650:	2b50      	cmp	r3, #80	; 0x50
 800a652:	d873      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	d058      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x136>
 800a658:	2b40      	cmp	r3, #64	; 0x40
 800a65a:	d86f      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a65c:	2b30      	cmp	r3, #48	; 0x30
 800a65e:	d064      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x156>
 800a660:	2b30      	cmp	r3, #48	; 0x30
 800a662:	d86b      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a664:	2b20      	cmp	r3, #32
 800a666:	d060      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x156>
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d867      	bhi.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d05c      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x156>
 800a670:	2b10      	cmp	r3, #16
 800a672:	d05a      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a674:	e062      	b.n	800a73c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	6899      	ldr	r1, [r3, #8]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f000 fc37 	bl	800aef8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a698:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	609a      	str	r2, [r3, #8]
      break;
 800a6a2:	e04e      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	6899      	ldr	r1, [r3, #8]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f000 fc20 	bl	800aef8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6c6:	609a      	str	r2, [r3, #8]
      break;
 800a6c8:	e03b      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6859      	ldr	r1, [r3, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f000 fae4 	bl	800aca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2150      	movs	r1, #80	; 0x50
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fbee 	bl	800aec4 <TIM_ITRx_SetConfig>
      break;
 800a6e8:	e02b      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	6859      	ldr	r1, [r3, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f000 fb3e 	bl	800ad78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2160      	movs	r1, #96	; 0x60
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fbde 	bl	800aec4 <TIM_ITRx_SetConfig>
      break;
 800a708:	e01b      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	6859      	ldr	r1, [r3, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	461a      	mov	r2, r3
 800a718:	f000 fac4 	bl	800aca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2140      	movs	r1, #64	; 0x40
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fbce 	bl	800aec4 <TIM_ITRx_SetConfig>
      break;
 800a728:	e00b      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4619      	mov	r1, r3
 800a734:	4610      	mov	r0, r2
 800a736:	f000 fbc5 	bl	800aec4 <TIM_ITRx_SetConfig>
        break;
 800a73a:	e002      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a73c:	bf00      	nop
 800a73e:	e000      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a740:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b0c      	cmp	r3, #12
 800a76e:	d831      	bhi.n	800a7d4 <HAL_TIM_ReadCapturedValue+0x78>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a7ad 	.word	0x0800a7ad
 800a77c:	0800a7d5 	.word	0x0800a7d5
 800a780:	0800a7d5 	.word	0x0800a7d5
 800a784:	0800a7d5 	.word	0x0800a7d5
 800a788:	0800a7b7 	.word	0x0800a7b7
 800a78c:	0800a7d5 	.word	0x0800a7d5
 800a790:	0800a7d5 	.word	0x0800a7d5
 800a794:	0800a7d5 	.word	0x0800a7d5
 800a798:	0800a7c1 	.word	0x0800a7c1
 800a79c:	0800a7d5 	.word	0x0800a7d5
 800a7a0:	0800a7d5 	.word	0x0800a7d5
 800a7a4:	0800a7d5 	.word	0x0800a7d5
 800a7a8:	0800a7cb 	.word	0x0800a7cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b2:	60fb      	str	r3, [r7, #12]

      break;
 800a7b4:	e00f      	b.n	800a7d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	60fb      	str	r3, [r7, #12]

      break;
 800a7be:	e00a      	b.n	800a7d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c6:	60fb      	str	r3, [r7, #12]

      break;
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	60fb      	str	r3, [r7, #12]

      break;
 800a7d2:	e000      	b.n	800a7d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a7d4:	bf00      	nop
  }

  return tmpreg;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop

0800a7e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr

0800a808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr
	...

0800a81c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a29      	ldr	r2, [pc, #164]	; (800a8d4 <TIM_Base_SetConfig+0xb8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00b      	beq.n	800a84c <TIM_Base_SetConfig+0x30>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83a:	d007      	beq.n	800a84c <TIM_Base_SetConfig+0x30>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a26      	ldr	r2, [pc, #152]	; (800a8d8 <TIM_Base_SetConfig+0xbc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d003      	beq.n	800a84c <TIM_Base_SetConfig+0x30>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a25      	ldr	r2, [pc, #148]	; (800a8dc <TIM_Base_SetConfig+0xc0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d108      	bne.n	800a85e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a1c      	ldr	r2, [pc, #112]	; (800a8d4 <TIM_Base_SetConfig+0xb8>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00b      	beq.n	800a87e <TIM_Base_SetConfig+0x62>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a86c:	d007      	beq.n	800a87e <TIM_Base_SetConfig+0x62>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a19      	ldr	r2, [pc, #100]	; (800a8d8 <TIM_Base_SetConfig+0xbc>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d003      	beq.n	800a87e <TIM_Base_SetConfig+0x62>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a18      	ldr	r2, [pc, #96]	; (800a8dc <TIM_Base_SetConfig+0xc0>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d108      	bne.n	800a890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a07      	ldr	r2, [pc, #28]	; (800a8d4 <TIM_Base_SetConfig+0xb8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d103      	bne.n	800a8c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	615a      	str	r2, [r3, #20]
}
 800a8ca:	bf00      	nop
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bc80      	pop	{r7}
 800a8d2:	4770      	bx	lr
 800a8d4:	40012c00 	.word	0x40012c00
 800a8d8:	40000400 	.word	0x40000400
 800a8dc:	40000800 	.word	0x40000800

0800a8e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f023 0201 	bic.w	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0303 	bic.w	r3, r3, #3
 800a916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f023 0302 	bic.w	r3, r3, #2
 800a928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <TIM_OC1_SetConfig+0xc8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d10c      	bne.n	800a956 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f023 0308 	bic.w	r3, r3, #8
 800a942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f023 0304 	bic.w	r3, r3, #4
 800a954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a13      	ldr	r2, [pc, #76]	; (800a9a8 <TIM_OC1_SetConfig+0xc8>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d111      	bne.n	800a982 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a96c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	4313      	orrs	r3, r2
 800a976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	621a      	str	r2, [r3, #32]
}
 800a99c:	bf00      	nop
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bc80      	pop	{r7}
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40012c00 	.word	0x40012c00

0800a9ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	f023 0210 	bic.w	r2, r3, #16
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	021b      	lsls	r3, r3, #8
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	f023 0320 	bic.w	r3, r3, #32
 800a9f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a1d      	ldr	r2, [pc, #116]	; (800aa7c <TIM_OC2_SetConfig+0xd0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d10d      	bne.n	800aa28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	011b      	lsls	r3, r3, #4
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a14      	ldr	r2, [pc, #80]	; (800aa7c <TIM_OC2_SetConfig+0xd0>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d113      	bne.n	800aa58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	621a      	str	r2, [r3, #32]
}
 800aa72:	bf00      	nop
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr
 800aa7c:	40012c00 	.word	0x40012c00

0800aa80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	021b      	lsls	r3, r3, #8
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <TIM_OC3_SetConfig+0xd0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d10d      	bne.n	800aafa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	021b      	lsls	r3, r3, #8
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a14      	ldr	r2, [pc, #80]	; (800ab50 <TIM_OC3_SetConfig+0xd0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d113      	bne.n	800ab2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	011b      	lsls	r3, r3, #4
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	621a      	str	r2, [r3, #32]
}
 800ab44:	bf00      	nop
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bc80      	pop	{r7}
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40012c00 	.word	0x40012c00

0800ab54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	021b      	lsls	r3, r3, #8
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	031b      	lsls	r3, r3, #12
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a0f      	ldr	r2, [pc, #60]	; (800abec <TIM_OC4_SetConfig+0x98>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d109      	bne.n	800abc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	019b      	lsls	r3, r3, #6
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	621a      	str	r2, [r3, #32]
}
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr
 800abec:	40012c00 	.word	0x40012c00

0800abf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f023 0201 	bic.w	r2, r3, #1
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4a1f      	ldr	r2, [pc, #124]	; (800ac98 <TIM_TI1_SetConfig+0xa8>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d00b      	beq.n	800ac36 <TIM_TI1_SetConfig+0x46>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac24:	d007      	beq.n	800ac36 <TIM_TI1_SetConfig+0x46>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4a1c      	ldr	r2, [pc, #112]	; (800ac9c <TIM_TI1_SetConfig+0xac>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_TI1_SetConfig+0x46>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4a1b      	ldr	r2, [pc, #108]	; (800aca0 <TIM_TI1_SetConfig+0xb0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d101      	bne.n	800ac3a <TIM_TI1_SetConfig+0x4a>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <TIM_TI1_SetConfig+0x4c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d008      	beq.n	800ac52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	617b      	str	r3, [r7, #20]
 800ac50:	e003      	b.n	800ac5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f043 0301 	orr.w	r3, r3, #1
 800ac58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f023 030a 	bic.w	r3, r3, #10
 800ac74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f003 030a 	and.w	r3, r3, #10
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	621a      	str	r2, [r3, #32]
}
 800ac8e:	bf00      	nop
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bc80      	pop	{r7}
 800ac96:	4770      	bx	lr
 800ac98:	40012c00 	.word	0x40012c00
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	40000800 	.word	0x40000800

0800aca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	f023 0201 	bic.w	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f023 030a 	bic.w	r3, r3, #10
 800ace0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	621a      	str	r2, [r3, #32]
}
 800acf6:	bf00      	nop
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bc80      	pop	{r7}
 800acfe:	4770      	bx	lr

0800ad00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	f023 0210 	bic.w	r2, r3, #16
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	021b      	lsls	r3, r3, #8
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	031b      	lsls	r3, r3, #12
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	011b      	lsls	r3, r3, #4
 800ad58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	621a      	str	r2, [r3, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr

0800ad78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f023 0210 	bic.w	r2, r3, #16
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ada2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	031b      	lsls	r3, r3, #12
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	621a      	str	r2, [r3, #32]
}
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr

0800add6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800add6:	b480      	push	{r7}
 800add8:	b087      	sub	sp, #28
 800adda:	af00      	add	r7, sp, #0
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	607a      	str	r2, [r7, #4]
 800ade2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f023 0303 	bic.w	r3, r3, #3
 800ae02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bc80      	pop	{r7}
 800ae4a:	4770      	bx	lr

0800ae4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	031b      	lsls	r3, r3, #12
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	031b      	lsls	r3, r3, #12
 800aea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr

0800aec4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	f043 0307 	orr.w	r3, r3, #7
 800aee6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	609a      	str	r2, [r3, #8]
}
 800aeee:	bf00      	nop
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bc80      	pop	{r7}
 800aef6:	4770      	bx	lr

0800aef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	021a      	lsls	r2, r3, #8
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	431a      	orrs	r2, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4313      	orrs	r3, r2
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	609a      	str	r2, [r3, #8]
}
 800af2c:	bf00      	nop
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af36:	b480      	push	{r7}
 800af38:	b087      	sub	sp, #28
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f003 031f 	and.w	r3, r3, #31
 800af48:	2201      	movs	r2, #1
 800af4a:	fa02 f303 	lsl.w	r3, r2, r3
 800af4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1a      	ldr	r2, [r3, #32]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	43db      	mvns	r3, r3
 800af58:	401a      	ands	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1a      	ldr	r2, [r3, #32]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	fa01 f303 	lsl.w	r3, r1, r3
 800af6e:	431a      	orrs	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	621a      	str	r2, [r3, #32]
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	bc80      	pop	{r7}
 800af7c:	4770      	bx	lr
	...

0800af80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d109      	bne.n	800afa4 <HAL_TIMEx_PWMN_Start+0x24>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e022      	b.n	800afea <HAL_TIMEx_PWMN_Start+0x6a>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d109      	bne.n	800afbe <HAL_TIMEx_PWMN_Start+0x3e>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	bf14      	ite	ne
 800afb6:	2301      	movne	r3, #1
 800afb8:	2300      	moveq	r3, #0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	e015      	b.n	800afea <HAL_TIMEx_PWMN_Start+0x6a>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d109      	bne.n	800afd8 <HAL_TIMEx_PWMN_Start+0x58>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	bf14      	ite	ne
 800afd0:	2301      	movne	r3, #1
 800afd2:	2300      	moveq	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	e008      	b.n	800afea <HAL_TIMEx_PWMN_Start+0x6a>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	bf14      	ite	ne
 800afe4:	2301      	movne	r3, #1
 800afe6:	2300      	moveq	r3, #0
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e059      	b.n	800b0a6 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d104      	bne.n	800b002 <HAL_TIMEx_PWMN_Start+0x82>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b000:	e013      	b.n	800b02a <HAL_TIMEx_PWMN_Start+0xaa>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d104      	bne.n	800b012 <HAL_TIMEx_PWMN_Start+0x92>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b010:	e00b      	b.n	800b02a <HAL_TIMEx_PWMN_Start+0xaa>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b08      	cmp	r3, #8
 800b016:	d104      	bne.n	800b022 <HAL_TIMEx_PWMN_Start+0xa2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b020:	e003      	b.n	800b02a <HAL_TIMEx_PWMN_Start+0xaa>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2204      	movs	r2, #4
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f903 	bl	800b23e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b046:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <HAL_TIMEx_PWMN_Start+0x130>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00e      	beq.n	800b070 <HAL_TIMEx_PWMN_Start+0xf0>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d009      	beq.n	800b070 <HAL_TIMEx_PWMN_Start+0xf0>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a14      	ldr	r2, [pc, #80]	; (800b0b4 <HAL_TIMEx_PWMN_Start+0x134>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d004      	beq.n	800b070 <HAL_TIMEx_PWMN_Start+0xf0>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a13      	ldr	r2, [pc, #76]	; (800b0b8 <HAL_TIMEx_PWMN_Start+0x138>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d111      	bne.n	800b094 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b06      	cmp	r3, #6
 800b080:	d010      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f042 0201 	orr.w	r2, r2, #1
 800b090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b092:	e007      	b.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0201 	orr.w	r2, r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	40012c00 	.word	0x40012c00
 800b0b4:	40000400 	.word	0x40000400
 800b0b8:	40000800 	.word	0x40000800

0800b0bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d101      	bne.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e046      	b.n	800b162 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2202      	movs	r2, #2
 800b0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a16      	ldr	r2, [pc, #88]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00e      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b120:	d009      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a12      	ldr	r2, [pc, #72]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d004      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a10      	ldr	r2, [pc, #64]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d10c      	bne.n	800b150 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b13c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	4313      	orrs	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	bc80      	pop	{r7}
 800b16a:	4770      	bx	lr
 800b16c:	40012c00 	.word	0x40012c00
 800b170:	40000400 	.word	0x40000400
 800b174:	40000800 	.word	0x40000800

0800b178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b190:	2302      	movs	r3, #2
 800b192:	e03d      	b.n	800b210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b222:	bf00      	nop
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	bc80      	pop	{r7}
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	bc80      	pop	{r7}
 800b23c:	4770      	bx	lr

0800b23e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b23e:	b480      	push	{r7}
 800b240:	b087      	sub	sp, #28
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	f003 031f 	and.w	r3, r3, #31
 800b250:	2204      	movs	r2, #4
 800b252:	fa02 f303 	lsl.w	r3, r2, r3
 800b256:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a1a      	ldr	r2, [r3, #32]
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	43db      	mvns	r3, r3
 800b260:	401a      	ands	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a1a      	ldr	r2, [r3, #32]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f003 031f 	and.w	r3, r3, #31
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	fa01 f303 	lsl.w	r3, r1, r3
 800b276:	431a      	orrs	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	621a      	str	r2, [r3, #32]
}
 800b27c:	bf00      	nop
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e03f      	b.n	800b318 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d106      	bne.n	800b2b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7fa feb5 	bl	800601c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2224      	movs	r2, #36	; 0x24
 800b2b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fd04 	bl	800bcd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	691a      	ldr	r2, [r3, #16]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	695a      	ldr	r2, [r3, #20]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68da      	ldr	r2, [r3, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2220      	movs	r2, #32
 800b30a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08a      	sub	sp, #40	; 0x28
 800b324:	af02      	add	r7, sp, #8
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	4613      	mov	r3, r2
 800b32e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d17c      	bne.n	800b43a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_UART_Transmit+0x2c>
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e075      	b.n	800b43c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b356:	2b01      	cmp	r3, #1
 800b358:	d101      	bne.n	800b35e <HAL_UART_Transmit+0x3e>
 800b35a:	2302      	movs	r3, #2
 800b35c:	e06e      	b.n	800b43c <HAL_UART_Transmit+0x11c>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2221      	movs	r2, #33	; 0x21
 800b370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b374:	f7fa fff6 	bl	8006364 <HAL_GetTick>
 800b378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	88fa      	ldrh	r2, [r7, #6]
 800b37e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	88fa      	ldrh	r2, [r7, #6]
 800b384:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d108      	bne.n	800b3a2 <HAL_UART_Transmit+0x82>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d104      	bne.n	800b3a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	61bb      	str	r3, [r7, #24]
 800b3a0:	e003      	b.n	800b3aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b3b2:	e02a      	b.n	800b40a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 fb13 	bl	800b9ea <UART_WaitOnFlagUntilTimeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e036      	b.n	800b43c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	e007      	b.n	800b3fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	781a      	ldrb	r2, [r3, #0]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b400:	b29b      	uxth	r3, r3
 800b402:	3b01      	subs	r3, #1
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b40e:	b29b      	uxth	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1cf      	bne.n	800b3b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2200      	movs	r2, #0
 800b41c:	2140      	movs	r1, #64	; 0x40
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f000 fae3 	bl	800b9ea <UART_WaitOnFlagUntilTimeout>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e006      	b.n	800b43c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	e000      	b.n	800b43c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b43a:	2302      	movs	r3, #2
  }
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3720      	adds	r7, #32
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d153      	bne.n	800b506 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <HAL_UART_Transmit_DMA+0x26>
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e04c      	b.n	800b508 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b474:	2b01      	cmp	r3, #1
 800b476:	d101      	bne.n	800b47c <HAL_UART_Transmit_DMA+0x38>
 800b478:	2302      	movs	r3, #2
 800b47a:	e045      	b.n	800b508 <HAL_UART_Transmit_DMA+0xc4>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	88fa      	ldrh	r2, [r7, #6]
 800b48e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2221      	movs	r2, #33	; 0x21
 800b4a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <HAL_UART_Transmit_DMA+0xcc>)
 800b4aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	4a18      	ldr	r2, [pc, #96]	; (800b514 <HAL_UART_Transmit_DMA+0xd0>)
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b8:	4a17      	ldr	r2, [pc, #92]	; (800b518 <HAL_UART_Transmit_DMA+0xd4>)
 800b4ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800b4c4:	f107 0308 	add.w	r3, r7, #8
 800b4c8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	6819      	ldr	r1, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	461a      	mov	r2, r3
 800b4da:	88fb      	ldrh	r3, [r7, #6]
 800b4dc:	f7fb f8d8 	bl	8006690 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	695a      	ldr	r2, [r3, #20]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b500:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	e000      	b.n	800b508 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b506:	2302      	movs	r3, #2
  }
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	0800b865 	.word	0x0800b865
 800b514:	0800b8b7 	.word	0x0800b8b7
 800b518:	0800b957 	.word	0x0800b957

0800b51c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	4613      	mov	r3, r2
 800b528:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b20      	cmp	r3, #32
 800b534:	d166      	bne.n	800b604 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <HAL_UART_Receive_DMA+0x26>
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e05f      	b.n	800b606 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d101      	bne.n	800b554 <HAL_UART_Receive_DMA+0x38>
 800b550:	2302      	movs	r3, #2
 800b552:	e058      	b.n	800b606 <HAL_UART_Receive_DMA+0xea>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	88fa      	ldrh	r2, [r7, #6]
 800b566:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2222      	movs	r2, #34	; 0x22
 800b572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57a:	4a25      	ldr	r2, [pc, #148]	; (800b610 <HAL_UART_Receive_DMA+0xf4>)
 800b57c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	4a24      	ldr	r2, [pc, #144]	; (800b614 <HAL_UART_Receive_DMA+0xf8>)
 800b584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58a:	4a23      	ldr	r2, [pc, #140]	; (800b618 <HAL_UART_Receive_DMA+0xfc>)
 800b58c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	2200      	movs	r2, #0
 800b594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800b596:	f107 0308 	add.w	r3, r7, #8
 800b59a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	88fb      	ldrh	r3, [r7, #6]
 800b5ae:	f7fb f86f 	bl	8006690 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5de:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	695a      	ldr	r2, [r3, #20]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f042 0201 	orr.w	r2, r2, #1
 800b5ee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5fe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e000      	b.n	800b606 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	0800b8d3 	.word	0x0800b8d3
 800b614:	0800b93b 	.word	0x0800b93b
 800b618:	0800b957 	.word	0x0800b957

0800b61c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10d      	bne.n	800b66e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_UART_IRQHandler+0x52>
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	f003 0320 	and.w	r3, r3, #32
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fab6 	bl	800bbd8 <UART_Receive_IT>
      return;
 800b66c:	e0d0      	b.n	800b810 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80b0 	beq.w	800b7d6 <HAL_UART_IRQHandler+0x1ba>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <HAL_UART_IRQHandler+0x70>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 80a5 	beq.w	800b7d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <HAL_UART_IRQHandler+0x90>
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a4:	f043 0201 	orr.w	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <HAL_UART_IRQHandler+0xb0>
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d005      	beq.n	800b6cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c4:	f043 0202 	orr.w	r2, r3, #2
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <HAL_UART_IRQHandler+0xd0>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d005      	beq.n	800b6ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e4:	f043 0204 	orr.w	r2, r3, #4
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00f      	beq.n	800b716 <HAL_UART_IRQHandler+0xfa>
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	f003 0320 	and.w	r3, r3, #32
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <HAL_UART_IRQHandler+0xee>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	f043 0208 	orr.w	r2, r3, #8
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d077      	beq.n	800b80e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f003 0320 	and.w	r3, r3, #32
 800b724:	2b00      	cmp	r3, #0
 800b726:	d007      	beq.n	800b738 <HAL_UART_IRQHandler+0x11c>
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa50 	bl	800bbd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	bf14      	ite	ne
 800b746:	2301      	movne	r3, #1
 800b748:	2300      	moveq	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	2b00      	cmp	r3, #0
 800b758:	d102      	bne.n	800b760 <HAL_UART_IRQHandler+0x144>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d031      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f9a1 	bl	800baa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d023      	beq.n	800b7bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695a      	ldr	r2, [r3, #20]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b782:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d013      	beq.n	800b7b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b790:	4a21      	ldr	r2, [pc, #132]	; (800b818 <HAL_UART_IRQHandler+0x1fc>)
 800b792:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fa ffd9 	bl	8006750 <HAL_DMA_Abort_IT>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d016      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b2:	e00e      	b.n	800b7d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f84c 	bl	800b852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ba:	e00a      	b.n	800b7d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f848 	bl	800b852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c2:	e006      	b.n	800b7d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f844 	bl	800b852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b7d0:	e01d      	b.n	800b80e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d2:	bf00      	nop
    return;
 800b7d4:	e01b      	b.n	800b80e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d008      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x1d6>
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f98d 	bl	800bb0a <UART_Transmit_IT>
    return;
 800b7f0:	e00e      	b.n	800b810 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <HAL_UART_IRQHandler+0x1f4>
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f9ce 	bl	800bba8 <UART_EndTransmit_IT>
    return;
 800b80c:	e000      	b.n	800b810 <HAL_UART_IRQHandler+0x1f4>
    return;
 800b80e:	bf00      	nop
  }
}
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	0800bae3 	.word	0x0800bae3

0800b81c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr

0800b82e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bc80      	pop	{r7}
 800b83e:	4770      	bx	lr

0800b840 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bc80      	pop	{r7}
 800b850:	4770      	bx	lr

0800b852 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b85a:	bf00      	nop
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr

0800b864 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0320 	and.w	r3, r3, #32
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d113      	bne.n	800b8a8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	695a      	ldr	r2, [r3, #20]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b894:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8a4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8a6:	e002      	b.n	800b8ae <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7f6 fd9d 	bl	80023e8 <HAL_UART_TxCpltCallback>
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7ff ffa9 	bl	800b81c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d11e      	bne.n	800b92c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b902:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	695a      	ldr	r2, [r3, #20]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0201 	bic.w	r2, r2, #1
 800b912:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	695a      	ldr	r2, [r3, #20]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b922:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2220      	movs	r2, #32
 800b928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f7ff ff7e 	bl	800b82e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff ff79 	bl	800b840 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b972:	2b00      	cmp	r3, #0
 800b974:	bf14      	ite	ne
 800b976:	2301      	movne	r3, #1
 800b978:	2300      	moveq	r3, #0
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b21      	cmp	r3, #33	; 0x21
 800b988:	d108      	bne.n	800b99c <UART_DMAError+0x46>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2200      	movs	r2, #0
 800b994:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b996:	68b8      	ldr	r0, [r7, #8]
 800b998:	f000 f871 	bl	800ba7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bf14      	ite	ne
 800b9aa:	2301      	movne	r3, #1
 800b9ac:	2300      	moveq	r3, #0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b22      	cmp	r3, #34	; 0x22
 800b9bc:	d108      	bne.n	800b9d0 <UART_DMAError+0x7a>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b9ca:	68b8      	ldr	r0, [r7, #8]
 800b9cc:	f000 f86c 	bl	800baa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d4:	f043 0210 	orr.w	r2, r3, #16
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9dc:	68b8      	ldr	r0, [r7, #8]
 800b9de:	f7ff ff38 	bl	800b852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	603b      	str	r3, [r7, #0]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9fa:	e02c      	b.n	800ba56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba02:	d028      	beq.n	800ba56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d007      	beq.n	800ba1a <UART_WaitOnFlagUntilTimeout+0x30>
 800ba0a:	f7fa fcab 	bl	8006364 <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	69ba      	ldr	r2, [r7, #24]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d21d      	bcs.n	800ba56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	695a      	ldr	r2, [r3, #20]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2220      	movs	r2, #32
 800ba46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e00f      	b.n	800ba76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	4013      	ands	r3, r2
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	bf0c      	ite	eq
 800ba66:	2301      	moveq	r3, #1
 800ba68:	2300      	movne	r3, #0
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d0c3      	beq.n	800b9fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba94:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bc80      	pop	{r7}
 800baa6:	4770      	bx	lr

0800baa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800babe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	695a      	ldr	r2, [r3, #20]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	bc80      	pop	{r7}
 800bae0:	4770      	bx	lr

0800bae2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fea8 	bl	800b852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb02:	bf00      	nop
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b21      	cmp	r3, #33	; 0x21
 800bb1c:	d13e      	bne.n	800bb9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb26:	d114      	bne.n	800bb52 <UART_Transmit_IT+0x48>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d110      	bne.n	800bb52 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	1c9a      	adds	r2, r3, #2
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	621a      	str	r2, [r3, #32]
 800bb50:	e008      	b.n	800bb64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	1c59      	adds	r1, r3, #1
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6211      	str	r1, [r2, #32]
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	4619      	mov	r1, r3
 800bb72:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10f      	bne.n	800bb98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68da      	ldr	r2, [r3, #12]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e000      	b.n	800bb9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb9c:	2302      	movs	r3, #2
  }
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bc80      	pop	{r7}
 800bba6:	4770      	bx	lr

0800bba8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7f6 fc0d 	bl	80023e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b22      	cmp	r3, #34	; 0x22
 800bbea:	d170      	bne.n	800bcce <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbf4:	d117      	bne.n	800bc26 <UART_Receive_IT+0x4e>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d113      	bne.n	800bc26 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1e:	1c9a      	adds	r2, r3, #2
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	629a      	str	r2, [r3, #40]	; 0x28
 800bc24:	e026      	b.n	800bc74 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc38:	d007      	beq.n	800bc4a <UART_Receive_IT+0x72>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <UART_Receive_IT+0x80>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d106      	bne.n	800bc58 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	e008      	b.n	800bc6a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4619      	mov	r1, r3
 800bc82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d120      	bne.n	800bcca <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68da      	ldr	r2, [r3, #12]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 0220 	bic.w	r2, r2, #32
 800bc96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	695a      	ldr	r2, [r3, #20]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f022 0201 	bic.w	r2, r2, #1
 800bcb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff fdb4 	bl	800b82e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e002      	b.n	800bcd0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e000      	b.n	800bcd0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800bcce:	2302      	movs	r3, #2
  }
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68da      	ldr	r2, [r3, #12]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689a      	ldr	r2, [r3, #8]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bd12:	f023 030c 	bic.w	r3, r3, #12
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	699a      	ldr	r2, [r3, #24]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a2c      	ldr	r2, [pc, #176]	; (800bdec <UART_SetConfig+0x114>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d103      	bne.n	800bd48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bd40:	f7fd f914 	bl	8008f6c <HAL_RCC_GetPCLK2Freq>
 800bd44:	60f8      	str	r0, [r7, #12]
 800bd46:	e002      	b.n	800bd4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bd48:	f7fd f8fc 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 800bd4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	009a      	lsls	r2, r3, #2
 800bd58:	441a      	add	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd64:	4a22      	ldr	r2, [pc, #136]	; (800bdf0 <UART_SetConfig+0x118>)
 800bd66:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6a:	095b      	lsrs	r3, r3, #5
 800bd6c:	0119      	lsls	r1, r3, #4
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009a      	lsls	r2, r3, #2
 800bd78:	441a      	add	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd84:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <UART_SetConfig+0x118>)
 800bd86:	fba3 0302 	umull	r0, r3, r3, r2
 800bd8a:	095b      	lsrs	r3, r3, #5
 800bd8c:	2064      	movs	r0, #100	; 0x64
 800bd8e:	fb00 f303 	mul.w	r3, r0, r3
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	3332      	adds	r3, #50	; 0x32
 800bd98:	4a15      	ldr	r2, [pc, #84]	; (800bdf0 <UART_SetConfig+0x118>)
 800bd9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9e:	095b      	lsrs	r3, r3, #5
 800bda0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bda4:	4419      	add	r1, r3
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	009a      	lsls	r2, r3, #2
 800bdb0:	441a      	add	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <UART_SetConfig+0x118>)
 800bdbe:	fba3 0302 	umull	r0, r3, r3, r2
 800bdc2:	095b      	lsrs	r3, r3, #5
 800bdc4:	2064      	movs	r0, #100	; 0x64
 800bdc6:	fb00 f303 	mul.w	r3, r0, r3
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	3332      	adds	r3, #50	; 0x32
 800bdd0:	4a07      	ldr	r2, [pc, #28]	; (800bdf0 <UART_SetConfig+0x118>)
 800bdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd6:	095b      	lsrs	r3, r3, #5
 800bdd8:	f003 020f 	and.w	r2, r3, #15
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	440a      	add	r2, r1
 800bde2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bde4:	bf00      	nop
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	40013800 	.word	0x40013800
 800bdf0:	51eb851f 	.word	0x51eb851f
 800bdf4:	00000000 	.word	0x00000000

0800bdf8 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af04      	add	r7, sp, #16
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a6f      	ldr	r2, [pc, #444]	; (800bfc0 <_ZN10ControllerC1Ev+0x1c8>)
 800be04:	639a      	str	r2, [r3, #56]	; 0x38
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a6e      	ldr	r2, [pc, #440]	; (800bfc4 <_ZN10ControllerC1Ev+0x1cc>)
 800be0a:	63da      	str	r2, [r3, #60]	; 0x3c
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	22c8      	movs	r2, #200	; 0xc8
 800be10:	641a      	str	r2, [r3, #64]	; 0x40
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	4618      	mov	r0, r3
 800be18:	f7f4 ff38 	bl	8000c8c <__aeabi_i2f>
 800be1c:	4603      	mov	r3, r0
 800be1e:	4619      	mov	r1, r3
 800be20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800be24:	f7f5 f83a 	bl	8000e9c <__aeabi_fdiv>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	645a      	str	r2, [r3, #68]	; 0x44
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a65      	ldr	r2, [pc, #404]	; (800bfc8 <_ZN10ControllerC1Ev+0x1d0>)
 800be34:	649a      	str	r2, [r3, #72]	; 0x48
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a64      	ldr	r2, [pc, #400]	; (800bfcc <_ZN10ControllerC1Ev+0x1d4>)
 800be3a:	64da      	str	r2, [r3, #76]	; 0x4c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a64      	ldr	r2, [pc, #400]	; (800bfd0 <_ZN10ControllerC1Ev+0x1d8>)
 800be40:	651a      	str	r2, [r3, #80]	; 0x50
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	655a      	str	r2, [r3, #84]	; 0x54
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a61      	ldr	r2, [pc, #388]	; (800bfd4 <_ZN10ControllerC1Ev+0x1dc>)
 800be4e:	659a      	str	r2, [r3, #88]	; 0x58
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a61      	ldr	r2, [pc, #388]	; (800bfd8 <_ZN10ControllerC1Ev+0x1e0>)
 800be54:	65da      	str	r2, [r3, #92]	; 0x5c
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a60      	ldr	r2, [pc, #384]	; (800bfdc <_ZN10ControllerC1Ev+0x1e4>)
 800be5a:	661a      	str	r2, [r3, #96]	; 0x60
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	665a      	str	r2, [r3, #100]	; 0x64
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	669a      	str	r2, [r3, #104]	; 0x68
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	66da      	str	r2, [r3, #108]	; 0x6c
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800be7a:	671a      	str	r2, [r3, #112]	; 0x70
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	675a      	str	r2, [r3, #116]	; 0x74
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f04f 0200 	mov.w	r2, #0
 800be8a:	679a      	str	r2, [r3, #120]	; 0x78
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a54      	ldr	r2, [pc, #336]	; (800bfe0 <_ZN10ControllerC1Ev+0x1e8>)
 800be90:	67da      	str	r2, [r3, #124]	; 0x7c
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f04f 0200 	mov.w	r2, #0
 800be98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a51      	ldr	r2, [pc, #324]	; (800bfe4 <_ZN10ControllerC1Ev+0x1ec>)
 800bea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a50      	ldr	r2, [pc, #320]	; (800bfe8 <_ZN10ControllerC1Ev+0x1f0>)
 800bea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a4f      	ldr	r2, [pc, #316]	; (800bfec <_ZN10ControllerC1Ev+0x1f4>)
 800beb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800bece:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f04f 0200 	mov.w	r2, #0
 800bed8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f04f 0200 	mov.w	r2, #0
 800bee2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 800beec:	a330      	add	r3, pc, #192	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bef6:	a32e      	add	r3, pc, #184	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	e9cd 2300 	strd	r2, r3, [sp]
 800bf00:	a32d      	add	r3, pc, #180	; (adr r3, 800bfb8 <_ZN10ControllerC1Ev+0x1c0>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	4608      	mov	r0, r1
 800bf08:	f002 fa9a 	bl	800e440 <_ZN3lpfC1Eddd>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 800bf12:	a327      	add	r3, pc, #156	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf1c:	a324      	add	r3, pc, #144	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	e9cd 2300 	strd	r2, r3, [sp]
 800bf26:	a324      	add	r3, pc, #144	; (adr r3, 800bfb8 <_ZN10ControllerC1Ev+0x1c0>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	f002 fa87 	bl	800e440 <_ZN3lpfC1Eddd>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 800bf38:	a31d      	add	r3, pc, #116	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf42:	a31b      	add	r3, pc, #108	; (adr r3, 800bfb0 <_ZN10ControllerC1Ev+0x1b8>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	e9cd 2300 	strd	r2, r3, [sp]
 800bf4c:	a31a      	add	r3, pc, #104	; (adr r3, 800bfb8 <_ZN10ControllerC1Ev+0x1c0>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	4608      	mov	r0, r1
 800bf54:	f002 fa74 	bl	800e440 <_ZN3lpfC1Eddd>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f001 fe5e 	bl	800dc20 <_ZN3PIDC1Ev>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 fe58 	bl	800dc20 <_ZN3PIDC1Ev>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 fe52 	bl	800dc20 <_ZN3PIDC1Ev>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800bf82:	4618      	mov	r0, r3
 800bf84:	f001 fe4c 	bl	800dc20 <_ZN3PIDC1Ev>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 fe46 	bl	800dc20 <_ZN3PIDC1Ev>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 fe40 	bl	800dc20 <_ZN3PIDC1Ev>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w
 800bfb0:	fc3b4f61 	.word	0xfc3b4f61
 800bfb4:	3fa35935 	.word	0x3fa35935
 800bfb8:	4f0d844d 	.word	0x4f0d844d
 800bfbc:	3fed94af 	.word	0x3fed94af
 800bfc0:	44c1c000 	.word	0x44c1c000
 800bfc4:	42654ca3 	.word	0x42654ca3
 800bfc8:	3fb33333 	.word	0x3fb33333
 800bfcc:	411cf5c3 	.word	0x411cf5c3
 800bfd0:	41f9d70a 	.word	0x41f9d70a
 800bfd4:	3eb33333 	.word	0x3eb33333
 800bfd8:	3da3d70a 	.word	0x3da3d70a
 800bfdc:	3c23d70a 	.word	0x3c23d70a
 800bfe0:	40900000 	.word	0x40900000
 800bfe4:	41200000 	.word	0x41200000
 800bfe8:	41700000 	.word	0x41700000
 800bfec:	c0800000 	.word	0xc0800000

0800bff0 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	b092      	sub	sp, #72	; 0x48
 800bff6:	af04      	add	r7, sp, #16
 800bff8:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	609a      	str	r2, [r3, #8]

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800c06a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c06e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c072:	f002 f96f 	bl	800e354 <_ZN3PID3SatEfii>
 800c076:	4603      	mov	r3, r0
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f5 f837 	bl	80010ec <__aeabi_f2iz>
 800c07e:	4603      	mov	r3, r0
 800c080:	62fb      	str	r3, [r7, #44]	; 0x2c
    float K_swarm;

    if(swarm) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 31d5 	ldrb.w	r3, [r3, #469]	; 0x1d5
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <_ZN10Controller3RunEv+0xa2>
    	K_swarm = 3;
 800c08c:	4ba7      	ldr	r3, [pc, #668]	; (800c32c <_ZN10Controller3RunEv+0x33c>)
 800c08e:	633b      	str	r3, [r7, #48]	; 0x30
 800c090:	e002      	b.n	800c098 <_ZN10Controller3RunEv+0xa8>
    }

    else {
    	K_swarm = 1;
 800c092:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c096:	633b      	str	r3, [r7, #48]	; 0x30
    }

    switch(mod) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	f000 8148 	beq.w	800c334 <_ZN10Controller3RunEv+0x344>
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	f300 81c9 	bgt.w	800c43c <_ZN10Controller3RunEv+0x44c>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <_ZN10Controller3RunEv+0xc4>
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d04f      	beq.n	800c152 <_ZN10Controller3RunEv+0x162>
 800c0b2:	e1c3      	b.n	800c43c <_ZN10Controller3RunEv+0x44c>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800c0c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0c4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800c0c8:	f002 f944 	bl	800e354 <_ZN3PID3SatEfii>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7f5 f80c 	bl	80010ec <__aeabi_f2iz>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
            pitch_des 	 = state_des.angles[1];
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            yaw_rate_des = state_des.rates[2];
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f002 f9b3 	bl	800e476 <_ZN3lpf3RunEf>
 800c110:	4602      	mov	r2, r0
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c124:	4619      	mov	r1, r3
 800c126:	4610      	mov	r0, r2
 800c128:	f002 f9a5 	bl	800e476 <_ZN3lpf3RunEf>
 800c12c:	4602      	mov	r2, r0
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800c140:	4619      	mov	r1, r3
 800c142:	4610      	mov	r0, r2
 800c144:	f002 f997 	bl	800e476 <_ZN3lpf3RunEf>
 800c148:	4602      	mov	r2, r0
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    	    break;
 800c150:	e174      	b.n	800c43c <_ZN10Controller3RunEv+0x44c>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f503 6684 	add.w	r6, r3, #1056	; 0x420
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 81a8 	ldr.w	r8, [r3, #424]	; 0x1a8
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 91ac 	ldr.w	r9, [r3, #428]	; 0x1ac
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 a1a4 	ldr.w	sl, [r3, #420]	; 0x1a4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7f4 ffdb 	bl	8001138 <__aeabi_f2uiz>
 800c182:	4603      	mov	r3, r0
 800c184:	9302      	str	r3, [sp, #8]
 800c186:	9501      	str	r5, [sp, #4]
 800c188:	9400      	str	r4, [sp, #0]
 800c18a:	4653      	mov	r3, sl
 800c18c:	464a      	mov	r2, r9
 800c18e:	4641      	mov	r1, r8
 800c190:	4630      	mov	r0, r6
 800c192:	f001 fe3d 	bl	800de10 <_ZN3PID6PI_VelEfffffj>
 800c196:	4604      	mov	r4, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f7f4 fdc6 	bl	8000d34 <__aeabi_fmul>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7f4 fcb9 	bl	8000b24 <__addsf3>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			float deg2rad = 0.0175;
 800c1bc:	4b5c      	ldr	r3, [pc, #368]	; (800c330 <_ZN10Controller3RunEv+0x340>)
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28
			float roll_r = roll * deg2rad;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c8:	f7f4 fdb4 	bl	8000d34 <__aeabi_fmul>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
			float pitch_r = pitch * deg2rad;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d8:	f7f4 fdac 	bl	8000d34 <__aeabi_fmul>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	623b      	str	r3, [r7, #32]
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800c1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1e2:	f7f5 fe0d 	bl	8001e00 <_ZSt3cosf>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c1ee:	f7f4 fe55 	bl	8000e9c <__aeabi_fdiv>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	461c      	mov	r4, r3
 800c1f6:	6a38      	ldr	r0, [r7, #32]
 800c1f8:	f7f5 fe02 	bl	8001e00 <_ZSt3cosf>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4619      	mov	r1, r3
 800c200:	4620      	mov	r0, r4
 800c202:	f7f4 fe4b 	bl	8000e9c <__aeabi_fdiv>
 800c206:	4603      	mov	r3, r0
 800c208:	61fb      	str	r3, [r7, #28]

			F = F * b2e ; // Body to Earth
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	4618      	mov	r0, r3
 800c214:	f7f4 fd8e 	bl	8000d34 <__aeabi_fmul>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			F = p_alt.Sat(F, F_max, F_min);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 5158 	ldr.w	r5, [r3, #344]	; 0x158
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c232:	4618      	mov	r0, r3
 800c234:	f7f4 ff5a 	bl	80010ec <__aeabi_f2iz>
 800c238:	4606      	mov	r6, r0
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f4 ff54 	bl	80010ec <__aeabi_f2iz>
 800c244:	4603      	mov	r3, r0
 800c246:	4632      	mov	r2, r6
 800c248:	4629      	mov	r1, r5
 800c24a:	4620      	mov	r0, r4
 800c24c:	f002 f882 	bl	800e354 <_ZN3PID3SatEfii>
 800c250:	4602      	mov	r2, r0
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			thr = p_alt.F2thr(F);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f002 f8a4 	bl	800e3b4 <_ZN3PID5F2thrEf>
 800c26c:	4603      	mov	r3, r0
 800c26e:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 800c276:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c278:	f7f4 fd08 	bl	8000c8c <__aeabi_i2f>
 800c27c:	4601      	mov	r1, r0
 800c27e:	f240 434c 	movw	r3, #1100	; 0x44c
 800c282:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800c286:	4620      	mov	r0, r4
 800c288:	f002 f864 	bl	800e354 <_ZN3PID3SatEfii>
 800c28c:	4603      	mov	r3, r0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f4 ff2c 	bl	80010ec <__aeabi_f2iz>
 800c294:	4603      	mov	r3, r0
 800c296:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800c298:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c29a:	f7f4 fcf7 	bl	8000c8c <__aeabi_i2f>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
			z0 = p_alt.zi;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 24cc 	ldr.w	r2, [r3, #1228]	; 0x4cc
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            roll_des     = state_des.angles[0];
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
            pitch_des 	 = state_des.angles[1];
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            yaw_rate_des = state_des.rates[2];
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	f002 f8c6 	bl	800e476 <_ZN3lpf3RunEf>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f002 f8b8 	bl	800e476 <_ZN3lpf3RunEf>
 800c306:	4602      	mov	r2, r0
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800c31a:	4619      	mov	r1, r3
 800c31c:	4610      	mov	r0, r2
 800c31e:	f002 f8aa 	bl	800e476 <_ZN3lpf3RunEf>
 800c322:	4602      	mov	r2, r0
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
			break;
 800c32a:	e087      	b.n	800c43c <_ZN10Controller3RunEv+0x44c>
 800c32c:	40400000 	.word	0x40400000
 800c330:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800c340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c344:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800c348:	f002 f804 	bl	800e354 <_ZN3PID3SatEfii>
 800c34c:	4603      	mov	r3, r0
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f4 fecc 	bl	80010ec <__aeabi_f2iz>
 800c354:	4603      	mov	r3, r0
 800c356:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d958      	bls.n	800c412 <_ZN10Controller3RunEv+0x422>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 609b 	add.w	r0, r3, #1240	; 0x4d8
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800c38a:	9201      	str	r2, [sp, #4]
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	462b      	mov	r3, r5
 800c390:	4622      	mov	r2, r4
 800c392:	f001 fe41 	bl	800e018 <_ZN3PID7PID_PosEfffff>
 800c396:	4602      	mov	r2, r0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f503 60b2 	add.w	r0, r3, #1424	; 0x590
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800c3c2:	9201      	str	r2, [sp, #4]
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	f001 fe25 	bl	800e018 <_ZN3PID7PID_PosEfffff>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 609b 	add.w	r0, r3, #1240	; 0x4d8
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 800c3e2:	f06f 0313 	mvn.w	r3, #19
 800c3e6:	2214      	movs	r2, #20
 800c3e8:	f001 ffb4 	bl	800e354 <_ZN3PID3SatEfii>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f503 60b2 	add.w	r0, r3, #1424	; 0x590
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 800c400:	f06f 0313 	mvn.w	r3, #19
 800c404:	2214      	movs	r2, #20
 800c406:	f001 ffa5 	bl	800e354 <_ZN3PID3SatEfii>
 800c40a:	4602      	mov	r2, r0
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

    	    }

            yaw_rate_des = state_des.rates[2];
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800c42a:	4619      	mov	r1, r3
 800c42c:	4610      	mov	r0, r2
 800c42e:	f002 f822 	bl	800e476 <_ZN3lpf3RunEf>
 800c432:	4602      	mov	r2, r0
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

    		break;
 800c43a:	bf00      	nop
    	}

    }

    if(angle_loop_counter == 3) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c442:	2b03      	cmp	r3, #3
 800c444:	d165      	bne.n	800c512 <_ZN10Controller3RunEv+0x522>
    	//float sqrt_controller(float alpha_des, float _alpha_des, uint8_t angle_counter,float Kff);
    	angle_ff_roll  = pid_roll.sqrt_controller(roll_des, _roll_des, angle_loop_counter,Kff);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 4120 	ldrb.w	r4, [r3, #288]	; 0x120
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	4623      	mov	r3, r4
 800c466:	f001 fc75 	bl	800dd54 <_ZN3PID15sqrt_controllerEffhf>
 800c46a:	4602      	mov	r2, r0
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    	angle_ff_pitch = pid_pitch.sqrt_controller(pitch_des, _pitch_des, angle_loop_counter,Kff);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 4120 	ldrb.w	r4, [r3, #288]	; 0x120
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	4623      	mov	r3, r4
 800c492:	f001 fc5f 	bl	800dd54 <_ZN3PID15sqrt_controllerEffhf>
 800c496:	4602      	mov	r2, r0
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle);// + angle_ff_roll;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4623      	mov	r3, r4
 800c4bc:	f001 fc0c 	bl	800dcd8 <_ZN3PID7P_AngleEffff>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle);// + angle_ff_pitch ;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	691a      	ldr	r2, [r3, #16]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	4623      	mov	r3, r4
 800c4e6:	f001 fbf7 	bl	800dcd8 <_ZN3PID7P_AngleEffff>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    	_roll_des  = roll_des;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    	_pitch_des = pitch_des;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    	angle_loop_counter = 0;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120


//	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
//	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 5150 	ldr.w	r5, [r3, #336]	; 0x150
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699e      	ldr	r6, [r3, #24]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c538:	9003      	str	r0, [sp, #12]
 800c53a:	9102      	str	r1, [sp, #8]
 800c53c:	9201      	str	r2, [sp, #4]
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	4663      	mov	r3, ip
 800c542:	4632      	mov	r2, r6
 800c544:	4629      	mov	r1, r5
 800c546:	4620      	mov	r0, r4
 800c548:	f001 fcbe 	bl	800dec8 <_ZN3PID9PID_Rate2Efffffff>
 800c54c:	4602      	mov	r2, r0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f503 742c 	add.w	r4, r3, #688	; 0x2b0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69de      	ldr	r6, [r3, #28]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c57a:	9003      	str	r0, [sp, #12]
 800c57c:	9102      	str	r1, [sp, #8]
 800c57e:	9201      	str	r2, [sp, #4]
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	4663      	mov	r3, ip
 800c584:	4632      	mov	r2, r6
 800c586:	4629      	mov	r1, r5
 800c588:	4620      	mov	r0, r4
 800c58a:	f001 fc9d 	bl	800dec8 <_ZN3PID9PID_Rate2Efffffff>
 800c58e:	4602      	mov	r2, r0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f503 705a 	add.w	r0, r3, #872	; 0x368
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a1a      	ldr	r2, [r3, #32]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ae:	f04f 0500 	mov.w	r5, #0
 800c5b2:	9501      	str	r5, [sp, #4]
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	4623      	mov	r3, r4
 800c5b8:	f001 fd6c 	bl	800e094 <_ZN3PID7PD_RateEfffff>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	angle_loop_counter++;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

#ifdef UAV1


    int pwm1 = thr + K_swarm*(+ pd_pitch - pd_roll)  - p_yaw + PITCH_TRIM - ROLL_TRIM - YAW_TRIM;
 800c5d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5d6:	f7f4 fb59 	bl	8000c8c <__aeabi_i2f>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f7f4 fa98 	bl	8000b20 <__aeabi_fsub>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7f4 fb9d 	bl	8000d34 <__aeabi_fmul>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4620      	mov	r0, r4
 800c600:	f7f4 fa90 	bl	8000b24 <__addsf3>
 800c604:	4603      	mov	r3, r0
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c60e:	4619      	mov	r1, r3
 800c610:	4610      	mov	r0, r2
 800c612:	f7f4 fa85 	bl	8000b20 <__aeabi_fsub>
 800c616:	4603      	mov	r3, r0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7f3 fefd 	bl	8000418 <__aeabi_f2d>
 800c61e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c8b8 <_ZN10Controller3RunEv+0x8c8>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fd9a 	bl	800015c <__adddf3>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4610      	mov	r0, r2
 800c62e:	4619      	mov	r1, r3
 800c630:	f04f 0200 	mov.w	r2, #0
 800c634:	4ba2      	ldr	r3, [pc, #648]	; (800c8c0 <_ZN10Controller3RunEv+0x8d0>)
 800c636:	f7f3 fd8f 	bl	8000158 <__aeabi_dsub>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4610      	mov	r0, r2
 800c640:	4619      	mov	r1, r3
 800c642:	f04f 0200 	mov.w	r2, #0
 800c646:	4b9f      	ldr	r3, [pc, #636]	; (800c8c4 <_ZN10Controller3RunEv+0x8d4>)
 800c648:	f7f3 fd88 	bl	800015c <__adddf3>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4610      	mov	r0, r2
 800c652:	4619      	mov	r1, r3
 800c654:	f7f4 f9e8 	bl	8000a28 <__aeabi_d2iz>
 800c658:	4603      	mov	r3, r0
 800c65a:	61bb      	str	r3, [r7, #24]
    int pwm2 = thr + K_swarm*(- pd_pitch + pd_roll)  - p_yaw - PITCH_TRIM + ROLL_TRIM - YAW_TRIM;
 800c65c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c65e:	f7f4 fb15 	bl	8000c8c <__aeabi_i2f>
 800c662:	4604      	mov	r4, r0
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7f4 fa54 	bl	8000b20 <__aeabi_fsub>
 800c678:	4603      	mov	r3, r0
 800c67a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f4 fb59 	bl	8000d34 <__aeabi_fmul>
 800c682:	4603      	mov	r3, r0
 800c684:	4619      	mov	r1, r3
 800c686:	4620      	mov	r0, r4
 800c688:	f7f4 fa4c 	bl	8000b24 <__addsf3>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f7f4 fa41 	bl	8000b20 <__aeabi_fsub>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f3 feb9 	bl	8000418 <__aeabi_f2d>
 800c6a6:	a384      	add	r3, pc, #528	; (adr r3, 800c8b8 <_ZN10Controller3RunEv+0x8c8>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	f7f3 fd54 	bl	8000158 <__aeabi_dsub>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	f04f 0200 	mov.w	r2, #0
 800c6bc:	4b80      	ldr	r3, [pc, #512]	; (800c8c0 <_ZN10Controller3RunEv+0x8d0>)
 800c6be:	f7f3 fd4d 	bl	800015c <__adddf3>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	f04f 0200 	mov.w	r2, #0
 800c6ce:	4b7d      	ldr	r3, [pc, #500]	; (800c8c4 <_ZN10Controller3RunEv+0x8d4>)
 800c6d0:	f7f3 fd44 	bl	800015c <__adddf3>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f7f4 f9a4 	bl	8000a28 <__aeabi_d2iz>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	617b      	str	r3, [r7, #20]
    int pwm3 = thr + K_swarm*(+ pd_pitch + pd_roll)  + p_yaw + PITCH_TRIM + ROLL_TRIM + YAW_TRIM;
 800c6e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c6e6:	f7f4 fad1 	bl	8000c8c <__aeabi_i2f>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	f7f4 fa12 	bl	8000b24 <__addsf3>
 800c700:	4603      	mov	r3, r0
 800c702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c704:	4618      	mov	r0, r3
 800c706:	f7f4 fb15 	bl	8000d34 <__aeabi_fmul>
 800c70a:	4603      	mov	r3, r0
 800c70c:	4619      	mov	r1, r3
 800c70e:	4620      	mov	r0, r4
 800c710:	f7f4 fa08 	bl	8000b24 <__addsf3>
 800c714:	4603      	mov	r3, r0
 800c716:	461a      	mov	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c71e:	4619      	mov	r1, r3
 800c720:	4610      	mov	r0, r2
 800c722:	f7f4 f9ff 	bl	8000b24 <__addsf3>
 800c726:	4603      	mov	r3, r0
 800c728:	4618      	mov	r0, r3
 800c72a:	f7f3 fe75 	bl	8000418 <__aeabi_f2d>
 800c72e:	a362      	add	r3, pc, #392	; (adr r3, 800c8b8 <_ZN10Controller3RunEv+0x8c8>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fd12 	bl	800015c <__adddf3>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4610      	mov	r0, r2
 800c73e:	4619      	mov	r1, r3
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	4b5e      	ldr	r3, [pc, #376]	; (800c8c0 <_ZN10Controller3RunEv+0x8d0>)
 800c746:	f7f3 fd09 	bl	800015c <__adddf3>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	4610      	mov	r0, r2
 800c750:	4619      	mov	r1, r3
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	4b5b      	ldr	r3, [pc, #364]	; (800c8c4 <_ZN10Controller3RunEv+0x8d4>)
 800c758:	f7f3 fcfe 	bl	8000158 <__aeabi_dsub>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4610      	mov	r0, r2
 800c762:	4619      	mov	r1, r3
 800c764:	f7f4 f960 	bl	8000a28 <__aeabi_d2iz>
 800c768:	4603      	mov	r3, r0
 800c76a:	613b      	str	r3, [r7, #16]
    int pwm4 = thr + K_swarm*(- pd_pitch - pd_roll)  + p_yaw - PITCH_TRIM - ROLL_TRIM + YAW_TRIM;
 800c76c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c76e:	f7f4 fa8d 	bl	8000c8c <__aeabi_i2f>
 800c772:	4604      	mov	r4, r0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c77a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7f4 f9ca 	bl	8000b20 <__aeabi_fsub>
 800c78c:	4603      	mov	r3, r0
 800c78e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c790:	4618      	mov	r0, r3
 800c792:	f7f4 facf 	bl	8000d34 <__aeabi_fmul>
 800c796:	4603      	mov	r3, r0
 800c798:	4619      	mov	r1, r3
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7f4 f9c2 	bl	8000b24 <__addsf3>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	f7f4 f9b9 	bl	8000b24 <__addsf3>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f3 fe2f 	bl	8000418 <__aeabi_f2d>
 800c7ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c8b8 <_ZN10Controller3RunEv+0x8c8>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 fcca 	bl	8000158 <__aeabi_dsub>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f04f 0200 	mov.w	r2, #0
 800c7d0:	4b3b      	ldr	r3, [pc, #236]	; (800c8c0 <_ZN10Controller3RunEv+0x8d0>)
 800c7d2:	f7f3 fcc1 	bl	8000158 <__aeabi_dsub>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4610      	mov	r0, r2
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f04f 0200 	mov.w	r2, #0
 800c7e2:	4b38      	ldr	r3, [pc, #224]	; (800c8c4 <_ZN10Controller3RunEv+0x8d4>)
 800c7e4:	f7f3 fcb8 	bl	8000158 <__aeabi_dsub>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f7f4 f91a 	bl	8000a28 <__aeabi_d2iz>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800c7fe:	69b8      	ldr	r0, [r7, #24]
 800c800:	f7f4 fa44 	bl	8000c8c <__aeabi_i2f>
 800c804:	4601      	mov	r1, r0
 800c806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	f240 434c 	movw	r3, #1100	; 0x44c
 800c80e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c812:	4620      	mov	r0, r4
 800c814:	f001 fd64 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800c818:	4603      	mov	r3, r0
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7f4 fc66 	bl	80010ec <__aeabi_f2iz>
 800c820:	4603      	mov	r3, r0
 800c822:	61bb      	str	r3, [r7, #24]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800c82a:	6978      	ldr	r0, [r7, #20]
 800c82c:	f7f4 fa2e 	bl	8000c8c <__aeabi_i2f>
 800c830:	4601      	mov	r1, r0
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	f240 434c 	movw	r3, #1100	; 0x44c
 800c83a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c83e:	4620      	mov	r0, r4
 800c840:	f001 fd4e 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800c844:	4603      	mov	r3, r0
 800c846:	4618      	mov	r0, r3
 800c848:	f7f4 fc50 	bl	80010ec <__aeabi_f2iz>
 800c84c:	4603      	mov	r3, r0
 800c84e:	617b      	str	r3, [r7, #20]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f7f4 fa18 	bl	8000c8c <__aeabi_i2f>
 800c85c:	4601      	mov	r1, r0
 800c85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	f240 434c 	movw	r3, #1100	; 0x44c
 800c866:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c86a:	4620      	mov	r0, r4
 800c86c:	f001 fd38 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800c870:	4603      	mov	r3, r0
 800c872:	4618      	mov	r0, r3
 800c874:	f7f4 fc3a 	bl	80010ec <__aeabi_f2iz>
 800c878:	4603      	mov	r3, r0
 800c87a:	613b      	str	r3, [r7, #16]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7f4 fa02 	bl	8000c8c <__aeabi_i2f>
 800c888:	4601      	mov	r1, r0
 800c88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	f240 434c 	movw	r3, #1100	; 0x44c
 800c892:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c896:	4620      	mov	r0, r4
 800c898:	f001 fd22 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800c89c:	4603      	mov	r3, r0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f4 fc24 	bl	80010ec <__aeabi_f2iz>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	60fb      	str	r3, [r7, #12]

    //SECOND DRONE
    if(swarm) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 31d5 	ldrb.w	r3, [r3, #469]	; 0x1d5
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 80b1 	beq.w	800ca16 <_ZN10Controller3RunEv+0xa26>
 800c8b4:	e008      	b.n	800c8c8 <_ZN10Controller3RunEv+0x8d8>
 800c8b6:	bf00      	nop
 800c8b8:	7ae147ae 	.word	0x7ae147ae
 800c8bc:	40272e14 	.word	0x40272e14
 800c8c0:	402e0000 	.word	0x402e0000
 800c8c4:	40490000 	.word	0x40490000
		controller_output_pwm2[0] = thr + K_swarm*(+ pd_pitch - pd_roll) + p_yaw;
 800c8c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8ca:	f7f4 f9df 	bl	8000c8c <__aeabi_i2f>
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	f7f4 f91e 	bl	8000b20 <__aeabi_fsub>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f4 fa23 	bl	8000d34 <__aeabi_fmul>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f7f4 f916 	bl	8000b24 <__addsf3>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7f4 f90d 	bl	8000b24 <__addsf3>
 800c90a:	4603      	mov	r3, r0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7f4 fbed 	bl	80010ec <__aeabi_f2iz>
 800c912:	4602      	mov	r2, r0
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		controller_output_pwm2[1] = thr + K_swarm*(- pd_pitch + pd_roll) + p_yaw;
 800c91a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c91c:	f7f4 f9b6 	bl	8000c8c <__aeabi_i2f>
 800c920:	4604      	mov	r4, r0
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c92e:	4619      	mov	r1, r3
 800c930:	4610      	mov	r0, r2
 800c932:	f7f4 f8f5 	bl	8000b20 <__aeabi_fsub>
 800c936:	4603      	mov	r3, r0
 800c938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f4 f9fa 	bl	8000d34 <__aeabi_fmul>
 800c940:	4603      	mov	r3, r0
 800c942:	4619      	mov	r1, r3
 800c944:	4620      	mov	r0, r4
 800c946:	f7f4 f8ed 	bl	8000b24 <__addsf3>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461a      	mov	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c954:	4619      	mov	r1, r3
 800c956:	4610      	mov	r0, r2
 800c958:	f7f4 f8e4 	bl	8000b24 <__addsf3>
 800c95c:	4603      	mov	r3, r0
 800c95e:	4618      	mov	r0, r3
 800c960:	f7f4 fbc4 	bl	80010ec <__aeabi_f2iz>
 800c964:	4602      	mov	r2, r0
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		controller_output_pwm2[2] = thr + K_swarm*(+ pd_pitch + pd_roll) - p_yaw;
 800c96c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c96e:	f7f4 f98d 	bl	8000c8c <__aeabi_i2f>
 800c972:	4604      	mov	r4, r0
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c980:	4619      	mov	r1, r3
 800c982:	4610      	mov	r0, r2
 800c984:	f7f4 f8ce 	bl	8000b24 <__addsf3>
 800c988:	4603      	mov	r3, r0
 800c98a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7f4 f9d1 	bl	8000d34 <__aeabi_fmul>
 800c992:	4603      	mov	r3, r0
 800c994:	4619      	mov	r1, r3
 800c996:	4620      	mov	r0, r4
 800c998:	f7f4 f8c4 	bl	8000b24 <__addsf3>
 800c99c:	4603      	mov	r3, r0
 800c99e:	461a      	mov	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	f7f4 f8b9 	bl	8000b20 <__aeabi_fsub>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7f4 fb9b 	bl	80010ec <__aeabi_f2iz>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		controller_output_pwm2[3] = thr + K_swarm*(- pd_pitch - pd_roll) - p_yaw;
 800c9be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c9c0:	f7f4 f964 	bl	8000c8c <__aeabi_i2f>
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c9cc:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f7f4 f8a1 	bl	8000b20 <__aeabi_fsub>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7f4 f9a6 	bl	8000d34 <__aeabi_fmul>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f7f4 f899 	bl	8000b24 <__addsf3>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f7f4 f88e 	bl	8000b20 <__aeabi_fsub>
 800ca04:	4603      	mov	r3, r0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7f4 fb70 	bl	80010ec <__aeabi_f2iz>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800ca14:	e013      	b.n	800ca3e <_ZN10Controller3RunEv+0xa4e>

    }

    else {
        controller_output_pwm2[0] = 1000;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        controller_output_pwm2[1] = 1000;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca26:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
        controller_output_pwm2[2] = 1000;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca30:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        controller_output_pwm2[3] = 1000;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca3a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7f4 f91e 	bl	8000c8c <__aeabi_i2f>
 800ca50:	4601      	mov	r1, r0
 800ca52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f001 fc3e 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800ca64:	4603      	mov	r3, r0
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f4 fb40 	bl	80010ec <__aeabi_f2iz>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7f4 f903 	bl	8000c8c <__aeabi_i2f>
 800ca86:	4601      	mov	r1, r0
 800ca88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ca94:	4620      	mov	r0, r4
 800ca96:	f001 fc23 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7f4 fb25 	bl	80010ec <__aeabi_f2iz>
 800caa2:	4602      	mov	r2, r0
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f4 f8e8 	bl	8000c8c <__aeabi_i2f>
 800cabc:	4601      	mov	r1, r0
 800cabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cac6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800caca:	4620      	mov	r0, r4
 800cacc:	f001 fc08 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800cad0:	4603      	mov	r3, r0
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f4 fb0a 	bl	80010ec <__aeabi_f2iz>
 800cad8:	4602      	mov	r2, r0
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800caec:	4618      	mov	r0, r3
 800caee:	f7f4 f8cd 	bl	8000c8c <__aeabi_i2f>
 800caf2:	4601      	mov	r1, r0
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cafc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cb00:	4620      	mov	r0, r4
 800cb02:	f001 fbed 	bl	800e2e0 <_ZN3PID3SatEfiii>
 800cb06:	4603      	mov	r3, r0
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f4 faef 	bl	80010ec <__aeabi_f2iz>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	69ba      	ldr	r2, [r7, #24]
 800cb1a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    controller_output_pwm[1] = pwm2;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm[2] = pwm3;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm[3] = pwm4;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

  //  return controller_output;
}
 800cb36:	bf00      	nop
 800cb38:	3738      	adds	r7, #56	; 0x38
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cb40 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 fc68 	bl	800e424 <_ZN3PIDD1Ev>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f001 fc62 	bl	800e424 <_ZN3PIDD1Ev>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800cb66:	4618      	mov	r0, r3
 800cb68:	f001 fc5c 	bl	800e424 <_ZN3PIDD1Ev>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fc56 	bl	800e424 <_ZN3PIDD1Ev>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 fc50 	bl	800e424 <_ZN3PIDD1Ev>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 fc4a 	bl	800e424 <_ZN3PIDD1Ev>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	33f8      	adds	r3, #248	; 0xf8
 800cb94:	4618      	mov	r0, r3
 800cb96:	f001 fcc4 	bl	800e522 <_ZN3lpfD1Ev>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	33d0      	adds	r3, #208	; 0xd0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 fcbf 	bl	800e522 <_ZN3lpfD1Ev>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	33a8      	adds	r3, #168	; 0xa8
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f001 fcba 	bl	800e522 <_ZN3lpfD1Ev>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af04      	add	r7, sp, #16
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	60da      	str	r2, [r3, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a87      	ldr	r2, [pc, #540]	; (800cde8 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800cbcc:	611a      	str	r2, [r3, #16]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f04f 0200 	mov.w	r2, #0
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f04f 0200 	mov.w	r2, #0
 800cbe4:	635a      	str	r2, [r3, #52]	; 0x34
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a80      	ldr	r2, [pc, #512]	; (800cdec <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a80      	ldr	r2, [pc, #512]	; (800cdf0 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800cbf0:	651a      	str	r2, [r3, #80]	; 0x50
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a7f      	ldr	r2, [pc, #508]	; (800cdf4 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800cbf6:	655a      	str	r2, [r3, #84]	; 0x54
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a7d      	ldr	r2, [pc, #500]	; (800cdf0 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800cbfc:	659a      	str	r2, [r3, #88]	; 0x58
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f04f 0200 	mov.w	r2, #0
 800cc04:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f04f 0200 	mov.w	r2, #0
 800cc0c:	661a      	str	r2, [r3, #96]	; 0x60
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	665a      	str	r2, [r3, #100]	; 0x64
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a74      	ldr	r2, [pc, #464]	; (800cdec <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800cc1a:	669a      	str	r2, [r3, #104]	; 0x68
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a76      	ldr	r2, [pc, #472]	; (800cdf8 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800cc20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f04f 0200 	mov.w	r2, #0
 800cc2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f04f 0200 	mov.w	r2, #0
 800cc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a70      	ldr	r2, [pc, #448]	; (800cdfc <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800cc3c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a6a      	ldr	r2, [pc, #424]	; (800cdec <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800cc44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a68      	ldr	r2, [pc, #416]	; (800cdec <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800cc4c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a6b      	ldr	r2, [pc, #428]	; (800ce00 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800cc54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a6a      	ldr	r2, [pc, #424]	; (800ce04 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800cc5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cc66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a66      	ldr	r2, [pc, #408]	; (800ce08 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800cc6e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a65      	ldr	r2, [pc, #404]	; (800ce0c <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800cc76:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a62      	ldr	r2, [pc, #392]	; (800ce10 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800cc88:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	22c8      	movs	r2, #200	; 0xc8
 800cc90:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7f3 fff6 	bl	8000c8c <__aeabi_i2f>
 800cca0:	4603      	mov	r3, r0
 800cca2:	4619      	mov	r1, r3
 800cca4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cca8:	f7f4 f8f8 	bl	8000e9c <__aeabi_fdiv>
 800ccac:	4603      	mov	r3, r0
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f3 fbb2 	bl	8000418 <__aeabi_f2d>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a54      	ldr	r2, [pc, #336]	; (800ce14 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800ccc2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a53      	ldr	r2, [pc, #332]	; (800ce18 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800ccca:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a51      	ldr	r2, [pc, #324]	; (800ce18 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800ccd2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a50      	ldr	r2, [pc, #320]	; (800ce1c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800ccda:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800cce4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a4d      	ldr	r2, [pc, #308]	; (800ce20 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800ccec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ccf6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a49      	ldr	r2, [pc, #292]	; (800ce24 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800ccfe:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a48      	ldr	r2, [pc, #288]	; (800ce28 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800cd06:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a47      	ldr	r2, [pc, #284]	; (800ce2c <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800cd0e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd18:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd22:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a41      	ldr	r2, [pc, #260]	; (800ce30 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800cd2a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a40      	ldr	r2, [pc, #256]	; (800ce34 <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800cd32:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800cd3c:	a31e      	add	r3, pc, #120	; (adr r3, 800cdb8 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd46:	a31c      	add	r3, pc, #112	; (adr r3, 800cdb8 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	e9cd 2300 	strd	r2, r3, [sp]
 800cd50:	a31b      	add	r3, pc, #108	; (adr r3, 800cdc0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	4608      	mov	r0, r1
 800cd58:	f001 fb72 	bl	800e440 <_ZN3lpfC1Eddd>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800cd62:	a319      	add	r3, pc, #100	; (adr r3, 800cdc8 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd6c:	a316      	add	r3, pc, #88	; (adr r3, 800cdc8 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	e9cd 2300 	strd	r2, r3, [sp]
 800cd76:	a316      	add	r3, pc, #88	; (adr r3, 800cdd0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	f001 fb5f 	bl	800e440 <_ZN3lpfC1Eddd>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f503 7148 	add.w	r1, r3, #800	; 0x320
 800cd88:	a313      	add	r3, pc, #76	; (adr r3, 800cdd8 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd92:	a311      	add	r3, pc, #68	; (adr r3, 800cdd8 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	e9cd 2300 	strd	r2, r3, [sp]
 800cd9c:	a310      	add	r3, pc, #64	; (adr r3, 800cde0 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	4608      	mov	r0, r1
 800cda4:	f001 fb4c 	bl	800e440 <_ZN3lpfC1Eddd>

}
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	f3af 8000 	nop.w
 800cdb8:	de7ea5f8 	.word	0xde7ea5f8
 800cdbc:	3fb2a454 	.word	0x3fb2a454
 800cdc0:	ab367a10 	.word	0xab367a10
 800cdc4:	3feb573e 	.word	0x3feb573e
 800cdc8:	fc3b4f61 	.word	0xfc3b4f61
 800cdcc:	3fa35935 	.word	0x3fa35935
 800cdd0:	4f0d844d 	.word	0x4f0d844d
 800cdd4:	3fed94af 	.word	0x3fed94af
 800cdd8:	e5c91d15 	.word	0xe5c91d15
 800cddc:	3feda43f 	.word	0x3feda43f
 800cde0:	cb923a2a 	.word	0xcb923a2a
 800cde4:	bfeb487f 	.word	0xbfeb487f
 800cde8:	3ca3d70a 	.word	0x3ca3d70a
 800cdec:	4e6e6b28 	.word	0x4e6e6b28
 800cdf0:	3c23d70a 	.word	0x3c23d70a
 800cdf4:	3f333333 	.word	0x3f333333
 800cdf8:	47c35000 	.word	0x47c35000
 800cdfc:	461c4000 	.word	0x461c4000
 800ce00:	41200000 	.word	0x41200000
 800ce04:	4b189680 	.word	0x4b189680
 800ce08:	40a00000 	.word	0x40a00000
 800ce0c:	42480000 	.word	0x42480000
 800ce10:	42654ca3 	.word	0x42654ca3
 800ce14:	3e99999a 	.word	0x3e99999a
 800ce18:	40400000 	.word	0x40400000
 800ce1c:	41a00000 	.word	0x41a00000
 800ce20:	3cdd2f1b 	.word	0x3cdd2f1b
 800ce24:	48f42400 	.word	0x48f42400
 800ce28:	3727c5ac 	.word	0x3727c5ac
 800ce2c:	322bcc77 	.word	0x322bcc77
 800ce30:	c0600000 	.word	0xc0600000
 800ce34:	c0c00000 	.word	0xc0c00000

0800ce38 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb>:
	}


}

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle, bool update_enable) {
 800ce38:	b5b0      	push	{r4, r5, r7, lr}
 800ce3a:	b0aa      	sub	sp, #168	; 0xa8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
 800ce44:	4613      	mov	r3, r2
 800ce46:	70bb      	strb	r3, [r7, #2]
	  float accX = acc[0];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ce4e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  float accY = acc[1];
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ce56:	66bb      	str	r3, [r7, #104]	; 0x68
	  float accZ = acc[2];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce5e:	667b      	str	r3, [r7, #100]	; 0x64

	  float gyroX = gyro[0];
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800ce66:	663b      	str	r3, [r7, #96]	; 0x60
	  float gyroY = gyro[1];
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce6e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float gyroZ = gyro[2];
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ce76:	65bb      	str	r3, [r7, #88]	; 0x58

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800ce78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ce7c:	f7f3 ff5a 	bl	8000d34 <__aeabi_fmul>
 800ce80:	4603      	mov	r3, r0
 800ce82:	461c      	mov	r4, r3
 800ce84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce86:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ce88:	f7f3 ff54 	bl	8000d34 <__aeabi_fmul>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7f3 fe47 	bl	8000b24 <__addsf3>
 800ce96:	4603      	mov	r3, r0
 800ce98:	461c      	mov	r4, r3
 800ce9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce9c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ce9e:	f7f3 ff49 	bl	8000d34 <__aeabi_fmul>
 800cea2:	4603      	mov	r3, r0
 800cea4:	4619      	mov	r1, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7f3 fe3c 	bl	8000b24 <__addsf3>
 800ceac:	4603      	mov	r3, r0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f5 f966 	bl	8002180 <_ZSt4sqrtf>
 800ceb4:	6578      	str	r0, [r7, #84]	; 0x54

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800ceb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ceb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ceba:	f7f3 ffef 	bl	8000e9c <__aeabi_fdiv>
 800cebe:	4603      	mov	r3, r0
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f5 f937 	bl	8002134 <_ZSt4asinf>
 800cec6:	4602      	mov	r2, r0
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cece:	4619      	mov	r1, r3
 800ced0:	4610      	mov	r0, r2
 800ced2:	f7f3 ff2f 	bl	8000d34 <__aeabi_fmul>
 800ced6:	4603      	mov	r3, r0
 800ced8:	461a      	mov	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7f3 fe1e 	bl	8000b24 <__addsf3>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461a      	mov	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800cef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cef4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cef6:	f7f3 ffd1 	bl	8000e9c <__aeabi_fdiv>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7f5 f919 	bl	8002134 <_ZSt4asinf>
 800cf02:	4602      	mov	r2, r0
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7f3 ff11 	bl	8000d34 <__aeabi_fmul>
 800cf12:	4603      	mov	r3, r0
 800cf14:	461a      	mov	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7f3 fe00 	bl	8000b24 <__addsf3>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	f000 80a6 	beq.w	800d082 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x24a>
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	f300 810c 	bgt.w	800d154 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x31c>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x10e>
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d04f      	beq.n	800cfe4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x1ac>
 800cf44:	e106      	b.n	800d154 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x31c>
		case ROLL:
			angle_ekf = roll_ekf;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800cf4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = roll_rate;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = roll_bias;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cf5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = roll_acc;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800cf68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroX;
 800cf6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sa = 1e-2;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a56      	ldr	r2, [pc, #344]	; (800d0d0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x298>)
 800cf76:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800cf7e:	f083 0301 	eor.w	r3, r3, #1
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x15a>
				Qa = 3;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a52      	ldr	r2, [pc, #328]	; (800d0d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x29c>)
 800cf8c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800cf90:	e003      	b.n	800cf9a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x162>

			}

			else {
				Qa = 5e6;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a50      	ldr	r2, [pc, #320]	; (800d0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2a0>)
 800cf96:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

			}
			Qg = 1e1;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a4f      	ldr	r2, [pc, #316]	; (800d0dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2a4>)
 800cf9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

			S11_angle = S11_roll;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_roll;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_roll;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_roll;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_roll;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_roll;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfce:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_roll;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfd4:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_roll;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfda:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_roll;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfe0:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800cfe2:	e0b7      	b.n	800d154 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x31c>

		case PITCH:
			angle_ekf = pitch_ekf;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800cfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = pitch_rate;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = pitch_bias;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = pitch_acc;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800d006:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroY;
 800d00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d00c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sa = 1e-2;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a2f      	ldr	r2, [pc, #188]	; (800d0d0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x298>)
 800d014:	651a      	str	r2, [r3, #80]	; 0x50

			if(!armed) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800d01c:	f083 0301 	eor.w	r3, r3, #1
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d004      	beq.n	800d030 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x1f8>
				Qa = 3;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a2a      	ldr	r2, [pc, #168]	; (800d0d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x29c>)
 800d02a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800d02e:	e003      	b.n	800d038 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x200>

			}

			else {
				Qa = 5e6;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a29      	ldr	r2, [pc, #164]	; (800d0d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2a0>)
 800d034:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

			}
			Qg = 1e1;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a28      	ldr	r2, [pc, #160]	; (800d0dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2a4>)
 800d03c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158


			S11_angle = S11_pitch;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_pitch;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_pitch;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_pitch;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_pitch;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_pitch;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06c:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_pitch;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d072:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_pitch;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d078:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_pitch;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d07e:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800d080:	e068      	b.n	800d154 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x31c>

		case YAW:
			angle_ekf = yaw_ekf;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800d088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = yaw_rate;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = yaw_bias;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d09a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = yaw_acc;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800d0a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroZ;
 800d0a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sa = 5e2;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a0b      	ldr	r2, [pc, #44]	; (800d0e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2a8>)
 800d0b2:	651a      	str	r2, [r3, #80]	; 0x50

			if(!armed) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800d0ba:	f083 0301 	eor.w	r3, r3, #1
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00f      	beq.n	800d0e4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2ac>
				Qa = 3;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a03      	ldr	r2, [pc, #12]	; (800d0d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x29c>)
 800d0c8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800d0cc:	e00e      	b.n	800d0ec <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x2b4>
 800d0ce:	bf00      	nop
 800d0d0:	3c23d70a 	.word	0x3c23d70a
 800d0d4:	40400000 	.word	0x40400000
 800d0d8:	4a989680 	.word	0x4a989680
 800d0dc:	41200000 	.word	0x41200000
 800d0e0:	43fa0000 	.word	0x43fa0000

			}

			else {
				Qa = 5e8;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a19      	ldr	r2, [pc, #100]	; (800d14c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x314>)
 800d0e8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

			}
			Qg = 1e1;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a18      	ldr	r2, [pc, #96]	; (800d150 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x318>)
 800d0f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

			S11_angle = S11_yaw;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_yaw;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_yaw;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d10e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_yaw;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_yaw;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_yaw;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d12c:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_yaw;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d134:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_yaw;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d13c:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_yaw;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d144:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800d146:	bf00      	nop
 800d148:	e004      	b.n	800d154 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0x31c>
 800d14a:	bf00      	nop
 800d14c:	4dee6b28 	.word	0x4dee6b28
 800d150:	41200000 	.word	0x41200000

	}
	angle_ekf = angle_ekf + angle_rate*st;
 800d154:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800d158:	f7f3 f95e 	bl	8000418 <__aeabi_f2d>
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d164:	f7f3 f958 	bl	8000418 <__aeabi_f2d>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d16e:	f7f3 f9ab 	bl	80004c8 <__aeabi_dmul>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	4620      	mov	r0, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	f7f2 ffef 	bl	800015c <__adddf3>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4610      	mov	r0, r2
 800d184:	4619      	mov	r1, r3
 800d186:	f7f3 fc77 	bl	8000a78 <__aeabi_d2f>
 800d18a:	4603      	mov	r3, r0
 800d18c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    if(update_enable) {
 800d190:	78bb      	ldrb	r3, [r7, #2]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 83fc 	beq.w	800d990 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xb58>

    	float CS11_angle_est = S13_angle + S33_angle*st;
 800d198:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d19c:	f7f3 f93c 	bl	8000418 <__aeabi_f2d>
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d1a6:	f7f3 f937 	bl	8000418 <__aeabi_f2d>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d1b0:	f7f3 f98a 	bl	80004c8 <__aeabi_dmul>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f7f2 ffce 	bl	800015c <__adddf3>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f7f3 fc56 	bl	8000a78 <__aeabi_d2f>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	653b      	str	r3, [r7, #80]	; 0x50

    	S11_angle = S11_angle + sa + CS11_angle_est*st + S31_angle*st;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7f3 fca3 	bl	8000b24 <__addsf3>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7f3 f919 	bl	8000418 <__aeabi_f2d>
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d1ec:	f7f3 f914 	bl	8000418 <__aeabi_f2d>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d1f6:	f7f3 f967 	bl	80004c8 <__aeabi_dmul>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4620      	mov	r0, r4
 800d200:	4629      	mov	r1, r5
 800d202:	f7f2 ffab 	bl	800015c <__adddf3>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4614      	mov	r4, r2
 800d20c:	461d      	mov	r5, r3
 800d20e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d210:	f7f3 f902 	bl	8000418 <__aeabi_f2d>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d21a:	f7f3 f955 	bl	80004c8 <__aeabi_dmul>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4620      	mov	r0, r4
 800d224:	4629      	mov	r1, r5
 800d226:	f7f2 ff99 	bl	800015c <__adddf3>
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	4610      	mov	r0, r2
 800d230:	4619      	mov	r1, r3
 800d232:	f7f3 fc21 	bl	8000a78 <__aeabi_d2f>
 800d236:	4603      	mov	r3, r0
 800d238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    	S12_angle = S12_angle + S32_angle*st;
 800d23c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d240:	f7f3 f8ea 	bl	8000418 <__aeabi_f2d>
 800d244:	4604      	mov	r4, r0
 800d246:	460d      	mov	r5, r1
 800d248:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d24a:	f7f3 f8e5 	bl	8000418 <__aeabi_f2d>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d254:	f7f3 f938 	bl	80004c8 <__aeabi_dmul>
 800d258:	4602      	mov	r2, r0
 800d25a:	460b      	mov	r3, r1
 800d25c:	4620      	mov	r0, r4
 800d25e:	4629      	mov	r1, r5
 800d260:	f7f2 ff7c 	bl	800015c <__adddf3>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4610      	mov	r0, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	f7f3 fc04 	bl	8000a78 <__aeabi_d2f>
 800d270:	4603      	mov	r3, r0
 800d272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    	S13_angle = CS11_angle_est;
 800d276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    	S21_angle = S21_angle + S23_angle*st;
 800d27c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800d280:	f7f3 f8ca 	bl	8000418 <__aeabi_f2d>
 800d284:	4604      	mov	r4, r0
 800d286:	460d      	mov	r5, r1
 800d288:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d28a:	f7f3 f8c5 	bl	8000418 <__aeabi_f2d>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d294:	f7f3 f918 	bl	80004c8 <__aeabi_dmul>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4620      	mov	r0, r4
 800d29e:	4629      	mov	r1, r5
 800d2a0:	f7f2 ff5c 	bl	800015c <__adddf3>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f7f3 fbe4 	bl	8000a78 <__aeabi_d2f>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    	S22_angle = S22_angle + sb;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d2c0:	f7f3 fc30 	bl	8000b24 <__addsf3>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    	S23_angle = S23_angle;
    	S31_angle = S31_angle + S33_angle*st;
 800d2ca:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d2cc:	f7f3 f8a4 	bl	8000418 <__aeabi_f2d>
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	460d      	mov	r5, r1
 800d2d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d2d6:	f7f3 f89f 	bl	8000418 <__aeabi_f2d>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800d2e0:	f7f3 f8f2 	bl	80004c8 <__aeabi_dmul>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	f7f2 ff36 	bl	800015c <__adddf3>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f7f3 fbbe 	bl	8000a78 <__aeabi_d2f>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	67bb      	str	r3, [r7, #120]	; 0x78
    	S32_angle = S32_angle;
    	S33_angle = S33_angle + sr;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d304:	4619      	mov	r1, r3
 800d306:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d308:	f7f3 fc0c 	bl	8000b24 <__addsf3>
 800d30c:	4603      	mov	r3, r0
 800d30e:	673b      	str	r3, [r7, #112]	; 0x70

		//ANGLE CORRECTION
    	float CK11 = 1/(Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7f3 fd08 	bl	8000d34 <__aeabi_fmul>
 800d324:	4603      	mov	r3, r0
 800d326:	461c      	mov	r4, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d32e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d332:	4618      	mov	r0, r3
 800d334:	f7f3 fcfe 	bl	8000d34 <__aeabi_fmul>
 800d338:	4603      	mov	r3, r0
 800d33a:	4619      	mov	r1, r3
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7f3 fbf1 	bl	8000b24 <__addsf3>
 800d342:	4603      	mov	r3, r0
 800d344:	461c      	mov	r4, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d34c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d34e:	4618      	mov	r0, r3
 800d350:	f7f3 fcf0 	bl	8000d34 <__aeabi_fmul>
 800d354:	4603      	mov	r3, r0
 800d356:	4619      	mov	r1, r3
 800d358:	4620      	mov	r0, r4
 800d35a:	f7f3 fbe3 	bl	8000b24 <__addsf3>
 800d35e:	4603      	mov	r3, r0
 800d360:	461c      	mov	r4, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d368:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7f3 fce2 	bl	8000d34 <__aeabi_fmul>
 800d370:	4603      	mov	r3, r0
 800d372:	4619      	mov	r1, r3
 800d374:	4620      	mov	r0, r4
 800d376:	f7f3 fbd5 	bl	8000b24 <__addsf3>
 800d37a:	4603      	mov	r3, r0
 800d37c:	461c      	mov	r4, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d384:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d386:	4618      	mov	r0, r3
 800d388:	f7f3 fcd4 	bl	8000d34 <__aeabi_fmul>
 800d38c:	4603      	mov	r3, r0
 800d38e:	4619      	mov	r1, r3
 800d390:	4620      	mov	r0, r4
 800d392:	f7f3 fbc7 	bl	8000b24 <__addsf3>
 800d396:	4603      	mov	r3, r0
 800d398:	461c      	mov	r4, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d3a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7f3 fcc5 	bl	8000d34 <__aeabi_fmul>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7f3 fbb8 	bl	8000b24 <__addsf3>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461c      	mov	r4, r3
 800d3b8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d3bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d3c0:	f7f3 fcb8 	bl	8000d34 <__aeabi_fmul>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7f3 fbab 	bl	8000b24 <__addsf3>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461c      	mov	r4, r3
 800d3d2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d3d6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d3da:	f7f3 fcab 	bl	8000d34 <__aeabi_fmul>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7f3 fb9c 	bl	8000b20 <__aeabi_fsub>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	461c      	mov	r4, r3
 800d3ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d3ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d3f2:	f7f3 fc9f 	bl	8000d34 <__aeabi_fmul>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f7f3 fb92 	bl	8000b24 <__addsf3>
 800d400:	4603      	mov	r3, r0
 800d402:	461c      	mov	r4, r3
 800d404:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d408:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d40c:	f7f3 fc92 	bl	8000d34 <__aeabi_fmul>
 800d410:	4603      	mov	r3, r0
 800d412:	4619      	mov	r1, r3
 800d414:	4620      	mov	r0, r4
 800d416:	f7f3 fb83 	bl	8000b20 <__aeabi_fsub>
 800d41a:	4603      	mov	r3, r0
 800d41c:	461c      	mov	r4, r3
 800d41e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d420:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d424:	f7f3 fc86 	bl	8000d34 <__aeabi_fmul>
 800d428:	4603      	mov	r3, r0
 800d42a:	4619      	mov	r1, r3
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7f3 fb79 	bl	8000b24 <__addsf3>
 800d432:	4603      	mov	r3, r0
 800d434:	461c      	mov	r4, r3
 800d436:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d438:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d43c:	f7f3 fc7a 	bl	8000d34 <__aeabi_fmul>
 800d440:	4603      	mov	r3, r0
 800d442:	4619      	mov	r1, r3
 800d444:	4620      	mov	r0, r4
 800d446:	f7f3 fb6b 	bl	8000b20 <__aeabi_fsub>
 800d44a:	4603      	mov	r3, r0
 800d44c:	461c      	mov	r4, r3
 800d44e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d450:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d454:	f7f3 fc6e 	bl	8000d34 <__aeabi_fmul>
 800d458:	4603      	mov	r3, r0
 800d45a:	4619      	mov	r1, r3
 800d45c:	4620      	mov	r0, r4
 800d45e:	f7f3 fb61 	bl	8000b24 <__addsf3>
 800d462:	4603      	mov	r3, r0
 800d464:	461c      	mov	r4, r3
 800d466:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d468:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d46c:	f7f3 fc62 	bl	8000d34 <__aeabi_fmul>
 800d470:	4603      	mov	r3, r0
 800d472:	4619      	mov	r1, r3
 800d474:	4620      	mov	r0, r4
 800d476:	f7f3 fb53 	bl	8000b20 <__aeabi_fsub>
 800d47a:	4603      	mov	r3, r0
 800d47c:	4619      	mov	r1, r3
 800d47e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d482:	f7f3 fd0b 	bl	8000e9c <__aeabi_fdiv>
 800d486:	4603      	mov	r3, r0
 800d488:	64fb      	str	r3, [r7, #76]	; 0x4c
    	float CK12 = Qg + S22_angle + S23_angle + S32_angle + S33_angle;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d490:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d494:	4618      	mov	r0, r3
 800d496:	f7f3 fb45 	bl	8000b24 <__addsf3>
 800d49a:	4603      	mov	r3, r0
 800d49c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f3 fb40 	bl	8000b24 <__addsf3>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f3 fb3b 	bl	8000b24 <__addsf3>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d4b4:	f7f3 fb36 	bl	8000b24 <__addsf3>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	64bb      	str	r3, [r7, #72]	; 0x48
    	float CK13 = S12_angle + S13_angle;
 800d4bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d4c0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d4c4:	f7f3 fb2e 	bl	8000b24 <__addsf3>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	647b      	str	r3, [r7, #68]	; 0x44
    	float CK14 = S21_angle + S31_angle;
 800d4cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d4ce:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800d4d2:	f7f3 fb27 	bl	8000b24 <__addsf3>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	643b      	str	r3, [r7, #64]	; 0x40
    	float CK15 = Qa + S11_angle;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d4e6:	f7f3 fb1d 	bl	8000b24 <__addsf3>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    	float CK16 = S32_angle + S33_angle;
 800d4ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d4f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d4f2:	f7f3 fb17 	bl	8000b24 <__addsf3>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	63bb      	str	r3, [r7, #56]	; 0x38
    	float CK17 = S22_angle + S23_angle;
 800d4fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d4fc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d500:	f7f3 fb10 	bl	8000b24 <__addsf3>
 800d504:	4603      	mov	r3, r0
 800d506:	637b      	str	r3, [r7, #52]	; 0x34

    	float Kt11 = CK11*CK12*S11_angle - CK11*CK13*CK14;
 800d508:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d50a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d50c:	f7f3 fc12 	bl	8000d34 <__aeabi_fmul>
 800d510:	4603      	mov	r3, r0
 800d512:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d516:	4618      	mov	r0, r3
 800d518:	f7f3 fc0c 	bl	8000d34 <__aeabi_fmul>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461c      	mov	r4, r3
 800d520:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d524:	f7f3 fc06 	bl	8000d34 <__aeabi_fmul>
 800d528:	4603      	mov	r3, r0
 800d52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7f3 fc01 	bl	8000d34 <__aeabi_fmul>
 800d532:	4603      	mov	r3, r0
 800d534:	4619      	mov	r1, r3
 800d536:	4620      	mov	r0, r4
 800d538:	f7f3 faf2 	bl	8000b20 <__aeabi_fsub>
 800d53c:	4603      	mov	r3, r0
 800d53e:	633b      	str	r3, [r7, #48]	; 0x30
    	float Kt12 = CK11*CK13*CK15 - CK11*CK13*S11_angle;
 800d540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d542:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d544:	f7f3 fbf6 	bl	8000d34 <__aeabi_fmul>
 800d548:	4603      	mov	r3, r0
 800d54a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f3 fbf1 	bl	8000d34 <__aeabi_fmul>
 800d552:	4603      	mov	r3, r0
 800d554:	461c      	mov	r4, r3
 800d556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d558:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d55a:	f7f3 fbeb 	bl	8000d34 <__aeabi_fmul>
 800d55e:	4603      	mov	r3, r0
 800d560:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d564:	4618      	mov	r0, r3
 800d566:	f7f3 fbe5 	bl	8000d34 <__aeabi_fmul>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4619      	mov	r1, r3
 800d56e:	4620      	mov	r0, r4
 800d570:	f7f3 fad6 	bl	8000b20 <__aeabi_fsub>
 800d574:	4603      	mov	r3, r0
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
    	float Kt21 = CK11*CK12*S21_angle - CK11*CK14*CK17;
 800d578:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d57a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d57c:	f7f3 fbda 	bl	8000d34 <__aeabi_fmul>
 800d580:	4603      	mov	r3, r0
 800d582:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d586:	4618      	mov	r0, r3
 800d588:	f7f3 fbd4 	bl	8000d34 <__aeabi_fmul>
 800d58c:	4603      	mov	r3, r0
 800d58e:	461c      	mov	r4, r3
 800d590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d592:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d594:	f7f3 fbce 	bl	8000d34 <__aeabi_fmul>
 800d598:	4603      	mov	r3, r0
 800d59a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7f3 fbc9 	bl	8000d34 <__aeabi_fmul>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f7f3 faba 	bl	8000b20 <__aeabi_fsub>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
    	float Kt22 = CK11*CK15*CK17 - CK11*CK13*S21_angle;
 800d5b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5b4:	f7f3 fbbe 	bl	8000d34 <__aeabi_fmul>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f3 fbb9 	bl	8000d34 <__aeabi_fmul>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	461c      	mov	r4, r3
 800d5c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5ca:	f7f3 fbb3 	bl	8000d34 <__aeabi_fmul>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f3 fbad 	bl	8000d34 <__aeabi_fmul>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7f3 fa9e 	bl	8000b20 <__aeabi_fsub>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
    	float Kt31 = CK11*CK12*S31_angle - CK11*CK14*CK16;
 800d5e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d5ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5ec:	f7f3 fba2 	bl	8000d34 <__aeabi_fmul>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7f3 fb9d 	bl	8000d34 <__aeabi_fmul>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	461c      	mov	r4, r3
 800d5fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d600:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d602:	f7f3 fb97 	bl	8000d34 <__aeabi_fmul>
 800d606:	4603      	mov	r3, r0
 800d608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f3 fb92 	bl	8000d34 <__aeabi_fmul>
 800d610:	4603      	mov	r3, r0
 800d612:	4619      	mov	r1, r3
 800d614:	4620      	mov	r0, r4
 800d616:	f7f3 fa83 	bl	8000b20 <__aeabi_fsub>
 800d61a:	4603      	mov	r3, r0
 800d61c:	623b      	str	r3, [r7, #32]
    	float Kt32 = CK11*CK15*CK16 - CK11*CK13*S31_angle;
 800d61e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d620:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d622:	f7f3 fb87 	bl	8000d34 <__aeabi_fmul>
 800d626:	4603      	mov	r3, r0
 800d628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f3 fb82 	bl	8000d34 <__aeabi_fmul>
 800d630:	4603      	mov	r3, r0
 800d632:	461c      	mov	r4, r3
 800d634:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d636:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d638:	f7f3 fb7c 	bl	8000d34 <__aeabi_fmul>
 800d63c:	4603      	mov	r3, r0
 800d63e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d640:	4618      	mov	r0, r3
 800d642:	f7f3 fb77 	bl	8000d34 <__aeabi_fmul>
 800d646:	4603      	mov	r3, r0
 800d648:	4619      	mov	r1, r3
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7f3 fa68 	bl	8000b20 <__aeabi_fsub>
 800d650:	4603      	mov	r3, r0
 800d652:	61fb      	str	r3, [r7, #28]


    	float Cx11 = angle_rate + angle_bias - gyro;
 800d654:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d658:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d65c:	f7f3 fa62 	bl	8000b24 <__addsf3>
 800d660:	4603      	mov	r3, r0
 800d662:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d666:	4618      	mov	r0, r3
 800d668:	f7f3 fa5a 	bl	8000b20 <__aeabi_fsub>
 800d66c:	4603      	mov	r3, r0
 800d66e:	61bb      	str	r3, [r7, #24]
    	float Cx12 = angle_acc - angle_ekf;
 800d670:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d674:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d678:	f7f3 fa52 	bl	8000b20 <__aeabi_fsub>
 800d67c:	4603      	mov	r3, r0
 800d67e:	617b      	str	r3, [r7, #20]

    	angle_ekf = angle_ekf - Cx11*Kt12 + Cx12*Kt11;
 800d680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d682:	69b8      	ldr	r0, [r7, #24]
 800d684:	f7f3 fb56 	bl	8000d34 <__aeabi_fmul>
 800d688:	4603      	mov	r3, r0
 800d68a:	4619      	mov	r1, r3
 800d68c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800d690:	f7f3 fa46 	bl	8000b20 <__aeabi_fsub>
 800d694:	4603      	mov	r3, r0
 800d696:	461c      	mov	r4, r3
 800d698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	f7f3 fb4a 	bl	8000d34 <__aeabi_fmul>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f7f3 fa3d 	bl	8000b24 <__addsf3>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    	angle_bias = angle_bias - Cx11*Kt22 + Cx12*Kt21;
 800d6b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6b2:	69b8      	ldr	r0, [r7, #24]
 800d6b4:	f7f3 fb3e 	bl	8000d34 <__aeabi_fmul>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d6c0:	f7f3 fa2e 	bl	8000b20 <__aeabi_fsub>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6ca:	6978      	ldr	r0, [r7, #20]
 800d6cc:	f7f3 fb32 	bl	8000d34 <__aeabi_fmul>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f7f3 fa25 	bl	8000b24 <__addsf3>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    	angle_rate = angle_rate - Cx11*Kt32 + Cx12*Kt31;
 800d6e0:	69f9      	ldr	r1, [r7, #28]
 800d6e2:	69b8      	ldr	r0, [r7, #24]
 800d6e4:	f7f3 fb26 	bl	8000d34 <__aeabi_fmul>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d6f0:	f7f3 fa16 	bl	8000b20 <__aeabi_fsub>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	461c      	mov	r4, r3
 800d6f8:	6a39      	ldr	r1, [r7, #32]
 800d6fa:	6978      	ldr	r0, [r7, #20]
 800d6fc:	f7f3 fb1a 	bl	8000d34 <__aeabi_fmul>
 800d700:	4603      	mov	r3, r0
 800d702:	4619      	mov	r1, r3
 800d704:	4620      	mov	r0, r4
 800d706:	f7f3 fa0d 	bl	8000b24 <__addsf3>
 800d70a:	4603      	mov	r3, r0
 800d70c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    	float CS11_angle = Kt32 - 1;
 800d710:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d714:	69f8      	ldr	r0, [r7, #28]
 800d716:	f7f3 fa03 	bl	8000b20 <__aeabi_fsub>
 800d71a:	4603      	mov	r3, r0
 800d71c:	613b      	str	r3, [r7, #16]
    	float CS12_angle = Kt22 - 1;
 800d71e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d724:	f7f3 f9fc 	bl	8000b20 <__aeabi_fsub>
 800d728:	4603      	mov	r3, r0
 800d72a:	60fb      	str	r3, [r7, #12]
    	float CS13_angle = Kt11 - 1;
 800d72c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d732:	f7f3 f9f5 	bl	8000b20 <__aeabi_fsub>
 800d736:	4603      	mov	r3, r0
 800d738:	60bb      	str	r3, [r7, #8]

    	S11_angle = - CS13_angle*S11_angle - Kt12*S21_angle - Kt12*S31_angle;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d740:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d744:	4618      	mov	r0, r3
 800d746:	f7f3 faf5 	bl	8000d34 <__aeabi_fmul>
 800d74a:	4603      	mov	r3, r0
 800d74c:	461c      	mov	r4, r3
 800d74e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d754:	f7f3 faee 	bl	8000d34 <__aeabi_fmul>
 800d758:	4603      	mov	r3, r0
 800d75a:	4619      	mov	r1, r3
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7f3 f9df 	bl	8000b20 <__aeabi_fsub>
 800d762:	4603      	mov	r3, r0
 800d764:	461c      	mov	r4, r3
 800d766:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d76a:	f7f3 fae3 	bl	8000d34 <__aeabi_fmul>
 800d76e:	4603      	mov	r3, r0
 800d770:	4619      	mov	r1, r3
 800d772:	4620      	mov	r0, r4
 800d774:	f7f3 f9d4 	bl	8000b20 <__aeabi_fsub>
 800d778:	4603      	mov	r3, r0
 800d77a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    	S12_angle = - CS13_angle*S12_angle - Kt12*S22_angle - Kt12*S32_angle;
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d784:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d788:	4618      	mov	r0, r3
 800d78a:	f7f3 fad3 	bl	8000d34 <__aeabi_fmul>
 800d78e:	4603      	mov	r3, r0
 800d790:	461c      	mov	r4, r3
 800d792:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d798:	f7f3 facc 	bl	8000d34 <__aeabi_fmul>
 800d79c:	4603      	mov	r3, r0
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f7f3 f9bd 	bl	8000b20 <__aeabi_fsub>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	461c      	mov	r4, r3
 800d7aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d7ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ae:	f7f3 fac1 	bl	8000d34 <__aeabi_fmul>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f7f3 f9b2 	bl	8000b20 <__aeabi_fsub>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    	S13_angle = - CS13_angle*S13_angle - Kt12*S23_angle - Kt12*S33_angle;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d7c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f3 fab1 	bl	8000d34 <__aeabi_fmul>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	461c      	mov	r4, r3
 800d7d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7da:	f7f3 faab 	bl	8000d34 <__aeabi_fmul>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7f3 f99c 	bl	8000b20 <__aeabi_fsub>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f0:	f7f3 faa0 	bl	8000d34 <__aeabi_fmul>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7f3 f991 	bl	8000b20 <__aeabi_fsub>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    	S21_angle = - CS12_angle*S21_angle - Kt21*S11_angle - Kt22*S31_angle;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d80a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d80e:	4618      	mov	r0, r3
 800d810:	f7f3 fa90 	bl	8000d34 <__aeabi_fmul>
 800d814:	4603      	mov	r3, r0
 800d816:	461c      	mov	r4, r3
 800d818:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d81e:	f7f3 fa89 	bl	8000d34 <__aeabi_fmul>
 800d822:	4603      	mov	r3, r0
 800d824:	4619      	mov	r1, r3
 800d826:	4620      	mov	r0, r4
 800d828:	f7f3 f97a 	bl	8000b20 <__aeabi_fsub>
 800d82c:	4603      	mov	r3, r0
 800d82e:	461c      	mov	r4, r3
 800d830:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d834:	f7f3 fa7e 	bl	8000d34 <__aeabi_fmul>
 800d838:	4603      	mov	r3, r0
 800d83a:	4619      	mov	r1, r3
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7f3 f96f 	bl	8000b20 <__aeabi_fsub>
 800d842:	4603      	mov	r3, r0
 800d844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    	S22_angle = - CS12_angle*S22_angle - Kt21*S12_angle - Kt22*S32_angle;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d84e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d852:	4618      	mov	r0, r3
 800d854:	f7f3 fa6e 	bl	8000d34 <__aeabi_fmul>
 800d858:	4603      	mov	r3, r0
 800d85a:	461c      	mov	r4, r3
 800d85c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d862:	f7f3 fa67 	bl	8000d34 <__aeabi_fmul>
 800d866:	4603      	mov	r3, r0
 800d868:	4619      	mov	r1, r3
 800d86a:	4620      	mov	r0, r4
 800d86c:	f7f3 f958 	bl	8000b20 <__aeabi_fsub>
 800d870:	4603      	mov	r3, r0
 800d872:	461c      	mov	r4, r3
 800d874:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d876:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d878:	f7f3 fa5c 	bl	8000d34 <__aeabi_fmul>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4619      	mov	r1, r3
 800d880:	4620      	mov	r0, r4
 800d882:	f7f3 f94d 	bl	8000b20 <__aeabi_fsub>
 800d886:	4603      	mov	r3, r0
 800d888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    	S23_angle = - CS12_angle*S23_angle - Kt21*S13_angle - Kt22*S33_angle;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d892:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d894:	4618      	mov	r0, r3
 800d896:	f7f3 fa4d 	bl	8000d34 <__aeabi_fmul>
 800d89a:	4603      	mov	r3, r0
 800d89c:	461c      	mov	r4, r3
 800d89e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a4:	f7f3 fa46 	bl	8000d34 <__aeabi_fmul>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f7f3 f937 	bl	8000b20 <__aeabi_fsub>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461c      	mov	r4, r3
 800d8b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d8b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8ba:	f7f3 fa3b 	bl	8000d34 <__aeabi_fmul>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7f3 f92c 	bl	8000b20 <__aeabi_fsub>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    	S31_angle = - CS11_angle*S31_angle - Kt31*S11_angle - Kt32*S21_angle;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d8d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f3 fa2d 	bl	8000d34 <__aeabi_fmul>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	461c      	mov	r4, r3
 800d8de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d8e2:	6a38      	ldr	r0, [r7, #32]
 800d8e4:	f7f3 fa26 	bl	8000d34 <__aeabi_fmul>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f7f3 f917 	bl	8000b20 <__aeabi_fsub>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	461c      	mov	r4, r3
 800d8f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d8fa:	69f8      	ldr	r0, [r7, #28]
 800d8fc:	f7f3 fa1a 	bl	8000d34 <__aeabi_fmul>
 800d900:	4603      	mov	r3, r0
 800d902:	4619      	mov	r1, r3
 800d904:	4620      	mov	r0, r4
 800d906:	f7f3 f90b 	bl	8000b20 <__aeabi_fsub>
 800d90a:	4603      	mov	r3, r0
 800d90c:	67bb      	str	r3, [r7, #120]	; 0x78
    	S32_angle = - CS11_angle*S32_angle - Kt31*S12_angle - Kt32*S22_angle;
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d914:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d916:	4618      	mov	r0, r3
 800d918:	f7f3 fa0c 	bl	8000d34 <__aeabi_fmul>
 800d91c:	4603      	mov	r3, r0
 800d91e:	461c      	mov	r4, r3
 800d920:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d924:	6a38      	ldr	r0, [r7, #32]
 800d926:	f7f3 fa05 	bl	8000d34 <__aeabi_fmul>
 800d92a:	4603      	mov	r3, r0
 800d92c:	4619      	mov	r1, r3
 800d92e:	4620      	mov	r0, r4
 800d930:	f7f3 f8f6 	bl	8000b20 <__aeabi_fsub>
 800d934:	4603      	mov	r3, r0
 800d936:	461c      	mov	r4, r3
 800d938:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d93c:	69f8      	ldr	r0, [r7, #28]
 800d93e:	f7f3 f9f9 	bl	8000d34 <__aeabi_fmul>
 800d942:	4603      	mov	r3, r0
 800d944:	4619      	mov	r1, r3
 800d946:	4620      	mov	r0, r4
 800d948:	f7f3 f8ea 	bl	8000b20 <__aeabi_fsub>
 800d94c:	4603      	mov	r3, r0
 800d94e:	677b      	str	r3, [r7, #116]	; 0x74
    	S33_angle = - CS11_angle*S33_angle - Kt31*S13_angle - Kt32*S23_angle;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d956:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d958:	4618      	mov	r0, r3
 800d95a:	f7f3 f9eb 	bl	8000d34 <__aeabi_fmul>
 800d95e:	4603      	mov	r3, r0
 800d960:	461c      	mov	r4, r3
 800d962:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d966:	6a38      	ldr	r0, [r7, #32]
 800d968:	f7f3 f9e4 	bl	8000d34 <__aeabi_fmul>
 800d96c:	4603      	mov	r3, r0
 800d96e:	4619      	mov	r1, r3
 800d970:	4620      	mov	r0, r4
 800d972:	f7f3 f8d5 	bl	8000b20 <__aeabi_fsub>
 800d976:	4603      	mov	r3, r0
 800d978:	461c      	mov	r4, r3
 800d97a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d97c:	69f8      	ldr	r0, [r7, #28]
 800d97e:	f7f3 f9d9 	bl	8000d34 <__aeabi_fmul>
 800d982:	4603      	mov	r3, r0
 800d984:	4619      	mov	r1, r3
 800d986:	4620      	mov	r0, r4
 800d988:	f7f3 f8ca 	bl	8000b20 <__aeabi_fsub>
 800d98c:	4603      	mov	r3, r0
 800d98e:	673b      	str	r3, [r7, #112]	; 0x70


    }

    switch(euler_angle) {
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d076      	beq.n	800da84 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xc4c>
 800d996:	2b02      	cmp	r3, #2
 800d998:	f300 80b9 	bgt.w	800db0e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd6>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xb6e>
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d038      	beq.n	800da16 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xbde>
					 S33_yaw = S33_angle;
    			 }
    			break;

    }
}
 800d9a4:	e0b3      	b.n	800db0e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd6>
    			 roll_ekf = angle_ekf ;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d9ac:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 roll_rate = angle_rate;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d9b6:	621a      	str	r2, [r3, #32]
    			 roll_bias = angle_bias;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d9be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    			 roll_acc = angle_acc ;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d9c8:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    			 if(update_enable)
 800d9cc:	78bb      	ldrb	r3, [r7, #2]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 8098 	beq.w	800db04 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xccc>
					 S11_roll = S11_angle;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d9da:	65da      	str	r2, [r3, #92]	; 0x5c
					 S12_roll = S12_angle;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d9e2:	661a      	str	r2, [r3, #96]	; 0x60
					 S13_roll = S13_angle;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d9ea:	66da      	str	r2, [r3, #108]	; 0x6c
					 S21_roll = S21_angle;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d9f2:	665a      	str	r2, [r3, #100]	; 0x64
					 S22_roll = S22_angle;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9fa:	669a      	str	r2, [r3, #104]	; 0x68
					 S23_roll = S23_angle;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800da00:	671a      	str	r2, [r3, #112]	; 0x70
					 S31_roll = S31_angle;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da06:	675a      	str	r2, [r3, #116]	; 0x74
					 S32_roll = S32_angle;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800da0c:	679a      	str	r2, [r3, #120]	; 0x78
					 S33_roll = S33_angle;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da12:	67da      	str	r2, [r3, #124]	; 0x7c
    			break;
 800da14:	e076      	b.n	800db04 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xccc>
    			 pitch_ekf = angle_ekf ;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da1c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    			 pitch_rate = angle_rate;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800da26:	625a      	str	r2, [r3, #36]	; 0x24
    			 pitch_bias = angle_bias;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 pitch_acc = angle_acc ;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800da38:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 if(update_enable)
 800da3c:	78bb      	ldrb	r3, [r7, #2]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d062      	beq.n	800db08 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd0>
					 S11_pitch = S11_angle;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800da48:	62da      	str	r2, [r3, #44]	; 0x2c
					 S12_pitch = S12_angle;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800da50:	631a      	str	r2, [r3, #48]	; 0x30
					 S13_pitch = S13_angle;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800da58:	63da      	str	r2, [r3, #60]	; 0x3c
					 S21_pitch = S21_angle;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800da60:	635a      	str	r2, [r3, #52]	; 0x34
					 S22_pitch = S22_angle;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
					 S23_pitch = S23_angle;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800da6e:	641a      	str	r2, [r3, #64]	; 0x40
					 S31_pitch = S31_angle;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da74:	645a      	str	r2, [r3, #68]	; 0x44
					 S32_pitch = S32_angle;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800da7a:	649a      	str	r2, [r3, #72]	; 0x48
					 S33_pitch = S33_angle;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da80:	64da      	str	r2, [r3, #76]	; 0x4c
    			break;
 800da82:	e041      	b.n	800db08 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd0>
    			 yaw_ekf = angle_ekf ;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da8a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    			 yaw_rate = angle_rate;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800da94:	629a      	str	r2, [r3, #40]	; 0x28
    			 yaw_bias = angle_bias;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    			 yaw_acc = angle_acc ;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800daa6:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    			 if(update_enable)
 800daaa:	78bb      	ldrb	r3, [r7, #2]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d02d      	beq.n	800db0c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd4>
					 S11_yaw = S11_angle;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					 S12_yaw = S12_angle;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					 S13_yaw = S13_angle;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800daca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					 S21_yaw = S21_angle;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					 S22_yaw = S22_angle;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					 S23_yaw = S23_angle;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dae6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					 S31_yaw = S31_angle;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800daee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					 S32_yaw = S32_angle;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800daf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					 S33_yaw = S33_angle;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dafe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    			break;
 800db02:	e003      	b.n	800db0c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd4>
    			break;
 800db04:	bf00      	nop
 800db06:	e002      	b.n	800db0e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd6>
    			break;
 800db08:	bf00      	nop
 800db0a:	e000      	b.n	800db0e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb+0xcd6>
    			break;
 800db0c:	bf00      	nop
}
 800db0e:	bf00      	nop
 800db10:	37a8      	adds	r7, #168	; 0xa8
 800db12:	46bd      	mov	sp, r7
 800db14:	bdb0      	pop	{r4, r5, r7, pc}
 800db16:	bf00      	nop

0800db18 <_ZN15Kalman_Filtresi3RunEv>:

	xgps = xbody;
	ygps = ybody;

}
void Kalman_Filtresi::Run() {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7f2 fff9 	bl	8000b24 <__addsf3>
 800db32:	4603      	mov	r3, r0
 800db34:	461a      	mov	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	601a      	str	r2, [r3, #0]
//  float accZ = acc[2];




    if(gyro_ready) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800db40:	2b00      	cmp	r3, #0
 800db42:	d014      	beq.n	800db6e <_ZN15Kalman_Filtresi3RunEv+0x56>

    pos_ekf_counter++;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	605a      	str	r2, [r3, #4]
    EKF_Attitude(ROLL,true);
 800db4e:	2201      	movs	r2, #1
 800db50:	2100      	movs	r1, #0
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff f970 	bl	800ce38 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb>
    EKF_Attitude(PITCH,true);
 800db58:	2201      	movs	r2, #1
 800db5a:	2101      	movs	r1, #1
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff f96b 	bl	800ce38 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb>
    EKF_Attitude(YAW,true);
 800db62:	2201      	movs	r2, #1
 800db64:	2102      	movs	r1, #2
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7ff f966 	bl	800ce38 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angleb>
 800db6c:	e003      	b.n	800db76 <_ZN15Kalman_Filtresi3RunEv+0x5e>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
    	*/
    	gyro_ready = true;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2201      	movs	r2, #1
 800db72:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    state.angles[1] = pitch_ekf;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.angles[2] = -1*yaw_ekf;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800db94:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    state.rates[0] = roll_rate;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a1a      	ldr	r2, [r3, #32]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    state.rates[1] = pitch_rate;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.rates[2] = yaw_rate;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    state.bias[0] = roll_bias;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    state.bias[1] = pitch_bias;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    state.bias[2] = yaw_bias;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 fc93 	bl	800e522 <_ZN3lpfD1Ev>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 fc8d 	bl	800e522 <_ZN3lpfD1Ev>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 fc87 	bl	800e522 <_ZN3lpfD1Ev>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af04      	add	r7, sp, #16
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a27      	ldr	r2, [pc, #156]	; (800dcc8 <_ZN3PIDC1Ev+0xa8>)
 800dc2c:	609a      	str	r2, [r3, #8]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a26      	ldr	r2, [pc, #152]	; (800dccc <_ZN3PIDC1Ev+0xac>)
 800dc32:	60da      	str	r2, [r3, #12]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a26      	ldr	r2, [pc, #152]	; (800dcd0 <_ZN3PIDC1Ev+0xb0>)
 800dc38:	611a      	str	r2, [r3, #16]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	22c8      	movs	r2, #200	; 0xc8
 800dc3e:	615a      	str	r2, [r3, #20]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f3 f821 	bl	8000c8c <__aeabi_i2f>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dc52:	f7f3 f923 	bl	8000e9c <__aeabi_fdiv>
 800dc56:	4603      	mov	r3, r0
 800dc58:	461a      	mov	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	619a      	str	r2, [r3, #24]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4a1c      	ldr	r2, [pc, #112]	; (800dcd4 <_ZN3PIDC1Ev+0xb4>)
 800dc62:	61da      	str	r2, [r3, #28]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	69da      	ldr	r2, [r3, #28]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7f3 f860 	bl	8000d34 <__aeabi_fmul>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461a      	mov	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	621a      	str	r2, [r3, #32]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc82:	a30d      	add	r3, pc, #52	; (adr r3, 800dcb8 <_ZN3PIDC1Ev+0x98>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc8c:	a30a      	add	r3, pc, #40	; (adr r3, 800dcb8 <_ZN3PIDC1Ev+0x98>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	e9cd 2300 	strd	r2, r3, [sp]
 800dc96:	a30a      	add	r3, pc, #40	; (adr r3, 800dcc0 <_ZN3PIDC1Ev+0xa0>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4608      	mov	r0, r1
 800dc9e:	f000 fbcf 	bl	800e440 <_ZN3lpfC1Eddd>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dca8:	669a      	str	r2, [r3, #104]	; 0x68
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4618      	mov	r0, r3
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	f3af 8000 	nop.w
 800dcb8:	de7ea5f8 	.word	0xde7ea5f8
 800dcbc:	3fb2a454 	.word	0x3fb2a454
 800dcc0:	ab367a10 	.word	0xab367a10
 800dcc4:	3feb573e 	.word	0x3feb573e
 800dcc8:	3d4ccccd 	.word	0x3d4ccccd
 800dccc:	42f00000 	.word	0x42f00000
 800dcd0:	c2f00000 	.word	0xc2f00000
 800dcd4:	3e99999a 	.word	0x3e99999a

0800dcd8 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800dcd8:	b590      	push	{r4, r7, lr}
 800dcda:	b087      	sub	sp, #28
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
 800dce4:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800dce6:	6879      	ldr	r1, [r7, #4]
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f7f2 ff19 	bl	8000b20 <__aeabi_fsub>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	4619      	mov	r1, r3
 800dd08:	4610      	mov	r0, r2
 800dd0a:	f7f3 f813 	bl	8000d34 <__aeabi_fmul>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4619      	mov	r1, r3
 800dd12:	4620      	mov	r0, r4
 800dd14:	f7f2 ff06 	bl	8000b24 <__addsf3>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dd26:	4619      	mov	r1, r3
 800dd28:	6838      	ldr	r0, [r7, #0]
 800dd2a:	f7f3 f803 	bl	8000d34 <__aeabi_fmul>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd36:	4619      	mov	r1, r3
 800dd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd3a:	f7f2 fffb 	bl	8000d34 <__aeabi_fmul>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	613b      	str	r3, [r7, #16]
    return P+I;
 800dd42:	6939      	ldr	r1, [r7, #16]
 800dd44:	6978      	ldr	r0, [r7, #20]
 800dd46:	f7f2 feed 	bl	8000b24 <__addsf3>
 800dd4a:	4603      	mov	r3, r0

}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	371c      	adds	r7, #28
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd90      	pop	{r4, r7, pc}

0800dd54 <_ZN3PID15sqrt_controllerEffhf>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::sqrt_controller(float alpha_des, float _alpha_des, uint8_t angle_counter, float Kff) {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08a      	sub	sp, #40	; 0x28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	70fb      	strb	r3, [r7, #3]
	float e_angle = alpha_des - _alpha_des;
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	68b8      	ldr	r0, [r7, #8]
 800dd66:	f7f2 fedb 	bl	8000b20 <__aeabi_fsub>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	627b      	str	r3, [r7, #36]	; 0x24
	e_angle = e_angle/((angle_counter+1)*st);
 800dd6e:	78fb      	ldrb	r3, [r7, #3]
 800dd70:	3301      	adds	r3, #1
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f2 ff8a 	bl	8000c8c <__aeabi_i2f>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4610      	mov	r0, r2
 800dd82:	f7f2 ffd7 	bl	8000d34 <__aeabi_fmul>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd8c:	f7f3 f886 	bl	8000e9c <__aeabi_fdiv>
 800dd90:	4603      	mov	r3, r0
 800dd92:	627b      	str	r3, [r7, #36]	; 0x24
	float abs_e = abs(e_angle);
 800dd94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd96:	f7f4 f9c1 	bl	800211c <_ZSt3absf>
 800dd9a:	6238      	str	r0, [r7, #32]
	uint8_t sign_e = sgn(e_angle);
 800dd9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 fa80 	bl	800e2a4 <_ZN3PID3sgnEf>
 800dda4:	4603      	mov	r3, r0
 800dda6:	77fb      	strb	r3, [r7, #31]
	float sqrt_e = sqrt((int)(100*abs_e));
 800dda8:	4917      	ldr	r1, [pc, #92]	; (800de08 <_ZN3PID15sqrt_controllerEffhf+0xb4>)
 800ddaa:	6a38      	ldr	r0, [r7, #32]
 800ddac:	f7f2 ffc2 	bl	8000d34 <__aeabi_fmul>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7f3 f99a 	bl	80010ec <__aeabi_f2iz>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7f5 faa0 	bl	8003300 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	f7f2 fe56 	bl	8000a78 <__aeabi_d2f>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	61bb      	str	r3, [r7, #24]
	float P = Kff * sqrt_e/10;
 800ddd0:	69b9      	ldr	r1, [r7, #24]
 800ddd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddd4:	f7f2 ffae 	bl	8000d34 <__aeabi_fmul>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	490c      	ldr	r1, [pc, #48]	; (800de0c <_ZN3PID15sqrt_controllerEffhf+0xb8>)
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7f3 f85d 	bl	8000e9c <__aeabi_fdiv>
 800dde2:	4603      	mov	r3, r0
 800dde4:	617b      	str	r3, [r7, #20]
	P = P * sign_e;
 800dde6:	7ffb      	ldrb	r3, [r7, #31]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7f2 ff4f 	bl	8000c8c <__aeabi_i2f>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6978      	ldr	r0, [r7, #20]
 800ddf4:	f7f2 ff9e 	bl	8000d34 <__aeabi_fmul>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	617b      	str	r3, [r7, #20]
	return P;
 800ddfc:	697b      	ldr	r3, [r7, #20]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3728      	adds	r7, #40	; 0x28
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	42c80000 	.word	0x42c80000
 800de0c:	41200000 	.word	0x41200000

0800de10 <_ZN3PID6PI_VelEfffffj>:

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b08a      	sub	sp, #40	; 0x28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800de24:	4293      	cmp	r3, r2
 800de26:	d90e      	bls.n	800de46 <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	68b9      	ldr	r1, [r7, #8]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7f2 fe78 	bl	8000b24 <__addsf3>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	69db      	ldr	r3, [r3, #28]
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
 800de44:	e01c      	b.n	800de80 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	f240 5213 	movw	r2, #1299	; 0x513
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d810      	bhi.n	800de72 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	4619      	mov	r1, r3
 800de56:	68b8      	ldr	r0, [r7, #8]
 800de58:	f7f2 fe62 	bl	8000b20 <__aeabi_fsub>
 800de5c:	4603      	mov	r3, r0
 800de5e:	461a      	mov	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	69db      	ldr	r3, [r3, #28]
 800de6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800de6e:	627b      	str	r3, [r7, #36]	; 0x24
 800de70:	e006      	b.n	800de80 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 800de7a:	f04f 0300 	mov.w	r3, #0
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de84:	f7f2 fe4c 	bl	8000b20 <__aeabi_fsub>
 800de88:	4603      	mov	r3, r0
 800de8a:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800de8c:	6a39      	ldr	r1, [r7, #32]
 800de8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de90:	f7f2 ff50 	bl	8000d34 <__aeabi_fmul>
 800de94:	4603      	mov	r3, r0
 800de96:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7f2 fe40 	bl	8000b20 <__aeabi_fsub>
 800dea0:	4603      	mov	r3, r0
 800dea2:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800dea4:	69b9      	ldr	r1, [r7, #24]
 800dea6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dea8:	f7f2 ff44 	bl	8000d34 <__aeabi_fmul>
 800deac:	4603      	mov	r3, r0
 800deae:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800deb0:	6979      	ldr	r1, [r7, #20]
 800deb2:	69f8      	ldr	r0, [r7, #28]
 800deb4:	f7f2 fe36 	bl	8000b24 <__addsf3>
 800deb8:	4603      	mov	r3, r0
 800deba:	613b      	str	r3, [r7, #16]
    return PI;
 800debc:	693b      	ldr	r3, [r7, #16]

}
 800debe:	4618      	mov	r0, r3
 800dec0:	3728      	adds	r7, #40	; 0x28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
	...

0800dec8 <_ZN3PID9PID_Rate2Efffffff>:
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
	return K_ff*ff;
}


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800dec8:	b590      	push	{r4, r7, lr}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	68b8      	ldr	r0, [r7, #8]
 800deda:	f7f2 fe21 	bl	8000b20 <__aeabi_fsub>
 800dede:	4603      	mov	r3, r0
 800dee0:	461a      	mov	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	4619      	mov	r1, r3
 800def6:	4610      	mov	r0, r2
 800def8:	f7f2 ff1c 	bl	8000d34 <__aeabi_fmul>
 800defc:	4603      	mov	r3, r0
 800defe:	4619      	mov	r1, r3
 800df00:	4620      	mov	r0, r4
 800df02:	f7f2 fe0f 	bl	8000b24 <__addsf3>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df16:	4618      	mov	r0, r3
 800df18:	f7f2 ff0c 	bl	8000d34 <__aeabi_fmul>
 800df1c:	4603      	mov	r3, r0
 800df1e:	461a      	mov	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f2 ff00 	bl	8000d34 <__aeabi_fmul>
 800df34:	4603      	mov	r3, r0
 800df36:	461a      	mov	r2, r3
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df42:	4619      	mov	r1, r3
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7f2 fdeb 	bl	8000b20 <__aeabi_fsub>
 800df4a:	4603      	mov	r3, r0
 800df4c:	461a      	mov	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	4619      	mov	r1, r3
 800df54:	4610      	mov	r0, r2
 800df56:	f7f2 ffa1 	bl	8000e9c <__aeabi_fdiv>
 800df5a:	4603      	mov	r3, r0
 800df5c:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3338      	adds	r3, #56	; 0x38
 800df62:	6979      	ldr	r1, [r7, #20]
 800df64:	4618      	mov	r0, r3
 800df66:	f000 fa86 	bl	800e476 <_ZN3lpf3RunEf>
 800df6a:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800df72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df74:	4618      	mov	r0, r3
 800df76:	f7f2 fedd 	bl	8000d34 <__aeabi_fmul>
 800df7a:	4603      	mov	r3, r0
 800df7c:	6979      	ldr	r1, [r7, #20]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f2 fdce 	bl	8000b20 <__aeabi_fsub>
 800df84:	4603      	mov	r3, r0
 800df86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df88:	4618      	mov	r0, r3
 800df8a:	f7f2 fed3 	bl	8000d34 <__aeabi_fmul>
 800df8e:	4603      	mov	r3, r0
 800df90:	461a      	mov	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
//  	de_filt = N * (Kd * alpha_dot_des - de_int);
//  	de_int += de_filt*st;
//  	D = de_filt;


	pd = P + I + D;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	f7f2 fdbc 	bl	8000b24 <__addsf3>
 800dfac:	4603      	mov	r3, r0
 800dfae:	461a      	mov	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	4610      	mov	r0, r2
 800dfba:	f7f2 fdb3 	bl	8000b24 <__addsf3>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800dfd8:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 800dfda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f9b8 	bl	800e354 <_ZN3PID3SatEfii>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd90      	pop	{r4, r7, pc}
 800e012:	bf00      	nop
 800e014:	fffffed4 	.word	0xfffffed4

0800e018 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b088      	sub	sp, #32
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	68b8      	ldr	r0, [r7, #8]
 800e032:	f7f2 fd75 	bl	8000b20 <__aeabi_fsub>
 800e036:	4603      	mov	r3, r0
 800e038:	461a      	mov	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	4619      	mov	r1, r3
 800e044:	6838      	ldr	r0, [r7, #0]
 800e046:	f7f2 fe75 	bl	8000d34 <__aeabi_fmul>
 800e04a:	4603      	mov	r3, r0
 800e04c:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7f2 fd61 	bl	8000b20 <__aeabi_fsub>
 800e05e:	4603      	mov	r3, r0
 800e060:	461a      	mov	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	4619      	mov	r1, r3
 800e068:	4610      	mov	r0, r2
 800e06a:	f7f2 ff17 	bl	8000e9c <__aeabi_fdiv>
 800e06e:	4603      	mov	r3, r0
 800e070:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 800e072:	69b9      	ldr	r1, [r7, #24]
 800e074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e076:	f7f2 fe5d 	bl	8000d34 <__aeabi_fmul>
 800e07a:	4603      	mov	r3, r0
 800e07c:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 800e07e:	6979      	ldr	r1, [r7, #20]
 800e080:	69f8      	ldr	r0, [r7, #28]
 800e082:	f7f2 fd4f 	bl	8000b24 <__addsf3>
 800e086:	4603      	mov	r3, r0
 800e088:	613b      	str	r3, [r7, #16]
	return pd;
 800e08a:	693b      	ldr	r3, [r7, #16]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3720      	adds	r7, #32
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800e094:	b590      	push	{r4, r7, lr}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
 800e0a0:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800e0a2:	6879      	ldr	r1, [r7, #4]
 800e0a4:	68b8      	ldr	r0, [r7, #8]
 800e0a6:	f7f2 fd3b 	bl	8000b20 <__aeabi_fsub>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e0b8:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0be:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7f3 f811 	bl	80010ec <__aeabi_f2iz>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f3 f80a 	bl	80010ec <__aeabi_f2iz>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	429c      	cmp	r4, r3
 800e0dc:	d019      	beq.n	800e112 <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f8dd 	bl	800e2a4 <_ZN3PID3sgnEf>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 f8d4 	bl	800e2a4 <_ZN3PID3sgnEf>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	429c      	cmp	r4, r3
 800e100:	bf0c      	ite	eq
 800e102:	2301      	moveq	r3, #1
 800e104:	2300      	movne	r3, #0
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 800e10c:	f04f 0300 	mov.w	r3, #0
 800e110:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f2 fe0b 	bl	8000d34 <__aeabi_fmul>
 800e11e:	4603      	mov	r3, r0
 800e120:	461a      	mov	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7f2 fcf8 	bl	8000b20 <__aeabi_fsub>
 800e130:	4603      	mov	r3, r0
 800e132:	494d      	ldr	r1, [pc, #308]	; (800e268 <_ZN3PID7PD_RateEfffff+0x1d4>)
 800e134:	4618      	mov	r0, r3
 800e136:	f7f2 fdfd 	bl	8000d34 <__aeabi_fmul>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f7f2 fdec 	bl	8000d34 <__aeabi_fmul>
 800e15c:	4603      	mov	r3, r0
 800e15e:	4619      	mov	r1, r3
 800e160:	4620      	mov	r0, r4
 800e162:	f7f2 fcdf 	bl	8000b24 <__addsf3>
 800e166:	4603      	mov	r3, r0
 800e168:	461a      	mov	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f7f2 fcd0 	bl	8000b20 <__aeabi_fsub>
 800e180:	4603      	mov	r3, r0
 800e182:	461a      	mov	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	6979      	ldr	r1, [r7, #20]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f2 fdc9 	bl	8000d34 <__aeabi_fmul>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f7f2 fcbc 	bl	8000b24 <__addsf3>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f2 fdb5 	bl	8000d34 <__aeabi_fmul>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7f2 fda3 	bl	8000d34 <__aeabi_fmul>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e204:	4619      	mov	r1, r3
 800e206:	4610      	mov	r0, r2
 800e208:	f7f2 fc8c 	bl	8000b24 <__addsf3>
 800e20c:	4603      	mov	r3, r0
 800e20e:	461a      	mov	r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7f2 fc83 	bl	8000b24 <__addsf3>
 800e21e:	4603      	mov	r3, r0
 800e220:	461a      	mov	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  200, -200);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e238:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800e23c:	22c8      	movs	r2, #200	; 0xc8
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f888 	bl	800e354 <_ZN3PID3SatEfii>
 800e244:	4602      	mov	r2, r0
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 800e25e:	4618      	mov	r0, r3
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	bd90      	pop	{r4, r7, pc}
 800e266:	bf00      	nop
 800e268:	42c80000 	.word	0x42c80000

0800e26c <_ZN3PID5resetEv>:

void PID::reset() {
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f04f 0200 	mov.w	r2, #0
 800e27a:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f04f 0200 	mov.w	r2, #0
 800e282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f04f 0200 	mov.w	r2, #0
 800e28c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f04f 0200 	mov.w	r2, #0
 800e296:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800e29a:	bf00      	nop
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bc80      	pop	{r7}
 800e2a2:	4770      	bx	lr

0800e2a4 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800e2ae:	f04f 0100 	mov.w	r1, #0
 800e2b2:	6838      	ldr	r0, [r7, #0]
 800e2b4:	f7f2 fedc 	bl	8001070 <__aeabi_fcmplt>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <_ZN3PID3sgnEf+0x1e>
 800e2be:	23ff      	movs	r3, #255	; 0xff
 800e2c0:	e00a      	b.n	800e2d8 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800e2c2:	f04f 0100 	mov.w	r1, #0
 800e2c6:	6838      	ldr	r0, [r7, #0]
 800e2c8:	f7f2 fef0 	bl	80010ac <__aeabi_fcmpgt>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <_ZN3PID3sgnEf+0x32>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e000      	b.n	800e2d8 <_ZN3PID3sgnEf+0x34>
  return 0;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800e2f4:	dd24      	ble.n	800e340 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7f2 fcc8 	bl	8000c8c <__aeabi_i2f>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	4619      	mov	r1, r3
 800e300:	68b8      	ldr	r0, [r7, #8]
 800e302:	f7f2 fed3 	bl	80010ac <__aeabi_fcmpgt>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7f2 fcbd 	bl	8000c8c <__aeabi_i2f>
 800e312:	4603      	mov	r3, r0
 800e314:	617b      	str	r3, [r7, #20]
 800e316:	e015      	b.n	800e344 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800e318:	6838      	ldr	r0, [r7, #0]
 800e31a:	f7f2 fcb7 	bl	8000c8c <__aeabi_i2f>
 800e31e:	4603      	mov	r3, r0
 800e320:	4619      	mov	r1, r3
 800e322:	68b8      	ldr	r0, [r7, #8]
 800e324:	f7f2 fea4 	bl	8001070 <__aeabi_fcmplt>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d005      	beq.n	800e33a <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800e32e:	6838      	ldr	r0, [r7, #0]
 800e330:	f7f2 fcac 	bl	8000c8c <__aeabi_i2f>
 800e334:	4603      	mov	r3, r0
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	e004      	b.n	800e344 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	617b      	str	r3, [r7, #20]
 800e33e:	e001      	b.n	800e344 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800e340:	4b03      	ldr	r3, [pc, #12]	; (800e350 <_ZN3PID3SatEfiii+0x70>)
 800e342:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800e344:	697b      	ldr	r3, [r7, #20]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	447a0000 	.word	0x447a0000

0800e354 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7f2 fc92 	bl	8000c8c <__aeabi_i2f>
 800e368:	4603      	mov	r3, r0
 800e36a:	4619      	mov	r1, r3
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7f2 fe9d 	bl	80010ac <__aeabi_fcmpgt>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7f2 fc87 	bl	8000c8c <__aeabi_i2f>
 800e37e:	4603      	mov	r3, r0
 800e380:	617b      	str	r3, [r7, #20]
 800e382:	e012      	b.n	800e3aa <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800e384:	6838      	ldr	r0, [r7, #0]
 800e386:	f7f2 fc81 	bl	8000c8c <__aeabi_i2f>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4619      	mov	r1, r3
 800e38e:	68b8      	ldr	r0, [r7, #8]
 800e390:	f7f2 fe6e 	bl	8001070 <__aeabi_fcmplt>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d005      	beq.n	800e3a6 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800e39a:	6838      	ldr	r0, [r7, #0]
 800e39c:	f7f2 fc76 	bl	8000c8c <__aeabi_i2f>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	617b      	str	r3, [r7, #20]
 800e3a4:	e001      	b.n	800e3aa <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800e3aa:	697b      	ldr	r3, [r7, #20]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800e3be:	4b16      	ldr	r3, [pc, #88]	; (800e418 <_ZN3PID5F2thrEf+0x64>)
 800e3c0:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800e3c2:	4b16      	ldr	r3, [pc, #88]	; (800e41c <_ZN3PID5F2thrEf+0x68>)
 800e3c4:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800e3c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800e3ca:	6838      	ldr	r0, [r7, #0]
 800e3cc:	f7f2 fd66 	bl	8000e9c <__aeabi_fdiv>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800e3d4:	69f9      	ldr	r1, [r7, #28]
 800e3d6:	6978      	ldr	r0, [r7, #20]
 800e3d8:	f7f2 fd60 	bl	8000e9c <__aeabi_fdiv>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7f3 fece 	bl	8002180 <_ZSt4sqrtf>
 800e3e4:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800e3e6:	490e      	ldr	r1, [pc, #56]	; (800e420 <_ZN3PID5F2thrEf+0x6c>)
 800e3e8:	6938      	ldr	r0, [r7, #16]
 800e3ea:	f7f2 fca3 	bl	8000d34 <__aeabi_fmul>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	69b9      	ldr	r1, [r7, #24]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f2 fd52 	bl	8000e9c <__aeabi_fdiv>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	4909      	ldr	r1, [pc, #36]	; (800e420 <_ZN3PID5F2thrEf+0x6c>)
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f2 fb91 	bl	8000b24 <__addsf3>
 800e402:	4603      	mov	r3, r0
 800e404:	4618      	mov	r0, r3
 800e406:	f7f2 fe97 	bl	8001138 <__aeabi_f2uiz>
 800e40a:	4603      	mov	r3, r0
 800e40c:	60fb      	str	r3, [r7, #12]
	return thr;
 800e40e:	68fb      	ldr	r3, [r7, #12]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3720      	adds	r7, #32
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	3359f513 	.word	0x3359f513
 800e41c:	46896e00 	.word	0x46896e00
 800e420:	447a0000 	.word	0x447a0000

0800e424 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3338      	adds	r3, #56	; 0x38
 800e430:	4618      	mov	r0, r3
 800e432:	f000 f876 	bl	800e522 <_ZN3lpfD1Ev>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800e44c:	68f9      	ldr	r1, [r7, #12]
 800e44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e452:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e45c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800e460:	68f9      	ldr	r1, [r7, #12]
 800e462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e466:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	4618      	mov	r0, r3
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	bc80      	pop	{r7}
 800e474:	4770      	bx	lr

0800e476 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800e476:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f1 ffc3 	bl	8000418 <__aeabi_f2d>
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	4620      	mov	r0, r4
 800e498:	4629      	mov	r1, r5
 800e49a:	f7f2 f815 	bl	80004c8 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4690      	mov	r8, r2
 800e4a4:	4699      	mov	r9, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800e4ac:	6838      	ldr	r0, [r7, #0]
 800e4ae:	f7f1 ffb3 	bl	8000418 <__aeabi_f2d>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	f7f2 f805 	bl	80004c8 <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	f7f1 fe49 	bl	800015c <__adddf3>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4690      	mov	r8, r2
 800e4d0:	4699      	mov	r9, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7f1 ff9b 	bl	8000418 <__aeabi_f2d>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	f7f1 ffed 	bl	80004c8 <__aeabi_dmul>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	f7f1 fe31 	bl	800015c <__adddf3>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4610      	mov	r0, r2
 800e500:	4619      	mov	r1, r3
 800e502:	f7f2 fab9 	bl	8000a78 <__aeabi_d2f>
 800e506:	4603      	mov	r3, r0
 800e508:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	601a      	str	r2, [r3, #0]
	y_ = y;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	605a      	str	r2, [r3, #4]
	return y;
 800e516:	68fb      	ldr	r3, [r7, #12]

}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e522 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800e522:	b480      	push	{r7}
 800e524:	b083      	sub	sp, #12
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4618      	mov	r0, r3
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	bc80      	pop	{r7}
 800e534:	4770      	bx	lr
	...

0800e538 <atanf>:
 800e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800e540:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800e544:	4604      	mov	r4, r0
 800e546:	4680      	mov	r8, r0
 800e548:	db0e      	blt.n	800e568 <atanf+0x30>
 800e54a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e54e:	dd04      	ble.n	800e55a <atanf+0x22>
 800e550:	4601      	mov	r1, r0
 800e552:	f7f2 fae7 	bl	8000b24 <__addsf3>
 800e556:	4604      	mov	r4, r0
 800e558:	e003      	b.n	800e562 <atanf+0x2a>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f300 80ce 	bgt.w	800e6fc <atanf+0x1c4>
 800e560:	4c67      	ldr	r4, [pc, #412]	; (800e700 <atanf+0x1c8>)
 800e562:	4620      	mov	r0, r4
 800e564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e568:	4b66      	ldr	r3, [pc, #408]	; (800e704 <atanf+0x1cc>)
 800e56a:	429d      	cmp	r5, r3
 800e56c:	dc0e      	bgt.n	800e58c <atanf+0x54>
 800e56e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800e572:	da08      	bge.n	800e586 <atanf+0x4e>
 800e574:	4964      	ldr	r1, [pc, #400]	; (800e708 <atanf+0x1d0>)
 800e576:	f7f2 fad5 	bl	8000b24 <__addsf3>
 800e57a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e57e:	f7f2 fd95 	bl	80010ac <__aeabi_fcmpgt>
 800e582:	2800      	cmp	r0, #0
 800e584:	d1ed      	bne.n	800e562 <atanf+0x2a>
 800e586:	f04f 36ff 	mov.w	r6, #4294967295
 800e58a:	e01c      	b.n	800e5c6 <atanf+0x8e>
 800e58c:	f000 f914 	bl	800e7b8 <fabsf>
 800e590:	4b5e      	ldr	r3, [pc, #376]	; (800e70c <atanf+0x1d4>)
 800e592:	4604      	mov	r4, r0
 800e594:	429d      	cmp	r5, r3
 800e596:	dc7c      	bgt.n	800e692 <atanf+0x15a>
 800e598:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e59c:	429d      	cmp	r5, r3
 800e59e:	dc67      	bgt.n	800e670 <atanf+0x138>
 800e5a0:	4601      	mov	r1, r0
 800e5a2:	f7f2 fabf 	bl	8000b24 <__addsf3>
 800e5a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e5aa:	f7f2 fab9 	bl	8000b20 <__aeabi_fsub>
 800e5ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f7f2 fab5 	bl	8000b24 <__addsf3>
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f7f2 fc6d 	bl	8000e9c <__aeabi_fdiv>
 800e5c2:	2600      	movs	r6, #0
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f7f2 fbb3 	bl	8000d34 <__aeabi_fmul>
 800e5ce:	4601      	mov	r1, r0
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	f7f2 fbaf 	bl	8000d34 <__aeabi_fmul>
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	494d      	ldr	r1, [pc, #308]	; (800e710 <atanf+0x1d8>)
 800e5da:	f7f2 fbab 	bl	8000d34 <__aeabi_fmul>
 800e5de:	494d      	ldr	r1, [pc, #308]	; (800e714 <atanf+0x1dc>)
 800e5e0:	f7f2 faa0 	bl	8000b24 <__addsf3>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7f2 fba5 	bl	8000d34 <__aeabi_fmul>
 800e5ea:	494b      	ldr	r1, [pc, #300]	; (800e718 <atanf+0x1e0>)
 800e5ec:	f7f2 fa9a 	bl	8000b24 <__addsf3>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	f7f2 fb9f 	bl	8000d34 <__aeabi_fmul>
 800e5f6:	4949      	ldr	r1, [pc, #292]	; (800e71c <atanf+0x1e4>)
 800e5f8:	f7f2 fa94 	bl	8000b24 <__addsf3>
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	f7f2 fb99 	bl	8000d34 <__aeabi_fmul>
 800e602:	4947      	ldr	r1, [pc, #284]	; (800e720 <atanf+0x1e8>)
 800e604:	f7f2 fa8e 	bl	8000b24 <__addsf3>
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f2 fb93 	bl	8000d34 <__aeabi_fmul>
 800e60e:	4945      	ldr	r1, [pc, #276]	; (800e724 <atanf+0x1ec>)
 800e610:	f7f2 fa88 	bl	8000b24 <__addsf3>
 800e614:	4639      	mov	r1, r7
 800e616:	f7f2 fb8d 	bl	8000d34 <__aeabi_fmul>
 800e61a:	4943      	ldr	r1, [pc, #268]	; (800e728 <atanf+0x1f0>)
 800e61c:	4607      	mov	r7, r0
 800e61e:	4628      	mov	r0, r5
 800e620:	f7f2 fb88 	bl	8000d34 <__aeabi_fmul>
 800e624:	4941      	ldr	r1, [pc, #260]	; (800e72c <atanf+0x1f4>)
 800e626:	f7f2 fa7b 	bl	8000b20 <__aeabi_fsub>
 800e62a:	4629      	mov	r1, r5
 800e62c:	f7f2 fb82 	bl	8000d34 <__aeabi_fmul>
 800e630:	493f      	ldr	r1, [pc, #252]	; (800e730 <atanf+0x1f8>)
 800e632:	f7f2 fa75 	bl	8000b20 <__aeabi_fsub>
 800e636:	4629      	mov	r1, r5
 800e638:	f7f2 fb7c 	bl	8000d34 <__aeabi_fmul>
 800e63c:	493d      	ldr	r1, [pc, #244]	; (800e734 <atanf+0x1fc>)
 800e63e:	f7f2 fa6f 	bl	8000b20 <__aeabi_fsub>
 800e642:	4629      	mov	r1, r5
 800e644:	f7f2 fb76 	bl	8000d34 <__aeabi_fmul>
 800e648:	493b      	ldr	r1, [pc, #236]	; (800e738 <atanf+0x200>)
 800e64a:	f7f2 fa69 	bl	8000b20 <__aeabi_fsub>
 800e64e:	4629      	mov	r1, r5
 800e650:	f7f2 fb70 	bl	8000d34 <__aeabi_fmul>
 800e654:	4601      	mov	r1, r0
 800e656:	4638      	mov	r0, r7
 800e658:	f7f2 fa64 	bl	8000b24 <__addsf3>
 800e65c:	4621      	mov	r1, r4
 800e65e:	f7f2 fb69 	bl	8000d34 <__aeabi_fmul>
 800e662:	1c73      	adds	r3, r6, #1
 800e664:	4601      	mov	r1, r0
 800e666:	d133      	bne.n	800e6d0 <atanf+0x198>
 800e668:	4620      	mov	r0, r4
 800e66a:	f7f2 fa59 	bl	8000b20 <__aeabi_fsub>
 800e66e:	e772      	b.n	800e556 <atanf+0x1e>
 800e670:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e674:	f7f2 fa54 	bl	8000b20 <__aeabi_fsub>
 800e678:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e67c:	4605      	mov	r5, r0
 800e67e:	4620      	mov	r0, r4
 800e680:	f7f2 fa50 	bl	8000b24 <__addsf3>
 800e684:	4601      	mov	r1, r0
 800e686:	4628      	mov	r0, r5
 800e688:	f7f2 fc08 	bl	8000e9c <__aeabi_fdiv>
 800e68c:	2601      	movs	r6, #1
 800e68e:	4604      	mov	r4, r0
 800e690:	e799      	b.n	800e5c6 <atanf+0x8e>
 800e692:	4b2a      	ldr	r3, [pc, #168]	; (800e73c <atanf+0x204>)
 800e694:	429d      	cmp	r5, r3
 800e696:	dc14      	bgt.n	800e6c2 <atanf+0x18a>
 800e698:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e69c:	f7f2 fa40 	bl	8000b20 <__aeabi_fsub>
 800e6a0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f7f2 fb44 	bl	8000d34 <__aeabi_fmul>
 800e6ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6b0:	f7f2 fa38 	bl	8000b24 <__addsf3>
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f7f2 fbf0 	bl	8000e9c <__aeabi_fdiv>
 800e6bc:	2602      	movs	r6, #2
 800e6be:	4604      	mov	r4, r0
 800e6c0:	e781      	b.n	800e5c6 <atanf+0x8e>
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	481e      	ldr	r0, [pc, #120]	; (800e740 <atanf+0x208>)
 800e6c6:	f7f2 fbe9 	bl	8000e9c <__aeabi_fdiv>
 800e6ca:	2603      	movs	r6, #3
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	e77a      	b.n	800e5c6 <atanf+0x8e>
 800e6d0:	4b1c      	ldr	r3, [pc, #112]	; (800e744 <atanf+0x20c>)
 800e6d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e6d6:	f7f2 fa23 	bl	8000b20 <__aeabi_fsub>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	f7f2 fa20 	bl	8000b20 <__aeabi_fsub>
 800e6e0:	4b19      	ldr	r3, [pc, #100]	; (800e748 <atanf+0x210>)
 800e6e2:	4601      	mov	r1, r0
 800e6e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e6e8:	f7f2 fa1a 	bl	8000b20 <__aeabi_fsub>
 800e6ec:	f1b8 0f00 	cmp.w	r8, #0
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	f6bf af36 	bge.w	800e562 <atanf+0x2a>
 800e6f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6fa:	e72c      	b.n	800e556 <atanf+0x1e>
 800e6fc:	4c13      	ldr	r4, [pc, #76]	; (800e74c <atanf+0x214>)
 800e6fe:	e730      	b.n	800e562 <atanf+0x2a>
 800e700:	bfc90fdb 	.word	0xbfc90fdb
 800e704:	3edfffff 	.word	0x3edfffff
 800e708:	7149f2ca 	.word	0x7149f2ca
 800e70c:	3f97ffff 	.word	0x3f97ffff
 800e710:	3c8569d7 	.word	0x3c8569d7
 800e714:	3d4bda59 	.word	0x3d4bda59
 800e718:	3d886b35 	.word	0x3d886b35
 800e71c:	3dba2e6e 	.word	0x3dba2e6e
 800e720:	3e124925 	.word	0x3e124925
 800e724:	3eaaaaab 	.word	0x3eaaaaab
 800e728:	bd15a221 	.word	0xbd15a221
 800e72c:	3d6ef16b 	.word	0x3d6ef16b
 800e730:	3d9d8795 	.word	0x3d9d8795
 800e734:	3de38e38 	.word	0x3de38e38
 800e738:	3e4ccccd 	.word	0x3e4ccccd
 800e73c:	401bffff 	.word	0x401bffff
 800e740:	bf800000 	.word	0xbf800000
 800e744:	08012390 	.word	0x08012390
 800e748:	08012380 	.word	0x08012380
 800e74c:	3fc90fdb 	.word	0x3fc90fdb

0800e750 <cosf>:
 800e750:	b507      	push	{r0, r1, r2, lr}
 800e752:	4a18      	ldr	r2, [pc, #96]	; (800e7b4 <cosf+0x64>)
 800e754:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e758:	4293      	cmp	r3, r2
 800e75a:	4601      	mov	r1, r0
 800e75c:	dc03      	bgt.n	800e766 <cosf+0x16>
 800e75e:	2100      	movs	r1, #0
 800e760:	f001 fac2 	bl	800fce8 <__kernel_cosf>
 800e764:	e004      	b.n	800e770 <cosf+0x20>
 800e766:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e76a:	db04      	blt.n	800e776 <cosf+0x26>
 800e76c:	f7f2 f9d8 	bl	8000b20 <__aeabi_fsub>
 800e770:	b003      	add	sp, #12
 800e772:	f85d fb04 	ldr.w	pc, [sp], #4
 800e776:	4669      	mov	r1, sp
 800e778:	f001 f906 	bl	800f988 <__ieee754_rem_pio2f>
 800e77c:	f000 0203 	and.w	r2, r0, #3
 800e780:	2a01      	cmp	r2, #1
 800e782:	d005      	beq.n	800e790 <cosf+0x40>
 800e784:	2a02      	cmp	r2, #2
 800e786:	d00a      	beq.n	800e79e <cosf+0x4e>
 800e788:	b972      	cbnz	r2, 800e7a8 <cosf+0x58>
 800e78a:	9901      	ldr	r1, [sp, #4]
 800e78c:	9800      	ldr	r0, [sp, #0]
 800e78e:	e7e7      	b.n	800e760 <cosf+0x10>
 800e790:	9901      	ldr	r1, [sp, #4]
 800e792:	9800      	ldr	r0, [sp, #0]
 800e794:	f001 fdde 	bl	8010354 <__kernel_sinf>
 800e798:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e79c:	e7e8      	b.n	800e770 <cosf+0x20>
 800e79e:	9901      	ldr	r1, [sp, #4]
 800e7a0:	9800      	ldr	r0, [sp, #0]
 800e7a2:	f001 faa1 	bl	800fce8 <__kernel_cosf>
 800e7a6:	e7f7      	b.n	800e798 <cosf+0x48>
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	9901      	ldr	r1, [sp, #4]
 800e7ac:	9800      	ldr	r0, [sp, #0]
 800e7ae:	f001 fdd1 	bl	8010354 <__kernel_sinf>
 800e7b2:	e7dd      	b.n	800e770 <cosf+0x20>
 800e7b4:	3f490fd8 	.word	0x3f490fd8

0800e7b8 <fabsf>:
 800e7b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <sinf>:
 800e7c0:	b507      	push	{r0, r1, r2, lr}
 800e7c2:	4a19      	ldr	r2, [pc, #100]	; (800e828 <sinf+0x68>)
 800e7c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	4601      	mov	r1, r0
 800e7cc:	dc04      	bgt.n	800e7d8 <sinf+0x18>
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f001 fdbf 	bl	8010354 <__kernel_sinf>
 800e7d6:	e004      	b.n	800e7e2 <sinf+0x22>
 800e7d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7dc:	db04      	blt.n	800e7e8 <sinf+0x28>
 800e7de:	f7f2 f99f 	bl	8000b20 <__aeabi_fsub>
 800e7e2:	b003      	add	sp, #12
 800e7e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7e8:	4669      	mov	r1, sp
 800e7ea:	f001 f8cd 	bl	800f988 <__ieee754_rem_pio2f>
 800e7ee:	f000 0003 	and.w	r0, r0, #3
 800e7f2:	2801      	cmp	r0, #1
 800e7f4:	d006      	beq.n	800e804 <sinf+0x44>
 800e7f6:	2802      	cmp	r0, #2
 800e7f8:	d009      	beq.n	800e80e <sinf+0x4e>
 800e7fa:	b980      	cbnz	r0, 800e81e <sinf+0x5e>
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	9901      	ldr	r1, [sp, #4]
 800e800:	9800      	ldr	r0, [sp, #0]
 800e802:	e7e6      	b.n	800e7d2 <sinf+0x12>
 800e804:	9901      	ldr	r1, [sp, #4]
 800e806:	9800      	ldr	r0, [sp, #0]
 800e808:	f001 fa6e 	bl	800fce8 <__kernel_cosf>
 800e80c:	e7e9      	b.n	800e7e2 <sinf+0x22>
 800e80e:	2201      	movs	r2, #1
 800e810:	9901      	ldr	r1, [sp, #4]
 800e812:	9800      	ldr	r0, [sp, #0]
 800e814:	f001 fd9e 	bl	8010354 <__kernel_sinf>
 800e818:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e81c:	e7e1      	b.n	800e7e2 <sinf+0x22>
 800e81e:	9901      	ldr	r1, [sp, #4]
 800e820:	9800      	ldr	r0, [sp, #0]
 800e822:	f001 fa61 	bl	800fce8 <__kernel_cosf>
 800e826:	e7f7      	b.n	800e818 <sinf+0x58>
 800e828:	3f490fd8 	.word	0x3f490fd8

0800e82c <pow>:
 800e82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e830:	461f      	mov	r7, r3
 800e832:	4680      	mov	r8, r0
 800e834:	4689      	mov	r9, r1
 800e836:	4616      	mov	r6, r2
 800e838:	f000 f91a 	bl	800ea70 <__ieee754_pow>
 800e83c:	4b4d      	ldr	r3, [pc, #308]	; (800e974 <pow+0x148>)
 800e83e:	4604      	mov	r4, r0
 800e840:	f993 3000 	ldrsb.w	r3, [r3]
 800e844:	460d      	mov	r5, r1
 800e846:	3301      	adds	r3, #1
 800e848:	d015      	beq.n	800e876 <pow+0x4a>
 800e84a:	4632      	mov	r2, r6
 800e84c:	463b      	mov	r3, r7
 800e84e:	4630      	mov	r0, r6
 800e850:	4639      	mov	r1, r7
 800e852:	f7f2 f8d3 	bl	80009fc <__aeabi_dcmpun>
 800e856:	b970      	cbnz	r0, 800e876 <pow+0x4a>
 800e858:	4642      	mov	r2, r8
 800e85a:	464b      	mov	r3, r9
 800e85c:	4640      	mov	r0, r8
 800e85e:	4649      	mov	r1, r9
 800e860:	f7f2 f8cc 	bl	80009fc <__aeabi_dcmpun>
 800e864:	2200      	movs	r2, #0
 800e866:	2300      	movs	r3, #0
 800e868:	b148      	cbz	r0, 800e87e <pow+0x52>
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f2 f893 	bl	8000998 <__aeabi_dcmpeq>
 800e872:	2800      	cmp	r0, #0
 800e874:	d17b      	bne.n	800e96e <pow+0x142>
 800e876:	4620      	mov	r0, r4
 800e878:	4629      	mov	r1, r5
 800e87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e87e:	4640      	mov	r0, r8
 800e880:	4649      	mov	r1, r9
 800e882:	f7f2 f889 	bl	8000998 <__aeabi_dcmpeq>
 800e886:	b1e0      	cbz	r0, 800e8c2 <pow+0x96>
 800e888:	2200      	movs	r2, #0
 800e88a:	2300      	movs	r3, #0
 800e88c:	4630      	mov	r0, r6
 800e88e:	4639      	mov	r1, r7
 800e890:	f7f2 f882 	bl	8000998 <__aeabi_dcmpeq>
 800e894:	2800      	cmp	r0, #0
 800e896:	d16a      	bne.n	800e96e <pow+0x142>
 800e898:	4630      	mov	r0, r6
 800e89a:	4639      	mov	r1, r7
 800e89c:	f001 fdd3 	bl	8010446 <finite>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d0e8      	beq.n	800e876 <pow+0x4a>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	4639      	mov	r1, r7
 800e8ac:	f7f2 f87e 	bl	80009ac <__aeabi_dcmplt>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d0e0      	beq.n	800e876 <pow+0x4a>
 800e8b4:	f001 ff78 	bl	80107a8 <__errno>
 800e8b8:	2321      	movs	r3, #33	; 0x21
 800e8ba:	2400      	movs	r4, #0
 800e8bc:	6003      	str	r3, [r0, #0]
 800e8be:	4d2e      	ldr	r5, [pc, #184]	; (800e978 <pow+0x14c>)
 800e8c0:	e7d9      	b.n	800e876 <pow+0x4a>
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	f001 fdbe 	bl	8010446 <finite>
 800e8ca:	bba8      	cbnz	r0, 800e938 <pow+0x10c>
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	f001 fdb9 	bl	8010446 <finite>
 800e8d4:	b380      	cbz	r0, 800e938 <pow+0x10c>
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	4639      	mov	r1, r7
 800e8da:	f001 fdb4 	bl	8010446 <finite>
 800e8de:	b358      	cbz	r0, 800e938 <pow+0x10c>
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f2 f888 	bl	80009fc <__aeabi_dcmpun>
 800e8ec:	b160      	cbz	r0, 800e908 <pow+0xdc>
 800e8ee:	f001 ff5b 	bl	80107a8 <__errno>
 800e8f2:	2321      	movs	r3, #33	; 0x21
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	6003      	str	r3, [r0, #0]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	f7f1 ff0d 	bl	800071c <__aeabi_ddiv>
 800e902:	4604      	mov	r4, r0
 800e904:	460d      	mov	r5, r1
 800e906:	e7b6      	b.n	800e876 <pow+0x4a>
 800e908:	f001 ff4e 	bl	80107a8 <__errno>
 800e90c:	2322      	movs	r3, #34	; 0x22
 800e90e:	2200      	movs	r2, #0
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	4649      	mov	r1, r9
 800e914:	2300      	movs	r3, #0
 800e916:	4640      	mov	r0, r8
 800e918:	f7f2 f848 	bl	80009ac <__aeabi_dcmplt>
 800e91c:	2400      	movs	r4, #0
 800e91e:	b148      	cbz	r0, 800e934 <pow+0x108>
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f001 fd9c 	bl	8010460 <rint>
 800e928:	4632      	mov	r2, r6
 800e92a:	463b      	mov	r3, r7
 800e92c:	f7f2 f834 	bl	8000998 <__aeabi_dcmpeq>
 800e930:	2800      	cmp	r0, #0
 800e932:	d0c4      	beq.n	800e8be <pow+0x92>
 800e934:	4d11      	ldr	r5, [pc, #68]	; (800e97c <pow+0x150>)
 800e936:	e79e      	b.n	800e876 <pow+0x4a>
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f2 f82a 	bl	8000998 <__aeabi_dcmpeq>
 800e944:	2800      	cmp	r0, #0
 800e946:	d096      	beq.n	800e876 <pow+0x4a>
 800e948:	4640      	mov	r0, r8
 800e94a:	4649      	mov	r1, r9
 800e94c:	f001 fd7b 	bl	8010446 <finite>
 800e950:	2800      	cmp	r0, #0
 800e952:	d090      	beq.n	800e876 <pow+0x4a>
 800e954:	4630      	mov	r0, r6
 800e956:	4639      	mov	r1, r7
 800e958:	f001 fd75 	bl	8010446 <finite>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d08a      	beq.n	800e876 <pow+0x4a>
 800e960:	f001 ff22 	bl	80107a8 <__errno>
 800e964:	2322      	movs	r3, #34	; 0x22
 800e966:	2400      	movs	r4, #0
 800e968:	2500      	movs	r5, #0
 800e96a:	6003      	str	r3, [r0, #0]
 800e96c:	e783      	b.n	800e876 <pow+0x4a>
 800e96e:	2400      	movs	r4, #0
 800e970:	4d03      	ldr	r5, [pc, #12]	; (800e980 <pow+0x154>)
 800e972:	e780      	b.n	800e876 <pow+0x4a>
 800e974:	20000021 	.word	0x20000021
 800e978:	fff00000 	.word	0xfff00000
 800e97c:	7ff00000 	.word	0x7ff00000
 800e980:	3ff00000 	.word	0x3ff00000

0800e984 <sqrt>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	4606      	mov	r6, r0
 800e988:	460f      	mov	r7, r1
 800e98a:	f000 fd87 	bl	800f49c <__ieee754_sqrt>
 800e98e:	4b12      	ldr	r3, [pc, #72]	; (800e9d8 <sqrt+0x54>)
 800e990:	4604      	mov	r4, r0
 800e992:	f993 3000 	ldrsb.w	r3, [r3]
 800e996:	460d      	mov	r5, r1
 800e998:	3301      	adds	r3, #1
 800e99a:	d019      	beq.n	800e9d0 <sqrt+0x4c>
 800e99c:	4632      	mov	r2, r6
 800e99e:	463b      	mov	r3, r7
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	f7f2 f82a 	bl	80009fc <__aeabi_dcmpun>
 800e9a8:	b990      	cbnz	r0, 800e9d0 <sqrt+0x4c>
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	4639      	mov	r1, r7
 800e9b2:	f7f1 fffb 	bl	80009ac <__aeabi_dcmplt>
 800e9b6:	b158      	cbz	r0, 800e9d0 <sqrt+0x4c>
 800e9b8:	f001 fef6 	bl	80107a8 <__errno>
 800e9bc:	2321      	movs	r3, #33	; 0x21
 800e9be:	2200      	movs	r2, #0
 800e9c0:	6003      	str	r3, [r0, #0]
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	f7f1 fea8 	bl	800071c <__aeabi_ddiv>
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000021 	.word	0x20000021

0800e9dc <asinf>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4604      	mov	r4, r0
 800e9e0:	f000 fe08 	bl	800f5f4 <__ieee754_asinf>
 800e9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ea20 <asinf+0x44>)
 800e9e6:	4605      	mov	r5, r0
 800e9e8:	f993 3000 	ldrsb.w	r3, [r3]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	d015      	beq.n	800ea1c <asinf+0x40>
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7f2 fb64 	bl	80010c0 <__aeabi_fcmpun>
 800e9f8:	b980      	cbnz	r0, 800ea1c <asinf+0x40>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f7ff fedc 	bl	800e7b8 <fabsf>
 800ea00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ea04:	f7f2 fb52 	bl	80010ac <__aeabi_fcmpgt>
 800ea08:	b140      	cbz	r0, 800ea1c <asinf+0x40>
 800ea0a:	f001 fecd 	bl	80107a8 <__errno>
 800ea0e:	2321      	movs	r3, #33	; 0x21
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	4804      	ldr	r0, [pc, #16]	; (800ea24 <asinf+0x48>)
 800ea14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea18:	f001 be76 	b.w	8010708 <nanf>
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	bd38      	pop	{r3, r4, r5, pc}
 800ea20:	20000021 	.word	0x20000021
 800ea24:	08012831 	.word	0x08012831

0800ea28 <atan2f>:
 800ea28:	f000 bf28 	b.w	800f87c <__ieee754_atan2f>

0800ea2c <sqrtf>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4605      	mov	r5, r0
 800ea30:	f001 f908 	bl	800fc44 <__ieee754_sqrtf>
 800ea34:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <sqrtf+0x40>)
 800ea36:	4604      	mov	r4, r0
 800ea38:	f993 3000 	ldrsb.w	r3, [r3]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	d012      	beq.n	800ea66 <sqrtf+0x3a>
 800ea40:	4629      	mov	r1, r5
 800ea42:	4628      	mov	r0, r5
 800ea44:	f7f2 fb3c 	bl	80010c0 <__aeabi_fcmpun>
 800ea48:	b968      	cbnz	r0, 800ea66 <sqrtf+0x3a>
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f7f2 fb0f 	bl	8001070 <__aeabi_fcmplt>
 800ea52:	b140      	cbz	r0, 800ea66 <sqrtf+0x3a>
 800ea54:	f001 fea8 	bl	80107a8 <__errno>
 800ea58:	2321      	movs	r3, #33	; 0x21
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6003      	str	r3, [r0, #0]
 800ea5e:	4608      	mov	r0, r1
 800ea60:	f7f2 fa1c 	bl	8000e9c <__aeabi_fdiv>
 800ea64:	4604      	mov	r4, r0
 800ea66:	4620      	mov	r0, r4
 800ea68:	bd38      	pop	{r3, r4, r5, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20000021 	.word	0x20000021

0800ea70 <__ieee754_pow>:
 800ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	b093      	sub	sp, #76	; 0x4c
 800ea76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea7a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ea7e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ea82:	ea55 0302 	orrs.w	r3, r5, r2
 800ea86:	4607      	mov	r7, r0
 800ea88:	4688      	mov	r8, r1
 800ea8a:	f000 84bf 	beq.w	800f40c <__ieee754_pow+0x99c>
 800ea8e:	4b7e      	ldr	r3, [pc, #504]	; (800ec88 <__ieee754_pow+0x218>)
 800ea90:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ea94:	429c      	cmp	r4, r3
 800ea96:	4689      	mov	r9, r1
 800ea98:	4682      	mov	sl, r0
 800ea9a:	dc09      	bgt.n	800eab0 <__ieee754_pow+0x40>
 800ea9c:	d103      	bne.n	800eaa6 <__ieee754_pow+0x36>
 800ea9e:	b978      	cbnz	r0, 800eac0 <__ieee754_pow+0x50>
 800eaa0:	42a5      	cmp	r5, r4
 800eaa2:	dd02      	ble.n	800eaaa <__ieee754_pow+0x3a>
 800eaa4:	e00c      	b.n	800eac0 <__ieee754_pow+0x50>
 800eaa6:	429d      	cmp	r5, r3
 800eaa8:	dc02      	bgt.n	800eab0 <__ieee754_pow+0x40>
 800eaaa:	429d      	cmp	r5, r3
 800eaac:	d10e      	bne.n	800eacc <__ieee754_pow+0x5c>
 800eaae:	b16a      	cbz	r2, 800eacc <__ieee754_pow+0x5c>
 800eab0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eab4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eab8:	ea54 030a 	orrs.w	r3, r4, sl
 800eabc:	f000 84a6 	beq.w	800f40c <__ieee754_pow+0x99c>
 800eac0:	4872      	ldr	r0, [pc, #456]	; (800ec8c <__ieee754_pow+0x21c>)
 800eac2:	b013      	add	sp, #76	; 0x4c
 800eac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	f001 bcc4 	b.w	8010454 <nan>
 800eacc:	f1b9 0f00 	cmp.w	r9, #0
 800ead0:	da39      	bge.n	800eb46 <__ieee754_pow+0xd6>
 800ead2:	4b6f      	ldr	r3, [pc, #444]	; (800ec90 <__ieee754_pow+0x220>)
 800ead4:	429d      	cmp	r5, r3
 800ead6:	dc54      	bgt.n	800eb82 <__ieee754_pow+0x112>
 800ead8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800eadc:	429d      	cmp	r5, r3
 800eade:	f340 84a6 	ble.w	800f42e <__ieee754_pow+0x9be>
 800eae2:	152b      	asrs	r3, r5, #20
 800eae4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eae8:	2b14      	cmp	r3, #20
 800eaea:	dd0f      	ble.n	800eb0c <__ieee754_pow+0x9c>
 800eaec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eaf0:	fa22 f103 	lsr.w	r1, r2, r3
 800eaf4:	fa01 f303 	lsl.w	r3, r1, r3
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	f040 8498 	bne.w	800f42e <__ieee754_pow+0x9be>
 800eafe:	f001 0101 	and.w	r1, r1, #1
 800eb02:	f1c1 0302 	rsb	r3, r1, #2
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	b182      	cbz	r2, 800eb2c <__ieee754_pow+0xbc>
 800eb0a:	e05e      	b.n	800ebca <__ieee754_pow+0x15a>
 800eb0c:	2a00      	cmp	r2, #0
 800eb0e:	d15a      	bne.n	800ebc6 <__ieee754_pow+0x156>
 800eb10:	f1c3 0314 	rsb	r3, r3, #20
 800eb14:	fa45 f103 	asr.w	r1, r5, r3
 800eb18:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1c:	42ab      	cmp	r3, r5
 800eb1e:	f040 8483 	bne.w	800f428 <__ieee754_pow+0x9b8>
 800eb22:	f001 0101 	and.w	r1, r1, #1
 800eb26:	f1c1 0302 	rsb	r3, r1, #2
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	4b59      	ldr	r3, [pc, #356]	; (800ec94 <__ieee754_pow+0x224>)
 800eb2e:	429d      	cmp	r5, r3
 800eb30:	d130      	bne.n	800eb94 <__ieee754_pow+0x124>
 800eb32:	2e00      	cmp	r6, #0
 800eb34:	f280 8474 	bge.w	800f420 <__ieee754_pow+0x9b0>
 800eb38:	463a      	mov	r2, r7
 800eb3a:	4643      	mov	r3, r8
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	4955      	ldr	r1, [pc, #340]	; (800ec94 <__ieee754_pow+0x224>)
 800eb40:	f7f1 fdec 	bl	800071c <__aeabi_ddiv>
 800eb44:	e02f      	b.n	800eba6 <__ieee754_pow+0x136>
 800eb46:	2300      	movs	r3, #0
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	2a00      	cmp	r2, #0
 800eb4c:	d13d      	bne.n	800ebca <__ieee754_pow+0x15a>
 800eb4e:	4b4e      	ldr	r3, [pc, #312]	; (800ec88 <__ieee754_pow+0x218>)
 800eb50:	429d      	cmp	r5, r3
 800eb52:	d1eb      	bne.n	800eb2c <__ieee754_pow+0xbc>
 800eb54:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eb58:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb5c:	ea53 030a 	orrs.w	r3, r3, sl
 800eb60:	f000 8454 	beq.w	800f40c <__ieee754_pow+0x99c>
 800eb64:	4b4c      	ldr	r3, [pc, #304]	; (800ec98 <__ieee754_pow+0x228>)
 800eb66:	429c      	cmp	r4, r3
 800eb68:	dd0d      	ble.n	800eb86 <__ieee754_pow+0x116>
 800eb6a:	2e00      	cmp	r6, #0
 800eb6c:	f280 8454 	bge.w	800f418 <__ieee754_pow+0x9a8>
 800eb70:	f04f 0b00 	mov.w	fp, #0
 800eb74:	f04f 0c00 	mov.w	ip, #0
 800eb78:	4658      	mov	r0, fp
 800eb7a:	4661      	mov	r1, ip
 800eb7c:	b013      	add	sp, #76	; 0x4c
 800eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb82:	2302      	movs	r3, #2
 800eb84:	e7e0      	b.n	800eb48 <__ieee754_pow+0xd8>
 800eb86:	2e00      	cmp	r6, #0
 800eb88:	daf2      	bge.n	800eb70 <__ieee754_pow+0x100>
 800eb8a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800eb8e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800eb92:	e7f1      	b.n	800eb78 <__ieee754_pow+0x108>
 800eb94:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800eb98:	d108      	bne.n	800ebac <__ieee754_pow+0x13c>
 800eb9a:	463a      	mov	r2, r7
 800eb9c:	4643      	mov	r3, r8
 800eb9e:	4638      	mov	r0, r7
 800eba0:	4641      	mov	r1, r8
 800eba2:	f7f1 fc91 	bl	80004c8 <__aeabi_dmul>
 800eba6:	4683      	mov	fp, r0
 800eba8:	468c      	mov	ip, r1
 800ebaa:	e7e5      	b.n	800eb78 <__ieee754_pow+0x108>
 800ebac:	4b3b      	ldr	r3, [pc, #236]	; (800ec9c <__ieee754_pow+0x22c>)
 800ebae:	429e      	cmp	r6, r3
 800ebb0:	d10b      	bne.n	800ebca <__ieee754_pow+0x15a>
 800ebb2:	f1b9 0f00 	cmp.w	r9, #0
 800ebb6:	db08      	blt.n	800ebca <__ieee754_pow+0x15a>
 800ebb8:	4638      	mov	r0, r7
 800ebba:	4641      	mov	r1, r8
 800ebbc:	b013      	add	sp, #76	; 0x4c
 800ebbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc2:	f000 bc6b 	b.w	800f49c <__ieee754_sqrt>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	4638      	mov	r0, r7
 800ebcc:	4641      	mov	r1, r8
 800ebce:	f001 fc37 	bl	8010440 <fabs>
 800ebd2:	4683      	mov	fp, r0
 800ebd4:	468c      	mov	ip, r1
 800ebd6:	f1ba 0f00 	cmp.w	sl, #0
 800ebda:	d129      	bne.n	800ec30 <__ieee754_pow+0x1c0>
 800ebdc:	b124      	cbz	r4, 800ebe8 <__ieee754_pow+0x178>
 800ebde:	4b2d      	ldr	r3, [pc, #180]	; (800ec94 <__ieee754_pow+0x224>)
 800ebe0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d123      	bne.n	800ec30 <__ieee754_pow+0x1c0>
 800ebe8:	2e00      	cmp	r6, #0
 800ebea:	da07      	bge.n	800ebfc <__ieee754_pow+0x18c>
 800ebec:	465a      	mov	r2, fp
 800ebee:	4663      	mov	r3, ip
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	4928      	ldr	r1, [pc, #160]	; (800ec94 <__ieee754_pow+0x224>)
 800ebf4:	f7f1 fd92 	bl	800071c <__aeabi_ddiv>
 800ebf8:	4683      	mov	fp, r0
 800ebfa:	468c      	mov	ip, r1
 800ebfc:	f1b9 0f00 	cmp.w	r9, #0
 800ec00:	daba      	bge.n	800eb78 <__ieee754_pow+0x108>
 800ec02:	9b00      	ldr	r3, [sp, #0]
 800ec04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ec08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ec0c:	4323      	orrs	r3, r4
 800ec0e:	d108      	bne.n	800ec22 <__ieee754_pow+0x1b2>
 800ec10:	465a      	mov	r2, fp
 800ec12:	4663      	mov	r3, ip
 800ec14:	4658      	mov	r0, fp
 800ec16:	4661      	mov	r1, ip
 800ec18:	f7f1 fa9e 	bl	8000158 <__aeabi_dsub>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	e78e      	b.n	800eb40 <__ieee754_pow+0xd0>
 800ec22:	9b00      	ldr	r3, [sp, #0]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d1a7      	bne.n	800eb78 <__ieee754_pow+0x108>
 800ec28:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ec2c:	469c      	mov	ip, r3
 800ec2e:	e7a3      	b.n	800eb78 <__ieee754_pow+0x108>
 800ec30:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800ec34:	3b01      	subs	r3, #1
 800ec36:	930c      	str	r3, [sp, #48]	; 0x30
 800ec38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec3a:	9b00      	ldr	r3, [sp, #0]
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	d104      	bne.n	800ec4a <__ieee754_pow+0x1da>
 800ec40:	463a      	mov	r2, r7
 800ec42:	4643      	mov	r3, r8
 800ec44:	4638      	mov	r0, r7
 800ec46:	4641      	mov	r1, r8
 800ec48:	e7e6      	b.n	800ec18 <__ieee754_pow+0x1a8>
 800ec4a:	4b15      	ldr	r3, [pc, #84]	; (800eca0 <__ieee754_pow+0x230>)
 800ec4c:	429d      	cmp	r5, r3
 800ec4e:	f340 80f9 	ble.w	800ee44 <__ieee754_pow+0x3d4>
 800ec52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ec56:	429d      	cmp	r5, r3
 800ec58:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <__ieee754_pow+0x228>)
 800ec5a:	dd09      	ble.n	800ec70 <__ieee754_pow+0x200>
 800ec5c:	429c      	cmp	r4, r3
 800ec5e:	dc0c      	bgt.n	800ec7a <__ieee754_pow+0x20a>
 800ec60:	2e00      	cmp	r6, #0
 800ec62:	da85      	bge.n	800eb70 <__ieee754_pow+0x100>
 800ec64:	a306      	add	r3, pc, #24	; (adr r3, 800ec80 <__ieee754_pow+0x210>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	e798      	b.n	800eba2 <__ieee754_pow+0x132>
 800ec70:	429c      	cmp	r4, r3
 800ec72:	dbf5      	blt.n	800ec60 <__ieee754_pow+0x1f0>
 800ec74:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <__ieee754_pow+0x224>)
 800ec76:	429c      	cmp	r4, r3
 800ec78:	dd14      	ble.n	800eca4 <__ieee754_pow+0x234>
 800ec7a:	2e00      	cmp	r6, #0
 800ec7c:	dcf2      	bgt.n	800ec64 <__ieee754_pow+0x1f4>
 800ec7e:	e777      	b.n	800eb70 <__ieee754_pow+0x100>
 800ec80:	8800759c 	.word	0x8800759c
 800ec84:	7e37e43c 	.word	0x7e37e43c
 800ec88:	7ff00000 	.word	0x7ff00000
 800ec8c:	08012831 	.word	0x08012831
 800ec90:	433fffff 	.word	0x433fffff
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	3fefffff 	.word	0x3fefffff
 800ec9c:	3fe00000 	.word	0x3fe00000
 800eca0:	41e00000 	.word	0x41e00000
 800eca4:	4661      	mov	r1, ip
 800eca6:	2200      	movs	r2, #0
 800eca8:	4658      	mov	r0, fp
 800ecaa:	4b61      	ldr	r3, [pc, #388]	; (800ee30 <__ieee754_pow+0x3c0>)
 800ecac:	f7f1 fa54 	bl	8000158 <__aeabi_dsub>
 800ecb0:	a355      	add	r3, pc, #340	; (adr r3, 800ee08 <__ieee754_pow+0x398>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	460d      	mov	r5, r1
 800ecba:	f7f1 fc05 	bl	80004c8 <__aeabi_dmul>
 800ecbe:	a354      	add	r3, pc, #336	; (adr r3, 800ee10 <__ieee754_pow+0x3a0>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	4620      	mov	r0, r4
 800ecca:	4629      	mov	r1, r5
 800eccc:	f7f1 fbfc 	bl	80004c8 <__aeabi_dmul>
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4682      	mov	sl, r0
 800ecd4:	468b      	mov	fp, r1
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4b56      	ldr	r3, [pc, #344]	; (800ee34 <__ieee754_pow+0x3c4>)
 800ecdc:	f7f1 fbf4 	bl	80004c8 <__aeabi_dmul>
 800ece0:	4602      	mov	r2, r0
 800ece2:	460b      	mov	r3, r1
 800ece4:	a14c      	add	r1, pc, #304	; (adr r1, 800ee18 <__ieee754_pow+0x3a8>)
 800ece6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecea:	f7f1 fa35 	bl	8000158 <__aeabi_dsub>
 800ecee:	4622      	mov	r2, r4
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	f7f1 fbe9 	bl	80004c8 <__aeabi_dmul>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	494e      	ldr	r1, [pc, #312]	; (800ee38 <__ieee754_pow+0x3c8>)
 800ecfe:	f7f1 fa2b 	bl	8000158 <__aeabi_dsub>
 800ed02:	4622      	mov	r2, r4
 800ed04:	462b      	mov	r3, r5
 800ed06:	4680      	mov	r8, r0
 800ed08:	4689      	mov	r9, r1
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	f7f1 fbdb 	bl	80004c8 <__aeabi_dmul>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4640      	mov	r0, r8
 800ed18:	4649      	mov	r1, r9
 800ed1a:	f7f1 fbd5 	bl	80004c8 <__aeabi_dmul>
 800ed1e:	a340      	add	r3, pc, #256	; (adr r3, 800ee20 <__ieee754_pow+0x3b0>)
 800ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed24:	f7f1 fbd0 	bl	80004c8 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	4659      	mov	r1, fp
 800ed30:	f7f1 fa12 	bl	8000158 <__aeabi_dsub>
 800ed34:	f04f 0a00 	mov.w	sl, #0
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	4630      	mov	r0, r6
 800ed42:	4639      	mov	r1, r7
 800ed44:	f7f1 fa0a 	bl	800015c <__adddf3>
 800ed48:	4632      	mov	r2, r6
 800ed4a:	463b      	mov	r3, r7
 800ed4c:	4650      	mov	r0, sl
 800ed4e:	468b      	mov	fp, r1
 800ed50:	f7f1 fa02 	bl	8000158 <__aeabi_dsub>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4620      	mov	r0, r4
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	f7f1 f9fc 	bl	8000158 <__aeabi_dsub>
 800ed60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed64:	9b00      	ldr	r3, [sp, #0]
 800ed66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	f04f 0600 	mov.w	r6, #0
 800ed70:	f04f 0200 	mov.w	r2, #0
 800ed74:	bf0c      	ite	eq
 800ed76:	4b31      	ldreq	r3, [pc, #196]	; (800ee3c <__ieee754_pow+0x3cc>)
 800ed78:	4b2d      	ldrne	r3, [pc, #180]	; (800ee30 <__ieee754_pow+0x3c0>)
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed82:	e9cd 2300 	strd	r2, r3, [sp]
 800ed86:	4632      	mov	r2, r6
 800ed88:	463b      	mov	r3, r7
 800ed8a:	f7f1 f9e5 	bl	8000158 <__aeabi_dsub>
 800ed8e:	4652      	mov	r2, sl
 800ed90:	465b      	mov	r3, fp
 800ed92:	f7f1 fb99 	bl	80004c8 <__aeabi_dmul>
 800ed96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed9a:	4680      	mov	r8, r0
 800ed9c:	4689      	mov	r9, r1
 800ed9e:	4620      	mov	r0, r4
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7f1 fb91 	bl	80004c8 <__aeabi_dmul>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4640      	mov	r0, r8
 800edac:	4649      	mov	r1, r9
 800edae:	f7f1 f9d5 	bl	800015c <__adddf3>
 800edb2:	4632      	mov	r2, r6
 800edb4:	463b      	mov	r3, r7
 800edb6:	4680      	mov	r8, r0
 800edb8:	4689      	mov	r9, r1
 800edba:	4650      	mov	r0, sl
 800edbc:	4659      	mov	r1, fp
 800edbe:	f7f1 fb83 	bl	80004c8 <__aeabi_dmul>
 800edc2:	4604      	mov	r4, r0
 800edc4:	460d      	mov	r5, r1
 800edc6:	460b      	mov	r3, r1
 800edc8:	4602      	mov	r2, r0
 800edca:	4649      	mov	r1, r9
 800edcc:	4640      	mov	r0, r8
 800edce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800edd2:	f7f1 f9c3 	bl	800015c <__adddf3>
 800edd6:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <__ieee754_pow+0x3d0>)
 800edd8:	4682      	mov	sl, r0
 800edda:	4299      	cmp	r1, r3
 800eddc:	460f      	mov	r7, r1
 800edde:	460e      	mov	r6, r1
 800ede0:	f340 82ed 	ble.w	800f3be <__ieee754_pow+0x94e>
 800ede4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ede8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800edec:	4303      	orrs	r3, r0
 800edee:	f000 81e7 	beq.w	800f1c0 <__ieee754_pow+0x750>
 800edf2:	a30d      	add	r3, pc, #52	; (adr r3, 800ee28 <__ieee754_pow+0x3b8>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edfc:	f7f1 fb64 	bl	80004c8 <__aeabi_dmul>
 800ee00:	a309      	add	r3, pc, #36	; (adr r3, 800ee28 <__ieee754_pow+0x3b8>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	e6cc      	b.n	800eba2 <__ieee754_pow+0x132>
 800ee08:	60000000 	.word	0x60000000
 800ee0c:	3ff71547 	.word	0x3ff71547
 800ee10:	f85ddf44 	.word	0xf85ddf44
 800ee14:	3e54ae0b 	.word	0x3e54ae0b
 800ee18:	55555555 	.word	0x55555555
 800ee1c:	3fd55555 	.word	0x3fd55555
 800ee20:	652b82fe 	.word	0x652b82fe
 800ee24:	3ff71547 	.word	0x3ff71547
 800ee28:	8800759c 	.word	0x8800759c
 800ee2c:	7e37e43c 	.word	0x7e37e43c
 800ee30:	3ff00000 	.word	0x3ff00000
 800ee34:	3fd00000 	.word	0x3fd00000
 800ee38:	3fe00000 	.word	0x3fe00000
 800ee3c:	bff00000 	.word	0xbff00000
 800ee40:	408fffff 	.word	0x408fffff
 800ee44:	4bd4      	ldr	r3, [pc, #848]	; (800f198 <__ieee754_pow+0x728>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	ea09 0303 	and.w	r3, r9, r3
 800ee4c:	b943      	cbnz	r3, 800ee60 <__ieee754_pow+0x3f0>
 800ee4e:	4658      	mov	r0, fp
 800ee50:	4661      	mov	r1, ip
 800ee52:	4bd2      	ldr	r3, [pc, #840]	; (800f19c <__ieee754_pow+0x72c>)
 800ee54:	f7f1 fb38 	bl	80004c8 <__aeabi_dmul>
 800ee58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ee5c:	4683      	mov	fp, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	1523      	asrs	r3, r4, #20
 800ee62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee66:	4413      	add	r3, r2
 800ee68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee6a:	4bcd      	ldr	r3, [pc, #820]	; (800f1a0 <__ieee754_pow+0x730>)
 800ee6c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee70:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee74:	429c      	cmp	r4, r3
 800ee76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee7a:	dd08      	ble.n	800ee8e <__ieee754_pow+0x41e>
 800ee7c:	4bc9      	ldr	r3, [pc, #804]	; (800f1a4 <__ieee754_pow+0x734>)
 800ee7e:	429c      	cmp	r4, r3
 800ee80:	f340 819c 	ble.w	800f1bc <__ieee754_pow+0x74c>
 800ee84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee8e:	2600      	movs	r6, #0
 800ee90:	00f3      	lsls	r3, r6, #3
 800ee92:	930d      	str	r3, [sp, #52]	; 0x34
 800ee94:	4bc4      	ldr	r3, [pc, #784]	; (800f1a8 <__ieee754_pow+0x738>)
 800ee96:	4658      	mov	r0, fp
 800ee98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eea0:	4629      	mov	r1, r5
 800eea2:	461a      	mov	r2, r3
 800eea4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800eea8:	4623      	mov	r3, r4
 800eeaa:	f7f1 f955 	bl	8000158 <__aeabi_dsub>
 800eeae:	46da      	mov	sl, fp
 800eeb0:	462b      	mov	r3, r5
 800eeb2:	4652      	mov	r2, sl
 800eeb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800eeb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eebc:	f7f1 f94e 	bl	800015c <__adddf3>
 800eec0:	4602      	mov	r2, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	2000      	movs	r0, #0
 800eec6:	49b9      	ldr	r1, [pc, #740]	; (800f1ac <__ieee754_pow+0x73c>)
 800eec8:	f7f1 fc28 	bl	800071c <__aeabi_ddiv>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eed8:	f7f1 faf6 	bl	80004c8 <__aeabi_dmul>
 800eedc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eee0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800eee4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eee8:	2300      	movs	r3, #0
 800eeea:	2200      	movs	r2, #0
 800eeec:	46ab      	mov	fp, r5
 800eeee:	106d      	asrs	r5, r5, #1
 800eef0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eef4:	9304      	str	r3, [sp, #16]
 800eef6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eefa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800eefe:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ef02:	4640      	mov	r0, r8
 800ef04:	4649      	mov	r1, r9
 800ef06:	4614      	mov	r4, r2
 800ef08:	461d      	mov	r5, r3
 800ef0a:	f7f1 fadd 	bl	80004c8 <__aeabi_dmul>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ef16:	f7f1 f91f 	bl	8000158 <__aeabi_dsub>
 800ef1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ef1e:	4606      	mov	r6, r0
 800ef20:	460f      	mov	r7, r1
 800ef22:	4620      	mov	r0, r4
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7f1 f917 	bl	8000158 <__aeabi_dsub>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4650      	mov	r0, sl
 800ef30:	4659      	mov	r1, fp
 800ef32:	f7f1 f911 	bl	8000158 <__aeabi_dsub>
 800ef36:	4642      	mov	r2, r8
 800ef38:	464b      	mov	r3, r9
 800ef3a:	f7f1 fac5 	bl	80004c8 <__aeabi_dmul>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4630      	mov	r0, r6
 800ef44:	4639      	mov	r1, r7
 800ef46:	f7f1 f907 	bl	8000158 <__aeabi_dsub>
 800ef4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef4e:	f7f1 fabb 	bl	80004c8 <__aeabi_dmul>
 800ef52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f7f1 fab3 	bl	80004c8 <__aeabi_dmul>
 800ef62:	a37b      	add	r3, pc, #492	; (adr r3, 800f150 <__ieee754_pow+0x6e0>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	4604      	mov	r4, r0
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	f7f1 faac 	bl	80004c8 <__aeabi_dmul>
 800ef70:	a379      	add	r3, pc, #484	; (adr r3, 800f158 <__ieee754_pow+0x6e8>)
 800ef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef76:	f7f1 f8f1 	bl	800015c <__adddf3>
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	f7f1 faa3 	bl	80004c8 <__aeabi_dmul>
 800ef82:	a377      	add	r3, pc, #476	; (adr r3, 800f160 <__ieee754_pow+0x6f0>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	f7f1 f8e8 	bl	800015c <__adddf3>
 800ef8c:	4622      	mov	r2, r4
 800ef8e:	462b      	mov	r3, r5
 800ef90:	f7f1 fa9a 	bl	80004c8 <__aeabi_dmul>
 800ef94:	a374      	add	r3, pc, #464	; (adr r3, 800f168 <__ieee754_pow+0x6f8>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 f8df 	bl	800015c <__adddf3>
 800ef9e:	4622      	mov	r2, r4
 800efa0:	462b      	mov	r3, r5
 800efa2:	f7f1 fa91 	bl	80004c8 <__aeabi_dmul>
 800efa6:	a372      	add	r3, pc, #456	; (adr r3, 800f170 <__ieee754_pow+0x700>)
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	f7f1 f8d6 	bl	800015c <__adddf3>
 800efb0:	4622      	mov	r2, r4
 800efb2:	462b      	mov	r3, r5
 800efb4:	f7f1 fa88 	bl	80004c8 <__aeabi_dmul>
 800efb8:	a36f      	add	r3, pc, #444	; (adr r3, 800f178 <__ieee754_pow+0x708>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f7f1 f8cd 	bl	800015c <__adddf3>
 800efc2:	4622      	mov	r2, r4
 800efc4:	4606      	mov	r6, r0
 800efc6:	460f      	mov	r7, r1
 800efc8:	462b      	mov	r3, r5
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	f7f1 fa7b 	bl	80004c8 <__aeabi_dmul>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4630      	mov	r0, r6
 800efd8:	4639      	mov	r1, r7
 800efda:	f7f1 fa75 	bl	80004c8 <__aeabi_dmul>
 800efde:	4604      	mov	r4, r0
 800efe0:	460d      	mov	r5, r1
 800efe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efe6:	4642      	mov	r2, r8
 800efe8:	464b      	mov	r3, r9
 800efea:	f7f1 f8b7 	bl	800015c <__adddf3>
 800efee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eff2:	f7f1 fa69 	bl	80004c8 <__aeabi_dmul>
 800eff6:	4622      	mov	r2, r4
 800eff8:	462b      	mov	r3, r5
 800effa:	f7f1 f8af 	bl	800015c <__adddf3>
 800effe:	4642      	mov	r2, r8
 800f000:	4606      	mov	r6, r0
 800f002:	460f      	mov	r7, r1
 800f004:	464b      	mov	r3, r9
 800f006:	4640      	mov	r0, r8
 800f008:	4649      	mov	r1, r9
 800f00a:	f7f1 fa5d 	bl	80004c8 <__aeabi_dmul>
 800f00e:	2200      	movs	r2, #0
 800f010:	4b67      	ldr	r3, [pc, #412]	; (800f1b0 <__ieee754_pow+0x740>)
 800f012:	4682      	mov	sl, r0
 800f014:	468b      	mov	fp, r1
 800f016:	f7f1 f8a1 	bl	800015c <__adddf3>
 800f01a:	4632      	mov	r2, r6
 800f01c:	463b      	mov	r3, r7
 800f01e:	f7f1 f89d 	bl	800015c <__adddf3>
 800f022:	9c04      	ldr	r4, [sp, #16]
 800f024:	460d      	mov	r5, r1
 800f026:	4622      	mov	r2, r4
 800f028:	460b      	mov	r3, r1
 800f02a:	4640      	mov	r0, r8
 800f02c:	4649      	mov	r1, r9
 800f02e:	f7f1 fa4b 	bl	80004c8 <__aeabi_dmul>
 800f032:	2200      	movs	r2, #0
 800f034:	4680      	mov	r8, r0
 800f036:	4689      	mov	r9, r1
 800f038:	4620      	mov	r0, r4
 800f03a:	4629      	mov	r1, r5
 800f03c:	4b5c      	ldr	r3, [pc, #368]	; (800f1b0 <__ieee754_pow+0x740>)
 800f03e:	f7f1 f88b 	bl	8000158 <__aeabi_dsub>
 800f042:	4652      	mov	r2, sl
 800f044:	465b      	mov	r3, fp
 800f046:	f7f1 f887 	bl	8000158 <__aeabi_dsub>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	4630      	mov	r0, r6
 800f050:	4639      	mov	r1, r7
 800f052:	f7f1 f881 	bl	8000158 <__aeabi_dsub>
 800f056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f05a:	f7f1 fa35 	bl	80004c8 <__aeabi_dmul>
 800f05e:	4622      	mov	r2, r4
 800f060:	4606      	mov	r6, r0
 800f062:	460f      	mov	r7, r1
 800f064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f068:	462b      	mov	r3, r5
 800f06a:	f7f1 fa2d 	bl	80004c8 <__aeabi_dmul>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	4630      	mov	r0, r6
 800f074:	4639      	mov	r1, r7
 800f076:	f7f1 f871 	bl	800015c <__adddf3>
 800f07a:	4606      	mov	r6, r0
 800f07c:	460f      	mov	r7, r1
 800f07e:	4602      	mov	r2, r0
 800f080:	460b      	mov	r3, r1
 800f082:	4640      	mov	r0, r8
 800f084:	4649      	mov	r1, r9
 800f086:	f7f1 f869 	bl	800015c <__adddf3>
 800f08a:	a33d      	add	r3, pc, #244	; (adr r3, 800f180 <__ieee754_pow+0x710>)
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	9c04      	ldr	r4, [sp, #16]
 800f092:	460d      	mov	r5, r1
 800f094:	4620      	mov	r0, r4
 800f096:	f7f1 fa17 	bl	80004c8 <__aeabi_dmul>
 800f09a:	4642      	mov	r2, r8
 800f09c:	464b      	mov	r3, r9
 800f09e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	f7f1 f857 	bl	8000158 <__aeabi_dsub>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	f7f1 f851 	bl	8000158 <__aeabi_dsub>
 800f0b6:	a334      	add	r3, pc, #208	; (adr r3, 800f188 <__ieee754_pow+0x718>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	f7f1 fa04 	bl	80004c8 <__aeabi_dmul>
 800f0c0:	a333      	add	r3, pc, #204	; (adr r3, 800f190 <__ieee754_pow+0x720>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	460f      	mov	r7, r1
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	f7f1 f9fb 	bl	80004c8 <__aeabi_dmul>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	4639      	mov	r1, r7
 800f0da:	f7f1 f83f 	bl	800015c <__adddf3>
 800f0de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0e0:	4b34      	ldr	r3, [pc, #208]	; (800f1b4 <__ieee754_pow+0x744>)
 800f0e2:	4413      	add	r3, r2
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 f838 	bl	800015c <__adddf3>
 800f0ec:	4680      	mov	r8, r0
 800f0ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f0f0:	4689      	mov	r9, r1
 800f0f2:	f7f1 f97f 	bl	80003f4 <__aeabi_i2d>
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	460d      	mov	r5, r1
 800f0fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0fc:	4b2e      	ldr	r3, [pc, #184]	; (800f1b8 <__ieee754_pow+0x748>)
 800f0fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f102:	4413      	add	r3, r2
 800f104:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f108:	4642      	mov	r2, r8
 800f10a:	464b      	mov	r3, r9
 800f10c:	f7f1 f826 	bl	800015c <__adddf3>
 800f110:	4632      	mov	r2, r6
 800f112:	463b      	mov	r3, r7
 800f114:	f7f1 f822 	bl	800015c <__adddf3>
 800f118:	4622      	mov	r2, r4
 800f11a:	462b      	mov	r3, r5
 800f11c:	f7f1 f81e 	bl	800015c <__adddf3>
 800f120:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f124:	4622      	mov	r2, r4
 800f126:	462b      	mov	r3, r5
 800f128:	4650      	mov	r0, sl
 800f12a:	468b      	mov	fp, r1
 800f12c:	f7f1 f814 	bl	8000158 <__aeabi_dsub>
 800f130:	4632      	mov	r2, r6
 800f132:	463b      	mov	r3, r7
 800f134:	f7f1 f810 	bl	8000158 <__aeabi_dsub>
 800f138:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f13c:	f7f1 f80c 	bl	8000158 <__aeabi_dsub>
 800f140:	4602      	mov	r2, r0
 800f142:	460b      	mov	r3, r1
 800f144:	4640      	mov	r0, r8
 800f146:	4649      	mov	r1, r9
 800f148:	e608      	b.n	800ed5c <__ieee754_pow+0x2ec>
 800f14a:	bf00      	nop
 800f14c:	f3af 8000 	nop.w
 800f150:	4a454eef 	.word	0x4a454eef
 800f154:	3fca7e28 	.word	0x3fca7e28
 800f158:	93c9db65 	.word	0x93c9db65
 800f15c:	3fcd864a 	.word	0x3fcd864a
 800f160:	a91d4101 	.word	0xa91d4101
 800f164:	3fd17460 	.word	0x3fd17460
 800f168:	518f264d 	.word	0x518f264d
 800f16c:	3fd55555 	.word	0x3fd55555
 800f170:	db6fabff 	.word	0xdb6fabff
 800f174:	3fdb6db6 	.word	0x3fdb6db6
 800f178:	33333303 	.word	0x33333303
 800f17c:	3fe33333 	.word	0x3fe33333
 800f180:	e0000000 	.word	0xe0000000
 800f184:	3feec709 	.word	0x3feec709
 800f188:	dc3a03fd 	.word	0xdc3a03fd
 800f18c:	3feec709 	.word	0x3feec709
 800f190:	145b01f5 	.word	0x145b01f5
 800f194:	be3e2fe0 	.word	0xbe3e2fe0
 800f198:	7ff00000 	.word	0x7ff00000
 800f19c:	43400000 	.word	0x43400000
 800f1a0:	0003988e 	.word	0x0003988e
 800f1a4:	000bb679 	.word	0x000bb679
 800f1a8:	080123a0 	.word	0x080123a0
 800f1ac:	3ff00000 	.word	0x3ff00000
 800f1b0:	40080000 	.word	0x40080000
 800f1b4:	080123c0 	.word	0x080123c0
 800f1b8:	080123b0 	.word	0x080123b0
 800f1bc:	2601      	movs	r6, #1
 800f1be:	e667      	b.n	800ee90 <__ieee754_pow+0x420>
 800f1c0:	a39d      	add	r3, pc, #628	; (adr r3, 800f438 <__ieee754_pow+0x9c8>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	4649      	mov	r1, r9
 800f1ca:	f7f0 ffc7 	bl	800015c <__adddf3>
 800f1ce:	4622      	mov	r2, r4
 800f1d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1d4:	462b      	mov	r3, r5
 800f1d6:	4650      	mov	r0, sl
 800f1d8:	4639      	mov	r1, r7
 800f1da:	f7f0 ffbd 	bl	8000158 <__aeabi_dsub>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1e6:	f7f1 fbff 	bl	80009e8 <__aeabi_dcmpgt>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f47f ae01 	bne.w	800edf2 <__ieee754_pow+0x382>
 800f1f0:	4aa5      	ldr	r2, [pc, #660]	; (800f488 <__ieee754_pow+0xa18>)
 800f1f2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	f340 8103 	ble.w	800f402 <__ieee754_pow+0x992>
 800f1fc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f200:	2000      	movs	r0, #0
 800f202:	151b      	asrs	r3, r3, #20
 800f204:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f208:	fa4a f303 	asr.w	r3, sl, r3
 800f20c:	4433      	add	r3, r6
 800f20e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f212:	4f9e      	ldr	r7, [pc, #632]	; (800f48c <__ieee754_pow+0xa1c>)
 800f214:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f218:	4117      	asrs	r7, r2
 800f21a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f21e:	ea23 0107 	bic.w	r1, r3, r7
 800f222:	f1c2 0214 	rsb	r2, r2, #20
 800f226:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f22a:	460b      	mov	r3, r1
 800f22c:	fa4a fa02 	asr.w	sl, sl, r2
 800f230:	2e00      	cmp	r6, #0
 800f232:	4602      	mov	r2, r0
 800f234:	4629      	mov	r1, r5
 800f236:	4620      	mov	r0, r4
 800f238:	bfb8      	it	lt
 800f23a:	f1ca 0a00 	rsblt	sl, sl, #0
 800f23e:	f7f0 ff8b 	bl	8000158 <__aeabi_dsub>
 800f242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f24a:	2400      	movs	r4, #0
 800f24c:	4642      	mov	r2, r8
 800f24e:	464b      	mov	r3, r9
 800f250:	f7f0 ff84 	bl	800015c <__adddf3>
 800f254:	a37a      	add	r3, pc, #488	; (adr r3, 800f440 <__ieee754_pow+0x9d0>)
 800f256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25a:	4620      	mov	r0, r4
 800f25c:	460d      	mov	r5, r1
 800f25e:	f7f1 f933 	bl	80004c8 <__aeabi_dmul>
 800f262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f266:	4606      	mov	r6, r0
 800f268:	460f      	mov	r7, r1
 800f26a:	4620      	mov	r0, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	f7f0 ff73 	bl	8000158 <__aeabi_dsub>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4640      	mov	r0, r8
 800f278:	4649      	mov	r1, r9
 800f27a:	f7f0 ff6d 	bl	8000158 <__aeabi_dsub>
 800f27e:	a372      	add	r3, pc, #456	; (adr r3, 800f448 <__ieee754_pow+0x9d8>)
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	f7f1 f920 	bl	80004c8 <__aeabi_dmul>
 800f288:	a371      	add	r3, pc, #452	; (adr r3, 800f450 <__ieee754_pow+0x9e0>)
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	4680      	mov	r8, r0
 800f290:	4689      	mov	r9, r1
 800f292:	4620      	mov	r0, r4
 800f294:	4629      	mov	r1, r5
 800f296:	f7f1 f917 	bl	80004c8 <__aeabi_dmul>
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	4640      	mov	r0, r8
 800f2a0:	4649      	mov	r1, r9
 800f2a2:	f7f0 ff5b 	bl	800015c <__adddf3>
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	460d      	mov	r5, r1
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	f7f0 ff53 	bl	800015c <__adddf3>
 800f2b6:	4632      	mov	r2, r6
 800f2b8:	463b      	mov	r3, r7
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	4689      	mov	r9, r1
 800f2be:	f7f0 ff4b 	bl	8000158 <__aeabi_dsub>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	f7f0 ff45 	bl	8000158 <__aeabi_dsub>
 800f2ce:	4642      	mov	r2, r8
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	460f      	mov	r7, r1
 800f2d4:	464b      	mov	r3, r9
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	4649      	mov	r1, r9
 800f2da:	f7f1 f8f5 	bl	80004c8 <__aeabi_dmul>
 800f2de:	a35e      	add	r3, pc, #376	; (adr r3, 800f458 <__ieee754_pow+0x9e8>)
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	460d      	mov	r5, r1
 800f2e8:	f7f1 f8ee 	bl	80004c8 <__aeabi_dmul>
 800f2ec:	a35c      	add	r3, pc, #368	; (adr r3, 800f460 <__ieee754_pow+0x9f0>)
 800f2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f2:	f7f0 ff31 	bl	8000158 <__aeabi_dsub>
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	462b      	mov	r3, r5
 800f2fa:	f7f1 f8e5 	bl	80004c8 <__aeabi_dmul>
 800f2fe:	a35a      	add	r3, pc, #360	; (adr r3, 800f468 <__ieee754_pow+0x9f8>)
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	f7f0 ff2a 	bl	800015c <__adddf3>
 800f308:	4622      	mov	r2, r4
 800f30a:	462b      	mov	r3, r5
 800f30c:	f7f1 f8dc 	bl	80004c8 <__aeabi_dmul>
 800f310:	a357      	add	r3, pc, #348	; (adr r3, 800f470 <__ieee754_pow+0xa00>)
 800f312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f316:	f7f0 ff1f 	bl	8000158 <__aeabi_dsub>
 800f31a:	4622      	mov	r2, r4
 800f31c:	462b      	mov	r3, r5
 800f31e:	f7f1 f8d3 	bl	80004c8 <__aeabi_dmul>
 800f322:	a355      	add	r3, pc, #340	; (adr r3, 800f478 <__ieee754_pow+0xa08>)
 800f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f328:	f7f0 ff18 	bl	800015c <__adddf3>
 800f32c:	4622      	mov	r2, r4
 800f32e:	462b      	mov	r3, r5
 800f330:	f7f1 f8ca 	bl	80004c8 <__aeabi_dmul>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4640      	mov	r0, r8
 800f33a:	4649      	mov	r1, r9
 800f33c:	f7f0 ff0c 	bl	8000158 <__aeabi_dsub>
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	4640      	mov	r0, r8
 800f34a:	4649      	mov	r1, r9
 800f34c:	f7f1 f8bc 	bl	80004c8 <__aeabi_dmul>
 800f350:	2200      	movs	r2, #0
 800f352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f35a:	4620      	mov	r0, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7f0 fefb 	bl	8000158 <__aeabi_dsub>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f36a:	f7f1 f9d7 	bl	800071c <__aeabi_ddiv>
 800f36e:	4632      	mov	r2, r6
 800f370:	4604      	mov	r4, r0
 800f372:	460d      	mov	r5, r1
 800f374:	463b      	mov	r3, r7
 800f376:	4640      	mov	r0, r8
 800f378:	4649      	mov	r1, r9
 800f37a:	f7f1 f8a5 	bl	80004c8 <__aeabi_dmul>
 800f37e:	4632      	mov	r2, r6
 800f380:	463b      	mov	r3, r7
 800f382:	f7f0 feeb 	bl	800015c <__adddf3>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4620      	mov	r0, r4
 800f38c:	4629      	mov	r1, r5
 800f38e:	f7f0 fee3 	bl	8000158 <__aeabi_dsub>
 800f392:	4642      	mov	r2, r8
 800f394:	464b      	mov	r3, r9
 800f396:	f7f0 fedf 	bl	8000158 <__aeabi_dsub>
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	2000      	movs	r0, #0
 800f3a0:	493b      	ldr	r1, [pc, #236]	; (800f490 <__ieee754_pow+0xa20>)
 800f3a2:	f7f0 fed9 	bl	8000158 <__aeabi_dsub>
 800f3a6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f3aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f3ae:	da2b      	bge.n	800f408 <__ieee754_pow+0x998>
 800f3b0:	4652      	mov	r2, sl
 800f3b2:	f001 f8e1 	bl	8010578 <scalbn>
 800f3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3ba:	f7ff bbf2 	b.w	800eba2 <__ieee754_pow+0x132>
 800f3be:	4b35      	ldr	r3, [pc, #212]	; (800f494 <__ieee754_pow+0xa24>)
 800f3c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f3c4:	429f      	cmp	r7, r3
 800f3c6:	f77f af13 	ble.w	800f1f0 <__ieee754_pow+0x780>
 800f3ca:	4b33      	ldr	r3, [pc, #204]	; (800f498 <__ieee754_pow+0xa28>)
 800f3cc:	440b      	add	r3, r1
 800f3ce:	4303      	orrs	r3, r0
 800f3d0:	d00b      	beq.n	800f3ea <__ieee754_pow+0x97a>
 800f3d2:	a32b      	add	r3, pc, #172	; (adr r3, 800f480 <__ieee754_pow+0xa10>)
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3dc:	f7f1 f874 	bl	80004c8 <__aeabi_dmul>
 800f3e0:	a327      	add	r3, pc, #156	; (adr r3, 800f480 <__ieee754_pow+0xa10>)
 800f3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e6:	f7ff bbdc 	b.w	800eba2 <__ieee754_pow+0x132>
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	462b      	mov	r3, r5
 800f3ee:	f7f0 feb3 	bl	8000158 <__aeabi_dsub>
 800f3f2:	4642      	mov	r2, r8
 800f3f4:	464b      	mov	r3, r9
 800f3f6:	f7f1 faed 	bl	80009d4 <__aeabi_dcmpge>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	f43f aef8 	beq.w	800f1f0 <__ieee754_pow+0x780>
 800f400:	e7e7      	b.n	800f3d2 <__ieee754_pow+0x962>
 800f402:	f04f 0a00 	mov.w	sl, #0
 800f406:	e71e      	b.n	800f246 <__ieee754_pow+0x7d6>
 800f408:	4621      	mov	r1, r4
 800f40a:	e7d4      	b.n	800f3b6 <__ieee754_pow+0x946>
 800f40c:	f04f 0b00 	mov.w	fp, #0
 800f410:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f490 <__ieee754_pow+0xa20>
 800f414:	f7ff bbb0 	b.w	800eb78 <__ieee754_pow+0x108>
 800f418:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800f41c:	f7ff bbac 	b.w	800eb78 <__ieee754_pow+0x108>
 800f420:	4638      	mov	r0, r7
 800f422:	4641      	mov	r1, r8
 800f424:	f7ff bbbf 	b.w	800eba6 <__ieee754_pow+0x136>
 800f428:	9200      	str	r2, [sp, #0]
 800f42a:	f7ff bb7f 	b.w	800eb2c <__ieee754_pow+0xbc>
 800f42e:	2300      	movs	r3, #0
 800f430:	f7ff bb69 	b.w	800eb06 <__ieee754_pow+0x96>
 800f434:	f3af 8000 	nop.w
 800f438:	652b82fe 	.word	0x652b82fe
 800f43c:	3c971547 	.word	0x3c971547
 800f440:	00000000 	.word	0x00000000
 800f444:	3fe62e43 	.word	0x3fe62e43
 800f448:	fefa39ef 	.word	0xfefa39ef
 800f44c:	3fe62e42 	.word	0x3fe62e42
 800f450:	0ca86c39 	.word	0x0ca86c39
 800f454:	be205c61 	.word	0xbe205c61
 800f458:	72bea4d0 	.word	0x72bea4d0
 800f45c:	3e663769 	.word	0x3e663769
 800f460:	c5d26bf1 	.word	0xc5d26bf1
 800f464:	3ebbbd41 	.word	0x3ebbbd41
 800f468:	af25de2c 	.word	0xaf25de2c
 800f46c:	3f11566a 	.word	0x3f11566a
 800f470:	16bebd93 	.word	0x16bebd93
 800f474:	3f66c16c 	.word	0x3f66c16c
 800f478:	5555553e 	.word	0x5555553e
 800f47c:	3fc55555 	.word	0x3fc55555
 800f480:	c2f8f359 	.word	0xc2f8f359
 800f484:	01a56e1f 	.word	0x01a56e1f
 800f488:	3fe00000 	.word	0x3fe00000
 800f48c:	000fffff 	.word	0x000fffff
 800f490:	3ff00000 	.word	0x3ff00000
 800f494:	4090cbff 	.word	0x4090cbff
 800f498:	3f6f3400 	.word	0x3f6f3400

0800f49c <__ieee754_sqrt>:
 800f49c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f5f0 <__ieee754_sqrt+0x154>
 800f4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a4:	ea3c 0c01 	bics.w	ip, ip, r1
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	460d      	mov	r5, r1
 800f4ae:	460a      	mov	r2, r1
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	d10e      	bne.n	800f4d4 <__ieee754_sqrt+0x38>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	f7f1 f806 	bl	80004c8 <__aeabi_dmul>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7f0 fe4a 	bl	800015c <__adddf3>
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	4629      	mov	r1, r5
 800f4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	dc0d      	bgt.n	800f4f4 <__ieee754_sqrt+0x58>
 800f4d8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f4dc:	ea5c 0707 	orrs.w	r7, ip, r7
 800f4e0:	d0f4      	beq.n	800f4cc <__ieee754_sqrt+0x30>
 800f4e2:	b139      	cbz	r1, 800f4f4 <__ieee754_sqrt+0x58>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	f7f0 fe37 	bl	8000158 <__aeabi_dsub>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	f7f1 f915 	bl	800071c <__aeabi_ddiv>
 800f4f2:	e7e9      	b.n	800f4c8 <__ieee754_sqrt+0x2c>
 800f4f4:	1512      	asrs	r2, r2, #20
 800f4f6:	d074      	beq.n	800f5e2 <__ieee754_sqrt+0x146>
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	07d5      	lsls	r5, r2, #31
 800f4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f500:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800f504:	bf5e      	ittt	pl
 800f506:	0fe3      	lsrpl	r3, r4, #31
 800f508:	0064      	lslpl	r4, r4, #1
 800f50a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800f50e:	0fe3      	lsrs	r3, r4, #31
 800f510:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f514:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f518:	2516      	movs	r5, #22
 800f51a:	4601      	mov	r1, r0
 800f51c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f520:	1076      	asrs	r6, r6, #1
 800f522:	0064      	lsls	r4, r4, #1
 800f524:	188f      	adds	r7, r1, r2
 800f526:	429f      	cmp	r7, r3
 800f528:	bfde      	ittt	le
 800f52a:	1bdb      	suble	r3, r3, r7
 800f52c:	18b9      	addle	r1, r7, r2
 800f52e:	1880      	addle	r0, r0, r2
 800f530:	005b      	lsls	r3, r3, #1
 800f532:	3d01      	subs	r5, #1
 800f534:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f538:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f53c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f540:	d1f0      	bne.n	800f524 <__ieee754_sqrt+0x88>
 800f542:	462a      	mov	r2, r5
 800f544:	f04f 0e20 	mov.w	lr, #32
 800f548:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800f54c:	428b      	cmp	r3, r1
 800f54e:	eb07 0c05 	add.w	ip, r7, r5
 800f552:	dc02      	bgt.n	800f55a <__ieee754_sqrt+0xbe>
 800f554:	d113      	bne.n	800f57e <__ieee754_sqrt+0xe2>
 800f556:	45a4      	cmp	ip, r4
 800f558:	d811      	bhi.n	800f57e <__ieee754_sqrt+0xe2>
 800f55a:	f1bc 0f00 	cmp.w	ip, #0
 800f55e:	eb0c 0507 	add.w	r5, ip, r7
 800f562:	da43      	bge.n	800f5ec <__ieee754_sqrt+0x150>
 800f564:	2d00      	cmp	r5, #0
 800f566:	db41      	blt.n	800f5ec <__ieee754_sqrt+0x150>
 800f568:	f101 0801 	add.w	r8, r1, #1
 800f56c:	1a5b      	subs	r3, r3, r1
 800f56e:	4641      	mov	r1, r8
 800f570:	45a4      	cmp	ip, r4
 800f572:	bf88      	it	hi
 800f574:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f578:	eba4 040c 	sub.w	r4, r4, ip
 800f57c:	443a      	add	r2, r7
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	f1be 0e01 	subs.w	lr, lr, #1
 800f584:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f588:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800f58c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f590:	d1dc      	bne.n	800f54c <__ieee754_sqrt+0xb0>
 800f592:	4323      	orrs	r3, r4
 800f594:	d006      	beq.n	800f5a4 <__ieee754_sqrt+0x108>
 800f596:	1c54      	adds	r4, r2, #1
 800f598:	bf0b      	itete	eq
 800f59a:	4672      	moveq	r2, lr
 800f59c:	3201      	addne	r2, #1
 800f59e:	3001      	addeq	r0, #1
 800f5a0:	f022 0201 	bicne.w	r2, r2, #1
 800f5a4:	1043      	asrs	r3, r0, #1
 800f5a6:	07c1      	lsls	r1, r0, #31
 800f5a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f5ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f5b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f5b4:	bf48      	it	mi
 800f5b6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f5c0:	e782      	b.n	800f4c8 <__ieee754_sqrt+0x2c>
 800f5c2:	0ae3      	lsrs	r3, r4, #11
 800f5c4:	3915      	subs	r1, #21
 800f5c6:	0564      	lsls	r4, r4, #21
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d0fa      	beq.n	800f5c2 <__ieee754_sqrt+0x126>
 800f5cc:	02de      	lsls	r6, r3, #11
 800f5ce:	d50a      	bpl.n	800f5e6 <__ieee754_sqrt+0x14a>
 800f5d0:	f1c2 0020 	rsb	r0, r2, #32
 800f5d4:	fa24 f000 	lsr.w	r0, r4, r0
 800f5d8:	1e55      	subs	r5, r2, #1
 800f5da:	4094      	lsls	r4, r2
 800f5dc:	4303      	orrs	r3, r0
 800f5de:	1b4a      	subs	r2, r1, r5
 800f5e0:	e78a      	b.n	800f4f8 <__ieee754_sqrt+0x5c>
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	e7f0      	b.n	800f5c8 <__ieee754_sqrt+0x12c>
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	3201      	adds	r2, #1
 800f5ea:	e7ef      	b.n	800f5cc <__ieee754_sqrt+0x130>
 800f5ec:	4688      	mov	r8, r1
 800f5ee:	e7bd      	b.n	800f56c <__ieee754_sqrt+0xd0>
 800f5f0:	7ff00000 	.word	0x7ff00000

0800f5f4 <__ieee754_asinf>:
 800f5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f5fc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f600:	4604      	mov	r4, r0
 800f602:	4605      	mov	r5, r0
 800f604:	d10c      	bne.n	800f620 <__ieee754_asinf+0x2c>
 800f606:	498d      	ldr	r1, [pc, #564]	; (800f83c <__ieee754_asinf+0x248>)
 800f608:	f7f1 fb94 	bl	8000d34 <__aeabi_fmul>
 800f60c:	498c      	ldr	r1, [pc, #560]	; (800f840 <__ieee754_asinf+0x24c>)
 800f60e:	4605      	mov	r5, r0
 800f610:	4620      	mov	r0, r4
 800f612:	f7f1 fb8f 	bl	8000d34 <__aeabi_fmul>
 800f616:	4601      	mov	r1, r0
 800f618:	4628      	mov	r0, r5
 800f61a:	f7f1 fa83 	bl	8000b24 <__addsf3>
 800f61e:	e006      	b.n	800f62e <__ieee754_asinf+0x3a>
 800f620:	dd07      	ble.n	800f632 <__ieee754_asinf+0x3e>
 800f622:	4601      	mov	r1, r0
 800f624:	f7f1 fa7c 	bl	8000b20 <__aeabi_fsub>
 800f628:	4601      	mov	r1, r0
 800f62a:	f7f1 fc37 	bl	8000e9c <__aeabi_fdiv>
 800f62e:	4604      	mov	r4, r0
 800f630:	e00e      	b.n	800f650 <__ieee754_asinf+0x5c>
 800f632:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800f636:	da58      	bge.n	800f6ea <__ieee754_asinf+0xf6>
 800f638:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800f63c:	da0b      	bge.n	800f656 <__ieee754_asinf+0x62>
 800f63e:	4981      	ldr	r1, [pc, #516]	; (800f844 <__ieee754_asinf+0x250>)
 800f640:	f7f1 fa70 	bl	8000b24 <__addsf3>
 800f644:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f648:	f7f1 fd30 	bl	80010ac <__aeabi_fcmpgt>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d04c      	beq.n	800f6ea <__ieee754_asinf+0xf6>
 800f650:	4620      	mov	r0, r4
 800f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f656:	4601      	mov	r1, r0
 800f658:	f7f1 fb6c 	bl	8000d34 <__aeabi_fmul>
 800f65c:	4605      	mov	r5, r0
 800f65e:	497a      	ldr	r1, [pc, #488]	; (800f848 <__ieee754_asinf+0x254>)
 800f660:	f7f1 fb68 	bl	8000d34 <__aeabi_fmul>
 800f664:	4979      	ldr	r1, [pc, #484]	; (800f84c <__ieee754_asinf+0x258>)
 800f666:	f7f1 fa5d 	bl	8000b24 <__addsf3>
 800f66a:	4629      	mov	r1, r5
 800f66c:	f7f1 fb62 	bl	8000d34 <__aeabi_fmul>
 800f670:	4977      	ldr	r1, [pc, #476]	; (800f850 <__ieee754_asinf+0x25c>)
 800f672:	f7f1 fa55 	bl	8000b20 <__aeabi_fsub>
 800f676:	4629      	mov	r1, r5
 800f678:	f7f1 fb5c 	bl	8000d34 <__aeabi_fmul>
 800f67c:	4975      	ldr	r1, [pc, #468]	; (800f854 <__ieee754_asinf+0x260>)
 800f67e:	f7f1 fa51 	bl	8000b24 <__addsf3>
 800f682:	4629      	mov	r1, r5
 800f684:	f7f1 fb56 	bl	8000d34 <__aeabi_fmul>
 800f688:	4973      	ldr	r1, [pc, #460]	; (800f858 <__ieee754_asinf+0x264>)
 800f68a:	f7f1 fa49 	bl	8000b20 <__aeabi_fsub>
 800f68e:	4629      	mov	r1, r5
 800f690:	f7f1 fb50 	bl	8000d34 <__aeabi_fmul>
 800f694:	4971      	ldr	r1, [pc, #452]	; (800f85c <__ieee754_asinf+0x268>)
 800f696:	f7f1 fa45 	bl	8000b24 <__addsf3>
 800f69a:	4629      	mov	r1, r5
 800f69c:	f7f1 fb4a 	bl	8000d34 <__aeabi_fmul>
 800f6a0:	496f      	ldr	r1, [pc, #444]	; (800f860 <__ieee754_asinf+0x26c>)
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f7f1 fb45 	bl	8000d34 <__aeabi_fmul>
 800f6aa:	496e      	ldr	r1, [pc, #440]	; (800f864 <__ieee754_asinf+0x270>)
 800f6ac:	f7f1 fa38 	bl	8000b20 <__aeabi_fsub>
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f1 fb3f 	bl	8000d34 <__aeabi_fmul>
 800f6b6:	496c      	ldr	r1, [pc, #432]	; (800f868 <__ieee754_asinf+0x274>)
 800f6b8:	f7f1 fa34 	bl	8000b24 <__addsf3>
 800f6bc:	4629      	mov	r1, r5
 800f6be:	f7f1 fb39 	bl	8000d34 <__aeabi_fmul>
 800f6c2:	496a      	ldr	r1, [pc, #424]	; (800f86c <__ieee754_asinf+0x278>)
 800f6c4:	f7f1 fa2c 	bl	8000b20 <__aeabi_fsub>
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7f1 fb33 	bl	8000d34 <__aeabi_fmul>
 800f6ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f6d2:	f7f1 fa27 	bl	8000b24 <__addsf3>
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f7f1 fbdf 	bl	8000e9c <__aeabi_fdiv>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	f7f1 fb28 	bl	8000d34 <__aeabi_fmul>
 800f6e4:	4601      	mov	r1, r0
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	e797      	b.n	800f61a <__ieee754_asinf+0x26>
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f7ff f864 	bl	800e7b8 <fabsf>
 800f6f0:	4601      	mov	r1, r0
 800f6f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f6f6:	f7f1 fa13 	bl	8000b20 <__aeabi_fsub>
 800f6fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f6fe:	f7f1 fb19 	bl	8000d34 <__aeabi_fmul>
 800f702:	4606      	mov	r6, r0
 800f704:	4950      	ldr	r1, [pc, #320]	; (800f848 <__ieee754_asinf+0x254>)
 800f706:	f7f1 fb15 	bl	8000d34 <__aeabi_fmul>
 800f70a:	4950      	ldr	r1, [pc, #320]	; (800f84c <__ieee754_asinf+0x258>)
 800f70c:	f7f1 fa0a 	bl	8000b24 <__addsf3>
 800f710:	4631      	mov	r1, r6
 800f712:	f7f1 fb0f 	bl	8000d34 <__aeabi_fmul>
 800f716:	494e      	ldr	r1, [pc, #312]	; (800f850 <__ieee754_asinf+0x25c>)
 800f718:	f7f1 fa02 	bl	8000b20 <__aeabi_fsub>
 800f71c:	4631      	mov	r1, r6
 800f71e:	f7f1 fb09 	bl	8000d34 <__aeabi_fmul>
 800f722:	494c      	ldr	r1, [pc, #304]	; (800f854 <__ieee754_asinf+0x260>)
 800f724:	f7f1 f9fe 	bl	8000b24 <__addsf3>
 800f728:	4631      	mov	r1, r6
 800f72a:	f7f1 fb03 	bl	8000d34 <__aeabi_fmul>
 800f72e:	494a      	ldr	r1, [pc, #296]	; (800f858 <__ieee754_asinf+0x264>)
 800f730:	f7f1 f9f6 	bl	8000b20 <__aeabi_fsub>
 800f734:	4631      	mov	r1, r6
 800f736:	f7f1 fafd 	bl	8000d34 <__aeabi_fmul>
 800f73a:	4948      	ldr	r1, [pc, #288]	; (800f85c <__ieee754_asinf+0x268>)
 800f73c:	f7f1 f9f2 	bl	8000b24 <__addsf3>
 800f740:	4631      	mov	r1, r6
 800f742:	f7f1 faf7 	bl	8000d34 <__aeabi_fmul>
 800f746:	4946      	ldr	r1, [pc, #280]	; (800f860 <__ieee754_asinf+0x26c>)
 800f748:	4681      	mov	r9, r0
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7f1 faf2 	bl	8000d34 <__aeabi_fmul>
 800f750:	4944      	ldr	r1, [pc, #272]	; (800f864 <__ieee754_asinf+0x270>)
 800f752:	f7f1 f9e5 	bl	8000b20 <__aeabi_fsub>
 800f756:	4631      	mov	r1, r6
 800f758:	f7f1 faec 	bl	8000d34 <__aeabi_fmul>
 800f75c:	4942      	ldr	r1, [pc, #264]	; (800f868 <__ieee754_asinf+0x274>)
 800f75e:	f7f1 f9e1 	bl	8000b24 <__addsf3>
 800f762:	4631      	mov	r1, r6
 800f764:	f7f1 fae6 	bl	8000d34 <__aeabi_fmul>
 800f768:	4940      	ldr	r1, [pc, #256]	; (800f86c <__ieee754_asinf+0x278>)
 800f76a:	f7f1 f9d9 	bl	8000b20 <__aeabi_fsub>
 800f76e:	4631      	mov	r1, r6
 800f770:	f7f1 fae0 	bl	8000d34 <__aeabi_fmul>
 800f774:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f778:	f7f1 f9d4 	bl	8000b24 <__addsf3>
 800f77c:	4682      	mov	sl, r0
 800f77e:	4630      	mov	r0, r6
 800f780:	f000 fa60 	bl	800fc44 <__ieee754_sqrtf>
 800f784:	4b3a      	ldr	r3, [pc, #232]	; (800f870 <__ieee754_asinf+0x27c>)
 800f786:	4607      	mov	r7, r0
 800f788:	4598      	cmp	r8, r3
 800f78a:	dd1a      	ble.n	800f7c2 <__ieee754_asinf+0x1ce>
 800f78c:	4651      	mov	r1, sl
 800f78e:	4648      	mov	r0, r9
 800f790:	f7f1 fb84 	bl	8000e9c <__aeabi_fdiv>
 800f794:	4639      	mov	r1, r7
 800f796:	f7f1 facd 	bl	8000d34 <__aeabi_fmul>
 800f79a:	4639      	mov	r1, r7
 800f79c:	f7f1 f9c2 	bl	8000b24 <__addsf3>
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	f7f1 f9bf 	bl	8000b24 <__addsf3>
 800f7a6:	4933      	ldr	r1, [pc, #204]	; (800f874 <__ieee754_asinf+0x280>)
 800f7a8:	f7f1 f9bc 	bl	8000b24 <__addsf3>
 800f7ac:	4601      	mov	r1, r0
 800f7ae:	4823      	ldr	r0, [pc, #140]	; (800f83c <__ieee754_asinf+0x248>)
 800f7b0:	f7f1 f9b6 	bl	8000b20 <__aeabi_fsub>
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	f73f af4a 	bgt.w	800f650 <__ieee754_asinf+0x5c>
 800f7bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f7c0:	e735      	b.n	800f62e <__ieee754_asinf+0x3a>
 800f7c2:	4601      	mov	r1, r0
 800f7c4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800f7c8:	f7f1 f9ac 	bl	8000b24 <__addsf3>
 800f7cc:	4651      	mov	r1, sl
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4648      	mov	r0, r9
 800f7d2:	f7f1 fb63 	bl	8000e9c <__aeabi_fdiv>
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f7f1 faab 	bl	8000d34 <__aeabi_fmul>
 800f7de:	f028 080f 	bic.w	r8, r8, #15
 800f7e2:	4681      	mov	r9, r0
 800f7e4:	4641      	mov	r1, r8
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	f7f1 faa4 	bl	8000d34 <__aeabi_fmul>
 800f7ec:	4601      	mov	r1, r0
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f7f1 f996 	bl	8000b20 <__aeabi_fsub>
 800f7f4:	4641      	mov	r1, r8
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	f7f1 f993 	bl	8000b24 <__addsf3>
 800f7fe:	4601      	mov	r1, r0
 800f800:	4620      	mov	r0, r4
 800f802:	f7f1 fb4b 	bl	8000e9c <__aeabi_fdiv>
 800f806:	4601      	mov	r1, r0
 800f808:	f7f1 f98c 	bl	8000b24 <__addsf3>
 800f80c:	4601      	mov	r1, r0
 800f80e:	480c      	ldr	r0, [pc, #48]	; (800f840 <__ieee754_asinf+0x24c>)
 800f810:	f7f1 f986 	bl	8000b20 <__aeabi_fsub>
 800f814:	4601      	mov	r1, r0
 800f816:	4648      	mov	r0, r9
 800f818:	f7f1 f982 	bl	8000b20 <__aeabi_fsub>
 800f81c:	4641      	mov	r1, r8
 800f81e:	4604      	mov	r4, r0
 800f820:	4640      	mov	r0, r8
 800f822:	f7f1 f97f 	bl	8000b24 <__addsf3>
 800f826:	4601      	mov	r1, r0
 800f828:	4813      	ldr	r0, [pc, #76]	; (800f878 <__ieee754_asinf+0x284>)
 800f82a:	f7f1 f979 	bl	8000b20 <__aeabi_fsub>
 800f82e:	4601      	mov	r1, r0
 800f830:	4620      	mov	r0, r4
 800f832:	f7f1 f975 	bl	8000b20 <__aeabi_fsub>
 800f836:	4601      	mov	r1, r0
 800f838:	480f      	ldr	r0, [pc, #60]	; (800f878 <__ieee754_asinf+0x284>)
 800f83a:	e7b9      	b.n	800f7b0 <__ieee754_asinf+0x1bc>
 800f83c:	3fc90fdb 	.word	0x3fc90fdb
 800f840:	b33bbd2e 	.word	0xb33bbd2e
 800f844:	7149f2ca 	.word	0x7149f2ca
 800f848:	3811ef08 	.word	0x3811ef08
 800f84c:	3a4f7f04 	.word	0x3a4f7f04
 800f850:	3d241146 	.word	0x3d241146
 800f854:	3e4e0aa8 	.word	0x3e4e0aa8
 800f858:	3ea6b090 	.word	0x3ea6b090
 800f85c:	3e2aaaab 	.word	0x3e2aaaab
 800f860:	3d9dc62e 	.word	0x3d9dc62e
 800f864:	3f303361 	.word	0x3f303361
 800f868:	4001572d 	.word	0x4001572d
 800f86c:	4019d139 	.word	0x4019d139
 800f870:	3f799999 	.word	0x3f799999
 800f874:	333bbd2e 	.word	0x333bbd2e
 800f878:	3f490fdb 	.word	0x3f490fdb

0800f87c <__ieee754_atan2f>:
 800f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f882:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f886:	4603      	mov	r3, r0
 800f888:	dc05      	bgt.n	800f896 <__ieee754_atan2f+0x1a>
 800f88a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f88e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f892:	4607      	mov	r7, r0
 800f894:	dd04      	ble.n	800f8a0 <__ieee754_atan2f+0x24>
 800f896:	4618      	mov	r0, r3
 800f898:	f7f1 f944 	bl	8000b24 <__addsf3>
 800f89c:	4603      	mov	r3, r0
 800f89e:	e011      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f8a0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800f8a4:	d103      	bne.n	800f8ae <__ieee754_atan2f+0x32>
 800f8a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8aa:	f7fe be45 	b.w	800e538 <atanf>
 800f8ae:	178c      	asrs	r4, r1, #30
 800f8b0:	f004 0402 	and.w	r4, r4, #2
 800f8b4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f8b8:	b932      	cbnz	r2, 800f8c8 <__ieee754_atan2f+0x4c>
 800f8ba:	2c02      	cmp	r4, #2
 800f8bc:	d04c      	beq.n	800f958 <__ieee754_atan2f+0xdc>
 800f8be:	2c03      	cmp	r4, #3
 800f8c0:	d100      	bne.n	800f8c4 <__ieee754_atan2f+0x48>
 800f8c2:	4b29      	ldr	r3, [pc, #164]	; (800f968 <__ieee754_atan2f+0xec>)
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c8:	b91e      	cbnz	r6, 800f8d2 <__ieee754_atan2f+0x56>
 800f8ca:	2f00      	cmp	r7, #0
 800f8cc:	da4a      	bge.n	800f964 <__ieee754_atan2f+0xe8>
 800f8ce:	4b27      	ldr	r3, [pc, #156]	; (800f96c <__ieee754_atan2f+0xf0>)
 800f8d0:	e7f8      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f8d2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f8d6:	d10e      	bne.n	800f8f6 <__ieee754_atan2f+0x7a>
 800f8d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8dc:	f104 34ff 	add.w	r4, r4, #4294967295
 800f8e0:	d105      	bne.n	800f8ee <__ieee754_atan2f+0x72>
 800f8e2:	2c02      	cmp	r4, #2
 800f8e4:	d83a      	bhi.n	800f95c <__ieee754_atan2f+0xe0>
 800f8e6:	4b22      	ldr	r3, [pc, #136]	; (800f970 <__ieee754_atan2f+0xf4>)
 800f8e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f8ec:	e7ea      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f8ee:	2c02      	cmp	r4, #2
 800f8f0:	d836      	bhi.n	800f960 <__ieee754_atan2f+0xe4>
 800f8f2:	4b20      	ldr	r3, [pc, #128]	; (800f974 <__ieee754_atan2f+0xf8>)
 800f8f4:	e7f8      	b.n	800f8e8 <__ieee754_atan2f+0x6c>
 800f8f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8fa:	d0e6      	beq.n	800f8ca <__ieee754_atan2f+0x4e>
 800f8fc:	1b92      	subs	r2, r2, r6
 800f8fe:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800f902:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800f906:	da17      	bge.n	800f938 <__ieee754_atan2f+0xbc>
 800f908:	2900      	cmp	r1, #0
 800f90a:	da01      	bge.n	800f910 <__ieee754_atan2f+0x94>
 800f90c:	303c      	adds	r0, #60	; 0x3c
 800f90e:	db15      	blt.n	800f93c <__ieee754_atan2f+0xc0>
 800f910:	4618      	mov	r0, r3
 800f912:	f7f1 fac3 	bl	8000e9c <__aeabi_fdiv>
 800f916:	f7fe ff4f 	bl	800e7b8 <fabsf>
 800f91a:	f7fe fe0d 	bl	800e538 <atanf>
 800f91e:	4603      	mov	r3, r0
 800f920:	2c01      	cmp	r4, #1
 800f922:	d00d      	beq.n	800f940 <__ieee754_atan2f+0xc4>
 800f924:	2c02      	cmp	r4, #2
 800f926:	d00e      	beq.n	800f946 <__ieee754_atan2f+0xca>
 800f928:	2c00      	cmp	r4, #0
 800f92a:	d0cb      	beq.n	800f8c4 <__ieee754_atan2f+0x48>
 800f92c:	4912      	ldr	r1, [pc, #72]	; (800f978 <__ieee754_atan2f+0xfc>)
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f1 f8f8 	bl	8000b24 <__addsf3>
 800f934:	4911      	ldr	r1, [pc, #68]	; (800f97c <__ieee754_atan2f+0x100>)
 800f936:	e00c      	b.n	800f952 <__ieee754_atan2f+0xd6>
 800f938:	4b11      	ldr	r3, [pc, #68]	; (800f980 <__ieee754_atan2f+0x104>)
 800f93a:	e7f1      	b.n	800f920 <__ieee754_atan2f+0xa4>
 800f93c:	2300      	movs	r3, #0
 800f93e:	e7ef      	b.n	800f920 <__ieee754_atan2f+0xa4>
 800f940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f944:	e7be      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f946:	490c      	ldr	r1, [pc, #48]	; (800f978 <__ieee754_atan2f+0xfc>)
 800f948:	4618      	mov	r0, r3
 800f94a:	f7f1 f8eb 	bl	8000b24 <__addsf3>
 800f94e:	4601      	mov	r1, r0
 800f950:	480a      	ldr	r0, [pc, #40]	; (800f97c <__ieee754_atan2f+0x100>)
 800f952:	f7f1 f8e5 	bl	8000b20 <__aeabi_fsub>
 800f956:	e7a1      	b.n	800f89c <__ieee754_atan2f+0x20>
 800f958:	4b08      	ldr	r3, [pc, #32]	; (800f97c <__ieee754_atan2f+0x100>)
 800f95a:	e7b3      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f95c:	4b09      	ldr	r3, [pc, #36]	; (800f984 <__ieee754_atan2f+0x108>)
 800f95e:	e7b1      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f960:	2300      	movs	r3, #0
 800f962:	e7af      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f964:	4b06      	ldr	r3, [pc, #24]	; (800f980 <__ieee754_atan2f+0x104>)
 800f966:	e7ad      	b.n	800f8c4 <__ieee754_atan2f+0x48>
 800f968:	c0490fdb 	.word	0xc0490fdb
 800f96c:	bfc90fdb 	.word	0xbfc90fdb
 800f970:	080123d0 	.word	0x080123d0
 800f974:	080123dc 	.word	0x080123dc
 800f978:	33bbbd2e 	.word	0x33bbbd2e
 800f97c:	40490fdb 	.word	0x40490fdb
 800f980:	3fc90fdb 	.word	0x3fc90fdb
 800f984:	3f490fdb 	.word	0x3f490fdb

0800f988 <__ieee754_rem_pio2f>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	4aa0      	ldr	r2, [pc, #640]	; (800fc10 <__ieee754_rem_pio2f+0x288>)
 800f98e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f992:	4296      	cmp	r6, r2
 800f994:	460c      	mov	r4, r1
 800f996:	4682      	mov	sl, r0
 800f998:	b087      	sub	sp, #28
 800f99a:	dc04      	bgt.n	800f9a6 <__ieee754_rem_pio2f+0x1e>
 800f99c:	2300      	movs	r3, #0
 800f99e:	6008      	str	r0, [r1, #0]
 800f9a0:	604b      	str	r3, [r1, #4]
 800f9a2:	2500      	movs	r5, #0
 800f9a4:	e01a      	b.n	800f9dc <__ieee754_rem_pio2f+0x54>
 800f9a6:	4a9b      	ldr	r2, [pc, #620]	; (800fc14 <__ieee754_rem_pio2f+0x28c>)
 800f9a8:	4296      	cmp	r6, r2
 800f9aa:	dc4b      	bgt.n	800fa44 <__ieee754_rem_pio2f+0xbc>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	499a      	ldr	r1, [pc, #616]	; (800fc18 <__ieee754_rem_pio2f+0x290>)
 800f9b0:	4f9a      	ldr	r7, [pc, #616]	; (800fc1c <__ieee754_rem_pio2f+0x294>)
 800f9b2:	f026 060f 	bic.w	r6, r6, #15
 800f9b6:	dd23      	ble.n	800fa00 <__ieee754_rem_pio2f+0x78>
 800f9b8:	f7f1 f8b2 	bl	8000b20 <__aeabi_fsub>
 800f9bc:	42be      	cmp	r6, r7
 800f9be:	4605      	mov	r5, r0
 800f9c0:	d010      	beq.n	800f9e4 <__ieee754_rem_pio2f+0x5c>
 800f9c2:	4997      	ldr	r1, [pc, #604]	; (800fc20 <__ieee754_rem_pio2f+0x298>)
 800f9c4:	f7f1 f8ac 	bl	8000b20 <__aeabi_fsub>
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	6020      	str	r0, [r4, #0]
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f7f1 f8a7 	bl	8000b20 <__aeabi_fsub>
 800f9d2:	4993      	ldr	r1, [pc, #588]	; (800fc20 <__ieee754_rem_pio2f+0x298>)
 800f9d4:	f7f1 f8a4 	bl	8000b20 <__aeabi_fsub>
 800f9d8:	2501      	movs	r5, #1
 800f9da:	6060      	str	r0, [r4, #4]
 800f9dc:	4628      	mov	r0, r5
 800f9de:	b007      	add	sp, #28
 800f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e4:	498f      	ldr	r1, [pc, #572]	; (800fc24 <__ieee754_rem_pio2f+0x29c>)
 800f9e6:	f7f1 f89b 	bl	8000b20 <__aeabi_fsub>
 800f9ea:	498f      	ldr	r1, [pc, #572]	; (800fc28 <__ieee754_rem_pio2f+0x2a0>)
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	f7f1 f897 	bl	8000b20 <__aeabi_fsub>
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	6020      	str	r0, [r4, #0]
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	f7f1 f892 	bl	8000b20 <__aeabi_fsub>
 800f9fc:	498a      	ldr	r1, [pc, #552]	; (800fc28 <__ieee754_rem_pio2f+0x2a0>)
 800f9fe:	e7e9      	b.n	800f9d4 <__ieee754_rem_pio2f+0x4c>
 800fa00:	f7f1 f890 	bl	8000b24 <__addsf3>
 800fa04:	42be      	cmp	r6, r7
 800fa06:	4605      	mov	r5, r0
 800fa08:	d00e      	beq.n	800fa28 <__ieee754_rem_pio2f+0xa0>
 800fa0a:	4985      	ldr	r1, [pc, #532]	; (800fc20 <__ieee754_rem_pio2f+0x298>)
 800fa0c:	f7f1 f88a 	bl	8000b24 <__addsf3>
 800fa10:	4601      	mov	r1, r0
 800fa12:	6020      	str	r0, [r4, #0]
 800fa14:	4628      	mov	r0, r5
 800fa16:	f7f1 f883 	bl	8000b20 <__aeabi_fsub>
 800fa1a:	4981      	ldr	r1, [pc, #516]	; (800fc20 <__ieee754_rem_pio2f+0x298>)
 800fa1c:	f7f1 f882 	bl	8000b24 <__addsf3>
 800fa20:	f04f 35ff 	mov.w	r5, #4294967295
 800fa24:	6060      	str	r0, [r4, #4]
 800fa26:	e7d9      	b.n	800f9dc <__ieee754_rem_pio2f+0x54>
 800fa28:	497e      	ldr	r1, [pc, #504]	; (800fc24 <__ieee754_rem_pio2f+0x29c>)
 800fa2a:	f7f1 f87b 	bl	8000b24 <__addsf3>
 800fa2e:	497e      	ldr	r1, [pc, #504]	; (800fc28 <__ieee754_rem_pio2f+0x2a0>)
 800fa30:	4605      	mov	r5, r0
 800fa32:	f7f1 f877 	bl	8000b24 <__addsf3>
 800fa36:	4601      	mov	r1, r0
 800fa38:	6020      	str	r0, [r4, #0]
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f7f1 f870 	bl	8000b20 <__aeabi_fsub>
 800fa40:	4979      	ldr	r1, [pc, #484]	; (800fc28 <__ieee754_rem_pio2f+0x2a0>)
 800fa42:	e7eb      	b.n	800fa1c <__ieee754_rem_pio2f+0x94>
 800fa44:	4a79      	ldr	r2, [pc, #484]	; (800fc2c <__ieee754_rem_pio2f+0x2a4>)
 800fa46:	4296      	cmp	r6, r2
 800fa48:	f300 8091 	bgt.w	800fb6e <__ieee754_rem_pio2f+0x1e6>
 800fa4c:	f7fe feb4 	bl	800e7b8 <fabsf>
 800fa50:	4977      	ldr	r1, [pc, #476]	; (800fc30 <__ieee754_rem_pio2f+0x2a8>)
 800fa52:	4607      	mov	r7, r0
 800fa54:	f7f1 f96e 	bl	8000d34 <__aeabi_fmul>
 800fa58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fa5c:	f7f1 f862 	bl	8000b24 <__addsf3>
 800fa60:	f7f1 fb44 	bl	80010ec <__aeabi_f2iz>
 800fa64:	4605      	mov	r5, r0
 800fa66:	f7f1 f911 	bl	8000c8c <__aeabi_i2f>
 800fa6a:	496b      	ldr	r1, [pc, #428]	; (800fc18 <__ieee754_rem_pio2f+0x290>)
 800fa6c:	4681      	mov	r9, r0
 800fa6e:	f7f1 f961 	bl	8000d34 <__aeabi_fmul>
 800fa72:	4601      	mov	r1, r0
 800fa74:	4638      	mov	r0, r7
 800fa76:	f7f1 f853 	bl	8000b20 <__aeabi_fsub>
 800fa7a:	4969      	ldr	r1, [pc, #420]	; (800fc20 <__ieee754_rem_pio2f+0x298>)
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	4648      	mov	r0, r9
 800fa80:	f7f1 f958 	bl	8000d34 <__aeabi_fmul>
 800fa84:	2d1f      	cmp	r5, #31
 800fa86:	4607      	mov	r7, r0
 800fa88:	dc0c      	bgt.n	800faa4 <__ieee754_rem_pio2f+0x11c>
 800fa8a:	4a6a      	ldr	r2, [pc, #424]	; (800fc34 <__ieee754_rem_pio2f+0x2ac>)
 800fa8c:	1e69      	subs	r1, r5, #1
 800fa8e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fa92:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d004      	beq.n	800faa4 <__ieee754_rem_pio2f+0x11c>
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	f7f1 f83f 	bl	8000b20 <__aeabi_fsub>
 800faa2:	e00b      	b.n	800fabc <__ieee754_rem_pio2f+0x134>
 800faa4:	4639      	mov	r1, r7
 800faa6:	4640      	mov	r0, r8
 800faa8:	f7f1 f83a 	bl	8000b20 <__aeabi_fsub>
 800faac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fab0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800fab4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800fab8:	2e08      	cmp	r6, #8
 800faba:	dc01      	bgt.n	800fac0 <__ieee754_rem_pio2f+0x138>
 800fabc:	6020      	str	r0, [r4, #0]
 800fabe:	e026      	b.n	800fb0e <__ieee754_rem_pio2f+0x186>
 800fac0:	4958      	ldr	r1, [pc, #352]	; (800fc24 <__ieee754_rem_pio2f+0x29c>)
 800fac2:	4648      	mov	r0, r9
 800fac4:	f7f1 f936 	bl	8000d34 <__aeabi_fmul>
 800fac8:	4607      	mov	r7, r0
 800faca:	4601      	mov	r1, r0
 800facc:	4640      	mov	r0, r8
 800face:	f7f1 f827 	bl	8000b20 <__aeabi_fsub>
 800fad2:	4601      	mov	r1, r0
 800fad4:	4606      	mov	r6, r0
 800fad6:	4640      	mov	r0, r8
 800fad8:	f7f1 f822 	bl	8000b20 <__aeabi_fsub>
 800fadc:	4639      	mov	r1, r7
 800fade:	f7f1 f81f 	bl	8000b20 <__aeabi_fsub>
 800fae2:	4607      	mov	r7, r0
 800fae4:	4950      	ldr	r1, [pc, #320]	; (800fc28 <__ieee754_rem_pio2f+0x2a0>)
 800fae6:	4648      	mov	r0, r9
 800fae8:	f7f1 f924 	bl	8000d34 <__aeabi_fmul>
 800faec:	4639      	mov	r1, r7
 800faee:	f7f1 f817 	bl	8000b20 <__aeabi_fsub>
 800faf2:	4601      	mov	r1, r0
 800faf4:	4607      	mov	r7, r0
 800faf6:	4630      	mov	r0, r6
 800faf8:	f7f1 f812 	bl	8000b20 <__aeabi_fsub>
 800fafc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fb00:	ebab 0b03 	sub.w	fp, fp, r3
 800fb04:	f1bb 0f19 	cmp.w	fp, #25
 800fb08:	dc16      	bgt.n	800fb38 <__ieee754_rem_pio2f+0x1b0>
 800fb0a:	46b0      	mov	r8, r6
 800fb0c:	6020      	str	r0, [r4, #0]
 800fb0e:	6826      	ldr	r6, [r4, #0]
 800fb10:	4640      	mov	r0, r8
 800fb12:	4631      	mov	r1, r6
 800fb14:	f7f1 f804 	bl	8000b20 <__aeabi_fsub>
 800fb18:	4639      	mov	r1, r7
 800fb1a:	f7f1 f801 	bl	8000b20 <__aeabi_fsub>
 800fb1e:	f1ba 0f00 	cmp.w	sl, #0
 800fb22:	6060      	str	r0, [r4, #4]
 800fb24:	f6bf af5a 	bge.w	800f9dc <__ieee754_rem_pio2f+0x54>
 800fb28:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800fb2c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fb30:	6026      	str	r6, [r4, #0]
 800fb32:	6060      	str	r0, [r4, #4]
 800fb34:	426d      	negs	r5, r5
 800fb36:	e751      	b.n	800f9dc <__ieee754_rem_pio2f+0x54>
 800fb38:	493f      	ldr	r1, [pc, #252]	; (800fc38 <__ieee754_rem_pio2f+0x2b0>)
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f7f1 f8fa 	bl	8000d34 <__aeabi_fmul>
 800fb40:	4607      	mov	r7, r0
 800fb42:	4601      	mov	r1, r0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7f0 ffeb 	bl	8000b20 <__aeabi_fsub>
 800fb4a:	4601      	mov	r1, r0
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7f0 ffe6 	bl	8000b20 <__aeabi_fsub>
 800fb54:	4639      	mov	r1, r7
 800fb56:	f7f0 ffe3 	bl	8000b20 <__aeabi_fsub>
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	4937      	ldr	r1, [pc, #220]	; (800fc3c <__ieee754_rem_pio2f+0x2b4>)
 800fb5e:	4648      	mov	r0, r9
 800fb60:	f7f1 f8e8 	bl	8000d34 <__aeabi_fmul>
 800fb64:	4631      	mov	r1, r6
 800fb66:	f7f0 ffdb 	bl	8000b20 <__aeabi_fsub>
 800fb6a:	4607      	mov	r7, r0
 800fb6c:	e795      	b.n	800fa9a <__ieee754_rem_pio2f+0x112>
 800fb6e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fb72:	db05      	blt.n	800fb80 <__ieee754_rem_pio2f+0x1f8>
 800fb74:	4601      	mov	r1, r0
 800fb76:	f7f0 ffd3 	bl	8000b20 <__aeabi_fsub>
 800fb7a:	6060      	str	r0, [r4, #4]
 800fb7c:	6020      	str	r0, [r4, #0]
 800fb7e:	e710      	b.n	800f9a2 <__ieee754_rem_pio2f+0x1a>
 800fb80:	15f7      	asrs	r7, r6, #23
 800fb82:	3f86      	subs	r7, #134	; 0x86
 800fb84:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7f1 faaf 	bl	80010ec <__aeabi_f2iz>
 800fb8e:	f7f1 f87d 	bl	8000c8c <__aeabi_i2f>
 800fb92:	4601      	mov	r1, r0
 800fb94:	9003      	str	r0, [sp, #12]
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7f0 ffc2 	bl	8000b20 <__aeabi_fsub>
 800fb9c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fba0:	f7f1 f8c8 	bl	8000d34 <__aeabi_fmul>
 800fba4:	4606      	mov	r6, r0
 800fba6:	f7f1 faa1 	bl	80010ec <__aeabi_f2iz>
 800fbaa:	f7f1 f86f 	bl	8000c8c <__aeabi_i2f>
 800fbae:	4601      	mov	r1, r0
 800fbb0:	9004      	str	r0, [sp, #16]
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7f0 ffb3 	bl	8000b20 <__aeabi_fsub>
 800fbba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fbbe:	f7f1 f8b9 	bl	8000d34 <__aeabi_fmul>
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	9005      	str	r0, [sp, #20]
 800fbc6:	f7f1 fa49 	bl	800105c <__aeabi_fcmpeq>
 800fbca:	b1f0      	cbz	r0, 800fc0a <__ieee754_rem_pio2f+0x282>
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f7f1 fa44 	bl	800105c <__aeabi_fcmpeq>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	bf14      	ite	ne
 800fbd8:	2301      	movne	r3, #1
 800fbda:	2302      	moveq	r3, #2
 800fbdc:	4a18      	ldr	r2, [pc, #96]	; (800fc40 <__ieee754_rem_pio2f+0x2b8>)
 800fbde:	4621      	mov	r1, r4
 800fbe0:	9201      	str	r2, [sp, #4]
 800fbe2:	2202      	movs	r2, #2
 800fbe4:	a803      	add	r0, sp, #12
 800fbe6:	9200      	str	r2, [sp, #0]
 800fbe8:	463a      	mov	r2, r7
 800fbea:	f000 f8fd 	bl	800fde8 <__kernel_rem_pio2f>
 800fbee:	f1ba 0f00 	cmp.w	sl, #0
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	f6bf aef2 	bge.w	800f9dc <__ieee754_rem_pio2f+0x54>
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbfe:	6023      	str	r3, [r4, #0]
 800fc00:	6863      	ldr	r3, [r4, #4]
 800fc02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fc06:	6063      	str	r3, [r4, #4]
 800fc08:	e794      	b.n	800fb34 <__ieee754_rem_pio2f+0x1ac>
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	e7e6      	b.n	800fbdc <__ieee754_rem_pio2f+0x254>
 800fc0e:	bf00      	nop
 800fc10:	3f490fd8 	.word	0x3f490fd8
 800fc14:	4016cbe3 	.word	0x4016cbe3
 800fc18:	3fc90f80 	.word	0x3fc90f80
 800fc1c:	3fc90fd0 	.word	0x3fc90fd0
 800fc20:	37354443 	.word	0x37354443
 800fc24:	37354400 	.word	0x37354400
 800fc28:	2e85a308 	.word	0x2e85a308
 800fc2c:	43490f80 	.word	0x43490f80
 800fc30:	3f22f984 	.word	0x3f22f984
 800fc34:	080123e8 	.word	0x080123e8
 800fc38:	2e85a300 	.word	0x2e85a300
 800fc3c:	248d3132 	.word	0x248d3132
 800fc40:	08012468 	.word	0x08012468

0800fc44 <__ieee754_sqrtf>:
 800fc44:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800fc48:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fc4c:	b570      	push	{r4, r5, r6, lr}
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4604      	mov	r4, r0
 800fc52:	d309      	bcc.n	800fc68 <__ieee754_sqrtf+0x24>
 800fc54:	4601      	mov	r1, r0
 800fc56:	f7f1 f86d 	bl	8000d34 <__aeabi_fmul>
 800fc5a:	4601      	mov	r1, r0
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f7f0 ff61 	bl	8000b24 <__addsf3>
 800fc62:	4604      	mov	r4, r0
 800fc64:	4620      	mov	r0, r4
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	2a00      	cmp	r2, #0
 800fc6a:	d0fb      	beq.n	800fc64 <__ieee754_sqrtf+0x20>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	da06      	bge.n	800fc7e <__ieee754_sqrtf+0x3a>
 800fc70:	4601      	mov	r1, r0
 800fc72:	f7f0 ff55 	bl	8000b20 <__aeabi_fsub>
 800fc76:	4601      	mov	r1, r0
 800fc78:	f7f1 f910 	bl	8000e9c <__aeabi_fdiv>
 800fc7c:	e7f1      	b.n	800fc62 <__ieee754_sqrtf+0x1e>
 800fc7e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800fc82:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800fc86:	d029      	beq.n	800fcdc <__ieee754_sqrtf+0x98>
 800fc88:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800fc8c:	07cb      	lsls	r3, r1, #31
 800fc8e:	f04f 0300 	mov.w	r3, #0
 800fc92:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800fc96:	f04f 0419 	mov.w	r4, #25
 800fc9a:	461e      	mov	r6, r3
 800fc9c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800fca0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800fca4:	bf58      	it	pl
 800fca6:	0052      	lslpl	r2, r2, #1
 800fca8:	1040      	asrs	r0, r0, #1
 800fcaa:	0052      	lsls	r2, r2, #1
 800fcac:	1875      	adds	r5, r6, r1
 800fcae:	4295      	cmp	r5, r2
 800fcb0:	bfde      	ittt	le
 800fcb2:	186e      	addle	r6, r5, r1
 800fcb4:	1b52      	suble	r2, r2, r5
 800fcb6:	185b      	addle	r3, r3, r1
 800fcb8:	3c01      	subs	r4, #1
 800fcba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fcbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fcc2:	d1f3      	bne.n	800fcac <__ieee754_sqrtf+0x68>
 800fcc4:	b112      	cbz	r2, 800fccc <__ieee754_sqrtf+0x88>
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	f023 0301 	bic.w	r3, r3, #1
 800fccc:	105c      	asrs	r4, r3, #1
 800fcce:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800fcd2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800fcd6:	e7c5      	b.n	800fc64 <__ieee754_sqrtf+0x20>
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	3201      	adds	r2, #1
 800fcdc:	0218      	lsls	r0, r3, #8
 800fcde:	d5fb      	bpl.n	800fcd8 <__ieee754_sqrtf+0x94>
 800fce0:	3a01      	subs	r2, #1
 800fce2:	1a89      	subs	r1, r1, r2
 800fce4:	e7d0      	b.n	800fc88 <__ieee754_sqrtf+0x44>
	...

0800fce8 <__kernel_cosf>:
 800fce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800fcf0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800fcf4:	4606      	mov	r6, r0
 800fcf6:	4688      	mov	r8, r1
 800fcf8:	da03      	bge.n	800fd02 <__kernel_cosf+0x1a>
 800fcfa:	f7f1 f9f7 	bl	80010ec <__aeabi_f2iz>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d05c      	beq.n	800fdbc <__kernel_cosf+0xd4>
 800fd02:	4631      	mov	r1, r6
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7f1 f815 	bl	8000d34 <__aeabi_fmul>
 800fd0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fd0e:	4605      	mov	r5, r0
 800fd10:	f7f1 f810 	bl	8000d34 <__aeabi_fmul>
 800fd14:	492b      	ldr	r1, [pc, #172]	; (800fdc4 <__kernel_cosf+0xdc>)
 800fd16:	4607      	mov	r7, r0
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f7f1 f80b 	bl	8000d34 <__aeabi_fmul>
 800fd1e:	492a      	ldr	r1, [pc, #168]	; (800fdc8 <__kernel_cosf+0xe0>)
 800fd20:	f7f0 ff00 	bl	8000b24 <__addsf3>
 800fd24:	4629      	mov	r1, r5
 800fd26:	f7f1 f805 	bl	8000d34 <__aeabi_fmul>
 800fd2a:	4928      	ldr	r1, [pc, #160]	; (800fdcc <__kernel_cosf+0xe4>)
 800fd2c:	f7f0 fef8 	bl	8000b20 <__aeabi_fsub>
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 ffff 	bl	8000d34 <__aeabi_fmul>
 800fd36:	4926      	ldr	r1, [pc, #152]	; (800fdd0 <__kernel_cosf+0xe8>)
 800fd38:	f7f0 fef4 	bl	8000b24 <__addsf3>
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	f7f0 fff9 	bl	8000d34 <__aeabi_fmul>
 800fd42:	4924      	ldr	r1, [pc, #144]	; (800fdd4 <__kernel_cosf+0xec>)
 800fd44:	f7f0 feec 	bl	8000b20 <__aeabi_fsub>
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7f0 fff3 	bl	8000d34 <__aeabi_fmul>
 800fd4e:	4922      	ldr	r1, [pc, #136]	; (800fdd8 <__kernel_cosf+0xf0>)
 800fd50:	f7f0 fee8 	bl	8000b24 <__addsf3>
 800fd54:	4629      	mov	r1, r5
 800fd56:	f7f0 ffed 	bl	8000d34 <__aeabi_fmul>
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	f7f0 ffea 	bl	8000d34 <__aeabi_fmul>
 800fd60:	4641      	mov	r1, r8
 800fd62:	4605      	mov	r5, r0
 800fd64:	4630      	mov	r0, r6
 800fd66:	f7f0 ffe5 	bl	8000d34 <__aeabi_fmul>
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f7f0 fed7 	bl	8000b20 <__aeabi_fsub>
 800fd72:	4b1a      	ldr	r3, [pc, #104]	; (800fddc <__kernel_cosf+0xf4>)
 800fd74:	4605      	mov	r5, r0
 800fd76:	429c      	cmp	r4, r3
 800fd78:	dc0a      	bgt.n	800fd90 <__kernel_cosf+0xa8>
 800fd7a:	4601      	mov	r1, r0
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f7f0 fecf 	bl	8000b20 <__aeabi_fsub>
 800fd82:	4601      	mov	r1, r0
 800fd84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fd88:	f7f0 feca 	bl	8000b20 <__aeabi_fsub>
 800fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd90:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <__kernel_cosf+0xf8>)
 800fd92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fd96:	429c      	cmp	r4, r3
 800fd98:	bfcc      	ite	gt
 800fd9a:	4c12      	ldrgt	r4, [pc, #72]	; (800fde4 <__kernel_cosf+0xfc>)
 800fd9c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800fda0:	4621      	mov	r1, r4
 800fda2:	f7f0 febd 	bl	8000b20 <__aeabi_fsub>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4606      	mov	r6, r0
 800fdaa:	4638      	mov	r0, r7
 800fdac:	f7f0 feb8 	bl	8000b20 <__aeabi_fsub>
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	f7f0 feb5 	bl	8000b20 <__aeabi_fsub>
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	4630      	mov	r0, r6
 800fdba:	e7e5      	b.n	800fd88 <__kernel_cosf+0xa0>
 800fdbc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fdc0:	e7e4      	b.n	800fd8c <__kernel_cosf+0xa4>
 800fdc2:	bf00      	nop
 800fdc4:	ad47d74e 	.word	0xad47d74e
 800fdc8:	310f74f6 	.word	0x310f74f6
 800fdcc:	3493f27c 	.word	0x3493f27c
 800fdd0:	37d00d01 	.word	0x37d00d01
 800fdd4:	3ab60b61 	.word	0x3ab60b61
 800fdd8:	3d2aaaab 	.word	0x3d2aaaab
 800fddc:	3e999999 	.word	0x3e999999
 800fde0:	3f480000 	.word	0x3f480000
 800fde4:	3e900000 	.word	0x3e900000

0800fde8 <__kernel_rem_pio2f>:
 800fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdec:	b0db      	sub	sp, #364	; 0x16c
 800fdee:	9202      	str	r2, [sp, #8]
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800fdf4:	4bc5      	ldr	r3, [pc, #788]	; (801010c <__kernel_rem_pio2f+0x324>)
 800fdf6:	9005      	str	r0, [sp, #20]
 800fdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdfc:	9100      	str	r1, [sp, #0]
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	9b04      	ldr	r3, [sp, #16]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	9303      	str	r3, [sp, #12]
 800fe06:	9b02      	ldr	r3, [sp, #8]
 800fe08:	1d1a      	adds	r2, r3, #4
 800fe0a:	f2c0 809b 	blt.w	800ff44 <__kernel_rem_pio2f+0x15c>
 800fe0e:	1edc      	subs	r4, r3, #3
 800fe10:	bf48      	it	mi
 800fe12:	1d1c      	addmi	r4, r3, #4
 800fe14:	10e4      	asrs	r4, r4, #3
 800fe16:	2500      	movs	r5, #0
 800fe18:	f04f 0a00 	mov.w	sl, #0
 800fe1c:	1c67      	adds	r7, r4, #1
 800fe1e:	00fb      	lsls	r3, r7, #3
 800fe20:	9306      	str	r3, [sp, #24]
 800fe22:	9b02      	ldr	r3, [sp, #8]
 800fe24:	9a03      	ldr	r2, [sp, #12]
 800fe26:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	1aa6      	subs	r6, r4, r2
 800fe2e:	eb03 0802 	add.w	r8, r3, r2
 800fe32:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800fe34:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800fe38:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800fe3c:	4545      	cmp	r5, r8
 800fe3e:	f340 8083 	ble.w	800ff48 <__kernel_rem_pio2f+0x160>
 800fe42:	f04f 0800 	mov.w	r8, #0
 800fe46:	f04f 0b00 	mov.w	fp, #0
 800fe4a:	9b04      	ldr	r3, [sp, #16]
 800fe4c:	aa1e      	add	r2, sp, #120	; 0x78
 800fe4e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fe52:	ab46      	add	r3, sp, #280	; 0x118
 800fe54:	9a01      	ldr	r2, [sp, #4]
 800fe56:	4590      	cmp	r8, r2
 800fe58:	f340 809c 	ble.w	800ff94 <__kernel_rem_pio2f+0x1ac>
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	aa0a      	add	r2, sp, #40	; 0x28
 800fe60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe64:	9308      	str	r3, [sp, #32]
 800fe66:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800fe68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fe6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fe70:	9307      	str	r3, [sp, #28]
 800fe72:	ad0a      	add	r5, sp, #40	; 0x28
 800fe74:	462e      	mov	r6, r5
 800fe76:	46c3      	mov	fp, r8
 800fe78:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800fe7c:	ab5a      	add	r3, sp, #360	; 0x168
 800fe7e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800fe82:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800fe86:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800fe8a:	f1bb 0f00 	cmp.w	fp, #0
 800fe8e:	f300 8086 	bgt.w	800ff9e <__kernel_rem_pio2f+0x1b6>
 800fe92:	4639      	mov	r1, r7
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 fc3b 	bl	8010710 <scalbnf>
 800fe9a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800fe9e:	4604      	mov	r4, r0
 800fea0:	f7f0 ff48 	bl	8000d34 <__aeabi_fmul>
 800fea4:	f000 fbee 	bl	8010684 <floorf>
 800fea8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800feac:	f7f0 ff42 	bl	8000d34 <__aeabi_fmul>
 800feb0:	4601      	mov	r1, r0
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7f0 fe34 	bl	8000b20 <__aeabi_fsub>
 800feb8:	4604      	mov	r4, r0
 800feba:	f7f1 f917 	bl	80010ec <__aeabi_f2iz>
 800febe:	4606      	mov	r6, r0
 800fec0:	f7f0 fee4 	bl	8000c8c <__aeabi_i2f>
 800fec4:	4601      	mov	r1, r0
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7f0 fe2a 	bl	8000b20 <__aeabi_fsub>
 800fecc:	2f00      	cmp	r7, #0
 800fece:	4681      	mov	r9, r0
 800fed0:	f340 8084 	ble.w	800ffdc <__kernel_rem_pio2f+0x1f4>
 800fed4:	f108 32ff 	add.w	r2, r8, #4294967295
 800fed8:	ab0a      	add	r3, sp, #40	; 0x28
 800feda:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800fede:	f1c7 0108 	rsb	r1, r7, #8
 800fee2:	fa44 f301 	asr.w	r3, r4, r1
 800fee6:	441e      	add	r6, r3
 800fee8:	408b      	lsls	r3, r1
 800feea:	1ae4      	subs	r4, r4, r3
 800feec:	f1c7 0007 	rsb	r0, r7, #7
 800fef0:	ab0a      	add	r3, sp, #40	; 0x28
 800fef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fef6:	4104      	asrs	r4, r0
 800fef8:	2c00      	cmp	r4, #0
 800fefa:	dd7e      	ble.n	800fffa <__kernel_rem_pio2f+0x212>
 800fefc:	2200      	movs	r2, #0
 800fefe:	4692      	mov	sl, r2
 800ff00:	3601      	adds	r6, #1
 800ff02:	4590      	cmp	r8, r2
 800ff04:	f300 80b0 	bgt.w	8010068 <__kernel_rem_pio2f+0x280>
 800ff08:	2f00      	cmp	r7, #0
 800ff0a:	dd05      	ble.n	800ff18 <__kernel_rem_pio2f+0x130>
 800ff0c:	2f01      	cmp	r7, #1
 800ff0e:	f000 80bd 	beq.w	801008c <__kernel_rem_pio2f+0x2a4>
 800ff12:	2f02      	cmp	r7, #2
 800ff14:	f000 80c5 	beq.w	80100a2 <__kernel_rem_pio2f+0x2ba>
 800ff18:	2c02      	cmp	r4, #2
 800ff1a:	d16e      	bne.n	800fffa <__kernel_rem_pio2f+0x212>
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ff22:	f7f0 fdfd 	bl	8000b20 <__aeabi_fsub>
 800ff26:	4681      	mov	r9, r0
 800ff28:	f1ba 0f00 	cmp.w	sl, #0
 800ff2c:	d065      	beq.n	800fffa <__kernel_rem_pio2f+0x212>
 800ff2e:	4639      	mov	r1, r7
 800ff30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ff34:	f000 fbec 	bl	8010710 <scalbnf>
 800ff38:	4601      	mov	r1, r0
 800ff3a:	4648      	mov	r0, r9
 800ff3c:	f7f0 fdf0 	bl	8000b20 <__aeabi_fsub>
 800ff40:	4681      	mov	r9, r0
 800ff42:	e05a      	b.n	800fffa <__kernel_rem_pio2f+0x212>
 800ff44:	2400      	movs	r4, #0
 800ff46:	e766      	b.n	800fe16 <__kernel_rem_pio2f+0x2e>
 800ff48:	42ee      	cmn	r6, r5
 800ff4a:	d407      	bmi.n	800ff5c <__kernel_rem_pio2f+0x174>
 800ff4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ff50:	f7f0 fe9c 	bl	8000c8c <__aeabi_i2f>
 800ff54:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800ff58:	3501      	adds	r5, #1
 800ff5a:	e76f      	b.n	800fe3c <__kernel_rem_pio2f+0x54>
 800ff5c:	4650      	mov	r0, sl
 800ff5e:	e7f9      	b.n	800ff54 <__kernel_rem_pio2f+0x16c>
 800ff60:	9b05      	ldr	r3, [sp, #20]
 800ff62:	f8da 1000 	ldr.w	r1, [sl]
 800ff66:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800ff6a:	f7f0 fee3 	bl	8000d34 <__aeabi_fmul>
 800ff6e:	4601      	mov	r1, r0
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7f0 fdd7 	bl	8000b24 <__addsf3>
 800ff76:	4606      	mov	r6, r0
 800ff78:	f109 0901 	add.w	r9, r9, #1
 800ff7c:	ab46      	add	r3, sp, #280	; 0x118
 800ff7e:	9a03      	ldr	r2, [sp, #12]
 800ff80:	f1aa 0a04 	sub.w	sl, sl, #4
 800ff84:	4591      	cmp	r9, r2
 800ff86:	ddeb      	ble.n	800ff60 <__kernel_rem_pio2f+0x178>
 800ff88:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ff8c:	3504      	adds	r5, #4
 800ff8e:	f108 0801 	add.w	r8, r8, #1
 800ff92:	e75f      	b.n	800fe54 <__kernel_rem_pio2f+0x6c>
 800ff94:	46aa      	mov	sl, r5
 800ff96:	465e      	mov	r6, fp
 800ff98:	f04f 0900 	mov.w	r9, #0
 800ff9c:	e7ef      	b.n	800ff7e <__kernel_rem_pio2f+0x196>
 800ff9e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7f0 fec6 	bl	8000d34 <__aeabi_fmul>
 800ffa8:	f7f1 f8a0 	bl	80010ec <__aeabi_f2iz>
 800ffac:	f7f0 fe6e 	bl	8000c8c <__aeabi_i2f>
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	9009      	str	r0, [sp, #36]	; 0x24
 800ffb4:	f7f0 febe 	bl	8000d34 <__aeabi_fmul>
 800ffb8:	4601      	mov	r1, r0
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f7f0 fdb0 	bl	8000b20 <__aeabi_fsub>
 800ffc0:	f7f1 f894 	bl	80010ec <__aeabi_f2iz>
 800ffc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ffca:	f846 0b04 	str.w	r0, [r6], #4
 800ffce:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7f0 fda6 	bl	8000b24 <__addsf3>
 800ffd8:	4604      	mov	r4, r0
 800ffda:	e756      	b.n	800fe8a <__kernel_rem_pio2f+0xa2>
 800ffdc:	d106      	bne.n	800ffec <__kernel_rem_pio2f+0x204>
 800ffde:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffe2:	aa0a      	add	r2, sp, #40	; 0x28
 800ffe4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ffe8:	1224      	asrs	r4, r4, #8
 800ffea:	e785      	b.n	800fef8 <__kernel_rem_pio2f+0x110>
 800ffec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fff0:	f7f1 f852 	bl	8001098 <__aeabi_fcmpge>
 800fff4:	4604      	mov	r4, r0
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d134      	bne.n	8010064 <__kernel_rem_pio2f+0x27c>
 800fffa:	2100      	movs	r1, #0
 800fffc:	4648      	mov	r0, r9
 800fffe:	f7f1 f82d 	bl	800105c <__aeabi_fcmpeq>
 8010002:	2800      	cmp	r0, #0
 8010004:	f000 809a 	beq.w	801013c <__kernel_rem_pio2f+0x354>
 8010008:	f108 35ff 	add.w	r5, r8, #4294967295
 801000c:	462b      	mov	r3, r5
 801000e:	2200      	movs	r2, #0
 8010010:	9901      	ldr	r1, [sp, #4]
 8010012:	428b      	cmp	r3, r1
 8010014:	da4d      	bge.n	80100b2 <__kernel_rem_pio2f+0x2ca>
 8010016:	2a00      	cmp	r2, #0
 8010018:	d07c      	beq.n	8010114 <__kernel_rem_pio2f+0x32c>
 801001a:	ab0a      	add	r3, sp, #40	; 0x28
 801001c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010020:	3f08      	subs	r7, #8
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 8088 	beq.w	8010138 <__kernel_rem_pio2f+0x350>
 8010028:	4639      	mov	r1, r7
 801002a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801002e:	f000 fb6f 	bl	8010710 <scalbnf>
 8010032:	46aa      	mov	sl, r5
 8010034:	4681      	mov	r9, r0
 8010036:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 801003a:	af46      	add	r7, sp, #280	; 0x118
 801003c:	f1ba 0f00 	cmp.w	sl, #0
 8010040:	f280 80b1 	bge.w	80101a6 <__kernel_rem_pio2f+0x3be>
 8010044:	46a9      	mov	r9, r5
 8010046:	f04f 0a00 	mov.w	sl, #0
 801004a:	2200      	movs	r2, #0
 801004c:	f1b9 0f00 	cmp.w	r9, #0
 8010050:	f2c0 80db 	blt.w	801020a <__kernel_rem_pio2f+0x422>
 8010054:	a946      	add	r1, sp, #280	; 0x118
 8010056:	4617      	mov	r7, r2
 8010058:	f04f 0800 	mov.w	r8, #0
 801005c:	4b2c      	ldr	r3, [pc, #176]	; (8010110 <__kernel_rem_pio2f+0x328>)
 801005e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8010062:	e0c3      	b.n	80101ec <__kernel_rem_pio2f+0x404>
 8010064:	2402      	movs	r4, #2
 8010066:	e749      	b.n	800fefc <__kernel_rem_pio2f+0x114>
 8010068:	682b      	ldr	r3, [r5, #0]
 801006a:	f1ba 0f00 	cmp.w	sl, #0
 801006e:	d108      	bne.n	8010082 <__kernel_rem_pio2f+0x29a>
 8010070:	b11b      	cbz	r3, 801007a <__kernel_rem_pio2f+0x292>
 8010072:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8010076:	602b      	str	r3, [r5, #0]
 8010078:	2301      	movs	r3, #1
 801007a:	469a      	mov	sl, r3
 801007c:	3201      	adds	r2, #1
 801007e:	3504      	adds	r5, #4
 8010080:	e73f      	b.n	800ff02 <__kernel_rem_pio2f+0x11a>
 8010082:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010086:	602b      	str	r3, [r5, #0]
 8010088:	4653      	mov	r3, sl
 801008a:	e7f6      	b.n	801007a <__kernel_rem_pio2f+0x292>
 801008c:	f108 32ff 	add.w	r2, r8, #4294967295
 8010090:	ab0a      	add	r3, sp, #40	; 0x28
 8010092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801009a:	a90a      	add	r1, sp, #40	; 0x28
 801009c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80100a0:	e73a      	b.n	800ff18 <__kernel_rem_pio2f+0x130>
 80100a2:	f108 32ff 	add.w	r2, r8, #4294967295
 80100a6:	ab0a      	add	r3, sp, #40	; 0x28
 80100a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100b0:	e7f3      	b.n	801009a <__kernel_rem_pio2f+0x2b2>
 80100b2:	a90a      	add	r1, sp, #40	; 0x28
 80100b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	430a      	orrs	r2, r1
 80100bc:	e7a8      	b.n	8010010 <__kernel_rem_pio2f+0x228>
 80100be:	3301      	adds	r3, #1
 80100c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80100c4:	2900      	cmp	r1, #0
 80100c6:	d0fa      	beq.n	80100be <__kernel_rem_pio2f+0x2d6>
 80100c8:	9a04      	ldr	r2, [sp, #16]
 80100ca:	f108 0501 	add.w	r5, r8, #1
 80100ce:	eb08 0402 	add.w	r4, r8, r2
 80100d2:	aa1e      	add	r2, sp, #120	; 0x78
 80100d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80100d8:	4498      	add	r8, r3
 80100da:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80100de:	45a8      	cmp	r8, r5
 80100e0:	f6ff aec7 	blt.w	800fe72 <__kernel_rem_pio2f+0x8a>
 80100e4:	9b07      	ldr	r3, [sp, #28]
 80100e6:	46a3      	mov	fp, r4
 80100e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100ec:	f7f0 fdce 	bl	8000c8c <__aeabi_i2f>
 80100f0:	f04f 0a00 	mov.w	sl, #0
 80100f4:	2600      	movs	r6, #0
 80100f6:	f84b 0b04 	str.w	r0, [fp], #4
 80100fa:	9b03      	ldr	r3, [sp, #12]
 80100fc:	459a      	cmp	sl, r3
 80100fe:	dd0c      	ble.n	801011a <__kernel_rem_pio2f+0x332>
 8010100:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8010104:	465c      	mov	r4, fp
 8010106:	3501      	adds	r5, #1
 8010108:	e7e9      	b.n	80100de <__kernel_rem_pio2f+0x2f6>
 801010a:	bf00      	nop
 801010c:	080127ac 	.word	0x080127ac
 8010110:	08012780 	.word	0x08012780
 8010114:	2301      	movs	r3, #1
 8010116:	9a08      	ldr	r2, [sp, #32]
 8010118:	e7d2      	b.n	80100c0 <__kernel_rem_pio2f+0x2d8>
 801011a:	9b05      	ldr	r3, [sp, #20]
 801011c:	f854 0904 	ldr.w	r0, [r4], #-4
 8010120:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8010124:	f7f0 fe06 	bl	8000d34 <__aeabi_fmul>
 8010128:	4601      	mov	r1, r0
 801012a:	4630      	mov	r0, r6
 801012c:	f7f0 fcfa 	bl	8000b24 <__addsf3>
 8010130:	f10a 0a01 	add.w	sl, sl, #1
 8010134:	4606      	mov	r6, r0
 8010136:	e7e0      	b.n	80100fa <__kernel_rem_pio2f+0x312>
 8010138:	3d01      	subs	r5, #1
 801013a:	e76e      	b.n	801001a <__kernel_rem_pio2f+0x232>
 801013c:	9b06      	ldr	r3, [sp, #24]
 801013e:	9a02      	ldr	r2, [sp, #8]
 8010140:	4648      	mov	r0, r9
 8010142:	1a99      	subs	r1, r3, r2
 8010144:	f000 fae4 	bl	8010710 <scalbnf>
 8010148:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801014c:	4605      	mov	r5, r0
 801014e:	f7f0 ffa3 	bl	8001098 <__aeabi_fcmpge>
 8010152:	b300      	cbz	r0, 8010196 <__kernel_rem_pio2f+0x3ae>
 8010154:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8010158:	4628      	mov	r0, r5
 801015a:	f7f0 fdeb 	bl	8000d34 <__aeabi_fmul>
 801015e:	f7f0 ffc5 	bl	80010ec <__aeabi_f2iz>
 8010162:	f7f0 fd93 	bl	8000c8c <__aeabi_i2f>
 8010166:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801016a:	4681      	mov	r9, r0
 801016c:	f7f0 fde2 	bl	8000d34 <__aeabi_fmul>
 8010170:	4601      	mov	r1, r0
 8010172:	4628      	mov	r0, r5
 8010174:	f7f0 fcd4 	bl	8000b20 <__aeabi_fsub>
 8010178:	f7f0 ffb8 	bl	80010ec <__aeabi_f2iz>
 801017c:	ab0a      	add	r3, sp, #40	; 0x28
 801017e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010182:	4648      	mov	r0, r9
 8010184:	f7f0 ffb2 	bl	80010ec <__aeabi_f2iz>
 8010188:	f108 0501 	add.w	r5, r8, #1
 801018c:	ab0a      	add	r3, sp, #40	; 0x28
 801018e:	3708      	adds	r7, #8
 8010190:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010194:	e748      	b.n	8010028 <__kernel_rem_pio2f+0x240>
 8010196:	4628      	mov	r0, r5
 8010198:	f7f0 ffa8 	bl	80010ec <__aeabi_f2iz>
 801019c:	ab0a      	add	r3, sp, #40	; 0x28
 801019e:	4645      	mov	r5, r8
 80101a0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80101a4:	e740      	b.n	8010028 <__kernel_rem_pio2f+0x240>
 80101a6:	ab0a      	add	r3, sp, #40	; 0x28
 80101a8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80101ac:	f7f0 fd6e 	bl	8000c8c <__aeabi_i2f>
 80101b0:	4649      	mov	r1, r9
 80101b2:	f7f0 fdbf 	bl	8000d34 <__aeabi_fmul>
 80101b6:	4641      	mov	r1, r8
 80101b8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80101bc:	4648      	mov	r0, r9
 80101be:	f7f0 fdb9 	bl	8000d34 <__aeabi_fmul>
 80101c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101c6:	4681      	mov	r9, r0
 80101c8:	e738      	b.n	801003c <__kernel_rem_pio2f+0x254>
 80101ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80101ce:	f85b 1b04 	ldr.w	r1, [fp], #4
 80101d2:	9203      	str	r2, [sp, #12]
 80101d4:	9302      	str	r3, [sp, #8]
 80101d6:	f7f0 fdad 	bl	8000d34 <__aeabi_fmul>
 80101da:	4601      	mov	r1, r0
 80101dc:	4638      	mov	r0, r7
 80101de:	f7f0 fca1 	bl	8000b24 <__addsf3>
 80101e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80101e6:	4607      	mov	r7, r0
 80101e8:	f108 0801 	add.w	r8, r8, #1
 80101ec:	9901      	ldr	r1, [sp, #4]
 80101ee:	4588      	cmp	r8, r1
 80101f0:	dc01      	bgt.n	80101f6 <__kernel_rem_pio2f+0x40e>
 80101f2:	45c2      	cmp	sl, r8
 80101f4:	dae9      	bge.n	80101ca <__kernel_rem_pio2f+0x3e2>
 80101f6:	ab5a      	add	r3, sp, #360	; 0x168
 80101f8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80101fc:	f843 7ca0 	str.w	r7, [r3, #-160]
 8010200:	f109 39ff 	add.w	r9, r9, #4294967295
 8010204:	f10a 0a01 	add.w	sl, sl, #1
 8010208:	e720      	b.n	801004c <__kernel_rem_pio2f+0x264>
 801020a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801020c:	2b02      	cmp	r3, #2
 801020e:	dc07      	bgt.n	8010220 <__kernel_rem_pio2f+0x438>
 8010210:	2b00      	cmp	r3, #0
 8010212:	dc4d      	bgt.n	80102b0 <__kernel_rem_pio2f+0x4c8>
 8010214:	d02e      	beq.n	8010274 <__kernel_rem_pio2f+0x48c>
 8010216:	f006 0007 	and.w	r0, r6, #7
 801021a:	b05b      	add	sp, #364	; 0x16c
 801021c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010220:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010222:	2b03      	cmp	r3, #3
 8010224:	d1f7      	bne.n	8010216 <__kernel_rem_pio2f+0x42e>
 8010226:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 801022a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 801022e:	46b8      	mov	r8, r7
 8010230:	46aa      	mov	sl, r5
 8010232:	f1ba 0f00 	cmp.w	sl, #0
 8010236:	dc48      	bgt.n	80102ca <__kernel_rem_pio2f+0x4e2>
 8010238:	46a9      	mov	r9, r5
 801023a:	f1b9 0f01 	cmp.w	r9, #1
 801023e:	dc5f      	bgt.n	8010300 <__kernel_rem_pio2f+0x518>
 8010240:	2000      	movs	r0, #0
 8010242:	2d01      	cmp	r5, #1
 8010244:	dc75      	bgt.n	8010332 <__kernel_rem_pio2f+0x54a>
 8010246:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8010248:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801024a:	2c00      	cmp	r4, #0
 801024c:	d177      	bne.n	801033e <__kernel_rem_pio2f+0x556>
 801024e:	9900      	ldr	r1, [sp, #0]
 8010250:	600a      	str	r2, [r1, #0]
 8010252:	460a      	mov	r2, r1
 8010254:	604b      	str	r3, [r1, #4]
 8010256:	6090      	str	r0, [r2, #8]
 8010258:	e7dd      	b.n	8010216 <__kernel_rem_pio2f+0x42e>
 801025a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 801025e:	f7f0 fc61 	bl	8000b24 <__addsf3>
 8010262:	3d01      	subs	r5, #1
 8010264:	2d00      	cmp	r5, #0
 8010266:	daf8      	bge.n	801025a <__kernel_rem_pio2f+0x472>
 8010268:	b10c      	cbz	r4, 801026e <__kernel_rem_pio2f+0x486>
 801026a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801026e:	9b00      	ldr	r3, [sp, #0]
 8010270:	6018      	str	r0, [r3, #0]
 8010272:	e7d0      	b.n	8010216 <__kernel_rem_pio2f+0x42e>
 8010274:	2000      	movs	r0, #0
 8010276:	af32      	add	r7, sp, #200	; 0xc8
 8010278:	e7f4      	b.n	8010264 <__kernel_rem_pio2f+0x47c>
 801027a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 801027e:	f7f0 fc51 	bl	8000b24 <__addsf3>
 8010282:	3f01      	subs	r7, #1
 8010284:	2f00      	cmp	r7, #0
 8010286:	daf8      	bge.n	801027a <__kernel_rem_pio2f+0x492>
 8010288:	b1bc      	cbz	r4, 80102ba <__kernel_rem_pio2f+0x4d2>
 801028a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 801028e:	9a00      	ldr	r2, [sp, #0]
 8010290:	4601      	mov	r1, r0
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8010296:	f7f0 fc43 	bl	8000b20 <__aeabi_fsub>
 801029a:	2701      	movs	r7, #1
 801029c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80102a0:	42bd      	cmp	r5, r7
 80102a2:	da0c      	bge.n	80102be <__kernel_rem_pio2f+0x4d6>
 80102a4:	b10c      	cbz	r4, 80102aa <__kernel_rem_pio2f+0x4c2>
 80102a6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80102aa:	9b00      	ldr	r3, [sp, #0]
 80102ac:	6058      	str	r0, [r3, #4]
 80102ae:	e7b2      	b.n	8010216 <__kernel_rem_pio2f+0x42e>
 80102b0:	462f      	mov	r7, r5
 80102b2:	2000      	movs	r0, #0
 80102b4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80102b8:	e7e4      	b.n	8010284 <__kernel_rem_pio2f+0x49c>
 80102ba:	4603      	mov	r3, r0
 80102bc:	e7e7      	b.n	801028e <__kernel_rem_pio2f+0x4a6>
 80102be:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80102c2:	f7f0 fc2f 	bl	8000b24 <__addsf3>
 80102c6:	3701      	adds	r7, #1
 80102c8:	e7ea      	b.n	80102a0 <__kernel_rem_pio2f+0x4b8>
 80102ca:	f8d8 3000 	ldr.w	r3, [r8]
 80102ce:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80102d2:	4619      	mov	r1, r3
 80102d4:	4610      	mov	r0, r2
 80102d6:	9302      	str	r3, [sp, #8]
 80102d8:	9201      	str	r2, [sp, #4]
 80102da:	f7f0 fc23 	bl	8000b24 <__addsf3>
 80102de:	9a01      	ldr	r2, [sp, #4]
 80102e0:	4601      	mov	r1, r0
 80102e2:	4681      	mov	r9, r0
 80102e4:	4610      	mov	r0, r2
 80102e6:	f7f0 fc1b 	bl	8000b20 <__aeabi_fsub>
 80102ea:	9b02      	ldr	r3, [sp, #8]
 80102ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102f0:	4619      	mov	r1, r3
 80102f2:	f7f0 fc17 	bl	8000b24 <__addsf3>
 80102f6:	f848 0904 	str.w	r0, [r8], #-4
 80102fa:	f8c8 9000 	str.w	r9, [r8]
 80102fe:	e798      	b.n	8010232 <__kernel_rem_pio2f+0x44a>
 8010300:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010304:	f8d7 a000 	ldr.w	sl, [r7]
 8010308:	4618      	mov	r0, r3
 801030a:	4651      	mov	r1, sl
 801030c:	9301      	str	r3, [sp, #4]
 801030e:	f7f0 fc09 	bl	8000b24 <__addsf3>
 8010312:	9b01      	ldr	r3, [sp, #4]
 8010314:	4601      	mov	r1, r0
 8010316:	4680      	mov	r8, r0
 8010318:	4618      	mov	r0, r3
 801031a:	f7f0 fc01 	bl	8000b20 <__aeabi_fsub>
 801031e:	4651      	mov	r1, sl
 8010320:	f7f0 fc00 	bl	8000b24 <__addsf3>
 8010324:	f847 0904 	str.w	r0, [r7], #-4
 8010328:	f109 39ff 	add.w	r9, r9, #4294967295
 801032c:	f8c7 8000 	str.w	r8, [r7]
 8010330:	e783      	b.n	801023a <__kernel_rem_pio2f+0x452>
 8010332:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8010336:	f7f0 fbf5 	bl	8000b24 <__addsf3>
 801033a:	3d01      	subs	r5, #1
 801033c:	e781      	b.n	8010242 <__kernel_rem_pio2f+0x45a>
 801033e:	9900      	ldr	r1, [sp, #0]
 8010340:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8010344:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010348:	600a      	str	r2, [r1, #0]
 801034a:	604b      	str	r3, [r1, #4]
 801034c:	460a      	mov	r2, r1
 801034e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010352:	e780      	b.n	8010256 <__kernel_rem_pio2f+0x46e>

08010354 <__kernel_sinf>:
 8010354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010358:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801035c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010360:	4604      	mov	r4, r0
 8010362:	460f      	mov	r7, r1
 8010364:	4691      	mov	r9, r2
 8010366:	da03      	bge.n	8010370 <__kernel_sinf+0x1c>
 8010368:	f7f0 fec0 	bl	80010ec <__aeabi_f2iz>
 801036c:	2800      	cmp	r0, #0
 801036e:	d035      	beq.n	80103dc <__kernel_sinf+0x88>
 8010370:	4621      	mov	r1, r4
 8010372:	4620      	mov	r0, r4
 8010374:	f7f0 fcde 	bl	8000d34 <__aeabi_fmul>
 8010378:	4605      	mov	r5, r0
 801037a:	4601      	mov	r1, r0
 801037c:	4620      	mov	r0, r4
 801037e:	f7f0 fcd9 	bl	8000d34 <__aeabi_fmul>
 8010382:	4929      	ldr	r1, [pc, #164]	; (8010428 <__kernel_sinf+0xd4>)
 8010384:	4606      	mov	r6, r0
 8010386:	4628      	mov	r0, r5
 8010388:	f7f0 fcd4 	bl	8000d34 <__aeabi_fmul>
 801038c:	4927      	ldr	r1, [pc, #156]	; (801042c <__kernel_sinf+0xd8>)
 801038e:	f7f0 fbc7 	bl	8000b20 <__aeabi_fsub>
 8010392:	4629      	mov	r1, r5
 8010394:	f7f0 fcce 	bl	8000d34 <__aeabi_fmul>
 8010398:	4925      	ldr	r1, [pc, #148]	; (8010430 <__kernel_sinf+0xdc>)
 801039a:	f7f0 fbc3 	bl	8000b24 <__addsf3>
 801039e:	4629      	mov	r1, r5
 80103a0:	f7f0 fcc8 	bl	8000d34 <__aeabi_fmul>
 80103a4:	4923      	ldr	r1, [pc, #140]	; (8010434 <__kernel_sinf+0xe0>)
 80103a6:	f7f0 fbbb 	bl	8000b20 <__aeabi_fsub>
 80103aa:	4629      	mov	r1, r5
 80103ac:	f7f0 fcc2 	bl	8000d34 <__aeabi_fmul>
 80103b0:	4921      	ldr	r1, [pc, #132]	; (8010438 <__kernel_sinf+0xe4>)
 80103b2:	f7f0 fbb7 	bl	8000b24 <__addsf3>
 80103b6:	4680      	mov	r8, r0
 80103b8:	f1b9 0f00 	cmp.w	r9, #0
 80103bc:	d111      	bne.n	80103e2 <__kernel_sinf+0x8e>
 80103be:	4601      	mov	r1, r0
 80103c0:	4628      	mov	r0, r5
 80103c2:	f7f0 fcb7 	bl	8000d34 <__aeabi_fmul>
 80103c6:	491d      	ldr	r1, [pc, #116]	; (801043c <__kernel_sinf+0xe8>)
 80103c8:	f7f0 fbaa 	bl	8000b20 <__aeabi_fsub>
 80103cc:	4631      	mov	r1, r6
 80103ce:	f7f0 fcb1 	bl	8000d34 <__aeabi_fmul>
 80103d2:	4601      	mov	r1, r0
 80103d4:	4620      	mov	r0, r4
 80103d6:	f7f0 fba5 	bl	8000b24 <__addsf3>
 80103da:	4604      	mov	r4, r0
 80103dc:	4620      	mov	r0, r4
 80103de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80103e6:	4638      	mov	r0, r7
 80103e8:	f7f0 fca4 	bl	8000d34 <__aeabi_fmul>
 80103ec:	4641      	mov	r1, r8
 80103ee:	4681      	mov	r9, r0
 80103f0:	4630      	mov	r0, r6
 80103f2:	f7f0 fc9f 	bl	8000d34 <__aeabi_fmul>
 80103f6:	4601      	mov	r1, r0
 80103f8:	4648      	mov	r0, r9
 80103fa:	f7f0 fb91 	bl	8000b20 <__aeabi_fsub>
 80103fe:	4629      	mov	r1, r5
 8010400:	f7f0 fc98 	bl	8000d34 <__aeabi_fmul>
 8010404:	4639      	mov	r1, r7
 8010406:	f7f0 fb8b 	bl	8000b20 <__aeabi_fsub>
 801040a:	490c      	ldr	r1, [pc, #48]	; (801043c <__kernel_sinf+0xe8>)
 801040c:	4605      	mov	r5, r0
 801040e:	4630      	mov	r0, r6
 8010410:	f7f0 fc90 	bl	8000d34 <__aeabi_fmul>
 8010414:	4601      	mov	r1, r0
 8010416:	4628      	mov	r0, r5
 8010418:	f7f0 fb84 	bl	8000b24 <__addsf3>
 801041c:	4601      	mov	r1, r0
 801041e:	4620      	mov	r0, r4
 8010420:	f7f0 fb7e 	bl	8000b20 <__aeabi_fsub>
 8010424:	e7d9      	b.n	80103da <__kernel_sinf+0x86>
 8010426:	bf00      	nop
 8010428:	2f2ec9d3 	.word	0x2f2ec9d3
 801042c:	32d72f34 	.word	0x32d72f34
 8010430:	3638ef1b 	.word	0x3638ef1b
 8010434:	39500d01 	.word	0x39500d01
 8010438:	3c088889 	.word	0x3c088889
 801043c:	3e2aaaab 	.word	0x3e2aaaab

08010440 <fabs>:
 8010440:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010444:	4770      	bx	lr

08010446 <finite>:
 8010446:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801044a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801044e:	0fc0      	lsrs	r0, r0, #31
 8010450:	4770      	bx	lr
	...

08010454 <nan>:
 8010454:	2000      	movs	r0, #0
 8010456:	4901      	ldr	r1, [pc, #4]	; (801045c <nan+0x8>)
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	7ff80000 	.word	0x7ff80000

08010460 <rint>:
 8010460:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8010464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010466:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 801046a:	2f13      	cmp	r7, #19
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	460c      	mov	r4, r1
 8010472:	4605      	mov	r5, r0
 8010474:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8010478:	dc59      	bgt.n	801052e <rint+0xce>
 801047a:	2f00      	cmp	r7, #0
 801047c:	da2a      	bge.n	80104d4 <rint+0x74>
 801047e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010482:	4301      	orrs	r1, r0
 8010484:	d022      	beq.n	80104cc <rint+0x6c>
 8010486:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801048a:	4301      	orrs	r1, r0
 801048c:	424d      	negs	r5, r1
 801048e:	430d      	orrs	r5, r1
 8010490:	4936      	ldr	r1, [pc, #216]	; (801056c <rint+0x10c>)
 8010492:	0c5c      	lsrs	r4, r3, #17
 8010494:	0b2d      	lsrs	r5, r5, #12
 8010496:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 801049a:	0464      	lsls	r4, r4, #17
 801049c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80104a0:	ea45 0304 	orr.w	r3, r5, r4
 80104a4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80104a8:	4620      	mov	r0, r4
 80104aa:	4629      	mov	r1, r5
 80104ac:	f7ef fe56 	bl	800015c <__adddf3>
 80104b0:	e9cd 0100 	strd	r0, r1, [sp]
 80104b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104b8:	462b      	mov	r3, r5
 80104ba:	4622      	mov	r2, r4
 80104bc:	f7ef fe4c 	bl	8000158 <__aeabi_dsub>
 80104c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104c4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4610      	mov	r0, r2
 80104ce:	4619      	mov	r1, r3
 80104d0:	b003      	add	sp, #12
 80104d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d4:	4926      	ldr	r1, [pc, #152]	; (8010570 <rint+0x110>)
 80104d6:	4139      	asrs	r1, r7
 80104d8:	ea03 0001 	and.w	r0, r3, r1
 80104dc:	4310      	orrs	r0, r2
 80104de:	d0f5      	beq.n	80104cc <rint+0x6c>
 80104e0:	084b      	lsrs	r3, r1, #1
 80104e2:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80104e6:	ea52 0501 	orrs.w	r5, r2, r1
 80104ea:	d00c      	beq.n	8010506 <rint+0xa6>
 80104ec:	ea24 0303 	bic.w	r3, r4, r3
 80104f0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80104f4:	2f13      	cmp	r7, #19
 80104f6:	bf0c      	ite	eq
 80104f8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80104fc:	2500      	movne	r5, #0
 80104fe:	fa44 f707 	asr.w	r7, r4, r7
 8010502:	ea43 0407 	orr.w	r4, r3, r7
 8010506:	4919      	ldr	r1, [pc, #100]	; (801056c <rint+0x10c>)
 8010508:	4623      	mov	r3, r4
 801050a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 801050e:	462a      	mov	r2, r5
 8010510:	e9d6 4500 	ldrd	r4, r5, [r6]
 8010514:	4620      	mov	r0, r4
 8010516:	4629      	mov	r1, r5
 8010518:	f7ef fe20 	bl	800015c <__adddf3>
 801051c:	e9cd 0100 	strd	r0, r1, [sp]
 8010520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010524:	4622      	mov	r2, r4
 8010526:	462b      	mov	r3, r5
 8010528:	f7ef fe16 	bl	8000158 <__aeabi_dsub>
 801052c:	e7cc      	b.n	80104c8 <rint+0x68>
 801052e:	2f33      	cmp	r7, #51	; 0x33
 8010530:	dd05      	ble.n	801053e <rint+0xde>
 8010532:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8010536:	d1c9      	bne.n	80104cc <rint+0x6c>
 8010538:	f7ef fe10 	bl	800015c <__adddf3>
 801053c:	e7c4      	b.n	80104c8 <rint+0x68>
 801053e:	f04f 31ff 	mov.w	r1, #4294967295
 8010542:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8010546:	fa21 f10c 	lsr.w	r1, r1, ip
 801054a:	4208      	tst	r0, r1
 801054c:	d0be      	beq.n	80104cc <rint+0x6c>
 801054e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8010552:	bf18      	it	ne
 8010554:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8010558:	ea4f 0351 	mov.w	r3, r1, lsr #1
 801055c:	bf1e      	ittt	ne
 801055e:	ea20 0303 	bicne.w	r3, r0, r3
 8010562:	fa45 fc0c 	asrne.w	ip, r5, ip
 8010566:	ea43 050c 	orrne.w	r5, r3, ip
 801056a:	e7cc      	b.n	8010506 <rint+0xa6>
 801056c:	080127b8 	.word	0x080127b8
 8010570:	000fffff 	.word	0x000fffff
 8010574:	00000000 	.word	0x00000000

08010578 <scalbn>:
 8010578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801057e:	4604      	mov	r4, r0
 8010580:	460d      	mov	r5, r1
 8010582:	4617      	mov	r7, r2
 8010584:	460b      	mov	r3, r1
 8010586:	b996      	cbnz	r6, 80105ae <scalbn+0x36>
 8010588:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801058c:	4303      	orrs	r3, r0
 801058e:	d039      	beq.n	8010604 <scalbn+0x8c>
 8010590:	4b35      	ldr	r3, [pc, #212]	; (8010668 <scalbn+0xf0>)
 8010592:	2200      	movs	r2, #0
 8010594:	f7ef ff98 	bl	80004c8 <__aeabi_dmul>
 8010598:	4b34      	ldr	r3, [pc, #208]	; (801066c <scalbn+0xf4>)
 801059a:	4604      	mov	r4, r0
 801059c:	429f      	cmp	r7, r3
 801059e:	460d      	mov	r5, r1
 80105a0:	da0f      	bge.n	80105c2 <scalbn+0x4a>
 80105a2:	a32d      	add	r3, pc, #180	; (adr r3, 8010658 <scalbn+0xe0>)
 80105a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a8:	f7ef ff8e 	bl	80004c8 <__aeabi_dmul>
 80105ac:	e006      	b.n	80105bc <scalbn+0x44>
 80105ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80105b2:	4296      	cmp	r6, r2
 80105b4:	d10a      	bne.n	80105cc <scalbn+0x54>
 80105b6:	4602      	mov	r2, r0
 80105b8:	f7ef fdd0 	bl	800015c <__adddf3>
 80105bc:	4604      	mov	r4, r0
 80105be:	460d      	mov	r5, r1
 80105c0:	e020      	b.n	8010604 <scalbn+0x8c>
 80105c2:	460b      	mov	r3, r1
 80105c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80105c8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80105cc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80105d0:	19b9      	adds	r1, r7, r6
 80105d2:	4291      	cmp	r1, r2
 80105d4:	dd0e      	ble.n	80105f4 <scalbn+0x7c>
 80105d6:	a322      	add	r3, pc, #136	; (adr r3, 8010660 <scalbn+0xe8>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80105e0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80105e4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80105e8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80105ec:	4820      	ldr	r0, [pc, #128]	; (8010670 <scalbn+0xf8>)
 80105ee:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80105f2:	e7d9      	b.n	80105a8 <scalbn+0x30>
 80105f4:	2900      	cmp	r1, #0
 80105f6:	dd08      	ble.n	801060a <scalbn+0x92>
 80105f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80105fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010600:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010604:	4620      	mov	r0, r4
 8010606:	4629      	mov	r1, r5
 8010608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801060a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801060e:	da16      	bge.n	801063e <scalbn+0xc6>
 8010610:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010614:	429f      	cmp	r7, r3
 8010616:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801061a:	dd08      	ble.n	801062e <scalbn+0xb6>
 801061c:	4c15      	ldr	r4, [pc, #84]	; (8010674 <scalbn+0xfc>)
 801061e:	4814      	ldr	r0, [pc, #80]	; (8010670 <scalbn+0xf8>)
 8010620:	f363 74df 	bfi	r4, r3, #31, #1
 8010624:	a30e      	add	r3, pc, #56	; (adr r3, 8010660 <scalbn+0xe8>)
 8010626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062a:	4621      	mov	r1, r4
 801062c:	e7bc      	b.n	80105a8 <scalbn+0x30>
 801062e:	4c12      	ldr	r4, [pc, #72]	; (8010678 <scalbn+0x100>)
 8010630:	4812      	ldr	r0, [pc, #72]	; (801067c <scalbn+0x104>)
 8010632:	f363 74df 	bfi	r4, r3, #31, #1
 8010636:	a308      	add	r3, pc, #32	; (adr r3, 8010658 <scalbn+0xe0>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	e7f5      	b.n	801062a <scalbn+0xb2>
 801063e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010642:	3136      	adds	r1, #54	; 0x36
 8010644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010648:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801064c:	4620      	mov	r0, r4
 801064e:	4629      	mov	r1, r5
 8010650:	2200      	movs	r2, #0
 8010652:	4b0b      	ldr	r3, [pc, #44]	; (8010680 <scalbn+0x108>)
 8010654:	e7a8      	b.n	80105a8 <scalbn+0x30>
 8010656:	bf00      	nop
 8010658:	c2f8f359 	.word	0xc2f8f359
 801065c:	01a56e1f 	.word	0x01a56e1f
 8010660:	8800759c 	.word	0x8800759c
 8010664:	7e37e43c 	.word	0x7e37e43c
 8010668:	43500000 	.word	0x43500000
 801066c:	ffff3cb0 	.word	0xffff3cb0
 8010670:	8800759c 	.word	0x8800759c
 8010674:	7e37e43c 	.word	0x7e37e43c
 8010678:	01a56e1f 	.word	0x01a56e1f
 801067c:	c2f8f359 	.word	0xc2f8f359
 8010680:	3c900000 	.word	0x3c900000

08010684 <floorf>:
 8010684:	b570      	push	{r4, r5, r6, lr}
 8010686:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801068a:	3d7f      	subs	r5, #127	; 0x7f
 801068c:	2d16      	cmp	r5, #22
 801068e:	4601      	mov	r1, r0
 8010690:	4604      	mov	r4, r0
 8010692:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8010696:	dc26      	bgt.n	80106e6 <floorf+0x62>
 8010698:	2d00      	cmp	r5, #0
 801069a:	da0e      	bge.n	80106ba <floorf+0x36>
 801069c:	4917      	ldr	r1, [pc, #92]	; (80106fc <floorf+0x78>)
 801069e:	f7f0 fa41 	bl	8000b24 <__addsf3>
 80106a2:	2100      	movs	r1, #0
 80106a4:	f7f0 fd02 	bl	80010ac <__aeabi_fcmpgt>
 80106a8:	b128      	cbz	r0, 80106b6 <floorf+0x32>
 80106aa:	2c00      	cmp	r4, #0
 80106ac:	da23      	bge.n	80106f6 <floorf+0x72>
 80106ae:	4b14      	ldr	r3, [pc, #80]	; (8010700 <floorf+0x7c>)
 80106b0:	2e00      	cmp	r6, #0
 80106b2:	bf18      	it	ne
 80106b4:	461c      	movne	r4, r3
 80106b6:	4621      	mov	r1, r4
 80106b8:	e01b      	b.n	80106f2 <floorf+0x6e>
 80106ba:	4e12      	ldr	r6, [pc, #72]	; (8010704 <floorf+0x80>)
 80106bc:	412e      	asrs	r6, r5
 80106be:	4230      	tst	r0, r6
 80106c0:	d017      	beq.n	80106f2 <floorf+0x6e>
 80106c2:	490e      	ldr	r1, [pc, #56]	; (80106fc <floorf+0x78>)
 80106c4:	f7f0 fa2e 	bl	8000b24 <__addsf3>
 80106c8:	2100      	movs	r1, #0
 80106ca:	f7f0 fcef 	bl	80010ac <__aeabi_fcmpgt>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d0f1      	beq.n	80106b6 <floorf+0x32>
 80106d2:	2c00      	cmp	r4, #0
 80106d4:	bfbe      	ittt	lt
 80106d6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80106da:	fa43 f505 	asrlt.w	r5, r3, r5
 80106de:	1964      	addlt	r4, r4, r5
 80106e0:	ea24 0406 	bic.w	r4, r4, r6
 80106e4:	e7e7      	b.n	80106b6 <floorf+0x32>
 80106e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80106ea:	d302      	bcc.n	80106f2 <floorf+0x6e>
 80106ec:	f7f0 fa1a 	bl	8000b24 <__addsf3>
 80106f0:	4601      	mov	r1, r0
 80106f2:	4608      	mov	r0, r1
 80106f4:	bd70      	pop	{r4, r5, r6, pc}
 80106f6:	2400      	movs	r4, #0
 80106f8:	e7dd      	b.n	80106b6 <floorf+0x32>
 80106fa:	bf00      	nop
 80106fc:	7149f2ca 	.word	0x7149f2ca
 8010700:	bf800000 	.word	0xbf800000
 8010704:	007fffff 	.word	0x007fffff

08010708 <nanf>:
 8010708:	4800      	ldr	r0, [pc, #0]	; (801070c <nanf+0x4>)
 801070a:	4770      	bx	lr
 801070c:	7fc00000 	.word	0x7fc00000

08010710 <scalbnf>:
 8010710:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4603      	mov	r3, r0
 8010718:	460d      	mov	r5, r1
 801071a:	4604      	mov	r4, r0
 801071c:	d02a      	beq.n	8010774 <scalbnf+0x64>
 801071e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010722:	d304      	bcc.n	801072e <scalbnf+0x1e>
 8010724:	4601      	mov	r1, r0
 8010726:	f7f0 f9fd 	bl	8000b24 <__addsf3>
 801072a:	4603      	mov	r3, r0
 801072c:	e022      	b.n	8010774 <scalbnf+0x64>
 801072e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8010732:	d117      	bne.n	8010764 <scalbnf+0x54>
 8010734:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010738:	f7f0 fafc 	bl	8000d34 <__aeabi_fmul>
 801073c:	4a17      	ldr	r2, [pc, #92]	; (801079c <scalbnf+0x8c>)
 801073e:	4603      	mov	r3, r0
 8010740:	4295      	cmp	r5, r2
 8010742:	db0b      	blt.n	801075c <scalbnf+0x4c>
 8010744:	4604      	mov	r4, r0
 8010746:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801074a:	3a19      	subs	r2, #25
 801074c:	442a      	add	r2, r5
 801074e:	2afe      	cmp	r2, #254	; 0xfe
 8010750:	dd0a      	ble.n	8010768 <scalbnf+0x58>
 8010752:	4913      	ldr	r1, [pc, #76]	; (80107a0 <scalbnf+0x90>)
 8010754:	4618      	mov	r0, r3
 8010756:	f361 001e 	bfi	r0, r1, #0, #31
 801075a:	e000      	b.n	801075e <scalbnf+0x4e>
 801075c:	4911      	ldr	r1, [pc, #68]	; (80107a4 <scalbnf+0x94>)
 801075e:	f7f0 fae9 	bl	8000d34 <__aeabi_fmul>
 8010762:	e7e2      	b.n	801072a <scalbnf+0x1a>
 8010764:	0dd2      	lsrs	r2, r2, #23
 8010766:	e7f1      	b.n	801074c <scalbnf+0x3c>
 8010768:	2a00      	cmp	r2, #0
 801076a:	dd05      	ble.n	8010778 <scalbnf+0x68>
 801076c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8010770:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8010774:	4618      	mov	r0, r3
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	f112 0f16 	cmn.w	r2, #22
 801077c:	da05      	bge.n	801078a <scalbnf+0x7a>
 801077e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010782:	4295      	cmp	r5, r2
 8010784:	dce5      	bgt.n	8010752 <scalbnf+0x42>
 8010786:	4907      	ldr	r1, [pc, #28]	; (80107a4 <scalbnf+0x94>)
 8010788:	e7e4      	b.n	8010754 <scalbnf+0x44>
 801078a:	3219      	adds	r2, #25
 801078c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8010790:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8010794:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8010798:	e7e1      	b.n	801075e <scalbnf+0x4e>
 801079a:	bf00      	nop
 801079c:	ffff3cb0 	.word	0xffff3cb0
 80107a0:	7149f2ca 	.word	0x7149f2ca
 80107a4:	0da24260 	.word	0x0da24260

080107a8 <__errno>:
 80107a8:	4b01      	ldr	r3, [pc, #4]	; (80107b0 <__errno+0x8>)
 80107aa:	6818      	ldr	r0, [r3, #0]
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	20000024 	.word	0x20000024

080107b4 <__libc_init_array>:
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	2600      	movs	r6, #0
 80107b8:	4d0c      	ldr	r5, [pc, #48]	; (80107ec <__libc_init_array+0x38>)
 80107ba:	4c0d      	ldr	r4, [pc, #52]	; (80107f0 <__libc_init_array+0x3c>)
 80107bc:	1b64      	subs	r4, r4, r5
 80107be:	10a4      	asrs	r4, r4, #2
 80107c0:	42a6      	cmp	r6, r4
 80107c2:	d109      	bne.n	80107d8 <__libc_init_array+0x24>
 80107c4:	f001 f9ca 	bl	8011b5c <_init>
 80107c8:	2600      	movs	r6, #0
 80107ca:	4d0a      	ldr	r5, [pc, #40]	; (80107f4 <__libc_init_array+0x40>)
 80107cc:	4c0a      	ldr	r4, [pc, #40]	; (80107f8 <__libc_init_array+0x44>)
 80107ce:	1b64      	subs	r4, r4, r5
 80107d0:	10a4      	asrs	r4, r4, #2
 80107d2:	42a6      	cmp	r6, r4
 80107d4:	d105      	bne.n	80107e2 <__libc_init_array+0x2e>
 80107d6:	bd70      	pop	{r4, r5, r6, pc}
 80107d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80107dc:	4798      	blx	r3
 80107de:	3601      	adds	r6, #1
 80107e0:	e7ee      	b.n	80107c0 <__libc_init_array+0xc>
 80107e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107e6:	4798      	blx	r3
 80107e8:	3601      	adds	r6, #1
 80107ea:	e7f2      	b.n	80107d2 <__libc_init_array+0x1e>
 80107ec:	08012860 	.word	0x08012860
 80107f0:	08012860 	.word	0x08012860
 80107f4:	08012860 	.word	0x08012860
 80107f8:	08012868 	.word	0x08012868

080107fc <memcpy>:
 80107fc:	440a      	add	r2, r1
 80107fe:	4291      	cmp	r1, r2
 8010800:	f100 33ff 	add.w	r3, r0, #4294967295
 8010804:	d100      	bne.n	8010808 <memcpy+0xc>
 8010806:	4770      	bx	lr
 8010808:	b510      	push	{r4, lr}
 801080a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801080e:	4291      	cmp	r1, r2
 8010810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010814:	d1f9      	bne.n	801080a <memcpy+0xe>
 8010816:	bd10      	pop	{r4, pc}

08010818 <memset>:
 8010818:	4603      	mov	r3, r0
 801081a:	4402      	add	r2, r0
 801081c:	4293      	cmp	r3, r2
 801081e:	d100      	bne.n	8010822 <memset+0xa>
 8010820:	4770      	bx	lr
 8010822:	f803 1b01 	strb.w	r1, [r3], #1
 8010826:	e7f9      	b.n	801081c <memset+0x4>

08010828 <_free_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	4605      	mov	r5, r0
 801082c:	2900      	cmp	r1, #0
 801082e:	d043      	beq.n	80108b8 <_free_r+0x90>
 8010830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010834:	1f0c      	subs	r4, r1, #4
 8010836:	2b00      	cmp	r3, #0
 8010838:	bfb8      	it	lt
 801083a:	18e4      	addlt	r4, r4, r3
 801083c:	f000 fc36 	bl	80110ac <__malloc_lock>
 8010840:	4a1e      	ldr	r2, [pc, #120]	; (80108bc <_free_r+0x94>)
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	4610      	mov	r0, r2
 8010846:	b933      	cbnz	r3, 8010856 <_free_r+0x2e>
 8010848:	6063      	str	r3, [r4, #4]
 801084a:	6014      	str	r4, [r2, #0]
 801084c:	4628      	mov	r0, r5
 801084e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010852:	f000 bc31 	b.w	80110b8 <__malloc_unlock>
 8010856:	42a3      	cmp	r3, r4
 8010858:	d90a      	bls.n	8010870 <_free_r+0x48>
 801085a:	6821      	ldr	r1, [r4, #0]
 801085c:	1862      	adds	r2, r4, r1
 801085e:	4293      	cmp	r3, r2
 8010860:	bf01      	itttt	eq
 8010862:	681a      	ldreq	r2, [r3, #0]
 8010864:	685b      	ldreq	r3, [r3, #4]
 8010866:	1852      	addeq	r2, r2, r1
 8010868:	6022      	streq	r2, [r4, #0]
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	6004      	str	r4, [r0, #0]
 801086e:	e7ed      	b.n	801084c <_free_r+0x24>
 8010870:	461a      	mov	r2, r3
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	b10b      	cbz	r3, 801087a <_free_r+0x52>
 8010876:	42a3      	cmp	r3, r4
 8010878:	d9fa      	bls.n	8010870 <_free_r+0x48>
 801087a:	6811      	ldr	r1, [r2, #0]
 801087c:	1850      	adds	r0, r2, r1
 801087e:	42a0      	cmp	r0, r4
 8010880:	d10b      	bne.n	801089a <_free_r+0x72>
 8010882:	6820      	ldr	r0, [r4, #0]
 8010884:	4401      	add	r1, r0
 8010886:	1850      	adds	r0, r2, r1
 8010888:	4283      	cmp	r3, r0
 801088a:	6011      	str	r1, [r2, #0]
 801088c:	d1de      	bne.n	801084c <_free_r+0x24>
 801088e:	6818      	ldr	r0, [r3, #0]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	4401      	add	r1, r0
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	6053      	str	r3, [r2, #4]
 8010898:	e7d8      	b.n	801084c <_free_r+0x24>
 801089a:	d902      	bls.n	80108a2 <_free_r+0x7a>
 801089c:	230c      	movs	r3, #12
 801089e:	602b      	str	r3, [r5, #0]
 80108a0:	e7d4      	b.n	801084c <_free_r+0x24>
 80108a2:	6820      	ldr	r0, [r4, #0]
 80108a4:	1821      	adds	r1, r4, r0
 80108a6:	428b      	cmp	r3, r1
 80108a8:	bf01      	itttt	eq
 80108aa:	6819      	ldreq	r1, [r3, #0]
 80108ac:	685b      	ldreq	r3, [r3, #4]
 80108ae:	1809      	addeq	r1, r1, r0
 80108b0:	6021      	streq	r1, [r4, #0]
 80108b2:	6063      	str	r3, [r4, #4]
 80108b4:	6054      	str	r4, [r2, #4]
 80108b6:	e7c9      	b.n	801084c <_free_r+0x24>
 80108b8:	bd38      	pop	{r3, r4, r5, pc}
 80108ba:	bf00      	nop
 80108bc:	200018a0 	.word	0x200018a0

080108c0 <_malloc_r>:
 80108c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c2:	1ccd      	adds	r5, r1, #3
 80108c4:	f025 0503 	bic.w	r5, r5, #3
 80108c8:	3508      	adds	r5, #8
 80108ca:	2d0c      	cmp	r5, #12
 80108cc:	bf38      	it	cc
 80108ce:	250c      	movcc	r5, #12
 80108d0:	2d00      	cmp	r5, #0
 80108d2:	4606      	mov	r6, r0
 80108d4:	db01      	blt.n	80108da <_malloc_r+0x1a>
 80108d6:	42a9      	cmp	r1, r5
 80108d8:	d903      	bls.n	80108e2 <_malloc_r+0x22>
 80108da:	230c      	movs	r3, #12
 80108dc:	6033      	str	r3, [r6, #0]
 80108de:	2000      	movs	r0, #0
 80108e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108e2:	f000 fbe3 	bl	80110ac <__malloc_lock>
 80108e6:	4921      	ldr	r1, [pc, #132]	; (801096c <_malloc_r+0xac>)
 80108e8:	680a      	ldr	r2, [r1, #0]
 80108ea:	4614      	mov	r4, r2
 80108ec:	b99c      	cbnz	r4, 8010916 <_malloc_r+0x56>
 80108ee:	4f20      	ldr	r7, [pc, #128]	; (8010970 <_malloc_r+0xb0>)
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	b923      	cbnz	r3, 80108fe <_malloc_r+0x3e>
 80108f4:	4621      	mov	r1, r4
 80108f6:	4630      	mov	r0, r6
 80108f8:	f000 f8ca 	bl	8010a90 <_sbrk_r>
 80108fc:	6038      	str	r0, [r7, #0]
 80108fe:	4629      	mov	r1, r5
 8010900:	4630      	mov	r0, r6
 8010902:	f000 f8c5 	bl	8010a90 <_sbrk_r>
 8010906:	1c43      	adds	r3, r0, #1
 8010908:	d123      	bne.n	8010952 <_malloc_r+0x92>
 801090a:	230c      	movs	r3, #12
 801090c:	4630      	mov	r0, r6
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f000 fbd2 	bl	80110b8 <__malloc_unlock>
 8010914:	e7e3      	b.n	80108de <_malloc_r+0x1e>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	1b5b      	subs	r3, r3, r5
 801091a:	d417      	bmi.n	801094c <_malloc_r+0x8c>
 801091c:	2b0b      	cmp	r3, #11
 801091e:	d903      	bls.n	8010928 <_malloc_r+0x68>
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	441c      	add	r4, r3
 8010924:	6025      	str	r5, [r4, #0]
 8010926:	e004      	b.n	8010932 <_malloc_r+0x72>
 8010928:	6863      	ldr	r3, [r4, #4]
 801092a:	42a2      	cmp	r2, r4
 801092c:	bf0c      	ite	eq
 801092e:	600b      	streq	r3, [r1, #0]
 8010930:	6053      	strne	r3, [r2, #4]
 8010932:	4630      	mov	r0, r6
 8010934:	f000 fbc0 	bl	80110b8 <__malloc_unlock>
 8010938:	f104 000b 	add.w	r0, r4, #11
 801093c:	1d23      	adds	r3, r4, #4
 801093e:	f020 0007 	bic.w	r0, r0, #7
 8010942:	1ac2      	subs	r2, r0, r3
 8010944:	d0cc      	beq.n	80108e0 <_malloc_r+0x20>
 8010946:	1a1b      	subs	r3, r3, r0
 8010948:	50a3      	str	r3, [r4, r2]
 801094a:	e7c9      	b.n	80108e0 <_malloc_r+0x20>
 801094c:	4622      	mov	r2, r4
 801094e:	6864      	ldr	r4, [r4, #4]
 8010950:	e7cc      	b.n	80108ec <_malloc_r+0x2c>
 8010952:	1cc4      	adds	r4, r0, #3
 8010954:	f024 0403 	bic.w	r4, r4, #3
 8010958:	42a0      	cmp	r0, r4
 801095a:	d0e3      	beq.n	8010924 <_malloc_r+0x64>
 801095c:	1a21      	subs	r1, r4, r0
 801095e:	4630      	mov	r0, r6
 8010960:	f000 f896 	bl	8010a90 <_sbrk_r>
 8010964:	3001      	adds	r0, #1
 8010966:	d1dd      	bne.n	8010924 <_malloc_r+0x64>
 8010968:	e7cf      	b.n	801090a <_malloc_r+0x4a>
 801096a:	bf00      	nop
 801096c:	200018a0 	.word	0x200018a0
 8010970:	200018a4 	.word	0x200018a4

08010974 <iprintf>:
 8010974:	b40f      	push	{r0, r1, r2, r3}
 8010976:	4b0a      	ldr	r3, [pc, #40]	; (80109a0 <iprintf+0x2c>)
 8010978:	b513      	push	{r0, r1, r4, lr}
 801097a:	681c      	ldr	r4, [r3, #0]
 801097c:	b124      	cbz	r4, 8010988 <iprintf+0x14>
 801097e:	69a3      	ldr	r3, [r4, #24]
 8010980:	b913      	cbnz	r3, 8010988 <iprintf+0x14>
 8010982:	4620      	mov	r0, r4
 8010984:	f000 fa8e 	bl	8010ea4 <__sinit>
 8010988:	ab05      	add	r3, sp, #20
 801098a:	4620      	mov	r0, r4
 801098c:	9a04      	ldr	r2, [sp, #16]
 801098e:	68a1      	ldr	r1, [r4, #8]
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	f000 fd1b 	bl	80113cc <_vfiprintf_r>
 8010996:	b002      	add	sp, #8
 8010998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801099c:	b004      	add	sp, #16
 801099e:	4770      	bx	lr
 80109a0:	20000024 	.word	0x20000024

080109a4 <_puts_r>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	460e      	mov	r6, r1
 80109a8:	4605      	mov	r5, r0
 80109aa:	b118      	cbz	r0, 80109b4 <_puts_r+0x10>
 80109ac:	6983      	ldr	r3, [r0, #24]
 80109ae:	b90b      	cbnz	r3, 80109b4 <_puts_r+0x10>
 80109b0:	f000 fa78 	bl	8010ea4 <__sinit>
 80109b4:	69ab      	ldr	r3, [r5, #24]
 80109b6:	68ac      	ldr	r4, [r5, #8]
 80109b8:	b913      	cbnz	r3, 80109c0 <_puts_r+0x1c>
 80109ba:	4628      	mov	r0, r5
 80109bc:	f000 fa72 	bl	8010ea4 <__sinit>
 80109c0:	4b2c      	ldr	r3, [pc, #176]	; (8010a74 <_puts_r+0xd0>)
 80109c2:	429c      	cmp	r4, r3
 80109c4:	d120      	bne.n	8010a08 <_puts_r+0x64>
 80109c6:	686c      	ldr	r4, [r5, #4]
 80109c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109ca:	07db      	lsls	r3, r3, #31
 80109cc:	d405      	bmi.n	80109da <_puts_r+0x36>
 80109ce:	89a3      	ldrh	r3, [r4, #12]
 80109d0:	0598      	lsls	r0, r3, #22
 80109d2:	d402      	bmi.n	80109da <_puts_r+0x36>
 80109d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109d6:	f000 fb03 	bl	8010fe0 <__retarget_lock_acquire_recursive>
 80109da:	89a3      	ldrh	r3, [r4, #12]
 80109dc:	0719      	lsls	r1, r3, #28
 80109de:	d51d      	bpl.n	8010a1c <_puts_r+0x78>
 80109e0:	6923      	ldr	r3, [r4, #16]
 80109e2:	b1db      	cbz	r3, 8010a1c <_puts_r+0x78>
 80109e4:	3e01      	subs	r6, #1
 80109e6:	68a3      	ldr	r3, [r4, #8]
 80109e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80109ec:	3b01      	subs	r3, #1
 80109ee:	60a3      	str	r3, [r4, #8]
 80109f0:	bb39      	cbnz	r1, 8010a42 <_puts_r+0x9e>
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	da38      	bge.n	8010a68 <_puts_r+0xc4>
 80109f6:	4622      	mov	r2, r4
 80109f8:	210a      	movs	r1, #10
 80109fa:	4628      	mov	r0, r5
 80109fc:	f000 f878 	bl	8010af0 <__swbuf_r>
 8010a00:	3001      	adds	r0, #1
 8010a02:	d011      	beq.n	8010a28 <_puts_r+0x84>
 8010a04:	250a      	movs	r5, #10
 8010a06:	e011      	b.n	8010a2c <_puts_r+0x88>
 8010a08:	4b1b      	ldr	r3, [pc, #108]	; (8010a78 <_puts_r+0xd4>)
 8010a0a:	429c      	cmp	r4, r3
 8010a0c:	d101      	bne.n	8010a12 <_puts_r+0x6e>
 8010a0e:	68ac      	ldr	r4, [r5, #8]
 8010a10:	e7da      	b.n	80109c8 <_puts_r+0x24>
 8010a12:	4b1a      	ldr	r3, [pc, #104]	; (8010a7c <_puts_r+0xd8>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	bf08      	it	eq
 8010a18:	68ec      	ldreq	r4, [r5, #12]
 8010a1a:	e7d5      	b.n	80109c8 <_puts_r+0x24>
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f000 f8b8 	bl	8010b94 <__swsetup_r>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d0dd      	beq.n	80109e4 <_puts_r+0x40>
 8010a28:	f04f 35ff 	mov.w	r5, #4294967295
 8010a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a2e:	07da      	lsls	r2, r3, #31
 8010a30:	d405      	bmi.n	8010a3e <_puts_r+0x9a>
 8010a32:	89a3      	ldrh	r3, [r4, #12]
 8010a34:	059b      	lsls	r3, r3, #22
 8010a36:	d402      	bmi.n	8010a3e <_puts_r+0x9a>
 8010a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a3a:	f000 fad2 	bl	8010fe2 <__retarget_lock_release_recursive>
 8010a3e:	4628      	mov	r0, r5
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	da04      	bge.n	8010a50 <_puts_r+0xac>
 8010a46:	69a2      	ldr	r2, [r4, #24]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	dc06      	bgt.n	8010a5a <_puts_r+0xb6>
 8010a4c:	290a      	cmp	r1, #10
 8010a4e:	d004      	beq.n	8010a5a <_puts_r+0xb6>
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	6022      	str	r2, [r4, #0]
 8010a56:	7019      	strb	r1, [r3, #0]
 8010a58:	e7c5      	b.n	80109e6 <_puts_r+0x42>
 8010a5a:	4622      	mov	r2, r4
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	f000 f847 	bl	8010af0 <__swbuf_r>
 8010a62:	3001      	adds	r0, #1
 8010a64:	d1bf      	bne.n	80109e6 <_puts_r+0x42>
 8010a66:	e7df      	b.n	8010a28 <_puts_r+0x84>
 8010a68:	250a      	movs	r5, #10
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	1c5a      	adds	r2, r3, #1
 8010a6e:	6022      	str	r2, [r4, #0]
 8010a70:	701d      	strb	r5, [r3, #0]
 8010a72:	e7db      	b.n	8010a2c <_puts_r+0x88>
 8010a74:	080127ec 	.word	0x080127ec
 8010a78:	0801280c 	.word	0x0801280c
 8010a7c:	080127cc 	.word	0x080127cc

08010a80 <puts>:
 8010a80:	4b02      	ldr	r3, [pc, #8]	; (8010a8c <puts+0xc>)
 8010a82:	4601      	mov	r1, r0
 8010a84:	6818      	ldr	r0, [r3, #0]
 8010a86:	f7ff bf8d 	b.w	80109a4 <_puts_r>
 8010a8a:	bf00      	nop
 8010a8c:	20000024 	.word	0x20000024

08010a90 <_sbrk_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	2300      	movs	r3, #0
 8010a94:	4d05      	ldr	r5, [pc, #20]	; (8010aac <_sbrk_r+0x1c>)
 8010a96:	4604      	mov	r4, r0
 8010a98:	4608      	mov	r0, r1
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	f7f4 ff72 	bl	8005984 <_sbrk>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d102      	bne.n	8010aaa <_sbrk_r+0x1a>
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	b103      	cbz	r3, 8010aaa <_sbrk_r+0x1a>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	20001bd8 	.word	0x20001bd8

08010ab0 <siprintf>:
 8010ab0:	b40e      	push	{r1, r2, r3}
 8010ab2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ab6:	b500      	push	{lr}
 8010ab8:	b09c      	sub	sp, #112	; 0x70
 8010aba:	ab1d      	add	r3, sp, #116	; 0x74
 8010abc:	9002      	str	r0, [sp, #8]
 8010abe:	9006      	str	r0, [sp, #24]
 8010ac0:	9107      	str	r1, [sp, #28]
 8010ac2:	9104      	str	r1, [sp, #16]
 8010ac4:	4808      	ldr	r0, [pc, #32]	; (8010ae8 <siprintf+0x38>)
 8010ac6:	4909      	ldr	r1, [pc, #36]	; (8010aec <siprintf+0x3c>)
 8010ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010acc:	9105      	str	r1, [sp, #20]
 8010ace:	6800      	ldr	r0, [r0, #0]
 8010ad0:	a902      	add	r1, sp, #8
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	f000 fb52 	bl	801117c <_svfiprintf_r>
 8010ad8:	2200      	movs	r2, #0
 8010ada:	9b02      	ldr	r3, [sp, #8]
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	b01c      	add	sp, #112	; 0x70
 8010ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ae4:	b003      	add	sp, #12
 8010ae6:	4770      	bx	lr
 8010ae8:	20000024 	.word	0x20000024
 8010aec:	ffff0208 	.word	0xffff0208

08010af0 <__swbuf_r>:
 8010af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010af2:	460e      	mov	r6, r1
 8010af4:	4614      	mov	r4, r2
 8010af6:	4605      	mov	r5, r0
 8010af8:	b118      	cbz	r0, 8010b02 <__swbuf_r+0x12>
 8010afa:	6983      	ldr	r3, [r0, #24]
 8010afc:	b90b      	cbnz	r3, 8010b02 <__swbuf_r+0x12>
 8010afe:	f000 f9d1 	bl	8010ea4 <__sinit>
 8010b02:	4b21      	ldr	r3, [pc, #132]	; (8010b88 <__swbuf_r+0x98>)
 8010b04:	429c      	cmp	r4, r3
 8010b06:	d12b      	bne.n	8010b60 <__swbuf_r+0x70>
 8010b08:	686c      	ldr	r4, [r5, #4]
 8010b0a:	69a3      	ldr	r3, [r4, #24]
 8010b0c:	60a3      	str	r3, [r4, #8]
 8010b0e:	89a3      	ldrh	r3, [r4, #12]
 8010b10:	071a      	lsls	r2, r3, #28
 8010b12:	d52f      	bpl.n	8010b74 <__swbuf_r+0x84>
 8010b14:	6923      	ldr	r3, [r4, #16]
 8010b16:	b36b      	cbz	r3, 8010b74 <__swbuf_r+0x84>
 8010b18:	6923      	ldr	r3, [r4, #16]
 8010b1a:	6820      	ldr	r0, [r4, #0]
 8010b1c:	b2f6      	uxtb	r6, r6
 8010b1e:	1ac0      	subs	r0, r0, r3
 8010b20:	6963      	ldr	r3, [r4, #20]
 8010b22:	4637      	mov	r7, r6
 8010b24:	4283      	cmp	r3, r0
 8010b26:	dc04      	bgt.n	8010b32 <__swbuf_r+0x42>
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	f000 f926 	bl	8010d7c <_fflush_r>
 8010b30:	bb30      	cbnz	r0, 8010b80 <__swbuf_r+0x90>
 8010b32:	68a3      	ldr	r3, [r4, #8]
 8010b34:	3001      	adds	r0, #1
 8010b36:	3b01      	subs	r3, #1
 8010b38:	60a3      	str	r3, [r4, #8]
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	1c5a      	adds	r2, r3, #1
 8010b3e:	6022      	str	r2, [r4, #0]
 8010b40:	701e      	strb	r6, [r3, #0]
 8010b42:	6963      	ldr	r3, [r4, #20]
 8010b44:	4283      	cmp	r3, r0
 8010b46:	d004      	beq.n	8010b52 <__swbuf_r+0x62>
 8010b48:	89a3      	ldrh	r3, [r4, #12]
 8010b4a:	07db      	lsls	r3, r3, #31
 8010b4c:	d506      	bpl.n	8010b5c <__swbuf_r+0x6c>
 8010b4e:	2e0a      	cmp	r6, #10
 8010b50:	d104      	bne.n	8010b5c <__swbuf_r+0x6c>
 8010b52:	4621      	mov	r1, r4
 8010b54:	4628      	mov	r0, r5
 8010b56:	f000 f911 	bl	8010d7c <_fflush_r>
 8010b5a:	b988      	cbnz	r0, 8010b80 <__swbuf_r+0x90>
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b60:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <__swbuf_r+0x9c>)
 8010b62:	429c      	cmp	r4, r3
 8010b64:	d101      	bne.n	8010b6a <__swbuf_r+0x7a>
 8010b66:	68ac      	ldr	r4, [r5, #8]
 8010b68:	e7cf      	b.n	8010b0a <__swbuf_r+0x1a>
 8010b6a:	4b09      	ldr	r3, [pc, #36]	; (8010b90 <__swbuf_r+0xa0>)
 8010b6c:	429c      	cmp	r4, r3
 8010b6e:	bf08      	it	eq
 8010b70:	68ec      	ldreq	r4, [r5, #12]
 8010b72:	e7ca      	b.n	8010b0a <__swbuf_r+0x1a>
 8010b74:	4621      	mov	r1, r4
 8010b76:	4628      	mov	r0, r5
 8010b78:	f000 f80c 	bl	8010b94 <__swsetup_r>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d0cb      	beq.n	8010b18 <__swbuf_r+0x28>
 8010b80:	f04f 37ff 	mov.w	r7, #4294967295
 8010b84:	e7ea      	b.n	8010b5c <__swbuf_r+0x6c>
 8010b86:	bf00      	nop
 8010b88:	080127ec 	.word	0x080127ec
 8010b8c:	0801280c 	.word	0x0801280c
 8010b90:	080127cc 	.word	0x080127cc

08010b94 <__swsetup_r>:
 8010b94:	4b32      	ldr	r3, [pc, #200]	; (8010c60 <__swsetup_r+0xcc>)
 8010b96:	b570      	push	{r4, r5, r6, lr}
 8010b98:	681d      	ldr	r5, [r3, #0]
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	b125      	cbz	r5, 8010baa <__swsetup_r+0x16>
 8010ba0:	69ab      	ldr	r3, [r5, #24]
 8010ba2:	b913      	cbnz	r3, 8010baa <__swsetup_r+0x16>
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f000 f97d 	bl	8010ea4 <__sinit>
 8010baa:	4b2e      	ldr	r3, [pc, #184]	; (8010c64 <__swsetup_r+0xd0>)
 8010bac:	429c      	cmp	r4, r3
 8010bae:	d10f      	bne.n	8010bd0 <__swsetup_r+0x3c>
 8010bb0:	686c      	ldr	r4, [r5, #4]
 8010bb2:	89a3      	ldrh	r3, [r4, #12]
 8010bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bb8:	0719      	lsls	r1, r3, #28
 8010bba:	d42c      	bmi.n	8010c16 <__swsetup_r+0x82>
 8010bbc:	06dd      	lsls	r5, r3, #27
 8010bbe:	d411      	bmi.n	8010be4 <__swsetup_r+0x50>
 8010bc0:	2309      	movs	r3, #9
 8010bc2:	6033      	str	r3, [r6, #0]
 8010bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	e03e      	b.n	8010c4e <__swsetup_r+0xba>
 8010bd0:	4b25      	ldr	r3, [pc, #148]	; (8010c68 <__swsetup_r+0xd4>)
 8010bd2:	429c      	cmp	r4, r3
 8010bd4:	d101      	bne.n	8010bda <__swsetup_r+0x46>
 8010bd6:	68ac      	ldr	r4, [r5, #8]
 8010bd8:	e7eb      	b.n	8010bb2 <__swsetup_r+0x1e>
 8010bda:	4b24      	ldr	r3, [pc, #144]	; (8010c6c <__swsetup_r+0xd8>)
 8010bdc:	429c      	cmp	r4, r3
 8010bde:	bf08      	it	eq
 8010be0:	68ec      	ldreq	r4, [r5, #12]
 8010be2:	e7e6      	b.n	8010bb2 <__swsetup_r+0x1e>
 8010be4:	0758      	lsls	r0, r3, #29
 8010be6:	d512      	bpl.n	8010c0e <__swsetup_r+0x7a>
 8010be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bea:	b141      	cbz	r1, 8010bfe <__swsetup_r+0x6a>
 8010bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bf0:	4299      	cmp	r1, r3
 8010bf2:	d002      	beq.n	8010bfa <__swsetup_r+0x66>
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f7ff fe17 	bl	8010828 <_free_r>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8010bfe:	89a3      	ldrh	r3, [r4, #12]
 8010c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c04:	81a3      	strh	r3, [r4, #12]
 8010c06:	2300      	movs	r3, #0
 8010c08:	6063      	str	r3, [r4, #4]
 8010c0a:	6923      	ldr	r3, [r4, #16]
 8010c0c:	6023      	str	r3, [r4, #0]
 8010c0e:	89a3      	ldrh	r3, [r4, #12]
 8010c10:	f043 0308 	orr.w	r3, r3, #8
 8010c14:	81a3      	strh	r3, [r4, #12]
 8010c16:	6923      	ldr	r3, [r4, #16]
 8010c18:	b94b      	cbnz	r3, 8010c2e <__swsetup_r+0x9a>
 8010c1a:	89a3      	ldrh	r3, [r4, #12]
 8010c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c24:	d003      	beq.n	8010c2e <__swsetup_r+0x9a>
 8010c26:	4621      	mov	r1, r4
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f000 f9ff 	bl	801102c <__smakebuf_r>
 8010c2e:	89a0      	ldrh	r0, [r4, #12]
 8010c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c34:	f010 0301 	ands.w	r3, r0, #1
 8010c38:	d00a      	beq.n	8010c50 <__swsetup_r+0xbc>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	60a3      	str	r3, [r4, #8]
 8010c3e:	6963      	ldr	r3, [r4, #20]
 8010c40:	425b      	negs	r3, r3
 8010c42:	61a3      	str	r3, [r4, #24]
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	b943      	cbnz	r3, 8010c5a <__swsetup_r+0xc6>
 8010c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c4c:	d1ba      	bne.n	8010bc4 <__swsetup_r+0x30>
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
 8010c50:	0781      	lsls	r1, r0, #30
 8010c52:	bf58      	it	pl
 8010c54:	6963      	ldrpl	r3, [r4, #20]
 8010c56:	60a3      	str	r3, [r4, #8]
 8010c58:	e7f4      	b.n	8010c44 <__swsetup_r+0xb0>
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	e7f7      	b.n	8010c4e <__swsetup_r+0xba>
 8010c5e:	bf00      	nop
 8010c60:	20000024 	.word	0x20000024
 8010c64:	080127ec 	.word	0x080127ec
 8010c68:	0801280c 	.word	0x0801280c
 8010c6c:	080127cc 	.word	0x080127cc

08010c70 <__sflush_r>:
 8010c70:	898a      	ldrh	r2, [r1, #12]
 8010c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c76:	4605      	mov	r5, r0
 8010c78:	0710      	lsls	r0, r2, #28
 8010c7a:	460c      	mov	r4, r1
 8010c7c:	d458      	bmi.n	8010d30 <__sflush_r+0xc0>
 8010c7e:	684b      	ldr	r3, [r1, #4]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	dc05      	bgt.n	8010c90 <__sflush_r+0x20>
 8010c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	dc02      	bgt.n	8010c90 <__sflush_r+0x20>
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c92:	2e00      	cmp	r6, #0
 8010c94:	d0f9      	beq.n	8010c8a <__sflush_r+0x1a>
 8010c96:	2300      	movs	r3, #0
 8010c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c9c:	682f      	ldr	r7, [r5, #0]
 8010c9e:	602b      	str	r3, [r5, #0]
 8010ca0:	d032      	beq.n	8010d08 <__sflush_r+0x98>
 8010ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	075a      	lsls	r2, r3, #29
 8010ca8:	d505      	bpl.n	8010cb6 <__sflush_r+0x46>
 8010caa:	6863      	ldr	r3, [r4, #4]
 8010cac:	1ac0      	subs	r0, r0, r3
 8010cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cb0:	b10b      	cbz	r3, 8010cb6 <__sflush_r+0x46>
 8010cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cb4:	1ac0      	subs	r0, r0, r3
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	4602      	mov	r2, r0
 8010cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	6a21      	ldr	r1, [r4, #32]
 8010cc0:	47b0      	blx	r6
 8010cc2:	1c43      	adds	r3, r0, #1
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	d106      	bne.n	8010cd6 <__sflush_r+0x66>
 8010cc8:	6829      	ldr	r1, [r5, #0]
 8010cca:	291d      	cmp	r1, #29
 8010ccc:	d82c      	bhi.n	8010d28 <__sflush_r+0xb8>
 8010cce:	4a2a      	ldr	r2, [pc, #168]	; (8010d78 <__sflush_r+0x108>)
 8010cd0:	40ca      	lsrs	r2, r1
 8010cd2:	07d6      	lsls	r6, r2, #31
 8010cd4:	d528      	bpl.n	8010d28 <__sflush_r+0xb8>
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	6062      	str	r2, [r4, #4]
 8010cda:	6922      	ldr	r2, [r4, #16]
 8010cdc:	04d9      	lsls	r1, r3, #19
 8010cde:	6022      	str	r2, [r4, #0]
 8010ce0:	d504      	bpl.n	8010cec <__sflush_r+0x7c>
 8010ce2:	1c42      	adds	r2, r0, #1
 8010ce4:	d101      	bne.n	8010cea <__sflush_r+0x7a>
 8010ce6:	682b      	ldr	r3, [r5, #0]
 8010ce8:	b903      	cbnz	r3, 8010cec <__sflush_r+0x7c>
 8010cea:	6560      	str	r0, [r4, #84]	; 0x54
 8010cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cee:	602f      	str	r7, [r5, #0]
 8010cf0:	2900      	cmp	r1, #0
 8010cf2:	d0ca      	beq.n	8010c8a <__sflush_r+0x1a>
 8010cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cf8:	4299      	cmp	r1, r3
 8010cfa:	d002      	beq.n	8010d02 <__sflush_r+0x92>
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f7ff fd93 	bl	8010828 <_free_r>
 8010d02:	2000      	movs	r0, #0
 8010d04:	6360      	str	r0, [r4, #52]	; 0x34
 8010d06:	e7c1      	b.n	8010c8c <__sflush_r+0x1c>
 8010d08:	6a21      	ldr	r1, [r4, #32]
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	47b0      	blx	r6
 8010d10:	1c41      	adds	r1, r0, #1
 8010d12:	d1c7      	bne.n	8010ca4 <__sflush_r+0x34>
 8010d14:	682b      	ldr	r3, [r5, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d0c4      	beq.n	8010ca4 <__sflush_r+0x34>
 8010d1a:	2b1d      	cmp	r3, #29
 8010d1c:	d001      	beq.n	8010d22 <__sflush_r+0xb2>
 8010d1e:	2b16      	cmp	r3, #22
 8010d20:	d101      	bne.n	8010d26 <__sflush_r+0xb6>
 8010d22:	602f      	str	r7, [r5, #0]
 8010d24:	e7b1      	b.n	8010c8a <__sflush_r+0x1a>
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d2c:	81a3      	strh	r3, [r4, #12]
 8010d2e:	e7ad      	b.n	8010c8c <__sflush_r+0x1c>
 8010d30:	690f      	ldr	r7, [r1, #16]
 8010d32:	2f00      	cmp	r7, #0
 8010d34:	d0a9      	beq.n	8010c8a <__sflush_r+0x1a>
 8010d36:	0793      	lsls	r3, r2, #30
 8010d38:	bf18      	it	ne
 8010d3a:	2300      	movne	r3, #0
 8010d3c:	680e      	ldr	r6, [r1, #0]
 8010d3e:	bf08      	it	eq
 8010d40:	694b      	ldreq	r3, [r1, #20]
 8010d42:	eba6 0807 	sub.w	r8, r6, r7
 8010d46:	600f      	str	r7, [r1, #0]
 8010d48:	608b      	str	r3, [r1, #8]
 8010d4a:	f1b8 0f00 	cmp.w	r8, #0
 8010d4e:	dd9c      	ble.n	8010c8a <__sflush_r+0x1a>
 8010d50:	4643      	mov	r3, r8
 8010d52:	463a      	mov	r2, r7
 8010d54:	4628      	mov	r0, r5
 8010d56:	6a21      	ldr	r1, [r4, #32]
 8010d58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d5a:	47b0      	blx	r6
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	dc06      	bgt.n	8010d6e <__sflush_r+0xfe>
 8010d60:	89a3      	ldrh	r3, [r4, #12]
 8010d62:	f04f 30ff 	mov.w	r0, #4294967295
 8010d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d6a:	81a3      	strh	r3, [r4, #12]
 8010d6c:	e78e      	b.n	8010c8c <__sflush_r+0x1c>
 8010d6e:	4407      	add	r7, r0
 8010d70:	eba8 0800 	sub.w	r8, r8, r0
 8010d74:	e7e9      	b.n	8010d4a <__sflush_r+0xda>
 8010d76:	bf00      	nop
 8010d78:	20400001 	.word	0x20400001

08010d7c <_fflush_r>:
 8010d7c:	b538      	push	{r3, r4, r5, lr}
 8010d7e:	690b      	ldr	r3, [r1, #16]
 8010d80:	4605      	mov	r5, r0
 8010d82:	460c      	mov	r4, r1
 8010d84:	b913      	cbnz	r3, 8010d8c <_fflush_r+0x10>
 8010d86:	2500      	movs	r5, #0
 8010d88:	4628      	mov	r0, r5
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	b118      	cbz	r0, 8010d96 <_fflush_r+0x1a>
 8010d8e:	6983      	ldr	r3, [r0, #24]
 8010d90:	b90b      	cbnz	r3, 8010d96 <_fflush_r+0x1a>
 8010d92:	f000 f887 	bl	8010ea4 <__sinit>
 8010d96:	4b14      	ldr	r3, [pc, #80]	; (8010de8 <_fflush_r+0x6c>)
 8010d98:	429c      	cmp	r4, r3
 8010d9a:	d11b      	bne.n	8010dd4 <_fflush_r+0x58>
 8010d9c:	686c      	ldr	r4, [r5, #4]
 8010d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d0ef      	beq.n	8010d86 <_fflush_r+0xa>
 8010da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010da8:	07d0      	lsls	r0, r2, #31
 8010daa:	d404      	bmi.n	8010db6 <_fflush_r+0x3a>
 8010dac:	0599      	lsls	r1, r3, #22
 8010dae:	d402      	bmi.n	8010db6 <_fflush_r+0x3a>
 8010db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010db2:	f000 f915 	bl	8010fe0 <__retarget_lock_acquire_recursive>
 8010db6:	4628      	mov	r0, r5
 8010db8:	4621      	mov	r1, r4
 8010dba:	f7ff ff59 	bl	8010c70 <__sflush_r>
 8010dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	07da      	lsls	r2, r3, #31
 8010dc4:	d4e0      	bmi.n	8010d88 <_fflush_r+0xc>
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	059b      	lsls	r3, r3, #22
 8010dca:	d4dd      	bmi.n	8010d88 <_fflush_r+0xc>
 8010dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dce:	f000 f908 	bl	8010fe2 <__retarget_lock_release_recursive>
 8010dd2:	e7d9      	b.n	8010d88 <_fflush_r+0xc>
 8010dd4:	4b05      	ldr	r3, [pc, #20]	; (8010dec <_fflush_r+0x70>)
 8010dd6:	429c      	cmp	r4, r3
 8010dd8:	d101      	bne.n	8010dde <_fflush_r+0x62>
 8010dda:	68ac      	ldr	r4, [r5, #8]
 8010ddc:	e7df      	b.n	8010d9e <_fflush_r+0x22>
 8010dde:	4b04      	ldr	r3, [pc, #16]	; (8010df0 <_fflush_r+0x74>)
 8010de0:	429c      	cmp	r4, r3
 8010de2:	bf08      	it	eq
 8010de4:	68ec      	ldreq	r4, [r5, #12]
 8010de6:	e7da      	b.n	8010d9e <_fflush_r+0x22>
 8010de8:	080127ec 	.word	0x080127ec
 8010dec:	0801280c 	.word	0x0801280c
 8010df0:	080127cc 	.word	0x080127cc

08010df4 <std>:
 8010df4:	2300      	movs	r3, #0
 8010df6:	b510      	push	{r4, lr}
 8010df8:	4604      	mov	r4, r0
 8010dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8010dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e02:	6083      	str	r3, [r0, #8]
 8010e04:	8181      	strh	r1, [r0, #12]
 8010e06:	6643      	str	r3, [r0, #100]	; 0x64
 8010e08:	81c2      	strh	r2, [r0, #14]
 8010e0a:	6183      	str	r3, [r0, #24]
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	2208      	movs	r2, #8
 8010e10:	305c      	adds	r0, #92	; 0x5c
 8010e12:	f7ff fd01 	bl	8010818 <memset>
 8010e16:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <std+0x38>)
 8010e18:	6224      	str	r4, [r4, #32]
 8010e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8010e1c:	4b04      	ldr	r3, [pc, #16]	; (8010e30 <std+0x3c>)
 8010e1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e20:	4b04      	ldr	r3, [pc, #16]	; (8010e34 <std+0x40>)
 8010e22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e24:	4b04      	ldr	r3, [pc, #16]	; (8010e38 <std+0x44>)
 8010e26:	6323      	str	r3, [r4, #48]	; 0x30
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	bf00      	nop
 8010e2c:	08011959 	.word	0x08011959
 8010e30:	0801197b 	.word	0x0801197b
 8010e34:	080119b3 	.word	0x080119b3
 8010e38:	080119d7 	.word	0x080119d7

08010e3c <_cleanup_r>:
 8010e3c:	4901      	ldr	r1, [pc, #4]	; (8010e44 <_cleanup_r+0x8>)
 8010e3e:	f000 b8af 	b.w	8010fa0 <_fwalk_reent>
 8010e42:	bf00      	nop
 8010e44:	08010d7d 	.word	0x08010d7d

08010e48 <__sfmoreglue>:
 8010e48:	b570      	push	{r4, r5, r6, lr}
 8010e4a:	2568      	movs	r5, #104	; 0x68
 8010e4c:	1e4a      	subs	r2, r1, #1
 8010e4e:	4355      	muls	r5, r2
 8010e50:	460e      	mov	r6, r1
 8010e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e56:	f7ff fd33 	bl	80108c0 <_malloc_r>
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	b140      	cbz	r0, 8010e70 <__sfmoreglue+0x28>
 8010e5e:	2100      	movs	r1, #0
 8010e60:	e9c0 1600 	strd	r1, r6, [r0]
 8010e64:	300c      	adds	r0, #12
 8010e66:	60a0      	str	r0, [r4, #8]
 8010e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e6c:	f7ff fcd4 	bl	8010818 <memset>
 8010e70:	4620      	mov	r0, r4
 8010e72:	bd70      	pop	{r4, r5, r6, pc}

08010e74 <__sfp_lock_acquire>:
 8010e74:	4801      	ldr	r0, [pc, #4]	; (8010e7c <__sfp_lock_acquire+0x8>)
 8010e76:	f000 b8b3 	b.w	8010fe0 <__retarget_lock_acquire_recursive>
 8010e7a:	bf00      	nop
 8010e7c:	20001bd4 	.word	0x20001bd4

08010e80 <__sfp_lock_release>:
 8010e80:	4801      	ldr	r0, [pc, #4]	; (8010e88 <__sfp_lock_release+0x8>)
 8010e82:	f000 b8ae 	b.w	8010fe2 <__retarget_lock_release_recursive>
 8010e86:	bf00      	nop
 8010e88:	20001bd4 	.word	0x20001bd4

08010e8c <__sinit_lock_acquire>:
 8010e8c:	4801      	ldr	r0, [pc, #4]	; (8010e94 <__sinit_lock_acquire+0x8>)
 8010e8e:	f000 b8a7 	b.w	8010fe0 <__retarget_lock_acquire_recursive>
 8010e92:	bf00      	nop
 8010e94:	20001bcf 	.word	0x20001bcf

08010e98 <__sinit_lock_release>:
 8010e98:	4801      	ldr	r0, [pc, #4]	; (8010ea0 <__sinit_lock_release+0x8>)
 8010e9a:	f000 b8a2 	b.w	8010fe2 <__retarget_lock_release_recursive>
 8010e9e:	bf00      	nop
 8010ea0:	20001bcf 	.word	0x20001bcf

08010ea4 <__sinit>:
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	f7ff fff0 	bl	8010e8c <__sinit_lock_acquire>
 8010eac:	69a3      	ldr	r3, [r4, #24]
 8010eae:	b11b      	cbz	r3, 8010eb8 <__sinit+0x14>
 8010eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eb4:	f7ff bff0 	b.w	8010e98 <__sinit_lock_release>
 8010eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8010ebe:	4b13      	ldr	r3, [pc, #76]	; (8010f0c <__sinit+0x68>)
 8010ec0:	4a13      	ldr	r2, [pc, #76]	; (8010f10 <__sinit+0x6c>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ec6:	42a3      	cmp	r3, r4
 8010ec8:	bf08      	it	eq
 8010eca:	2301      	moveq	r3, #1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	bf08      	it	eq
 8010ed0:	61a3      	streq	r3, [r4, #24]
 8010ed2:	f000 f81f 	bl	8010f14 <__sfp>
 8010ed6:	6060      	str	r0, [r4, #4]
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f000 f81b 	bl	8010f14 <__sfp>
 8010ede:	60a0      	str	r0, [r4, #8]
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f000 f817 	bl	8010f14 <__sfp>
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	2104      	movs	r1, #4
 8010eea:	60e0      	str	r0, [r4, #12]
 8010eec:	6860      	ldr	r0, [r4, #4]
 8010eee:	f7ff ff81 	bl	8010df4 <std>
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	2109      	movs	r1, #9
 8010ef6:	68a0      	ldr	r0, [r4, #8]
 8010ef8:	f7ff ff7c 	bl	8010df4 <std>
 8010efc:	2202      	movs	r2, #2
 8010efe:	2112      	movs	r1, #18
 8010f00:	68e0      	ldr	r0, [r4, #12]
 8010f02:	f7ff ff77 	bl	8010df4 <std>
 8010f06:	2301      	movs	r3, #1
 8010f08:	61a3      	str	r3, [r4, #24]
 8010f0a:	e7d1      	b.n	8010eb0 <__sinit+0xc>
 8010f0c:	080127c8 	.word	0x080127c8
 8010f10:	08010e3d 	.word	0x08010e3d

08010f14 <__sfp>:
 8010f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f16:	4607      	mov	r7, r0
 8010f18:	f7ff ffac 	bl	8010e74 <__sfp_lock_acquire>
 8010f1c:	4b1e      	ldr	r3, [pc, #120]	; (8010f98 <__sfp+0x84>)
 8010f1e:	681e      	ldr	r6, [r3, #0]
 8010f20:	69b3      	ldr	r3, [r6, #24]
 8010f22:	b913      	cbnz	r3, 8010f2a <__sfp+0x16>
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7ff ffbd 	bl	8010ea4 <__sinit>
 8010f2a:	3648      	adds	r6, #72	; 0x48
 8010f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	d503      	bpl.n	8010f3c <__sfp+0x28>
 8010f34:	6833      	ldr	r3, [r6, #0]
 8010f36:	b30b      	cbz	r3, 8010f7c <__sfp+0x68>
 8010f38:	6836      	ldr	r6, [r6, #0]
 8010f3a:	e7f7      	b.n	8010f2c <__sfp+0x18>
 8010f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f40:	b9d5      	cbnz	r5, 8010f78 <__sfp+0x64>
 8010f42:	4b16      	ldr	r3, [pc, #88]	; (8010f9c <__sfp+0x88>)
 8010f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f48:	60e3      	str	r3, [r4, #12]
 8010f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8010f4c:	f000 f847 	bl	8010fde <__retarget_lock_init_recursive>
 8010f50:	f7ff ff96 	bl	8010e80 <__sfp_lock_release>
 8010f54:	2208      	movs	r2, #8
 8010f56:	4629      	mov	r1, r5
 8010f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f60:	6025      	str	r5, [r4, #0]
 8010f62:	61a5      	str	r5, [r4, #24]
 8010f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f68:	f7ff fc56 	bl	8010818 <memset>
 8010f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f74:	4620      	mov	r0, r4
 8010f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f78:	3468      	adds	r4, #104	; 0x68
 8010f7a:	e7d9      	b.n	8010f30 <__sfp+0x1c>
 8010f7c:	2104      	movs	r1, #4
 8010f7e:	4638      	mov	r0, r7
 8010f80:	f7ff ff62 	bl	8010e48 <__sfmoreglue>
 8010f84:	4604      	mov	r4, r0
 8010f86:	6030      	str	r0, [r6, #0]
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d1d5      	bne.n	8010f38 <__sfp+0x24>
 8010f8c:	f7ff ff78 	bl	8010e80 <__sfp_lock_release>
 8010f90:	230c      	movs	r3, #12
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	e7ee      	b.n	8010f74 <__sfp+0x60>
 8010f96:	bf00      	nop
 8010f98:	080127c8 	.word	0x080127c8
 8010f9c:	ffff0001 	.word	0xffff0001

08010fa0 <_fwalk_reent>:
 8010fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	4688      	mov	r8, r1
 8010fa8:	2700      	movs	r7, #0
 8010faa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8010fb6:	d505      	bpl.n	8010fc4 <_fwalk_reent+0x24>
 8010fb8:	6824      	ldr	r4, [r4, #0]
 8010fba:	2c00      	cmp	r4, #0
 8010fbc:	d1f7      	bne.n	8010fae <_fwalk_reent+0xe>
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fc4:	89ab      	ldrh	r3, [r5, #12]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d907      	bls.n	8010fda <_fwalk_reent+0x3a>
 8010fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fce:	3301      	adds	r3, #1
 8010fd0:	d003      	beq.n	8010fda <_fwalk_reent+0x3a>
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	47c0      	blx	r8
 8010fd8:	4307      	orrs	r7, r0
 8010fda:	3568      	adds	r5, #104	; 0x68
 8010fdc:	e7e9      	b.n	8010fb2 <_fwalk_reent+0x12>

08010fde <__retarget_lock_init_recursive>:
 8010fde:	4770      	bx	lr

08010fe0 <__retarget_lock_acquire_recursive>:
 8010fe0:	4770      	bx	lr

08010fe2 <__retarget_lock_release_recursive>:
 8010fe2:	4770      	bx	lr

08010fe4 <__swhatbuf_r>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	460e      	mov	r6, r1
 8010fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fec:	4614      	mov	r4, r2
 8010fee:	2900      	cmp	r1, #0
 8010ff0:	461d      	mov	r5, r3
 8010ff2:	b096      	sub	sp, #88	; 0x58
 8010ff4:	da07      	bge.n	8011006 <__swhatbuf_r+0x22>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	602b      	str	r3, [r5, #0]
 8010ffa:	89b3      	ldrh	r3, [r6, #12]
 8010ffc:	061a      	lsls	r2, r3, #24
 8010ffe:	d410      	bmi.n	8011022 <__swhatbuf_r+0x3e>
 8011000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011004:	e00e      	b.n	8011024 <__swhatbuf_r+0x40>
 8011006:	466a      	mov	r2, sp
 8011008:	f000 fd0c 	bl	8011a24 <_fstat_r>
 801100c:	2800      	cmp	r0, #0
 801100e:	dbf2      	blt.n	8010ff6 <__swhatbuf_r+0x12>
 8011010:	9a01      	ldr	r2, [sp, #4]
 8011012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801101a:	425a      	negs	r2, r3
 801101c:	415a      	adcs	r2, r3
 801101e:	602a      	str	r2, [r5, #0]
 8011020:	e7ee      	b.n	8011000 <__swhatbuf_r+0x1c>
 8011022:	2340      	movs	r3, #64	; 0x40
 8011024:	2000      	movs	r0, #0
 8011026:	6023      	str	r3, [r4, #0]
 8011028:	b016      	add	sp, #88	; 0x58
 801102a:	bd70      	pop	{r4, r5, r6, pc}

0801102c <__smakebuf_r>:
 801102c:	898b      	ldrh	r3, [r1, #12]
 801102e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011030:	079d      	lsls	r5, r3, #30
 8011032:	4606      	mov	r6, r0
 8011034:	460c      	mov	r4, r1
 8011036:	d507      	bpl.n	8011048 <__smakebuf_r+0x1c>
 8011038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801103c:	6023      	str	r3, [r4, #0]
 801103e:	6123      	str	r3, [r4, #16]
 8011040:	2301      	movs	r3, #1
 8011042:	6163      	str	r3, [r4, #20]
 8011044:	b002      	add	sp, #8
 8011046:	bd70      	pop	{r4, r5, r6, pc}
 8011048:	466a      	mov	r2, sp
 801104a:	ab01      	add	r3, sp, #4
 801104c:	f7ff ffca 	bl	8010fe4 <__swhatbuf_r>
 8011050:	9900      	ldr	r1, [sp, #0]
 8011052:	4605      	mov	r5, r0
 8011054:	4630      	mov	r0, r6
 8011056:	f7ff fc33 	bl	80108c0 <_malloc_r>
 801105a:	b948      	cbnz	r0, 8011070 <__smakebuf_r+0x44>
 801105c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011060:	059a      	lsls	r2, r3, #22
 8011062:	d4ef      	bmi.n	8011044 <__smakebuf_r+0x18>
 8011064:	f023 0303 	bic.w	r3, r3, #3
 8011068:	f043 0302 	orr.w	r3, r3, #2
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	e7e3      	b.n	8011038 <__smakebuf_r+0xc>
 8011070:	4b0d      	ldr	r3, [pc, #52]	; (80110a8 <__smakebuf_r+0x7c>)
 8011072:	62b3      	str	r3, [r6, #40]	; 0x28
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	6020      	str	r0, [r4, #0]
 8011078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	9b00      	ldr	r3, [sp, #0]
 8011080:	6120      	str	r0, [r4, #16]
 8011082:	6163      	str	r3, [r4, #20]
 8011084:	9b01      	ldr	r3, [sp, #4]
 8011086:	b15b      	cbz	r3, 80110a0 <__smakebuf_r+0x74>
 8011088:	4630      	mov	r0, r6
 801108a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801108e:	f000 fcdb 	bl	8011a48 <_isatty_r>
 8011092:	b128      	cbz	r0, 80110a0 <__smakebuf_r+0x74>
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	f023 0303 	bic.w	r3, r3, #3
 801109a:	f043 0301 	orr.w	r3, r3, #1
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	89a0      	ldrh	r0, [r4, #12]
 80110a2:	4305      	orrs	r5, r0
 80110a4:	81a5      	strh	r5, [r4, #12]
 80110a6:	e7cd      	b.n	8011044 <__smakebuf_r+0x18>
 80110a8:	08010e3d 	.word	0x08010e3d

080110ac <__malloc_lock>:
 80110ac:	4801      	ldr	r0, [pc, #4]	; (80110b4 <__malloc_lock+0x8>)
 80110ae:	f7ff bf97 	b.w	8010fe0 <__retarget_lock_acquire_recursive>
 80110b2:	bf00      	nop
 80110b4:	20001bd0 	.word	0x20001bd0

080110b8 <__malloc_unlock>:
 80110b8:	4801      	ldr	r0, [pc, #4]	; (80110c0 <__malloc_unlock+0x8>)
 80110ba:	f7ff bf92 	b.w	8010fe2 <__retarget_lock_release_recursive>
 80110be:	bf00      	nop
 80110c0:	20001bd0 	.word	0x20001bd0

080110c4 <__ssputs_r>:
 80110c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c8:	688e      	ldr	r6, [r1, #8]
 80110ca:	4682      	mov	sl, r0
 80110cc:	429e      	cmp	r6, r3
 80110ce:	460c      	mov	r4, r1
 80110d0:	4690      	mov	r8, r2
 80110d2:	461f      	mov	r7, r3
 80110d4:	d838      	bhi.n	8011148 <__ssputs_r+0x84>
 80110d6:	898a      	ldrh	r2, [r1, #12]
 80110d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110dc:	d032      	beq.n	8011144 <__ssputs_r+0x80>
 80110de:	6825      	ldr	r5, [r4, #0]
 80110e0:	6909      	ldr	r1, [r1, #16]
 80110e2:	3301      	adds	r3, #1
 80110e4:	eba5 0901 	sub.w	r9, r5, r1
 80110e8:	6965      	ldr	r5, [r4, #20]
 80110ea:	444b      	add	r3, r9
 80110ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110f4:	106d      	asrs	r5, r5, #1
 80110f6:	429d      	cmp	r5, r3
 80110f8:	bf38      	it	cc
 80110fa:	461d      	movcc	r5, r3
 80110fc:	0553      	lsls	r3, r2, #21
 80110fe:	d531      	bpl.n	8011164 <__ssputs_r+0xa0>
 8011100:	4629      	mov	r1, r5
 8011102:	f7ff fbdd 	bl	80108c0 <_malloc_r>
 8011106:	4606      	mov	r6, r0
 8011108:	b950      	cbnz	r0, 8011120 <__ssputs_r+0x5c>
 801110a:	230c      	movs	r3, #12
 801110c:	f04f 30ff 	mov.w	r0, #4294967295
 8011110:	f8ca 3000 	str.w	r3, [sl]
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801111a:	81a3      	strh	r3, [r4, #12]
 801111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011120:	464a      	mov	r2, r9
 8011122:	6921      	ldr	r1, [r4, #16]
 8011124:	f7ff fb6a 	bl	80107fc <memcpy>
 8011128:	89a3      	ldrh	r3, [r4, #12]
 801112a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801112e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011132:	81a3      	strh	r3, [r4, #12]
 8011134:	6126      	str	r6, [r4, #16]
 8011136:	444e      	add	r6, r9
 8011138:	6026      	str	r6, [r4, #0]
 801113a:	463e      	mov	r6, r7
 801113c:	6165      	str	r5, [r4, #20]
 801113e:	eba5 0509 	sub.w	r5, r5, r9
 8011142:	60a5      	str	r5, [r4, #8]
 8011144:	42be      	cmp	r6, r7
 8011146:	d900      	bls.n	801114a <__ssputs_r+0x86>
 8011148:	463e      	mov	r6, r7
 801114a:	4632      	mov	r2, r6
 801114c:	4641      	mov	r1, r8
 801114e:	6820      	ldr	r0, [r4, #0]
 8011150:	f000 fcaa 	bl	8011aa8 <memmove>
 8011154:	68a3      	ldr	r3, [r4, #8]
 8011156:	6822      	ldr	r2, [r4, #0]
 8011158:	1b9b      	subs	r3, r3, r6
 801115a:	4432      	add	r2, r6
 801115c:	2000      	movs	r0, #0
 801115e:	60a3      	str	r3, [r4, #8]
 8011160:	6022      	str	r2, [r4, #0]
 8011162:	e7db      	b.n	801111c <__ssputs_r+0x58>
 8011164:	462a      	mov	r2, r5
 8011166:	f000 fcb9 	bl	8011adc <_realloc_r>
 801116a:	4606      	mov	r6, r0
 801116c:	2800      	cmp	r0, #0
 801116e:	d1e1      	bne.n	8011134 <__ssputs_r+0x70>
 8011170:	4650      	mov	r0, sl
 8011172:	6921      	ldr	r1, [r4, #16]
 8011174:	f7ff fb58 	bl	8010828 <_free_r>
 8011178:	e7c7      	b.n	801110a <__ssputs_r+0x46>
	...

0801117c <_svfiprintf_r>:
 801117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011180:	4698      	mov	r8, r3
 8011182:	898b      	ldrh	r3, [r1, #12]
 8011184:	4607      	mov	r7, r0
 8011186:	061b      	lsls	r3, r3, #24
 8011188:	460d      	mov	r5, r1
 801118a:	4614      	mov	r4, r2
 801118c:	b09d      	sub	sp, #116	; 0x74
 801118e:	d50e      	bpl.n	80111ae <_svfiprintf_r+0x32>
 8011190:	690b      	ldr	r3, [r1, #16]
 8011192:	b963      	cbnz	r3, 80111ae <_svfiprintf_r+0x32>
 8011194:	2140      	movs	r1, #64	; 0x40
 8011196:	f7ff fb93 	bl	80108c0 <_malloc_r>
 801119a:	6028      	str	r0, [r5, #0]
 801119c:	6128      	str	r0, [r5, #16]
 801119e:	b920      	cbnz	r0, 80111aa <_svfiprintf_r+0x2e>
 80111a0:	230c      	movs	r3, #12
 80111a2:	603b      	str	r3, [r7, #0]
 80111a4:	f04f 30ff 	mov.w	r0, #4294967295
 80111a8:	e0d1      	b.n	801134e <_svfiprintf_r+0x1d2>
 80111aa:	2340      	movs	r3, #64	; 0x40
 80111ac:	616b      	str	r3, [r5, #20]
 80111ae:	2300      	movs	r3, #0
 80111b0:	9309      	str	r3, [sp, #36]	; 0x24
 80111b2:	2320      	movs	r3, #32
 80111b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111b8:	2330      	movs	r3, #48	; 0x30
 80111ba:	f04f 0901 	mov.w	r9, #1
 80111be:	f8cd 800c 	str.w	r8, [sp, #12]
 80111c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011368 <_svfiprintf_r+0x1ec>
 80111c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111ca:	4623      	mov	r3, r4
 80111cc:	469a      	mov	sl, r3
 80111ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111d2:	b10a      	cbz	r2, 80111d8 <_svfiprintf_r+0x5c>
 80111d4:	2a25      	cmp	r2, #37	; 0x25
 80111d6:	d1f9      	bne.n	80111cc <_svfiprintf_r+0x50>
 80111d8:	ebba 0b04 	subs.w	fp, sl, r4
 80111dc:	d00b      	beq.n	80111f6 <_svfiprintf_r+0x7a>
 80111de:	465b      	mov	r3, fp
 80111e0:	4622      	mov	r2, r4
 80111e2:	4629      	mov	r1, r5
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7ff ff6d 	bl	80110c4 <__ssputs_r>
 80111ea:	3001      	adds	r0, #1
 80111ec:	f000 80aa 	beq.w	8011344 <_svfiprintf_r+0x1c8>
 80111f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111f2:	445a      	add	r2, fp
 80111f4:	9209      	str	r2, [sp, #36]	; 0x24
 80111f6:	f89a 3000 	ldrb.w	r3, [sl]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	f000 80a2 	beq.w	8011344 <_svfiprintf_r+0x1c8>
 8011200:	2300      	movs	r3, #0
 8011202:	f04f 32ff 	mov.w	r2, #4294967295
 8011206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801120a:	f10a 0a01 	add.w	sl, sl, #1
 801120e:	9304      	str	r3, [sp, #16]
 8011210:	9307      	str	r3, [sp, #28]
 8011212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011216:	931a      	str	r3, [sp, #104]	; 0x68
 8011218:	4654      	mov	r4, sl
 801121a:	2205      	movs	r2, #5
 801121c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011220:	4851      	ldr	r0, [pc, #324]	; (8011368 <_svfiprintf_r+0x1ec>)
 8011222:	f000 fc33 	bl	8011a8c <memchr>
 8011226:	9a04      	ldr	r2, [sp, #16]
 8011228:	b9d8      	cbnz	r0, 8011262 <_svfiprintf_r+0xe6>
 801122a:	06d0      	lsls	r0, r2, #27
 801122c:	bf44      	itt	mi
 801122e:	2320      	movmi	r3, #32
 8011230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011234:	0711      	lsls	r1, r2, #28
 8011236:	bf44      	itt	mi
 8011238:	232b      	movmi	r3, #43	; 0x2b
 801123a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801123e:	f89a 3000 	ldrb.w	r3, [sl]
 8011242:	2b2a      	cmp	r3, #42	; 0x2a
 8011244:	d015      	beq.n	8011272 <_svfiprintf_r+0xf6>
 8011246:	4654      	mov	r4, sl
 8011248:	2000      	movs	r0, #0
 801124a:	f04f 0c0a 	mov.w	ip, #10
 801124e:	9a07      	ldr	r2, [sp, #28]
 8011250:	4621      	mov	r1, r4
 8011252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011256:	3b30      	subs	r3, #48	; 0x30
 8011258:	2b09      	cmp	r3, #9
 801125a:	d94e      	bls.n	80112fa <_svfiprintf_r+0x17e>
 801125c:	b1b0      	cbz	r0, 801128c <_svfiprintf_r+0x110>
 801125e:	9207      	str	r2, [sp, #28]
 8011260:	e014      	b.n	801128c <_svfiprintf_r+0x110>
 8011262:	eba0 0308 	sub.w	r3, r0, r8
 8011266:	fa09 f303 	lsl.w	r3, r9, r3
 801126a:	4313      	orrs	r3, r2
 801126c:	46a2      	mov	sl, r4
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	e7d2      	b.n	8011218 <_svfiprintf_r+0x9c>
 8011272:	9b03      	ldr	r3, [sp, #12]
 8011274:	1d19      	adds	r1, r3, #4
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	9103      	str	r1, [sp, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	bfbb      	ittet	lt
 801127e:	425b      	neglt	r3, r3
 8011280:	f042 0202 	orrlt.w	r2, r2, #2
 8011284:	9307      	strge	r3, [sp, #28]
 8011286:	9307      	strlt	r3, [sp, #28]
 8011288:	bfb8      	it	lt
 801128a:	9204      	strlt	r2, [sp, #16]
 801128c:	7823      	ldrb	r3, [r4, #0]
 801128e:	2b2e      	cmp	r3, #46	; 0x2e
 8011290:	d10c      	bne.n	80112ac <_svfiprintf_r+0x130>
 8011292:	7863      	ldrb	r3, [r4, #1]
 8011294:	2b2a      	cmp	r3, #42	; 0x2a
 8011296:	d135      	bne.n	8011304 <_svfiprintf_r+0x188>
 8011298:	9b03      	ldr	r3, [sp, #12]
 801129a:	3402      	adds	r4, #2
 801129c:	1d1a      	adds	r2, r3, #4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	9203      	str	r2, [sp, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	bfb8      	it	lt
 80112a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80112aa:	9305      	str	r3, [sp, #20]
 80112ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011378 <_svfiprintf_r+0x1fc>
 80112b0:	2203      	movs	r2, #3
 80112b2:	4650      	mov	r0, sl
 80112b4:	7821      	ldrb	r1, [r4, #0]
 80112b6:	f000 fbe9 	bl	8011a8c <memchr>
 80112ba:	b140      	cbz	r0, 80112ce <_svfiprintf_r+0x152>
 80112bc:	2340      	movs	r3, #64	; 0x40
 80112be:	eba0 000a 	sub.w	r0, r0, sl
 80112c2:	fa03 f000 	lsl.w	r0, r3, r0
 80112c6:	9b04      	ldr	r3, [sp, #16]
 80112c8:	3401      	adds	r4, #1
 80112ca:	4303      	orrs	r3, r0
 80112cc:	9304      	str	r3, [sp, #16]
 80112ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d2:	2206      	movs	r2, #6
 80112d4:	4825      	ldr	r0, [pc, #148]	; (801136c <_svfiprintf_r+0x1f0>)
 80112d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112da:	f000 fbd7 	bl	8011a8c <memchr>
 80112de:	2800      	cmp	r0, #0
 80112e0:	d038      	beq.n	8011354 <_svfiprintf_r+0x1d8>
 80112e2:	4b23      	ldr	r3, [pc, #140]	; (8011370 <_svfiprintf_r+0x1f4>)
 80112e4:	bb1b      	cbnz	r3, 801132e <_svfiprintf_r+0x1b2>
 80112e6:	9b03      	ldr	r3, [sp, #12]
 80112e8:	3307      	adds	r3, #7
 80112ea:	f023 0307 	bic.w	r3, r3, #7
 80112ee:	3308      	adds	r3, #8
 80112f0:	9303      	str	r3, [sp, #12]
 80112f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f4:	4433      	add	r3, r6
 80112f6:	9309      	str	r3, [sp, #36]	; 0x24
 80112f8:	e767      	b.n	80111ca <_svfiprintf_r+0x4e>
 80112fa:	460c      	mov	r4, r1
 80112fc:	2001      	movs	r0, #1
 80112fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011302:	e7a5      	b.n	8011250 <_svfiprintf_r+0xd4>
 8011304:	2300      	movs	r3, #0
 8011306:	f04f 0c0a 	mov.w	ip, #10
 801130a:	4619      	mov	r1, r3
 801130c:	3401      	adds	r4, #1
 801130e:	9305      	str	r3, [sp, #20]
 8011310:	4620      	mov	r0, r4
 8011312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011316:	3a30      	subs	r2, #48	; 0x30
 8011318:	2a09      	cmp	r2, #9
 801131a:	d903      	bls.n	8011324 <_svfiprintf_r+0x1a8>
 801131c:	2b00      	cmp	r3, #0
 801131e:	d0c5      	beq.n	80112ac <_svfiprintf_r+0x130>
 8011320:	9105      	str	r1, [sp, #20]
 8011322:	e7c3      	b.n	80112ac <_svfiprintf_r+0x130>
 8011324:	4604      	mov	r4, r0
 8011326:	2301      	movs	r3, #1
 8011328:	fb0c 2101 	mla	r1, ip, r1, r2
 801132c:	e7f0      	b.n	8011310 <_svfiprintf_r+0x194>
 801132e:	ab03      	add	r3, sp, #12
 8011330:	9300      	str	r3, [sp, #0]
 8011332:	462a      	mov	r2, r5
 8011334:	4638      	mov	r0, r7
 8011336:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <_svfiprintf_r+0x1f8>)
 8011338:	a904      	add	r1, sp, #16
 801133a:	f3af 8000 	nop.w
 801133e:	1c42      	adds	r2, r0, #1
 8011340:	4606      	mov	r6, r0
 8011342:	d1d6      	bne.n	80112f2 <_svfiprintf_r+0x176>
 8011344:	89ab      	ldrh	r3, [r5, #12]
 8011346:	065b      	lsls	r3, r3, #25
 8011348:	f53f af2c 	bmi.w	80111a4 <_svfiprintf_r+0x28>
 801134c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801134e:	b01d      	add	sp, #116	; 0x74
 8011350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011354:	ab03      	add	r3, sp, #12
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	462a      	mov	r2, r5
 801135a:	4638      	mov	r0, r7
 801135c:	4b05      	ldr	r3, [pc, #20]	; (8011374 <_svfiprintf_r+0x1f8>)
 801135e:	a904      	add	r1, sp, #16
 8011360:	f000 f9d4 	bl	801170c <_printf_i>
 8011364:	e7eb      	b.n	801133e <_svfiprintf_r+0x1c2>
 8011366:	bf00      	nop
 8011368:	0801282c 	.word	0x0801282c
 801136c:	08012836 	.word	0x08012836
 8011370:	00000000 	.word	0x00000000
 8011374:	080110c5 	.word	0x080110c5
 8011378:	08012832 	.word	0x08012832

0801137c <__sfputc_r>:
 801137c:	6893      	ldr	r3, [r2, #8]
 801137e:	b410      	push	{r4}
 8011380:	3b01      	subs	r3, #1
 8011382:	2b00      	cmp	r3, #0
 8011384:	6093      	str	r3, [r2, #8]
 8011386:	da07      	bge.n	8011398 <__sfputc_r+0x1c>
 8011388:	6994      	ldr	r4, [r2, #24]
 801138a:	42a3      	cmp	r3, r4
 801138c:	db01      	blt.n	8011392 <__sfputc_r+0x16>
 801138e:	290a      	cmp	r1, #10
 8011390:	d102      	bne.n	8011398 <__sfputc_r+0x1c>
 8011392:	bc10      	pop	{r4}
 8011394:	f7ff bbac 	b.w	8010af0 <__swbuf_r>
 8011398:	6813      	ldr	r3, [r2, #0]
 801139a:	1c58      	adds	r0, r3, #1
 801139c:	6010      	str	r0, [r2, #0]
 801139e:	7019      	strb	r1, [r3, #0]
 80113a0:	4608      	mov	r0, r1
 80113a2:	bc10      	pop	{r4}
 80113a4:	4770      	bx	lr

080113a6 <__sfputs_r>:
 80113a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a8:	4606      	mov	r6, r0
 80113aa:	460f      	mov	r7, r1
 80113ac:	4614      	mov	r4, r2
 80113ae:	18d5      	adds	r5, r2, r3
 80113b0:	42ac      	cmp	r4, r5
 80113b2:	d101      	bne.n	80113b8 <__sfputs_r+0x12>
 80113b4:	2000      	movs	r0, #0
 80113b6:	e007      	b.n	80113c8 <__sfputs_r+0x22>
 80113b8:	463a      	mov	r2, r7
 80113ba:	4630      	mov	r0, r6
 80113bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c0:	f7ff ffdc 	bl	801137c <__sfputc_r>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	d1f3      	bne.n	80113b0 <__sfputs_r+0xa>
 80113c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080113cc <_vfiprintf_r>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	460d      	mov	r5, r1
 80113d2:	4614      	mov	r4, r2
 80113d4:	4698      	mov	r8, r3
 80113d6:	4606      	mov	r6, r0
 80113d8:	b09d      	sub	sp, #116	; 0x74
 80113da:	b118      	cbz	r0, 80113e4 <_vfiprintf_r+0x18>
 80113dc:	6983      	ldr	r3, [r0, #24]
 80113de:	b90b      	cbnz	r3, 80113e4 <_vfiprintf_r+0x18>
 80113e0:	f7ff fd60 	bl	8010ea4 <__sinit>
 80113e4:	4b89      	ldr	r3, [pc, #548]	; (801160c <_vfiprintf_r+0x240>)
 80113e6:	429d      	cmp	r5, r3
 80113e8:	d11b      	bne.n	8011422 <_vfiprintf_r+0x56>
 80113ea:	6875      	ldr	r5, [r6, #4]
 80113ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113ee:	07d9      	lsls	r1, r3, #31
 80113f0:	d405      	bmi.n	80113fe <_vfiprintf_r+0x32>
 80113f2:	89ab      	ldrh	r3, [r5, #12]
 80113f4:	059a      	lsls	r2, r3, #22
 80113f6:	d402      	bmi.n	80113fe <_vfiprintf_r+0x32>
 80113f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113fa:	f7ff fdf1 	bl	8010fe0 <__retarget_lock_acquire_recursive>
 80113fe:	89ab      	ldrh	r3, [r5, #12]
 8011400:	071b      	lsls	r3, r3, #28
 8011402:	d501      	bpl.n	8011408 <_vfiprintf_r+0x3c>
 8011404:	692b      	ldr	r3, [r5, #16]
 8011406:	b9eb      	cbnz	r3, 8011444 <_vfiprintf_r+0x78>
 8011408:	4629      	mov	r1, r5
 801140a:	4630      	mov	r0, r6
 801140c:	f7ff fbc2 	bl	8010b94 <__swsetup_r>
 8011410:	b1c0      	cbz	r0, 8011444 <_vfiprintf_r+0x78>
 8011412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011414:	07dc      	lsls	r4, r3, #31
 8011416:	d50e      	bpl.n	8011436 <_vfiprintf_r+0x6a>
 8011418:	f04f 30ff 	mov.w	r0, #4294967295
 801141c:	b01d      	add	sp, #116	; 0x74
 801141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011422:	4b7b      	ldr	r3, [pc, #492]	; (8011610 <_vfiprintf_r+0x244>)
 8011424:	429d      	cmp	r5, r3
 8011426:	d101      	bne.n	801142c <_vfiprintf_r+0x60>
 8011428:	68b5      	ldr	r5, [r6, #8]
 801142a:	e7df      	b.n	80113ec <_vfiprintf_r+0x20>
 801142c:	4b79      	ldr	r3, [pc, #484]	; (8011614 <_vfiprintf_r+0x248>)
 801142e:	429d      	cmp	r5, r3
 8011430:	bf08      	it	eq
 8011432:	68f5      	ldreq	r5, [r6, #12]
 8011434:	e7da      	b.n	80113ec <_vfiprintf_r+0x20>
 8011436:	89ab      	ldrh	r3, [r5, #12]
 8011438:	0598      	lsls	r0, r3, #22
 801143a:	d4ed      	bmi.n	8011418 <_vfiprintf_r+0x4c>
 801143c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801143e:	f7ff fdd0 	bl	8010fe2 <__retarget_lock_release_recursive>
 8011442:	e7e9      	b.n	8011418 <_vfiprintf_r+0x4c>
 8011444:	2300      	movs	r3, #0
 8011446:	9309      	str	r3, [sp, #36]	; 0x24
 8011448:	2320      	movs	r3, #32
 801144a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801144e:	2330      	movs	r3, #48	; 0x30
 8011450:	f04f 0901 	mov.w	r9, #1
 8011454:	f8cd 800c 	str.w	r8, [sp, #12]
 8011458:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011618 <_vfiprintf_r+0x24c>
 801145c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011460:	4623      	mov	r3, r4
 8011462:	469a      	mov	sl, r3
 8011464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011468:	b10a      	cbz	r2, 801146e <_vfiprintf_r+0xa2>
 801146a:	2a25      	cmp	r2, #37	; 0x25
 801146c:	d1f9      	bne.n	8011462 <_vfiprintf_r+0x96>
 801146e:	ebba 0b04 	subs.w	fp, sl, r4
 8011472:	d00b      	beq.n	801148c <_vfiprintf_r+0xc0>
 8011474:	465b      	mov	r3, fp
 8011476:	4622      	mov	r2, r4
 8011478:	4629      	mov	r1, r5
 801147a:	4630      	mov	r0, r6
 801147c:	f7ff ff93 	bl	80113a6 <__sfputs_r>
 8011480:	3001      	adds	r0, #1
 8011482:	f000 80aa 	beq.w	80115da <_vfiprintf_r+0x20e>
 8011486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011488:	445a      	add	r2, fp
 801148a:	9209      	str	r2, [sp, #36]	; 0x24
 801148c:	f89a 3000 	ldrb.w	r3, [sl]
 8011490:	2b00      	cmp	r3, #0
 8011492:	f000 80a2 	beq.w	80115da <_vfiprintf_r+0x20e>
 8011496:	2300      	movs	r3, #0
 8011498:	f04f 32ff 	mov.w	r2, #4294967295
 801149c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114a0:	f10a 0a01 	add.w	sl, sl, #1
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	9307      	str	r3, [sp, #28]
 80114a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114ac:	931a      	str	r3, [sp, #104]	; 0x68
 80114ae:	4654      	mov	r4, sl
 80114b0:	2205      	movs	r2, #5
 80114b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114b6:	4858      	ldr	r0, [pc, #352]	; (8011618 <_vfiprintf_r+0x24c>)
 80114b8:	f000 fae8 	bl	8011a8c <memchr>
 80114bc:	9a04      	ldr	r2, [sp, #16]
 80114be:	b9d8      	cbnz	r0, 80114f8 <_vfiprintf_r+0x12c>
 80114c0:	06d1      	lsls	r1, r2, #27
 80114c2:	bf44      	itt	mi
 80114c4:	2320      	movmi	r3, #32
 80114c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114ca:	0713      	lsls	r3, r2, #28
 80114cc:	bf44      	itt	mi
 80114ce:	232b      	movmi	r3, #43	; 0x2b
 80114d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114d4:	f89a 3000 	ldrb.w	r3, [sl]
 80114d8:	2b2a      	cmp	r3, #42	; 0x2a
 80114da:	d015      	beq.n	8011508 <_vfiprintf_r+0x13c>
 80114dc:	4654      	mov	r4, sl
 80114de:	2000      	movs	r0, #0
 80114e0:	f04f 0c0a 	mov.w	ip, #10
 80114e4:	9a07      	ldr	r2, [sp, #28]
 80114e6:	4621      	mov	r1, r4
 80114e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114ec:	3b30      	subs	r3, #48	; 0x30
 80114ee:	2b09      	cmp	r3, #9
 80114f0:	d94e      	bls.n	8011590 <_vfiprintf_r+0x1c4>
 80114f2:	b1b0      	cbz	r0, 8011522 <_vfiprintf_r+0x156>
 80114f4:	9207      	str	r2, [sp, #28]
 80114f6:	e014      	b.n	8011522 <_vfiprintf_r+0x156>
 80114f8:	eba0 0308 	sub.w	r3, r0, r8
 80114fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011500:	4313      	orrs	r3, r2
 8011502:	46a2      	mov	sl, r4
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	e7d2      	b.n	80114ae <_vfiprintf_r+0xe2>
 8011508:	9b03      	ldr	r3, [sp, #12]
 801150a:	1d19      	adds	r1, r3, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	9103      	str	r1, [sp, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	bfbb      	ittet	lt
 8011514:	425b      	neglt	r3, r3
 8011516:	f042 0202 	orrlt.w	r2, r2, #2
 801151a:	9307      	strge	r3, [sp, #28]
 801151c:	9307      	strlt	r3, [sp, #28]
 801151e:	bfb8      	it	lt
 8011520:	9204      	strlt	r2, [sp, #16]
 8011522:	7823      	ldrb	r3, [r4, #0]
 8011524:	2b2e      	cmp	r3, #46	; 0x2e
 8011526:	d10c      	bne.n	8011542 <_vfiprintf_r+0x176>
 8011528:	7863      	ldrb	r3, [r4, #1]
 801152a:	2b2a      	cmp	r3, #42	; 0x2a
 801152c:	d135      	bne.n	801159a <_vfiprintf_r+0x1ce>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	3402      	adds	r4, #2
 8011532:	1d1a      	adds	r2, r3, #4
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	9203      	str	r2, [sp, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	bfb8      	it	lt
 801153c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011540:	9305      	str	r3, [sp, #20]
 8011542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011628 <_vfiprintf_r+0x25c>
 8011546:	2203      	movs	r2, #3
 8011548:	4650      	mov	r0, sl
 801154a:	7821      	ldrb	r1, [r4, #0]
 801154c:	f000 fa9e 	bl	8011a8c <memchr>
 8011550:	b140      	cbz	r0, 8011564 <_vfiprintf_r+0x198>
 8011552:	2340      	movs	r3, #64	; 0x40
 8011554:	eba0 000a 	sub.w	r0, r0, sl
 8011558:	fa03 f000 	lsl.w	r0, r3, r0
 801155c:	9b04      	ldr	r3, [sp, #16]
 801155e:	3401      	adds	r4, #1
 8011560:	4303      	orrs	r3, r0
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011568:	2206      	movs	r2, #6
 801156a:	482c      	ldr	r0, [pc, #176]	; (801161c <_vfiprintf_r+0x250>)
 801156c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011570:	f000 fa8c 	bl	8011a8c <memchr>
 8011574:	2800      	cmp	r0, #0
 8011576:	d03f      	beq.n	80115f8 <_vfiprintf_r+0x22c>
 8011578:	4b29      	ldr	r3, [pc, #164]	; (8011620 <_vfiprintf_r+0x254>)
 801157a:	bb1b      	cbnz	r3, 80115c4 <_vfiprintf_r+0x1f8>
 801157c:	9b03      	ldr	r3, [sp, #12]
 801157e:	3307      	adds	r3, #7
 8011580:	f023 0307 	bic.w	r3, r3, #7
 8011584:	3308      	adds	r3, #8
 8011586:	9303      	str	r3, [sp, #12]
 8011588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801158a:	443b      	add	r3, r7
 801158c:	9309      	str	r3, [sp, #36]	; 0x24
 801158e:	e767      	b.n	8011460 <_vfiprintf_r+0x94>
 8011590:	460c      	mov	r4, r1
 8011592:	2001      	movs	r0, #1
 8011594:	fb0c 3202 	mla	r2, ip, r2, r3
 8011598:	e7a5      	b.n	80114e6 <_vfiprintf_r+0x11a>
 801159a:	2300      	movs	r3, #0
 801159c:	f04f 0c0a 	mov.w	ip, #10
 80115a0:	4619      	mov	r1, r3
 80115a2:	3401      	adds	r4, #1
 80115a4:	9305      	str	r3, [sp, #20]
 80115a6:	4620      	mov	r0, r4
 80115a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115ac:	3a30      	subs	r2, #48	; 0x30
 80115ae:	2a09      	cmp	r2, #9
 80115b0:	d903      	bls.n	80115ba <_vfiprintf_r+0x1ee>
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0c5      	beq.n	8011542 <_vfiprintf_r+0x176>
 80115b6:	9105      	str	r1, [sp, #20]
 80115b8:	e7c3      	b.n	8011542 <_vfiprintf_r+0x176>
 80115ba:	4604      	mov	r4, r0
 80115bc:	2301      	movs	r3, #1
 80115be:	fb0c 2101 	mla	r1, ip, r1, r2
 80115c2:	e7f0      	b.n	80115a6 <_vfiprintf_r+0x1da>
 80115c4:	ab03      	add	r3, sp, #12
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	462a      	mov	r2, r5
 80115ca:	4630      	mov	r0, r6
 80115cc:	4b15      	ldr	r3, [pc, #84]	; (8011624 <_vfiprintf_r+0x258>)
 80115ce:	a904      	add	r1, sp, #16
 80115d0:	f3af 8000 	nop.w
 80115d4:	4607      	mov	r7, r0
 80115d6:	1c78      	adds	r0, r7, #1
 80115d8:	d1d6      	bne.n	8011588 <_vfiprintf_r+0x1bc>
 80115da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115dc:	07d9      	lsls	r1, r3, #31
 80115de:	d405      	bmi.n	80115ec <_vfiprintf_r+0x220>
 80115e0:	89ab      	ldrh	r3, [r5, #12]
 80115e2:	059a      	lsls	r2, r3, #22
 80115e4:	d402      	bmi.n	80115ec <_vfiprintf_r+0x220>
 80115e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115e8:	f7ff fcfb 	bl	8010fe2 <__retarget_lock_release_recursive>
 80115ec:	89ab      	ldrh	r3, [r5, #12]
 80115ee:	065b      	lsls	r3, r3, #25
 80115f0:	f53f af12 	bmi.w	8011418 <_vfiprintf_r+0x4c>
 80115f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115f6:	e711      	b.n	801141c <_vfiprintf_r+0x50>
 80115f8:	ab03      	add	r3, sp, #12
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	462a      	mov	r2, r5
 80115fe:	4630      	mov	r0, r6
 8011600:	4b08      	ldr	r3, [pc, #32]	; (8011624 <_vfiprintf_r+0x258>)
 8011602:	a904      	add	r1, sp, #16
 8011604:	f000 f882 	bl	801170c <_printf_i>
 8011608:	e7e4      	b.n	80115d4 <_vfiprintf_r+0x208>
 801160a:	bf00      	nop
 801160c:	080127ec 	.word	0x080127ec
 8011610:	0801280c 	.word	0x0801280c
 8011614:	080127cc 	.word	0x080127cc
 8011618:	0801282c 	.word	0x0801282c
 801161c:	08012836 	.word	0x08012836
 8011620:	00000000 	.word	0x00000000
 8011624:	080113a7 	.word	0x080113a7
 8011628:	08012832 	.word	0x08012832

0801162c <_printf_common>:
 801162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011630:	4616      	mov	r6, r2
 8011632:	4699      	mov	r9, r3
 8011634:	688a      	ldr	r2, [r1, #8]
 8011636:	690b      	ldr	r3, [r1, #16]
 8011638:	4607      	mov	r7, r0
 801163a:	4293      	cmp	r3, r2
 801163c:	bfb8      	it	lt
 801163e:	4613      	movlt	r3, r2
 8011640:	6033      	str	r3, [r6, #0]
 8011642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011646:	460c      	mov	r4, r1
 8011648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801164c:	b10a      	cbz	r2, 8011652 <_printf_common+0x26>
 801164e:	3301      	adds	r3, #1
 8011650:	6033      	str	r3, [r6, #0]
 8011652:	6823      	ldr	r3, [r4, #0]
 8011654:	0699      	lsls	r1, r3, #26
 8011656:	bf42      	ittt	mi
 8011658:	6833      	ldrmi	r3, [r6, #0]
 801165a:	3302      	addmi	r3, #2
 801165c:	6033      	strmi	r3, [r6, #0]
 801165e:	6825      	ldr	r5, [r4, #0]
 8011660:	f015 0506 	ands.w	r5, r5, #6
 8011664:	d106      	bne.n	8011674 <_printf_common+0x48>
 8011666:	f104 0a19 	add.w	sl, r4, #25
 801166a:	68e3      	ldr	r3, [r4, #12]
 801166c:	6832      	ldr	r2, [r6, #0]
 801166e:	1a9b      	subs	r3, r3, r2
 8011670:	42ab      	cmp	r3, r5
 8011672:	dc28      	bgt.n	80116c6 <_printf_common+0x9a>
 8011674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011678:	1e13      	subs	r3, r2, #0
 801167a:	6822      	ldr	r2, [r4, #0]
 801167c:	bf18      	it	ne
 801167e:	2301      	movne	r3, #1
 8011680:	0692      	lsls	r2, r2, #26
 8011682:	d42d      	bmi.n	80116e0 <_printf_common+0xb4>
 8011684:	4649      	mov	r1, r9
 8011686:	4638      	mov	r0, r7
 8011688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801168c:	47c0      	blx	r8
 801168e:	3001      	adds	r0, #1
 8011690:	d020      	beq.n	80116d4 <_printf_common+0xa8>
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	68e5      	ldr	r5, [r4, #12]
 8011696:	f003 0306 	and.w	r3, r3, #6
 801169a:	2b04      	cmp	r3, #4
 801169c:	bf18      	it	ne
 801169e:	2500      	movne	r5, #0
 80116a0:	6832      	ldr	r2, [r6, #0]
 80116a2:	f04f 0600 	mov.w	r6, #0
 80116a6:	68a3      	ldr	r3, [r4, #8]
 80116a8:	bf08      	it	eq
 80116aa:	1aad      	subeq	r5, r5, r2
 80116ac:	6922      	ldr	r2, [r4, #16]
 80116ae:	bf08      	it	eq
 80116b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116b4:	4293      	cmp	r3, r2
 80116b6:	bfc4      	itt	gt
 80116b8:	1a9b      	subgt	r3, r3, r2
 80116ba:	18ed      	addgt	r5, r5, r3
 80116bc:	341a      	adds	r4, #26
 80116be:	42b5      	cmp	r5, r6
 80116c0:	d11a      	bne.n	80116f8 <_printf_common+0xcc>
 80116c2:	2000      	movs	r0, #0
 80116c4:	e008      	b.n	80116d8 <_printf_common+0xac>
 80116c6:	2301      	movs	r3, #1
 80116c8:	4652      	mov	r2, sl
 80116ca:	4649      	mov	r1, r9
 80116cc:	4638      	mov	r0, r7
 80116ce:	47c0      	blx	r8
 80116d0:	3001      	adds	r0, #1
 80116d2:	d103      	bne.n	80116dc <_printf_common+0xb0>
 80116d4:	f04f 30ff 	mov.w	r0, #4294967295
 80116d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116dc:	3501      	adds	r5, #1
 80116de:	e7c4      	b.n	801166a <_printf_common+0x3e>
 80116e0:	2030      	movs	r0, #48	; 0x30
 80116e2:	18e1      	adds	r1, r4, r3
 80116e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80116ee:	4422      	add	r2, r4
 80116f0:	3302      	adds	r3, #2
 80116f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80116f6:	e7c5      	b.n	8011684 <_printf_common+0x58>
 80116f8:	2301      	movs	r3, #1
 80116fa:	4622      	mov	r2, r4
 80116fc:	4649      	mov	r1, r9
 80116fe:	4638      	mov	r0, r7
 8011700:	47c0      	blx	r8
 8011702:	3001      	adds	r0, #1
 8011704:	d0e6      	beq.n	80116d4 <_printf_common+0xa8>
 8011706:	3601      	adds	r6, #1
 8011708:	e7d9      	b.n	80116be <_printf_common+0x92>
	...

0801170c <_printf_i>:
 801170c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011710:	460c      	mov	r4, r1
 8011712:	7e27      	ldrb	r7, [r4, #24]
 8011714:	4691      	mov	r9, r2
 8011716:	2f78      	cmp	r7, #120	; 0x78
 8011718:	4680      	mov	r8, r0
 801171a:	469a      	mov	sl, r3
 801171c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801171e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011722:	d807      	bhi.n	8011734 <_printf_i+0x28>
 8011724:	2f62      	cmp	r7, #98	; 0x62
 8011726:	d80a      	bhi.n	801173e <_printf_i+0x32>
 8011728:	2f00      	cmp	r7, #0
 801172a:	f000 80d9 	beq.w	80118e0 <_printf_i+0x1d4>
 801172e:	2f58      	cmp	r7, #88	; 0x58
 8011730:	f000 80a4 	beq.w	801187c <_printf_i+0x170>
 8011734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801173c:	e03a      	b.n	80117b4 <_printf_i+0xa8>
 801173e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011742:	2b15      	cmp	r3, #21
 8011744:	d8f6      	bhi.n	8011734 <_printf_i+0x28>
 8011746:	a001      	add	r0, pc, #4	; (adr r0, 801174c <_printf_i+0x40>)
 8011748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801174c:	080117a5 	.word	0x080117a5
 8011750:	080117b9 	.word	0x080117b9
 8011754:	08011735 	.word	0x08011735
 8011758:	08011735 	.word	0x08011735
 801175c:	08011735 	.word	0x08011735
 8011760:	08011735 	.word	0x08011735
 8011764:	080117b9 	.word	0x080117b9
 8011768:	08011735 	.word	0x08011735
 801176c:	08011735 	.word	0x08011735
 8011770:	08011735 	.word	0x08011735
 8011774:	08011735 	.word	0x08011735
 8011778:	080118c7 	.word	0x080118c7
 801177c:	080117e9 	.word	0x080117e9
 8011780:	080118a9 	.word	0x080118a9
 8011784:	08011735 	.word	0x08011735
 8011788:	08011735 	.word	0x08011735
 801178c:	080118e9 	.word	0x080118e9
 8011790:	08011735 	.word	0x08011735
 8011794:	080117e9 	.word	0x080117e9
 8011798:	08011735 	.word	0x08011735
 801179c:	08011735 	.word	0x08011735
 80117a0:	080118b1 	.word	0x080118b1
 80117a4:	680b      	ldr	r3, [r1, #0]
 80117a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80117aa:	1d1a      	adds	r2, r3, #4
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	600a      	str	r2, [r1, #0]
 80117b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117b4:	2301      	movs	r3, #1
 80117b6:	e0a4      	b.n	8011902 <_printf_i+0x1f6>
 80117b8:	6825      	ldr	r5, [r4, #0]
 80117ba:	6808      	ldr	r0, [r1, #0]
 80117bc:	062e      	lsls	r6, r5, #24
 80117be:	f100 0304 	add.w	r3, r0, #4
 80117c2:	d50a      	bpl.n	80117da <_printf_i+0xce>
 80117c4:	6805      	ldr	r5, [r0, #0]
 80117c6:	600b      	str	r3, [r1, #0]
 80117c8:	2d00      	cmp	r5, #0
 80117ca:	da03      	bge.n	80117d4 <_printf_i+0xc8>
 80117cc:	232d      	movs	r3, #45	; 0x2d
 80117ce:	426d      	negs	r5, r5
 80117d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117d4:	230a      	movs	r3, #10
 80117d6:	485e      	ldr	r0, [pc, #376]	; (8011950 <_printf_i+0x244>)
 80117d8:	e019      	b.n	801180e <_printf_i+0x102>
 80117da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80117de:	6805      	ldr	r5, [r0, #0]
 80117e0:	600b      	str	r3, [r1, #0]
 80117e2:	bf18      	it	ne
 80117e4:	b22d      	sxthne	r5, r5
 80117e6:	e7ef      	b.n	80117c8 <_printf_i+0xbc>
 80117e8:	680b      	ldr	r3, [r1, #0]
 80117ea:	6825      	ldr	r5, [r4, #0]
 80117ec:	1d18      	adds	r0, r3, #4
 80117ee:	6008      	str	r0, [r1, #0]
 80117f0:	0628      	lsls	r0, r5, #24
 80117f2:	d501      	bpl.n	80117f8 <_printf_i+0xec>
 80117f4:	681d      	ldr	r5, [r3, #0]
 80117f6:	e002      	b.n	80117fe <_printf_i+0xf2>
 80117f8:	0669      	lsls	r1, r5, #25
 80117fa:	d5fb      	bpl.n	80117f4 <_printf_i+0xe8>
 80117fc:	881d      	ldrh	r5, [r3, #0]
 80117fe:	2f6f      	cmp	r7, #111	; 0x6f
 8011800:	bf0c      	ite	eq
 8011802:	2308      	moveq	r3, #8
 8011804:	230a      	movne	r3, #10
 8011806:	4852      	ldr	r0, [pc, #328]	; (8011950 <_printf_i+0x244>)
 8011808:	2100      	movs	r1, #0
 801180a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801180e:	6866      	ldr	r6, [r4, #4]
 8011810:	2e00      	cmp	r6, #0
 8011812:	bfa8      	it	ge
 8011814:	6821      	ldrge	r1, [r4, #0]
 8011816:	60a6      	str	r6, [r4, #8]
 8011818:	bfa4      	itt	ge
 801181a:	f021 0104 	bicge.w	r1, r1, #4
 801181e:	6021      	strge	r1, [r4, #0]
 8011820:	b90d      	cbnz	r5, 8011826 <_printf_i+0x11a>
 8011822:	2e00      	cmp	r6, #0
 8011824:	d04d      	beq.n	80118c2 <_printf_i+0x1b6>
 8011826:	4616      	mov	r6, r2
 8011828:	fbb5 f1f3 	udiv	r1, r5, r3
 801182c:	fb03 5711 	mls	r7, r3, r1, r5
 8011830:	5dc7      	ldrb	r7, [r0, r7]
 8011832:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011836:	462f      	mov	r7, r5
 8011838:	42bb      	cmp	r3, r7
 801183a:	460d      	mov	r5, r1
 801183c:	d9f4      	bls.n	8011828 <_printf_i+0x11c>
 801183e:	2b08      	cmp	r3, #8
 8011840:	d10b      	bne.n	801185a <_printf_i+0x14e>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	07df      	lsls	r7, r3, #31
 8011846:	d508      	bpl.n	801185a <_printf_i+0x14e>
 8011848:	6923      	ldr	r3, [r4, #16]
 801184a:	6861      	ldr	r1, [r4, #4]
 801184c:	4299      	cmp	r1, r3
 801184e:	bfde      	ittt	le
 8011850:	2330      	movle	r3, #48	; 0x30
 8011852:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011856:	f106 36ff 	addle.w	r6, r6, #4294967295
 801185a:	1b92      	subs	r2, r2, r6
 801185c:	6122      	str	r2, [r4, #16]
 801185e:	464b      	mov	r3, r9
 8011860:	4621      	mov	r1, r4
 8011862:	4640      	mov	r0, r8
 8011864:	f8cd a000 	str.w	sl, [sp]
 8011868:	aa03      	add	r2, sp, #12
 801186a:	f7ff fedf 	bl	801162c <_printf_common>
 801186e:	3001      	adds	r0, #1
 8011870:	d14c      	bne.n	801190c <_printf_i+0x200>
 8011872:	f04f 30ff 	mov.w	r0, #4294967295
 8011876:	b004      	add	sp, #16
 8011878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187c:	4834      	ldr	r0, [pc, #208]	; (8011950 <_printf_i+0x244>)
 801187e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011882:	680e      	ldr	r6, [r1, #0]
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	f856 5b04 	ldr.w	r5, [r6], #4
 801188a:	061f      	lsls	r7, r3, #24
 801188c:	600e      	str	r6, [r1, #0]
 801188e:	d514      	bpl.n	80118ba <_printf_i+0x1ae>
 8011890:	07d9      	lsls	r1, r3, #31
 8011892:	bf44      	itt	mi
 8011894:	f043 0320 	orrmi.w	r3, r3, #32
 8011898:	6023      	strmi	r3, [r4, #0]
 801189a:	b91d      	cbnz	r5, 80118a4 <_printf_i+0x198>
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	f023 0320 	bic.w	r3, r3, #32
 80118a2:	6023      	str	r3, [r4, #0]
 80118a4:	2310      	movs	r3, #16
 80118a6:	e7af      	b.n	8011808 <_printf_i+0xfc>
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	f043 0320 	orr.w	r3, r3, #32
 80118ae:	6023      	str	r3, [r4, #0]
 80118b0:	2378      	movs	r3, #120	; 0x78
 80118b2:	4828      	ldr	r0, [pc, #160]	; (8011954 <_printf_i+0x248>)
 80118b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80118b8:	e7e3      	b.n	8011882 <_printf_i+0x176>
 80118ba:	065e      	lsls	r6, r3, #25
 80118bc:	bf48      	it	mi
 80118be:	b2ad      	uxthmi	r5, r5
 80118c0:	e7e6      	b.n	8011890 <_printf_i+0x184>
 80118c2:	4616      	mov	r6, r2
 80118c4:	e7bb      	b.n	801183e <_printf_i+0x132>
 80118c6:	680b      	ldr	r3, [r1, #0]
 80118c8:	6826      	ldr	r6, [r4, #0]
 80118ca:	1d1d      	adds	r5, r3, #4
 80118cc:	6960      	ldr	r0, [r4, #20]
 80118ce:	600d      	str	r5, [r1, #0]
 80118d0:	0635      	lsls	r5, r6, #24
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	d501      	bpl.n	80118da <_printf_i+0x1ce>
 80118d6:	6018      	str	r0, [r3, #0]
 80118d8:	e002      	b.n	80118e0 <_printf_i+0x1d4>
 80118da:	0671      	lsls	r1, r6, #25
 80118dc:	d5fb      	bpl.n	80118d6 <_printf_i+0x1ca>
 80118de:	8018      	strh	r0, [r3, #0]
 80118e0:	2300      	movs	r3, #0
 80118e2:	4616      	mov	r6, r2
 80118e4:	6123      	str	r3, [r4, #16]
 80118e6:	e7ba      	b.n	801185e <_printf_i+0x152>
 80118e8:	680b      	ldr	r3, [r1, #0]
 80118ea:	1d1a      	adds	r2, r3, #4
 80118ec:	600a      	str	r2, [r1, #0]
 80118ee:	681e      	ldr	r6, [r3, #0]
 80118f0:	2100      	movs	r1, #0
 80118f2:	4630      	mov	r0, r6
 80118f4:	6862      	ldr	r2, [r4, #4]
 80118f6:	f000 f8c9 	bl	8011a8c <memchr>
 80118fa:	b108      	cbz	r0, 8011900 <_printf_i+0x1f4>
 80118fc:	1b80      	subs	r0, r0, r6
 80118fe:	6060      	str	r0, [r4, #4]
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	6123      	str	r3, [r4, #16]
 8011904:	2300      	movs	r3, #0
 8011906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801190a:	e7a8      	b.n	801185e <_printf_i+0x152>
 801190c:	4632      	mov	r2, r6
 801190e:	4649      	mov	r1, r9
 8011910:	4640      	mov	r0, r8
 8011912:	6923      	ldr	r3, [r4, #16]
 8011914:	47d0      	blx	sl
 8011916:	3001      	adds	r0, #1
 8011918:	d0ab      	beq.n	8011872 <_printf_i+0x166>
 801191a:	6823      	ldr	r3, [r4, #0]
 801191c:	079b      	lsls	r3, r3, #30
 801191e:	d413      	bmi.n	8011948 <_printf_i+0x23c>
 8011920:	68e0      	ldr	r0, [r4, #12]
 8011922:	9b03      	ldr	r3, [sp, #12]
 8011924:	4298      	cmp	r0, r3
 8011926:	bfb8      	it	lt
 8011928:	4618      	movlt	r0, r3
 801192a:	e7a4      	b.n	8011876 <_printf_i+0x16a>
 801192c:	2301      	movs	r3, #1
 801192e:	4632      	mov	r2, r6
 8011930:	4649      	mov	r1, r9
 8011932:	4640      	mov	r0, r8
 8011934:	47d0      	blx	sl
 8011936:	3001      	adds	r0, #1
 8011938:	d09b      	beq.n	8011872 <_printf_i+0x166>
 801193a:	3501      	adds	r5, #1
 801193c:	68e3      	ldr	r3, [r4, #12]
 801193e:	9903      	ldr	r1, [sp, #12]
 8011940:	1a5b      	subs	r3, r3, r1
 8011942:	42ab      	cmp	r3, r5
 8011944:	dcf2      	bgt.n	801192c <_printf_i+0x220>
 8011946:	e7eb      	b.n	8011920 <_printf_i+0x214>
 8011948:	2500      	movs	r5, #0
 801194a:	f104 0619 	add.w	r6, r4, #25
 801194e:	e7f5      	b.n	801193c <_printf_i+0x230>
 8011950:	0801283d 	.word	0x0801283d
 8011954:	0801284e 	.word	0x0801284e

08011958 <__sread>:
 8011958:	b510      	push	{r4, lr}
 801195a:	460c      	mov	r4, r1
 801195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011960:	f000 f8e2 	bl	8011b28 <_read_r>
 8011964:	2800      	cmp	r0, #0
 8011966:	bfab      	itete	ge
 8011968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801196a:	89a3      	ldrhlt	r3, [r4, #12]
 801196c:	181b      	addge	r3, r3, r0
 801196e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011972:	bfac      	ite	ge
 8011974:	6563      	strge	r3, [r4, #84]	; 0x54
 8011976:	81a3      	strhlt	r3, [r4, #12]
 8011978:	bd10      	pop	{r4, pc}

0801197a <__swrite>:
 801197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801197e:	461f      	mov	r7, r3
 8011980:	898b      	ldrh	r3, [r1, #12]
 8011982:	4605      	mov	r5, r0
 8011984:	05db      	lsls	r3, r3, #23
 8011986:	460c      	mov	r4, r1
 8011988:	4616      	mov	r6, r2
 801198a:	d505      	bpl.n	8011998 <__swrite+0x1e>
 801198c:	2302      	movs	r3, #2
 801198e:	2200      	movs	r2, #0
 8011990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011994:	f000 f868 	bl	8011a68 <_lseek_r>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	4632      	mov	r2, r6
 801199c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119a0:	81a3      	strh	r3, [r4, #12]
 80119a2:	4628      	mov	r0, r5
 80119a4:	463b      	mov	r3, r7
 80119a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ae:	f000 b817 	b.w	80119e0 <_write_r>

080119b2 <__sseek>:
 80119b2:	b510      	push	{r4, lr}
 80119b4:	460c      	mov	r4, r1
 80119b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ba:	f000 f855 	bl	8011a68 <_lseek_r>
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	bf15      	itete	ne
 80119c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119ce:	81a3      	strheq	r3, [r4, #12]
 80119d0:	bf18      	it	ne
 80119d2:	81a3      	strhne	r3, [r4, #12]
 80119d4:	bd10      	pop	{r4, pc}

080119d6 <__sclose>:
 80119d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119da:	f000 b813 	b.w	8011a04 <_close_r>
	...

080119e0 <_write_r>:
 80119e0:	b538      	push	{r3, r4, r5, lr}
 80119e2:	4604      	mov	r4, r0
 80119e4:	4608      	mov	r0, r1
 80119e6:	4611      	mov	r1, r2
 80119e8:	2200      	movs	r2, #0
 80119ea:	4d05      	ldr	r5, [pc, #20]	; (8011a00 <_write_r+0x20>)
 80119ec:	602a      	str	r2, [r5, #0]
 80119ee:	461a      	mov	r2, r3
 80119f0:	f7f3 ff7b 	bl	80058ea <_write>
 80119f4:	1c43      	adds	r3, r0, #1
 80119f6:	d102      	bne.n	80119fe <_write_r+0x1e>
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	b103      	cbz	r3, 80119fe <_write_r+0x1e>
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	20001bd8 	.word	0x20001bd8

08011a04 <_close_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	2300      	movs	r3, #0
 8011a08:	4d05      	ldr	r5, [pc, #20]	; (8011a20 <_close_r+0x1c>)
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	4608      	mov	r0, r1
 8011a0e:	602b      	str	r3, [r5, #0]
 8011a10:	f7f3 ff87 	bl	8005922 <_close>
 8011a14:	1c43      	adds	r3, r0, #1
 8011a16:	d102      	bne.n	8011a1e <_close_r+0x1a>
 8011a18:	682b      	ldr	r3, [r5, #0]
 8011a1a:	b103      	cbz	r3, 8011a1e <_close_r+0x1a>
 8011a1c:	6023      	str	r3, [r4, #0]
 8011a1e:	bd38      	pop	{r3, r4, r5, pc}
 8011a20:	20001bd8 	.word	0x20001bd8

08011a24 <_fstat_r>:
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	2300      	movs	r3, #0
 8011a28:	4d06      	ldr	r5, [pc, #24]	; (8011a44 <_fstat_r+0x20>)
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	4608      	mov	r0, r1
 8011a2e:	4611      	mov	r1, r2
 8011a30:	602b      	str	r3, [r5, #0]
 8011a32:	f7f3 ff81 	bl	8005938 <_fstat>
 8011a36:	1c43      	adds	r3, r0, #1
 8011a38:	d102      	bne.n	8011a40 <_fstat_r+0x1c>
 8011a3a:	682b      	ldr	r3, [r5, #0]
 8011a3c:	b103      	cbz	r3, 8011a40 <_fstat_r+0x1c>
 8011a3e:	6023      	str	r3, [r4, #0]
 8011a40:	bd38      	pop	{r3, r4, r5, pc}
 8011a42:	bf00      	nop
 8011a44:	20001bd8 	.word	0x20001bd8

08011a48 <_isatty_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	4d05      	ldr	r5, [pc, #20]	; (8011a64 <_isatty_r+0x1c>)
 8011a4e:	4604      	mov	r4, r0
 8011a50:	4608      	mov	r0, r1
 8011a52:	602b      	str	r3, [r5, #0]
 8011a54:	f7f3 ff7f 	bl	8005956 <_isatty>
 8011a58:	1c43      	adds	r3, r0, #1
 8011a5a:	d102      	bne.n	8011a62 <_isatty_r+0x1a>
 8011a5c:	682b      	ldr	r3, [r5, #0]
 8011a5e:	b103      	cbz	r3, 8011a62 <_isatty_r+0x1a>
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	20001bd8 	.word	0x20001bd8

08011a68 <_lseek_r>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	4611      	mov	r1, r2
 8011a70:	2200      	movs	r2, #0
 8011a72:	4d05      	ldr	r5, [pc, #20]	; (8011a88 <_lseek_r+0x20>)
 8011a74:	602a      	str	r2, [r5, #0]
 8011a76:	461a      	mov	r2, r3
 8011a78:	f7f3 ff77 	bl	800596a <_lseek>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d102      	bne.n	8011a86 <_lseek_r+0x1e>
 8011a80:	682b      	ldr	r3, [r5, #0]
 8011a82:	b103      	cbz	r3, 8011a86 <_lseek_r+0x1e>
 8011a84:	6023      	str	r3, [r4, #0]
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	20001bd8 	.word	0x20001bd8

08011a8c <memchr>:
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	b510      	push	{r4, lr}
 8011a90:	b2c9      	uxtb	r1, r1
 8011a92:	4402      	add	r2, r0
 8011a94:	4293      	cmp	r3, r2
 8011a96:	4618      	mov	r0, r3
 8011a98:	d101      	bne.n	8011a9e <memchr+0x12>
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	e003      	b.n	8011aa6 <memchr+0x1a>
 8011a9e:	7804      	ldrb	r4, [r0, #0]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	428c      	cmp	r4, r1
 8011aa4:	d1f6      	bne.n	8011a94 <memchr+0x8>
 8011aa6:	bd10      	pop	{r4, pc}

08011aa8 <memmove>:
 8011aa8:	4288      	cmp	r0, r1
 8011aaa:	b510      	push	{r4, lr}
 8011aac:	eb01 0402 	add.w	r4, r1, r2
 8011ab0:	d902      	bls.n	8011ab8 <memmove+0x10>
 8011ab2:	4284      	cmp	r4, r0
 8011ab4:	4623      	mov	r3, r4
 8011ab6:	d807      	bhi.n	8011ac8 <memmove+0x20>
 8011ab8:	1e43      	subs	r3, r0, #1
 8011aba:	42a1      	cmp	r1, r4
 8011abc:	d008      	beq.n	8011ad0 <memmove+0x28>
 8011abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ac6:	e7f8      	b.n	8011aba <memmove+0x12>
 8011ac8:	4601      	mov	r1, r0
 8011aca:	4402      	add	r2, r0
 8011acc:	428a      	cmp	r2, r1
 8011ace:	d100      	bne.n	8011ad2 <memmove+0x2a>
 8011ad0:	bd10      	pop	{r4, pc}
 8011ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ada:	e7f7      	b.n	8011acc <memmove+0x24>

08011adc <_realloc_r>:
 8011adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ade:	4607      	mov	r7, r0
 8011ae0:	4614      	mov	r4, r2
 8011ae2:	460e      	mov	r6, r1
 8011ae4:	b921      	cbnz	r1, 8011af0 <_realloc_r+0x14>
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011aec:	f7fe bee8 	b.w	80108c0 <_malloc_r>
 8011af0:	b922      	cbnz	r2, 8011afc <_realloc_r+0x20>
 8011af2:	f7fe fe99 	bl	8010828 <_free_r>
 8011af6:	4625      	mov	r5, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011afc:	f000 f826 	bl	8011b4c <_malloc_usable_size_r>
 8011b00:	42a0      	cmp	r0, r4
 8011b02:	d20f      	bcs.n	8011b24 <_realloc_r+0x48>
 8011b04:	4621      	mov	r1, r4
 8011b06:	4638      	mov	r0, r7
 8011b08:	f7fe feda 	bl	80108c0 <_malloc_r>
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d0f2      	beq.n	8011af8 <_realloc_r+0x1c>
 8011b12:	4631      	mov	r1, r6
 8011b14:	4622      	mov	r2, r4
 8011b16:	f7fe fe71 	bl	80107fc <memcpy>
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	4638      	mov	r0, r7
 8011b1e:	f7fe fe83 	bl	8010828 <_free_r>
 8011b22:	e7e9      	b.n	8011af8 <_realloc_r+0x1c>
 8011b24:	4635      	mov	r5, r6
 8011b26:	e7e7      	b.n	8011af8 <_realloc_r+0x1c>

08011b28 <_read_r>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	4608      	mov	r0, r1
 8011b2e:	4611      	mov	r1, r2
 8011b30:	2200      	movs	r2, #0
 8011b32:	4d05      	ldr	r5, [pc, #20]	; (8011b48 <_read_r+0x20>)
 8011b34:	602a      	str	r2, [r5, #0]
 8011b36:	461a      	mov	r2, r3
 8011b38:	f7f3 feba 	bl	80058b0 <_read>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	d102      	bne.n	8011b46 <_read_r+0x1e>
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	b103      	cbz	r3, 8011b46 <_read_r+0x1e>
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	bd38      	pop	{r3, r4, r5, pc}
 8011b48:	20001bd8 	.word	0x20001bd8

08011b4c <_malloc_usable_size_r>:
 8011b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b50:	1f18      	subs	r0, r3, #4
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bfbc      	itt	lt
 8011b56:	580b      	ldrlt	r3, [r1, r0]
 8011b58:	18c0      	addlt	r0, r0, r3
 8011b5a:	4770      	bx	lr

08011b5c <_init>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	bf00      	nop
 8011b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b62:	bc08      	pop	{r3}
 8011b64:	469e      	mov	lr, r3
 8011b66:	4770      	bx	lr

08011b68 <_fini>:
 8011b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6a:	bf00      	nop
 8011b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6e:	bc08      	pop	{r3}
 8011b70:	469e      	mov	lr, r3
 8011b72:	4770      	bx	lr
