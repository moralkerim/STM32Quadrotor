
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800ed38  0800ed38  0001ed38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f248  0800f248  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800f248  0800f248  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f248  0800f248  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f250  0800f250  0001f250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d4c  20000078  0800f2cc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800f2cc  00020dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fa9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000469a  00000000  00000000  00046046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  0004a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0004bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d976  00000000  00000000  0004d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017afa  00000000  00000000  0006a996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097285  00000000  00000000  00082490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c4  00000000  00000000  00119768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed1c 	.word	0x0800ed1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800ed1c 	.word	0x0800ed1c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HMC5883L_initialize+0x44>)
 8001180:	223c      	movs	r2, #60	; 0x3c
 8001182:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001184:	2378      	movs	r3, #120	; 0x78
 8001186:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HMC5883L_initialize+0x44>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b299      	uxth	r1, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HMC5883L_initialize+0x48>)
 80011a2:	f004 fc73 	bl	8005a8c <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f80c 	bl	80011c4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f829 	bl	8001204 <HMC5883L_setMode>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094
 80011c0:	200000a8 	.word	0x200000a8

080011c4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HMC5883L_setGain+0x38>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b299      	uxth	r1, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2201      	movs	r2, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HMC5883L_setGain+0x3c>)
 80011f0:	f004 fc4c 	bl	8005a8c <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000094 	.word	0x20000094
 8001200:	200000a8 	.word	0x200000a8

08001204 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HMC5883L_setMode+0x3c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <HMC5883L_setMode+0x40>)
 800122c:	f004 fc2e 	bl	8005a8c <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HMC5883L_setMode+0x44>)
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000094 	.word	0x20000094
 8001244:	200000a8 	.word	0x200000a8
 8001248:	2000009e 	.word	0x2000009e

0800124c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af04      	add	r7, sp, #16
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HMC5883L_getMagData+0x84>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b299      	uxth	r1, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <HMC5883L_getMagData+0x8c>)
 8001272:	f004 fd05 	bl	8005c80 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HMC5883L_getMagData+0x90>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HMC5883L_getMagData+0x38>
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffc0 	bl	8001204 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HMC5883L_getMagData+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000094 	.word	0x20000094
 80012d4:	20000098 	.word	0x20000098
 80012d8:	200000a8 	.word	0x200000a8
 80012dc:	2000009e 	.word	0x2000009e

080012e0 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80012ee:	2301      	movs	r3, #1
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	22d0      	movs	r2, #208	; 0xd0
 80012fe:	21ef      	movs	r1, #239	; 0xef
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <read_chip_id+0x3c>)
 8001302:	f004 fcbd 	bl	8005c80 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	2b55      	cmp	r3, #85	; 0x55
 800130a:	d001      	beq.n	8001310 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800130c:	2301      	movs	r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000a8 	.word	0x200000a8

08001320 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 800132c:	2300      	movs	r3, #0
 800132e:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d81a      	bhi.n	800136c <set_oss+0x4c>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <set_oss+0x1c>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001355 	.word	0x08001355
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001365 	.word	0x08001365
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2205      	movs	r2, #5
 8001350:	705a      	strb	r2, [r3, #1]
			break;
 8001352:	e00f      	b.n	8001374 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2208      	movs	r2, #8
 8001358:	705a      	strb	r2, [r3, #1]
			break;
 800135a:	e00b      	b.n	8001374 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	220e      	movs	r2, #14
 8001360:	705a      	strb	r2, [r3, #1]
			break;
 8001362:	e007      	b.n	8001374 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	221a      	movs	r2, #26
 8001368:	705a      	strb	r2, [r3, #1]
			break;
 800136a:	e003      	b.n	8001374 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2208      	movs	r2, #8
 8001370:	705a      	strb	r2, [r3, #1]
			break;
 8001372:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001384:	2301      	movs	r3, #1
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2302      	movs	r3, #2
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	22f4      	movs	r2, #244	; 0xf4
 8001396:	21ee      	movs	r1, #238	; 0xee
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <set_oss+0x88>)
 800139a:	f004 fb77 	bl	8005a8c <HAL_I2C_Mem_Write>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000a8 	.word	0x200000a8

080013ac <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80013da:	2301      	movs	r3, #1
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2316      	movs	r3, #22
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	22aa      	movs	r2, #170	; 0xaa
 80013ec:	21ef      	movs	r1, #239	; 0xef
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <read_calib_data+0xe4>)
 80013f0:	f004 fc46 	bl	8005c80 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013fa:	e03e      	b.n	800147a <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80013fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b219      	sxth	r1, r3
 8001410:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001414:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001418:	4413      	add	r3, r2
 800141a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800141e:	b21a      	sxth	r2, r3
 8001420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4403      	add	r3, r0
 800142a:	430a      	orrs	r2, r1
 800142c:	b212      	sxth	r2, r2
 800142e:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2da      	uxtb	r2, r3
 8001448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	440b      	add	r3, r1
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 800146a:	2302      	movs	r3, #2
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001474:	3301      	adds	r3, #1
 8001476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	2b0b      	cmp	r3, #11
 8001480:	d9bc      	bls.n	80013fc <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001486:	4618      	mov	r0, r3
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000a8 	.word	0x200000a8

08001494 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00d fb2a 	bl	800eafc <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80014a8:	687c      	ldr	r4, [r7, #4]
 80014aa:	f7ff ff19 	bl	80012e0 <read_chip_id>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	687c      	ldr	r4, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff77 	bl	80013ac <read_calib_data>
 80014be:	4603      	mov	r3, r0
 80014c0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3338      	adds	r3, #56	; 0x38
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff28 	bl	8001320 <set_oss>
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 80014de:	232e      	movs	r3, #46	; 0x2e
 80014e0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80014e2:	2301      	movs	r3, #1
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	22f4      	movs	r2, #244	; 0xf4
 80014f2:	21ee      	movs	r1, #238	; 0xee
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <write_ut+0x2c>)
 80014f6:	f004 fac9 	bl	8005a8c <HAL_I2C_Mem_Write>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200000a8 	.word	0x200000a8

08001508 <read_ut>:

int32_t read_ut (void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800150e:	2301      	movs	r3, #1
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2302      	movs	r3, #2
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f6      	movs	r2, #246	; 0xf6
 800151e:	21ef      	movs	r1, #239	; 0xef
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <read_ut+0x30>)
 8001522:	f004 fbad 	bl	8005c80 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	797a      	ldrb	r2, [r7, #5]
 800152c:	4313      	orrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000a8 	.word	0x200000a8

0800153c <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
	float temp = 0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdc8 	bl	80010ec <__aeabi_f2iz>
 800155c:	4602      	mov	r2, r0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	8912      	ldrh	r2, [r2, #8]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	13db      	asrs	r3, r3, #15
 800156e:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001576:	02da      	lsls	r2, r3, #11
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800157e:	4619      	mov	r1, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	440b      	add	r3, r1
 8001584:	fb92 f3f3 	sdiv	r3, r2, r3
 8001588:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	441a      	add	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	3308      	adds	r3, #8
 800159a:	111b      	asrs	r3, r3, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb75 	bl	8000c8c <__aeabi_i2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <get_temp+0xa4>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fbc4 	bl	8000d34 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <get_temp+0xa8>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fd66 	bl	8001084 <__aeabi_fcmple>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <get_temp+0x90>
 80015be:	490a      	ldr	r1, [pc, #40]	; (80015e8 <get_temp+0xac>)
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd69 	bl	8001098 <__aeabi_fcmpge>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 80015d4:	68fb      	ldr	r3, [r7, #12]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	3dcccccd 	.word	0x3dcccccd
 80015e4:	c2200000 	.word	0xc2200000
 80015e8:	42aa0000 	.word	0x42aa0000

080015ec <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <write_up+0x38>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	803b      	strh	r3, [r7, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001600:	2334      	movs	r3, #52	; 0x34
 8001602:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001604:	2301      	movs	r3, #1
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	463b      	mov	r3, r7
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	22f4      	movs	r2, #244	; 0xf4
 8001614:	21ee      	movs	r1, #238	; 0xee
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <write_up+0x3c>)
 8001618:	f004 fa38 	bl	8005a8c <HAL_I2C_Mem_Write>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	0800ed38 	.word	0x0800ed38
 8001628:	200000a8 	.word	0x200000a8

0800162c <read_up>:

int32_t read_up (oss_t oss)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af04      	add	r7, sp, #16
 8001632:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <read_up+0x54>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	813b      	strh	r3, [r7, #8]
 800163a:	2300      	movs	r3, #0
 800163c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001642:	2301      	movs	r3, #1
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2303      	movs	r3, #3
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	22f6      	movs	r2, #246	; 0xf6
 8001654:	21ef      	movs	r1, #239	; 0xef
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <read_up+0x58>)
 8001658:	f004 fb12 	bl	8005c80 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800165c:	7a3b      	ldrb	r3, [r7, #8]
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	7a7b      	ldrb	r3, [r7, #9]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4413      	add	r3, r2
 8001666:	7aba      	ldrb	r2, [r7, #10]
 8001668:	441a      	add	r2, r3
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	f1c3 0308 	rsb	r3, r3, #8
 8001670:	fa42 f303 	asr.w	r3, r2, r3
 8001674:	60fb      	str	r3, [r7, #12]
	return up;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0800ed38 	.word	0x0800ed38
 8001684:	200000a8 	.word	0x200000a8

08001688 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001688:	b084      	sub	sp, #16
 800168a:	b480      	push	{r7}
 800168c:	b089      	sub	sp, #36	; 0x24
 800168e:	af00      	add	r7, sp, #0
 8001690:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001694:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80016a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80016a6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80016a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fb03 f303 	mul.w	r3, r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da01      	bge.n	80016bc <get_pressure+0x34>
 80016b8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016bc:	131b      	asrs	r3, r3, #12
 80016be:	fb03 f302 	mul.w	r3, r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da01      	bge.n	80016ca <get_pressure+0x42>
 80016c6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016ca:	12db      	asrs	r3, r3, #11
 80016cc:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80016ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fb03 f302 	mul.w	r3, r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da01      	bge.n	80016e2 <get_pressure+0x5a>
 80016de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016e2:	12db      	asrs	r3, r3, #11
 80016e4:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80016ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4413      	add	r3, r2
 80016f8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80016fc:	4093      	lsls	r3, r2
 80016fe:	3302      	adds	r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <get_pressure+0x7e>
 8001704:	3303      	adds	r3, #3
 8001706:	109b      	asrs	r3, r3, #2
 8001708:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800170a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800170e:	461a      	mov	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fb03 f302 	mul.w	r3, r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <get_pressure+0x98>
 800171a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800171e:	331f      	adds	r3, #31
 8001720:	135b      	asrs	r3, r3, #13
 8001722:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001724:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001728:	461a      	mov	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fb03 f303 	mul.w	r3, r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	da01      	bge.n	8001738 <get_pressure+0xb0>
 8001734:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001738:	131b      	asrs	r3, r3, #12
 800173a:	fb03 f302 	mul.w	r3, r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	da02      	bge.n	8001748 <get_pressure+0xc0>
 8001742:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001746:	33ff      	adds	r3, #255	; 0xff
 8001748:	141b      	asrs	r3, r3, #16
 800174a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	3302      	adds	r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <get_pressure+0xd2>
 8001758:	3303      	adds	r3, #3
 800175a:	109b      	asrs	r3, r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800175e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001768:	fb03 f302 	mul.w	r3, r3, r2
 800176c:	0bdb      	lsrs	r3, r3, #15
 800176e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800177c:	4611      	mov	r1, r2
 800177e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001782:	410a      	asrs	r2, r1
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db06      	blt.n	800179e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	005a      	lsls	r2, r3, #1
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	e005      	b.n	80017aa <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da00      	bge.n	80017b2 <get_pressure+0x12a>
 80017b0:	33ff      	adds	r3, #255	; 0xff
 80017b2:	121b      	asrs	r3, r3, #8
 80017b4:	461a      	mov	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <get_pressure+0x136>
 80017bc:	33ff      	adds	r3, #255	; 0xff
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	fb03 f302 	mul.w	r3, r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f640 32de 	movw	r2, #3038	; 0xbde
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da02      	bge.n	80017da <get_pressure+0x152>
 80017d4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017d8:	33ff      	adds	r3, #255	; 0xff
 80017da:	141b      	asrs	r3, r3, #16
 80017dc:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <get_pressure+0x194>)
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da02      	bge.n	80017f0 <get_pressure+0x168>
 80017ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017ee:	33ff      	adds	r3, #255	; 0xff
 80017f0:	141b      	asrs	r3, r3, #16
 80017f2:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <get_pressure+0x17c>
 8001802:	330f      	adds	r3, #15
 8001804:	111b      	asrs	r3, r3, #4
 8001806:	461a      	mov	r2, r3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	61fb      	str	r3, [r7, #28]

	return p;
 800180e:	69fb      	ldr	r3, [r7, #28]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	b004      	add	sp, #16
 800181a:	4770      	bx	lr
 800181c:	ffffe343 	.word	0xffffe343

08001820 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa2a 	bl	8000c8c <__aeabi_i2f>
 8001838:	4603      	mov	r3, r0
 800183a:	4923      	ldr	r1, [pc, #140]	; (80018c8 <get_altitude+0xa8>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fb2d 	bl	8000e9c <__aeabi_fdiv>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fde7 	bl	8000418 <__aeabi_f2d>
 800184a:	a31b      	add	r3, pc, #108	; (adr r3, 80018b8 <get_altitude+0x98>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f00b f92a 	bl	800caa8 <pow>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	491b      	ldr	r1, [pc, #108]	; (80018cc <get_altitude+0xac>)
 800185e:	f7fe fc7b 	bl	8000158 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a315      	add	r3, pc, #84	; (adr r3, 80018c0 <get_altitude+0xa0>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fe2a 	bl	80004c8 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8fc 	bl	8000a78 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001884:	4912      	ldr	r1, [pc, #72]	; (80018d0 <get_altitude+0xb0>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff fbfc 	bl	8001084 <__aeabi_fcmple>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <get_altitude+0x80>
 8001892:	4910      	ldr	r1, [pc, #64]	; (80018d4 <get_altitude+0xb4>)
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fbff 	bl	8001098 <__aeabi_fcmpge>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	ccd9456c 	.word	0xccd9456c
 80018bc:	3fc85b95 	.word	0x3fc85b95
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40e5a540 	.word	0x40e5a540
 80018c8:	47c5e680 	.word	0x47c5e680
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	c3fa0000 	.word	0xc3fa0000
 80018d4:	460ca000 	.word	0x460ca000

080018d8 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return b_counter;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <get_b_counter+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	200000a0 	.word	0x200000a0

080018ec <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

	b_counter++;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <set_b_counter+0x30>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <set_b_counter+0x30>)
 80018fc:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <set_b_counter+0x30>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4293      	cmp	r3, r2
 8001908:	d202      	bcs.n	8001910 <set_b_counter+0x24>
		b_counter = 0;
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <set_b_counter+0x30>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
	}
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200000a0 	.word	0x200000a0

08001920 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001926:	2351      	movs	r3, #81	; 0x51
 8001928:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 800192a:	1dba      	adds	r2, r7, #6
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	21e0      	movs	r1, #224	; 0xe0
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <request_range+0x2c>)
 8001936:	f003 fd4b 	bl	80053d0 <HAL_I2C_Master_Transmit>
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <request_range+0x30>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000a8 	.word	0x200000a8
 8001950:	20000000 	.word	0x20000000

08001954 <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <getRange+0x34>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <getRange+0x38>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001966:	1d3a      	adds	r2, r7, #4
 8001968:	2364      	movs	r3, #100	; 0x64
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2302      	movs	r3, #2
 800196e:	21e1      	movs	r1, #225	; 0xe1
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <getRange+0x3c>)
 8001972:	f003 fe2b 	bl	80055cc <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	797a      	ldrb	r2, [r7, #5]
 800197c:	4313      	orrs	r3, r2



	//return -1;

}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000dac 	.word	0x20000dac
 800198c:	20000000 	.word	0x20000000
 8001990:	200000a8 	.word	0x200000a8

08001994 <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	u_counter++;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <set_ucounter+0x30>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <set_ucounter+0x30>)
 80019a4:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <set_ucounter+0x30>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d202      	bcs.n	80019b8 <set_ucounter+0x24>
		u_counter = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <set_ucounter+0x30>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
	}
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200000a4 	.word	0x200000a4

080019c8 <get_ucounter>:

int get_ucounter(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return u_counter;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <get_ucounter+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	200000a4 	.word	0x200000a4

080019dc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f00b f92b 	bl	800cc58 <asinf>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f00a fecd 	bl	800c7b4 <atanf>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f00b f937 	bl	800cca4 <atan2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f00a ffbf 	bl	800c9cc <cosf>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f00a ffeb 	bl	800ca3c <sinf>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00b f915 	bl	800cca8 <sqrtf>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f002 f92a 	bl	8003cea <_ZNSaIfED1Ev>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 f90d 	bl	8003cca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ffeb 	bl	8001aa0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001adc:	f002 fdfc 	bl	80046d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001ae0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ae4:	f002 fe5a 	bl	800479c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae8:	f000 f8d4 	bl	8001c94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aec:	f000 fbe0 	bl	80022b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001af0:	f000 fbc0 	bl	8002274 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001af4:	f000 f91e 	bl	8001d34 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8001af8:	f000 fa1a 	bl	8001f30 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001afc:	f000 f94e 	bl	8001d9c <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001b00:	f000 fb88 	bl	8002214 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8001b04:	f000 fa70 	bl	8001fe8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001b08:	f000 faf8 	bl	80020fc <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8001b0c:	f000 fb54 	bl	80021b8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001b10:	2209      	movs	r2, #9
 8001b12:	4951      	ldr	r1, [pc, #324]	; (8001c58 <main+0x180>)
 8001b14:	4851      	ldr	r0, [pc, #324]	; (8001c5c <main+0x184>)
 8001b16:	f007 f8ad 	bl	8008c74 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8001b1a:	f000 fc4d 	bl	80023b8 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001b1e:	4850      	ldr	r0, [pc, #320]	; (8001c60 <main+0x188>)
 8001b20:	f7ff fcb8 	bl	8001494 <bmp_init>
  HMC5883L_initialize();
 8001b24:	f7ff fb28 	bl	8001178 <HMC5883L_initialize>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001b28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b2c:	f002 fe36 	bl	800479c <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001b30:	201d      	movs	r0, #29
 8001b32:	f001 fb5f 	bl	80031f4 <_Z7GyroErrh>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <main+0x18c>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	201f      	movs	r0, #31
 8001b3e:	f001 fb59 	bl	80031f4 <_Z7GyroErrh>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <main+0x190>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	2021      	movs	r0, #33	; 0x21
 8001b4a:	f001 fb53 	bl	80031f4 <_Z7GyroErrh>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8001b54:	2032      	movs	r0, #50	; 0x32
 8001b56:	f001 fb7b 	bl	8003250 <_Z6AccErrh>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc5b 	bl	8000418 <__aeabi_f2d>
 8001b62:	a33b      	add	r3, pc, #236	; (adr r3, 8001c50 <main+0x178>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fcae 	bl	80004c8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff80 	bl	8000a78 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <main+0x198>)
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	2034      	movs	r0, #52	; 0x34
 8001b80:	f001 fb66 	bl	8003250 <_Z6AccErrh>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc46 	bl	8000418 <__aeabi_f2d>
 8001b8c:	a330      	add	r3, pc, #192	; (adr r3, 8001c50 <main+0x178>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fc99 	bl	80004c8 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ff6b 	bl	8000a78 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <main+0x19c>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	2036      	movs	r0, #54	; 0x36
 8001baa:	f001 fb51 	bl	8003250 <_Z6AccErrh>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc31 	bl	8000418 <__aeabi_f2d>
 8001bb6:	a326      	add	r3, pc, #152	; (adr r3, 8001c50 <main+0x178>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fc84 	bl	80004c8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff56 	bl	8000a78 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <main+0x1a0>)
 8001bd0:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8001bd2:	2032      	movs	r0, #50	; 0x32
 8001bd4:	f001 f80c 	bl	8002bf0 <_Z6AccOkuh>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f856 	bl	8000c8c <__aeabi_i2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <main+0x1a4>)
 8001be4:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8001be6:	2034      	movs	r0, #52	; 0x34
 8001be8:	f001 f802 	bl	8002bf0 <_Z6AccOkuh>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f84c 	bl	8000c8c <__aeabi_i2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <main+0x1a8>)
 8001bf8:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8001bfa:	2036      	movs	r0, #54	; 0x36
 8001bfc:	f000 fff8 	bl	8002bf0 <_Z6AccOkuh>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f842 	bl	8000c8c <__aeabi_i2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <main+0x1ac>)
 8001c0c:	6013      	str	r3, [r2, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001c0e:	481e      	ldr	r0, [pc, #120]	; (8001c88 <main+0x1b0>)
 8001c10:	f005 fbfc 	bl	800740c <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001c14:	481d      	ldr	r0, [pc, #116]	; (8001c8c <main+0x1b4>)
 8001c16:	f005 fbaf 	bl	8007378 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	481c      	ldr	r0, [pc, #112]	; (8001c90 <main+0x1b8>)
 8001c1e:	f005 fc97 	bl	8007550 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001c22:	2104      	movs	r1, #4
 8001c24:	481a      	ldr	r0, [pc, #104]	; (8001c90 <main+0x1b8>)
 8001c26:	f006 fdc3 	bl	80087b0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <main+0x1b8>)
 8001c2e:	f006 fdbf 	bl	80087b0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c32:	210c      	movs	r1, #12
 8001c34:	4816      	ldr	r0, [pc, #88]	; (8001c90 <main+0x1b8>)
 8001c36:	f005 fc8b 	bl	8007550 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	4813      	ldr	r0, [pc, #76]	; (8001c8c <main+0x1b4>)
 8001c3e:	f005 fd81 	bl	8007744 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  SendTelem();
 8001c42:	f000 ff25 	bl	8002a90 <_Z9SendTelemv>
	  Check_Arm();
 8001c46:	f000 fd4d 	bl	80026e4 <_Z9Check_Armv>
	  Check_Disarm();
 8001c4a:	f000 fdb1 	bl	80027b0 <_Z12Check_Disarmv>
	  SendTelem();
 8001c4e:	e7f8      	b.n	8001c42 <main+0x16a>
 8001c50:	8e8a71de 	.word	0x8e8a71de
 8001c54:	3f7ff2e4 	.word	0x3f7ff2e4
 8001c58:	20000d68 	.word	0x20000d68
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	20000d28 	.word	0x20000d28
 8001c64:	20000304 	.word	0x20000304
 8001c68:	20000308 	.word	0x20000308
 8001c6c:	2000030c 	.word	0x2000030c
 8001c70:	20000310 	.word	0x20000310
 8001c74:	20000314 	.word	0x20000314
 8001c78:	20000318 	.word	0x20000318
 8001c7c:	200002ec 	.word	0x200002ec
 8001c80:	200002f0 	.word	0x200002f0
 8001c84:	200002f4 	.word	0x200002f4
 8001c88:	20000144 	.word	0x20000144
 8001c8c:	2000018c 	.word	0x2000018c
 8001c90:	200000fc 	.word	0x200000fc

08001c94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	2228      	movs	r2, #40	; 0x28
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00c ff2a 	bl	800eafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fee1 	bl	8006aa4 <HAL_RCC_OscConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001cf2:	f001 ffe5 	bl	8003cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f947 	bl	8006fa4 <HAL_RCC_ClockConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001d26:	f001 ffcb 	bl	8003cc0 <Error_Handler>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3740      	adds	r7, #64	; 0x40
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <_ZL12MX_I2C1_Initv+0x60>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <_ZL12MX_I2C1_Initv+0x64>)
 8001d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <_ZL12MX_I2C1_Initv+0x5c>)
 8001d72:	f003 f9e9 	bl	8005148 <HAL_I2C_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001d86:	f001 ff9b 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200000a8 	.word	0x200000a8
 8001d94:	40005400 	.word	0x40005400
 8001d98:	00061a80 	.word	0x00061a80

08001d9c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b092      	sub	sp, #72	; 0x48
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00c fe98 	bl	800eafc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dce:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <_ZL12MX_TIM1_Initv+0x190>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dd4:	2247      	movs	r2, #71	; 0x47
 8001dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001dde:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001de0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001df8:	484b      	ldr	r0, [pc, #300]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dfa:	f005 fb59 	bl	80074b0 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001e0e:	f001 ff57 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4841      	ldr	r0, [pc, #260]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e22:	f006 fd63 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001e36:	f001 ff43 	bl	8003cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4832      	ldr	r0, [pc, #200]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e60:	f005 ff12 	bl	8007c88 <HAL_TIM_PWM_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf14      	ite	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	2300      	moveq	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001e74:	f001 ff24 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4829      	ldr	r0, [pc, #164]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001e82:	f005 ff01 	bl	8007c88 <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001e96:	f001 ff13 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4821      	ldr	r0, [pc, #132]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ea4:	f005 fef0 	bl	8007c88 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001eb8:	f001 ff02 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4818      	ldr	r0, [pc, #96]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ec6:	f005 fedf 	bl	8007c88 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001eda:	f001 fef1 	bl	8003cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4809      	ldr	r0, [pc, #36]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001f02:	f006 fd51 	bl	80089a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001f16:	f001 fed3 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <_ZL12MX_TIM1_Initv+0x18c>)
 8001f1c:	f002 fa14 	bl	8004348 <HAL_TIM_MspPostInit>

}
 8001f20:	bf00      	nop
 8001f22:	3748      	adds	r7, #72	; 0x48
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200000fc 	.word	0x200000fc
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	463b      	mov	r3, r7
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f56:	2247      	movs	r2, #71	; 0x47
 8001f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f62:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f74:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f76:	f005 f9af 	bl	80072d8 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001f8a:	f001 fe99 	bl	8003cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4812      	ldr	r0, [pc, #72]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f9c:	f005 ff32 	bl	8007e04 <HAL_TIM_ConfigClockSource>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001fb0:	f001 fe86 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fc2:	f006 fc93 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001fd6:	f001 fe73 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000144 	.word	0x20000144

08001fe8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002006:	463b      	mov	r3, r7
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002014:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <_ZL12MX_TIM3_Initv+0x110>)
 8002016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800201a:	2247      	movs	r2, #71	; 0x47
 800201c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002038:	482e      	ldr	r0, [pc, #184]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800203a:	f005 f94d 	bl	80072d8 <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 800204e:	f001 fe37 	bl	8003cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002056:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4825      	ldr	r0, [pc, #148]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 8002060:	f005 fed0 	bl	8007e04 <HAL_TIM_ConfigClockSource>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8002074:	f001 fe24 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 800207a:	f005 fb0b 	bl	8007694 <HAL_TIM_IC_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800208e:	f001 fe17 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	4814      	ldr	r0, [pc, #80]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 80020a2:	f006 fc23 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 80020b6:	f001 fe03 	bl	8003cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020be:	2301      	movs	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2208      	movs	r2, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <_ZL12MX_TIM3_Initv+0x10c>)
 80020d2:	f005 fd45 	bl	8007b60 <HAL_TIM_IC_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 80020e6:	f001 fdeb 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000018c 	.word	0x2000018c
 80020f8:	40000400 	.word	0x40000400

080020fc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <_ZL12MX_TIM4_Initv+0xb8>)
 800211c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002120:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002124:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800212e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002132:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002140:	481b      	ldr	r0, [pc, #108]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002142:	f005 f8c9 	bl	80072d8 <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8002156:	f001 fdb3 	bl	8003cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	4619      	mov	r1, r3
 8002166:	4812      	ldr	r0, [pc, #72]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002168:	f005 fe4c 	bl	8007e04 <HAL_TIM_ConfigClockSource>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800217c:	f001 fda0 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <_ZL12MX_TIM4_Initv+0xb4>)
 800218e:	f006 fbad 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 80021a2:	f001 fd8d 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001d4 	.word	0x200001d4
 80021b4:	40000800 	.word	0x40000800

080021b8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_ZL19MX_USART1_UART_Initv+0x58>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <_ZL19MX_USART1_UART_Initv+0x54>)
 80021f0:	f006 fc61 	bl	8008ab6 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002204:	f001 fd5c 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000021c 	.word	0x2000021c
 8002210:	40013800 	.word	0x40013800

08002214 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <_ZL19MX_USART2_UART_Initv+0x58>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002222:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002238:	220c      	movs	r2, #12
 800223a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800224a:	f006 fc34 	bl	8008ab6 <HAL_UART_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800225e:	f001 fd2f 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000025c 	.word	0x2000025c
 800226c:	40004400 	.word	0x40004400
 8002270:	000f4240 	.word	0x000f4240

08002274 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6153      	str	r3, [r2, #20]
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <_ZL11MX_DMA_Initv+0x38>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	200f      	movs	r0, #15
 8002298:	f002 fb7b 	bl	8004992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f002 fb94 	bl	80049ca <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <_ZL12MX_GPIO_Initv+0xf8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800232a:	4820      	ldr	r0, [pc, #128]	; (80023ac <_ZL12MX_GPIO_Initv+0xfc>)
 800232c:	f002 feda 	bl	80050e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2102      	movs	r1, #2
 8002334:	481e      	ldr	r0, [pc, #120]	; (80023b0 <_ZL12MX_GPIO_Initv+0x100>)
 8002336:	f002 fed5 	bl	80050e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002340:	481c      	ldr	r0, [pc, #112]	; (80023b4 <_ZL12MX_GPIO_Initv+0x104>)
 8002342:	f002 fecf 	bl	80050e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4813      	ldr	r0, [pc, #76]	; (80023ac <_ZL12MX_GPIO_Initv+0xfc>)
 8002360:	f002 fd3c 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2302      	movs	r3, #2
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <_ZL12MX_GPIO_Initv+0x100>)
 800237c:	f002 fd2e 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2302      	movs	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <_ZL12MX_GPIO_Initv+0x104>)
 800239a:	f002 fd1f 	bl	8004ddc <HAL_GPIO_Init>

}
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40010800 	.word	0x40010800

080023b8 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80023c2:	2305      	movs	r3, #5
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2301      	movs	r3, #1
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	223e      	movs	r2, #62	; 0x3e
 80023d2:	21d0      	movs	r1, #208	; 0xd0
 80023d4:	4826      	ldr	r0, [pc, #152]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 80023d6:	f003 fb59 	bl	8005a8c <HAL_I2C_Mem_Write>
	config = 0x18;
 80023da:	2318      	movs	r3, #24
 80023dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 80023de:	2305      	movs	r3, #5
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	2216      	movs	r2, #22
 80023ee:	21d0      	movs	r1, #208	; 0xd0
 80023f0:	481f      	ldr	r0, [pc, #124]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 80023f2:	f003 fb4b 	bl	8005a8c <HAL_I2C_Mem_Write>
	config = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80023fa:	2305      	movs	r3, #5
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2301      	movs	r3, #1
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	222d      	movs	r2, #45	; 0x2d
 800240a:	21a6      	movs	r1, #166	; 0xa6
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 800240e:	f003 fb3d 	bl	8005a8c <HAL_I2C_Mem_Write>
	config = 0x08;
 8002412:	2308      	movs	r3, #8
 8002414:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002416:	2305      	movs	r3, #5
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2301      	movs	r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	222d      	movs	r2, #45	; 0x2d
 8002426:	21a6      	movs	r1, #166	; 0xa6
 8002428:	4811      	ldr	r0, [pc, #68]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 800242a:	f003 fb2f 	bl	8005a8c <HAL_I2C_Mem_Write>
	config = 0x0D;
 800242e:	230d      	movs	r3, #13
 8002430:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002432:	2305      	movs	r3, #5
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2301      	movs	r3, #1
 8002440:	222c      	movs	r2, #44	; 0x2c
 8002442:	21a6      	movs	r1, #166	; 0xa6
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 8002446:	f003 fb21 	bl	8005a8c <HAL_I2C_Mem_Write>
	config = 0x01;
 800244a:	2301      	movs	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800244e:	2305      	movs	r3, #5
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	2301      	movs	r3, #1
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2231      	movs	r2, #49	; 0x31
 800245e:	21a6      	movs	r1, #166	; 0xa6
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <_Z14MPU6050_Baslatv+0xb8>)
 8002462:	f003 fb13 	bl	8005a8c <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200000a8 	.word	0x200000a8
 8002474:	00000000 	.word	0x00000000

08002478 <_Z8MagCalibsss>:

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
 8002482:	460b      	mov	r3, r1
 8002484:	80bb      	strh	r3, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 800248a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd ffb0 	bl	80003f4 <__aeabi_i2d>
 8002494:	a366      	add	r3, pc, #408	; (adr r3, 8002630 <_Z8MagCalibsss+0x1b8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f815 	bl	80004c8 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4614      	mov	r4, r2
 80024a4:	461d      	mov	r5, r3
 80024a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ffa2 	bl	80003f4 <__aeabi_i2d>
 80024b0:	a361      	add	r3, pc, #388	; (adr r3, 8002638 <_Z8MagCalibsss+0x1c0>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f807 	bl	80004c8 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd fe4b 	bl	800015c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ff8e 	bl	80003f4 <__aeabi_i2d>
 80024d8:	a359      	add	r3, pc, #356	; (adr r3, 8002640 <_Z8MagCalibsss+0x1c8>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fd fff3 	bl	80004c8 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fd fe35 	bl	8000158 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <_Z8MagCalibsss+0x1f8>)
 80024fc:	f7fd fe2e 	bl	800015c <__adddf3>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fa8e 	bl	8000a28 <__aeabi_d2iz>
 800250c:	4603      	mov	r3, r0
 800250e:	b21a      	sxth	r2, r3
 8002510:	4b58      	ldr	r3, [pc, #352]	; (8002674 <_Z8MagCalibsss+0x1fc>)
 8002512:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 8002514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ff6b 	bl	80003f4 <__aeabi_i2d>
 800251e:	a346      	add	r3, pc, #280	; (adr r3, 8002638 <_Z8MagCalibsss+0x1c0>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fd ffd0 	bl	80004c8 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ff5d 	bl	80003f4 <__aeabi_i2d>
 800253a:	a343      	add	r3, pc, #268	; (adr r3, 8002648 <_Z8MagCalibsss+0x1d0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fd ffc2 	bl	80004c8 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fe06 	bl	800015c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff49 	bl	80003f4 <__aeabi_i2d>
 8002562:	a33b      	add	r3, pc, #236	; (adr r3, 8002650 <_Z8MagCalibsss+0x1d8>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd ffae 	bl	80004c8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fdf2 	bl	800015c <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	a335      	add	r3, pc, #212	; (adr r3, 8002658 <_Z8MagCalibsss+0x1e0>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fd fde9 	bl	800015c <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fa49 	bl	8000a28 <__aeabi_d2iz>
 8002596:	4603      	mov	r3, r0
 8002598:	b21a      	sxth	r2, r3
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <_Z8MagCalibsss+0x200>)
 800259c:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 800259e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff26 	bl	80003f4 <__aeabi_i2d>
 80025a8:	a329      	add	r3, pc, #164	; (adr r3, 8002650 <_Z8MagCalibsss+0x1d8>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fd ff8b 	bl	80004c8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4614      	mov	r4, r2
 80025b8:	461d      	mov	r5, r3
 80025ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff18 	bl	80003f4 <__aeabi_i2d>
 80025c4:	a31e      	add	r3, pc, #120	; (adr r3, 8002640 <_Z8MagCalibsss+0x1c8>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd ff7d 	bl	80004c8 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fdbf 	bl	8000158 <__aeabi_dsub>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
 80025e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff04 	bl	80003f4 <__aeabi_i2d>
 80025ec:	a31c      	add	r3, pc, #112	; (adr r3, 8002660 <_Z8MagCalibsss+0x1e8>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ff69 	bl	80004c8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fd fdad 	bl	800015c <__adddf3>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	a317      	add	r3, pc, #92	; (adr r3, 8002668 <_Z8MagCalibsss+0x1f0>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fd fda2 	bl	8000158 <__aeabi_dsub>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa04 	bl	8000a28 <__aeabi_d2iz>
 8002620:	4603      	mov	r3, r0
 8002622:	b21a      	sxth	r2, r3
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <_Z8MagCalibsss+0x204>)
 8002626:	801a      	strh	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	4189374c 	.word	0x4189374c
 8002634:	3feee560 	.word	0x3feee560
 8002638:	3dee7818 	.word	0x3dee7818
 800263c:	3f8c725c 	.word	0x3f8c725c
 8002640:	f861a60d 	.word	0xf861a60d
 8002644:	3f929888 	.word	0x3f929888
 8002648:	3c361134 	.word	0x3c361134
 800264c:	3fee52bd 	.word	0x3fee52bd
 8002650:	a6ce3583 	.word	0xa6ce3583
 8002654:	3f7b8023 	.word	0x3f7b8023
 8002658:	33333333 	.word	0x33333333
 800265c:	4059d333 	.word	0x4059d333
 8002660:	24dd2f1b 	.word	0x24dd2f1b
 8002664:	3ff18106 	.word	0x3ff18106
 8002668:	e353f7cf 	.word	0xe353f7cf
 800266c:	40211ba5 	.word	0x40211ba5
 8002670:	40300000 	.word	0x40300000
 8002674:	20000d92 	.word	0x20000d92
 8002678:	20000d94 	.word	0x20000d94
 800267c:	20000d96 	.word	0x20000d96

08002680 <_Z9checkModei>:

void checkMode(int mod_ch) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800268e:	da0d      	bge.n	80026ac <_Z9checkModei+0x2c>

		  controller.mod = STABILIZE;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_Z9checkModei+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
		  controller.z0 = EKF.alt_gnd;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_Z9checkModei+0x5c>)
 800269a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <_Z9checkModei+0x58>)
 80026a0:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
		  controller.p_alt.reset();
 80026a4:	480e      	ldr	r0, [pc, #56]	; (80026e0 <_Z9checkModei+0x60>)
 80026a6:	f009 feb7 	bl	800c418 <_ZN3PID5resetEv>
	  }

	  else {
		  controller.mod = ALT_HOLD;
	  }
}
 80026aa:	e011      	b.n	80026d0 <_Z9checkModei+0x50>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80026b2:	db09      	blt.n	80026c8 <_Z9checkModei+0x48>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80026ba:	4293      	cmp	r3, r2
 80026bc:	dc04      	bgt.n	80026c8 <_Z9checkModei+0x48>
		  controller.mod = ALT_HOLD;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <_Z9checkModei+0x58>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 80026c6:	e003      	b.n	80026d0 <_Z9checkModei+0x50>
		  controller.mod = ALT_HOLD;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <_Z9checkModei+0x58>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200006e0 	.word	0x200006e0
 80026dc:	200004d8 	.word	0x200004d8
 80026e0:	20000a80 	.word	0x20000a80

080026e4 <_Z9Check_Armv>:

void Check_Arm() {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if(!armed) {
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <_Z9Check_Armv+0xa4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d045      	beq.n	8002782 <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <_Z9Check_Armv+0xa8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f240 424b 	movw	r2, #1099	; 0x44b
 80026fe:	4293      	cmp	r3, r2
 8002700:	dc3b      	bgt.n	800277a <_Z9Check_Armv+0x96>
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <_Z9Check_Armv+0xa8>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800270a:	4293      	cmp	r3, r2
 800270c:	dd35      	ble.n	800277a <_Z9Check_Armv+0x96>
				if(!arm_start){
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <_Z9Check_Armv+0xac>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 800271c:	f002 f834 	bl	8004788 <HAL_GetTick>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <_Z9Check_Armv+0xb0>)
 8002726:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <_Z9Check_Armv+0xac>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800272e:	f002 f82b 	bl	8004788 <HAL_GetTick>
 8002732:	4603      	mov	r3, r0
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <_Z9Check_Armv+0xb0>)
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800273e:	4293      	cmp	r3, r2
 8002740:	bf8c      	ite	hi
 8002742:	2301      	movhi	r3, #1
 8002744:	2300      	movls	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01a      	beq.n	8002782 <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 800274c:	4812      	ldr	r0, [pc, #72]	; (8002798 <_Z9Check_Armv+0xb4>)
 800274e:	f009 fe63 	bl	800c418 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <_Z9Check_Armv+0xb8>)
 8002754:	f009 fe60 	bl	800c418 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002758:	4811      	ldr	r0, [pc, #68]	; (80027a0 <_Z9Check_Armv+0xbc>)
 800275a:	f009 fe5d 	bl	800c418 <_ZN3PID5resetEv>
					armed = true;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <_Z9Check_Armv+0xa4>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276a:	480e      	ldr	r0, [pc, #56]	; (80027a4 <_Z9Check_Armv+0xc0>)
 800276c:	f002 fcba 	bl	80050e4 <HAL_GPIO_WritePin>
					EKF.sb = 1e-3;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <_Z9Check_Armv+0xc4>)
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <_Z9Check_Armv+0xc8>)
 8002774:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
				if(HAL_GetTick() - arm_timer > 3000) {
 8002778:	e003      	b.n	8002782 <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <_Z9Check_Armv+0xac>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8002780:	e7ff      	b.n	8002782 <_Z9Check_Armv+0x9e>
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000d05 	.word	0x20000d05
 800278c:	20000cac 	.word	0x20000cac
 8002790:	20000d04 	.word	0x20000d04
 8002794:	20000cf8 	.word	0x20000cf8
 8002798:	20000888 	.word	0x20000888
 800279c:	20000930 	.word	0x20000930
 80027a0:	200009d8 	.word	0x200009d8
 80027a4:	40010800 	.word	0x40010800
 80027a8:	200004d8 	.word	0x200004d8
 80027ac:	3a83126f 	.word	0x3a83126f

080027b0 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	if(armed) {
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <_Z12Check_Disarmv+0x84>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d038      	beq.n	800282e <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <_Z12Check_Disarmv+0x88>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f240 424b 	movw	r2, #1099	; 0x44b
 80027c4:	4293      	cmp	r3, r2
 80027c6:	dc2e      	bgt.n	8002826 <_Z12Check_Disarmv+0x76>
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <_Z12Check_Disarmv+0x88>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f240 424b 	movw	r2, #1099	; 0x44b
 80027d0:	4293      	cmp	r3, r2
 80027d2:	dc28      	bgt.n	8002826 <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <_Z12Check_Disarmv+0x8c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80027e2:	f001 ffd1 	bl	8004788 <HAL_GetTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_Z12Check_Disarmv+0x90>)
 80027ec:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <_Z12Check_Disarmv+0x8c>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80027f4:	f001 ffc8 	bl	8004788 <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <_Z12Check_Disarmv+0x90>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002804:	4293      	cmp	r3, r2
 8002806:	bf8c      	ite	hi
 8002808:	2301      	movhi	r3, #1
 800280a:	2300      	movls	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <_Z12Check_Disarmv+0x7e>
					armed = false;
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_Z12Check_Disarmv+0x84>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	4809      	ldr	r0, [pc, #36]	; (8002844 <_Z12Check_Disarmv+0x94>)
 8002820:	f002 fc60 	bl	80050e4 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002824:	e003      	b.n	800282e <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <_Z12Check_Disarmv+0x8c>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800282c:	e7ff      	b.n	800282e <_Z12Check_Disarmv+0x7e>
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000d05 	.word	0x20000d05
 8002838:	20000cac 	.word	0x20000cac
 800283c:	20000d07 	.word	0x20000d07
 8002840:	20000cfc 	.word	0x20000cfc
 8002844:	40010800 	.word	0x40010800

08002848 <_Z9TelemPackv>:

void TelemPack() {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 800284c:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <_Z9TelemPackv+0x208>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002852:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002854:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <_Z9TelemPackv+0x208>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a7e      	ldr	r2, [pc, #504]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800285a:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 800285c:	4b7c      	ldr	r3, [pc, #496]	; (8002a50 <_Z9TelemPackv+0x208>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002862:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800286c:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b77      	ldr	r3, [pc, #476]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002876:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8002878:	4b77      	ldr	r3, [pc, #476]	; (8002a58 <_Z9TelemPackv+0x210>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	b29a      	uxth	r2, r3
 800287e:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002880:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002882:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <_Z9TelemPackv+0x210>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800288a:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 800288c:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <_Z9TelemPackv+0x214>)
 800288e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002892:	4a70      	ldr	r2, [pc, #448]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002894:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002898:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800289c:	4a6d      	ldr	r2, [pc, #436]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800289e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <_Z9TelemPackv+0x218>)
 80028a2:	f993 3000 	ldrsb.w	r3, [r3]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f9f0 	bl	8000c8c <__aeabi_i2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028b0:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028b8:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028c0:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <_Z9TelemPackv+0x208>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4a63      	ldr	r2, [pc, #396]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028c8:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <_Z9TelemPackv+0x21c>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028d0:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80028d2:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <_Z9TelemPackv+0x21c>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028d8:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = euler_angles.roll;
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <_Z9TelemPackv+0x220>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028e0:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = euler_angles.pitch;
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <_Z9TelemPackv+0x220>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028e8:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <_Z9TelemPackv+0x224>)
 80028ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80028f4:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <_Z9TelemPackv+0x224>)
 80028f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80028fa:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.gyro[2];
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002900:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002906:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = euler_angles.yaw;
 8002908:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <_Z9TelemPackv+0x220>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a51      	ldr	r2, [pc, #324]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800290e:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002912:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002916:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002918:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <_Z9TelemPackv+0x224>)
 800291c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002922:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002926:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800292a:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002930:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002934:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002936:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <_Z9TelemPackv+0x214>)
 800293a:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800293e:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002940:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002944:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800294a:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <_Z9TelemPackv+0x214>)
 800294e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002954:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002958:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800295c:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800295e:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8002960:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <_Z9TelemPackv+0x214>)
 8002962:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002966:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <_Z9TelemPackv+0x214>)
 800296c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002972:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002976:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800297a:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800297c:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <_Z9TelemPackv+0x224>)
 8002980:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002984:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <_Z9TelemPackv+0x224>)
 800298c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <_Z9TelemPackv+0x228>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <_Z9TelemPackv+0x20c>)
 800299c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029a2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029aa:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029b0:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029b8:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 80029bc:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <_Z9TelemPackv+0x228>)
 80029be:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029c6:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.xpos;
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <_Z9TelemPackv+0x224>)
 80029cc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <_Z9TelemPackv+0x224>)
 80029d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  //telem_pack.position_body.y = EKF.ypos;

	  telem_pack.alt_thr = controller.alt_thr;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <_Z9TelemPackv+0x214>)
 80029e4:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 80029e8:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029ea:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 80029ec:	f001 fecc 	bl	8004788 <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accX;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <_Z9TelemPackv+0x22c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <_Z9TelemPackv+0x20c>)
 80029fe:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accY;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <_Z9TelemPackv+0x230>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a08:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZ;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <_Z9TelemPackv+0x234>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a12:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <_Z9TelemPackv+0x238>)
 8002a18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a1e:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <_Z9TelemPackv+0x23c>)
 8002a24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a2a:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <_Z9TelemPackv+0x240>)
 8002a30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a36:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <_Z9TelemPackv+0x244>)
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <_Z9TelemPackv+0x20c>)
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	23b7      	movs	r3, #183	; 0xb7
 8002a44:	461a      	mov	r2, r3
 8002a46:	f00c f831 	bl	800eaac <memcpy>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000340 	.word	0x20000340
 8002a54:	20000364 	.word	0x20000364
 8002a58:	20000c80 	.word	0x20000c80
 8002a5c:	200006e0 	.word	0x200006e0
 8002a60:	20000d98 	.word	0x20000d98
 8002a64:	2000031c 	.word	0x2000031c
 8002a68:	20000d80 	.word	0x20000d80
 8002a6c:	200004d8 	.word	0x200004d8
 8002a70:	20000d74 	.word	0x20000d74
 8002a74:	200002ec 	.word	0x200002ec
 8002a78:	200002f0 	.word	0x200002f0
 8002a7c:	200002f4 	.word	0x200002f4
 8002a80:	20000d92 	.word	0x20000d92
 8002a84:	20000d94 	.word	0x20000d94
 8002a88:	20000d96 	.word	0x20000d96
 8002a8c:	2000041c 	.word	0x2000041c

08002a90 <_Z9SendTelemv>:

void SendTelem() {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
	  TelemPack();
 8002a96:	f7ff fed7 	bl	8002848 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 8002a9a:	2364      	movs	r3, #100	; 0x64
 8002a9c:	22b7      	movs	r2, #183	; 0xb7
 8002a9e:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <_Z9SendTelemv+0x48>)
 8002aa0:	480e      	ldr	r0, [pc, #56]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002aa2:	f006 f855 	bl	8008b50 <HAL_UART_Transmit>
	  char end_char = '@';
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002aaa:	1df9      	adds	r1, r7, #7
 8002aac:	2364      	movs	r3, #100	; 0x64
 8002aae:	2201      	movs	r2, #1
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002ab2:	f006 f84d 	bl	8008b50 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 8002ab6:	1df9      	adds	r1, r7, #7
 8002ab8:	2364      	movs	r3, #100	; 0x64
 8002aba:	2201      	movs	r2, #1
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <_Z9SendTelemv+0x4c>)
 8002abe:	f006 f847 	bl	8008b50 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8002ac2:	f001 fe61 	bl	8004788 <HAL_GetTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <_Z9SendTelemv+0x50>)
 8002acc:	601a      	str	r2, [r3, #0]


}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000041c 	.word	0x2000041c
 8002adc:	2000025c 	.word	0x2000025c
 8002ae0:	20000d00 	.word	0x20000d00

08002ae4 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	2301      	movs	r3, #1
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2302      	movs	r3, #2
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2301      	movs	r3, #1
 8002b02:	21d1      	movs	r1, #209	; 0xd1
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <_Z7GyroOkuh+0x40>)
 8002b06:	f003 f8bb 	bl	8005c80 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002b0a:	7b3b      	ldrb	r3, [r7, #12]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	b21a      	sxth	r2, r3
 8002b10:	7b7b      	ldrb	r3, [r7, #13]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200000a8 	.word	0x200000a8

08002b28 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8002b32:	2305      	movs	r3, #5
 8002b34:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8002b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002b3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b40:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -15;
 8002b42:	f06f 030e 	mvn.w	r3, #14
 8002b46:	60fb      	str	r3, [r7, #12]
	int out_max  = 15;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002b54:	3304      	adds	r3, #4
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dd09      	ble.n	8002b6e <_Z7pwm2angt+0x46>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	db03      	blt.n	8002b6e <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8002b66:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b6a:	83fb      	strh	r3, [r7, #30]
 8002b6c:	e001      	b.n	8002b72 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b72:	8bfa      	ldrh	r2, [r7, #30]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	1a8a      	subs	r2, r1, r2
 8002b7e:	fb02 f203 	mul.w	r2, r2, r3
 8002b82:	6939      	ldr	r1, [r7, #16]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe f87b 	bl	8000c8c <__aeabi_i2f>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002bb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bb4:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8002bb6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002bba:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8002bbc:	2364      	movs	r3, #100	; 0x64
 8002bbe:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	1a8a      	subs	r2, r1, r2
 8002bcc:	fb02 f203 	mul.w	r2, r2, r3
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1acb      	subs	r3, r1, r3
 8002bd6:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	425b      	negs	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f853 	bl	8000c8c <__aeabi_i2f>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2302      	movs	r3, #2
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a7      	movs	r1, #167	; 0xa7
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <_Z6AccOkuh+0x40>)
 8002c12:	f003 f835 	bl	8005c80 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8002c16:	7b7b      	ldrb	r3, [r7, #13]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000a8 	.word	0x200000a8

08002c34 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fd fbd9 	bl	80003f4 <__aeabi_i2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f009 ffd9 	bl	800cc00 <sqrt>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8002c68:	4bc6      	ldr	r3, [pc, #792]	; (8002f84 <_Z9DCM2EulerPsS_+0x328>)
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3302      	adds	r3, #2
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	4619      	mov	r1, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	fb03 f301 	mul.w	r3, r3, r1
 8002c94:	441a      	add	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca8:	fb03 f301 	mul.w	r3, r3, r1
 8002cac:	4413      	add	r3, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ffc0 	bl	8002c34 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fd fedc 	bl	8000a78 <__aeabi_d2f>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	fb03 f302 	mul.w	r3, r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	3202      	adds	r2, #2
 8002cdc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ce0:	fb02 f203 	mul.w	r2, r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	fb03 f301 	mul.w	r3, r3, r1
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	3102      	adds	r1, #2
 8002cfc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3304      	adds	r3, #4
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	fb03 f301 	mul.w	r3, r3, r1
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	3104      	adds	r1, #4
 8002d1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	441a      	add	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d38:	fb03 f301 	mul.w	r3, r3, r1
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	3104      	adds	r1, #4
 8002d40:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd ff9e 	bl	8000c8c <__aeabi_i2f>
 8002d50:	4604      	mov	r4, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d62:	fb03 f202 	mul.w	r2, r3, r2
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	fb03 f301 	mul.w	r3, r3, r1
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd ff85 	bl	8000c8c <__aeabi_i2f>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f9cd 	bl	8003124 <_Z6squaref>
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9c:	fb03 f202 	mul.w	r2, r3, r2
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3304      	adds	r3, #4
 8002da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da8:	4619      	mov	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db0:	fb03 f301 	mul.w	r3, r3, r1
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff68 	bl	8000c8c <__aeabi_i2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f9b0 	bl	8003124 <_Z6squaref>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7fd feab 	bl	8000b24 <__addsf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	fb03 f202 	mul.w	r2, r3, r2
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3304      	adds	r3, #4
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	4619      	mov	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	fb03 f301 	mul.w	r3, r3, r1
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd ff43 	bl	8000c8c <__aeabi_i2f>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f98b 	bl	8003124 <_Z6squaref>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7fd fe86 	bl	8000b24 <__addsf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fe28 	bl	8001a70 <_ZSt4sqrtf>
 8002e20:	4603      	mov	r3, r0
 8002e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd ff85 	bl	8000d34 <__aeabi_fmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7fe f834 	bl	8000e9c <__aeabi_fdiv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3302      	adds	r3, #2
 8002e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3302      	adds	r3, #2
 8002e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e60:	fb03 f301 	mul.w	r3, r3, r1
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff10 	bl	8000c8c <__aeabi_i2f>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3302      	adds	r3, #2
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e92:	fb03 f301 	mul.w	r3, r3, r1
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fef7 	bl	8000c8c <__aeabi_i2f>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f93f 	bl	8003124 <_Z6squaref>
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb8:	fb03 f202 	mul.w	r2, r3, r2
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ecc:	fb03 f301 	mul.w	r3, r3, r1
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd feda 	bl	8000c8c <__aeabi_i2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f922 	bl	8003124 <_Z6squaref>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7fd fe1d 	bl	8000b24 <__addsf3>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461d      	mov	r5, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f00:	fb03 f202 	mul.w	r2, r3, r2
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3304      	adds	r3, #4
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3302      	adds	r3, #2
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	fb03 f301 	mul.w	r3, r3, r1
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd feb5 	bl	8000c8c <__aeabi_i2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f8fd 	bl	8003124 <_Z6squaref>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f7fd fdf8 	bl	8000b24 <__addsf3>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fd9a 	bl	8001a70 <_ZSt4sqrtf>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7fd ffab 	bl	8000e9c <__aeabi_fdiv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f50:	425b      	negs	r3, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fe9a 	bl	8000c8c <__aeabi_i2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd ff9d 	bl	8000e9c <__aeabi_fdiv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6e:	425b      	negs	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fe8b 	bl	8000c8c <__aeabi_i2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff8e 	bl	8000e9c <__aeabi_fdiv>
 8002f80:	4603      	mov	r3, r0
 8002f82:	e001      	b.n	8002f88 <_Z9DCM2EulerPsS_+0x32c>
 8002f84:	42654ca3 	.word	0x42654ca3
 8002f88:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f92:	425b      	negs	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe79 	bl	8000c8c <__aeabi_i2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ff7c 	bl	8000e9c <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fd20 	bl	80019f4 <_ZSt4asinf>
 8002fb4:	61b8      	str	r0, [r7, #24]
	euler_angles.pitch = rad2deg*pitch;
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fba:	f7fd febb 	bl	8000d34 <__aeabi_fmul>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	//float cp = cos(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	6a38      	ldr	r0, [r7, #32]
 8002fca:	f7fd ff67 	bl	8000e9c <__aeabi_fdiv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fd1b 	bl	8001a0c <_ZSt4atanf>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd feaa 	bl	8000d34 <__aeabi_fmul>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21,DCM11);
 8002fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fec:	f7fe fd1a 	bl	8001a24 <_ZSt5atan2ff>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ff6:	f7fd fe9d 	bl	8000d34 <__aeabi_fmul>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
	//euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)euler_angles.yaw < -175 && (int)euler_angles.yaw >= -180) {
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f872 	bl	80010ec <__aeabi_f2iz>
 8003008:	4603      	mov	r3, r0
 800300a:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 800300e:	da25      	bge.n	800305c <_Z9DCM2EulerPsS_+0x400>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f869 	bl	80010ec <__aeabi_f2iz>
 800301a:	4603      	mov	r3, r0
 800301c:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003020:	db1c      	blt.n	800305c <_Z9DCM2EulerPsS_+0x400>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && EKF.gyro[2] > 0) {
 8003022:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d04f      	beq.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <_Z9DCM2EulerPsS_+0x4bc>)
 800302c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003030:	f04f 0100 	mov.w	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe f839 	bl	80010ac <__aeabi_fcmpgt>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d100      	bne.n	8003042 <_Z9DCM2EulerPsS_+0x3e6>
 8003040:	e043      	b.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
			yaw_counter++;
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <_Z9DCM2EulerPsS_+0x4c0>)
 8003044:	f993 3000 	ldrsb.w	r3, [r3]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3301      	adds	r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	b25a      	sxtb	r2, r3
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <_Z9DCM2EulerPsS_+0x4c0>)
 8003052:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && EKF.gyro[2] > 0) {
 800305a:	e036      	b.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
		}

	}
	else if((int)euler_angles.yaw > 175 && (int)euler_angles.yaw <= 180) {
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f843 	bl	80010ec <__aeabi_f2iz>
 8003066:	4603      	mov	r3, r0
 8003068:	2baf      	cmp	r3, #175	; 0xaf
 800306a:	dd24      	ble.n	80030b6 <_Z9DCM2EulerPsS_+0x45a>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe f83b 	bl	80010ec <__aeabi_f2iz>
 8003076:	4603      	mov	r3, r0
 8003078:	2bb4      	cmp	r3, #180	; 0xb4
 800307a:	dc1c      	bgt.n	80030b6 <_Z9DCM2EulerPsS_+0x45a>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && EKF.gyro[2] < 0) {
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <_Z9DCM2EulerPsS_+0x4bc>)
 8003086:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd ffee 	bl	8001070 <__aeabi_fcmplt>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d100      	bne.n	800309c <_Z9DCM2EulerPsS_+0x440>
 800309a:	e016      	b.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
			yaw_counter--;
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <_Z9DCM2EulerPsS_+0x4c0>)
 800309e:	f993 3000 	ldrsb.w	r3, [r3]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	b25a      	sxtb	r2, r3
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <_Z9DCM2EulerPsS_+0x4c0>)
 80030ac:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && EKF.gyro[2] < 0) {
 80030b4:	e009      	b.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	2b32      	cmp	r3, #50	; 0x32
 80030bc:	d905      	bls.n	80030ca <_Z9DCM2EulerPsS_+0x46e>
		yaw_sign = NEUTRAL;
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <_Z9DCM2EulerPsS_+0x4b8>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d005      	beq.n	80030de <_Z9DCM2EulerPsS_+0x482>
		jump_counter++;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_Z9DCM2EulerPsS_+0x4c4>)
 80030dc:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <_Z9DCM2EulerPsS_+0x4c0>)
 80030e0:	f993 3000 	ldrsb.w	r3, [r3]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80030ea:	fb03 f302 	mul.w	r3, r3, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fdcc 	bl	8000c8c <__aeabi_i2f>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4619      	mov	r1, r3
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7fd fd13 	bl	8000b24 <__addsf3>
 80030fe:	4603      	mov	r3, r0
 8003100:	617b      	str	r3, [r7, #20]
	euler_angles.yaw = yaw;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 8003108:	bf00      	nop

}
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	3738      	adds	r7, #56	; 0x38
 800310e:	46bd      	mov	sp, r7
 8003110:	bdb0      	pop	{r4, r5, r7, pc}
 8003112:	bf00      	nop
 8003114:	20000001 	.word	0x20000001
 8003118:	200004d8 	.word	0x200004d8
 800311c:	20000d98 	.word	0x20000d98
 8003120:	20000d9a 	.word	0x20000d9a

08003124 <_Z6squaref>:

float square(float x) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	float y = x*x;
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fe00 	bl	8000d34 <__aeabi_fmul>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
	return y;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <_Z6PWMYazv>:

void PWMYaz() {
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	  if(armed) {
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <_Z6PWMYazv+0x9c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d044      	beq.n	80031da <_Z6PWMYazv+0x96>

		  if(!motor_start) {
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <_Z6PWMYazv+0xa0>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 800315e:	f000 f8a5 	bl	80032ac <_Z11MotorBaslatv>
		  	  motor_start = true;
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <_Z6PWMYazv+0xa0>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN) {
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <_Z6PWMYazv+0xa4>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f240 52db 	movw	r2, #1499	; 0x5db
 8003170:	4293      	cmp	r3, r2
 8003172:	dc1a      	bgt.n	80031aa <_Z6PWMYazv+0x66>
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <_Z6PWMYazv+0xa4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317c:	dd15      	ble.n	80031aa <_Z6PWMYazv+0x66>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <_Z6PWMYazv+0xa8>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <_Z6PWMYazv+0xac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <_Z6PWMYazv+0xa8>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <_Z6PWMYazv+0xac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <_Z6PWMYazv+0xa8>)
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <_Z6PWMYazv+0xac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_Z6PWMYazv+0xa8>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <_Z6PWMYazv+0xac>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
 80031a6:	bf00      	nop
		  }
	  }



}
 80031a8:	e017      	b.n	80031da <_Z6PWMYazv+0x96>
		  else if(motor_start) {
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <_Z6PWMYazv+0xa0>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d013      	beq.n	80031da <_Z6PWMYazv+0x96>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <_Z6PWMYazv+0xac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <_Z6PWMYazv+0xac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <_Z6PWMYazv+0xac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <_Z6PWMYazv+0xac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000d05 	.word	0x20000d05
 80031e4:	20000d06 	.word	0x20000d06
 80031e8:	20000cac 	.word	0x20000cac
 80031ec:	20000c80 	.word	0x20000c80
 80031f0:	200000fc 	.word	0x200000fc

080031f4 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800320e:	da12      	bge.n	8003236 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fc66 	bl	8002ae4 <_Z7GyroOkuh>
 8003218:	4603      	mov	r3, r0
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fd36 	bl	8000c8c <__aeabi_i2f>
 8003220:	4603      	mov	r3, r0
 8003222:	4619      	mov	r1, r3
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7fd fc7d 	bl	8000b24 <__addsf3>
 800322a:	4603      	mov	r3, r0
 800322c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	e7e8      	b.n	8003208 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8003236:	4905      	ldr	r1, [pc, #20]	; (800324c <_Z7GyroErrh+0x58>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7fd fe2f 	bl	8000e9c <__aeabi_fdiv>
 800323e:	4603      	mov	r3, r0
 8003240:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8003242:	68fb      	ldr	r3, [r7, #12]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	44fa0000 	.word	0x44fa0000

08003250 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800326a:	da12      	bge.n	8003292 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fcbe 	bl	8002bf0 <_Z6AccOkuh>
 8003274:	4603      	mov	r3, r0
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fd08 	bl	8000c8c <__aeabi_i2f>
 800327c:	4603      	mov	r3, r0
 800327e:	4619      	mov	r1, r3
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7fd fc4f 	bl	8000b24 <__addsf3>
 8003286:	4603      	mov	r3, r0
 8003288:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3301      	adds	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	e7e8      	b.n	8003264 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8003292:	4905      	ldr	r1, [pc, #20]	; (80032a8 <_Z6AccErrh+0x58>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7fd fe01 	bl	8000e9c <__aeabi_fdiv>
 800329a:	4603      	mov	r3, r0
 800329c:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	44fa0000 	.word	0x44fa0000

080032ac <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <_Z11MotorBaslatv+0x38>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <_Z11MotorBaslatv+0x38>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <_Z11MotorBaslatv+0x38>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032cc:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <_Z11MotorBaslatv+0x38>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80032d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032dc:	f001 fa5e 	bl	800479c <HAL_Delay>
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200000fc 	.word	0x200000fc

080032e8 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80032e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ea:	b0a1      	sub	sp, #132	; 0x84
 80032ec:	af0c      	add	r7, sp, #48	; 0x30
 80032ee:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	f040 8404 	bne.w	8003b02 <HAL_TIM_PeriodElapsedCallback+0x81a>
		//1.25 ms || 800 Hz


		set_ucounter(SONAR_CLOCK_RATE);
 80032fa:	2050      	movs	r0, #80	; 0x50
 80032fc:	f7fe fb4a 	bl	8001994 <set_ucounter>
		set_b_counter(12);
 8003300:	200c      	movs	r0, #12
 8003302:	f7fe faf3 	bl	80018ec <set_b_counter>

		controller_counter++;
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	4b49      	ldr	r3, [pc, #292]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003310:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800331c:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	4b45      	ldr	r3, [pc, #276]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003328:	801a      	strh	r2, [r3, #0]

		if(mag_counter == MAG_CLOCK_RATE) {
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b0b      	cmp	r3, #11
 8003330:	d146      	bne.n	80033c0 <HAL_TIM_PeriodElapsedCallback+0xd8>
			mag_counter = 0;
 8003332:	4b42      	ldr	r3, [pc, #264]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003334:	2200      	movs	r2, #0
 8003336:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 8003338:	4a41      	ldr	r2, [pc, #260]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800333a:	4942      	ldr	r1, [pc, #264]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800333c:	4842      	ldr	r0, [pc, #264]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800333e:	f7fd ff85 	bl	800124c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003348:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800334a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800334e:	4a3c      	ldr	r2, [pc, #240]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003350:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f88f 	bl	8002478 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 800335a:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800335c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003360:	843b      	strh	r3, [r7, #32]
			mag[1] = MAG_Y_CALIB;
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003368:	847b      	strh	r3, [r7, #34]	; 0x22
			mag[2] = MAG_Z_CALIB;
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800336c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003370:	84bb      	strh	r3, [r7, #36]	; 0x24

			int16_t acc[3];
			acc[0] = accX;
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd feb8 	bl	80010ec <__aeabi_f2iz>
 800337c:	4603      	mov	r3, r0
 800337e:	b21b      	sxth	r3, r3
 8003380:	833b      	strh	r3, [r7, #24]
			acc[1] = accY;
 8003382:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd feb0 	bl	80010ec <__aeabi_f2iz>
 800338c:	4603      	mov	r3, r0
 800338e:	b21b      	sxth	r3, r3
 8003390:	837b      	strh	r3, [r7, #26]
			acc[2] = accZ;
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fea8 	bl	80010ec <__aeabi_f2iz>
 800339c:	4603      	mov	r3, r0
 800339e:	b21b      	sxth	r3, r3
 80033a0:	83bb      	strh	r3, [r7, #28]
			euler_angles = DCM2Euler(acc, mag);
 80033a2:	4c30      	ldr	r4, [pc, #192]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80033a4:	463b      	mov	r3, r7
 80033a6:	f107 0220 	add.w	r2, r7, #32
 80033aa:	f107 0118 	add.w	r1, r7, #24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fc54 	bl	8002c5c <_Z9DCM2EulerPsS_>
 80033b4:	4623      	mov	r3, r4
 80033b6:	463a      	mov	r2, r7
 80033b8:	6810      	ldr	r0, [r2, #0]
 80033ba:	6851      	ldr	r1, [r2, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b28      	cmp	r3, #40	; 0x28
 80033c6:	d125      	bne.n	8003414 <HAL_TIM_PeriodElapsedCallback+0x12c>
			  camera_counter = 0;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80033d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033d4:	c303      	stmia	r3!, {r0, r1}
 80033d6:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80033da:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fc53 	bl	8000c8c <__aeabi_i2f>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4921      	ldr	r1, [pc, #132]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fd56 	bl	8000e9c <__aeabi_fdiv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80033f6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

			  if(!cam_data.detected) {
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_TIM_PeriodElapsedCallback+0x124>
				  EKF.Qc = 9e9;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003406:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800340a:	e003      	b.n	8003414 <HAL_TIM_PeriodElapsedCallback+0x12c>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003410:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
			  }
		}

		if(get_ucounter() == 1) {
 8003414:	f7fe fad8 	bl	80019c8 <get_ucounter>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02b      	beq.n	8003480 <HAL_TIM_PeriodElapsedCallback+0x198>
			request_range();
 8003428:	f7fe fa7a 	bl	8001920 <request_range>
 800342c:	e0e9      	b.n	8003602 <HAL_TIM_PeriodElapsedCallback+0x31a>
 800342e:	bf00      	nop
 8003430:	20000144 	.word	0x20000144
 8003434:	20000d20 	.word	0x20000d20
 8003438:	20000d22 	.word	0x20000d22
 800343c:	20000d24 	.word	0x20000d24
 8003440:	20000d90 	.word	0x20000d90
 8003444:	20000d8e 	.word	0x20000d8e
 8003448:	20000d8c 	.word	0x20000d8c
 800344c:	20000d92 	.word	0x20000d92
 8003450:	20000d94 	.word	0x20000d94
 8003454:	20000d96 	.word	0x20000d96
 8003458:	200002ec 	.word	0x200002ec
 800345c:	200002f0 	.word	0x200002f0
 8003460:	200002f4 	.word	0x200002f4
 8003464:	20000d80 	.word	0x20000d80
 8003468:	20000d74 	.word	0x20000d74
 800346c:	20000d68 	.word	0x20000d68
 8003470:	42c80000 	.word	0x42c80000
 8003474:	200004d8 	.word	0x200004d8
 8003478:	50061c46 	.word	0x50061c46
 800347c:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003480:	f7fe faa2 	bl	80019c8 <get_ucounter>
 8003484:	4603      	mov	r3, r0
 8003486:	2b50      	cmp	r3, #80	; 0x50
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80b6 	beq.w	8003602 <HAL_TIM_PeriodElapsedCallback+0x31a>
		  sonar_range = getRange();
 8003496:	f7fe fa5d 	bl	8001954 <getRange>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	4b70      	ldr	r3, [pc, #448]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80034a0:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80034a8:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a70      	ldr	r2, [pc, #448]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80034b0:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 80034b2:	4b70      	ldr	r3, [pc, #448]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4970      	ldr	r1, [pc, #448]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fc3b 	bl	8000d34 <__aeabi_fmul>
 80034be:	4603      	mov	r3, r0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fa8b 	bl	80019dc <_ZSt3absf>
 80034c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 80034c8:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	496a      	ldr	r1, [pc, #424]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fc30 	bl	8000d34 <__aeabi_fmul>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fa80 	bl	80019dc <_ZSt3absf>
 80034dc:	64b8      	str	r0, [r7, #72]	; 0x48
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80034de:	4b60      	ldr	r3, [pc, #384]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fbce 	bl	8000c84 <__aeabi_ui2f>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc ff94 	bl	8000418 <__aeabi_f2d>
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80034f6:	f7fd f911 	bl	800071c <__aeabi_ddiv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4614      	mov	r4, r2
 8003500:	461d      	mov	r5, r3
 8003502:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003504:	f7fe fa9c 	bl	8001a40 <_ZSt3cosf>
 8003508:	4603      	mov	r3, r0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc ff84 	bl	8000418 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fc ffd6 	bl	80004c8 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003526:	f7fe fa8b 	bl	8001a40 <_ZSt3cosf>
 800352a:	4603      	mov	r3, r0
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc ff73 	bl	8000418 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fc ffc5 	bl	80004c8 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f7fd fa97 	bl	8000a78 <__aeabi_d2f>
 800354a:	4603      	mov	r3, r0
 800354c:	4a45      	ldr	r2, [pc, #276]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800354e:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8003550:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8003556:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a43      	ldr	r2, [pc, #268]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fadd 	bl	8000b20 <__aeabi_fsub>
 8003566:	4603      	mov	r3, r0
 8003568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fc96 	bl	8000e9c <__aeabi_fdiv>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003576:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fa2d 	bl	80019dc <_ZSt3absf>
 8003582:	4603      	mov	r3, r0
 8003584:	2201      	movs	r2, #1
 8003586:	4614      	mov	r4, r2
 8003588:	493d      	ldr	r1, [pc, #244]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fd8e 	bl	80010ac <__aeabi_fcmpgt>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8003596:	2300      	movs	r3, #0
 8003598:	461c      	mov	r4, r3
 800359a:	b2e3      	uxtb	r3, r4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
			  sonar_alt = sonar_alt_;
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035a6:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2f      	ldr	r2, [pc, #188]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80035ae:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4933      	ldr	r1, [pc, #204]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fd78 	bl	80010ac <__aeabi_fcmpgt>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80035c2:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ff26 	bl	8000418 <__aeabi_f2d>
 80035cc:	a322      	add	r3, pc, #136	; (adr r3, 8003658 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd f9eb 	bl	80009ac <__aeabi_dcmplt>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_TIM_PeriodElapsedCallback+0x306>
			  EKF.Qs = 9e9;
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035de:	4a2b      	ldr	r2, [pc, #172]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80035e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  EKF.salt = 50;
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035e6:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80035e8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80035ec:	e009      	b.n	8003602 <HAL_TIM_PeriodElapsedCallback+0x31a>
		  }

		  else {
			  EKF.Qs = 0.25;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035f0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80035f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  EKF.salt = 1;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80035fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035fe:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		  }


		}

		if(get_b_counter() == 1) {
 8003602:	f7fe f969 	bl	80018d8 <get_b_counter>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_TIM_PeriodElapsedCallback+0x334>
			write_ut();
 8003616:	f7fd ff5f 	bl	80014d8 <write_ut>
 800361a:	e06b      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x40c>
		}

		else if(get_b_counter() == 5) { //5 ms
 800361c:	f7fe f95c 	bl	80018d8 <get_b_counter>
 8003620:	4603      	mov	r3, r0
 8003622:	2b05      	cmp	r3, #5
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d033      	beq.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			bmp.uncomp.temp = read_ut ();
 8003630:	f7fd ff6a 	bl	8001508 <read_ut>
 8003634:	4603      	mov	r3, r0
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fb28 	bl	8000c8c <__aeabi_i2f>
 800363c:	4603      	mov	r3, r0
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003640:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8003642:	4814      	ldr	r0, [pc, #80]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003644:	f7fd ff7a 	bl	800153c <get_temp>
 8003648:	4603      	mov	r3, r0
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800364c:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 800364e:	f7fd ffcd 	bl	80015ec <write_up>
 8003652:	e04f      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x40c>
 8003654:	f3af 8000 	nop.w
 8003658:	33333333 	.word	0x33333333
 800365c:	3fd33333 	.word	0x3fd33333
 8003660:	20000d1c 	.word	0x20000d1c
 8003664:	20000d0c 	.word	0x20000d0c
 8003668:	20000d10 	.word	0x20000d10
 800366c:	20000d14 	.word	0x20000d14
 8003670:	20000d18 	.word	0x20000d18
 8003674:	20000340 	.word	0x20000340
 8003678:	3c8e8a72 	.word	0x3c8e8a72
 800367c:	40590000 	.word	0x40590000
 8003680:	40e00000 	.word	0x40e00000
 8003684:	40c00000 	.word	0x40c00000
 8003688:	200004d8 	.word	0x200004d8
 800368c:	50061c46 	.word	0x50061c46
 8003690:	42480000 	.word	0x42480000
 8003694:	20000d28 	.word	0x20000d28
		}

		else if(get_b_counter() == 12) { //
 8003698:	f7fe f91e 	bl	80018d8 <get_b_counter>
 800369c:	4603      	mov	r3, r0
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x40c>
			bmp.uncomp.press = read_up (bmp.oss);
 80036ac:	4bac      	ldr	r3, [pc, #688]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036b0:	f7fd ffbc 	bl	800162c <read_up>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4aaa      	ldr	r2, [pc, #680]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036b8:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80036ba:	4ea9      	ldr	r6, [pc, #676]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036bc:	466d      	mov	r5, sp
 80036be:	f106 0410 	add.w	r4, r6, #16
 80036c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80036ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036d6:	f7fd ffd7 	bl	8001688 <get_pressure>
 80036da:	4603      	mov	r3, r0
 80036dc:	4aa0      	ldr	r2, [pc, #640]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036de:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 80036e0:	489f      	ldr	r0, [pc, #636]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036e2:	f7fe f89d 	bl	8001820 <get_altitude>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a9d      	ldr	r2, [pc, #628]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036ea:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80036ec:	4b9c      	ldr	r3, [pc, #624]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	4a9c      	ldr	r2, [pc, #624]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80036f2:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 80036f4:	4b9c      	ldr	r3, [pc, #624]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f040 8202 	bne.w	8003b02 <HAL_TIM_PeriodElapsedCallback+0x81a>

		  controller_counter = 0;
 80036fe:	4b9a      	ldr	r3, [pc, #616]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8003700:	2200      	movs	r2, #0
 8003702:	801a      	strh	r2, [r3, #0]



		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8003704:	201d      	movs	r0, #29
 8003706:	f7ff f9ed 	bl	8002ae4 <_Z7GyroOkuh>
 800370a:	4603      	mov	r3, r0
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fabd 	bl	8000c8c <__aeabi_i2f>
 8003712:	4602      	mov	r2, r0
 8003714:	4b95      	ldr	r3, [pc, #596]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7fd fa00 	bl	8000b20 <__aeabi_fsub>
 8003720:	4603      	mov	r3, r0
 8003722:	4993      	ldr	r1, [pc, #588]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fbb9 	bl	8000e9c <__aeabi_fdiv>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	4b91      	ldr	r3, [pc, #580]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003730:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8003732:	201f      	movs	r0, #31
 8003734:	f7ff f9d6 	bl	8002ae4 <_Z7GyroOkuh>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd faa6 	bl	8000c8c <__aeabi_i2f>
 8003740:	4602      	mov	r2, r0
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fd f9e9 	bl	8000b20 <__aeabi_fsub>
 800374e:	4603      	mov	r3, r0
 8003750:	4987      	ldr	r1, [pc, #540]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fba2 	bl	8000e9c <__aeabi_fdiv>
 8003758:	4603      	mov	r3, r0
 800375a:	461a      	mov	r2, r3
 800375c:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x694>)
 800375e:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8003760:	2021      	movs	r0, #33	; 0x21
 8003762:	f7ff f9bf 	bl	8002ae4 <_Z7GyroOkuh>
 8003766:	4603      	mov	r3, r0
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fa8f 	bl	8000c8c <__aeabi_i2f>
 800376e:	4602      	mov	r2, r0
 8003770:	4b83      	ldr	r3, [pc, #524]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fd f9d2 	bl	8000b20 <__aeabi_fsub>
 800377c:	4603      	mov	r3, r0
 800377e:	497c      	ldr	r1, [pc, #496]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd fb8b 	bl	8000e9c <__aeabi_fdiv>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 800378c:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 800378e:	4b79      	ldr	r3, [pc, #484]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003794:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		  EKF.gyro[1] = -1*gyroY;
 8003798:	4b78      	ldr	r3, [pc, #480]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x694>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037a0:	4a79      	ldr	r2, [pc, #484]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80037a2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		  EKF.gyro[2] = -1*gyroZ;
 80037a6:	4b77      	ldr	r3, [pc, #476]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	4a76      	ldr	r2, [pc, #472]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80037b0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 80037b4:	2032      	movs	r0, #50	; 0x32
 80037b6:	f7ff fa1b 	bl	8002bf0 <_Z6AccOkuh>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fa65 	bl	8000c8c <__aeabi_i2f>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a71      	ldr	r2, [pc, #452]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80037c6:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 80037c8:	2034      	movs	r0, #52	; 0x34
 80037ca:	f7ff fa11 	bl	8002bf0 <_Z6AccOkuh>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fa5b 	bl	8000c8c <__aeabi_i2f>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4a6d      	ldr	r2, [pc, #436]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80037da:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 80037dc:	2036      	movs	r0, #54	; 0x36
 80037de:	f7ff fa07 	bl	8002bf0 <_Z6AccOkuh>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fa51 	bl	8000c8c <__aeabi_i2f>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4a69      	ldr	r2, [pc, #420]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80037ee:	6013      	str	r3, [r2, #0]

		  accXc = (float)accX* 0.0078;
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fe0f 	bl	8000418 <__aeabi_f2d>
 80037fa:	a357      	add	r3, pc, #348	; (adr r3, 8003958 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fe62 	bl	80004c8 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd f934 	bl	8000a78 <__aeabi_d2f>
 8003810:	4603      	mov	r3, r0
 8003812:	4a61      	ldr	r2, [pc, #388]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003814:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003816:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc fdfc 	bl	8000418 <__aeabi_f2d>
 8003820:	a34d      	add	r3, pc, #308	; (adr r3, 8003958 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fe4f 	bl	80004c8 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f921 	bl	8000a78 <__aeabi_d2f>
 8003836:	4603      	mov	r3, r0
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800383a:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 800383c:	4b55      	ldr	r3, [pc, #340]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fde9 	bl	8000418 <__aeabi_f2d>
 8003846:	a344      	add	r3, pc, #272	; (adr r3, 8003958 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fc fe3c 	bl	80004c8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f90e 	bl	8000a78 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003860:	6013      	str	r3, [r2, #0]
		  accZc = 0.0091315*accYs - 0.072464*accXs + 0.98549*accZs + 0.08443;
		  */


		  //float acc[3];
		  EKF.acc[0] = accXc;// - AccXh;
 8003862:	4b4d      	ldr	r3, [pc, #308]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a48      	ldr	r2, [pc, #288]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003868:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
		  EKF.acc[1] = accYc;// - AccYh;
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a45      	ldr	r2, [pc, #276]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003872:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		  EKF.acc[2] = accZc;// - AccZh;
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a43      	ldr	r2, [pc, #268]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800387c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8003880:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
		  EKF.acc_vert = (accZc - 1.0)  * g;
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fdc5 	bl	8000418 <__aeabi_f2d>
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8003894:	f7fc fc60 	bl	8000158 <__aeabi_dsub>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4614      	mov	r4, r2
 800389e:	461d      	mov	r5, r3
 80038a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038a2:	f7fc fdb9 	bl	8000418 <__aeabi_f2d>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fc fe0b 	bl	80004c8 <__aeabi_dmul>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd f8dd 	bl	8000a78 <__aeabi_d2f>
 80038be:	4603      	mov	r3, r0
 80038c0:	4a31      	ldr	r2, [pc, #196]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80038c2:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178

		  float ax_b = (accXc-AccXh);
 80038c6:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a38      	ldr	r2, [pc, #224]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd f925 	bl	8000b20 <__aeabi_fsub>
 80038d6:	4603      	mov	r3, r0
 80038d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ax_b = ax_b - 1 * sin(deg2rad*EKF.state.angles[1]);
 80038da:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80038dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80038e0:	4933      	ldr	r1, [pc, #204]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fa26 	bl	8000d34 <__aeabi_fmul>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe f8b4 	bl	8001a58 <_ZSt3sinf>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4619      	mov	r1, r3
 80038f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038f6:	f7fd f913 	bl	8000b20 <__aeabi_fsub>
 80038fa:	4603      	mov	r3, r0
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ax_b = ax_b * cos(deg2rad*EKF.state.angles[1]);
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003900:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003904:	492a      	ldr	r1, [pc, #168]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fa14 	bl	8000d34 <__aeabi_fmul>
 800390c:	4603      	mov	r3, r0
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f896 	bl	8001a40 <_ZSt3cosf>
 8003914:	4603      	mov	r3, r0
 8003916:	4619      	mov	r1, r3
 8003918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800391a:	f7fd fa0b 	bl	8000d34 <__aeabi_fmul>
 800391e:	4603      	mov	r3, r0
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
		  float accXm = ax_b  * g;
 8003922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003926:	f7fd fa05 	bl	8000d34 <__aeabi_fmul>
 800392a:	4603      	mov	r3, r0
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
		  float accYm = (accYc-AccYh)  * g;
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f8f1 	bl	8000b20 <__aeabi_fsub>
 800393e:	4603      	mov	r3, r0
 8003940:	4619      	mov	r1, r3
 8003942:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003944:	f7fd f9f6 	bl	8000d34 <__aeabi_fmul>
 8003948:	4603      	mov	r3, r0
 800394a:	637b      	str	r3, [r7, #52]	; 0x34

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 800394c:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003954:	e030      	b.n	80039b8 <HAL_TIM_PeriodElapsedCallback+0x6d0>
 8003956:	bf00      	nop
 8003958:	8e8a71de 	.word	0x8e8a71de
 800395c:	3f7ff2e4 	.word	0x3f7ff2e4
 8003960:	20000d28 	.word	0x20000d28
 8003964:	20000d08 	.word	0x20000d08
 8003968:	20000d20 	.word	0x20000d20
 800396c:	20000304 	.word	0x20000304
 8003970:	41660000 	.word	0x41660000
 8003974:	200002e0 	.word	0x200002e0
 8003978:	20000308 	.word	0x20000308
 800397c:	200002e4 	.word	0x200002e4
 8003980:	2000030c 	.word	0x2000030c
 8003984:	200002e8 	.word	0x200002e8
 8003988:	200004d8 	.word	0x200004d8
 800398c:	200002ec 	.word	0x200002ec
 8003990:	200002f0 	.word	0x200002f0
 8003994:	200002f4 	.word	0x200002f4
 8003998:	200002f8 	.word	0x200002f8
 800399c:	200002fc 	.word	0x200002fc
 80039a0:	20000300 	.word	0x20000300
 80039a4:	411cf5c3 	.word	0x411cf5c3
 80039a8:	3ff00000 	.word	0x3ff00000
 80039ac:	20000310 	.word	0x20000310
 80039b0:	3c8e8a72 	.word	0x3c8e8a72
 80039b4:	20000314 	.word	0x20000314
		  EKF.accYm = accYm;
 80039b8:	4a54      	ldr	r2, [pc, #336]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194


		  EKF.sonar_alt = sonar_alt;
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a51      	ldr	r2, [pc, #324]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039c6:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
		  EKF.baro_alt = baro_alt;
 80039ca:	4b52      	ldr	r3, [pc, #328]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4f      	ldr	r2, [pc, #316]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039d0:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		  EKF.yaw_acc  = euler_angles.yaw;
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039da:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

		  EKF.Run();
 80039de:	484b      	ldr	r0, [pc, #300]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039e0:	f008 f932 	bl	800bc48 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ea:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 80039ec:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 80039f6:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 80039f8:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80039fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80039fe:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003a00:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a04:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a08:	4a44      	ldr	r2, [pc, #272]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003a0a:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003a12:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003a14:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a1c:	4a3f      	ldr	r2, [pc, #252]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003a1e:	6153      	str	r3, [r2, #20]


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fe2b 	bl	8002680 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a2c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003a30:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a32:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
			controller.vx	 = EKF.vx;
 8003a36:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a38:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a3e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			controller.x     = EKF.xpos;
 8003a42:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a44:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003a48:	4a36      	ldr	r2, [pc, #216]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			//controller.z0 = z0;
			controller.z = EKF.alt_gnd;
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003a50:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003a54:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a56:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

		  controller.state = state;
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003a5e:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8003a62:	4615      	mov	r5, r2
 8003a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003a74:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003a78:	4615      	mov	r5, r2
 8003a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd f8fe 	bl	8000c8c <__aeabi_i2f>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a94:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

		  controller_output_ang = controller.Run();
 8003a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a9c:	4921      	ldr	r1, [pc, #132]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f005 fbfc 	bl	800929c <_ZN10Controller3RunEv>
 8003aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4820      	ldr	r0, [pc, #128]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003aac:	f000 f95d 	bl	8003d6a <_ZNSt6vectorIfSaIfEEaSEOS1_>
 8003ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f93d 	bl	8003d34 <_ZNSt6vectorIfSaIfEED1Ev>

		  controller_output[0] = controller.controller_output_pwm[0];
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003abc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003ac2:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003ac6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003acc:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003ad0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003ad4:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003ad6:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003ada:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003ade:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003ae0:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003ae4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ae8:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003aea:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003aee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003af2:	4a0d      	ldr	r2, [pc, #52]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003af4:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;

		  PWMYaz();
 8003af6:	f7ff fb25 	bl	8003144 <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8003afa:	2102      	movs	r1, #2
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003afe:	f001 fb09 	bl	8005114 <HAL_GPIO_TogglePin>
		}
		}
	}
 8003b02:	bf00      	nop
 8003b04:	3754      	adds	r7, #84	; 0x54
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200004d8 	.word	0x200004d8
 8003b10:	20000d0c 	.word	0x20000d0c
 8003b14:	20000d08 	.word	0x20000d08
 8003b18:	20000d80 	.word	0x20000d80
 8003b1c:	20000340 	.word	0x20000340
 8003b20:	20000cac 	.word	0x20000cac
 8003b24:	200006e0 	.word	0x200006e0
 8003b28:	2000031c 	.word	0x2000031c
 8003b2c:	20000c90 	.word	0x20000c90
 8003b30:	20000c80 	.word	0x20000c80
 8003b34:	40010c00 	.word	0x40010c00

08003b38 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	f040 80a0 	bne.w	8003c8a <HAL_TIM_IC_CaptureCallback+0x152>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7f1b      	ldrb	r3, [r3, #28]
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	f040 809b 	bne.w	8003c8a <HAL_TIM_IC_CaptureCallback+0x152>
	{
				IC_Val1 = IC_Val2;
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_TIM_IC_CaptureCallback+0x164>)
 8003b5a:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 fa14 	bl	8007f8c <HAL_TIM_ReadCapturedValue>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b6a:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_TIM_IC_CaptureCallback+0x164>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b78:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0fdb      	lsrs	r3, r3, #31
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003b8e:	33ff      	adds	r3, #255	; 0xff
 8003b90:	4a43      	ldr	r2, [pc, #268]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b92:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 1000 && Diff <= 2000) {
 8003b94:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9c:	db06      	blt.n	8003bac <HAL_TIM_IC_CaptureCallback+0x74>
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ba6:	dc01      	bgt.n	8003bac <HAL_TIM_IC_CaptureCallback+0x74>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_TIM_IC_CaptureCallback+0x76>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01c      	beq.n	8003bec <HAL_TIM_IC_CaptureCallback+0xb4>

						ch_[i] = ch[i];
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b21b      	sxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc8:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_TIM_IC_CaptureCallback+0x174>)
 8003bca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 8003bce:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003bdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a32      	ldr	r2, [pc, #200]	; (8003cb0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e015      	b.n	8003c18 <HAL_TIM_IC_CaptureCallback+0xe0>


					}

					else if(Diff > CH0) {
 8003bec:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfcc      	ite	gt
 8003bf8:	2301      	movgt	r3, #1
 8003bfa:	2300      	movle	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c08:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c10:	6213      	str	r3, [r2, #32]
						sync = 1;
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe ff82 	bl	8002b28 <_Z7pwm2angt>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a24      	ldr	r2, [pc, #144]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c28:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe ff79 	bl	8002b28 <_Z7pwm2angt>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c3a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe ffa8 	bl	8002ba0 <_Z8pwm2ratet>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003c54:	6153      	str	r3, [r2, #20]

				i++;
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	b21a      	sxth	r2, r3
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c66:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_TIM_IC_CaptureCallback+0x184>)
 8003c72:	fb83 2301 	smull	r2, r3, r3, r1
 8003c76:	105a      	asrs	r2, r3, #1
 8003c78:	17cb      	asrs	r3, r1, #31
 8003c7a:	1ad2      	subs	r2, r2, r3
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	1aca      	subs	r2, r1, r3
 8003c84:	b212      	sxth	r2, r2
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003c88:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000018c 	.word	0x2000018c
 8003c98:	20000c9c 	.word	0x20000c9c
 8003c9c:	20000ca0 	.word	0x20000ca0
 8003ca0:	20000ca4 	.word	0x20000ca4
 8003ca4:	20000ca8 	.word	0x20000ca8
 8003ca8:	20000cac 	.word	0x20000cac
 8003cac:	20000cd0 	.word	0x20000cd0
 8003cb0:	20000d64 	.word	0x20000d64
 8003cb4:	20000cf4 	.word	0x20000cf4
 8003cb8:	2000031c 	.word	0x2000031c
 8003cbc:	38e38e39 	.word	0x38e38e39

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <Error_Handler+0x8>

08003cca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f85e 	bl	8003d94 <_ZNSaIfEC1Ev>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f866 	bl	8003dac <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_ZNSaIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f86d 	bl	8003dd2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f862 	bl	8003de6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd feaf 	bl	8001a88 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f860 	bl	8003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003d4c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4629      	mov	r1, r5
 8003d52:	4620      	mov	r0, r4
 8003d54:	f000 f864 	bl	8003e20 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ffd1 	bl	8003d02 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bdb0      	pop	{r4, r5, r7, pc}

08003d6a <_ZNSt6vectorIfSaIfEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f000 f85f 	bl	8003e3c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4622      	mov	r2, r4
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f863 	bl	8003e50 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8003d8a:	687b      	ldr	r3, [r7, #4]
      }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f895 	bl	8003ecc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
	{ }
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
	if (__p)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f86e 	bl	8003ee0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f865 	bl	8003efe <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZSt4moveIRSt6vectorIfSaIfEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f857 	bl	8003f18 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>
 8003e6a:	f107 021c 	add.w	r2, r7, #28
 8003e6e:	f107 0310 	add.w	r3, r7, #16
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f860 	bl	8003f3a <_ZNSt6vectorIfSaIfEEC1ERKS0_>
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff33 	bl	8003cea <_ZNSaIfED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f864 	bl	8003f58 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f85d 	bl	8003f58 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ffb3 	bl	8003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ffae 	bl	8003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f86d 	bl	8003f94 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>
	vector __tmp(get_allocator());
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff38 	bl	8003d34 <_ZNSt6vectorIfSaIfEED1Ev>
      }
 8003ec4:	bf00      	nop
 8003ec6:	3724      	adds	r7, #36	; 0x24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}

08003ecc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f85d 	bl	8003fb0 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f85d 	bl	8003fca <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZNKSt12_Vector_baseIfSaIfEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f000 f85b 	bl	8003fde <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f860 	bl	8003ff2 <_ZNSaIfEC1ERKS_>
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <_ZNSt6vectorIfSaIfEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f860 	bl	800400e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8003f62:	f107 030c 	add.w	r3, r7, #12
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ff20 	bl	8003dac <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8003f6c:	f107 030c 	add.w	r3, r7, #12
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f85a 	bl	800402c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f856 	bl	800402c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	4619      	mov	r1, r3
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f000 f850 	bl	800402c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8003f8c:	bf00      	nop
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZSt15__alloc_on_moveISaIfEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f858 	bl	8004058 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003fbc:	68b8      	ldr	r0, [r7, #8]
 8003fbe:	f008 fbd8 	bl	800c772 <_ZdlPv>
      }
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f837 	bl	8004072 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f833 	bl	8004088 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	609a      	str	r2, [r3, #8]
	}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <_ZSt18__do_alloc_on_moveISaIfEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	f000 f821 	bl	80040ac <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8004092:	6839      	ldr	r1, [r7, #0]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ffac 	bl	8003ff2 <_ZNSaIfEC1ERKS_>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fe85 	bl	8003dac <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZSt4moveIRSaIfEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10d      	bne.n	80040ec <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <_Z41__static_initialization_and_destruction_0ii+0x2c>
Kalman_Filtresi EKF;
 80040da:	480f      	ldr	r0, [pc, #60]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80040dc:	f005 ff10 	bl	8009f00 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80040e0:	480e      	ldr	r0, [pc, #56]	; (800411c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80040e2:	f004 fff9 	bl	80090d8 <_ZN10ControllerC1Ev>
std::vector<float> controller_output_ang;
 80040e6:	480e      	ldr	r0, [pc, #56]	; (8004120 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80040e8:	f7fd fce7 	bl	8001aba <_ZNSt6vectorIfSaIfEEC1Ev>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80040fc:	4808      	ldr	r0, [pc, #32]	; (8004120 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80040fe:	f7ff fe19 	bl	8003d34 <_ZNSt6vectorIfSaIfEED1Ev>
Controller controller;
 8004102:	4806      	ldr	r0, [pc, #24]	; (800411c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004104:	f005 fc9e 	bl	8009a44 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 8004108:	4803      	ldr	r0, [pc, #12]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800410a:	f007 fe91 	bl	800be30 <_ZN15Kalman_FiltresiD1Ev>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200004d8 	.word	0x200004d8
 800411c:	200006e0 	.word	0x200006e0
 8004120:	20000c90 	.word	0x20000c90

08004124 <_GLOBAL__sub_I_hi2c1>:
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
 8004128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800412c:	2001      	movs	r0, #1
 800412e:	f7ff ffc7 	bl	80040c0 <_Z41__static_initialization_and_destruction_0ii>
 8004132:	bd80      	pop	{r7, pc}

08004134 <_GLOBAL__sub_D_hi2c1>:
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
 8004138:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800413c:	2000      	movs	r0, #0
 800413e:	f7ff ffbf 	bl	80040c0 <_Z41__static_initialization_and_destruction_0ii>
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_MspInit+0x5c>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <HAL_MspInit+0x5c>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6193      	str	r3, [r2, #24]
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_MspInit+0x5c>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_MspInit+0x5c>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_MspInit+0x5c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	61d3      	str	r3, [r2, #28]
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_MspInit+0x5c>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_MspInit+0x60>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_MspInit+0x60>)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40010000 	.word	0x40010000

080041a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a15      	ldr	r2, [pc, #84]	; (8004218 <HAL_I2C_MspInit+0x70>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d123      	bne.n	8004210 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_I2C_MspInit+0x74>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <HAL_I2C_MspInit+0x74>)
 80041ce:	f043 0308 	orr.w	r3, r3, #8
 80041d2:	6193      	str	r3, [r2, #24]
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_I2C_MspInit+0x74>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041e0:	23c0      	movs	r3, #192	; 0xc0
 80041e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e4:	2312      	movs	r3, #18
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041e8:	2303      	movs	r3, #3
 80041ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	4619      	mov	r1, r3
 80041f2:	480b      	ldr	r0, [pc, #44]	; (8004220 <HAL_I2C_MspInit+0x78>)
 80041f4:	f000 fdf2 	bl	8004ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_I2C_MspInit+0x74>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_I2C_MspInit+0x74>)
 80041fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004202:	61d3      	str	r3, [r2, #28]
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_I2C_MspInit+0x74>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004210:	bf00      	nop
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40005400 	.word	0x40005400
 800421c:	40021000 	.word	0x40021000
 8004220:	40010c00 	.word	0x40010c00

08004224 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_TIM_PWM_MspInit+0x34>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10b      	bne.n	800424e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_TIM_PWM_MspInit+0x38>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	4a08      	ldr	r2, [pc, #32]	; (800425c <HAL_TIM_PWM_MspInit+0x38>)
 800423c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004240:	6193      	str	r3, [r2, #24]
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_TIM_PWM_MspInit+0x38>)
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40021000 	.word	0x40021000

08004260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 0318 	add.w	r3, r7, #24
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d114      	bne.n	80042aa <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004280:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	61d3      	str	r3, [r2, #28]
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004298:	2200      	movs	r2, #0
 800429a:	2101      	movs	r1, #1
 800429c:	201c      	movs	r0, #28
 800429e:	f000 fb78 	bl	8004992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042a2:	201c      	movs	r0, #28
 80042a4:	f000 fb91 	bl	80049ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80042a8:	e042      	b.n	8004330 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a23      	ldr	r2, [pc, #140]	; (800433c <HAL_TIM_Base_MspInit+0xdc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d12c      	bne.n	800430e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	61d3      	str	r3, [r2, #28]
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	6193      	str	r3, [r2, #24]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	4619      	mov	r1, r3
 80042f6:	4812      	ldr	r0, [pc, #72]	; (8004340 <HAL_TIM_Base_MspInit+0xe0>)
 80042f8:	f000 fd70 	bl	8004ddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042fc:	2200      	movs	r2, #0
 80042fe:	2100      	movs	r1, #0
 8004300:	201d      	movs	r0, #29
 8004302:	f000 fb46 	bl	8004992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004306:	201d      	movs	r0, #29
 8004308:	f000 fb5f 	bl	80049ca <HAL_NVIC_EnableIRQ>
}
 800430c:	e010      	b.n	8004330 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <HAL_TIM_Base_MspInit+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10b      	bne.n	8004330 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4a06      	ldr	r2, [pc, #24]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	61d3      	str	r3, [r2, #28]
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <HAL_TIM_Base_MspInit+0xd8>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
}
 8004330:	bf00      	nop
 8004332:	3728      	adds	r7, #40	; 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	40000400 	.word	0x40000400
 8004340:	40010c00 	.word	0x40010c00
 8004344:	40000800 	.word	0x40000800

08004348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_TIM_MspPostInit+0x8c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d131      	bne.n	80043cc <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 800436e:	f043 0308 	orr.w	r3, r3, #8
 8004372:	6193      	str	r3, [r2, #24]
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004380:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6193      	str	r3, [r2, #24]
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_TIM_MspPostInit+0x90>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004398:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800439c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	2302      	movs	r3, #2
 80043a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a6:	f107 0310 	add.w	r3, r7, #16
 80043aa:	4619      	mov	r1, r3
 80043ac:	480b      	ldr	r0, [pc, #44]	; (80043dc <HAL_TIM_MspPostInit+0x94>)
 80043ae:	f000 fd15 	bl	8004ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80043b2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80043b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2302      	movs	r3, #2
 80043be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	4619      	mov	r1, r3
 80043c6:	4806      	ldr	r0, [pc, #24]	; (80043e0 <HAL_TIM_MspPostInit+0x98>)
 80043c8:	f000 fd08 	bl	8004ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043cc:	bf00      	nop
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40010c00 	.word	0x40010c00
 80043e0:	40010800 	.word	0x40010800

080043e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 0318 	add.w	r3, r7, #24
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_UART_MspInit+0x148>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d159      	bne.n	80044b8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004404:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_UART_MspInit+0x14c>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4a49      	ldr	r2, [pc, #292]	; (8004530 <HAL_UART_MspInit+0x14c>)
 800440a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440e:	6193      	str	r3, [r2, #24]
 8004410:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_UART_MspInit+0x14c>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	4b44      	ldr	r3, [pc, #272]	; (8004530 <HAL_UART_MspInit+0x14c>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4a43      	ldr	r2, [pc, #268]	; (8004530 <HAL_UART_MspInit+0x14c>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	6193      	str	r3, [r2, #24]
 8004428:	4b41      	ldr	r3, [pc, #260]	; (8004530 <HAL_UART_MspInit+0x14c>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800443e:	2303      	movs	r3, #3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004442:	f107 0318 	add.w	r3, r7, #24
 8004446:	4619      	mov	r1, r3
 8004448:	483a      	ldr	r0, [pc, #232]	; (8004534 <HAL_UART_MspInit+0x150>)
 800444a:	f000 fcc7 	bl	8004ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800444e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445c:	f107 0318 	add.w	r3, r7, #24
 8004460:	4619      	mov	r1, r3
 8004462:	4834      	ldr	r0, [pc, #208]	; (8004534 <HAL_UART_MspInit+0x150>)
 8004464:	f000 fcba 	bl	8004ddc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_UART_MspInit+0x154>)
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <HAL_UART_MspInit+0x158>)
 800446c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800446e:	4b32      	ldr	r3, [pc, #200]	; (8004538 <HAL_UART_MspInit+0x154>)
 8004470:	2200      	movs	r2, #0
 8004472:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004474:	4b30      	ldr	r3, [pc, #192]	; (8004538 <HAL_UART_MspInit+0x154>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_UART_MspInit+0x154>)
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <HAL_UART_MspInit+0x154>)
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_UART_MspInit+0x154>)
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_UART_MspInit+0x154>)
 800448e:	2220      	movs	r2, #32
 8004490:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_UART_MspInit+0x154>)
 8004494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004498:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800449a:	4827      	ldr	r0, [pc, #156]	; (8004538 <HAL_UART_MspInit+0x154>)
 800449c:	f000 fab0 	bl	8004a00 <HAL_DMA_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80044a6:	f7ff fc0b 	bl	8003cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_UART_MspInit+0x154>)
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <HAL_UART_MspInit+0x154>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044b6:	e034      	b.n	8004522 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <HAL_UART_MspInit+0x15c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12f      	bne.n	8004522 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044cc:	61d3      	str	r3, [r2, #28]
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	4a14      	ldr	r2, [pc, #80]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6193      	str	r3, [r2, #24]
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_UART_MspInit+0x14c>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044f2:	2304      	movs	r3, #4
 80044f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fa:	2303      	movs	r3, #3
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fe:	f107 0318 	add.w	r3, r7, #24
 8004502:	4619      	mov	r1, r3
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <HAL_UART_MspInit+0x150>)
 8004506:	f000 fc69 	bl	8004ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800450a:	2308      	movs	r3, #8
 800450c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004516:	f107 0318 	add.w	r3, r7, #24
 800451a:	4619      	mov	r1, r3
 800451c:	4805      	ldr	r0, [pc, #20]	; (8004534 <HAL_UART_MspInit+0x150>)
 800451e:	f000 fc5d 	bl	8004ddc <HAL_GPIO_Init>
}
 8004522:	bf00      	nop
 8004524:	3728      	adds	r7, #40	; 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40013800 	.word	0x40013800
 8004530:	40021000 	.word	0x40021000
 8004534:	40010800 	.word	0x40010800
 8004538:	2000029c 	.word	0x2000029c
 800453c:	40020058 	.word	0x40020058
 8004540:	40004400 	.word	0x40004400

08004544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <NMI_Handler+0x4>

0800454a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <HardFault_Handler+0x4>

08004550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <MemManage_Handler+0x4>

08004556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800455a:	e7fe      	b.n	800455a <BusFault_Handler+0x4>

0800455c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004560:	e7fe      	b.n	8004560 <UsageFault_Handler+0x4>

08004562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800458a:	f000 f8eb 	bl	8004764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <DMA1_Channel5_IRQHandler+0x10>)
 800459a:	f000 faeb 	bl	8004b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000029c 	.word	0x2000029c

080045a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <TIM2_IRQHandler+0x10>)
 80045ae:	f003 f9cf 	bl	8007950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000144 	.word	0x20000144

080045bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <TIM3_IRQHandler+0x10>)
 80045c2:	f003 f9c5 	bl	8007950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000018c 	.word	0x2000018c

080045d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
	return 1;
 80045d4:	2301      	movs	r3, #1
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <_kill>:

int _kill(int pid, int sig)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045e8:	f00a fa26 	bl	800ea38 <__errno>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2216      	movs	r2, #22
 80045f0:	601a      	str	r2, [r3, #0]
	return -1;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <_exit>:

void _exit (int status)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004606:	f04f 31ff 	mov.w	r1, #4294967295
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffe7 	bl	80045de <_kill>
	while (1) {}		/* Make sure we hang here */
 8004610:	e7fe      	b.n	8004610 <_exit+0x12>
	...

08004614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <_sbrk+0x5c>)
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <_sbrk+0x60>)
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <_sbrk+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <_sbrk+0x64>)
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <_sbrk+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d207      	bcs.n	8004654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004644:	f00a f9f8 	bl	800ea38 <__errno>
 8004648:	4603      	mov	r3, r0
 800464a:	220c      	movs	r2, #12
 800464c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e009      	b.n	8004668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <_sbrk+0x64>)
 8004664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20005000 	.word	0x20005000
 8004674:	00000400 	.word	0x00000400
 8004678:	20000d9c 	.word	0x20000d9c
 800467c:	20000dc8 	.word	0x20000dc8

08004680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800468c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800468e:	e003      	b.n	8004698 <LoopCopyDataInit>

08004690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004696:	3104      	adds	r1, #4

08004698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004698:	480a      	ldr	r0, [pc, #40]	; (80046c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800469c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800469e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80046a0:	d3f6      	bcc.n	8004690 <CopyDataInit>
  ldr r2, =_sbss
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80046a4:	e002      	b.n	80046ac <LoopFillZerobss>

080046a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80046a8:	f842 3b04 	str.w	r3, [r2], #4

080046ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80046ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80046b0:	d3f9      	bcc.n	80046a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046b2:	f7ff ffe5 	bl	8004680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046b6:	f00a f9c5 	bl	800ea44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ba:	f7fd fa0d 	bl	8001ad8 <main>
  bx lr
 80046be:	4770      	bx	lr
  ldr r3, =_sidata
 80046c0:	0800f258 	.word	0x0800f258
  ldr r0, =_sdata
 80046c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80046c8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80046cc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80046d0:	20000dc4 	.word	0x20000dc4

080046d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046d4:	e7fe      	b.n	80046d4 <ADC1_2_IRQHandler>
	...

080046d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_Init+0x28>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_Init+0x28>)
 80046e2:	f043 0310 	orr.w	r3, r3, #16
 80046e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e8:	2003      	movs	r0, #3
 80046ea:	f000 f947 	bl	800497c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f000 f808 	bl	8004704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f4:	f7ff fd26 	bl	8004144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000

08004704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_InitTick+0x54>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_InitTick+0x58>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800471a:	fbb3 f3f1 	udiv	r3, r3, r1
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f95f 	bl	80049e6 <HAL_SYSTICK_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00e      	b.n	8004750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d80a      	bhi.n	800474e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004738:	2200      	movs	r2, #0
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f000 f927 	bl	8004992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004744:	4a06      	ldr	r2, [pc, #24]	; (8004760 <HAL_InitTick+0x5c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000004 	.word	0x20000004
 800475c:	2000000c 	.word	0x2000000c
 8004760:	20000008 	.word	0x20000008

08004764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_IncTick+0x1c>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_IncTick+0x20>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4413      	add	r3, r2
 8004774:	4a03      	ldr	r2, [pc, #12]	; (8004784 <HAL_IncTick+0x20>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	2000000c 	.word	0x2000000c
 8004784:	20000db0 	.word	0x20000db0

08004788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <HAL_GetTick+0x10>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	20000db0 	.word	0x20000db0

0800479c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff fff0 	bl	8004788 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d005      	beq.n	80047c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_Delay+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c2:	bf00      	nop
 80047c4:	f7ff ffe0 	bl	8004788 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d8f7      	bhi.n	80047c4 <HAL_Delay+0x28>
  {
  }
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800480c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <__NVIC_GetPriorityGrouping+0x18>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0307 	and.w	r3, r3, #7
}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db0b      	blt.n	8004872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4906      	ldr	r1, [pc, #24]	; (800487c <__NVIC_EnableIRQ+0x34>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2001      	movs	r0, #1
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	e000e100 	.word	0xe000e100

08004880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004890:	2b00      	cmp	r3, #0
 8004892:	db0a      	blt.n	80048aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	490c      	ldr	r1, [pc, #48]	; (80048cc <__NVIC_SetPriority+0x4c>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	440b      	add	r3, r1
 80048a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a8:	e00a      	b.n	80048c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4908      	ldr	r1, [pc, #32]	; (80048d0 <__NVIC_SetPriority+0x50>)
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3b04      	subs	r3, #4
 80048b8:	0112      	lsls	r2, r2, #4
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	440b      	add	r3, r1
 80048be:	761a      	strb	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000e100 	.word	0xe000e100
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f1c3 0307 	rsb	r3, r3, #7
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf28      	it	cs
 80048f2:	2304      	movcs	r3, #4
 80048f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3304      	adds	r3, #4
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d902      	bls.n	8004904 <NVIC_EncodePriority+0x30>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3b03      	subs	r3, #3
 8004902:	e000      	b.n	8004906 <NVIC_EncodePriority+0x32>
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	401a      	ands	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800491c:	f04f 31ff 	mov.w	r1, #4294967295
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	43d9      	mvns	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	4313      	orrs	r3, r2
         );
}
 800492e:	4618      	mov	r0, r3
 8004930:	3724      	adds	r7, #36	; 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004948:	d301      	bcc.n	800494e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800494a:	2301      	movs	r3, #1
 800494c:	e00f      	b.n	800496e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <SysTick_Config+0x40>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3b01      	subs	r3, #1
 8004954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004956:	210f      	movs	r1, #15
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	f7ff ff90 	bl	8004880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <SysTick_Config+0x40>)
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <SysTick_Config+0x40>)
 8004968:	2207      	movs	r2, #7
 800496a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	e000e010 	.word	0xe000e010

0800497c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff2d 	bl	80047e4 <__NVIC_SetPriorityGrouping>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049a4:	f7ff ff42 	bl	800482c <__NVIC_GetPriorityGrouping>
 80049a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f7ff ff90 	bl	80048d4 <NVIC_EncodePriority>
 80049b4:	4602      	mov	r2, r0
 80049b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff5f 	bl	8004880 <__NVIC_SetPriority>
}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	4603      	mov	r3, r0
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff35 	bl	8004848 <__NVIC_EnableIRQ>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ffa2 	bl	8004938 <SysTick_Config>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e043      	b.n	8004a9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <HAL_DMA_Init+0xa8>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_DMA_Init+0xac>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	009a      	lsls	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_DMA_Init+0xb0>)
 8004a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	bffdfff8 	.word	0xbffdfff8
 8004aac:	cccccccd 	.word	0xcccccccd
 8004ab0:	40020000 	.word	0x40020000

08004ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e04a      	b.n	8004b6a <HAL_DMA_Start_IT+0xb6>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d13a      	bne.n	8004b5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f938 	bl	8004d80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 020e 	orr.w	r2, r2, #14
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e00f      	b.n	8004b4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 020a 	orr.w	r2, r2, #10
 8004b48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e005      	b.n	8004b68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2204      	movs	r2, #4
 8004b92:	409a      	lsls	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04f      	beq.n	8004c3c <HAL_DMA_IRQHandler+0xc8>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04a      	beq.n	8004c3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a66      	ldr	r2, [pc, #408]	; (8004d64 <HAL_DMA_IRQHandler+0x1f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d029      	beq.n	8004c22 <HAL_DMA_IRQHandler+0xae>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a65      	ldr	r2, [pc, #404]	; (8004d68 <HAL_DMA_IRQHandler+0x1f4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_DMA_IRQHandler+0x1f8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01a      	beq.n	8004c18 <HAL_DMA_IRQHandler+0xa4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a62      	ldr	r2, [pc, #392]	; (8004d70 <HAL_DMA_IRQHandler+0x1fc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d012      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x9e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a60      	ldr	r2, [pc, #384]	; (8004d74 <HAL_DMA_IRQHandler+0x200>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00a      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x98>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5f      	ldr	r2, [pc, #380]	; (8004d78 <HAL_DMA_IRQHandler+0x204>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d102      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x92>
 8004c00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c04:	e00e      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c0a:	e00b      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c10:	e008      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c16:	e005      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1c:	e002      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	e000      	b.n	8004c24 <HAL_DMA_IRQHandler+0xb0>
 8004c22:	2304      	movs	r3, #4
 8004c24:	4a55      	ldr	r2, [pc, #340]	; (8004d7c <HAL_DMA_IRQHandler+0x208>)
 8004c26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8094 	beq.w	8004d5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c3a:	e08e      	b.n	8004d5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2202      	movs	r2, #2
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d056      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x186>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d051      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020a 	bic.w	r2, r2, #10
 8004c72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a38      	ldr	r2, [pc, #224]	; (8004d64 <HAL_DMA_IRQHandler+0x1f0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d029      	beq.n	8004cda <HAL_DMA_IRQHandler+0x166>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a37      	ldr	r2, [pc, #220]	; (8004d68 <HAL_DMA_IRQHandler+0x1f4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d022      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x162>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a35      	ldr	r2, [pc, #212]	; (8004d6c <HAL_DMA_IRQHandler+0x1f8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01a      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x15c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a34      	ldr	r2, [pc, #208]	; (8004d70 <HAL_DMA_IRQHandler+0x1fc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d012      	beq.n	8004cca <HAL_DMA_IRQHandler+0x156>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a32      	ldr	r2, [pc, #200]	; (8004d74 <HAL_DMA_IRQHandler+0x200>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00a      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x150>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a31      	ldr	r2, [pc, #196]	; (8004d78 <HAL_DMA_IRQHandler+0x204>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d102      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x14a>
 8004cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cbc:	e00e      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc2:	e00b      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc8:	e008      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cce:	e005      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd4:	e002      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e000      	b.n	8004cdc <HAL_DMA_IRQHandler+0x168>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <HAL_DMA_IRQHandler+0x208>)
 8004cde:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d034      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004cf8:	e02f      	b.n	8004d5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2208      	movs	r2, #8
 8004d00:	409a      	lsls	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d028      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x1e8>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d023      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 020e 	bic.w	r2, r2, #14
 8004d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
    }
  }
  return;
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
}
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40020008 	.word	0x40020008
 8004d68:	4002001c 	.word	0x4002001c
 8004d6c:	40020030 	.word	0x40020030
 8004d70:	40020044 	.word	0x40020044
 8004d74:	40020058 	.word	0x40020058
 8004d78:	4002006c 	.word	0x4002006c
 8004d7c:	40020000 	.word	0x40020000

08004d80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2101      	movs	r1, #1
 8004d98:	fa01 f202 	lsl.w	r2, r1, r2
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d108      	bne.n	8004dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dbe:	e007      	b.n	8004dd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b08b      	sub	sp, #44	; 0x2c
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dee:	e169      	b.n	80050c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004df0:	2201      	movs	r2, #1
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	f040 8158 	bne.w	80050be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4a9a      	ldr	r2, [pc, #616]	; (800507c <HAL_GPIO_Init+0x2a0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d05e      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
 8004e18:	4a98      	ldr	r2, [pc, #608]	; (800507c <HAL_GPIO_Init+0x2a0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d875      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e1e:	4a98      	ldr	r2, [pc, #608]	; (8005080 <HAL_GPIO_Init+0x2a4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d058      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
 8004e24:	4a96      	ldr	r2, [pc, #600]	; (8005080 <HAL_GPIO_Init+0x2a4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d86f      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e2a:	4a96      	ldr	r2, [pc, #600]	; (8005084 <HAL_GPIO_Init+0x2a8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d052      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
 8004e30:	4a94      	ldr	r2, [pc, #592]	; (8005084 <HAL_GPIO_Init+0x2a8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d869      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e36:	4a94      	ldr	r2, [pc, #592]	; (8005088 <HAL_GPIO_Init+0x2ac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04c      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
 8004e3c:	4a92      	ldr	r2, [pc, #584]	; (8005088 <HAL_GPIO_Init+0x2ac>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d863      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e42:	4a92      	ldr	r2, [pc, #584]	; (800508c <HAL_GPIO_Init+0x2b0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d046      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
 8004e48:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_GPIO_Init+0x2b0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d85d      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e4e:	2b12      	cmp	r3, #18
 8004e50:	d82a      	bhi.n	8004ea8 <HAL_GPIO_Init+0xcc>
 8004e52:	2b12      	cmp	r3, #18
 8004e54:	d859      	bhi.n	8004f0a <HAL_GPIO_Init+0x12e>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_GPIO_Init+0x80>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004ed7 	.word	0x08004ed7
 8004e60:	08004eb1 	.word	0x08004eb1
 8004e64:	08004ec3 	.word	0x08004ec3
 8004e68:	08004f05 	.word	0x08004f05
 8004e6c:	08004f0b 	.word	0x08004f0b
 8004e70:	08004f0b 	.word	0x08004f0b
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f0b 	.word	0x08004f0b
 8004e7c:	08004f0b 	.word	0x08004f0b
 8004e80:	08004f0b 	.word	0x08004f0b
 8004e84:	08004f0b 	.word	0x08004f0b
 8004e88:	08004f0b 	.word	0x08004f0b
 8004e8c:	08004f0b 	.word	0x08004f0b
 8004e90:	08004f0b 	.word	0x08004f0b
 8004e94:	08004f0b 	.word	0x08004f0b
 8004e98:	08004f0b 	.word	0x08004f0b
 8004e9c:	08004f0b 	.word	0x08004f0b
 8004ea0:	08004eb9 	.word	0x08004eb9
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	4a79      	ldr	r2, [pc, #484]	; (8005090 <HAL_GPIO_Init+0x2b4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004eae:	e02c      	b.n	8004f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	623b      	str	r3, [r7, #32]
          break;
 8004eb6:	e029      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	623b      	str	r3, [r7, #32]
          break;
 8004ec0:	e024      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	623b      	str	r3, [r7, #32]
          break;
 8004eca:	e01f      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	623b      	str	r3, [r7, #32]
          break;
 8004ed4:	e01a      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ede:	2304      	movs	r3, #4
 8004ee0:	623b      	str	r3, [r7, #32]
          break;
 8004ee2:	e013      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d105      	bne.n	8004ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004eec:	2308      	movs	r3, #8
 8004eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	611a      	str	r2, [r3, #16]
          break;
 8004ef6:	e009      	b.n	8004f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ef8:	2308      	movs	r3, #8
 8004efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	615a      	str	r2, [r3, #20]
          break;
 8004f02:	e003      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f04:	2300      	movs	r3, #0
 8004f06:	623b      	str	r3, [r7, #32]
          break;
 8004f08:	e000      	b.n	8004f0c <HAL_GPIO_Init+0x130>
          break;
 8004f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2bff      	cmp	r3, #255	; 0xff
 8004f10:	d801      	bhi.n	8004f16 <HAL_GPIO_Init+0x13a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	e001      	b.n	8004f1a <HAL_GPIO_Init+0x13e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2bff      	cmp	r3, #255	; 0xff
 8004f20:	d802      	bhi.n	8004f28 <HAL_GPIO_Init+0x14c>
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	e002      	b.n	8004f2e <HAL_GPIO_Init+0x152>
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	3b08      	subs	r3, #8
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	210f      	movs	r1, #15
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	6a39      	ldr	r1, [r7, #32]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80b1 	beq.w	80050be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_GPIO_Init+0x2b8>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	4a4c      	ldr	r2, [pc, #304]	; (8005094 <HAL_GPIO_Init+0x2b8>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6193      	str	r3, [r2, #24]
 8004f68:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_GPIO_Init+0x2b8>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f74:	4a48      	ldr	r2, [pc, #288]	; (8005098 <HAL_GPIO_Init+0x2bc>)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <HAL_GPIO_Init+0x2c0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <HAL_GPIO_Init+0x1ec>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3f      	ldr	r2, [pc, #252]	; (80050a0 <HAL_GPIO_Init+0x2c4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_GPIO_Init+0x1e8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3e      	ldr	r2, [pc, #248]	; (80050a4 <HAL_GPIO_Init+0x2c8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <HAL_GPIO_Init+0x1e4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <HAL_GPIO_Init+0x2cc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_GPIO_Init+0x1e0>
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <HAL_GPIO_Init+0x1ee>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	e004      	b.n	8004fca <HAL_GPIO_Init+0x1ee>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e002      	b.n	8004fca <HAL_GPIO_Init+0x1ee>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_GPIO_Init+0x1ee>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	0092      	lsls	r2, r2, #2
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fda:	492f      	ldr	r1, [pc, #188]	; (8005098 <HAL_GPIO_Init+0x2bc>)
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	492c      	ldr	r1, [pc, #176]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]
 8005000:	e006      	b.n	8005010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	43db      	mvns	r3, r3
 800500a:	4928      	ldr	r1, [pc, #160]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800500c:	4013      	ands	r3, r2
 800500e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d006      	beq.n	800502a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800501c:	4b23      	ldr	r3, [pc, #140]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4922      	ldr	r1, [pc, #136]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
 8005028:	e006      	b.n	8005038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	43db      	mvns	r3, r3
 8005032:	491e      	ldr	r1, [pc, #120]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005034:	4013      	ands	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4918      	ldr	r1, [pc, #96]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
 8005050:	e006      	b.n	8005060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	43db      	mvns	r3, r3
 800505a:	4914      	ldr	r1, [pc, #80]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800505c:	4013      	ands	r3, r2
 800505e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d021      	beq.n	80050b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	490e      	ldr	r1, [pc, #56]	; (80050ac <HAL_GPIO_Init+0x2d0>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
 8005078:	e021      	b.n	80050be <HAL_GPIO_Init+0x2e2>
 800507a:	bf00      	nop
 800507c:	10320000 	.word	0x10320000
 8005080:	10310000 	.word	0x10310000
 8005084:	10220000 	.word	0x10220000
 8005088:	10210000 	.word	0x10210000
 800508c:	10120000 	.word	0x10120000
 8005090:	10110000 	.word	0x10110000
 8005094:	40021000 	.word	0x40021000
 8005098:	40010000 	.word	0x40010000
 800509c:	40010800 	.word	0x40010800
 80050a0:	40010c00 	.word	0x40010c00
 80050a4:	40011000 	.word	0x40011000
 80050a8:	40011400 	.word	0x40011400
 80050ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_GPIO_Init+0x304>)
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	43db      	mvns	r3, r3
 80050b8:	4909      	ldr	r1, [pc, #36]	; (80050e0 <HAL_GPIO_Init+0x304>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	3301      	adds	r3, #1
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f47f ae8e 	bne.w	8004df0 <HAL_GPIO_Init+0x14>
  }
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	372c      	adds	r7, #44	; 0x2c
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	40010400 	.word	0x40010400

080050e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	807b      	strh	r3, [r7, #2]
 80050f0:	4613      	mov	r3, r2
 80050f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050f4:	787b      	ldrb	r3, [r7, #1]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005100:	e003      	b.n	800510a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005102:	887b      	ldrh	r3, [r7, #2]
 8005104:	041a      	lsls	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4013      	ands	r3, r2
 800512c:	041a      	lsls	r2, r3, #16
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	43d9      	mvns	r1, r3
 8005132:	887b      	ldrh	r3, [r7, #2]
 8005134:	400b      	ands	r3, r1
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	611a      	str	r2, [r3, #16]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
	...

08005148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e12b      	b.n	80053b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff f81a 	bl	80041a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	; 0x24
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800519a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051ac:	f002 f84e 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4a81      	ldr	r2, [pc, #516]	; (80053bc <HAL_I2C_Init+0x274>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d807      	bhi.n	80051cc <HAL_I2C_Init+0x84>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <HAL_I2C_Init+0x278>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	bf94      	ite	ls
 80051c4:	2301      	movls	r3, #1
 80051c6:	2300      	movhi	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e006      	b.n	80051da <HAL_I2C_Init+0x92>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a7d      	ldr	r2, [pc, #500]	; (80053c4 <HAL_I2C_Init+0x27c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	bf94      	ite	ls
 80051d4:	2301      	movls	r3, #1
 80051d6:	2300      	movhi	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0e7      	b.n	80053b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a78      	ldr	r2, [pc, #480]	; (80053c8 <HAL_I2C_Init+0x280>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	0c9b      	lsrs	r3, r3, #18
 80051ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a6a      	ldr	r2, [pc, #424]	; (80053bc <HAL_I2C_Init+0x274>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <HAL_I2C_Init+0xd4>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	3301      	adds	r3, #1
 800521a:	e009      	b.n	8005230 <HAL_I2C_Init+0xe8>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	4a69      	ldr	r2, [pc, #420]	; (80053cc <HAL_I2C_Init+0x284>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	099b      	lsrs	r3, r3, #6
 800522e:	3301      	adds	r3, #1
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	430b      	orrs	r3, r1
 8005236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	495c      	ldr	r1, [pc, #368]	; (80053bc <HAL_I2C_Init+0x274>)
 800524c:	428b      	cmp	r3, r1
 800524e:	d819      	bhi.n	8005284 <HAL_I2C_Init+0x13c>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1e59      	subs	r1, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fbb1 f3f3 	udiv	r3, r1, r3
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005264:	400b      	ands	r3, r1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_I2C_Init+0x138>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1e59      	subs	r1, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	fbb1 f3f3 	udiv	r3, r1, r3
 8005278:	3301      	adds	r3, #1
 800527a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527e:	e051      	b.n	8005324 <HAL_I2C_Init+0x1dc>
 8005280:	2304      	movs	r3, #4
 8005282:	e04f      	b.n	8005324 <HAL_I2C_Init+0x1dc>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d111      	bne.n	80052b0 <HAL_I2C_Init+0x168>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1e58      	subs	r0, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	440b      	add	r3, r1
 800529a:	fbb0 f3f3 	udiv	r3, r0, r3
 800529e:	3301      	adds	r3, #1
 80052a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e012      	b.n	80052d6 <HAL_I2C_Init+0x18e>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1e58      	subs	r0, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	0099      	lsls	r1, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c6:	3301      	adds	r3, #1
 80052c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_I2C_Init+0x196>
 80052da:	2301      	movs	r3, #1
 80052dc:	e022      	b.n	8005324 <HAL_I2C_Init+0x1dc>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10e      	bne.n	8005304 <HAL_I2C_Init+0x1bc>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1e58      	subs	r0, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	440b      	add	r3, r1
 80052f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052f8:	3301      	adds	r3, #1
 80052fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005302:	e00f      	b.n	8005324 <HAL_I2C_Init+0x1dc>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1e58      	subs	r0, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	0099      	lsls	r1, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	fbb0 f3f3 	udiv	r3, r0, r3
 800531a:	3301      	adds	r3, #1
 800531c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	6809      	ldr	r1, [r1, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6911      	ldr	r1, [r2, #16]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	68d2      	ldr	r2, [r2, #12]
 800535e:	4311      	orrs	r1, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	430b      	orrs	r3, r1
 8005366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	000186a0 	.word	0x000186a0
 80053c0:	001e847f 	.word	0x001e847f
 80053c4:	003d08ff 	.word	0x003d08ff
 80053c8:	431bde83 	.word	0x431bde83
 80053cc:	10624dd3 	.word	0x10624dd3

080053d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	461a      	mov	r2, r3
 80053dc:	460b      	mov	r3, r1
 80053de:	817b      	strh	r3, [r7, #10]
 80053e0:	4613      	mov	r3, r2
 80053e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053e4:	f7ff f9d0 	bl	8004788 <HAL_GetTick>
 80053e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	f040 80e0 	bne.w	80055b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	2319      	movs	r3, #25
 80053fe:	2201      	movs	r2, #1
 8005400:	4970      	ldr	r1, [pc, #448]	; (80055c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f001 f972 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
 8005410:	e0d3      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_I2C_Master_Transmit+0x50>
 800541c:	2302      	movs	r3, #2
 800541e:	e0cc      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d007      	beq.n	8005446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2221      	movs	r2, #33	; 0x21
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2210      	movs	r2, #16
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	893a      	ldrh	r2, [r7, #8]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a50      	ldr	r2, [pc, #320]	; (80055c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005488:	8979      	ldrh	r1, [r7, #10]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fe5e 	bl	8006150 <I2C_MasterRequestWrite>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e08d      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054b4:	e066      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6a39      	ldr	r1, [r7, #32]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f001 f9ec 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d107      	bne.n	80054de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06b      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d11b      	bne.n	8005558 <HAL_I2C_Master_Transmit+0x188>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	d017      	beq.n	8005558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	6a39      	ldr	r1, [r7, #32]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f001 f9dc 	bl	800691a <I2C_WaitOnBTFFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	2b04      	cmp	r3, #4
 800556e:	d107      	bne.n	8005580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e01a      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d194      	bne.n	80054b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	00100002 	.word	0x00100002
 80055c8:	ffff0000 	.word	0xffff0000

080055cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	461a      	mov	r2, r3
 80055d8:	460b      	mov	r3, r1
 80055da:	817b      	strh	r3, [r7, #10]
 80055dc:	4613      	mov	r3, r2
 80055de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7ff f8d0 	bl	8004788 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	f040 823f 	bne.w	8005a76 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	2319      	movs	r3, #25
 80055fe:	2201      	movs	r2, #1
 8005600:	497f      	ldr	r1, [pc, #508]	; (8005800 <HAL_I2C_Master_Receive+0x234>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 f872 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
 8005610:	e232      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_I2C_Master_Receive+0x54>
 800561c:	2302      	movs	r3, #2
 800561e:	e22b      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d007      	beq.n	8005646 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2222      	movs	r2, #34	; 0x22
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2210      	movs	r2, #16
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	893a      	ldrh	r2, [r7, #8]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a5f      	ldr	r2, [pc, #380]	; (8005804 <HAL_I2C_Master_Receive+0x238>)
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005688:	8979      	ldrh	r1, [r7, #10]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fde0 	bl	8006254 <I2C_MasterRequestRead>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e1ec      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e1c0      	b.n	8005a50 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d11e      	bne.n	8005714 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056e6:	b672      	cpsid	i
}
 80056e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005710:	b662      	cpsie	i
}
 8005712:	e035      	b.n	8005780 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11e      	bne.n	800575a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800572c:	b672      	cpsid	i
}
 800572e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005756:	b662      	cpsie	i
}
 8005758:	e012      	b.n	8005780 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005780:	e166      	b.n	8005a50 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	2b03      	cmp	r3, #3
 8005788:	f200 811f 	bhi.w	80059ca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b01      	cmp	r3, #1
 8005792:	d123      	bne.n	80057dc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f001 f8ff 	bl	800699c <I2C_WaitOnRXNEFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e167      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057da:	e139      	b.n	8005a50 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d152      	bne.n	800588a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	2200      	movs	r2, #0
 80057ec:	4906      	ldr	r1, [pc, #24]	; (8005808 <HAL_I2C_Master_Receive+0x23c>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 ff7c 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e13c      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
 80057fe:	bf00      	nop
 8005800:	00100002 	.word	0x00100002
 8005804:	ffff0000 	.word	0xffff0000
 8005808:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800580c:	b672      	cpsid	i
}
 800580e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005852:	b662      	cpsie	i
}
 8005854:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005888:	e0e2      	b.n	8005a50 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	2200      	movs	r2, #0
 8005892:	497b      	ldr	r1, [pc, #492]	; (8005a80 <HAL_I2C_Master_Receive+0x4b4>)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 ff29 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0e9      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058b4:	b672      	cpsid	i
}
 80058b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058ea:	4b66      	ldr	r3, [pc, #408]	; (8005a84 <HAL_I2C_Master_Receive+0x4b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	08db      	lsrs	r3, r3, #3
 80058f0:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <HAL_I2C_Master_Receive+0x4bc>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0a1a      	lsrs	r2, r3, #8
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	3b01      	subs	r3, #1
 8005908:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d118      	bne.n	8005942 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005932:	b662      	cpsie	i
}
 8005934:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e09a      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d1d9      	bne.n	8005904 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005992:	b662      	cpsie	i
}
 8005994:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c8:	e042      	b.n	8005a50 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 ffe4 	bl	800699c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e04c      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d118      	bne.n	8005a50 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f47f ae94 	bne.w	8005782 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e000      	b.n	8005a78 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
  }
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	00010004 	.word	0x00010004
 8005a84:	20000004 	.word	0x20000004
 8005a88:	14f8b589 	.word	0x14f8b589

08005a8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	817b      	strh	r3, [r7, #10]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	813b      	strh	r3, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aa6:	f7fe fe6f 	bl	8004788 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	f040 80d9 	bne.w	8005c6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2319      	movs	r3, #25
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	496d      	ldr	r1, [pc, #436]	; (8005c78 <HAL_I2C_Mem_Write+0x1ec>)
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fe11 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0cc      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2C_Mem_Write+0x56>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0c5      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d007      	beq.n	8005b08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2221      	movs	r2, #33	; 0x21
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a4d      	ldr	r2, [pc, #308]	; (8005c7c <HAL_I2C_Mem_Write+0x1f0>)
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b4a:	88f8      	ldrh	r0, [r7, #6]
 8005b4c:	893a      	ldrh	r2, [r7, #8]
 8005b4e:	8979      	ldrh	r1, [r7, #10]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	4603      	mov	r3, r0
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fc48 	bl	80063f0 <I2C_RequestMemoryWrite>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d052      	beq.n	8005c0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e081      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fe92 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d107      	bne.n	8005b92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06b      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d11b      	bne.n	8005c0c <HAL_I2C_Mem_Write+0x180>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d017      	beq.n	8005c0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1aa      	bne.n	8005b6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fe7e 	bl	800691a <I2C_WaitOnBTFFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d107      	bne.n	8005c3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e016      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00100002 	.word	0x00100002
 8005c7c:	ffff0000 	.word	0xffff0000

08005c80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	817b      	strh	r3, [r7, #10]
 8005c92:	460b      	mov	r3, r1
 8005c94:	813b      	strh	r3, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c9e:	f7fe fd73 	bl	8004788 <HAL_GetTick>
 8005ca2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	f040 8244 	bne.w	800613a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	2319      	movs	r3, #25
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4982      	ldr	r1, [pc, #520]	; (8005ec4 <HAL_I2C_Mem_Read+0x244>)
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fd15 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e237      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_I2C_Mem_Read+0x5a>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e230      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d007      	beq.n	8005d00 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2222      	movs	r2, #34	; 0x22
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <HAL_I2C_Mem_Read+0x248>)
 8005d40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d42:	88f8      	ldrh	r0, [r7, #6]
 8005d44:	893a      	ldrh	r2, [r7, #8]
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4603      	mov	r3, r0
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fbe2 	bl	800651c <I2C_RequestMemoryRead>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e1ec      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d113      	bne.n	8005d92 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e1c0      	b.n	8006114 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d11e      	bne.n	8005dd8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005daa:	b672      	cpsid	i
}
 8005dac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dd4:	b662      	cpsie	i
}
 8005dd6:	e035      	b.n	8005e44 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d11e      	bne.n	8005e1e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005df0:	b672      	cpsid	i
}
 8005df2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e1a:	b662      	cpsie	i
}
 8005e1c:	e012      	b.n	8005e44 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e2c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e44:	e166      	b.n	8006114 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	f200 811f 	bhi.w	800608e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d123      	bne.n	8005ea0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fd9d 	bl	800699c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e167      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e9e:	e139      	b.n	8006114 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d152      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4906      	ldr	r1, [pc, #24]	; (8005ecc <HAL_I2C_Mem_Read+0x24c>)
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fc1a 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e13c      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
 8005ec2:	bf00      	nop
 8005ec4:	00100002 	.word	0x00100002
 8005ec8:	ffff0000 	.word	0xffff0000
 8005ecc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ed0:	b672      	cpsid	i
}
 8005ed2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f16:	b662      	cpsie	i
}
 8005f18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f4c:	e0e2      	b.n	8006114 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	2200      	movs	r2, #0
 8005f56:	497b      	ldr	r1, [pc, #492]	; (8006144 <HAL_I2C_Mem_Read+0x4c4>)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fbc7 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0e9      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f78:	b672      	cpsid	i
}
 8005f7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fae:	4b66      	ldr	r3, [pc, #408]	; (8006148 <HAL_I2C_Mem_Read+0x4c8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	4a65      	ldr	r2, [pc, #404]	; (800614c <HAL_I2C_Mem_Read+0x4cc>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	0a1a      	lsrs	r2, r3, #8
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d118      	bne.n	8006006 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005ff6:	b662      	cpsie	i
}
 8005ff8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e09a      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d1d9      	bne.n	8005fc8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006056:	b662      	cpsie	i
}
 8006058:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800608c:	e042      	b.n	8006114 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fc82 	bl	800699c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e04c      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d118      	bne.n	8006114 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	f47f ae94 	bne.w	8005e46 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e000      	b.n	800613c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
  }
}
 800613c:	4618      	mov	r0, r3
 800613e:	3728      	adds	r7, #40	; 0x28
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00010004 	.word	0x00010004
 8006148:	20000004 	.word	0x20000004
 800614c:	14f8b589 	.word	0x14f8b589

08006150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	460b      	mov	r3, r1
 800615e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d006      	beq.n	800617a <I2C_MasterRequestWrite+0x2a>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <I2C_MasterRequestWrite+0x2a>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006178:	d108      	bne.n	800618c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e00b      	b.n	80061a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	2b12      	cmp	r3, #18
 8006192:	d107      	bne.n	80061a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fa9b 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	d103      	bne.n	80061d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e035      	b.n	8006244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e0:	d108      	bne.n	80061f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061e2:	897b      	ldrh	r3, [r7, #10]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061f0:	611a      	str	r2, [r3, #16]
 80061f2:	e01b      	b.n	800622c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	11db      	asrs	r3, r3, #7
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f003 0306 	and.w	r3, r3, #6
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f063 030f 	orn	r3, r3, #15
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	490e      	ldr	r1, [pc, #56]	; (800624c <I2C_MasterRequestWrite+0xfc>)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fac1 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e010      	b.n	8006244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4907      	ldr	r1, [pc, #28]	; (8006250 <I2C_MasterRequestWrite+0x100>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fab1 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	00010008 	.word	0x00010008
 8006250:	00010002 	.word	0x00010002

08006254 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	460b      	mov	r3, r1
 8006262:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006278:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d006      	beq.n	800628e <I2C_MasterRequestRead+0x3a>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d003      	beq.n	800628e <I2C_MasterRequestRead+0x3a>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800628c:	d108      	bne.n	80062a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e00b      	b.n	80062b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2b11      	cmp	r3, #17
 80062a6:	d107      	bne.n	80062b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fa11 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d103      	bne.n	80062e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e079      	b.n	80063e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f4:	d108      	bne.n	8006308 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062f6:	897b      	ldrh	r3, [r7, #10]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
 8006306:	e05f      	b.n	80063c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	11db      	asrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 0306 	and.w	r3, r3, #6
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f063 030f 	orn	r3, r3, #15
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4930      	ldr	r1, [pc, #192]	; (80063e8 <I2C_MasterRequestRead+0x194>)
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa37 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e054      	b.n	80063e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4929      	ldr	r1, [pc, #164]	; (80063ec <I2C_MasterRequestRead+0x198>)
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fa27 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e044      	b.n	80063e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800637a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f9af 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	d103      	bne.n	80063ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e017      	b.n	80063e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063b0:	897b      	ldrh	r3, [r7, #10]
 80063b2:	11db      	asrs	r3, r3, #7
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 0306 	and.w	r3, r3, #6
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f063 030e 	orn	r3, r3, #14
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4907      	ldr	r1, [pc, #28]	; (80063ec <I2C_MasterRequestRead+0x198>)
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f9e3 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	00010008 	.word	0x00010008
 80063ec:	00010002 	.word	0x00010002

080063f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	817b      	strh	r3, [r7, #10]
 8006402:	460b      	mov	r3, r1
 8006404:	813b      	strh	r3, [r7, #8]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	2200      	movs	r2, #0
 8006422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f960 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d103      	bne.n	800644a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e05f      	b.n	800650e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800644e:	897b      	ldrh	r3, [r7, #10]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800645c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	492d      	ldr	r1, [pc, #180]	; (8006518 <I2C_RequestMemoryWrite+0x128>)
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f998 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e04c      	b.n	800650e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	6a39      	ldr	r1, [r7, #32]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fa02 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d107      	bne.n	80064b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e02b      	b.n	800650e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d105      	bne.n	80064c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064bc:	893b      	ldrh	r3, [r7, #8]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	611a      	str	r2, [r3, #16]
 80064c6:	e021      	b.n	800650c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064c8:	893b      	ldrh	r3, [r7, #8]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	6a39      	ldr	r1, [r7, #32]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f9dc 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d107      	bne.n	80064fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e005      	b.n	800650e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006502:	893b      	ldrh	r3, [r7, #8]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	00010002 	.word	0x00010002

0800651c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	4603      	mov	r3, r0
 800652c:	817b      	strh	r3, [r7, #10]
 800652e:	460b      	mov	r3, r1
 8006530:	813b      	strh	r3, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2200      	movs	r2, #0
 800655e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f8c2 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00d      	beq.n	800658a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657c:	d103      	bne.n	8006586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e0aa      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	4952      	ldr	r1, [pc, #328]	; (80066e8 <I2C_RequestMemoryRead+0x1cc>)
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f8fa 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e097      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c8:	6a39      	ldr	r1, [r7, #32]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f964 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d107      	bne.n	80065ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e076      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d105      	bne.n	8006604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	611a      	str	r2, [r3, #16]
 8006602:	e021      	b.n	8006648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006604:	893b      	ldrh	r3, [r7, #8]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	b29b      	uxth	r3, r3
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006614:	6a39      	ldr	r1, [r7, #32]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f93e 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00d      	beq.n	800663e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	2b04      	cmp	r3, #4
 8006628:	d107      	bne.n	800663a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e050      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800663e:	893b      	ldrh	r3, [r7, #8]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	6a39      	ldr	r1, [r7, #32]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f923 	bl	8006898 <I2C_WaitOnTXEFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00d      	beq.n	8006674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	2b04      	cmp	r3, #4
 800665e:	d107      	bne.n	8006670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800666e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e035      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2200      	movs	r2, #0
 800668c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 f82b 	bl	80066ec <I2C_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066aa:	d103      	bne.n	80066b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e013      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066b8:	897b      	ldrh	r3, [r7, #10]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	4906      	ldr	r1, [pc, #24]	; (80066e8 <I2C_RequestMemoryRead+0x1cc>)
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f863 	bl	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	00010002 	.word	0x00010002

080066ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066fc:	e025      	b.n	800674a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d021      	beq.n	800674a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006706:	f7fe f83f 	bl	8004788 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d302      	bcc.n	800671c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d116      	bne.n	800674a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e023      	b.n	8006792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	d10d      	bne.n	8006770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	43da      	mvns	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4013      	ands	r3, r2
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	e00c      	b.n	800678a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	43da      	mvns	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4013      	ands	r3, r2
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	429a      	cmp	r2, r3
 800678e:	d0b6      	beq.n	80066fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067a8:	e051      	b.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d123      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f043 0204 	orr.w	r2, r3, #4
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e046      	b.n	8006890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d021      	beq.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7fd ffbd 	bl	8004788 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d116      	bne.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f043 0220 	orr.w	r2, r3, #32
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e020      	b.n	8006890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10c      	bne.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	43da      	mvns	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	e00b      	b.n	800688a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	43da      	mvns	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4013      	ands	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d18d      	bne.n	80067aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068a4:	e02d      	b.n	8006902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f8ce 	bl	8006a48 <I2C_IsAcknowledgeFailed>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e02d      	b.n	8006912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d021      	beq.n	8006902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fd ff63 	bl	8004788 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d116      	bne.n	8006902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e007      	b.n	8006912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690c:	2b80      	cmp	r3, #128	; 0x80
 800690e:	d1ca      	bne.n	80068a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006926:	e02d      	b.n	8006984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f88d 	bl	8006a48 <I2C_IsAcknowledgeFailed>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e02d      	b.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d021      	beq.n	8006984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006940:	f7fd ff22 	bl	8004788 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d116      	bne.n	8006984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e007      	b.n	8006994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b04      	cmp	r3, #4
 8006990:	d1ca      	bne.n	8006928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069a8:	e042      	b.n	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d119      	bne.n	80069ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0210 	mvn.w	r2, #16
 80069c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e029      	b.n	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ec:	f7fd fecc 	bl	8004788 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d116      	bne.n	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e007      	b.n	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d1b5      	bne.n	80069aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5e:	d11b      	bne.n	8006a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f043 0204 	orr.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e26c      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8087 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ac4:	4b92      	ldr	r3, [pc, #584]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d00c      	beq.n	8006aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ad0:	4b8f      	ldr	r3, [pc, #572]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d112      	bne.n	8006b02 <HAL_RCC_OscConfig+0x5e>
 8006adc:	4b8c      	ldr	r3, [pc, #560]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d10b      	bne.n	8006b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aea:	4b89      	ldr	r3, [pc, #548]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d06c      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x12c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d168      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e246      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCC_OscConfig+0x76>
 8006b0c:	4b80      	ldr	r3, [pc, #512]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a7f      	ldr	r2, [pc, #508]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e02e      	b.n	8006b78 <HAL_RCC_OscConfig+0xd4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10c      	bne.n	8006b3c <HAL_RCC_OscConfig+0x98>
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a7a      	ldr	r2, [pc, #488]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	4b78      	ldr	r3, [pc, #480]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a77      	ldr	r2, [pc, #476]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e01d      	b.n	8006b78 <HAL_RCC_OscConfig+0xd4>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0xbc>
 8006b46:	4b72      	ldr	r3, [pc, #456]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a71      	ldr	r2, [pc, #452]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	e00b      	b.n	8006b78 <HAL_RCC_OscConfig+0xd4>
 8006b60:	4b6b      	ldr	r3, [pc, #428]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a6a      	ldr	r2, [pc, #424]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d013      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fd fe02 	bl	8004788 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fd fdfe 	bl	8004788 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	; 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e1fa      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	4b5d      	ldr	r3, [pc, #372]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0xe4>
 8006ba6:	e014      	b.n	8006bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fd fdee 	bl	8004788 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb0:	f7fd fdea 	bl	8004788 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	; 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e1e6      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc2:	4b53      	ldr	r3, [pc, #332]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x10c>
 8006bce:	e000      	b.n	8006bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d063      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bde:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f003 030c 	and.w	r3, r3, #12
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bea:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d11c      	bne.n	8006c30 <HAL_RCC_OscConfig+0x18c>
 8006bf6:	4b46      	ldr	r3, [pc, #280]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d116      	bne.n	8006c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_RCC_OscConfig+0x176>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e1ba      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1a:	4b3d      	ldr	r3, [pc, #244]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4939      	ldr	r1, [pc, #228]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c2e:	e03a      	b.n	8006ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d020      	beq.n	8006c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c38:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <HAL_RCC_OscConfig+0x270>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3e:	f7fd fda3 	bl	8004788 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c46:	f7fd fd9f 	bl	8004788 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e19b      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c58:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c64:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	4927      	ldr	r1, [pc, #156]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]
 8006c78:	e015      	b.n	8006ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c7a:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <HAL_RCC_OscConfig+0x270>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fd fd82 	bl	8004788 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c88:	f7fd fd7e 	bl	8004788 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e17a      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03a      	beq.n	8006d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d019      	beq.n	8006cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <HAL_RCC_OscConfig+0x274>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc0:	f7fd fd62 	bl	8004788 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc8:	f7fd fd5e 	bl	8004788 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e15a      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cda:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f0      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f000 fad8 	bl	800729c <RCC_Delay>
 8006cec:	e01c      	b.n	8006d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_RCC_OscConfig+0x274>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf4:	f7fd fd48 	bl	8004788 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfa:	e00f      	b.n	8006d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfc:	f7fd fd44 	bl	8004788 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d908      	bls.n	8006d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e140      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	42420000 	.word	0x42420000
 8006d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d1c:	4b9e      	ldr	r3, [pc, #632]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e9      	bne.n	8006cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80a6 	beq.w	8006e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b97      	ldr	r3, [pc, #604]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	4b94      	ldr	r3, [pc, #592]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	4a93      	ldr	r2, [pc, #588]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d50:	61d3      	str	r3, [r2, #28]
 8006d52:	4b91      	ldr	r3, [pc, #580]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	60bb      	str	r3, [r7, #8]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d62:	4b8e      	ldr	r3, [pc, #568]	; (8006f9c <HAL_RCC_OscConfig+0x4f8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d118      	bne.n	8006da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d6e:	4b8b      	ldr	r3, [pc, #556]	; (8006f9c <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a8a      	ldr	r2, [pc, #552]	; (8006f9c <HAL_RCC_OscConfig+0x4f8>)
 8006d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7a:	f7fd fd05 	bl	8004788 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d82:	f7fd fd01 	bl	8004788 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b64      	cmp	r3, #100	; 0x64
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0fd      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d94:	4b81      	ldr	r3, [pc, #516]	; (8006f9c <HAL_RCC_OscConfig+0x4f8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0f0      	beq.n	8006d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d106      	bne.n	8006db6 <HAL_RCC_OscConfig+0x312>
 8006da8:	4b7b      	ldr	r3, [pc, #492]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	4a7a      	ldr	r2, [pc, #488]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	6213      	str	r3, [r2, #32]
 8006db4:	e02d      	b.n	8006e12 <HAL_RCC_OscConfig+0x36e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x334>
 8006dbe:	4b76      	ldr	r3, [pc, #472]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	4a75      	ldr	r2, [pc, #468]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6213      	str	r3, [r2, #32]
 8006dca:	4b73      	ldr	r3, [pc, #460]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4a72      	ldr	r2, [pc, #456]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	6213      	str	r3, [r2, #32]
 8006dd6:	e01c      	b.n	8006e12 <HAL_RCC_OscConfig+0x36e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d10c      	bne.n	8006dfa <HAL_RCC_OscConfig+0x356>
 8006de0:	4b6d      	ldr	r3, [pc, #436]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	4a6c      	ldr	r2, [pc, #432]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006de6:	f043 0304 	orr.w	r3, r3, #4
 8006dea:	6213      	str	r3, [r2, #32]
 8006dec:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	4a69      	ldr	r2, [pc, #420]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	6213      	str	r3, [r2, #32]
 8006df8:	e00b      	b.n	8006e12 <HAL_RCC_OscConfig+0x36e>
 8006dfa:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	4a66      	ldr	r2, [pc, #408]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	6213      	str	r3, [r2, #32]
 8006e06:	4b64      	ldr	r3, [pc, #400]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	4a63      	ldr	r2, [pc, #396]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e0c:	f023 0304 	bic.w	r3, r3, #4
 8006e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d015      	beq.n	8006e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1a:	f7fd fcb5 	bl	8004788 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fd fcb1 	bl	8004788 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0ab      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e38:	4b57      	ldr	r3, [pc, #348]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ee      	beq.n	8006e22 <HAL_RCC_OscConfig+0x37e>
 8006e44:	e014      	b.n	8006e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e46:	f7fd fc9f 	bl	8004788 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4c:	e00a      	b.n	8006e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4e:	f7fd fc9b 	bl	8004788 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e095      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e64:	4b4c      	ldr	r3, [pc, #304]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1ee      	bne.n	8006e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e76:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	4a47      	ldr	r2, [pc, #284]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8081 	beq.w	8006f8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e8c:	4b42      	ldr	r3, [pc, #264]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 030c 	and.w	r3, r3, #12
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d061      	beq.n	8006f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d146      	bne.n	8006f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea0:	4b3f      	ldr	r3, [pc, #252]	; (8006fa0 <HAL_RCC_OscConfig+0x4fc>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea6:	f7fd fc6f 	bl	8004788 <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eae:	f7fd fc6b 	bl	8004788 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e067      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f0      	bne.n	8006eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d108      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ed6:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	492d      	ldr	r1, [pc, #180]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a19      	ldr	r1, [r3, #32]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	4927      	ldr	r1, [pc, #156]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f00:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <HAL_RCC_OscConfig+0x4fc>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f06:	f7fd fc3f 	bl	8004788 <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f0e:	f7fd fc3b 	bl	8004788 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e037      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCC_OscConfig+0x46a>
 8006f2c:	e02f      	b.n	8006f8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2e:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <HAL_RCC_OscConfig+0x4fc>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f34:	f7fd fc28 	bl	8004788 <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3c:	f7fd fc24 	bl	8004788 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e020      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x498>
 8006f5a:	e018      	b.n	8006f8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e013      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_RCC_OscConfig+0x4f4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40007000 	.word	0x40007000
 8006fa0:	42420060 	.word	0x42420060

08006fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0d0      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb8:	4b6a      	ldr	r3, [pc, #424]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d910      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc6:	4b67      	ldr	r3, [pc, #412]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 0207 	bic.w	r2, r3, #7
 8006fce:	4965      	ldr	r1, [pc, #404]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b63      	ldr	r3, [pc, #396]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0b8      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007000:	4b59      	ldr	r3, [pc, #356]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a58      	ldr	r2, [pc, #352]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800700a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007018:	4b53      	ldr	r3, [pc, #332]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a52      	ldr	r2, [pc, #328]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800701e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b50      	ldr	r3, [pc, #320]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	494d      	ldr	r1, [pc, #308]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007032:	4313      	orrs	r3, r2
 8007034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d040      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4b47      	ldr	r3, [pc, #284]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d115      	bne.n	8007082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e07f      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007062:	4b41      	ldr	r3, [pc, #260]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e073      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007072:	4b3d      	ldr	r3, [pc, #244]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e06b      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007082:	4b39      	ldr	r3, [pc, #228]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f023 0203 	bic.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	4936      	ldr	r1, [pc, #216]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007094:	f7fd fb78 	bl	8004788 <HAL_GetTick>
 8007098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709c:	f7fd fb74 	bl	8004788 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e053      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	4b2d      	ldr	r3, [pc, #180]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 020c 	and.w	r2, r3, #12
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d1eb      	bne.n	800709c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070c4:	4b27      	ldr	r3, [pc, #156]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d210      	bcs.n	80070f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d2:	4b24      	ldr	r3, [pc, #144]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 0207 	bic.w	r2, r3, #7
 80070da:	4922      	ldr	r1, [pc, #136]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e032      	b.n	800715a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4916      	ldr	r1, [pc, #88]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	490e      	ldr	r1, [pc, #56]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800712e:	4313      	orrs	r3, r2
 8007130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007132:	f000 f821 	bl	8007178 <HAL_RCC_GetSysClockFreq>
 8007136:	4602      	mov	r2, r0
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <HAL_RCC_ClockConfig+0x1c4>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	490a      	ldr	r1, [pc, #40]	; (800716c <HAL_RCC_ClockConfig+0x1c8>)
 8007144:	5ccb      	ldrb	r3, [r1, r3]
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <HAL_RCC_ClockConfig+0x1cc>)
 800714c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1d0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7fd fad6 	bl	8004704 <HAL_InitTick>

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40022000 	.word	0x40022000
 8007168:	40021000 	.word	0x40021000
 800716c:	0800ed80 	.word	0x0800ed80
 8007170:	20000004 	.word	0x20000004
 8007174:	20000008 	.word	0x20000008

08007178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007178:	b490      	push	{r4, r7}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800717e:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007180:	1d3c      	adds	r4, r7, #4
 8007182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007188:	f240 2301 	movw	r3, #513	; 0x201
 800718c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	2300      	movs	r3, #0
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	2300      	movs	r3, #0
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071a2:	4b22      	ldr	r3, [pc, #136]	; (800722c <HAL_RCC_GetSysClockFreq+0xb4>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d002      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0x40>
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d003      	beq.n	80071be <HAL_RCC_GetSysClockFreq+0x46>
 80071b6:	e02d      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071b8:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ba:	623b      	str	r3, [r7, #32]
      break;
 80071bc:	e02d      	b.n	800721a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	0c9b      	lsrs	r3, r3, #18
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071ca:	4413      	add	r3, r2
 80071cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80071d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d013      	beq.n	8007204 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071dc:	4b13      	ldr	r3, [pc, #76]	; (800722c <HAL_RCC_GetSysClockFreq+0xb4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	0c5b      	lsrs	r3, r3, #17
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80071ea:	4413      	add	r3, r2
 80071ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80071f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f6:	fb02 f203 	mul.w	r2, r2, r3
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	e004      	b.n	800720e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	623b      	str	r3, [r7, #32]
      break;
 8007212:	e002      	b.n	800721a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007216:	623b      	str	r3, [r7, #32]
      break;
 8007218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721a:	6a3b      	ldr	r3, [r7, #32]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bc90      	pop	{r4, r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	0800ed3c 	.word	0x0800ed3c
 800722c:	40021000 	.word	0x40021000
 8007230:	007a1200 	.word	0x007a1200
 8007234:	003d0900 	.word	0x003d0900

08007238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <HAL_RCC_GetHCLKFreq+0x10>)
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr
 8007248:	20000004 	.word	0x20000004

0800724c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007250:	f7ff fff2 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4903      	ldr	r1, [pc, #12]	; (8007270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40021000 	.word	0x40021000
 8007270:	0800ed90 	.word	0x0800ed90

08007274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007278:	f7ff ffde 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 800727c:	4602      	mov	r2, r0
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	0adb      	lsrs	r3, r3, #11
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	4903      	ldr	r1, [pc, #12]	; (8007298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800728a:	5ccb      	ldrb	r3, [r1, r3]
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40021000 	.word	0x40021000
 8007298:	0800ed90 	.word	0x0800ed90

0800729c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <RCC_Delay+0x34>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <RCC_Delay+0x38>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	0a5b      	lsrs	r3, r3, #9
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072b8:	bf00      	nop
  }
  while (Delay --);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1e5a      	subs	r2, r3, #1
 80072be:	60fa      	str	r2, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f9      	bne.n	80072b8 <RCC_Delay+0x1c>
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	20000004 	.word	0x20000004
 80072d4:	10624dd3 	.word	0x10624dd3

080072d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e041      	b.n	800736e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fc ffae 	bl	8004260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f000 fe98 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d001      	beq.n	8007390 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e032      	b.n	80073f6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_TIM_Base_Start+0x88>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_TIM_Base_Start+0x48>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d009      	beq.n	80073c0 <HAL_TIM_Base_Start+0x48>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a14      	ldr	r2, [pc, #80]	; (8007404 <HAL_TIM_Base_Start+0x8c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIM_Base_Start+0x48>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <HAL_TIM_Base_Start+0x90>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d111      	bne.n	80073e4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b06      	cmp	r3, #6
 80073d0:	d010      	beq.n	80073f4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e2:	e007      	b.n	80073f4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800

0800740c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	d001      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e03a      	b.n	800749a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a18      	ldr	r2, [pc, #96]	; (80074a4 <HAL_TIM_Base_Start_IT+0x98>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x58>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d009      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x58>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x58>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a13      	ldr	r2, [pc, #76]	; (80074ac <HAL_TIM_Base_Start_IT+0xa0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d111      	bne.n	8007488 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b06      	cmp	r3, #6
 8007474:	d010      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0201 	orr.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007486:	e007      	b.n	8007498 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	40012c00 	.word	0x40012c00
 80074a8:	40000400 	.word	0x40000400
 80074ac:	40000800 	.word	0x40000800

080074b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e041      	b.n	8007546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fc fea4 	bl	8004224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 fdac 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_TIM_PWM_Start+0x24>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e022      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d109      	bne.n	800758e <HAL_TIM_PWM_Start+0x3e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e015      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e008      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e05e      	b.n	8007680 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x82>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d0:	e013      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x92>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e0:	e00b      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start+0xa2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f0:	e003      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2201      	movs	r2, #1
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f001 f8af 	bl	8008766 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <HAL_TIM_PWM_Start+0x138>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d107      	bne.n	8007622 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <HAL_TIM_PWM_Start+0x138>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_TIM_PWM_Start+0xfa>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d009      	beq.n	800764a <HAL_TIM_PWM_Start+0xfa>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a14      	ldr	r2, [pc, #80]	; (800768c <HAL_TIM_PWM_Start+0x13c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_TIM_PWM_Start+0xfa>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a12      	ldr	r2, [pc, #72]	; (8007690 <HAL_TIM_PWM_Start+0x140>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d111      	bne.n	800766e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b06      	cmp	r3, #6
 800765a:	d010      	beq.n	800767e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766c:	e007      	b.n	800767e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0201 	orr.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40012c00 	.word	0x40012c00
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800

08007694 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e041      	b.n	800772a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f839 	bl	8007732 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f000 fcba 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <HAL_TIM_IC_Start_IT+0x1a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e013      	b.n	8007786 <HAL_TIM_IC_Start_IT+0x42>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b04      	cmp	r3, #4
 8007762:	d104      	bne.n	800776e <HAL_TIM_IC_Start_IT+0x2a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e00b      	b.n	8007786 <HAL_TIM_IC_Start_IT+0x42>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b08      	cmp	r3, #8
 8007772:	d104      	bne.n	800777e <HAL_TIM_IC_Start_IT+0x3a>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777a:	b2db      	uxtb	r3, r3
 800777c:	e003      	b.n	8007786 <HAL_TIM_IC_Start_IT+0x42>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d104      	bne.n	8007798 <HAL_TIM_IC_Start_IT+0x54>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007794:	b2db      	uxtb	r3, r3
 8007796:	e013      	b.n	80077c0 <HAL_TIM_IC_Start_IT+0x7c>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b04      	cmp	r3, #4
 800779c:	d104      	bne.n	80077a8 <HAL_TIM_IC_Start_IT+0x64>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	e00b      	b.n	80077c0 <HAL_TIM_IC_Start_IT+0x7c>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d104      	bne.n	80077b8 <HAL_TIM_IC_Start_IT+0x74>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	e003      	b.n	80077c0 <HAL_TIM_IC_Start_IT+0x7c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d001      	beq.n	80077d2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e0b3      	b.n	800793a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_IC_Start_IT+0x9e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e0:	e013      	b.n	800780a <HAL_TIM_IC_Start_IT+0xc6>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_IC_Start_IT+0xae>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f0:	e00b      	b.n	800780a <HAL_TIM_IC_Start_IT+0xc6>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_IC_Start_IT+0xbe>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007800:	e003      	b.n	800780a <HAL_TIM_IC_Start_IT+0xc6>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_TIM_IC_Start_IT+0xd6>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007818:	e013      	b.n	8007842 <HAL_TIM_IC_Start_IT+0xfe>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d104      	bne.n	800782a <HAL_TIM_IC_Start_IT+0xe6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	e00b      	b.n	8007842 <HAL_TIM_IC_Start_IT+0xfe>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d104      	bne.n	800783a <HAL_TIM_IC_Start_IT+0xf6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007838:	e003      	b.n	8007842 <HAL_TIM_IC_Start_IT+0xfe>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b0c      	cmp	r3, #12
 8007846:	d841      	bhi.n	80078cc <HAL_TIM_IC_Start_IT+0x188>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <HAL_TIM_IC_Start_IT+0x10c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007885 	.word	0x08007885
 8007854:	080078cd 	.word	0x080078cd
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078cd 	.word	0x080078cd
 8007860:	08007897 	.word	0x08007897
 8007864:	080078cd 	.word	0x080078cd
 8007868:	080078cd 	.word	0x080078cd
 800786c:	080078cd 	.word	0x080078cd
 8007870:	080078a9 	.word	0x080078a9
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078cd 	.word	0x080078cd
 800787c:	080078cd 	.word	0x080078cd
 8007880:	080078bb 	.word	0x080078bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0202 	orr.w	r2, r2, #2
 8007892:	60da      	str	r2, [r3, #12]
      break;
 8007894:	e01b      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0204 	orr.w	r2, r2, #4
 80078a4:	60da      	str	r2, [r3, #12]
      break;
 80078a6:	e012      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	60da      	str	r2, [r3, #12]
      break;
 80078b8:	e009      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0210 	orr.w	r2, r2, #16
 80078c8:	60da      	str	r2, [r3, #12]
      break;
 80078ca:	e000      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80078cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2201      	movs	r2, #1
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 ff45 	bl	8008766 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <HAL_TIM_IC_Start_IT+0x200>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x1c0>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d009      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x1c0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a14      	ldr	r2, [pc, #80]	; (8007948 <HAL_TIM_IC_Start_IT+0x204>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x1c0>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a13      	ldr	r2, [pc, #76]	; (800794c <HAL_TIM_IC_Start_IT+0x208>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d111      	bne.n	8007928 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b06      	cmp	r3, #6
 8007914:	d010      	beq.n	8007938 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0201 	orr.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007926:	e007      	b.n	8007938 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40012c00 	.word	0x40012c00
 8007948:	40000400 	.word	0x40000400
 800794c:	40000800 	.word	0x40000800

08007950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b02      	cmp	r3, #2
 8007964:	d122      	bne.n	80079ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d11b      	bne.n	80079ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0202 	mvn.w	r2, #2
 800797c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fc f8d0 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8007998:	e005      	b.n	80079a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fb3a 	bl	8008014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb40 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d122      	bne.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d11b      	bne.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0204 	mvn.w	r2, #4
 80079d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fc f8a6 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 80079ec:	e005      	b.n	80079fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fb10 	bl	8008014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb16 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d122      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d11b      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0208 	mvn.w	r2, #8
 8007a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fc f87c 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fae6 	bl	8008014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 faec 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	2b10      	cmp	r3, #16
 8007a60:	d122      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0210 	mvn.w	r2, #16
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fc f852 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fabc 	bl	8008014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fac2 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d10e      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d107      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0201 	mvn.w	r2, #1
 8007acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fb fc0a 	bl	80032e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b80      	cmp	r3, #128	; 0x80
 8007ae0:	d10e      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ffae 	bl	8008a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d10e      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d107      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa86 	bl	8008038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d10e      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d107      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0220 	mvn.w	r2, #32
 8007b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 ff79 	bl	8008a4a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_IC_ConfigChannel+0x1a>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e082      	b.n	8007c80 <HAL_TIM_IC_ConfigChannel+0x120>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11b      	bne.n	8007bc0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f000 fc42 	bl	8008420 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 020c 	bic.w	r2, r2, #12
 8007baa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6999      	ldr	r1, [r3, #24]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	619a      	str	r2, [r3, #24]
 8007bbe:	e05a      	b.n	8007c76 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d11c      	bne.n	8007c00 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6819      	ldr	r1, [r3, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f000 fcab 	bl	8008530 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007be8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6999      	ldr	r1, [r3, #24]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	021a      	lsls	r2, r3, #8
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	619a      	str	r2, [r3, #24]
 8007bfe:	e03a      	b.n	8007c76 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d11b      	bne.n	8007c3e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f000 fcf6 	bl	8008606 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 020c 	bic.w	r2, r2, #12
 8007c28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69d9      	ldr	r1, [r3, #28]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	61da      	str	r2, [r3, #28]
 8007c3c:	e01b      	b.n	8007c76 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6819      	ldr	r1, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f000 fd15 	bl	800867c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69d9      	ldr	r1, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	021a      	lsls	r2, r3, #8
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0ac      	b.n	8007dfc <HAL_TIM_PWM_ConfigChannel+0x174>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	f200 809f 	bhi.w	8007df0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007df1 	.word	0x08007df1
 8007cc0:	08007df1 	.word	0x08007df1
 8007cc4:	08007df1 	.word	0x08007df1
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007df1 	.word	0x08007df1
 8007cd0:	08007df1 	.word	0x08007df1
 8007cd4:	08007df1 	.word	0x08007df1
 8007cd8:	08007d6f 	.word	0x08007d6f
 8007cdc:	08007df1 	.word	0x08007df1
 8007ce0:	08007df1 	.word	0x08007df1
 8007ce4:	08007df1 	.word	0x08007df1
 8007ce8:	08007daf 	.word	0x08007daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fa0c 	bl	8008110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0208 	orr.w	r2, r2, #8
 8007d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0204 	bic.w	r2, r2, #4
 8007d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6999      	ldr	r1, [r3, #24]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	619a      	str	r2, [r3, #24]
      break;
 8007d2a:	e062      	b.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fa52 	bl	80081dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6999      	ldr	r1, [r3, #24]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	021a      	lsls	r2, r3, #8
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	619a      	str	r2, [r3, #24]
      break;
 8007d6c:	e041      	b.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fa9b 	bl	80082b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0208 	orr.w	r2, r2, #8
 8007d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0204 	bic.w	r2, r2, #4
 8007d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69d9      	ldr	r1, [r3, #28]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	61da      	str	r2, [r3, #28]
      break;
 8007dac:	e021      	b.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fae5 	bl	8008384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69d9      	ldr	r1, [r3, #28]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	021a      	lsls	r2, r3, #8
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	61da      	str	r2, [r3, #28]
      break;
 8007dee:	e000      	b.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_TIM_ConfigClockSource+0x18>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0b3      	b.n	8007f84 <HAL_TIM_ConfigClockSource+0x180>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e54:	d03e      	beq.n	8007ed4 <HAL_TIM_ConfigClockSource+0xd0>
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5a:	f200 8087 	bhi.w	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e62:	f000 8085 	beq.w	8007f70 <HAL_TIM_ConfigClockSource+0x16c>
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6a:	d87f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e6c:	2b70      	cmp	r3, #112	; 0x70
 8007e6e:	d01a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0xa2>
 8007e70:	2b70      	cmp	r3, #112	; 0x70
 8007e72:	d87b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e74:	2b60      	cmp	r3, #96	; 0x60
 8007e76:	d050      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x116>
 8007e78:	2b60      	cmp	r3, #96	; 0x60
 8007e7a:	d877      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e7c:	2b50      	cmp	r3, #80	; 0x50
 8007e7e:	d03c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0xf6>
 8007e80:	2b50      	cmp	r3, #80	; 0x50
 8007e82:	d873      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d058      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x136>
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d86f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e8c:	2b30      	cmp	r3, #48	; 0x30
 8007e8e:	d064      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x156>
 8007e90:	2b30      	cmp	r3, #48	; 0x30
 8007e92:	d86b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d060      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x156>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d867      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05c      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x156>
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d05a      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ea4:	e062      	b.n	8007f6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6899      	ldr	r1, [r3, #8]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f000 fc37 	bl	8008728 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ec8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	609a      	str	r2, [r3, #8]
      break;
 8007ed2:	e04e      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	6899      	ldr	r1, [r3, #8]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f000 fc20 	bl	8008728 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ef6:	609a      	str	r2, [r3, #8]
      break;
 8007ef8:	e03b      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f000 fae4 	bl	80084d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2150      	movs	r1, #80	; 0x50
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fbee 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007f18:	e02b      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f000 fb3e 	bl	80085a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2160      	movs	r1, #96	; 0x60
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fbde 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007f38:	e01b      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	6859      	ldr	r1, [r3, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f000 fac4 	bl	80084d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2140      	movs	r1, #64	; 0x40
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fbce 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007f58:	e00b      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f000 fbc5 	bl	80086f4 <TIM_ITRx_SetConfig>
        break;
 8007f6a:	e002      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b0c      	cmp	r3, #12
 8007f9e:	d831      	bhi.n	8008004 <HAL_TIM_ReadCapturedValue+0x78>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fdd 	.word	0x08007fdd
 8007fac:	08008005 	.word	0x08008005
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	08008005 	.word	0x08008005
 8007fb8:	08007fe7 	.word	0x08007fe7
 8007fbc:	08008005 	.word	0x08008005
 8007fc0:	08008005 	.word	0x08008005
 8007fc4:	08008005 	.word	0x08008005
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08008005 	.word	0x08008005
 8007fd0:	08008005 	.word	0x08008005
 8007fd4:	08008005 	.word	0x08008005
 8007fd8:	08007ffb 	.word	0x08007ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	60fb      	str	r3, [r7, #12]

      break;
 8007fe4:	e00f      	b.n	8008006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	60fb      	str	r3, [r7, #12]

      break;
 8007fee:	e00a      	b.n	8008006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	60fb      	str	r3, [r7, #12]

      break;
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	60fb      	str	r3, [r7, #12]

      break;
 8008002:	e000      	b.n	8008006 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008004:	bf00      	nop
  }

  return tmpreg;
 8008006:	68fb      	ldr	r3, [r7, #12]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop

08008014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
	...

0800804c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a29      	ldr	r2, [pc, #164]	; (8008104 <TIM_Base_SetConfig+0xb8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d007      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a26      	ldr	r2, [pc, #152]	; (8008108 <TIM_Base_SetConfig+0xbc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_Base_SetConfig+0x30>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a25      	ldr	r2, [pc, #148]	; (800810c <TIM_Base_SetConfig+0xc0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d108      	bne.n	800808e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <TIM_Base_SetConfig+0xb8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00b      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809c:	d007      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a19      	ldr	r2, [pc, #100]	; (8008108 <TIM_Base_SetConfig+0xbc>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x62>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <TIM_Base_SetConfig+0xc0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a07      	ldr	r2, [pc, #28]	; (8008104 <TIM_Base_SetConfig+0xb8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d103      	bne.n	80080f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	615a      	str	r2, [r3, #20]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	bc80      	pop	{r7}
 8008102:	4770      	bx	lr
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40000400 	.word	0x40000400
 800810c:	40000800 	.word	0x40000800

08008110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0303 	bic.w	r3, r3, #3
 8008146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f023 0302 	bic.w	r3, r3, #2
 8008158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a1c      	ldr	r2, [pc, #112]	; (80081d8 <TIM_OC1_SetConfig+0xc8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d10c      	bne.n	8008186 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f023 0308 	bic.w	r3, r3, #8
 8008172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0304 	bic.w	r3, r3, #4
 8008184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <TIM_OC1_SetConfig+0xc8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d111      	bne.n	80081b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800819c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	bf00      	nop
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40012c00 	.word	0x40012c00

080081dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f023 0210 	bic.w	r2, r3, #16
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f023 0320 	bic.w	r3, r3, #32
 8008226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <TIM_OC2_SetConfig+0xd0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d10d      	bne.n	8008258 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a14      	ldr	r2, [pc, #80]	; (80082ac <TIM_OC2_SetConfig+0xd0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d113      	bne.n	8008288 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800826e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	621a      	str	r2, [r3, #32]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr
 80082ac:	40012c00 	.word	0x40012c00

080082b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <TIM_OC3_SetConfig+0xd0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d10d      	bne.n	800832a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a14      	ldr	r2, [pc, #80]	; (8008380 <TIM_OC3_SetConfig+0xd0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d113      	bne.n	800835a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	621a      	str	r2, [r3, #32]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40012c00 	.word	0x40012c00

08008384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	031b      	lsls	r3, r3, #12
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a0f      	ldr	r2, [pc, #60]	; (800841c <TIM_OC4_SetConfig+0x98>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d109      	bne.n	80083f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	019b      	lsls	r3, r3, #6
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	621a      	str	r2, [r3, #32]
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr
 800841c:	40012c00 	.word	0x40012c00

08008420 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f023 0201 	bic.w	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a1f      	ldr	r2, [pc, #124]	; (80084c8 <TIM_TI1_SetConfig+0xa8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00b      	beq.n	8008466 <TIM_TI1_SetConfig+0x46>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008454:	d007      	beq.n	8008466 <TIM_TI1_SetConfig+0x46>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4a1c      	ldr	r2, [pc, #112]	; (80084cc <TIM_TI1_SetConfig+0xac>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <TIM_TI1_SetConfig+0x46>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <TIM_TI1_SetConfig+0xb0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d101      	bne.n	800846a <TIM_TI1_SetConfig+0x4a>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <TIM_TI1_SetConfig+0x4c>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d008      	beq.n	8008482 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	e003      	b.n	800848a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	b2db      	uxtb	r3, r3
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f023 030a 	bic.w	r3, r3, #10
 80084a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f003 030a 	and.w	r3, r3, #10
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800

080084d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f023 0201 	bic.w	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f023 030a 	bic.w	r3, r3, #10
 8008510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	621a      	str	r2, [r3, #32]
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0210 	bic.w	r2, r3, #16
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	031b      	lsls	r3, r3, #12
 8008574:	b29b      	uxth	r3, r3
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr

080085a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f023 0210 	bic.w	r2, r3, #16
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	031b      	lsls	r3, r3, #12
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	011b      	lsls	r3, r3, #4
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	621a      	str	r2, [r3, #32]
}
 80085fc:	bf00      	nop
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr

08008606 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0303 	bic.w	r3, r3, #3
 8008632:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008642:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	b2db      	uxtb	r3, r3
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008656:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	021b      	lsls	r3, r3, #8
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	031b      	lsls	r3, r3, #12
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	031b      	lsls	r3, r3, #12
 80086d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	f043 0307 	orr.w	r3, r3, #7
 8008716:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	021a      	lsls	r2, r3, #8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	431a      	orrs	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4313      	orrs	r3, r2
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	609a      	str	r2, [r3, #8]
}
 800875c:	bf00      	nop
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2201      	movs	r2, #1
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	43db      	mvns	r3, r3
 8008788:	401a      	ands	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	fa01 f303 	lsl.w	r3, r1, r3
 800879e:	431a      	orrs	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	621a      	str	r2, [r3, #32]
}
 80087a4:	bf00      	nop
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr
	...

080087b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <HAL_TIMEx_PWMN_Start+0x24>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	bf14      	ite	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	2300      	moveq	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	e022      	b.n	800881a <HAL_TIMEx_PWMN_Start+0x6a>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d109      	bne.n	80087ee <HAL_TIMEx_PWMN_Start+0x3e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	bf14      	ite	ne
 80087e6:	2301      	movne	r3, #1
 80087e8:	2300      	moveq	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	e015      	b.n	800881a <HAL_TIMEx_PWMN_Start+0x6a>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d109      	bne.n	8008808 <HAL_TIMEx_PWMN_Start+0x58>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	e008      	b.n	800881a <HAL_TIMEx_PWMN_Start+0x6a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e059      	b.n	80088d6 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_TIMEx_PWMN_Start+0x82>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008830:	e013      	b.n	800885a <HAL_TIMEx_PWMN_Start+0xaa>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b04      	cmp	r3, #4
 8008836:	d104      	bne.n	8008842 <HAL_TIMEx_PWMN_Start+0x92>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008840:	e00b      	b.n	800885a <HAL_TIMEx_PWMN_Start+0xaa>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b08      	cmp	r3, #8
 8008846:	d104      	bne.n	8008852 <HAL_TIMEx_PWMN_Start+0xa2>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008850:	e003      	b.n	800885a <HAL_TIMEx_PWMN_Start+0xaa>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2204      	movs	r2, #4
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f903 	bl	8008a6e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008876:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <HAL_TIMEx_PWMN_Start+0x130>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00e      	beq.n	80088a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888a:	d009      	beq.n	80088a0 <HAL_TIMEx_PWMN_Start+0xf0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a14      	ldr	r2, [pc, #80]	; (80088e4 <HAL_TIMEx_PWMN_Start+0x134>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d004      	beq.n	80088a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <HAL_TIMEx_PWMN_Start+0x138>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d111      	bne.n	80088c4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b06      	cmp	r3, #6
 80088b0:	d010      	beq.n	80088d4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c2:	e007      	b.n	80088d4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	40000400 	.word	0x40000400
 80088e8:	40000800 	.word	0x40000800

080088ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008900:	2302      	movs	r3, #2
 8008902:	e046      	b.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a16      	ldr	r2, [pc, #88]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008950:	d009      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a12      	ldr	r2, [pc, #72]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a10      	ldr	r2, [pc, #64]	; (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d10c      	bne.n	8008980 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800896c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr
 800899c:	40012c00 	.word	0x40012c00
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800

080089a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e03d      	b.n	8008a40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr

08008a4a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b087      	sub	sp, #28
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	2204      	movs	r2, #4
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1a      	ldr	r2, [r3, #32]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	401a      	ands	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f003 031f 	and.w	r3, r3, #31
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e03f      	b.n	8008b48 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d106      	bne.n	8008ae2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fb fc81 	bl	80043e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2224      	movs	r2, #36	; 0x24
 8008ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008af8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa5e 	bl	8008fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	; 0x28
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d17c      	bne.n	8008c6a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <HAL_UART_Transmit+0x2c>
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e075      	b.n	8008c6c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Transmit+0x3e>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e06e      	b.n	8008c6c <HAL_UART_Transmit+0x11c>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2221      	movs	r2, #33	; 0x21
 8008ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008ba4:	f7fb fdf0 	bl	8004788 <HAL_GetTick>
 8008ba8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbe:	d108      	bne.n	8008bd2 <HAL_UART_Transmit+0x82>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e003      	b.n	8008bda <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008be2:	e02a      	b.n	8008c3a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	2180      	movs	r1, #128	; 0x80
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 f967 	bl	8008ec2 <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e036      	b.n	8008c6c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c12:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	3302      	adds	r3, #2
 8008c18:	61bb      	str	r3, [r7, #24]
 8008c1a:	e007      	b.n	8008c2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1cf      	bne.n	8008be4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2140      	movs	r1, #64	; 0x40
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f937 	bl	8008ec2 <UART_WaitOnFlagUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e006      	b.n	8008c6c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2220      	movs	r2, #32
 8008c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e000      	b.n	8008c6c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d166      	bne.n	8008d5c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_UART_Receive_DMA+0x26>
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e05f      	b.n	8008d5e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_UART_Receive_DMA+0x38>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e058      	b.n	8008d5e <HAL_UART_Receive_DMA+0xea>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2222      	movs	r2, #34	; 0x22
 8008cca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	4a25      	ldr	r2, [pc, #148]	; (8008d68 <HAL_UART_Receive_DMA+0xf4>)
 8008cd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <HAL_UART_Receive_DMA+0xf8>)
 8008cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce2:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <HAL_UART_Receive_DMA+0xfc>)
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	2200      	movs	r2, #0
 8008cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4619      	mov	r1, r3
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	f7fb fed5 	bl	8004ab4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d56:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d5c:	2302      	movs	r3, #2
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	08008dab 	.word	0x08008dab
 8008d6c:	08008e13 	.word	0x08008e13
 8008d70:	08008e2f 	.word	0x08008e2f

08008d74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr

08008d86 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr

08008daa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d11e      	bne.n	8008e04 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dda:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	695a      	ldr	r2, [r3, #20]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dfa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff ffb5 	bl	8008d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ffb0 	bl	8008d86 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bf14      	ite	ne
 8008e4e:	2301      	movne	r3, #1
 8008e50:	2300      	moveq	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b21      	cmp	r3, #33	; 0x21
 8008e60:	d108      	bne.n	8008e74 <UART_DMAError+0x46>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e6e:	68b8      	ldr	r0, [r7, #8]
 8008e70:	f000 f871 	bl	8008f56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf14      	ite	ne
 8008e82:	2301      	movne	r3, #1
 8008e84:	2300      	moveq	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b22      	cmp	r3, #34	; 0x22
 8008e94:	d108      	bne.n	8008ea8 <UART_DMAError+0x7a>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ea2:	68b8      	ldr	r0, [r7, #8]
 8008ea4:	f000 f86c 	bl	8008f80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eac:	f043 0210 	orr.w	r2, r3, #16
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb4:	68b8      	ldr	r0, [r7, #8]
 8008eb6:	f7ff ff6f 	bl	8008d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed2:	e02c      	b.n	8008f2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d028      	beq.n	8008f2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d007      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ee2:	f7fb fc51 	bl	8004788 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d21d      	bcs.n	8008f2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695a      	ldr	r2, [r3, #20]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e00f      	b.n	8008f4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4013      	ands	r3, r2
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	bf0c      	ite	eq
 8008f3e:	2301      	moveq	r3, #1
 8008f40:	2300      	movne	r3, #0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d0c3      	beq.n	8008ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f6c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
	...

08008fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008ff6:	f023 030c 	bic.w	r3, r3, #12
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	430b      	orrs	r3, r1
 8009002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a2c      	ldr	r2, [pc, #176]	; (80090d0 <UART_SetConfig+0x114>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d103      	bne.n	800902c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009024:	f7fe f926 	bl	8007274 <HAL_RCC_GetPCLK2Freq>
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	e002      	b.n	8009032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800902c:	f7fe f90e 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8009030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009a      	lsls	r2, r3, #2
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <UART_SetConfig+0x118>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	0119      	lsls	r1, r3, #4
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009a      	lsls	r2, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	fbb2 f2f3 	udiv	r2, r2, r3
 8009068:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <UART_SetConfig+0x118>)
 800906a:	fba3 0302 	umull	r0, r3, r3, r2
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2064      	movs	r0, #100	; 0x64
 8009072:	fb00 f303 	mul.w	r3, r0, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	4a15      	ldr	r2, [pc, #84]	; (80090d4 <UART_SetConfig+0x118>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009088:	4419      	add	r1, r3
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009a      	lsls	r2, r3, #2
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	fbb2 f2f3 	udiv	r2, r2, r3
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <UART_SetConfig+0x118>)
 80090a2:	fba3 0302 	umull	r0, r3, r3, r2
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	2064      	movs	r0, #100	; 0x64
 80090aa:	fb00 f303 	mul.w	r3, r0, r3
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	3332      	adds	r3, #50	; 0x32
 80090b4:	4a07      	ldr	r2, [pc, #28]	; (80090d4 <UART_SetConfig+0x118>)
 80090b6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	f003 020f 	and.w	r2, r3, #15
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	440a      	add	r2, r1
 80090c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40013800 	.word	0x40013800
 80090d4:	51eb851f 	.word	0x51eb851f

080090d8 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"




Controller::Controller() {}
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af04      	add	r7, sp, #16
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a5f      	ldr	r2, [pc, #380]	; (8009260 <_ZN10ControllerC1Ev+0x188>)
 80090e4:	635a      	str	r2, [r3, #52]	; 0x34
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a5e      	ldr	r2, [pc, #376]	; (8009264 <_ZN10ControllerC1Ev+0x18c>)
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80090f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 fdc7 	bl	8000c8c <__aeabi_i2f>
 80090fe:	4603      	mov	r3, r0
 8009100:	4619      	mov	r1, r3
 8009102:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009106:	f7f7 fec9 	bl	8000e9c <__aeabi_fdiv>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	641a      	str	r2, [r3, #64]	; 0x40
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a54      	ldr	r2, [pc, #336]	; (8009268 <_ZN10ControllerC1Ev+0x190>)
 8009116:	645a      	str	r2, [r3, #68]	; 0x44
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a54      	ldr	r2, [pc, #336]	; (800926c <_ZN10ControllerC1Ev+0x194>)
 800911c:	649a      	str	r2, [r3, #72]	; 0x48
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a53      	ldr	r2, [pc, #332]	; (8009270 <_ZN10ControllerC1Ev+0x198>)
 8009122:	64da      	str	r2, [r3, #76]	; 0x4c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	651a      	str	r2, [r3, #80]	; 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a51      	ldr	r2, [pc, #324]	; (8009274 <_ZN10ControllerC1Ev+0x19c>)
 8009130:	655a      	str	r2, [r3, #84]	; 0x54
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a50      	ldr	r2, [pc, #320]	; (8009278 <_ZN10ControllerC1Ev+0x1a0>)
 8009136:	659a      	str	r2, [r3, #88]	; 0x58
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a50      	ldr	r2, [pc, #320]	; (800927c <_ZN10ControllerC1Ev+0x1a4>)
 800913c:	65da      	str	r2, [r3, #92]	; 0x5c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	661a      	str	r2, [r3, #96]	; 0x60
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	665a      	str	r2, [r3, #100]	; 0x64
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	669a      	str	r2, [r3, #104]	; 0x68
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a49      	ldr	r2, [pc, #292]	; (8009280 <_ZN10ControllerC1Ev+0x1a8>)
 800915a:	66da      	str	r2, [r3, #108]	; 0x6c
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a49      	ldr	r2, [pc, #292]	; (8009284 <_ZN10ControllerC1Ev+0x1ac>)
 8009160:	671a      	str	r2, [r3, #112]	; 0x70
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a48      	ldr	r2, [pc, #288]	; (8009288 <_ZN10ControllerC1Ev+0x1b0>)
 8009166:	675a      	str	r2, [r3, #116]	; 0x74
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a48      	ldr	r2, [pc, #288]	; (800928c <_ZN10ControllerC1Ev+0x1b4>)
 800916c:	679a      	str	r2, [r3, #120]	; 0x78
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a47      	ldr	r2, [pc, #284]	; (8009290 <_ZN10ControllerC1Ev+0x1b8>)
 8009172:	67da      	str	r2, [r3, #124]	; 0x7c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a47      	ldr	r2, [pc, #284]	; (8009294 <_ZN10ControllerC1Ev+0x1bc>)
 8009178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a46      	ldr	r2, [pc, #280]	; (8009298 <_ZN10ControllerC1Ev+0x1c0>)
 8009180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a44      	ldr	r2, [pc, #272]	; (8009298 <_ZN10ControllerC1Ev+0x1c0>)
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8009192:	a32f      	add	r3, pc, #188	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800919c:	a32c      	add	r3, pc, #176	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	e9cd 2300 	strd	r2, r3, [sp]
 80091a6:	a32c      	add	r3, pc, #176	; (adr r3, 8009258 <_ZN10ControllerC1Ev+0x180>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	4608      	mov	r0, r1
 80091ae:	f003 fa65 	bl	800c67c <_ZN3lpfC1Eddd>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80091b8:	a325      	add	r3, pc, #148	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091c2:	a323      	add	r3, pc, #140	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	e9cd 2300 	strd	r2, r3, [sp]
 80091cc:	a322      	add	r3, pc, #136	; (adr r3, 8009258 <_ZN10ControllerC1Ev+0x180>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	4608      	mov	r0, r1
 80091d4:	f003 fa52 	bl	800c67c <_ZN3lpfC1Eddd>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 80091de:	a31c      	add	r3, pc, #112	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091e8:	a319      	add	r3, pc, #100	; (adr r3, 8009250 <_ZN10ControllerC1Ev+0x178>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	e9cd 2300 	strd	r2, r3, [sp]
 80091f2:	a319      	add	r3, pc, #100	; (adr r3, 8009258 <_ZN10ControllerC1Ev+0x180>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	4608      	mov	r0, r1
 80091fa:	f003 fa3f 	bl	800c67c <_ZN3lpfC1Eddd>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009204:	4618      	mov	r0, r3
 8009206:	f002 fe2b 	bl	800be60 <_ZN3PIDC1Ev>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009210:	4618      	mov	r0, r3
 8009212:	f002 fe25 	bl	800be60 <_ZN3PIDC1Ev>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800921c:	4618      	mov	r0, r3
 800921e:	f002 fe1f 	bl	800be60 <_ZN3PIDC1Ev>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fe19 	bl	800be60 <_ZN3PIDC1Ev>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8009234:	4618      	mov	r0, r3
 8009236:	f002 fe13 	bl	800be60 <_ZN3PIDC1Ev>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8009240:	4618      	mov	r0, r3
 8009242:	f002 fe0d 	bl	800be60 <_ZN3PIDC1Ev>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	fc3b4f61 	.word	0xfc3b4f61
 8009254:	3fa35935 	.word	0x3fa35935
 8009258:	4f0d844d 	.word	0x4f0d844d
 800925c:	3fed94af 	.word	0x3fed94af
 8009260:	44c1c000 	.word	0x44c1c000
 8009264:	42654ca3 	.word	0x42654ca3
 8009268:	3fb33333 	.word	0x3fb33333
 800926c:	411cf5c3 	.word	0x411cf5c3
 8009270:	41f9d70a 	.word	0x41f9d70a
 8009274:	3ecccccd 	.word	0x3ecccccd
 8009278:	3dcccccd 	.word	0x3dcccccd
 800927c:	3cf5c28f 	.word	0x3cf5c28f
 8009280:	40a00000 	.word	0x40a00000
 8009284:	41100000 	.word	0x41100000
 8009288:	40900000 	.word	0x40900000
 800928c:	40400000 	.word	0x40400000
 8009290:	41200000 	.word	0x41200000
 8009294:	41700000 	.word	0x41700000
 8009298:	bf800000 	.word	0xbf800000

0800929c <_ZN10Controller3RunEv>:

std::vector<float> Controller::Run (void) {
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	b098      	sub	sp, #96	; 0x60
 80092a2:	af04      	add	r7, sp, #16
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	609a      	str	r2, [r3, #8]
        


    int thr;

    switch(mod) {
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8009308:	2b02      	cmp	r3, #2
 800930a:	f000 8145 	beq.w	8009598 <_ZN10Controller3RunEv+0x2fc>
 800930e:	2b02      	cmp	r3, #2
 8009310:	f300 8167 	bgt.w	80095e2 <_ZN10Controller3RunEv+0x346>
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <_ZN10Controller3RunEv+0x82>
 8009318:	2b01      	cmp	r3, #1
 800931a:	d04f      	beq.n	80093bc <_ZN10Controller3RunEv+0x120>
 800931c:	e161      	b.n	80095e2 <_ZN10Controller3RunEv+0x346>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 800932a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800932e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8009332:	f003 f8e5 	bl	800c500 <_ZN3PID3SatEfii>
 8009336:	4603      	mov	r3, r0
 8009338:	4618      	mov	r0, r3
 800933a:	f7f7 fed7 	bl	80010ec <__aeabi_f2iz>
 800933e:	4603      	mov	r3, r0
 8009340:	64fb      	str	r3, [r7, #76]	; 0x4c
            roll_des     = state_des.angles[0];
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8009372:	4619      	mov	r1, r3
 8009374:	4610      	mov	r0, r2
 8009376:	f003 f99c 	bl	800c6b2 <_ZN3lpf3RunEf>
 800937a:	4602      	mov	r2, r0
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f003 f98e 	bl	800c6b2 <_ZN3lpf3RunEf>
 8009396:	4602      	mov	r2, r0
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f003 f980 	bl	800c6b2 <_ZN3lpf3RunEf>
 80093b2:	4602      	mov	r2, r0
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    	    break;
 80093ba:	e112      	b.n	80095e2 <_ZN10Controller3RunEv+0x346>
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f503 7668 	add.w	r6, r3, #928	; 0x3a0
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	f8d3 817c 	ldr.w	r8, [r3, #380]	; 0x17c
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f8d3 9180 	ldr.w	r9, [r3, #384]	; 0x180
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	f8d3 a178 	ldr.w	sl, [r3, #376]	; 0x178
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7f7 fea7 	bl	8001138 <__aeabi_f2uiz>
 80093ea:	4603      	mov	r3, r0
 80093ec:	9302      	str	r3, [sp, #8]
 80093ee:	9501      	str	r5, [sp, #4]
 80093f0:	9400      	str	r4, [sp, #0]
 80093f2:	4653      	mov	r3, sl
 80093f4:	464a      	mov	r2, r9
 80093f6:	4641      	mov	r1, r8
 80093f8:	4630      	mov	r0, r6
 80093fa:	f002 fdc5 	bl	800bf88 <_ZN3PID6PI_VelEfffffj>
 80093fe:	4604      	mov	r4, r0
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7f7 fc92 	bl	8000d34 <__aeabi_fmul>
 8009410:	4603      	mov	r3, r0
 8009412:	4619      	mov	r1, r3
 8009414:	4620      	mov	r0, r4
 8009416:	f7f7 fb85 	bl	8000b24 <__addsf3>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			float deg2rad = 0.0175;
 8009424:	4b5b      	ldr	r3, [pc, #364]	; (8009594 <_ZN10Controller3RunEv+0x2f8>)
 8009426:	64bb      	str	r3, [r7, #72]	; 0x48
			float roll_r = roll * deg2rad;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4619      	mov	r1, r3
 800942e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009430:	f7f7 fc80 	bl	8000d34 <__aeabi_fmul>
 8009434:	4603      	mov	r3, r0
 8009436:	647b      	str	r3, [r7, #68]	; 0x44
			float pitch_r = pitch * deg2rad;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	4619      	mov	r1, r3
 800943e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009440:	f7f7 fc78 	bl	8000d34 <__aeabi_fmul>
 8009444:	4603      	mov	r3, r0
 8009446:	643b      	str	r3, [r7, #64]	; 0x40
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 8009448:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800944a:	f7f8 faf9 	bl	8001a40 <_ZSt3cosf>
 800944e:	4603      	mov	r3, r0
 8009450:	4619      	mov	r1, r3
 8009452:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009456:	f7f7 fd21 	bl	8000e9c <__aeabi_fdiv>
 800945a:	4603      	mov	r3, r0
 800945c:	461c      	mov	r4, r3
 800945e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009460:	f7f8 faee 	bl	8001a40 <_ZSt3cosf>
 8009464:	4603      	mov	r3, r0
 8009466:	4619      	mov	r1, r3
 8009468:	4620      	mov	r0, r4
 800946a:	f7f7 fd17 	bl	8000e9c <__aeabi_fdiv>
 800946e:	4603      	mov	r3, r0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c

			F = F * b2e ; // Body to Earth
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800947a:	4618      	mov	r0, r3
 800947c:	f7f7 fc5a 	bl	8000d34 <__aeabi_fmul>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			F = p_alt.Sat(F, F_max, F_min);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949a:	4618      	mov	r0, r3
 800949c:	f7f7 fe26 	bl	80010ec <__aeabi_f2iz>
 80094a0:	4606      	mov	r6, r0
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f7 fe20 	bl	80010ec <__aeabi_f2iz>
 80094ac:	4603      	mov	r3, r0
 80094ae:	4632      	mov	r2, r6
 80094b0:	4629      	mov	r1, r5
 80094b2:	4620      	mov	r0, r4
 80094b4:	f003 f824 	bl	800c500 <_ZN3PID3SatEfii>
 80094b8:	4602      	mov	r2, r0
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			thr = p_alt.F2thr(F);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	f503 7268 	add.w	r2, r3, #928	; 0x3a0
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f003 f88e 	bl	800c5f0 <_ZN3PID5F2thrEf>
 80094d4:	4603      	mov	r3, r0
 80094d6:	64fb      	str	r3, [r7, #76]	; 0x4c
			thr = p_alt.Sat(thr, 1800, 1100);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 80094de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80094e0:	f7f7 fbd4 	bl	8000c8c <__aeabi_i2f>
 80094e4:	4601      	mov	r1, r0
 80094e6:	f240 434c 	movw	r3, #1100	; 0x44c
 80094ea:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80094ee:	4620      	mov	r0, r4
 80094f0:	f003 f806 	bl	800c500 <_ZN3PID3SatEfii>
 80094f4:	4603      	mov	r3, r0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7f7 fdf8 	bl	80010ec <__aeabi_f2iz>
 80094fc:	4603      	mov	r3, r0
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
			alt_thr = thr;
 8009500:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009502:	f7f7 fbc3 	bl	8000c8c <__aeabi_i2f>
 8009506:	4602      	mov	r2, r0
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
			z0 = p_alt.zi;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f8d3 243c 	ldr.w	r2, [r3, #1084]	; 0x43c
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

            roll_des     = state_des.angles[0];
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 	 = state_des.angles[1];
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des = state_des.rates[2];
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f003 f8b0 	bl	800c6b2 <_ZN3lpf3RunEf>
 8009552:	4602      	mov	r2, r0
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f003 f8a2 	bl	800c6b2 <_ZN3lpf3RunEf>
 800956e:	4602      	mov	r2, r0
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f003 f894 	bl	800c6b2 <_ZN3lpf3RunEf>
 800958a:	4602      	mov	r2, r0
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
			break;
 8009592:	e026      	b.n	80095e2 <_ZN10Controller3RunEv+0x346>
 8009594:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);
    		pitch_des = p_velx.PI_Vel(0, x, vx, Kp_vel, Ki_vel, ch2);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f503 6689 	add.w	r6, r3, #1096	; 0x448
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f8d3 8190 	ldr.w	r8, [r3, #400]	; 0x190
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f8d3 9188 	ldr.w	r9, [r3, #392]	; 0x188
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80095bc:	4618      	mov	r0, r3
 80095be:	f7f7 fdbb 	bl	8001138 <__aeabi_f2uiz>
 80095c2:	4603      	mov	r3, r0
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	9501      	str	r5, [sp, #4]
 80095c8:	9400      	str	r4, [sp, #0]
 80095ca:	464b      	mov	r3, r9
 80095cc:	4642      	mov	r2, r8
 80095ce:	f04f 0100 	mov.w	r1, #0
 80095d2:	4630      	mov	r0, r6
 80095d4:	f002 fcd8 	bl	800bf88 <_ZN3PID6PI_VelEfffffj>
 80095d8:	4602      	mov	r2, r0
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    		break;
 80095e0:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4623      	mov	r3, r4
 80095fe:	f002 fc85 	bl	800bf0c <_ZN3PID7P_AngleEffff>
 8009602:	4602      	mov	r2, r0
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f7f7 fa89 	bl	8000b24 <__addsf3>
 8009612:	4603      	mov	r3, r0
 8009614:	461a      	mov	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4623      	mov	r3, r4
 8009638:	f002 fc68 	bl	800bf0c <_ZN3PID7P_AngleEffff>
 800963c:	4602      	mov	r2, r0
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7f7 fa6c 	bl	8000b24 <__addsf3>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f002 fceb 	bl	800c040 <_ZN3PID6RateFFEf>
 800966a:	63b8      	str	r0, [r7, #56]	; 0x38
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f002 fce0 	bl	800c040 <_ZN3PID6RateFFEf>
 8009680:	6378      	str	r0, [r7, #52]	; 0x34

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle) + pd_roll_ff;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	699e      	ldr	r6, [r3, #24]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80096a4:	6838      	ldr	r0, [r7, #0]
 80096a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80096a8:	9003      	str	r0, [sp, #12]
 80096aa:	9102      	str	r1, [sp, #8]
 80096ac:	9201      	str	r2, [sp, #4]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4663      	mov	r3, ip
 80096b2:	4632      	mov	r2, r6
 80096b4:	4629      	mov	r1, r5
 80096b6:	4620      	mov	r0, r4
 80096b8:	f002 fd12 	bl	800c0e0 <_ZN3PID9PID_Rate2Efffffff>
 80096bc:	4603      	mov	r3, r0
 80096be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7f7 fa2f 	bl	8000b24 <__addsf3>
 80096c6:	4603      	mov	r3, r0
 80096c8:	461a      	mov	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle) + pd_pitch_ff;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	f8d3 5128 	ldr.w	r5, [r3, #296]	; 0x128
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	69de      	ldr	r6, [r3, #28]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80096f2:	6838      	ldr	r0, [r7, #0]
 80096f4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80096f6:	9003      	str	r0, [sp, #12]
 80096f8:	9102      	str	r1, [sp, #8]
 80096fa:	9201      	str	r2, [sp, #4]
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	4663      	mov	r3, ip
 8009700:	4632      	mov	r2, r6
 8009702:	4629      	mov	r1, r5
 8009704:	4620      	mov	r0, r4
 8009706:	f002 fceb 	bl	800c0e0 <_ZN3PID9PID_Rate2Efffffff>
 800970a:	4603      	mov	r3, r0
 800970c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800970e:	4618      	mov	r0, r3
 8009710:	f7f7 fa08 	bl	8000b24 <__addsf3>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	6a1a      	ldr	r2, [r3, #32]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009736:	f04f 0500 	mov.w	r5, #0
 800973a:	9501      	str	r5, [sp, #4]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4623      	mov	r3, r4
 8009740:	f002 fd82 	bl	800c248 <_ZN3PID7PD_RateEfffff>
 8009744:	4602      	mov	r2, r0
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120



    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800974c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800974e:	f7f7 fa9d 	bl	8000c8c <__aeabi_i2f>
 8009752:	4602      	mov	r2, r0
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7f7 f9e1 	bl	8000b24 <__addsf3>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f7f7 f9d6 	bl	8000b20 <__aeabi_fsub>
 8009774:	4603      	mov	r3, r0
 8009776:	461a      	mov	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7f7 f9cd 	bl	8000b20 <__aeabi_fsub>
 8009786:	4603      	mov	r3, r0
 8009788:	49ac      	ldr	r1, [pc, #688]	; (8009a3c <_ZN10Controller3RunEv+0x7a0>)
 800978a:	4618      	mov	r0, r3
 800978c:	f7f7 f9ca 	bl	8000b24 <__addsf3>
 8009790:	4603      	mov	r3, r0
 8009792:	49ab      	ldr	r1, [pc, #684]	; (8009a40 <_ZN10Controller3RunEv+0x7a4>)
 8009794:	4618      	mov	r0, r3
 8009796:	f7f7 f9c5 	bl	8000b24 <__addsf3>
 800979a:	4603      	mov	r3, r0
 800979c:	4618      	mov	r0, r3
 800979e:	f7f7 fca5 	bl	80010ec <__aeabi_f2iz>
 80097a2:	4603      	mov	r3, r0
 80097a4:	633b      	str	r3, [r7, #48]	; 0x30
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 80097a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80097a8:	f7f7 fa70 	bl	8000c8c <__aeabi_i2f>
 80097ac:	4602      	mov	r2, r0
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80097b4:	4619      	mov	r1, r3
 80097b6:	4610      	mov	r0, r2
 80097b8:	f7f7 f9b2 	bl	8000b20 <__aeabi_fsub>
 80097bc:	4603      	mov	r3, r0
 80097be:	461a      	mov	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7f7 f9ab 	bl	8000b24 <__addsf3>
 80097ce:	4603      	mov	r3, r0
 80097d0:	461a      	mov	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7f7 f9a0 	bl	8000b20 <__aeabi_fsub>
 80097e0:	4603      	mov	r3, r0
 80097e2:	4996      	ldr	r1, [pc, #600]	; (8009a3c <_ZN10Controller3RunEv+0x7a0>)
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f7 f99b 	bl	8000b20 <__aeabi_fsub>
 80097ea:	4603      	mov	r3, r0
 80097ec:	4994      	ldr	r1, [pc, #592]	; (8009a40 <_ZN10Controller3RunEv+0x7a4>)
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f7 f996 	bl	8000b20 <__aeabi_fsub>
 80097f4:	4603      	mov	r3, r0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f7 fc78 	bl	80010ec <__aeabi_f2iz>
 80097fc:	4603      	mov	r3, r0
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8009800:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009802:	f7f7 fa43 	bl	8000c8c <__aeabi_i2f>
 8009806:	4602      	mov	r2, r0
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f7f7 f987 	bl	8000b24 <__addsf3>
 8009816:	4603      	mov	r3, r0
 8009818:	461a      	mov	r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7f7 f97e 	bl	8000b24 <__addsf3>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7f7 f975 	bl	8000b24 <__addsf3>
 800983a:	4603      	mov	r3, r0
 800983c:	497f      	ldr	r1, [pc, #508]	; (8009a3c <_ZN10Controller3RunEv+0x7a0>)
 800983e:	4618      	mov	r0, r3
 8009840:	f7f7 f970 	bl	8000b24 <__addsf3>
 8009844:	4603      	mov	r3, r0
 8009846:	497e      	ldr	r1, [pc, #504]	; (8009a40 <_ZN10Controller3RunEv+0x7a4>)
 8009848:	4618      	mov	r0, r3
 800984a:	f7f7 f969 	bl	8000b20 <__aeabi_fsub>
 800984e:	4603      	mov	r3, r0
 8009850:	4618      	mov	r0, r3
 8009852:	f7f7 fc4b 	bl	80010ec <__aeabi_f2iz>
 8009856:	4603      	mov	r3, r0
 8009858:	62bb      	str	r3, [r7, #40]	; 0x28
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800985a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800985c:	f7f7 fa16 	bl	8000c8c <__aeabi_i2f>
 8009860:	4602      	mov	r2, r0
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7f7 f958 	bl	8000b20 <__aeabi_fsub>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800987a:	4619      	mov	r1, r3
 800987c:	4610      	mov	r0, r2
 800987e:	f7f7 f94f 	bl	8000b20 <__aeabi_fsub>
 8009882:	4603      	mov	r3, r0
 8009884:	461a      	mov	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7f7 f948 	bl	8000b24 <__addsf3>
 8009894:	4603      	mov	r3, r0
 8009896:	4969      	ldr	r1, [pc, #420]	; (8009a3c <_ZN10Controller3RunEv+0x7a0>)
 8009898:	4618      	mov	r0, r3
 800989a:	f7f7 f941 	bl	8000b20 <__aeabi_fsub>
 800989e:	4603      	mov	r3, r0
 80098a0:	4967      	ldr	r1, [pc, #412]	; (8009a40 <_ZN10Controller3RunEv+0x7a4>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f7 f93e 	bl	8000b24 <__addsf3>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f7 fc1e 	bl	80010ec <__aeabi_f2iz>
 80098b0:	4603      	mov	r3, r0
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80098ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098bc:	f7f7 f9e6 	bl	8000c8c <__aeabi_i2f>
 80098c0:	4601      	mov	r1, r0
 80098c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f240 434c 	movw	r3, #1100	; 0x44c
 80098ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098ce:	4620      	mov	r0, r4
 80098d0:	f002 fddc 	bl	800c48c <_ZN3PID3SatEfiii>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f7 fc08 	bl	80010ec <__aeabi_f2iz>
 80098dc:	4603      	mov	r3, r0
 80098de:	633b      	str	r3, [r7, #48]	; 0x30
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80098e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e8:	f7f7 f9d0 	bl	8000c8c <__aeabi_i2f>
 80098ec:	4601      	mov	r1, r0
 80098ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	f240 434c 	movw	r3, #1100	; 0x44c
 80098f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098fa:	4620      	mov	r0, r4
 80098fc:	f002 fdc6 	bl	800c48c <_ZN3PID3SatEfiii>
 8009900:	4603      	mov	r3, r0
 8009902:	4618      	mov	r0, r3
 8009904:	f7f7 fbf2 	bl	80010ec <__aeabi_f2iz>
 8009908:	4603      	mov	r3, r0
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8009912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009914:	f7f7 f9ba 	bl	8000c8c <__aeabi_i2f>
 8009918:	4601      	mov	r1, r0
 800991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	f240 434c 	movw	r3, #1100	; 0x44c
 8009922:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009926:	4620      	mov	r0, r4
 8009928:	f002 fdb0 	bl	800c48c <_ZN3PID3SatEfiii>
 800992c:	4603      	mov	r3, r0
 800992e:	4618      	mov	r0, r3
 8009930:	f7f7 fbdc 	bl	80010ec <__aeabi_f2iz>
 8009934:	4603      	mov	r3, r0
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800993e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009940:	f7f7 f9a4 	bl	8000c8c <__aeabi_i2f>
 8009944:	4601      	mov	r1, r0
 8009946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	f240 434c 	movw	r3, #1100	; 0x44c
 800994e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009952:	4620      	mov	r0, r4
 8009954:	f002 fd9a 	bl	800c48c <_ZN3PID3SatEfiii>
 8009958:	4603      	mov	r3, r0
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 fbc6 	bl	80010ec <__aeabi_f2iz>
 8009960:	4603      	mov	r3, r0
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
    pwm2 = 1000;
    pwm3 = 1000;
    pwm4 = 1000;
*/
    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800996a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996c:	b291      	uxth	r1, r2
 800996e:	2201      	movs	r2, #1
 8009970:	4618      	mov	r0, r3
 8009972:	f002 fdf5 	bl	800c560 <_ZN3PID7pwm2motEti>
 8009976:	4602      	mov	r2, r0
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	625a      	str	r2, [r3, #36]	; 0x24
    w2 = pid_roll.pwm2mot(pwm2, 1);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	b291      	uxth	r1, r2
 8009986:	2201      	movs	r2, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f002 fde9 	bl	800c560 <_ZN3PID7pwm2motEti>
 800998e:	4602      	mov	r2, r0
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	629a      	str	r2, [r3, #40]	; 0x28
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800999a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999c:	b291      	uxth	r1, r2
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	4618      	mov	r0, r3
 80099a4:	f002 fddc 	bl	800c560 <_ZN3PID7pwm2motEti>
 80099a8:	4602      	mov	r2, r0
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	62da      	str	r2, [r3, #44]	; 0x2c
    w4 = pid_roll.pwm2mot(pwm4,-1);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	b291      	uxth	r1, r2
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295
 80099bc:	4618      	mov	r0, r3
 80099be:	f002 fdcf 	bl	800c560 <_ZN3PID7pwm2motEti>
 80099c2:	4602      	mov	r2, r0
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30


    std::vector<float> controller_output = 	{w1,w2,w3,w4};
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	2304      	movs	r3, #4
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	f107 0320 	add.w	r3, r7, #32
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fa f9d0 	bl	8003d94 <_ZNSaIfEC1Ev>
 80099f4:	f107 0320 	add.w	r3, r7, #32
 80099f8:	f107 0208 	add.w	r2, r7, #8
 80099fc:	ca06      	ldmia	r2, {r1, r2}
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f85c 	bl	8009abc <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8009a04:	f107 0320 	add.w	r3, r7, #32
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fa f96e 	bl	8003cea <_ZNSaIfED1Ev>
    controller_output_pwm[0] = pwm1;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    controller_output_pwm[1] = pwm2;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    controller_output_pwm[2] = pwm3;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    controller_output_pwm[3] = pwm4;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    return controller_output;
 8009a2e:	bf00      	nop
}
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	3750      	adds	r7, #80	; 0x50
 8009a34:	46bd      	mov	sp, r7
 8009a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3a:	bf00      	nop
 8009a3c:	41880000 	.word	0x41880000
 8009a40:	40e00000 	.word	0x40e00000

08009a44 <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

    return controller_output;
}
*/
Controller::~Controller() {}
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f002 fe04 	bl	800c660 <_ZN3PIDD1Ev>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f002 fdfe 	bl	800c660 <_ZN3PIDD1Ev>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 fdf8 	bl	800c660 <_ZN3PIDD1Ev>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8009a76:	4618      	mov	r0, r3
 8009a78:	f002 fdf2 	bl	800c660 <_ZN3PIDD1Ev>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 fdec 	bl	800c660 <_ZN3PIDD1Ev>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 fde6 	bl	800c660 <_ZN3PIDD1Ev>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	33e0      	adds	r3, #224	; 0xe0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 fe60 	bl	800c75e <_ZN3lpfD1Ev>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	33b8      	adds	r3, #184	; 0xb8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f002 fe5b 	bl	800c75e <_ZN3lpfD1Ev>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3390      	adds	r3, #144	; 0x90
 8009aac:	4618      	mov	r0, r3
 8009aae:	f002 fe56 	bl	800c75e <_ZN3lpfD1Ev>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8009abc:	b5b0      	push	{r4, r5, r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	1d38      	adds	r0, r7, #4
 8009ac6:	e880 0006 	stmia.w	r0, {r1, r2}
 8009aca:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fa fa9c 	bl	800400e <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8009ad6:	1d3b      	adds	r3, r7, #4
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f810 	bl	8009afe <_ZNKSt16initializer_listIfE5beginEv>
 8009ade:	4604      	mov	r4, r0
 8009ae0:	1d3b      	adds	r3, r7, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f816 	bl	8009b14 <_ZNKSt16initializer_listIfE3endEv>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	462b      	mov	r3, r5
 8009aec:	4621      	mov	r1, r4
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 f822 	bl	8009b38 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bdb0      	pop	{r4, r5, r7, pc}

08009afe <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bc80      	pop	{r7}
 8009b12:	4770      	bx	lr

08009b14 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff ffee 	bl	8009afe <_ZNKSt16initializer_listIfE5beginEv>
 8009b22:	4604      	mov	r4, r0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f840 	bl	8009baa <_ZNKSt16initializer_listIfE4sizeEv>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4423      	add	r3, r4
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd90      	pop	{r4, r7, pc}

08009b38 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8009b38:	b590      	push	{r4, r7, lr}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	68b8      	ldr	r0, [r7, #8]
 8009b4a:	f000 f839 	bl	8009bc0 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8009b52:	68fc      	ldr	r4, [r7, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fa f958 	bl	8003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f000 f841 	bl	8009be8 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8009b66:	4603      	mov	r3, r0
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 f864 	bl	8009c38 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8009b70:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	441a      	add	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fa f93e 	bl	8003e0c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009b90:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8009b92:	4622      	mov	r2, r4
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	68b8      	ldr	r0, [r7, #8]
 8009b98:	f000 f862 	bl	8009c60 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8009b9c:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	605a      	str	r2, [r3, #4]
	}
 8009ba2:	bf00      	nop
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd90      	pop	{r4, r7, pc}

08009baa <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bc80      	pop	{r7}
 8009bbe:	4770      	bx	lr

08009bc0 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009bc0:	b5b0      	push	{r4, r5, r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8009bca:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009bcc:	1d3b      	adds	r3, r7, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f857 	bl	8009c82 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 f85b 	bl	8009c94 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8009bde:	4603      	mov	r3, r0
    }
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bdb0      	pop	{r4, r5, r7, pc}

08009be8 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8009bf2:	f107 030c 	add.w	r3, r7, #12
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa f9fa 	bl	8003ff2 <_ZNSaIfEC1ERKS_>
 8009bfe:	f107 030c 	add.w	r3, r7, #12
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f855 	bl	8009cb2 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bf8c      	ite	hi
 8009c10:	2301      	movhi	r3, #1
 8009c12:	2300      	movls	r3, #0
 8009c14:	b2dc      	uxtb	r4, r3
 8009c16:	f107 030c 	add.w	r3, r7, #12
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fa f865 	bl	8003cea <_ZNSaIfED1Ev>
 8009c20:	2c00      	cmp	r4, #0
 8009c22:	d002      	beq.n	8009c2a <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8009c24:	4803      	ldr	r0, [pc, #12]	; (8009c34 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8009c26:	f002 fdba 	bl	800c79e <_ZSt20__throw_length_errorPKc>
	return __n;
 8009c2a:	687b      	ldr	r3, [r7, #4]
      }
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd90      	pop	{r4, r7, pc}
 8009c34:	0800ed4c 	.word	0x0800ed4c

08009c38 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d006      	beq.n	8009c56 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 f84a 	bl	8009ce6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8009c52:	4603      	mov	r3, r0
 8009c54:	e000      	b.n	8009c58 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8009c56:	2300      	movs	r3, #0
      }
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 f846 	bl	8009d04 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bc80      	pop	{r7}
 8009c92:	4770      	bx	lr

08009c94 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	109b      	asrs	r3, r3, #2
    }
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr

08009cb2 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009cba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009cbe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f831 	bl	8009d28 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009cca:	f107 0208 	add.w	r2, r7, #8
 8009cce:	f107 030c 	add.w	r3, r7, #12
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 f833 	bl	8009d40 <_ZSt3minIjERKT_S2_S2_>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	681b      	ldr	r3, [r3, #0]
      }
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f836 	bl	8009d66 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009d10:	2301      	movs	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f000 f842 	bl	8009da2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8009d1e:	4603      	mov	r3, r0
    }
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f846 	bl	8009dc2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8009d36:	4603      	mov	r3, r0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d201      	bcs.n	8009d5a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	e000      	b.n	8009d5c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8009d5a:	687b      	ldr	r3, [r7, #4]
    }
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr

08009d66 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f825 	bl	8009dc2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bf8c      	ite	hi
 8009d80:	2301      	movhi	r3, #1
 8009d82:	2300      	movls	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009d8a:	f002 fd05 	bl	800c798 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f002 fcef 	bl	800c776 <_Znwj>
 8009d98:	4603      	mov	r3, r0
      }
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f810 	bl	8009dd8 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8009db8:	4603      	mov	r3, r0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009dca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f80f 	bl	8009e08 <_ZSt12__miter_baseIPKfET_S2_>
 8009dea:	4604      	mov	r4, r0
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	f000 f80b 	bl	8009e08 <_ZSt12__miter_baseIPKfET_S2_>
 8009df2:	4603      	mov	r3, r0
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	4619      	mov	r1, r3
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 f80f 	bl	8009e1c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8009dfe:	4603      	mov	r3, r0
    }
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd90      	pop	{r4, r7, pc}

08009e08 <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bc80      	pop	{r7}
 8009e1a:	4770      	bx	lr

08009e1c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009e1c:	b5b0      	push	{r4, r5, r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f81a 	bl	8009e62 <_ZSt12__niter_baseIPKfET_S2_>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	68b8      	ldr	r0, [r7, #8]
 8009e32:	f000 f816 	bl	8009e62 <_ZSt12__niter_baseIPKfET_S2_>
 8009e36:	4605      	mov	r5, r0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f81b 	bl	8009e76 <_ZSt12__niter_baseIPfET_S1_>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	4629      	mov	r1, r5
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 f81f 	bl	8009e8a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	1d3b      	adds	r3, r7, #4
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f82b 	bl	8009eae <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8009e58:	4603      	mov	r3, r0
    }
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bdb0      	pop	{r4, r5, r7, pc}

08009e62 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bc80      	pop	{r7}
 8009e74:	4770      	bx	lr

08009e76 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr

08009e8a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b086      	sub	sp, #24
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8009e96:	2301      	movs	r3, #1
 8009e98:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 f810 	bl	8009ec4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8009ea4:	4603      	mov	r3, r0
    }
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	109b      	asrs	r3, r3, #2
 8009ed8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68f9      	ldr	r1, [r7, #12]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f004 fded 	bl	800eac8 <memmove>
	  return __result + _Num;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
	}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af04      	add	r7, sp, #16
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f04f 0200 	mov.w	r2, #0
 8009f0e:	619a      	str	r2, [r3, #24]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	61da      	str	r2, [r3, #28]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	621a      	str	r2, [r3, #32]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a59      	ldr	r2, [pc, #356]	; (800a088 <_ZN15Kalman_FiltresiC1Ev+0x188>)
 8009f24:	63da      	str	r2, [r3, #60]	; 0x3c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a58      	ldr	r2, [pc, #352]	; (800a08c <_ZN15Kalman_FiltresiC1Ev+0x18c>)
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f04f 0200 	mov.w	r2, #0
 8009f32:	645a      	str	r2, [r3, #68]	; 0x44
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f04f 0200 	mov.w	r2, #0
 8009f3a:	649a      	str	r2, [r3, #72]	; 0x48
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	64da      	str	r2, [r3, #76]	; 0x4c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a52      	ldr	r2, [pc, #328]	; (800a090 <_ZN15Kalman_FiltresiC1Ev+0x190>)
 8009f48:	669a      	str	r2, [r3, #104]	; 0x68
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	671a      	str	r2, [r3, #112]	; 0x70
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a4d      	ldr	r2, [pc, #308]	; (800a094 <_ZN15Kalman_FiltresiC1Ev+0x194>)
 8009f5e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a4c      	ldr	r2, [pc, #304]	; (800a098 <_ZN15Kalman_FiltresiC1Ev+0x198>)
 8009f66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a4b      	ldr	r2, [pc, #300]	; (800a09c <_ZN15Kalman_FiltresiC1Ev+0x19c>)
 8009f6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a48      	ldr	r2, [pc, #288]	; (800a0a0 <_ZN15Kalman_FiltresiC1Ev+0x1a0>)
 8009f80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a47      	ldr	r2, [pc, #284]	; (800a0a4 <_ZN15Kalman_FiltresiC1Ev+0x1a4>)
 8009f88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a43      	ldr	r2, [pc, #268]	; (800a0a8 <_ZN15Kalman_FiltresiC1Ev+0x1a8>)
 8009f9a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009fa4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f6 fe6c 	bl	8000c8c <__aeabi_i2f>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009fbc:	f7f6 ff6e 	bl	8000e9c <__aeabi_fdiv>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f6 fa28 	bl	8000418 <__aeabi_f2d>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a35      	ldr	r2, [pc, #212]	; (800a0ac <_ZN15Kalman_FiltresiC1Ev+0x1ac>)
 8009fd6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a34      	ldr	r2, [pc, #208]	; (800a0b0 <_ZN15Kalman_FiltresiC1Ev+0x1b0>)
 8009fde:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8009fe8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a31      	ldr	r2, [pc, #196]	; (800a0b4 <_ZN15Kalman_FiltresiC1Ev+0x1b4>)
 8009ff0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009ffa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a2d      	ldr	r2, [pc, #180]	; (800a0b8 <_ZN15Kalman_FiltresiC1Ev+0x1b8>)
 800a002:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a2c      	ldr	r2, [pc, #176]	; (800a0bc <_ZN15Kalman_FiltresiC1Ev+0x1bc>)
 800a00a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800a014:	a314      	add	r3, pc, #80	; (adr r3, 800a068 <_ZN15Kalman_FiltresiC1Ev+0x168>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a01e:	a312      	add	r3, pc, #72	; (adr r3, 800a068 <_ZN15Kalman_FiltresiC1Ev+0x168>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	e9cd 2300 	strd	r2, r3, [sp]
 800a028:	a311      	add	r3, pc, #68	; (adr r3, 800a070 <_ZN15Kalman_FiltresiC1Ev+0x170>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	4608      	mov	r0, r1
 800a030:	f002 fb24 	bl	800c67c <_ZN3lpfC1Eddd>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 800a03a:	a30f      	add	r3, pc, #60	; (adr r3, 800a078 <_ZN15Kalman_FiltresiC1Ev+0x178>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a044:	a30c      	add	r3, pc, #48	; (adr r3, 800a078 <_ZN15Kalman_FiltresiC1Ev+0x178>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	e9cd 2300 	strd	r2, r3, [sp]
 800a04e:	a30c      	add	r3, pc, #48	; (adr r3, 800a080 <_ZN15Kalman_FiltresiC1Ev+0x180>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	4608      	mov	r0, r1
 800a056:	f002 fb11 	bl	800c67c <_ZN3lpfC1Eddd>

}
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	f3af 8000 	nop.w
 800a068:	de7ea5f8 	.word	0xde7ea5f8
 800a06c:	3fb2a454 	.word	0x3fb2a454
 800a070:	ab367a10 	.word	0xab367a10
 800a074:	3feb573e 	.word	0x3feb573e
 800a078:	fc3b4f61 	.word	0xfc3b4f61
 800a07c:	3fa35935 	.word	0x3fa35935
 800a080:	4f0d844d 	.word	0x4f0d844d
 800a084:	3fed94af 	.word	0x3fed94af
 800a088:	358637bd 	.word	0x358637bd
 800a08c:	3d8f5c29 	.word	0x3d8f5c29
 800a090:	47c35000 	.word	0x47c35000
 800a094:	461c4000 	.word	0x461c4000
 800a098:	41200000 	.word	0x41200000
 800a09c:	4b189680 	.word	0x4b189680
 800a0a0:	40a00000 	.word	0x40a00000
 800a0a4:	42480000 	.word	0x42480000
 800a0a8:	42654ca3 	.word	0x42654ca3
 800a0ac:	3727c5ac 	.word	0x3727c5ac
 800a0b0:	47435000 	.word	0x47435000
 800a0b4:	3cdd2f1b 	.word	0x3cdd2f1b
 800a0b8:	c03f433f 	.word	0xc03f433f
 800a0bc:	4034b6a2 	.word	0x4034b6a2

0800a0c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800a0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c4:	b09e      	sub	sp, #120	; 0x78
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a0dc:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800a0fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a100:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a102:	f7f6 fe17 	bl	8000d34 <__aeabi_fmul>
 800a106:	4603      	mov	r3, r0
 800a108:	461c      	mov	r4, r3
 800a10a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a10c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a10e:	f7f6 fe11 	bl	8000d34 <__aeabi_fmul>
 800a112:	4603      	mov	r3, r0
 800a114:	4619      	mov	r1, r3
 800a116:	4620      	mov	r0, r4
 800a118:	f7f6 fd04 	bl	8000b24 <__addsf3>
 800a11c:	4603      	mov	r3, r0
 800a11e:	461c      	mov	r4, r3
 800a120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a122:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a124:	f7f6 fe06 	bl	8000d34 <__aeabi_fmul>
 800a128:	4603      	mov	r3, r0
 800a12a:	4619      	mov	r1, r3
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7f6 fcf9 	bl	8000b24 <__addsf3>
 800a132:	4603      	mov	r3, r0
 800a134:	4618      	mov	r0, r3
 800a136:	f7f7 fc9b 	bl	8001a70 <_ZSt4sqrtf>
 800a13a:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800a13c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a13e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a140:	f7f6 feac 	bl	8000e9c <__aeabi_fdiv>
 800a144:	4603      	mov	r3, r0
 800a146:	4618      	mov	r0, r3
 800a148:	f7f7 fc54 	bl	80019f4 <_ZSt4asinf>
 800a14c:	4602      	mov	r2, r0
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7f6 fdec 	bl	8000d34 <__aeabi_fmul>
 800a15c:	4603      	mov	r3, r0
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a166:	4619      	mov	r1, r3
 800a168:	4610      	mov	r0, r2
 800a16a:	f7f6 fcdb 	bl	8000b24 <__addsf3>
 800a16e:	4603      	mov	r3, r0
 800a170:	461a      	mov	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800a178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a17a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a17c:	f7f6 fe8e 	bl	8000e9c <__aeabi_fdiv>
 800a180:	4603      	mov	r3, r0
 800a182:	4618      	mov	r0, r3
 800a184:	f7f7 fc36 	bl	80019f4 <_ZSt4asinf>
 800a188:	4602      	mov	r2, r0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7f6 fdce 	bl	8000d34 <__aeabi_fmul>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f7f6 fcbd 	bl	8000b24 <__addsf3>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d07e      	beq.n	800a2b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f8>
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	f300 80be 	bgt.w	800a33c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10a>
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d038      	beq.n	800a23a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x17a>
 800a1c8:	e0b8      	b.n	800a33c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
		case ROLL:
			angle_ekf = roll_ekf;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a1d0:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a1de:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a1e6:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a2f      	ldr	r2, [pc, #188]	; (800a2ac <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800a1f0:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a2e      	ldr	r2, [pc, #184]	; (800a2b0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800a1f6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800a1fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_roll;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20c:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a218:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a21e:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a224:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22a:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a230:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a236:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a238:	e080      	b.n	800a33c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>

		case PITCH:
			angle_ekf = pitch_ekf;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a240:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a24e:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a256:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-6;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ec>)
 800a260:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e4;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a12      	ldr	r2, [pc, #72]	; (800a2b0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f0>)
 800a266:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a11      	ldr	r2, [pc, #68]	; (800a2b4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1f4>)
 800a26e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_pitch;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29a:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a0:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a2a8:	e048      	b.n	800a33c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a2aa:	bf00      	nop
 800a2ac:	358637bd 	.word	0x358637bd
 800a2b0:	47435000 	.word	0x47435000
 800a2b4:	41200000 	.word	0x41200000

		case YAW:
			angle_ekf = yaw_ekf;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a2be:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800a2cc:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a2d4:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a14      	ldr	r2, [pc, #80]	; (800a330 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x270>)
 800a2de:	63da      	str	r2, [r3, #60]	; 0x3c
			Qa = 5e7;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a14      	ldr	r2, [pc, #80]	; (800a334 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800a2e4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			Qg = 1e1;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a13      	ldr	r2, [pc, #76]	; (800a338 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800a2ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

			S11_angle = S11_yaw;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f4:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a300:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a30c:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a312:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a31a:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a322:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32a:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800a32c:	bf00      	nop
 800a32e:	e005      	b.n	800a33c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>
 800a330:	43fa0000 	.word	0x43fa0000
 800a334:	4c3ebc20 	.word	0x4c3ebc20
 800a338:	41200000 	.word	0x41200000

	}


    angle_ekf = (angle_ekf) + st*(angle_rate);
 800a33c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a33e:	f7f6 f86b 	bl	8000418 <__aeabi_f2d>
 800a342:	4680      	mov	r8, r0
 800a344:	4689      	mov	r9, r1
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800a34c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a34e:	f7f6 f863 	bl	8000418 <__aeabi_f2d>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f6 f8b5 	bl	80004c8 <__aeabi_dmul>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f7f5 fef9 	bl	800015c <__adddf3>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	f7f6 fb81 	bl	8000a78 <__aeabi_d2f>
 800a376:	4603      	mov	r3, r0
 800a378:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st + (st*st*(S13_angle + S33_angle*st))/st;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a380:	4618      	mov	r0, r3
 800a382:	f7f6 fbcf 	bl	8000b24 <__addsf3>
 800a386:	4603      	mov	r3, r0
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f6 f845 	bl	8000418 <__aeabi_f2d>
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a394:	f7f6 f840 	bl	8000418 <__aeabi_f2d>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a39e:	f7f6 f893 	bl	80004c8 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 fed7 	bl	800015c <__adddf3>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4690      	mov	r8, r2
 800a3b4:	4699      	mov	r9, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a3c2:	f7f6 f881 	bl	80004c8 <__aeabi_dmul>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4692      	mov	sl, r2
 800a3cc:	469b      	mov	fp, r3
 800a3ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a3d0:	f7f6 f822 	bl	8000418 <__aeabi_f2d>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a3da:	f7f6 f81d 	bl	8000418 <__aeabi_f2d>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a3e4:	f7f6 f870 	bl	80004c8 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	f7f5 feb4 	bl	800015c <__adddf3>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	4659      	mov	r1, fp
 800a3fc:	f7f6 f864 	bl	80004c8 <__aeabi_dmul>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4610      	mov	r0, r2
 800a406:	4619      	mov	r1, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a40e:	f7f6 f985 	bl	800071c <__aeabi_ddiv>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f5 fe9f 	bl	800015c <__adddf3>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4610      	mov	r0, r2
 800a424:	4619      	mov	r1, r3
 800a426:	f7f6 fb27 	bl	8000a78 <__aeabi_d2f>
 800a42a:	4603      	mov	r3, r0
 800a42c:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle + S32_angle*st;
 800a42e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a430:	f7f5 fff2 	bl	8000418 <__aeabi_f2d>
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a43a:	f7f5 ffed 	bl	8000418 <__aeabi_f2d>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a444:	f7f6 f840 	bl	80004c8 <__aeabi_dmul>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 fe84 	bl	800015c <__adddf3>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4610      	mov	r0, r2
 800a45a:	4619      	mov	r1, r3
 800a45c:	f7f6 fb0c 	bl	8000a78 <__aeabi_d2f>
 800a460:	4603      	mov	r3, r0
 800a462:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle + S33_angle*st;
 800a464:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a466:	f7f5 ffd7 	bl	8000418 <__aeabi_f2d>
 800a46a:	4604      	mov	r4, r0
 800a46c:	460d      	mov	r5, r1
 800a46e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a470:	f7f5 ffd2 	bl	8000418 <__aeabi_f2d>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a47a:	f7f6 f825 	bl	80004c8 <__aeabi_dmul>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	f7f5 fe69 	bl	800015c <__adddf3>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4610      	mov	r0, r2
 800a490:	4619      	mov	r1, r3
 800a492:	f7f6 faf1 	bl	8000a78 <__aeabi_d2f>
 800a496:	4603      	mov	r3, r0
 800a498:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle + S23_angle*(st);
 800a49a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a49c:	f7f5 ffbc 	bl	8000418 <__aeabi_f2d>
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a4a6:	f7f5 ffb7 	bl	8000418 <__aeabi_f2d>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a4b0:	f7f6 f80a 	bl	80004c8 <__aeabi_dmul>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f5 fe4e 	bl	800015c <__adddf3>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f7f6 fad6 	bl	8000a78 <__aeabi_d2f>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a4da:	f7f6 fb23 	bl	8000b24 <__addsf3>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle + S33_angle*(st);
 800a4e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a4e4:	f7f5 ff98 	bl	8000418 <__aeabi_f2d>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a4ee:	f7f5 ff93 	bl	8000418 <__aeabi_f2d>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800a4f8:	f7f5 ffe6 	bl	80004c8 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4620      	mov	r0, r4
 800a502:	4629      	mov	r1, r5
 800a504:	f7f5 fe2a 	bl	800015c <__adddf3>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4610      	mov	r0, r2
 800a50e:	4619      	mov	r1, r3
 800a510:	f7f6 fab2 	bl	8000a78 <__aeabi_d2f>
 800a514:	4603      	mov	r3, r0
 800a516:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	4619      	mov	r1, r3
 800a51e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a520:	f7f6 fb00 	bl	8000b24 <__addsf3>
 800a524:	4603      	mov	r3, r0
 800a526:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7f6 fbfc 	bl	8000d34 <__aeabi_fmul>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461c      	mov	r4, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a548:	4618      	mov	r0, r3
 800a54a:	f7f6 fbf3 	bl	8000d34 <__aeabi_fmul>
 800a54e:	4603      	mov	r3, r0
 800a550:	4619      	mov	r1, r3
 800a552:	4620      	mov	r0, r4
 800a554:	f7f6 fae6 	bl	8000b24 <__addsf3>
 800a558:	4603      	mov	r3, r0
 800a55a:	461c      	mov	r4, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a562:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a564:	4618      	mov	r0, r3
 800a566:	f7f6 fbe5 	bl	8000d34 <__aeabi_fmul>
 800a56a:	4603      	mov	r3, r0
 800a56c:	4619      	mov	r1, r3
 800a56e:	4620      	mov	r0, r4
 800a570:	f7f6 fad8 	bl	8000b24 <__addsf3>
 800a574:	4603      	mov	r3, r0
 800a576:	461c      	mov	r4, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a57e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a580:	4618      	mov	r0, r3
 800a582:	f7f6 fbd7 	bl	8000d34 <__aeabi_fmul>
 800a586:	4603      	mov	r3, r0
 800a588:	4619      	mov	r1, r3
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7f6 faca 	bl	8000b24 <__addsf3>
 800a590:	4603      	mov	r3, r0
 800a592:	461c      	mov	r4, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a59a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f6 fbc9 	bl	8000d34 <__aeabi_fmul>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f7f6 fabc 	bl	8000b24 <__addsf3>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461c      	mov	r4, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7f6 fbbb 	bl	8000d34 <__aeabi_fmul>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f7f6 faae 	bl	8000b24 <__addsf3>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461c      	mov	r4, r3
 800a5cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a5d0:	f7f6 fbb0 	bl	8000d34 <__aeabi_fmul>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7f6 faa3 	bl	8000b24 <__addsf3>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461c      	mov	r4, r3
 800a5e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a5e6:	f7f6 fba5 	bl	8000d34 <__aeabi_fmul>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7f6 fa96 	bl	8000b20 <__aeabi_fsub>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461c      	mov	r4, r3
 800a5f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a5fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a5fc:	f7f6 fb9a 	bl	8000d34 <__aeabi_fmul>
 800a600:	4603      	mov	r3, r0
 800a602:	4619      	mov	r1, r3
 800a604:	4620      	mov	r0, r4
 800a606:	f7f6 fa8d 	bl	8000b24 <__addsf3>
 800a60a:	4603      	mov	r3, r0
 800a60c:	461c      	mov	r4, r3
 800a60e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a610:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a612:	f7f6 fb8f 	bl	8000d34 <__aeabi_fmul>
 800a616:	4603      	mov	r3, r0
 800a618:	4619      	mov	r1, r3
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7f6 fa80 	bl	8000b20 <__aeabi_fsub>
 800a620:	4603      	mov	r3, r0
 800a622:	461c      	mov	r4, r3
 800a624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a626:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a628:	f7f6 fb84 	bl	8000d34 <__aeabi_fmul>
 800a62c:	4603      	mov	r3, r0
 800a62e:	4619      	mov	r1, r3
 800a630:	4620      	mov	r0, r4
 800a632:	f7f6 fa77 	bl	8000b24 <__addsf3>
 800a636:	4603      	mov	r3, r0
 800a638:	461c      	mov	r4, r3
 800a63a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a63c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a63e:	f7f6 fb79 	bl	8000d34 <__aeabi_fmul>
 800a642:	4603      	mov	r3, r0
 800a644:	4619      	mov	r1, r3
 800a646:	4620      	mov	r0, r4
 800a648:	f7f6 fa6a 	bl	8000b20 <__aeabi_fsub>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461c      	mov	r4, r3
 800a650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a652:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a654:	f7f6 fb6e 	bl	8000d34 <__aeabi_fmul>
 800a658:	4603      	mov	r3, r0
 800a65a:	4619      	mov	r1, r3
 800a65c:	4620      	mov	r0, r4
 800a65e:	f7f6 fa61 	bl	8000b24 <__addsf3>
 800a662:	4603      	mov	r3, r0
 800a664:	461c      	mov	r4, r3
 800a666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a668:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a66a:	f7f6 fb63 	bl	8000d34 <__aeabi_fmul>
 800a66e:	4603      	mov	r3, r0
 800a670:	4619      	mov	r1, r3
 800a672:	4620      	mov	r0, r4
 800a674:	f7f6 fa54 	bl	8000b20 <__aeabi_fsub>
 800a678:	4603      	mov	r3, r0
 800a67a:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f6 fa4a 	bl	8000b24 <__addsf3>
 800a690:	4603      	mov	r3, r0
 800a692:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a694:	4618      	mov	r0, r3
 800a696:	f7f6 fa45 	bl	8000b24 <__addsf3>
 800a69a:	4603      	mov	r3, r0
 800a69c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f6 fa40 	bl	8000b24 <__addsf3>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f6 fa3b 	bl	8000b24 <__addsf3>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f7f6 fb3e 	bl	8000d34 <__aeabi_fmul>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	6a39      	ldr	r1, [r7, #32]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f6 fbed 	bl	8000e9c <__aeabi_fdiv>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a6ca:	f7f6 fa29 	bl	8000b20 <__aeabi_fsub>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 800a6d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a6dc:	f7f6 fa22 	bl	8000b24 <__addsf3>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f7f6 fb25 	bl	8000d34 <__aeabi_fmul>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6a39      	ldr	r1, [r7, #32]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f6 fbd4 	bl	8000e9c <__aeabi_fdiv>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a6fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a700:	4618      	mov	r0, r3
 800a702:	f7f6 fb17 	bl	8000d34 <__aeabi_fmul>
 800a706:	4603      	mov	r3, r0
 800a708:	461c      	mov	r4, r3
 800a70a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a70c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a70e:	f7f6 fb11 	bl	8000d34 <__aeabi_fmul>
 800a712:	4603      	mov	r3, r0
 800a714:	4619      	mov	r1, r3
 800a716:	4620      	mov	r0, r4
 800a718:	f7f6 fa04 	bl	8000b24 <__addsf3>
 800a71c:	4603      	mov	r3, r0
 800a71e:	461c      	mov	r4, r3
 800a720:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a722:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a724:	f7f6 fb06 	bl	8000d34 <__aeabi_fmul>
 800a728:	4603      	mov	r3, r0
 800a72a:	4619      	mov	r1, r3
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7f6 f9f7 	bl	8000b20 <__aeabi_fsub>
 800a732:	4603      	mov	r3, r0
 800a734:	461c      	mov	r4, r3
 800a736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a738:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a73a:	f7f6 fafb 	bl	8000d34 <__aeabi_fmul>
 800a73e:	4603      	mov	r3, r0
 800a740:	4619      	mov	r1, r3
 800a742:	4620      	mov	r0, r4
 800a744:	f7f6 f9ee 	bl	8000b24 <__addsf3>
 800a748:	4603      	mov	r3, r0
 800a74a:	461c      	mov	r4, r3
 800a74c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a74e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a750:	f7f6 faf0 	bl	8000d34 <__aeabi_fmul>
 800a754:	4603      	mov	r3, r0
 800a756:	4619      	mov	r1, r3
 800a758:	4620      	mov	r0, r4
 800a75a:	f7f6 f9e1 	bl	8000b20 <__aeabi_fsub>
 800a75e:	4603      	mov	r3, r0
 800a760:	6a39      	ldr	r1, [r7, #32]
 800a762:	4618      	mov	r0, r3
 800a764:	f7f6 fb9a 	bl	8000e9c <__aeabi_fdiv>
 800a768:	4603      	mov	r3, r0
 800a76a:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a774:	4618      	mov	r0, r3
 800a776:	f7f6 fadd 	bl	8000d34 <__aeabi_fmul>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461c      	mov	r4, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a784:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a786:	4618      	mov	r0, r3
 800a788:	f7f6 fad4 	bl	8000d34 <__aeabi_fmul>
 800a78c:	4603      	mov	r3, r0
 800a78e:	4619      	mov	r1, r3
 800a790:	4620      	mov	r0, r4
 800a792:	f7f6 f9c7 	bl	8000b24 <__addsf3>
 800a796:	4603      	mov	r3, r0
 800a798:	461c      	mov	r4, r3
 800a79a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a79c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a79e:	f7f6 fac9 	bl	8000d34 <__aeabi_fmul>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f7f6 f9bc 	bl	8000b24 <__addsf3>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a7b4:	f7f6 fabe 	bl	8000d34 <__aeabi_fmul>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7f6 f9af 	bl	8000b20 <__aeabi_fsub>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	461c      	mov	r4, r3
 800a7c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a7c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a7ca:	f7f6 fab3 	bl	8000d34 <__aeabi_fmul>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7f6 f9a6 	bl	8000b24 <__addsf3>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461c      	mov	r4, r3
 800a7dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7e0:	f7f6 faa8 	bl	8000d34 <__aeabi_fmul>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7f6 f999 	bl	8000b20 <__aeabi_fsub>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6a39      	ldr	r1, [r7, #32]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7f6 fb52 	bl	8000e9c <__aeabi_fdiv>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a802:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a804:	4618      	mov	r0, r3
 800a806:	f7f6 fa95 	bl	8000d34 <__aeabi_fmul>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461c      	mov	r4, r3
 800a80e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a810:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a812:	f7f6 fa8f 	bl	8000d34 <__aeabi_fmul>
 800a816:	4603      	mov	r3, r0
 800a818:	4619      	mov	r1, r3
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7f6 f980 	bl	8000b20 <__aeabi_fsub>
 800a820:	4603      	mov	r3, r0
 800a822:	461c      	mov	r4, r3
 800a824:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a826:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a828:	f7f6 fa84 	bl	8000d34 <__aeabi_fmul>
 800a82c:	4603      	mov	r3, r0
 800a82e:	4619      	mov	r1, r3
 800a830:	4620      	mov	r0, r4
 800a832:	f7f6 f977 	bl	8000b24 <__addsf3>
 800a836:	4603      	mov	r3, r0
 800a838:	461c      	mov	r4, r3
 800a83a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a83c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a83e:	f7f6 fa79 	bl	8000d34 <__aeabi_fmul>
 800a842:	4603      	mov	r3, r0
 800a844:	4619      	mov	r1, r3
 800a846:	4620      	mov	r0, r4
 800a848:	f7f6 f96a 	bl	8000b20 <__aeabi_fsub>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461c      	mov	r4, r3
 800a850:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a852:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a854:	f7f6 fa6e 	bl	8000d34 <__aeabi_fmul>
 800a858:	4603      	mov	r3, r0
 800a85a:	4619      	mov	r1, r3
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7f6 f961 	bl	8000b24 <__addsf3>
 800a862:	4603      	mov	r3, r0
 800a864:	6a39      	ldr	r1, [r7, #32]
 800a866:	4618      	mov	r0, r3
 800a868:	f7f6 fb18 	bl	8000e9c <__aeabi_fdiv>
 800a86c:	4603      	mov	r3, r0
 800a86e:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f6 fa5b 	bl	8000d34 <__aeabi_fmul>
 800a87e:	4603      	mov	r3, r0
 800a880:	461c      	mov	r4, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7f6 fa52 	bl	8000d34 <__aeabi_fmul>
 800a890:	4603      	mov	r3, r0
 800a892:	4619      	mov	r1, r3
 800a894:	4620      	mov	r0, r4
 800a896:	f7f6 f945 	bl	8000b24 <__addsf3>
 800a89a:	4603      	mov	r3, r0
 800a89c:	461c      	mov	r4, r3
 800a89e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a8a2:	f7f6 fa47 	bl	8000d34 <__aeabi_fmul>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7f6 f93a 	bl	8000b24 <__addsf3>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461c      	mov	r4, r3
 800a8b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a8b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a8b8:	f7f6 fa3c 	bl	8000d34 <__aeabi_fmul>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f7f6 f92d 	bl	8000b20 <__aeabi_fsub>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	461c      	mov	r4, r3
 800a8ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8cc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a8ce:	f7f6 fa31 	bl	8000d34 <__aeabi_fmul>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7f6 f924 	bl	8000b24 <__addsf3>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461c      	mov	r4, r3
 800a8e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a8e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a8e4:	f7f6 fa26 	bl	8000d34 <__aeabi_fmul>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f7f6 f917 	bl	8000b20 <__aeabi_fsub>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	6a39      	ldr	r1, [r7, #32]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7f6 fad0 	bl	8000e9c <__aeabi_fdiv>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800a900:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a902:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a904:	f7f6 f90c 	bl	8000b20 <__aeabi_fsub>
 800a908:	4603      	mov	r3, r0
 800a90a:	69f9      	ldr	r1, [r7, #28]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f6 fa11 	bl	8000d34 <__aeabi_fmul>
 800a912:	4603      	mov	r3, r0
 800a914:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a916:	4618      	mov	r0, r3
 800a918:	f7f6 f904 	bl	8000b24 <__addsf3>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461c      	mov	r4, r3
 800a920:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a922:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a924:	f7f6 f8fc 	bl	8000b20 <__aeabi_fsub>
 800a928:	4603      	mov	r3, r0
 800a92a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7f6 f8f9 	bl	8000b24 <__addsf3>
 800a932:	4603      	mov	r3, r0
 800a934:	69b9      	ldr	r1, [r7, #24]
 800a936:	4618      	mov	r0, r3
 800a938:	f7f6 f9fc 	bl	8000d34 <__aeabi_fmul>
 800a93c:	4603      	mov	r3, r0
 800a93e:	4619      	mov	r1, r3
 800a940:	4620      	mov	r0, r4
 800a942:	f7f6 f8ed 	bl	8000b20 <__aeabi_fsub>
 800a946:	4603      	mov	r3, r0
 800a948:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800a94a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a94c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a94e:	f7f6 f8e7 	bl	8000b20 <__aeabi_fsub>
 800a952:	4603      	mov	r3, r0
 800a954:	6979      	ldr	r1, [r7, #20]
 800a956:	4618      	mov	r0, r3
 800a958:	f7f6 f9ec 	bl	8000d34 <__aeabi_fmul>
 800a95c:	4603      	mov	r3, r0
 800a95e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a960:	4618      	mov	r0, r3
 800a962:	f7f6 f8df 	bl	8000b24 <__addsf3>
 800a966:	4603      	mov	r3, r0
 800a968:	461c      	mov	r4, r3
 800a96a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a96c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a96e:	f7f6 f8d7 	bl	8000b20 <__aeabi_fsub>
 800a972:	4603      	mov	r3, r0
 800a974:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a976:	4618      	mov	r0, r3
 800a978:	f7f6 f8d4 	bl	8000b24 <__addsf3>
 800a97c:	4603      	mov	r3, r0
 800a97e:	6939      	ldr	r1, [r7, #16]
 800a980:	4618      	mov	r0, r3
 800a982:	f7f6 f9d7 	bl	8000d34 <__aeabi_fmul>
 800a986:	4603      	mov	r3, r0
 800a988:	4619      	mov	r1, r3
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7f6 f8c8 	bl	8000b20 <__aeabi_fsub>
 800a990:	4603      	mov	r3, r0
 800a992:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800a994:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a996:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a998:	f7f6 f8c2 	bl	8000b20 <__aeabi_fsub>
 800a99c:	4603      	mov	r3, r0
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f6 f9c7 	bl	8000d34 <__aeabi_fmul>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f6 f8ba 	bl	8000b24 <__addsf3>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a9b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9b8:	f7f6 f8b2 	bl	8000b20 <__aeabi_fsub>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f6 f8af 	bl	8000b24 <__addsf3>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f6 f9b2 	bl	8000d34 <__aeabi_fmul>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7f6 f8a3 	bl	8000b20 <__aeabi_fsub>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800a9de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9e0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a9e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a9e8:	69f8      	ldr	r0, [r7, #28]
 800a9ea:	f7f6 f899 	bl	8000b20 <__aeabi_fsub>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7f6 f99e 	bl	8000d34 <__aeabi_fmul>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9fe:	69b8      	ldr	r0, [r7, #24]
 800aa00:	f7f6 f998 	bl	8000d34 <__aeabi_fmul>
 800aa04:	4603      	mov	r3, r0
 800aa06:	4619      	mov	r1, r3
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f7f6 f889 	bl	8000b20 <__aeabi_fsub>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	461c      	mov	r4, r3
 800aa12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa14:	69b8      	ldr	r0, [r7, #24]
 800aa16:	f7f6 f98d 	bl	8000d34 <__aeabi_fmul>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7f6 f87e 	bl	8000b20 <__aeabi_fsub>
 800aa24:	4603      	mov	r3, r0
 800aa26:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 800aa28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa2a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa32:	69f8      	ldr	r0, [r7, #28]
 800aa34:	f7f6 f874 	bl	8000b20 <__aeabi_fsub>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f7f6 f979 	bl	8000d34 <__aeabi_fmul>
 800aa42:	4603      	mov	r3, r0
 800aa44:	461c      	mov	r4, r3
 800aa46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa48:	69b8      	ldr	r0, [r7, #24]
 800aa4a:	f7f6 f973 	bl	8000d34 <__aeabi_fmul>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4619      	mov	r1, r3
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7f6 f864 	bl	8000b20 <__aeabi_fsub>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	461c      	mov	r4, r3
 800aa5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa5e:	69b8      	ldr	r0, [r7, #24]
 800aa60:	f7f6 f968 	bl	8000d34 <__aeabi_fmul>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4619      	mov	r1, r3
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7f6 f859 	bl	8000b20 <__aeabi_fsub>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 800aa72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa74:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aa78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa7c:	69f8      	ldr	r0, [r7, #28]
 800aa7e:	f7f6 f84f 	bl	8000b20 <__aeabi_fsub>
 800aa82:	4603      	mov	r3, r0
 800aa84:	4619      	mov	r1, r3
 800aa86:	4620      	mov	r0, r4
 800aa88:	f7f6 f954 	bl	8000d34 <__aeabi_fmul>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461c      	mov	r4, r3
 800aa90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa92:	69b8      	ldr	r0, [r7, #24]
 800aa94:	f7f6 f94e 	bl	8000d34 <__aeabi_fmul>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f7f6 f83f 	bl	8000b20 <__aeabi_fsub>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461c      	mov	r4, r3
 800aaa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aaa8:	69b8      	ldr	r0, [r7, #24]
 800aaaa:	f7f6 f943 	bl	8000d34 <__aeabi_fmul>
 800aaae:	4603      	mov	r3, r0
 800aab0:	4619      	mov	r1, r3
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7f6 f834 	bl	8000b20 <__aeabi_fsub>
 800aab8:	4603      	mov	r3, r0
 800aaba:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 800aabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aabe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aac2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aac6:	6938      	ldr	r0, [r7, #16]
 800aac8:	f7f6 f82a 	bl	8000b20 <__aeabi_fsub>
 800aacc:	4603      	mov	r3, r0
 800aace:	4619      	mov	r1, r3
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7f6 f92f 	bl	8000d34 <__aeabi_fmul>
 800aad6:	4603      	mov	r3, r0
 800aad8:	461c      	mov	r4, r3
 800aada:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aadc:	6978      	ldr	r0, [r7, #20]
 800aade:	f7f6 f929 	bl	8000d34 <__aeabi_fmul>
 800aae2:	4603      	mov	r3, r0
 800aae4:	4619      	mov	r1, r3
 800aae6:	4620      	mov	r0, r4
 800aae8:	f7f6 f81a 	bl	8000b20 <__aeabi_fsub>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461c      	mov	r4, r3
 800aaf0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aaf2:	6938      	ldr	r0, [r7, #16]
 800aaf4:	f7f6 f91e 	bl	8000d34 <__aeabi_fmul>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4619      	mov	r1, r3
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7f6 f80f 	bl	8000b20 <__aeabi_fsub>
 800ab02:	4603      	mov	r3, r0
 800ab04:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 800ab06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab08:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab10:	6938      	ldr	r0, [r7, #16]
 800ab12:	f7f6 f805 	bl	8000b20 <__aeabi_fsub>
 800ab16:	4603      	mov	r3, r0
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f7f6 f90a 	bl	8000d34 <__aeabi_fmul>
 800ab20:	4603      	mov	r3, r0
 800ab22:	461c      	mov	r4, r3
 800ab24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ab26:	6978      	ldr	r0, [r7, #20]
 800ab28:	f7f6 f904 	bl	8000d34 <__aeabi_fmul>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7f5 fff5 	bl	8000b20 <__aeabi_fsub>
 800ab36:	4603      	mov	r3, r0
 800ab38:	461c      	mov	r4, r3
 800ab3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab3c:	6938      	ldr	r0, [r7, #16]
 800ab3e:	f7f6 f8f9 	bl	8000d34 <__aeabi_fmul>
 800ab42:	4603      	mov	r3, r0
 800ab44:	4619      	mov	r1, r3
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7f5 ffea 	bl	8000b20 <__aeabi_fsub>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 800ab50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab52:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ab56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab5a:	6938      	ldr	r0, [r7, #16]
 800ab5c:	f7f5 ffe0 	bl	8000b20 <__aeabi_fsub>
 800ab60:	4603      	mov	r3, r0
 800ab62:	4619      	mov	r1, r3
 800ab64:	4620      	mov	r0, r4
 800ab66:	f7f6 f8e5 	bl	8000d34 <__aeabi_fmul>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	461c      	mov	r4, r3
 800ab6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab70:	6978      	ldr	r0, [r7, #20]
 800ab72:	f7f6 f8df 	bl	8000d34 <__aeabi_fmul>
 800ab76:	4603      	mov	r3, r0
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f7f5 ffd0 	bl	8000b20 <__aeabi_fsub>
 800ab80:	4603      	mov	r3, r0
 800ab82:	461c      	mov	r4, r3
 800ab84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab86:	6938      	ldr	r0, [r7, #16]
 800ab88:	f7f6 f8d4 	bl	8000d34 <__aeabi_fmul>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7f5 ffc5 	bl	8000b20 <__aeabi_fsub>
 800ab96:	4603      	mov	r3, r0
 800ab98:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 800ab9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800aba0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aba4:	68b8      	ldr	r0, [r7, #8]
 800aba6:	f7f5 ffbb 	bl	8000b20 <__aeabi_fsub>
 800abaa:	4603      	mov	r3, r0
 800abac:	4619      	mov	r1, r3
 800abae:	4620      	mov	r0, r4
 800abb0:	f7f6 f8c0 	bl	8000d34 <__aeabi_fmul>
 800abb4:	4603      	mov	r3, r0
 800abb6:	461c      	mov	r4, r3
 800abb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7f6 f8ba 	bl	8000d34 <__aeabi_fmul>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4619      	mov	r1, r3
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7f5 ffab 	bl	8000b20 <__aeabi_fsub>
 800abca:	4603      	mov	r3, r0
 800abcc:	461c      	mov	r4, r3
 800abce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	f7f6 f8af 	bl	8000d34 <__aeabi_fmul>
 800abd6:	4603      	mov	r3, r0
 800abd8:	4619      	mov	r1, r3
 800abda:	4620      	mov	r0, r4
 800abdc:	f7f5 ffa0 	bl	8000b20 <__aeabi_fsub>
 800abe0:	4603      	mov	r3, r0
 800abe2:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 800abe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800abea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7f5 ff96 	bl	8000b20 <__aeabi_fsub>
 800abf4:	4603      	mov	r3, r0
 800abf6:	4619      	mov	r1, r3
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7f6 f89b 	bl	8000d34 <__aeabi_fmul>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461c      	mov	r4, r3
 800ac02:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7f6 f895 	bl	8000d34 <__aeabi_fmul>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7f5 ff86 	bl	8000b20 <__aeabi_fsub>
 800ac14:	4603      	mov	r3, r0
 800ac16:	461c      	mov	r4, r3
 800ac18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac1a:	68b8      	ldr	r0, [r7, #8]
 800ac1c:	f7f6 f88a 	bl	8000d34 <__aeabi_fmul>
 800ac20:	4603      	mov	r3, r0
 800ac22:	4619      	mov	r1, r3
 800ac24:	4620      	mov	r0, r4
 800ac26:	f7f5 ff7b 	bl	8000b20 <__aeabi_fsub>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 800ac2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac30:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ac34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	f7f5 ff71 	bl	8000b20 <__aeabi_fsub>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4619      	mov	r1, r3
 800ac42:	4620      	mov	r0, r4
 800ac44:	f7f6 f876 	bl	8000d34 <__aeabi_fmul>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	461c      	mov	r4, r3
 800ac4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7f6 f870 	bl	8000d34 <__aeabi_fmul>
 800ac54:	4603      	mov	r3, r0
 800ac56:	4619      	mov	r1, r3
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7f5 ff61 	bl	8000b20 <__aeabi_fsub>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	461c      	mov	r4, r3
 800ac62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac64:	68b8      	ldr	r0, [r7, #8]
 800ac66:	f7f6 f865 	bl	8000d34 <__aeabi_fmul>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7f5 ff56 	bl	8000b20 <__aeabi_fsub>
 800ac74:	4603      	mov	r3, r0
 800ac76:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d05d      	beq.n	800ad3a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc7a>
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	f300 8089 	bgt.w	800ad96 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xbce>
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d02b      	beq.n	800ace4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc24>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800ac8c:	e083      	b.n	800ad96 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 roll_ekf = angle_ekf ;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac92:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    			 roll_rate = angle_rate;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac9a:	60da      	str	r2, [r3, #12]
    			 roll_bias = angle_bias;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aca0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    			 roll_acc = angle_acc ;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aca8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    			 S11_roll = S11_angle;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acb0:	645a      	str	r2, [r3, #68]	; 0x44
    			 S12_roll = S12_angle;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acb6:	649a      	str	r2, [r3, #72]	; 0x48
    			 S13_roll = S13_angle;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acbc:	655a      	str	r2, [r3, #84]	; 0x54
    			 S21_roll = S21_angle;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acc2:	64da      	str	r2, [r3, #76]	; 0x4c
    			 S22_roll = S22_angle;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acc8:	651a      	str	r2, [r3, #80]	; 0x50
    			 S23_roll = S23_angle;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acce:	659a      	str	r2, [r3, #88]	; 0x58
    			 S31_roll = S31_angle;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acd4:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S32_roll = S32_angle;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acda:	661a      	str	r2, [r3, #96]	; 0x60
    			 S33_roll = S33_angle;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ace0:	665a      	str	r2, [r3, #100]	; 0x64
    			break;
 800ace2:	e058      	b.n	800ad96 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 pitch_ekf = angle_ekf ;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ace8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    			 pitch_rate = angle_rate;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800acf0:	611a      	str	r2, [r3, #16]
    			 pitch_bias = angle_bias;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acf6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    			 pitch_acc = angle_acc ;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acfe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    			 S11_pitch = S11_angle;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad06:	619a      	str	r2, [r3, #24]
    			 S12_pitch = S12_angle;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad0c:	61da      	str	r2, [r3, #28]
    			 S13_pitch = S13_angle;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad12:	629a      	str	r2, [r3, #40]	; 0x28
    			 S21_pitch = S21_angle;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad18:	621a      	str	r2, [r3, #32]
    			 S22_pitch = S22_angle;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad1e:	625a      	str	r2, [r3, #36]	; 0x24
    			 S23_pitch = S23_angle;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad24:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S31_pitch = S31_angle;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad2a:	631a      	str	r2, [r3, #48]	; 0x30
    			 S32_pitch = S32_angle;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad30:	635a      	str	r2, [r3, #52]	; 0x34
    			 S33_pitch = S33_angle;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
    			break;
 800ad38:	e02d      	b.n	800ad96 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcd6>
    			 yaw_ekf = angle_ekf ;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad3e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    			 yaw_rate = angle_rate;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad46:	615a      	str	r2, [r3, #20]
    			 yaw_bias = angle_bias;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    			 yaw_acc = angle_acc ;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad54:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    			 S11_yaw = S11_angle;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad5c:	669a      	str	r2, [r3, #104]	; 0x68
    			 S12_yaw = S12_angle;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad62:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S13_yaw = S13_angle;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad68:	679a      	str	r2, [r3, #120]	; 0x78
    			 S21_yaw = S21_angle;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad6e:	671a      	str	r2, [r3, #112]	; 0x70
    			 S22_yaw = S22_angle;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad74:	675a      	str	r2, [r3, #116]	; 0x74
    			 S23_yaw = S23_angle;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad7a:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S31_yaw = S31_angle;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S32_yaw = S32_angle;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S33_yaw = S33_angle;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			break;
 800ad94:	bf00      	nop
}
 800ad96:	bf00      	nop
 800ad98:	3778      	adds	r7, #120	; 0x78
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ada0 <_ZN15Kalman_Filtresi7EKF_AltEv>:

void Kalman_Filtresi::EKF_Alt() {
 800ada0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ada4:	b08a      	sub	sp, #40	; 0x28
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
    float u = acc_vert;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24

    //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800adb8:	4618      	mov	r0, r3
 800adba:	f7f5 fb2d 	bl	8000418 <__aeabi_f2d>
 800adbe:	4680      	mov	r8, r0
 800adc0:	4689      	mov	r9, r1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800adce:	4618      	mov	r0, r3
 800add0:	f7f5 fb22 	bl	8000418 <__aeabi_f2d>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4620      	mov	r0, r4
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fb74 	bl	80004c8 <__aeabi_dmul>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 f9b8 	bl	800015c <__adddf3>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4614      	mov	r4, r2
 800adf2:	461d      	mov	r5, r3
 800adf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adf6:	f7f5 fb0f 	bl	8000418 <__aeabi_f2d>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae00:	f7f5 fb62 	bl	80004c8 <__aeabi_dmul>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae12:	f7f5 fb59 	bl	80004c8 <__aeabi_dmul>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae26:	f7f5 fc79 	bl	800071c <__aeabi_ddiv>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 f993 	bl	800015c <__adddf3>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f7f5 fe1b 	bl	8000a78 <__aeabi_d2f>
 800ae42:	4602      	mov	r2, r0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	  vz = (vz) + u*(st);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7f5 fae1 	bl	8000418 <__aeabi_f2d>
 800ae56:	4604      	mov	r4, r0
 800ae58:	460d      	mov	r5, r1
 800ae5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5c:	f7f5 fadc 	bl	8000418 <__aeabi_f2d>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ae66:	f7f5 fb2f 	bl	80004c8 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 f973 	bl	800015c <__adddf3>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7f5 fdfb 	bl	8000a78 <__aeabi_d2f>
 800ae82:	4602      	mov	r2, r0
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ae96:	4619      	mov	r1, r3
 800ae98:	4610      	mov	r0, r2
 800ae9a:	f7f5 fe43 	bl	8000b24 <__addsf3>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f5 fab9 	bl	8000418 <__aeabi_f2d>
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f5 fab1 	bl	8000418 <__aeabi_f2d>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800aebc:	f7f5 fb04 	bl	80004c8 <__aeabi_dmul>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4620      	mov	r0, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7f5 f948 	bl	800015c <__adddf3>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4692      	mov	sl, r2
 800aed2:	469b      	mov	fp, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f5 fa99 	bl	8000418 <__aeabi_f2d>
 800aee6:	4680      	mov	r8, r0
 800aee8:	4689      	mov	r9, r1
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f5 fa91 	bl	8000418 <__aeabi_f2d>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800aefc:	f7f5 fae4 	bl	80004c8 <__aeabi_dmul>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4640      	mov	r0, r8
 800af06:	4649      	mov	r1, r9
 800af08:	f7f5 f928 	bl	800015c <__adddf3>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 fad8 	bl	80004c8 <__aeabi_dmul>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4650      	mov	r0, sl
 800af1e:	4659      	mov	r1, fp
 800af20:	f7f5 f91c 	bl	800015c <__adddf3>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4610      	mov	r0, r2
 800af2a:	4619      	mov	r1, r3
 800af2c:	f7f5 fda4 	bl	8000a78 <__aeabi_d2f>
 800af30:	4602      	mov	r2, r0
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  S12_alt = S12_alt + S22_alt*st;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f5 fa6a 	bl	8000418 <__aeabi_f2d>
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f5 fa62 	bl	8000418 <__aeabi_f2d>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800af5a:	f7f5 fab5 	bl	80004c8 <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f8f9 	bl	800015c <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4610      	mov	r0, r2
 800af70:	4619      	mov	r1, r3
 800af72:	f7f5 fd81 	bl	8000a78 <__aeabi_d2f>
 800af76:	4602      	mov	r2, r0
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  S13_alt = S13_alt + S23_alt*st;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af84:	4618      	mov	r0, r3
 800af86:	f7f5 fa47 	bl	8000418 <__aeabi_f2d>
 800af8a:	4604      	mov	r4, r0
 800af8c:	460d      	mov	r5, r1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af94:	4618      	mov	r0, r3
 800af96:	f7f5 fa3f 	bl	8000418 <__aeabi_f2d>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800afa0:	f7f5 fa92 	bl	80004c8 <__aeabi_dmul>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 f8d6 	bl	800015c <__adddf3>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4610      	mov	r0, r2
 800afb6:	4619      	mov	r1, r3
 800afb8:	f7f5 fd5e 	bl	8000a78 <__aeabi_d2f>
 800afbc:	4602      	mov	r2, r0
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	  S21_alt = S21_alt + S22_alt*(st);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f5 fa24 	bl	8000418 <__aeabi_f2d>
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f5 fa1c 	bl	8000418 <__aeabi_f2d>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800afe6:	f7f5 fa6f 	bl	80004c8 <__aeabi_dmul>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7f5 f8b3 	bl	800015c <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4610      	mov	r0, r2
 800affc:	4619      	mov	r1, r3
 800affe:	f7f5 fd3b 	bl	8000a78 <__aeabi_d2f>
 800b002:	4602      	mov	r2, r0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	  S22_alt =  S22_alt + svel;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b016:	4619      	mov	r1, r3
 800b018:	4610      	mov	r0, r2
 800b01a:	f7f5 fd83 	bl	8000b24 <__addsf3>
 800b01e:	4603      	mov	r3, r0
 800b020:	461a      	mov	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f5 f9f2 	bl	8000418 <__aeabi_f2d>
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f5 f9ea 	bl	8000418 <__aeabi_f2d>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b04a:	f7f5 fa3d 	bl	80004c8 <__aeabi_dmul>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 f881 	bl	800015c <__adddf3>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4610      	mov	r0, r2
 800b060:	4619      	mov	r1, r3
 800b062:	f7f5 fd09 	bl	8000a78 <__aeabi_d2f>
 800b066:	4602      	mov	r2, r0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b07a:	4619      	mov	r1, r3
 800b07c:	4610      	mov	r0, r2
 800b07e:	f7f5 fd51 	bl	8000b24 <__addsf3>
 800b082:	4603      	mov	r3, r0
 800b084:	461a      	mov	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	  float A = (Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f7f5 fe4a 	bl	8000d34 <__aeabi_fmul>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7f5 fe3e 	bl	8000d34 <__aeabi_fmul>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7f5 fd31 	bl	8000b24 <__addsf3>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	461c      	mov	r4, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7f5 fe2d 	bl	8000d34 <__aeabi_fmul>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7f5 fd20 	bl	8000b24 <__addsf3>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	461c      	mov	r4, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f7f5 fe1c 	bl	8000d34 <__aeabi_fmul>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4619      	mov	r1, r3
 800b100:	4620      	mov	r0, r4
 800b102:	f7f5 fd0f 	bl	8000b24 <__addsf3>
 800b106:	4603      	mov	r3, r0
 800b108:	461c      	mov	r4, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7f5 fe0b 	bl	8000d34 <__aeabi_fmul>
 800b11e:	4603      	mov	r3, r0
 800b120:	4619      	mov	r1, r3
 800b122:	4620      	mov	r0, r4
 800b124:	f7f5 fcfe 	bl	8000b24 <__addsf3>
 800b128:	4603      	mov	r3, r0
 800b12a:	461c      	mov	r4, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b138:	4619      	mov	r1, r3
 800b13a:	4610      	mov	r0, r2
 800b13c:	f7f5 fdfa 	bl	8000d34 <__aeabi_fmul>
 800b140:	4603      	mov	r3, r0
 800b142:	4619      	mov	r1, r3
 800b144:	4620      	mov	r0, r4
 800b146:	f7f5 fced 	bl	8000b24 <__addsf3>
 800b14a:	4603      	mov	r3, r0
 800b14c:	461c      	mov	r4, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b15a:	4619      	mov	r1, r3
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7f5 fde9 	bl	8000d34 <__aeabi_fmul>
 800b162:	4603      	mov	r3, r0
 800b164:	4619      	mov	r1, r3
 800b166:	4620      	mov	r0, r4
 800b168:	f7f5 fcdc 	bl	8000b24 <__addsf3>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461c      	mov	r4, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f7f5 fdd8 	bl	8000d34 <__aeabi_fmul>
 800b184:	4603      	mov	r3, r0
 800b186:	4619      	mov	r1, r3
 800b188:	4620      	mov	r0, r4
 800b18a:	f7f5 fcc9 	bl	8000b20 <__aeabi_fsub>
 800b18e:	4603      	mov	r3, r0
 800b190:	623b      	str	r3, [r7, #32]

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt));
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 416c 	ldr.w	r4, [r3, #364]	; 0x16c
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	f7f5 fcbc 	bl	8000b24 <__addsf3>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f7f5 fdbf 	bl	8000d34 <__aeabi_fmul>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	61fb      	str	r3, [r7, #28]
	  Kt11 = Kt11/A;
 800b1ba:	6a39      	ldr	r1, [r7, #32]
 800b1bc:	69f8      	ldr	r0, [r7, #28]
 800b1be:	f7f5 fe6d 	bl	8000e9c <__aeabi_fdiv>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	61fb      	str	r3, [r7, #28]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f7f5 fdad 	bl	8000d34 <__aeabi_fmul>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	461c      	mov	r4, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	f7f5 fda1 	bl	8000d34 <__aeabi_fmul>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7f5 fc94 	bl	8000b24 <__addsf3>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461c      	mov	r4, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7f5 fd90 	bl	8000d34 <__aeabi_fmul>
 800b214:	4603      	mov	r3, r0
 800b216:	4619      	mov	r1, r3
 800b218:	4620      	mov	r0, r4
 800b21a:	f7f5 fc81 	bl	8000b20 <__aeabi_fsub>
 800b21e:	4603      	mov	r3, r0
 800b220:	61bb      	str	r3, [r7, #24]
	  Kt12 = Kt12/A;
 800b222:	6a39      	ldr	r1, [r7, #32]
 800b224:	69b8      	ldr	r0, [r7, #24]
 800b226:	f7f5 fe39 	bl	8000e9c <__aeabi_fdiv>
 800b22a:	4603      	mov	r3, r0
 800b22c:	61bb      	str	r3, [r7, #24]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f7f5 fd79 	bl	8000d34 <__aeabi_fmul>
 800b242:	4603      	mov	r3, r0
 800b244:	461c      	mov	r4, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7f5 fd6d 	bl	8000d34 <__aeabi_fmul>
 800b25a:	4603      	mov	r3, r0
 800b25c:	4619      	mov	r1, r3
 800b25e:	4620      	mov	r0, r4
 800b260:	f7f5 fc60 	bl	8000b24 <__addsf3>
 800b264:	4603      	mov	r3, r0
 800b266:	461c      	mov	r4, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b274:	4619      	mov	r1, r3
 800b276:	4610      	mov	r0, r2
 800b278:	f7f5 fd5c 	bl	8000d34 <__aeabi_fmul>
 800b27c:	4603      	mov	r3, r0
 800b27e:	4619      	mov	r1, r3
 800b280:	4620      	mov	r0, r4
 800b282:	f7f5 fc4f 	bl	8000b24 <__addsf3>
 800b286:	4603      	mov	r3, r0
 800b288:	461c      	mov	r4, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f7f5 fd4b 	bl	8000d34 <__aeabi_fmul>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7f5 fc3c 	bl	8000b20 <__aeabi_fsub>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	617b      	str	r3, [r7, #20]
	  Kt21 = Kt21/A;
 800b2ac:	6a39      	ldr	r1, [r7, #32]
 800b2ae:	6978      	ldr	r0, [r7, #20]
 800b2b0:	f7f5 fdf4 	bl	8000e9c <__aeabi_fdiv>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	617b      	str	r3, [r7, #20]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	f7f5 fd34 	bl	8000d34 <__aeabi_fmul>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	461c      	mov	r4, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	f7f5 fd28 	bl	8000d34 <__aeabi_fmul>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7f5 fc19 	bl	8000b20 <__aeabi_fsub>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	461c      	mov	r4, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2fe:	4619      	mov	r1, r3
 800b300:	4610      	mov	r0, r2
 800b302:	f7f5 fd17 	bl	8000d34 <__aeabi_fmul>
 800b306:	4603      	mov	r3, r0
 800b308:	4619      	mov	r1, r3
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7f5 fc0a 	bl	8000b24 <__addsf3>
 800b310:	4603      	mov	r3, r0
 800b312:	461c      	mov	r4, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f7f5 fd06 	bl	8000d34 <__aeabi_fmul>
 800b328:	4603      	mov	r3, r0
 800b32a:	4619      	mov	r1, r3
 800b32c:	4620      	mov	r0, r4
 800b32e:	f7f5 fbf9 	bl	8000b24 <__addsf3>
 800b332:	4603      	mov	r3, r0
 800b334:	461c      	mov	r4, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f7f5 fcf5 	bl	8000d34 <__aeabi_fmul>
 800b34a:	4603      	mov	r3, r0
 800b34c:	4619      	mov	r1, r3
 800b34e:	4620      	mov	r0, r4
 800b350:	f7f5 fbe6 	bl	8000b20 <__aeabi_fsub>
 800b354:	4603      	mov	r3, r0
 800b356:	613b      	str	r3, [r7, #16]
	  Kt22 = Kt22/A;
 800b358:	6a39      	ldr	r1, [r7, #32]
 800b35a:	6938      	ldr	r0, [r7, #16]
 800b35c:	f7f5 fd9e 	bl	8000e9c <__aeabi_fdiv>
 800b360:	4603      	mov	r3, r0
 800b362:	613b      	str	r3, [r7, #16]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f7f5 fcde 	bl	8000d34 <__aeabi_fmul>
 800b378:	4603      	mov	r3, r0
 800b37a:	461c      	mov	r4, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f7f5 fcd2 	bl	8000d34 <__aeabi_fmul>
 800b390:	4603      	mov	r3, r0
 800b392:	4619      	mov	r1, r3
 800b394:	4620      	mov	r0, r4
 800b396:	f7f5 fbc5 	bl	8000b24 <__addsf3>
 800b39a:	4603      	mov	r3, r0
 800b39c:	461c      	mov	r4, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f7f5 fcc1 	bl	8000d34 <__aeabi_fmul>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7f5 fbb4 	bl	8000b24 <__addsf3>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461c      	mov	r4, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f7f5 fcb0 	bl	8000d34 <__aeabi_fmul>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7f5 fba1 	bl	8000b20 <__aeabi_fsub>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	60fb      	str	r3, [r7, #12]
	  Kt31 = Kt31/A;
 800b3e2:	6a39      	ldr	r1, [r7, #32]
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7f5 fd59 	bl	8000e9c <__aeabi_fdiv>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	60fb      	str	r3, [r7, #12]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f7f5 fc99 	bl	8000d34 <__aeabi_fmul>
 800b402:	4603      	mov	r3, r0
 800b404:	461c      	mov	r4, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b412:	4619      	mov	r1, r3
 800b414:	4610      	mov	r0, r2
 800b416:	f7f5 fc8d 	bl	8000d34 <__aeabi_fmul>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4619      	mov	r1, r3
 800b41e:	4620      	mov	r0, r4
 800b420:	f7f5 fb7e 	bl	8000b20 <__aeabi_fsub>
 800b424:	4603      	mov	r3, r0
 800b426:	461c      	mov	r4, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f7f5 fc7c 	bl	8000d34 <__aeabi_fmul>
 800b43c:	4603      	mov	r3, r0
 800b43e:	4619      	mov	r1, r3
 800b440:	4620      	mov	r0, r4
 800b442:	f7f5 fb6f 	bl	8000b24 <__addsf3>
 800b446:	4603      	mov	r3, r0
 800b448:	60bb      	str	r3, [r7, #8]
	  Kt32 = Kt32/A;
 800b44a:	6a39      	ldr	r1, [r7, #32]
 800b44c:	68b8      	ldr	r0, [r7, #8]
 800b44e:	f7f5 fd25 	bl	8000e9c <__aeabi_fdiv>
 800b452:	4603      	mov	r3, r0
 800b454:	60bb      	str	r3, [r7, #8]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 417c 	ldr.w	r4, [r3, #380]	; 0x17c
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7f5 fb58 	bl	8000b20 <__aeabi_fsub>
 800b470:	4603      	mov	r3, r0
 800b472:	69b9      	ldr	r1, [r7, #24]
 800b474:	4618      	mov	r0, r3
 800b476:	f7f5 fc5d 	bl	8000d34 <__aeabi_fmul>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4619      	mov	r1, r3
 800b47e:	4620      	mov	r0, r4
 800b480:	f7f5 fb4e 	bl	8000b20 <__aeabi_fsub>
 800b484:	4603      	mov	r3, r0
 800b486:	461c      	mov	r4, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7f5 fb42 	bl	8000b20 <__aeabi_fsub>
 800b49c:	4603      	mov	r3, r0
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7f5 fb3b 	bl	8000b24 <__addsf3>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	69f9      	ldr	r1, [r7, #28]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f5 fc3e 	bl	8000d34 <__aeabi_fmul>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7f5 fb2f 	bl	8000b20 <__aeabi_fsub>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f7f5 fb1d 	bl	8000b20 <__aeabi_fsub>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	6939      	ldr	r1, [r7, #16]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f5 fc22 	bl	8000d34 <__aeabi_fmul>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f7f5 fb13 	bl	8000b20 <__aeabi_fsub>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461c      	mov	r4, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7f5 fb07 	bl	8000b20 <__aeabi_fsub>
 800b512:	4603      	mov	r3, r0
 800b514:	461a      	mov	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f7f5 fb00 	bl	8000b24 <__addsf3>
 800b524:	4603      	mov	r3, r0
 800b526:	6979      	ldr	r1, [r7, #20]
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f5 fc03 	bl	8000d34 <__aeabi_fmul>
 800b52e:	4603      	mov	r3, r0
 800b530:	4619      	mov	r1, r3
 800b532:	4620      	mov	r0, r4
 800b534:	f7f5 faf4 	bl	8000b20 <__aeabi_fsub>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 418c 	ldr.w	r4, [r3, #396]	; 0x18c
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7f5 fae2 	bl	8000b20 <__aeabi_fsub>
 800b55c:	4603      	mov	r3, r0
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	4618      	mov	r0, r3
 800b562:	f7f5 fbe7 	bl	8000d34 <__aeabi_fmul>
 800b566:	4603      	mov	r3, r0
 800b568:	4619      	mov	r1, r3
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7f5 fad8 	bl	8000b20 <__aeabi_fsub>
 800b570:	4603      	mov	r3, r0
 800b572:	461c      	mov	r4, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b580:	4619      	mov	r1, r3
 800b582:	4610      	mov	r0, r2
 800b584:	f7f5 facc 	bl	8000b20 <__aeabi_fsub>
 800b588:	4603      	mov	r3, r0
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f7f5 fac5 	bl	8000b24 <__addsf3>
 800b59a:	4603      	mov	r3, r0
 800b59c:	68f9      	ldr	r1, [r7, #12]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7f5 fbc8 	bl	8000d34 <__aeabi_fmul>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7f5 fab9 	bl	8000b20 <__aeabi_fsub>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5be:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b5c2:	69b9      	ldr	r1, [r7, #24]
 800b5c4:	69f8      	ldr	r0, [r7, #28]
 800b5c6:	f7f5 faad 	bl	8000b24 <__addsf3>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7f5 faa5 	bl	8000b20 <__aeabi_fsub>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7f5 fbaa 	bl	8000d34 <__aeabi_fmul>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5ea:	69f9      	ldr	r1, [r7, #28]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f5 fba1 	bl	8000d34 <__aeabi_fmul>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7f5 fa92 	bl	8000b20 <__aeabi_fsub>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461a      	mov	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b610:	69b9      	ldr	r1, [r7, #24]
 800b612:	69f8      	ldr	r0, [r7, #28]
 800b614:	f7f5 fa86 	bl	8000b24 <__addsf3>
 800b618:	4603      	mov	r3, r0
 800b61a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b61e:	4618      	mov	r0, r3
 800b620:	f7f5 fa7e 	bl	8000b20 <__aeabi_fsub>
 800b624:	4603      	mov	r3, r0
 800b626:	4619      	mov	r1, r3
 800b628:	4620      	mov	r0, r4
 800b62a:	f7f5 fb83 	bl	8000d34 <__aeabi_fmul>
 800b62e:	4603      	mov	r3, r0
 800b630:	461c      	mov	r4, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b638:	69f9      	ldr	r1, [r7, #28]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f5 fb7a 	bl	8000d34 <__aeabi_fmul>
 800b640:	4603      	mov	r3, r0
 800b642:	4619      	mov	r1, r3
 800b644:	4620      	mov	r0, r4
 800b646:	f7f5 fa6b 	bl	8000b20 <__aeabi_fsub>
 800b64a:	4603      	mov	r3, r0
 800b64c:	461a      	mov	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b65a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b65e:	69b9      	ldr	r1, [r7, #24]
 800b660:	69f8      	ldr	r0, [r7, #28]
 800b662:	f7f5 fa5f 	bl	8000b24 <__addsf3>
 800b666:	4603      	mov	r3, r0
 800b668:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f5 fa57 	bl	8000b20 <__aeabi_fsub>
 800b672:	4603      	mov	r3, r0
 800b674:	4619      	mov	r1, r3
 800b676:	4620      	mov	r0, r4
 800b678:	f7f5 fb5c 	bl	8000d34 <__aeabi_fmul>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461c      	mov	r4, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b686:	69f9      	ldr	r1, [r7, #28]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f5 fb53 	bl	8000d34 <__aeabi_fmul>
 800b68e:	4603      	mov	r3, r0
 800b690:	4619      	mov	r1, r3
 800b692:	4620      	mov	r0, r4
 800b694:	f7f5 fa44 	bl	8000b20 <__aeabi_fsub>
 800b698:	4603      	mov	r3, r0
 800b69a:	461a      	mov	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800b6ae:	6939      	ldr	r1, [r7, #16]
 800b6b0:	6978      	ldr	r0, [r7, #20]
 800b6b2:	f7f5 fa37 	bl	8000b24 <__addsf3>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7f5 fb3a 	bl	8000d34 <__aeabi_fmul>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f7f5 fa2b 	bl	8000b20 <__aeabi_fsub>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461c      	mov	r4, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6d4:	6979      	ldr	r1, [r7, #20]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f5 fb2c 	bl	8000d34 <__aeabi_fmul>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7f5 fa1d 	bl	8000b20 <__aeabi_fsub>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800b6fc:	6939      	ldr	r1, [r7, #16]
 800b6fe:	6978      	ldr	r0, [r7, #20]
 800b700:	f7f5 fa10 	bl	8000b24 <__addsf3>
 800b704:	4603      	mov	r3, r0
 800b706:	4619      	mov	r1, r3
 800b708:	4628      	mov	r0, r5
 800b70a:	f7f5 fb13 	bl	8000d34 <__aeabi_fmul>
 800b70e:	4603      	mov	r3, r0
 800b710:	4619      	mov	r1, r3
 800b712:	4620      	mov	r0, r4
 800b714:	f7f5 fa04 	bl	8000b20 <__aeabi_fsub>
 800b718:	4603      	mov	r3, r0
 800b71a:	461c      	mov	r4, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	4618      	mov	r0, r3
 800b726:	f7f5 fb05 	bl	8000d34 <__aeabi_fmul>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4619      	mov	r1, r3
 800b72e:	4620      	mov	r0, r4
 800b730:	f7f5 f9f6 	bl	8000b20 <__aeabi_fsub>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800b74a:	6939      	ldr	r1, [r7, #16]
 800b74c:	6978      	ldr	r0, [r7, #20]
 800b74e:	f7f5 f9e9 	bl	8000b24 <__addsf3>
 800b752:	4603      	mov	r3, r0
 800b754:	4619      	mov	r1, r3
 800b756:	4628      	mov	r0, r5
 800b758:	f7f5 faec 	bl	8000d34 <__aeabi_fmul>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4619      	mov	r1, r3
 800b760:	4620      	mov	r0, r4
 800b762:	f7f5 f9dd 	bl	8000b20 <__aeabi_fsub>
 800b766:	4603      	mov	r3, r0
 800b768:	461c      	mov	r4, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b770:	6979      	ldr	r1, [r7, #20]
 800b772:	4618      	mov	r0, r3
 800b774:	f7f5 fade 	bl	8000d34 <__aeabi_fmul>
 800b778:	4603      	mov	r3, r0
 800b77a:	4619      	mov	r1, r3
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7f5 f9cf 	bl	8000b20 <__aeabi_fsub>
 800b782:	4603      	mov	r3, r0
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b792:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b796:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7f5 f9c0 	bl	8000b20 <__aeabi_fsub>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f7f5 fac5 	bl	8000d34 <__aeabi_fmul>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461d      	mov	r5, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800b7b4:	68b9      	ldr	r1, [r7, #8]
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7f5 f9b4 	bl	8000b24 <__addsf3>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7f5 fab7 	bl	8000d34 <__aeabi_fmul>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f7f5 f9a8 	bl	8000b20 <__aeabi_fsub>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b7e0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b7e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7f5 f999 	bl	8000b20 <__aeabi_fsub>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f7f5 fa9e 	bl	8000d34 <__aeabi_fmul>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	461d      	mov	r5, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 800b802:	68b9      	ldr	r1, [r7, #8]
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7f5 f98d 	bl	8000b24 <__addsf3>
 800b80a:	4603      	mov	r3, r0
 800b80c:	4619      	mov	r1, r3
 800b80e:	4620      	mov	r0, r4
 800b810:	f7f5 fa90 	bl	8000d34 <__aeabi_fmul>
 800b814:	4603      	mov	r3, r0
 800b816:	4619      	mov	r1, r3
 800b818:	4628      	mov	r0, r5
 800b81a:	f7f5 f981 	bl	8000b20 <__aeabi_fsub>
 800b81e:	4603      	mov	r3, r0
 800b820:	461a      	mov	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b82e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b832:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7f5 f972 	bl	8000b20 <__aeabi_fsub>
 800b83c:	4603      	mov	r3, r0
 800b83e:	4619      	mov	r1, r3
 800b840:	4620      	mov	r0, r4
 800b842:	f7f5 fa77 	bl	8000d34 <__aeabi_fmul>
 800b846:	4603      	mov	r3, r0
 800b848:	461d      	mov	r5, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7f5 f966 	bl	8000b24 <__addsf3>
 800b858:	4603      	mov	r3, r0
 800b85a:	4619      	mov	r1, r3
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7f5 fa69 	bl	8000d34 <__aeabi_fmul>
 800b862:	4603      	mov	r3, r0
 800b864:	4619      	mov	r1, r3
 800b866:	4628      	mov	r0, r5
 800b868:	f7f5 f95a 	bl	8000b20 <__aeabi_fsub>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b876:	bf00      	nop
 800b878:	3728      	adds	r7, #40	; 0x28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b880 <_ZN15Kalman_Filtresi7EKF_CamEv>:

void Kalman_Filtresi::EKF_Cam() {
 800b880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
	  //X Position Estimation
	  //camx = cam_filt.Run(camx);
	  xpos = (xpos) + st*(vx) + (accXm*st*st)/2;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800b890:	4618      	mov	r0, r3
 800b892:	f7f4 fdc1 	bl	8000418 <__aeabi_f2d>
 800b896:	4680      	mov	r8, r0
 800b898:	4689      	mov	r9, r1
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7f4 fdb6 	bl	8000418 <__aeabi_f2d>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fe08 	bl	80004c8 <__aeabi_dmul>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4640      	mov	r0, r8
 800b8be:	4649      	mov	r1, r9
 800b8c0:	f7f4 fc4c 	bl	800015c <__adddf3>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	461d      	mov	r5, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7f4 fda0 	bl	8000418 <__aeabi_f2d>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b8de:	f7f4 fdf3 	bl	80004c8 <__aeabi_dmul>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b8f0:	f7f4 fdea 	bl	80004c8 <__aeabi_dmul>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f04f 0200 	mov.w	r2, #0
 800b900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b904:	f7f4 ff0a 	bl	800071c <__aeabi_ddiv>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fc24 	bl	800015c <__adddf3>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4610      	mov	r0, r2
 800b91a:	4619      	mov	r1, r3
 800b91c:	f7f5 f8ac 	bl	8000a78 <__aeabi_d2f>
 800b920:	4602      	mov	r2, r0
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	  vx = (vx) + accXm*(st);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f4 fd72 	bl	8000418 <__aeabi_f2d>
 800b934:	4604      	mov	r4, r0
 800b936:	460d      	mov	r5, r1
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f4 fd6a 	bl	8000418 <__aeabi_f2d>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b94a:	f7f4 fdbd 	bl	80004c8 <__aeabi_dmul>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	4620      	mov	r0, r4
 800b954:	4629      	mov	r1, r5
 800b956:	f7f4 fc01 	bl	800015c <__adddf3>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4610      	mov	r0, r2
 800b960:	4619      	mov	r1, r3
 800b962:	f7f5 f889 	bl	8000a78 <__aeabi_d2f>
 800b966:	4602      	mov	r2, r0
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	  S11_x = S11_x + spx + S21_x*st + (st*st*(S12_x + S22_x*st))/st;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7f5 f8d1 	bl	8000b24 <__addsf3>
 800b982:	4603      	mov	r3, r0
 800b984:	4618      	mov	r0, r3
 800b986:	f7f4 fd47 	bl	8000418 <__aeabi_f2d>
 800b98a:	4604      	mov	r4, r0
 800b98c:	460d      	mov	r5, r1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b994:	4618      	mov	r0, r3
 800b996:	f7f4 fd3f 	bl	8000418 <__aeabi_f2d>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b9a0:	f7f4 fd92 	bl	80004c8 <__aeabi_dmul>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f4 fbd6 	bl	800015c <__adddf3>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4690      	mov	r8, r2
 800b9b6:	4699      	mov	r9, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b9c4:	f7f4 fd80 	bl	80004c8 <__aeabi_dmul>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4692      	mov	sl, r2
 800b9ce:	469b      	mov	fp, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f4 fd1e 	bl	8000418 <__aeabi_f2d>
 800b9dc:	4604      	mov	r4, r0
 800b9de:	460d      	mov	r5, r1
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f4 fd16 	bl	8000418 <__aeabi_f2d>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800b9f2:	f7f4 fd69 	bl	80004c8 <__aeabi_dmul>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7f4 fbad 	bl	800015c <__adddf3>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4650      	mov	r0, sl
 800ba08:	4659      	mov	r1, fp
 800ba0a:	f7f4 fd5d 	bl	80004c8 <__aeabi_dmul>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4610      	mov	r0, r2
 800ba14:	4619      	mov	r1, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ba1c:	f7f4 fe7e 	bl	800071c <__aeabi_ddiv>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4640      	mov	r0, r8
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f4 fb98 	bl	800015c <__adddf3>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4610      	mov	r0, r2
 800ba32:	4619      	mov	r1, r3
 800ba34:	f7f5 f820 	bl	8000a78 <__aeabi_d2f>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  S12_x = S12_x + S22_x*st;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f4 fce6 	bl	8000418 <__aeabi_f2d>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f4 fcde 	bl	8000418 <__aeabi_f2d>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800ba62:	f7f4 fd31 	bl	80004c8 <__aeabi_dmul>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fb75 	bl	800015c <__adddf3>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4610      	mov	r0, r2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f7f4 fffd 	bl	8000a78 <__aeabi_d2f>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  S21_x = S21_x + svx + S22_x*(st);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ba92:	4619      	mov	r1, r3
 800ba94:	4610      	mov	r0, r2
 800ba96:	f7f5 f845 	bl	8000b24 <__addsf3>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7f4 fcbb 	bl	8000418 <__aeabi_f2d>
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800baac:	4618      	mov	r0, r3
 800baae:	f7f4 fcb3 	bl	8000418 <__aeabi_f2d>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800bab8:	f7f4 fd06 	bl	80004c8 <__aeabi_dmul>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4620      	mov	r0, r4
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7f4 fb4a 	bl	800015c <__adddf3>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4610      	mov	r0, r2
 800bace:	4619      	mov	r1, r3
 800bad0:	f7f4 ffd2 	bl	8000a78 <__aeabi_d2f>
 800bad4:	4602      	mov	r2, r0
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	  //S22_x = S22_x;


	  //X Position Correction
	  float Kt11 = S11_x/(Qc + S11_x);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800baee:	4619      	mov	r1, r3
 800baf0:	4610      	mov	r0, r2
 800baf2:	f7f5 f817 	bl	8000b24 <__addsf3>
 800baf6:	4603      	mov	r3, r0
 800baf8:	4619      	mov	r1, r3
 800bafa:	4620      	mov	r0, r4
 800bafc:	f7f5 f9ce 	bl	8000e9c <__aeabi_fdiv>
 800bb00:	4603      	mov	r3, r0
 800bb02:	60fb      	str	r3, [r7, #12]
	  float Kt21 = S21_x/(Qc + S11_x);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb16:	4619      	mov	r1, r3
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7f5 f803 	bl	8000b24 <__addsf3>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4619      	mov	r1, r3
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7f5 f9ba 	bl	8000e9c <__aeabi_fdiv>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	60bb      	str	r3, [r7, #8]



	  xpos = (xpos) + (Kt11)*(camx - (xpos));
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 419c 	ldr.w	r4, [r3, #412]	; 0x19c
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4610      	mov	r0, r2
 800bb42:	f7f4 ffed 	bl	8000b20 <__aeabi_fsub>
 800bb46:	4603      	mov	r3, r0
 800bb48:	68f9      	ldr	r1, [r7, #12]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f5 f8f2 	bl	8000d34 <__aeabi_fmul>
 800bb50:	4603      	mov	r3, r0
 800bb52:	4619      	mov	r1, r3
 800bb54:	4620      	mov	r0, r4
 800bb56:	f7f4 ffe5 	bl	8000b24 <__addsf3>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

	  vx = (vx) + (Kt21)*(camx - (xpos));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800bb76:	4619      	mov	r1, r3
 800bb78:	4610      	mov	r0, r2
 800bb7a:	f7f4 ffd1 	bl	8000b20 <__aeabi_fsub>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7f5 f8d6 	bl	8000d34 <__aeabi_fmul>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f7f4 ffc9 	bl	8000b24 <__addsf3>
 800bb92:	4603      	mov	r3, r0
 800bb94:	461a      	mov	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0


	  S11_x = -S11_x*((Kt11) - 1);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bba2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bba6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7f4 ffb8 	bl	8000b20 <__aeabi_fsub>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f7f5 f8bd 	bl	8000d34 <__aeabi_fmul>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	  S12_x = -S12_x*((Kt11) - 1);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bbce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7f4 ffa4 	bl	8000b20 <__aeabi_fsub>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f7f5 f8a9 	bl	8000d34 <__aeabi_fmul>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	  S21_x = S21_x - S11_x*(Kt21);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbf8:	68b9      	ldr	r1, [r7, #8]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f5 f89a 	bl	8000d34 <__aeabi_fmul>
 800bc00:	4603      	mov	r3, r0
 800bc02:	4619      	mov	r1, r3
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7f4 ff8b 	bl	8000b20 <__aeabi_fsub>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  S22_x = S22_x - S12_x*(Kt21);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f5 f886 	bl	8000d34 <__aeabi_fmul>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7f4 ff77 	bl	8000b20 <__aeabi_fsub>
 800bc32:	4603      	mov	r3, r0
 800bc34:	461a      	mov	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc


}
 800bc3c:	bf00      	nop
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800bc48 <_ZN15Kalman_Filtresi3RunEv>:
void Kalman_Filtresi::Run() {
 800bc48:	b590      	push	{r4, r7, lr}
 800bc4a:	b08d      	sub	sp, #52	; 0x34
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]



  float A;
  float accX = acc[0];
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bc56:	62bb      	str	r3, [r7, #40]	; 0x28
  float accY = acc[1];
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
  float accZ = acc[2];
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bc66:	623b      	str	r3, [r7, #32]

  float gyroX = gyro[0];
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bc6e:	61fb      	str	r3, [r7, #28]
  float gyroY = gyro[1];
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bc76:	61bb      	str	r3, [r7, #24]
  float gyroZ = gyro[2];
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bc7e:	617b      	str	r3, [r7, #20]
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d012      	beq.n	800bcb0 <_ZN15Kalman_Filtresi3RunEv+0x68>
  	//float alpha = 0.998;
  	//float alpha = 0.998;
    //pitch_comp=(pitch_gyro+pitch_eski)*alpha+pitch_acc*(1-alpha);	//Tümleyen filtre
    //roll_comp =(roll_gyro+roll_eski)*alpha+roll_acc*(1-alpha);		//Tümleyen filtre

    EKF_Attitude(ROLL);
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fe fa17 	bl	800a0c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800bc92:	2101      	movs	r1, #1
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7fe fa13 	bl	800a0c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800bc9a:	2102      	movs	r1, #2
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7fe fa0f 	bl	800a0c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>

    EKF_Alt();
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff f87c 	bl	800ada0 <_ZN15Kalman_Filtresi7EKF_AltEv>

    EKF_Cam();
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff fde9 	bl	800b880 <_ZN15Kalman_Filtresi7EKF_CamEv>
 800bcae:	e084      	b.n	800bdba <_ZN15Kalman_Filtresi3RunEv+0x172>
    }


    else {

    	for(int i=0; i<2000; i++) {
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bcba:	da5e      	bge.n	800bd7a <_ZN15Kalman_Filtresi3RunEv+0x132>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800bcbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc0:	f7f5 f838 	bl	8000d34 <__aeabi_fmul>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	461c      	mov	r4, r3
 800bcc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bccc:	f7f5 f832 	bl	8000d34 <__aeabi_fmul>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f7f4 ff25 	bl	8000b24 <__addsf3>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	461c      	mov	r4, r3
 800bcde:	6a39      	ldr	r1, [r7, #32]
 800bce0:	6a38      	ldr	r0, [r7, #32]
 800bce2:	f7f5 f827 	bl	8000d34 <__aeabi_fmul>
 800bce6:	4603      	mov	r3, r0
 800bce8:	4619      	mov	r1, r3
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7f4 ff1a 	bl	8000b24 <__addsf3>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f5 febc 	bl	8001a70 <_ZSt4sqrtf>
 800bcf8:	6138      	str	r0, [r7, #16]

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800bcfa:	6939      	ldr	r1, [r7, #16]
 800bcfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcfe:	f7f5 f8cd 	bl	8000e9c <__aeabi_fdiv>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f5 fe75 	bl	80019f4 <_ZSt4asinf>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd12:	4619      	mov	r1, r3
 800bd14:	4610      	mov	r0, r2
 800bd16:	f7f5 f80d 	bl	8000d34 <__aeabi_fmul>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	60fb      	str	r3, [r7, #12]
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800bd1e:	6939      	ldr	r1, [r7, #16]
 800bd20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd22:	f7f5 f8bb 	bl	8000e9c <__aeabi_fdiv>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f5 fe63 	bl	80019f4 <_ZSt4asinf>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd36:	4619      	mov	r1, r3
 800bd38:	4610      	mov	r0, r2
 800bd3a:	f7f4 fffb 	bl	8000d34 <__aeabi_fmul>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	60bb      	str	r3, [r7, #8]

        	ROLL_OFFSET += roll_acc;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7f4 feea 	bl	8000b24 <__addsf3>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461a      	mov	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
        	PITCH_OFFSET += pitch_acc;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800bd60:	68f9      	ldr	r1, [r7, #12]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f4 fede 	bl	8000b24 <__addsf3>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    	for(int i=0; i<2000; i++) {
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	3301      	adds	r3, #1
 800bd76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd78:	e79c      	b.n	800bcb4 <_ZN15Kalman_Filtresi3RunEv+0x6c>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800bd80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd84:	4929      	ldr	r1, [pc, #164]	; (800be2c <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7f5 f888 	bl	8000e9c <__aeabi_fdiv>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800bd9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bda0:	4922      	ldr	r1, [pc, #136]	; (800be2c <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f5 f87a 	bl	8000e9c <__aeabi_fdiv>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	461a      	mov	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    	gyro_ready = true;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    state.angles[1] = pitch_ekf;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    state.angles[2] = yaw_ekf;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    state.rates[0] = roll_rate;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    state.rates[1] = pitch_rate;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691a      	ldr	r2, [r3, #16]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.rates[2] = -1*yaw_rate;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    state.bias[0] = roll_bias;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    state.bias[1] = pitch_bias;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.bias[2] = yaw_bias;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

}
 800be24:	bf00      	nop
 800be26:	3734      	adds	r7, #52	; 0x34
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd90      	pop	{r4, r7, pc}
 800be2c:	44fa0000 	.word	0x44fa0000

0800be30 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fc8d 	bl	800c75e <_ZN3lpfD1Ev>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fc87 	bl	800c75e <_ZN3lpfD1Ev>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	0000      	movs	r0, r0
 800be5c:	0000      	movs	r0, r0
	...

0800be60 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af04      	add	r7, sp, #16
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a25      	ldr	r2, [pc, #148]	; (800bf00 <_ZN3PIDC1Ev+0xa0>)
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a24      	ldr	r2, [pc, #144]	; (800bf04 <_ZN3PIDC1Ev+0xa4>)
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800be7a:	609a      	str	r2, [r3, #8]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	4618      	mov	r0, r3
 800be82:	f7f4 ff03 	bl	8000c8c <__aeabi_i2f>
 800be86:	4603      	mov	r3, r0
 800be88:	4619      	mov	r1, r3
 800be8a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800be8e:	f7f5 f805 	bl	8000e9c <__aeabi_fdiv>
 800be92:	4603      	mov	r3, r0
 800be94:	461a      	mov	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60da      	str	r2, [r3, #12]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a1a      	ldr	r2, [pc, #104]	; (800bf08 <_ZN3PIDC1Ev+0xa8>)
 800be9e:	611a      	str	r2, [r3, #16]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7f4 ff42 	bl	8000d34 <__aeabi_fmul>
 800beb0:	4603      	mov	r3, r0
 800beb2:	461a      	mov	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	615a      	str	r2, [r3, #20]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bebe:	a30c      	add	r3, pc, #48	; (adr r3, 800bef0 <_ZN3PIDC1Ev+0x90>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bec8:	a309      	add	r3, pc, #36	; (adr r3, 800bef0 <_ZN3PIDC1Ev+0x90>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	e9cd 2300 	strd	r2, r3, [sp]
 800bed2:	a309      	add	r3, pc, #36	; (adr r3, 800bef8 <_ZN3PIDC1Ev+0x98>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	4608      	mov	r0, r1
 800beda:	f000 fbcf 	bl	800c67c <_ZN3lpfC1Eddd>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bee4:	659a      	str	r2, [r3, #88]	; 0x58
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	de7ea5f8 	.word	0xde7ea5f8
 800bef4:	3fb2a454 	.word	0x3fb2a454
 800bef8:	ab367a10 	.word	0xab367a10
 800befc:	3feb573e 	.word	0x3feb573e
 800bf00:	42f00000 	.word	0x42f00000
 800bf04:	c2f00000 	.word	0xc2f00000
 800bf08:	3e99999a 	.word	0x3e99999a

0800bf0c <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	68b8      	ldr	r0, [r7, #8]
 800bf1e:	f7f4 fdff 	bl	8000b20 <__aeabi_fsub>
 800bf22:	4603      	mov	r3, r0
 800bf24:	461a      	mov	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ie_roll += e_angle*st;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f7f4 fef9 	bl	8000d34 <__aeabi_fmul>
 800bf42:	4603      	mov	r3, r0
 800bf44:	4619      	mov	r1, r3
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7f4 fdec 	bl	8000b24 <__addsf3>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	66da      	str	r2, [r3, #108]	; 0x6c
	P = Kp_angle*e_angle;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6838      	ldr	r0, [r7, #0]
 800bf5e:	f7f4 fee9 	bl	8000d34 <__aeabi_fmul>
 800bf62:	4603      	mov	r3, r0
 800bf64:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf6e:	f7f4 fee1 	bl	8000d34 <__aeabi_fmul>
 800bf72:	4603      	mov	r3, r0
 800bf74:	613b      	str	r3, [r7, #16]
    return P+I;
 800bf76:	6939      	ldr	r1, [r7, #16]
 800bf78:	6978      	ldr	r0, [r7, #20]
 800bf7a:	f7f4 fdd3 	bl	8000b24 <__addsf3>
 800bf7e:	4603      	mov	r3, r0

}
 800bf80:	4618      	mov	r0, r3
 800bf82:	371c      	adds	r7, #28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd90      	pop	{r4, r7, pc}

0800bf88 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	; 0x28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d90e      	bls.n	800bfbe <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f4 fdbc 	bl	8000b24 <__addsf3>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = vz_def;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbc:	e01c      	b.n	800bff8 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	f240 5213 	movw	r2, #1299	; 0x513
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d810      	bhi.n	800bfea <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	68b8      	ldr	r0, [r7, #8]
 800bfd0:	f7f4 fda6 	bl	8000b20 <__aeabi_fsub>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = -1 * vz_def;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe8:	e006      	b.n	800bff8 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		v_des = 0;
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bffc:	f7f4 fd90 	bl	8000b20 <__aeabi_fsub>
 800c000:	4603      	mov	r3, r0
 800c002:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800c004:	6a39      	ldr	r1, [r7, #32]
 800c006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c008:	f7f4 fe94 	bl	8000d34 <__aeabi_fmul>
 800c00c:	4603      	mov	r3, r0
 800c00e:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	68b8      	ldr	r0, [r7, #8]
 800c014:	f7f4 fd84 	bl	8000b20 <__aeabi_fsub>
 800c018:	4603      	mov	r3, r0
 800c01a:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800c01c:	69b9      	ldr	r1, [r7, #24]
 800c01e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c020:	f7f4 fe88 	bl	8000d34 <__aeabi_fmul>
 800c024:	4603      	mov	r3, r0
 800c026:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800c028:	6979      	ldr	r1, [r7, #20]
 800c02a:	69f8      	ldr	r0, [r7, #28]
 800c02c:	f7f4 fd7a 	bl	8000b24 <__addsf3>
 800c030:	4603      	mov	r3, r0
 800c032:	613b      	str	r3, [r7, #16]
    return PI;
 800c034:	693b      	ldr	r3, [r7, #16]

}
 800c036:	4618      	mov	r0, r3
 800c038:	3728      	adds	r7, #40	; 0x28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800c040:	b5b0      	push	{r4, r5, r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f4 f9e2 	bl	8000418 <__aeabi_f2d>
 800c054:	a31e      	add	r3, pc, #120	; (adr r3, 800c0d0 <_ZN3PID6RateFFEf+0x90>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 fa35 	bl	80004c8 <__aeabi_dmul>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4614      	mov	r4, r2
 800c064:	461d      	mov	r5, r3
 800c066:	6838      	ldr	r0, [r7, #0]
 800c068:	f7f4 f9d6 	bl	8000418 <__aeabi_f2d>
 800c06c:	a31a      	add	r3, pc, #104	; (adr r3, 800c0d8 <_ZN3PID6RateFFEf+0x98>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 fa29 	bl	80004c8 <__aeabi_dmul>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7f4 f86d 	bl	800015c <__adddf3>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4614      	mov	r4, r2
 800c088:	461d      	mov	r5, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f4 f9c2 	bl	8000418 <__aeabi_f2d>
 800c094:	a310      	add	r3, pc, #64	; (adr r3, 800c0d8 <_ZN3PID6RateFFEf+0x98>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 fa15 	bl	80004c8 <__aeabi_dmul>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	f7f4 f857 	bl	8000158 <__aeabi_dsub>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f7f4 fce1 	bl	8000a78 <__aeabi_d2f>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0be:	68f9      	ldr	r1, [r7, #12]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f4 fe37 	bl	8000d34 <__aeabi_fmul>
 800c0c6:	4603      	mov	r3, r0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d0:	1eb851ec 	.word	0x1eb851ec
 800c0d4:	3fefeb85 	.word	0x3fefeb85
 800c0d8:	538ef34d 	.word	0x538ef34d
 800c0dc:	3fb72474 	.word	0x3fb72474

0800c0e0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f7f4 fd15 	bl	8000b20 <__aeabi_fsub>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	65da      	str	r2, [r3, #92]	; 0x5c
	ie_roll_rate += e_roll*st;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7f4 fe11 	bl	8000d34 <__aeabi_fmul>
 800c112:	4603      	mov	r3, r0
 800c114:	4619      	mov	r1, r3
 800c116:	4620      	mov	r0, r4
 800c118:	f7f4 fd04 	bl	8000b24 <__addsf3>
 800c11c:	4603      	mov	r3, r0
 800c11e:	461a      	mov	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	675a      	str	r2, [r3, #116]	; 0x74
	P = Kp * e_roll;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7f4 fe02 	bl	8000d34 <__aeabi_fmul>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c13e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c140:	4618      	mov	r0, r3
 800c142:	f7f4 fdf7 	bl	8000d34 <__aeabi_fmul>
 800c146:	4603      	mov	r3, r0
 800c148:	461a      	mov	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	4619      	mov	r1, r3
 800c156:	68b8      	ldr	r0, [r7, #8]
 800c158:	f7f4 fce2 	bl	8000b20 <__aeabi_fsub>
 800c15c:	4603      	mov	r3, r0
 800c15e:	617b      	str	r3, [r7, #20]
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7f4 fcda 	bl	8000b20 <__aeabi_fsub>
 800c16c:	4603      	mov	r3, r0
 800c16e:	461a      	mov	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f7f4 fe90 	bl	8000e9c <__aeabi_fdiv>
 800c17c:	4603      	mov	r3, r0
 800c17e:	613b      	str	r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	4619      	mov	r1, r3
 800c186:	6978      	ldr	r0, [r7, #20]
 800c188:	f7f4 fe88 	bl	8000e9c <__aeabi_fdiv>
 800c18c:	4603      	mov	r3, r0
 800c18e:	617b      	str	r3, [r7, #20]
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3328      	adds	r3, #40	; 0x28
 800c194:	6939      	ldr	r1, [r7, #16]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 fa8b 	bl	800c6b2 <_ZN3lpf3RunEf>
 800c19c:	6138      	str	r0, [r7, #16]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c1a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7f4 fdc4 	bl	8000d34 <__aeabi_fmul>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	6939      	ldr	r1, [r7, #16]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f4 fcb5 	bl	8000b20 <__aeabi_fsub>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f4 fdba 	bl	8000d34 <__aeabi_fmul>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f7f4 fca3 	bl	8000b24 <__addsf3>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7f4 fc9a 	bl	8000b24 <__addsf3>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c20a:	4b0e      	ldr	r3, [pc, #56]	; (800c244 <_ZN3PID9PID_Rate2Efffffff+0x164>)
 800c20c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 f975 	bl	800c500 <_ZN3PID3SatEfii>
 800c216:	4602      	mov	r2, r0
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	67da      	str	r2, [r3, #124]	; 0x7c
	alpha_dot_des_ = alpha_dot_des;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	621a      	str	r2, [r3, #32]
	alpha_dot_ = alpha_dot;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	625a      	str	r2, [r3, #36]	; 0x24
	return pd;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd90      	pop	{r4, r7, pc}
 800c242:	bf00      	nop
 800c244:	fffffed4 	.word	0xfffffed4

0800c248 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800c248:	b590      	push	{r4, r7, lr}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	68b8      	ldr	r0, [r7, #8]
 800c25a:	f7f4 fc61 	bl	8000b20 <__aeabi_fsub>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	65da      	str	r2, [r3, #92]	; 0x5c
  float e_roll_der = - alpha_dot;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c26c:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c272:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	4618      	mov	r0, r3
 800c27a:	f7f4 ff37 	bl	80010ec <__aeabi_f2iz>
 800c27e:	4604      	mov	r4, r0
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c284:	4618      	mov	r0, r3
 800c286:	f7f4 ff31 	bl	80010ec <__aeabi_f2iz>
 800c28a:	4603      	mov	r3, r0
 800c28c:	429c      	cmp	r4, r3
 800c28e:	d018      	beq.n	800c2c2 <_ZN3PID7PD_RateEfffff+0x7a>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c294:	4619      	mov	r1, r3
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 f8d9 	bl	800c44e <_ZN3PID3sgnEf>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461c      	mov	r4, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f000 f8d1 	bl	800c44e <_ZN3PID3sgnEf>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	429c      	cmp	r4, r3
 800c2b0:	bf0c      	ite	eq
 800c2b2:	2301      	moveq	r3, #1
 800c2b4:	2300      	movne	r3, #0
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <_ZN3PID7PD_RateEfffff+0x7a>
      e_roll_int = 0;
 800c2bc:	f04f 0300 	mov.w	r3, #0
 800c2c0:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7f4 fd33 	bl	8000d34 <__aeabi_fmul>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7f4 fc20 	bl	8000b20 <__aeabi_fsub>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	494b      	ldr	r1, [pc, #300]	; (800c410 <_ZN3PID7PD_RateEfffff+0x1c8>)
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f4 fd25 	bl	8000d34 <__aeabi_fmul>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	de_int += de_filt*st;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	4619      	mov	r1, r3
 800c306:	4610      	mov	r0, r2
 800c308:	f7f4 fd14 	bl	8000d34 <__aeabi_fmul>
 800c30c:	4603      	mov	r3, r0
 800c30e:	4619      	mov	r1, r3
 800c310:	4620      	mov	r0, r4
 800c312:	f7f4 fc07 	bl	8000b24 <__addsf3>
 800c316:	4603      	mov	r3, r0
 800c318:	461a      	mov	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	de = e_roll - e_eski_roll;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c328:	4619      	mov	r1, r3
 800c32a:	4610      	mov	r0, r2
 800c32c:	f7f4 fbf8 	bl	8000b20 <__aeabi_fsub>
 800c330:	4603      	mov	r3, r0
 800c332:	461a      	mov	r2, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	e_eski_roll = e_roll;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	665a      	str	r2, [r3, #100]	; 0x64

  ie_roll += e_roll_int*st;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	6979      	ldr	r1, [r7, #20]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f4 fcf1 	bl	8000d34 <__aeabi_fmul>
 800c352:	4603      	mov	r3, r0
 800c354:	4619      	mov	r1, r3
 800c356:	4620      	mov	r0, r4
 800c358:	f7f4 fbe4 	bl	8000b24 <__addsf3>
 800c35c:	4603      	mov	r3, r0
 800c35e:	461a      	mov	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	66da      	str	r2, [r3, #108]	; 0x6c

  ie_roll_sat = ie_roll;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	679a      	str	r2, [r3, #120]	; 0x78
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	4618      	mov	r0, r3
 800c374:	f7f4 fcde 	bl	8000d34 <__aeabi_fmul>
 800c378:	4603      	mov	r3, r0
 800c37a:	461a      	mov	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c394:	4618      	mov	r0, r3
 800c396:	f7f4 fccd 	bl	8000d34 <__aeabi_fmul>
 800c39a:	4603      	mov	r3, r0
 800c39c:	461a      	mov	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	//D = lpf.update(D);
	pd = P + I + D;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f7f4 fbb6 	bl	8000b24 <__addsf3>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f7f4 fbad 	bl	8000b24 <__addsf3>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  	pd_roll_buf = pd;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <_ZN3PID7PD_RateEfffff+0x1cc>)
 800c3e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 f888 	bl	800c500 <_ZN3PID3SatEfii>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pd_roll_sat_buf = pd;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	67da      	str	r2, [r3, #124]	; 0x7c
    return pd;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98

}
 800c408:	4618      	mov	r0, r3
 800c40a:	371c      	adds	r7, #28
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd90      	pop	{r4, r7, pc}
 800c410:	42c80000 	.word	0x42c80000
 800c414:	fffffed4 	.word	0xfffffed4

0800c418 <_ZN3PID5resetEv>:

void PID::reset() {
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate = 0;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f04f 0200 	mov.w	r2, #0
 800c42e:	675a      	str	r2, [r3, #116]	; 0x74
	de_filt = 0;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_int = 0;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f04f 0200 	mov.w	r2, #0
 800c440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c444:	bf00      	nop
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	bc80      	pop	{r7}
 800c44c:	4770      	bx	lr

0800c44e <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800c458:	f04f 0100 	mov.w	r1, #0
 800c45c:	6838      	ldr	r0, [r7, #0]
 800c45e:	f7f4 fe07 	bl	8001070 <__aeabi_fcmplt>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <_ZN3PID3sgnEf+0x1e>
 800c468:	23ff      	movs	r3, #255	; 0xff
 800c46a:	e00a      	b.n	800c482 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800c46c:	f04f 0100 	mov.w	r1, #0
 800c470:	6838      	ldr	r0, [r7, #0]
 800c472:	f7f4 fe1b 	bl	80010ac <__aeabi_fcmpgt>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <_ZN3PID3sgnEf+0x32>
 800c47c:	2301      	movs	r3, #1
 800c47e:	e000      	b.n	800c482 <_ZN3PID3sgnEf+0x34>
  return 0;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c4a0:	dd24      	ble.n	800c4ec <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f4 fbf2 	bl	8000c8c <__aeabi_i2f>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	68b8      	ldr	r0, [r7, #8]
 800c4ae:	f7f4 fdfd 	bl	80010ac <__aeabi_fcmpgt>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d005      	beq.n	800c4c4 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7f4 fbe7 	bl	8000c8c <__aeabi_i2f>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	e015      	b.n	800c4f0 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800c4c4:	6838      	ldr	r0, [r7, #0]
 800c4c6:	f7f4 fbe1 	bl	8000c8c <__aeabi_i2f>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	68b8      	ldr	r0, [r7, #8]
 800c4d0:	f7f4 fdce 	bl	8001070 <__aeabi_fcmplt>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d005      	beq.n	800c4e6 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800c4da:	6838      	ldr	r0, [r7, #0]
 800c4dc:	f7f4 fbd6 	bl	8000c8c <__aeabi_i2f>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	e004      	b.n	800c4f0 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	e001      	b.n	800c4f0 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800c4ec:	4b03      	ldr	r3, [pc, #12]	; (800c4fc <_ZN3PID3SatEfiii+0x70>)
 800c4ee:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800c4f0:	697b      	ldr	r3, [r7, #20]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	447a0000 	.word	0x447a0000

0800c500 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7f4 fbbc 	bl	8000c8c <__aeabi_i2f>
 800c514:	4603      	mov	r3, r0
 800c516:	4619      	mov	r1, r3
 800c518:	68b8      	ldr	r0, [r7, #8]
 800c51a:	f7f4 fdc7 	bl	80010ac <__aeabi_fcmpgt>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7f4 fbb1 	bl	8000c8c <__aeabi_i2f>
 800c52a:	4603      	mov	r3, r0
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	e012      	b.n	800c556 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800c530:	6838      	ldr	r0, [r7, #0]
 800c532:	f7f4 fbab 	bl	8000c8c <__aeabi_i2f>
 800c536:	4603      	mov	r3, r0
 800c538:	4619      	mov	r1, r3
 800c53a:	68b8      	ldr	r0, [r7, #8]
 800c53c:	f7f4 fd98 	bl	8001070 <__aeabi_fcmplt>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800c546:	6838      	ldr	r0, [r7, #0]
 800c548:	f7f4 fba0 	bl	8000c8c <__aeabi_i2f>
 800c54c:	4603      	mov	r3, r0
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e001      	b.n	800c556 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800c556:	697b      	ldr	r3, [r7, #20]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZN3PID7pwm2motEti>:

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
}

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	460b      	mov	r3, r1
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800c56e:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <_ZN3PID7pwm2motEti+0x84>)
 800c570:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800c572:	4b1d      	ldr	r3, [pc, #116]	; (800c5e8 <_ZN3PID7pwm2motEti+0x88>)
 800c574:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800c57c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <_ZN3PID7pwm2motEti+0x8c>)
 800c57e:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7f4 fb83 	bl	8000c8c <__aeabi_i2f>
 800c586:	4604      	mov	r4, r0
 800c588:	897b      	ldrh	r3, [r7, #10]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7f4 fb7a 	bl	8000c84 <__aeabi_ui2f>
 800c590:	4603      	mov	r3, r0
 800c592:	69f9      	ldr	r1, [r7, #28]
 800c594:	4618      	mov	r0, r3
 800c596:	f7f4 fac3 	bl	8000b20 <__aeabi_fsub>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4619      	mov	r1, r3
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f7f4 fbc8 	bl	8000d34 <__aeabi_fmul>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461c      	mov	r4, r3
 800c5a8:	6979      	ldr	r1, [r7, #20]
 800c5aa:	6938      	ldr	r0, [r7, #16]
 800c5ac:	f7f4 fab8 	bl	8000b20 <__aeabi_fsub>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f7f4 fbbd 	bl	8000d34 <__aeabi_fmul>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	461c      	mov	r4, r3
 800c5be:	69f9      	ldr	r1, [r7, #28]
 800c5c0:	69b8      	ldr	r0, [r7, #24]
 800c5c2:	f7f4 faad 	bl	8000b20 <__aeabi_fsub>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7f4 fc66 	bl	8000e9c <__aeabi_fdiv>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	6979      	ldr	r1, [r7, #20]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7f4 faa5 	bl	8000b24 <__addsf3>
 800c5da:	4603      	mov	r3, r0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3724      	adds	r7, #36	; 0x24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd90      	pop	{r4, r7, pc}
 800c5e4:	447a0000 	.word	0x447a0000
 800c5e8:	44fa0000 	.word	0x44fa0000
 800c5ec:	44a5c000 	.word	0x44a5c000

0800c5f0 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800c5fa:	4b16      	ldr	r3, [pc, #88]	; (800c654 <_ZN3PID5F2thrEf+0x64>)
 800c5fc:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800c5fe:	4b16      	ldr	r3, [pc, #88]	; (800c658 <_ZN3PID5F2thrEf+0x68>)
 800c600:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800c602:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c606:	6838      	ldr	r0, [r7, #0]
 800c608:	f7f4 fc48 	bl	8000e9c <__aeabi_fdiv>
 800c60c:	4603      	mov	r3, r0
 800c60e:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	6978      	ldr	r0, [r7, #20]
 800c614:	f7f4 fc42 	bl	8000e9c <__aeabi_fdiv>
 800c618:	4603      	mov	r3, r0
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7f5 fa28 	bl	8001a70 <_ZSt4sqrtf>
 800c620:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800c622:	490e      	ldr	r1, [pc, #56]	; (800c65c <_ZN3PID5F2thrEf+0x6c>)
 800c624:	6938      	ldr	r0, [r7, #16]
 800c626:	f7f4 fb85 	bl	8000d34 <__aeabi_fmul>
 800c62a:	4603      	mov	r3, r0
 800c62c:	69b9      	ldr	r1, [r7, #24]
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f4 fc34 	bl	8000e9c <__aeabi_fdiv>
 800c634:	4603      	mov	r3, r0
 800c636:	4909      	ldr	r1, [pc, #36]	; (800c65c <_ZN3PID5F2thrEf+0x6c>)
 800c638:	4618      	mov	r0, r3
 800c63a:	f7f4 fa73 	bl	8000b24 <__addsf3>
 800c63e:	4603      	mov	r3, r0
 800c640:	4618      	mov	r0, r3
 800c642:	f7f4 fd79 	bl	8001138 <__aeabi_f2uiz>
 800c646:	4603      	mov	r3, r0
 800c648:	60fb      	str	r3, [r7, #12]
	return thr;
 800c64a:	68fb      	ldr	r3, [r7, #12]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	3359f513 	.word	0x3359f513
 800c658:	46896e00 	.word	0x46896e00
 800c65c:	447a0000 	.word	0x447a0000

0800c660 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3328      	adds	r3, #40	; 0x28
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f876 	bl	800c75e <_ZN3lpfD1Ev>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800c688:	68f9      	ldr	r1, [r7, #12]
 800c68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c68e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800c692:	68f9      	ldr	r1, [r7, #12]
 800c694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c698:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800c69c:	68f9      	ldr	r1, [r7, #12]
 800c69e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr

0800c6b2 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800c6b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f3 fea5 	bl	8000418 <__aeabi_f2d>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f3 fef7 	bl	80004c8 <__aeabi_dmul>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4690      	mov	r8, r2
 800c6e0:	4699      	mov	r9, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c6e8:	6838      	ldr	r0, [r7, #0]
 800c6ea:	f7f3 fe95 	bl	8000418 <__aeabi_f2d>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f3 fee7 	bl	80004c8 <__aeabi_dmul>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f3 fd2b 	bl	800015c <__adddf3>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4690      	mov	r8, r2
 800c70c:	4699      	mov	r9, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f3 fe7d 	bl	8000418 <__aeabi_f2d>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4620      	mov	r0, r4
 800c724:	4629      	mov	r1, r5
 800c726:	f7f3 fecf 	bl	80004c8 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4640      	mov	r0, r8
 800c730:	4649      	mov	r1, r9
 800c732:	f7f3 fd13 	bl	800015c <__adddf3>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4610      	mov	r0, r2
 800c73c:	4619      	mov	r1, r3
 800c73e:	f7f4 f99b 	bl	8000a78 <__aeabi_d2f>
 800c742:	4603      	mov	r3, r0
 800c744:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	601a      	str	r2, [r3, #0]
	y_ = y;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	605a      	str	r2, [r3, #4]
	return y;
 800c752:	68fb      	ldr	r3, [r7, #12]

}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c75e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800c75e:	b480      	push	{r7}
 800c760:	b083      	sub	sp, #12
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr

0800c772 <_ZdlPv>:
 800c772:	f002 b993 	b.w	800ea9c <free>

0800c776 <_Znwj>:
 800c776:	2801      	cmp	r0, #1
 800c778:	bf38      	it	cc
 800c77a:	2001      	movcc	r0, #1
 800c77c:	b510      	push	{r4, lr}
 800c77e:	4604      	mov	r4, r0
 800c780:	4620      	mov	r0, r4
 800c782:	f002 f983 	bl	800ea8c <malloc>
 800c786:	b930      	cbnz	r0, 800c796 <_Znwj+0x20>
 800c788:	f000 f80c 	bl	800c7a4 <_ZSt15get_new_handlerv>
 800c78c:	b908      	cbnz	r0, 800c792 <_Znwj+0x1c>
 800c78e:	f002 f94b 	bl	800ea28 <abort>
 800c792:	4780      	blx	r0
 800c794:	e7f4      	b.n	800c780 <_Znwj+0xa>
 800c796:	bd10      	pop	{r4, pc}

0800c798 <_ZSt17__throw_bad_allocv>:
 800c798:	b508      	push	{r3, lr}
 800c79a:	f002 f945 	bl	800ea28 <abort>

0800c79e <_ZSt20__throw_length_errorPKc>:
 800c79e:	b508      	push	{r3, lr}
 800c7a0:	f002 f942 	bl	800ea28 <abort>

0800c7a4 <_ZSt15get_new_handlerv>:
 800c7a4:	4b02      	ldr	r3, [pc, #8]	; (800c7b0 <_ZSt15get_new_handlerv+0xc>)
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	f3bf 8f5b 	dmb	ish
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	20000da0 	.word	0x20000da0

0800c7b4 <atanf>:
 800c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c7bc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	4680      	mov	r8, r0
 800c7c4:	db0e      	blt.n	800c7e4 <atanf+0x30>
 800c7c6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c7ca:	dd04      	ble.n	800c7d6 <atanf+0x22>
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	f7f4 f9a9 	bl	8000b24 <__addsf3>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	e003      	b.n	800c7de <atanf+0x2a>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f300 80ce 	bgt.w	800c978 <atanf+0x1c4>
 800c7dc:	4c67      	ldr	r4, [pc, #412]	; (800c97c <atanf+0x1c8>)
 800c7de:	4620      	mov	r0, r4
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e4:	4b66      	ldr	r3, [pc, #408]	; (800c980 <atanf+0x1cc>)
 800c7e6:	429d      	cmp	r5, r3
 800c7e8:	dc0e      	bgt.n	800c808 <atanf+0x54>
 800c7ea:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c7ee:	da08      	bge.n	800c802 <atanf+0x4e>
 800c7f0:	4964      	ldr	r1, [pc, #400]	; (800c984 <atanf+0x1d0>)
 800c7f2:	f7f4 f997 	bl	8000b24 <__addsf3>
 800c7f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c7fa:	f7f4 fc57 	bl	80010ac <__aeabi_fcmpgt>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1ed      	bne.n	800c7de <atanf+0x2a>
 800c802:	f04f 36ff 	mov.w	r6, #4294967295
 800c806:	e01c      	b.n	800c842 <atanf+0x8e>
 800c808:	f000 f914 	bl	800ca34 <fabsf>
 800c80c:	4b5e      	ldr	r3, [pc, #376]	; (800c988 <atanf+0x1d4>)
 800c80e:	4604      	mov	r4, r0
 800c810:	429d      	cmp	r5, r3
 800c812:	dc7c      	bgt.n	800c90e <atanf+0x15a>
 800c814:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c818:	429d      	cmp	r5, r3
 800c81a:	dc67      	bgt.n	800c8ec <atanf+0x138>
 800c81c:	4601      	mov	r1, r0
 800c81e:	f7f4 f981 	bl	8000b24 <__addsf3>
 800c822:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c826:	f7f4 f97b 	bl	8000b20 <__aeabi_fsub>
 800c82a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c82e:	4605      	mov	r5, r0
 800c830:	4620      	mov	r0, r4
 800c832:	f7f4 f977 	bl	8000b24 <__addsf3>
 800c836:	4601      	mov	r1, r0
 800c838:	4628      	mov	r0, r5
 800c83a:	f7f4 fb2f 	bl	8000e9c <__aeabi_fdiv>
 800c83e:	2600      	movs	r6, #0
 800c840:	4604      	mov	r4, r0
 800c842:	4621      	mov	r1, r4
 800c844:	4620      	mov	r0, r4
 800c846:	f7f4 fa75 	bl	8000d34 <__aeabi_fmul>
 800c84a:	4601      	mov	r1, r0
 800c84c:	4607      	mov	r7, r0
 800c84e:	f7f4 fa71 	bl	8000d34 <__aeabi_fmul>
 800c852:	4605      	mov	r5, r0
 800c854:	494d      	ldr	r1, [pc, #308]	; (800c98c <atanf+0x1d8>)
 800c856:	f7f4 fa6d 	bl	8000d34 <__aeabi_fmul>
 800c85a:	494d      	ldr	r1, [pc, #308]	; (800c990 <atanf+0x1dc>)
 800c85c:	f7f4 f962 	bl	8000b24 <__addsf3>
 800c860:	4629      	mov	r1, r5
 800c862:	f7f4 fa67 	bl	8000d34 <__aeabi_fmul>
 800c866:	494b      	ldr	r1, [pc, #300]	; (800c994 <atanf+0x1e0>)
 800c868:	f7f4 f95c 	bl	8000b24 <__addsf3>
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f4 fa61 	bl	8000d34 <__aeabi_fmul>
 800c872:	4949      	ldr	r1, [pc, #292]	; (800c998 <atanf+0x1e4>)
 800c874:	f7f4 f956 	bl	8000b24 <__addsf3>
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f4 fa5b 	bl	8000d34 <__aeabi_fmul>
 800c87e:	4947      	ldr	r1, [pc, #284]	; (800c99c <atanf+0x1e8>)
 800c880:	f7f4 f950 	bl	8000b24 <__addsf3>
 800c884:	4629      	mov	r1, r5
 800c886:	f7f4 fa55 	bl	8000d34 <__aeabi_fmul>
 800c88a:	4945      	ldr	r1, [pc, #276]	; (800c9a0 <atanf+0x1ec>)
 800c88c:	f7f4 f94a 	bl	8000b24 <__addsf3>
 800c890:	4639      	mov	r1, r7
 800c892:	f7f4 fa4f 	bl	8000d34 <__aeabi_fmul>
 800c896:	4943      	ldr	r1, [pc, #268]	; (800c9a4 <atanf+0x1f0>)
 800c898:	4607      	mov	r7, r0
 800c89a:	4628      	mov	r0, r5
 800c89c:	f7f4 fa4a 	bl	8000d34 <__aeabi_fmul>
 800c8a0:	4941      	ldr	r1, [pc, #260]	; (800c9a8 <atanf+0x1f4>)
 800c8a2:	f7f4 f93d 	bl	8000b20 <__aeabi_fsub>
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7f4 fa44 	bl	8000d34 <__aeabi_fmul>
 800c8ac:	493f      	ldr	r1, [pc, #252]	; (800c9ac <atanf+0x1f8>)
 800c8ae:	f7f4 f937 	bl	8000b20 <__aeabi_fsub>
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f4 fa3e 	bl	8000d34 <__aeabi_fmul>
 800c8b8:	493d      	ldr	r1, [pc, #244]	; (800c9b0 <atanf+0x1fc>)
 800c8ba:	f7f4 f931 	bl	8000b20 <__aeabi_fsub>
 800c8be:	4629      	mov	r1, r5
 800c8c0:	f7f4 fa38 	bl	8000d34 <__aeabi_fmul>
 800c8c4:	493b      	ldr	r1, [pc, #236]	; (800c9b4 <atanf+0x200>)
 800c8c6:	f7f4 f92b 	bl	8000b20 <__aeabi_fsub>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7f4 fa32 	bl	8000d34 <__aeabi_fmul>
 800c8d0:	4601      	mov	r1, r0
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	f7f4 f926 	bl	8000b24 <__addsf3>
 800c8d8:	4621      	mov	r1, r4
 800c8da:	f7f4 fa2b 	bl	8000d34 <__aeabi_fmul>
 800c8de:	1c73      	adds	r3, r6, #1
 800c8e0:	4601      	mov	r1, r0
 800c8e2:	d133      	bne.n	800c94c <atanf+0x198>
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f7f4 f91b 	bl	8000b20 <__aeabi_fsub>
 800c8ea:	e772      	b.n	800c7d2 <atanf+0x1e>
 800c8ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c8f0:	f7f4 f916 	bl	8000b20 <__aeabi_fsub>
 800c8f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f7f4 f912 	bl	8000b24 <__addsf3>
 800c900:	4601      	mov	r1, r0
 800c902:	4628      	mov	r0, r5
 800c904:	f7f4 faca 	bl	8000e9c <__aeabi_fdiv>
 800c908:	2601      	movs	r6, #1
 800c90a:	4604      	mov	r4, r0
 800c90c:	e799      	b.n	800c842 <atanf+0x8e>
 800c90e:	4b2a      	ldr	r3, [pc, #168]	; (800c9b8 <atanf+0x204>)
 800c910:	429d      	cmp	r5, r3
 800c912:	dc14      	bgt.n	800c93e <atanf+0x18a>
 800c914:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c918:	f7f4 f902 	bl	8000b20 <__aeabi_fsub>
 800c91c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c920:	4605      	mov	r5, r0
 800c922:	4620      	mov	r0, r4
 800c924:	f7f4 fa06 	bl	8000d34 <__aeabi_fmul>
 800c928:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c92c:	f7f4 f8fa 	bl	8000b24 <__addsf3>
 800c930:	4601      	mov	r1, r0
 800c932:	4628      	mov	r0, r5
 800c934:	f7f4 fab2 	bl	8000e9c <__aeabi_fdiv>
 800c938:	2602      	movs	r6, #2
 800c93a:	4604      	mov	r4, r0
 800c93c:	e781      	b.n	800c842 <atanf+0x8e>
 800c93e:	4601      	mov	r1, r0
 800c940:	481e      	ldr	r0, [pc, #120]	; (800c9bc <atanf+0x208>)
 800c942:	f7f4 faab 	bl	8000e9c <__aeabi_fdiv>
 800c946:	2603      	movs	r6, #3
 800c948:	4604      	mov	r4, r0
 800c94a:	e77a      	b.n	800c842 <atanf+0x8e>
 800c94c:	4b1c      	ldr	r3, [pc, #112]	; (800c9c0 <atanf+0x20c>)
 800c94e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c952:	f7f4 f8e5 	bl	8000b20 <__aeabi_fsub>
 800c956:	4621      	mov	r1, r4
 800c958:	f7f4 f8e2 	bl	8000b20 <__aeabi_fsub>
 800c95c:	4b19      	ldr	r3, [pc, #100]	; (800c9c4 <atanf+0x210>)
 800c95e:	4601      	mov	r1, r0
 800c960:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c964:	f7f4 f8dc 	bl	8000b20 <__aeabi_fsub>
 800c968:	f1b8 0f00 	cmp.w	r8, #0
 800c96c:	4604      	mov	r4, r0
 800c96e:	f6bf af36 	bge.w	800c7de <atanf+0x2a>
 800c972:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c976:	e72c      	b.n	800c7d2 <atanf+0x1e>
 800c978:	4c13      	ldr	r4, [pc, #76]	; (800c9c8 <atanf+0x214>)
 800c97a:	e730      	b.n	800c7de <atanf+0x2a>
 800c97c:	bfc90fdb 	.word	0xbfc90fdb
 800c980:	3edfffff 	.word	0x3edfffff
 800c984:	7149f2ca 	.word	0x7149f2ca
 800c988:	3f97ffff 	.word	0x3f97ffff
 800c98c:	3c8569d7 	.word	0x3c8569d7
 800c990:	3d4bda59 	.word	0x3d4bda59
 800c994:	3d886b35 	.word	0x3d886b35
 800c998:	3dba2e6e 	.word	0x3dba2e6e
 800c99c:	3e124925 	.word	0x3e124925
 800c9a0:	3eaaaaab 	.word	0x3eaaaaab
 800c9a4:	bd15a221 	.word	0xbd15a221
 800c9a8:	3d6ef16b 	.word	0x3d6ef16b
 800c9ac:	3d9d8795 	.word	0x3d9d8795
 800c9b0:	3de38e38 	.word	0x3de38e38
 800c9b4:	3e4ccccd 	.word	0x3e4ccccd
 800c9b8:	401bffff 	.word	0x401bffff
 800c9bc:	bf800000 	.word	0xbf800000
 800c9c0:	0800eda8 	.word	0x0800eda8
 800c9c4:	0800ed98 	.word	0x0800ed98
 800c9c8:	3fc90fdb 	.word	0x3fc90fdb

0800c9cc <cosf>:
 800c9cc:	b507      	push	{r0, r1, r2, lr}
 800c9ce:	4a18      	ldr	r2, [pc, #96]	; (800ca30 <cosf+0x64>)
 800c9d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	dc03      	bgt.n	800c9e2 <cosf+0x16>
 800c9da:	2100      	movs	r1, #0
 800c9dc:	f001 fac4 	bl	800df68 <__kernel_cosf>
 800c9e0:	e004      	b.n	800c9ec <cosf+0x20>
 800c9e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c9e6:	db04      	blt.n	800c9f2 <cosf+0x26>
 800c9e8:	f7f4 f89a 	bl	8000b20 <__aeabi_fsub>
 800c9ec:	b003      	add	sp, #12
 800c9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9f2:	4669      	mov	r1, sp
 800c9f4:	f001 f908 	bl	800dc08 <__ieee754_rem_pio2f>
 800c9f8:	f000 0203 	and.w	r2, r0, #3
 800c9fc:	2a01      	cmp	r2, #1
 800c9fe:	d005      	beq.n	800ca0c <cosf+0x40>
 800ca00:	2a02      	cmp	r2, #2
 800ca02:	d00a      	beq.n	800ca1a <cosf+0x4e>
 800ca04:	b972      	cbnz	r2, 800ca24 <cosf+0x58>
 800ca06:	9901      	ldr	r1, [sp, #4]
 800ca08:	9800      	ldr	r0, [sp, #0]
 800ca0a:	e7e7      	b.n	800c9dc <cosf+0x10>
 800ca0c:	9901      	ldr	r1, [sp, #4]
 800ca0e:	9800      	ldr	r0, [sp, #0]
 800ca10:	f001 fde0 	bl	800e5d4 <__kernel_sinf>
 800ca14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca18:	e7e8      	b.n	800c9ec <cosf+0x20>
 800ca1a:	9901      	ldr	r1, [sp, #4]
 800ca1c:	9800      	ldr	r0, [sp, #0]
 800ca1e:	f001 faa3 	bl	800df68 <__kernel_cosf>
 800ca22:	e7f7      	b.n	800ca14 <cosf+0x48>
 800ca24:	2201      	movs	r2, #1
 800ca26:	9901      	ldr	r1, [sp, #4]
 800ca28:	9800      	ldr	r0, [sp, #0]
 800ca2a:	f001 fdd3 	bl	800e5d4 <__kernel_sinf>
 800ca2e:	e7dd      	b.n	800c9ec <cosf+0x20>
 800ca30:	3f490fd8 	.word	0x3f490fd8

0800ca34 <fabsf>:
 800ca34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ca38:	4770      	bx	lr
	...

0800ca3c <sinf>:
 800ca3c:	b507      	push	{r0, r1, r2, lr}
 800ca3e:	4a19      	ldr	r2, [pc, #100]	; (800caa4 <sinf+0x68>)
 800ca40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ca44:	4293      	cmp	r3, r2
 800ca46:	4601      	mov	r1, r0
 800ca48:	dc04      	bgt.n	800ca54 <sinf+0x18>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	f001 fdc1 	bl	800e5d4 <__kernel_sinf>
 800ca52:	e004      	b.n	800ca5e <sinf+0x22>
 800ca54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca58:	db04      	blt.n	800ca64 <sinf+0x28>
 800ca5a:	f7f4 f861 	bl	8000b20 <__aeabi_fsub>
 800ca5e:	b003      	add	sp, #12
 800ca60:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca64:	4669      	mov	r1, sp
 800ca66:	f001 f8cf 	bl	800dc08 <__ieee754_rem_pio2f>
 800ca6a:	f000 0003 	and.w	r0, r0, #3
 800ca6e:	2801      	cmp	r0, #1
 800ca70:	d006      	beq.n	800ca80 <sinf+0x44>
 800ca72:	2802      	cmp	r0, #2
 800ca74:	d009      	beq.n	800ca8a <sinf+0x4e>
 800ca76:	b980      	cbnz	r0, 800ca9a <sinf+0x5e>
 800ca78:	2201      	movs	r2, #1
 800ca7a:	9901      	ldr	r1, [sp, #4]
 800ca7c:	9800      	ldr	r0, [sp, #0]
 800ca7e:	e7e6      	b.n	800ca4e <sinf+0x12>
 800ca80:	9901      	ldr	r1, [sp, #4]
 800ca82:	9800      	ldr	r0, [sp, #0]
 800ca84:	f001 fa70 	bl	800df68 <__kernel_cosf>
 800ca88:	e7e9      	b.n	800ca5e <sinf+0x22>
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	9901      	ldr	r1, [sp, #4]
 800ca8e:	9800      	ldr	r0, [sp, #0]
 800ca90:	f001 fda0 	bl	800e5d4 <__kernel_sinf>
 800ca94:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca98:	e7e1      	b.n	800ca5e <sinf+0x22>
 800ca9a:	9901      	ldr	r1, [sp, #4]
 800ca9c:	9800      	ldr	r0, [sp, #0]
 800ca9e:	f001 fa63 	bl	800df68 <__kernel_cosf>
 800caa2:	e7f7      	b.n	800ca94 <sinf+0x58>
 800caa4:	3f490fd8 	.word	0x3f490fd8

0800caa8 <pow>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	461f      	mov	r7, r3
 800caae:	4680      	mov	r8, r0
 800cab0:	4689      	mov	r9, r1
 800cab2:	4616      	mov	r6, r2
 800cab4:	f000 f91c 	bl	800ccf0 <__ieee754_pow>
 800cab8:	4b4d      	ldr	r3, [pc, #308]	; (800cbf0 <pow+0x148>)
 800caba:	4604      	mov	r4, r0
 800cabc:	f993 3000 	ldrsb.w	r3, [r3]
 800cac0:	460d      	mov	r5, r1
 800cac2:	3301      	adds	r3, #1
 800cac4:	d015      	beq.n	800caf2 <pow+0x4a>
 800cac6:	4632      	mov	r2, r6
 800cac8:	463b      	mov	r3, r7
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7f3 ff95 	bl	80009fc <__aeabi_dcmpun>
 800cad2:	b970      	cbnz	r0, 800caf2 <pow+0x4a>
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	4640      	mov	r0, r8
 800cada:	4649      	mov	r1, r9
 800cadc:	f7f3 ff8e 	bl	80009fc <__aeabi_dcmpun>
 800cae0:	2200      	movs	r2, #0
 800cae2:	2300      	movs	r3, #0
 800cae4:	b148      	cbz	r0, 800cafa <pow+0x52>
 800cae6:	4630      	mov	r0, r6
 800cae8:	4639      	mov	r1, r7
 800caea:	f7f3 ff55 	bl	8000998 <__aeabi_dcmpeq>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d17b      	bne.n	800cbea <pow+0x142>
 800caf2:	4620      	mov	r0, r4
 800caf4:	4629      	mov	r1, r5
 800caf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cafa:	4640      	mov	r0, r8
 800cafc:	4649      	mov	r1, r9
 800cafe:	f7f3 ff4b 	bl	8000998 <__aeabi_dcmpeq>
 800cb02:	b1e0      	cbz	r0, 800cb3e <pow+0x96>
 800cb04:	2200      	movs	r2, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 ff44 	bl	8000998 <__aeabi_dcmpeq>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d16a      	bne.n	800cbea <pow+0x142>
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f001 fdd5 	bl	800e6c6 <finite>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d0e8      	beq.n	800caf2 <pow+0x4a>
 800cb20:	2200      	movs	r2, #0
 800cb22:	2300      	movs	r3, #0
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7f3 ff40 	bl	80009ac <__aeabi_dcmplt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0e0      	beq.n	800caf2 <pow+0x4a>
 800cb30:	f001 ff82 	bl	800ea38 <__errno>
 800cb34:	2321      	movs	r3, #33	; 0x21
 800cb36:	2400      	movs	r4, #0
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	4d2e      	ldr	r5, [pc, #184]	; (800cbf4 <pow+0x14c>)
 800cb3c:	e7d9      	b.n	800caf2 <pow+0x4a>
 800cb3e:	4620      	mov	r0, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	f001 fdc0 	bl	800e6c6 <finite>
 800cb46:	bba8      	cbnz	r0, 800cbb4 <pow+0x10c>
 800cb48:	4640      	mov	r0, r8
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	f001 fdbb 	bl	800e6c6 <finite>
 800cb50:	b380      	cbz	r0, 800cbb4 <pow+0x10c>
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f001 fdb6 	bl	800e6c6 <finite>
 800cb5a:	b358      	cbz	r0, 800cbb4 <pow+0x10c>
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	462b      	mov	r3, r5
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 ff4a 	bl	80009fc <__aeabi_dcmpun>
 800cb68:	b160      	cbz	r0, 800cb84 <pow+0xdc>
 800cb6a:	f001 ff65 	bl	800ea38 <__errno>
 800cb6e:	2321      	movs	r3, #33	; 0x21
 800cb70:	2200      	movs	r2, #0
 800cb72:	6003      	str	r3, [r0, #0]
 800cb74:	2300      	movs	r3, #0
 800cb76:	4610      	mov	r0, r2
 800cb78:	4619      	mov	r1, r3
 800cb7a:	f7f3 fdcf 	bl	800071c <__aeabi_ddiv>
 800cb7e:	4604      	mov	r4, r0
 800cb80:	460d      	mov	r5, r1
 800cb82:	e7b6      	b.n	800caf2 <pow+0x4a>
 800cb84:	f001 ff58 	bl	800ea38 <__errno>
 800cb88:	2322      	movs	r3, #34	; 0x22
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	6003      	str	r3, [r0, #0]
 800cb8e:	4649      	mov	r1, r9
 800cb90:	2300      	movs	r3, #0
 800cb92:	4640      	mov	r0, r8
 800cb94:	f7f3 ff0a 	bl	80009ac <__aeabi_dcmplt>
 800cb98:	2400      	movs	r4, #0
 800cb9a:	b148      	cbz	r0, 800cbb0 <pow+0x108>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f001 fd9e 	bl	800e6e0 <rint>
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	f7f3 fef6 	bl	8000998 <__aeabi_dcmpeq>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d0c4      	beq.n	800cb3a <pow+0x92>
 800cbb0:	4d11      	ldr	r5, [pc, #68]	; (800cbf8 <pow+0x150>)
 800cbb2:	e79e      	b.n	800caf2 <pow+0x4a>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	4620      	mov	r0, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	f7f3 feec 	bl	8000998 <__aeabi_dcmpeq>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d096      	beq.n	800caf2 <pow+0x4a>
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f001 fd7d 	bl	800e6c6 <finite>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d090      	beq.n	800caf2 <pow+0x4a>
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f001 fd77 	bl	800e6c6 <finite>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d08a      	beq.n	800caf2 <pow+0x4a>
 800cbdc:	f001 ff2c 	bl	800ea38 <__errno>
 800cbe0:	2322      	movs	r3, #34	; 0x22
 800cbe2:	2400      	movs	r4, #0
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	6003      	str	r3, [r0, #0]
 800cbe8:	e783      	b.n	800caf2 <pow+0x4a>
 800cbea:	2400      	movs	r4, #0
 800cbec:	4d03      	ldr	r5, [pc, #12]	; (800cbfc <pow+0x154>)
 800cbee:	e780      	b.n	800caf2 <pow+0x4a>
 800cbf0:	2000000d 	.word	0x2000000d
 800cbf4:	fff00000 	.word	0xfff00000
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	3ff00000 	.word	0x3ff00000

0800cc00 <sqrt>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	f000 fd89 	bl	800d71c <__ieee754_sqrt>
 800cc0a:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <sqrt+0x54>)
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	f993 3000 	ldrsb.w	r3, [r3]
 800cc12:	460d      	mov	r5, r1
 800cc14:	3301      	adds	r3, #1
 800cc16:	d019      	beq.n	800cc4c <sqrt+0x4c>
 800cc18:	4632      	mov	r2, r6
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	4639      	mov	r1, r7
 800cc20:	f7f3 feec 	bl	80009fc <__aeabi_dcmpun>
 800cc24:	b990      	cbnz	r0, 800cc4c <sqrt+0x4c>
 800cc26:	2200      	movs	r2, #0
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	f7f3 febd 	bl	80009ac <__aeabi_dcmplt>
 800cc32:	b158      	cbz	r0, 800cc4c <sqrt+0x4c>
 800cc34:	f001 ff00 	bl	800ea38 <__errno>
 800cc38:	2321      	movs	r3, #33	; 0x21
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	6003      	str	r3, [r0, #0]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4610      	mov	r0, r2
 800cc42:	4619      	mov	r1, r3
 800cc44:	f7f3 fd6a 	bl	800071c <__aeabi_ddiv>
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	2000000d 	.word	0x2000000d

0800cc58 <asinf>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	f000 fe0a 	bl	800d874 <__ieee754_asinf>
 800cc60:	4b0e      	ldr	r3, [pc, #56]	; (800cc9c <asinf+0x44>)
 800cc62:	4605      	mov	r5, r0
 800cc64:	f993 3000 	ldrsb.w	r3, [r3]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	d015      	beq.n	800cc98 <asinf+0x40>
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7f4 fa26 	bl	80010c0 <__aeabi_fcmpun>
 800cc74:	b980      	cbnz	r0, 800cc98 <asinf+0x40>
 800cc76:	4620      	mov	r0, r4
 800cc78:	f7ff fedc 	bl	800ca34 <fabsf>
 800cc7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc80:	f7f4 fa14 	bl	80010ac <__aeabi_fcmpgt>
 800cc84:	b140      	cbz	r0, 800cc98 <asinf+0x40>
 800cc86:	f001 fed7 	bl	800ea38 <__errno>
 800cc8a:	2321      	movs	r3, #33	; 0x21
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	4804      	ldr	r0, [pc, #16]	; (800cca0 <asinf+0x48>)
 800cc90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc94:	f001 be78 	b.w	800e988 <nanf>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	bd38      	pop	{r3, r4, r5, pc}
 800cc9c:	2000000d 	.word	0x2000000d
 800cca0:	0800edb8 	.word	0x0800edb8

0800cca4 <atan2f>:
 800cca4:	f000 bf2a 	b.w	800dafc <__ieee754_atan2f>

0800cca8 <sqrtf>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4605      	mov	r5, r0
 800ccac:	f001 f90a 	bl	800dec4 <__ieee754_sqrtf>
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <sqrtf+0x40>)
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f993 3000 	ldrsb.w	r3, [r3]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	d012      	beq.n	800cce2 <sqrtf+0x3a>
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f7f4 f9fe 	bl	80010c0 <__aeabi_fcmpun>
 800ccc4:	b968      	cbnz	r0, 800cce2 <sqrtf+0x3a>
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f7f4 f9d1 	bl	8001070 <__aeabi_fcmplt>
 800ccce:	b140      	cbz	r0, 800cce2 <sqrtf+0x3a>
 800ccd0:	f001 feb2 	bl	800ea38 <__errno>
 800ccd4:	2321      	movs	r3, #33	; 0x21
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	6003      	str	r3, [r0, #0]
 800ccda:	4608      	mov	r0, r1
 800ccdc:	f7f4 f8de 	bl	8000e9c <__aeabi_fdiv>
 800cce0:	4604      	mov	r4, r0
 800cce2:	4620      	mov	r0, r4
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
 800cce6:	bf00      	nop
 800cce8:	2000000d 	.word	0x2000000d
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <__ieee754_pow>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	b093      	sub	sp, #76	; 0x4c
 800ccf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccfa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ccfe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cd02:	ea55 0302 	orrs.w	r3, r5, r2
 800cd06:	4607      	mov	r7, r0
 800cd08:	4688      	mov	r8, r1
 800cd0a:	f000 84bf 	beq.w	800d68c <__ieee754_pow+0x99c>
 800cd0e:	4b7e      	ldr	r3, [pc, #504]	; (800cf08 <__ieee754_pow+0x218>)
 800cd10:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cd14:	429c      	cmp	r4, r3
 800cd16:	4689      	mov	r9, r1
 800cd18:	4682      	mov	sl, r0
 800cd1a:	dc09      	bgt.n	800cd30 <__ieee754_pow+0x40>
 800cd1c:	d103      	bne.n	800cd26 <__ieee754_pow+0x36>
 800cd1e:	b978      	cbnz	r0, 800cd40 <__ieee754_pow+0x50>
 800cd20:	42a5      	cmp	r5, r4
 800cd22:	dd02      	ble.n	800cd2a <__ieee754_pow+0x3a>
 800cd24:	e00c      	b.n	800cd40 <__ieee754_pow+0x50>
 800cd26:	429d      	cmp	r5, r3
 800cd28:	dc02      	bgt.n	800cd30 <__ieee754_pow+0x40>
 800cd2a:	429d      	cmp	r5, r3
 800cd2c:	d10e      	bne.n	800cd4c <__ieee754_pow+0x5c>
 800cd2e:	b16a      	cbz	r2, 800cd4c <__ieee754_pow+0x5c>
 800cd30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd38:	ea54 030a 	orrs.w	r3, r4, sl
 800cd3c:	f000 84a6 	beq.w	800d68c <__ieee754_pow+0x99c>
 800cd40:	4872      	ldr	r0, [pc, #456]	; (800cf0c <__ieee754_pow+0x21c>)
 800cd42:	b013      	add	sp, #76	; 0x4c
 800cd44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	f001 bcc4 	b.w	800e6d4 <nan>
 800cd4c:	f1b9 0f00 	cmp.w	r9, #0
 800cd50:	da39      	bge.n	800cdc6 <__ieee754_pow+0xd6>
 800cd52:	4b6f      	ldr	r3, [pc, #444]	; (800cf10 <__ieee754_pow+0x220>)
 800cd54:	429d      	cmp	r5, r3
 800cd56:	dc54      	bgt.n	800ce02 <__ieee754_pow+0x112>
 800cd58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd5c:	429d      	cmp	r5, r3
 800cd5e:	f340 84a6 	ble.w	800d6ae <__ieee754_pow+0x9be>
 800cd62:	152b      	asrs	r3, r5, #20
 800cd64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd68:	2b14      	cmp	r3, #20
 800cd6a:	dd0f      	ble.n	800cd8c <__ieee754_pow+0x9c>
 800cd6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd70:	fa22 f103 	lsr.w	r1, r2, r3
 800cd74:	fa01 f303 	lsl.w	r3, r1, r3
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	f040 8498 	bne.w	800d6ae <__ieee754_pow+0x9be>
 800cd7e:	f001 0101 	and.w	r1, r1, #1
 800cd82:	f1c1 0302 	rsb	r3, r1, #2
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	b182      	cbz	r2, 800cdac <__ieee754_pow+0xbc>
 800cd8a:	e05e      	b.n	800ce4a <__ieee754_pow+0x15a>
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d15a      	bne.n	800ce46 <__ieee754_pow+0x156>
 800cd90:	f1c3 0314 	rsb	r3, r3, #20
 800cd94:	fa45 f103 	asr.w	r1, r5, r3
 800cd98:	fa01 f303 	lsl.w	r3, r1, r3
 800cd9c:	42ab      	cmp	r3, r5
 800cd9e:	f040 8483 	bne.w	800d6a8 <__ieee754_pow+0x9b8>
 800cda2:	f001 0101 	and.w	r1, r1, #1
 800cda6:	f1c1 0302 	rsb	r3, r1, #2
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	4b59      	ldr	r3, [pc, #356]	; (800cf14 <__ieee754_pow+0x224>)
 800cdae:	429d      	cmp	r5, r3
 800cdb0:	d130      	bne.n	800ce14 <__ieee754_pow+0x124>
 800cdb2:	2e00      	cmp	r6, #0
 800cdb4:	f280 8474 	bge.w	800d6a0 <__ieee754_pow+0x9b0>
 800cdb8:	463a      	mov	r2, r7
 800cdba:	4643      	mov	r3, r8
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	4955      	ldr	r1, [pc, #340]	; (800cf14 <__ieee754_pow+0x224>)
 800cdc0:	f7f3 fcac 	bl	800071c <__aeabi_ddiv>
 800cdc4:	e02f      	b.n	800ce26 <__ieee754_pow+0x136>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	d13d      	bne.n	800ce4a <__ieee754_pow+0x15a>
 800cdce:	4b4e      	ldr	r3, [pc, #312]	; (800cf08 <__ieee754_pow+0x218>)
 800cdd0:	429d      	cmp	r5, r3
 800cdd2:	d1eb      	bne.n	800cdac <__ieee754_pow+0xbc>
 800cdd4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdd8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cddc:	ea53 030a 	orrs.w	r3, r3, sl
 800cde0:	f000 8454 	beq.w	800d68c <__ieee754_pow+0x99c>
 800cde4:	4b4c      	ldr	r3, [pc, #304]	; (800cf18 <__ieee754_pow+0x228>)
 800cde6:	429c      	cmp	r4, r3
 800cde8:	dd0d      	ble.n	800ce06 <__ieee754_pow+0x116>
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	f280 8454 	bge.w	800d698 <__ieee754_pow+0x9a8>
 800cdf0:	f04f 0b00 	mov.w	fp, #0
 800cdf4:	f04f 0c00 	mov.w	ip, #0
 800cdf8:	4658      	mov	r0, fp
 800cdfa:	4661      	mov	r1, ip
 800cdfc:	b013      	add	sp, #76	; 0x4c
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	2302      	movs	r3, #2
 800ce04:	e7e0      	b.n	800cdc8 <__ieee754_pow+0xd8>
 800ce06:	2e00      	cmp	r6, #0
 800ce08:	daf2      	bge.n	800cdf0 <__ieee754_pow+0x100>
 800ce0a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ce0e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ce12:	e7f1      	b.n	800cdf8 <__ieee754_pow+0x108>
 800ce14:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ce18:	d108      	bne.n	800ce2c <__ieee754_pow+0x13c>
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	4643      	mov	r3, r8
 800ce1e:	4638      	mov	r0, r7
 800ce20:	4641      	mov	r1, r8
 800ce22:	f7f3 fb51 	bl	80004c8 <__aeabi_dmul>
 800ce26:	4683      	mov	fp, r0
 800ce28:	468c      	mov	ip, r1
 800ce2a:	e7e5      	b.n	800cdf8 <__ieee754_pow+0x108>
 800ce2c:	4b3b      	ldr	r3, [pc, #236]	; (800cf1c <__ieee754_pow+0x22c>)
 800ce2e:	429e      	cmp	r6, r3
 800ce30:	d10b      	bne.n	800ce4a <__ieee754_pow+0x15a>
 800ce32:	f1b9 0f00 	cmp.w	r9, #0
 800ce36:	db08      	blt.n	800ce4a <__ieee754_pow+0x15a>
 800ce38:	4638      	mov	r0, r7
 800ce3a:	4641      	mov	r1, r8
 800ce3c:	b013      	add	sp, #76	; 0x4c
 800ce3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce42:	f000 bc6b 	b.w	800d71c <__ieee754_sqrt>
 800ce46:	2300      	movs	r3, #0
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	4641      	mov	r1, r8
 800ce4e:	f001 fc37 	bl	800e6c0 <fabs>
 800ce52:	4683      	mov	fp, r0
 800ce54:	468c      	mov	ip, r1
 800ce56:	f1ba 0f00 	cmp.w	sl, #0
 800ce5a:	d129      	bne.n	800ceb0 <__ieee754_pow+0x1c0>
 800ce5c:	b124      	cbz	r4, 800ce68 <__ieee754_pow+0x178>
 800ce5e:	4b2d      	ldr	r3, [pc, #180]	; (800cf14 <__ieee754_pow+0x224>)
 800ce60:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d123      	bne.n	800ceb0 <__ieee754_pow+0x1c0>
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	da07      	bge.n	800ce7c <__ieee754_pow+0x18c>
 800ce6c:	465a      	mov	r2, fp
 800ce6e:	4663      	mov	r3, ip
 800ce70:	2000      	movs	r0, #0
 800ce72:	4928      	ldr	r1, [pc, #160]	; (800cf14 <__ieee754_pow+0x224>)
 800ce74:	f7f3 fc52 	bl	800071c <__aeabi_ddiv>
 800ce78:	4683      	mov	fp, r0
 800ce7a:	468c      	mov	ip, r1
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	daba      	bge.n	800cdf8 <__ieee754_pow+0x108>
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ce88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce8c:	4323      	orrs	r3, r4
 800ce8e:	d108      	bne.n	800cea2 <__ieee754_pow+0x1b2>
 800ce90:	465a      	mov	r2, fp
 800ce92:	4663      	mov	r3, ip
 800ce94:	4658      	mov	r0, fp
 800ce96:	4661      	mov	r1, ip
 800ce98:	f7f3 f95e 	bl	8000158 <__aeabi_dsub>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	e78e      	b.n	800cdc0 <__ieee754_pow+0xd0>
 800cea2:	9b00      	ldr	r3, [sp, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d1a7      	bne.n	800cdf8 <__ieee754_pow+0x108>
 800cea8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ceac:	469c      	mov	ip, r3
 800ceae:	e7a3      	b.n	800cdf8 <__ieee754_pow+0x108>
 800ceb0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	930c      	str	r3, [sp, #48]	; 0x30
 800ceb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	d104      	bne.n	800ceca <__ieee754_pow+0x1da>
 800cec0:	463a      	mov	r2, r7
 800cec2:	4643      	mov	r3, r8
 800cec4:	4638      	mov	r0, r7
 800cec6:	4641      	mov	r1, r8
 800cec8:	e7e6      	b.n	800ce98 <__ieee754_pow+0x1a8>
 800ceca:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <__ieee754_pow+0x230>)
 800cecc:	429d      	cmp	r5, r3
 800cece:	f340 80f9 	ble.w	800d0c4 <__ieee754_pow+0x3d4>
 800ced2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ced6:	429d      	cmp	r5, r3
 800ced8:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <__ieee754_pow+0x228>)
 800ceda:	dd09      	ble.n	800cef0 <__ieee754_pow+0x200>
 800cedc:	429c      	cmp	r4, r3
 800cede:	dc0c      	bgt.n	800cefa <__ieee754_pow+0x20a>
 800cee0:	2e00      	cmp	r6, #0
 800cee2:	da85      	bge.n	800cdf0 <__ieee754_pow+0x100>
 800cee4:	a306      	add	r3, pc, #24	; (adr r3, 800cf00 <__ieee754_pow+0x210>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	4610      	mov	r0, r2
 800ceec:	4619      	mov	r1, r3
 800ceee:	e798      	b.n	800ce22 <__ieee754_pow+0x132>
 800cef0:	429c      	cmp	r4, r3
 800cef2:	dbf5      	blt.n	800cee0 <__ieee754_pow+0x1f0>
 800cef4:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <__ieee754_pow+0x224>)
 800cef6:	429c      	cmp	r4, r3
 800cef8:	dd14      	ble.n	800cf24 <__ieee754_pow+0x234>
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	dcf2      	bgt.n	800cee4 <__ieee754_pow+0x1f4>
 800cefe:	e777      	b.n	800cdf0 <__ieee754_pow+0x100>
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	7e37e43c 	.word	0x7e37e43c
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	0800edb8 	.word	0x0800edb8
 800cf10:	433fffff 	.word	0x433fffff
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3fefffff 	.word	0x3fefffff
 800cf1c:	3fe00000 	.word	0x3fe00000
 800cf20:	41e00000 	.word	0x41e00000
 800cf24:	4661      	mov	r1, ip
 800cf26:	2200      	movs	r2, #0
 800cf28:	4658      	mov	r0, fp
 800cf2a:	4b61      	ldr	r3, [pc, #388]	; (800d0b0 <__ieee754_pow+0x3c0>)
 800cf2c:	f7f3 f914 	bl	8000158 <__aeabi_dsub>
 800cf30:	a355      	add	r3, pc, #340	; (adr r3, 800d088 <__ieee754_pow+0x398>)
 800cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf36:	4604      	mov	r4, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	f7f3 fac5 	bl	80004c8 <__aeabi_dmul>
 800cf3e:	a354      	add	r3, pc, #336	; (adr r3, 800d090 <__ieee754_pow+0x3a0>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4606      	mov	r6, r0
 800cf46:	460f      	mov	r7, r1
 800cf48:	4620      	mov	r0, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	f7f3 fabc 	bl	80004c8 <__aeabi_dmul>
 800cf50:	2200      	movs	r2, #0
 800cf52:	4682      	mov	sl, r0
 800cf54:	468b      	mov	fp, r1
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4b56      	ldr	r3, [pc, #344]	; (800d0b4 <__ieee754_pow+0x3c4>)
 800cf5c:	f7f3 fab4 	bl	80004c8 <__aeabi_dmul>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	a14c      	add	r1, pc, #304	; (adr r1, 800d098 <__ieee754_pow+0x3a8>)
 800cf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf6a:	f7f3 f8f5 	bl	8000158 <__aeabi_dsub>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f3 faa9 	bl	80004c8 <__aeabi_dmul>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	494e      	ldr	r1, [pc, #312]	; (800d0b8 <__ieee754_pow+0x3c8>)
 800cf7e:	f7f3 f8eb 	bl	8000158 <__aeabi_dsub>
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	4680      	mov	r8, r0
 800cf88:	4689      	mov	r9, r1
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	f7f3 fa9b 	bl	80004c8 <__aeabi_dmul>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4640      	mov	r0, r8
 800cf98:	4649      	mov	r1, r9
 800cf9a:	f7f3 fa95 	bl	80004c8 <__aeabi_dmul>
 800cf9e:	a340      	add	r3, pc, #256	; (adr r3, 800d0a0 <__ieee754_pow+0x3b0>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 fa90 	bl	80004c8 <__aeabi_dmul>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4650      	mov	r0, sl
 800cfae:	4659      	mov	r1, fp
 800cfb0:	f7f3 f8d2 	bl	8000158 <__aeabi_dsub>
 800cfb4:	f04f 0a00 	mov.w	sl, #0
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	f7f3 f8ca 	bl	800015c <__adddf3>
 800cfc8:	4632      	mov	r2, r6
 800cfca:	463b      	mov	r3, r7
 800cfcc:	4650      	mov	r0, sl
 800cfce:	468b      	mov	fp, r1
 800cfd0:	f7f3 f8c2 	bl	8000158 <__aeabi_dsub>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	4629      	mov	r1, r5
 800cfdc:	f7f3 f8bc 	bl	8000158 <__aeabi_dsub>
 800cfe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	4313      	orrs	r3, r2
 800cfec:	f04f 0600 	mov.w	r6, #0
 800cff0:	f04f 0200 	mov.w	r2, #0
 800cff4:	bf0c      	ite	eq
 800cff6:	4b31      	ldreq	r3, [pc, #196]	; (800d0bc <__ieee754_pow+0x3cc>)
 800cff8:	4b2d      	ldrne	r3, [pc, #180]	; (800d0b0 <__ieee754_pow+0x3c0>)
 800cffa:	4604      	mov	r4, r0
 800cffc:	460d      	mov	r5, r1
 800cffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d002:	e9cd 2300 	strd	r2, r3, [sp]
 800d006:	4632      	mov	r2, r6
 800d008:	463b      	mov	r3, r7
 800d00a:	f7f3 f8a5 	bl	8000158 <__aeabi_dsub>
 800d00e:	4652      	mov	r2, sl
 800d010:	465b      	mov	r3, fp
 800d012:	f7f3 fa59 	bl	80004c8 <__aeabi_dmul>
 800d016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d01a:	4680      	mov	r8, r0
 800d01c:	4689      	mov	r9, r1
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 fa51 	bl	80004c8 <__aeabi_dmul>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4640      	mov	r0, r8
 800d02c:	4649      	mov	r1, r9
 800d02e:	f7f3 f895 	bl	800015c <__adddf3>
 800d032:	4632      	mov	r2, r6
 800d034:	463b      	mov	r3, r7
 800d036:	4680      	mov	r8, r0
 800d038:	4689      	mov	r9, r1
 800d03a:	4650      	mov	r0, sl
 800d03c:	4659      	mov	r1, fp
 800d03e:	f7f3 fa43 	bl	80004c8 <__aeabi_dmul>
 800d042:	4604      	mov	r4, r0
 800d044:	460d      	mov	r5, r1
 800d046:	460b      	mov	r3, r1
 800d048:	4602      	mov	r2, r0
 800d04a:	4649      	mov	r1, r9
 800d04c:	4640      	mov	r0, r8
 800d04e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d052:	f7f3 f883 	bl	800015c <__adddf3>
 800d056:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <__ieee754_pow+0x3d0>)
 800d058:	4682      	mov	sl, r0
 800d05a:	4299      	cmp	r1, r3
 800d05c:	460f      	mov	r7, r1
 800d05e:	460e      	mov	r6, r1
 800d060:	f340 82ed 	ble.w	800d63e <__ieee754_pow+0x94e>
 800d064:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d068:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d06c:	4303      	orrs	r3, r0
 800d06e:	f000 81e7 	beq.w	800d440 <__ieee754_pow+0x750>
 800d072:	a30d      	add	r3, pc, #52	; (adr r3, 800d0a8 <__ieee754_pow+0x3b8>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d07c:	f7f3 fa24 	bl	80004c8 <__aeabi_dmul>
 800d080:	a309      	add	r3, pc, #36	; (adr r3, 800d0a8 <__ieee754_pow+0x3b8>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	e6cc      	b.n	800ce22 <__ieee754_pow+0x132>
 800d088:	60000000 	.word	0x60000000
 800d08c:	3ff71547 	.word	0x3ff71547
 800d090:	f85ddf44 	.word	0xf85ddf44
 800d094:	3e54ae0b 	.word	0x3e54ae0b
 800d098:	55555555 	.word	0x55555555
 800d09c:	3fd55555 	.word	0x3fd55555
 800d0a0:	652b82fe 	.word	0x652b82fe
 800d0a4:	3ff71547 	.word	0x3ff71547
 800d0a8:	8800759c 	.word	0x8800759c
 800d0ac:	7e37e43c 	.word	0x7e37e43c
 800d0b0:	3ff00000 	.word	0x3ff00000
 800d0b4:	3fd00000 	.word	0x3fd00000
 800d0b8:	3fe00000 	.word	0x3fe00000
 800d0bc:	bff00000 	.word	0xbff00000
 800d0c0:	408fffff 	.word	0x408fffff
 800d0c4:	4bd4      	ldr	r3, [pc, #848]	; (800d418 <__ieee754_pow+0x728>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	ea09 0303 	and.w	r3, r9, r3
 800d0cc:	b943      	cbnz	r3, 800d0e0 <__ieee754_pow+0x3f0>
 800d0ce:	4658      	mov	r0, fp
 800d0d0:	4661      	mov	r1, ip
 800d0d2:	4bd2      	ldr	r3, [pc, #840]	; (800d41c <__ieee754_pow+0x72c>)
 800d0d4:	f7f3 f9f8 	bl	80004c8 <__aeabi_dmul>
 800d0d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0dc:	4683      	mov	fp, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	1523      	asrs	r3, r4, #20
 800d0e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0e6:	4413      	add	r3, r2
 800d0e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0ea:	4bcd      	ldr	r3, [pc, #820]	; (800d420 <__ieee754_pow+0x730>)
 800d0ec:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0f0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0fa:	dd08      	ble.n	800d10e <__ieee754_pow+0x41e>
 800d0fc:	4bc9      	ldr	r3, [pc, #804]	; (800d424 <__ieee754_pow+0x734>)
 800d0fe:	429c      	cmp	r4, r3
 800d100:	f340 819c 	ble.w	800d43c <__ieee754_pow+0x74c>
 800d104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d106:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d10a:	3301      	adds	r3, #1
 800d10c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d10e:	2600      	movs	r6, #0
 800d110:	00f3      	lsls	r3, r6, #3
 800d112:	930d      	str	r3, [sp, #52]	; 0x34
 800d114:	4bc4      	ldr	r3, [pc, #784]	; (800d428 <__ieee754_pow+0x738>)
 800d116:	4658      	mov	r0, fp
 800d118:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d11c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d120:	4629      	mov	r1, r5
 800d122:	461a      	mov	r2, r3
 800d124:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d128:	4623      	mov	r3, r4
 800d12a:	f7f3 f815 	bl	8000158 <__aeabi_dsub>
 800d12e:	46da      	mov	sl, fp
 800d130:	462b      	mov	r3, r5
 800d132:	4652      	mov	r2, sl
 800d134:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d13c:	f7f3 f80e 	bl	800015c <__adddf3>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	2000      	movs	r0, #0
 800d146:	49b9      	ldr	r1, [pc, #740]	; (800d42c <__ieee754_pow+0x73c>)
 800d148:	f7f3 fae8 	bl	800071c <__aeabi_ddiv>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d158:	f7f3 f9b6 	bl	80004c8 <__aeabi_dmul>
 800d15c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d160:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d164:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d168:	2300      	movs	r3, #0
 800d16a:	2200      	movs	r2, #0
 800d16c:	46ab      	mov	fp, r5
 800d16e:	106d      	asrs	r5, r5, #1
 800d170:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d174:	9304      	str	r3, [sp, #16]
 800d176:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d17a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d17e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d182:	4640      	mov	r0, r8
 800d184:	4649      	mov	r1, r9
 800d186:	4614      	mov	r4, r2
 800d188:	461d      	mov	r5, r3
 800d18a:	f7f3 f99d 	bl	80004c8 <__aeabi_dmul>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d196:	f7f2 ffdf 	bl	8000158 <__aeabi_dsub>
 800d19a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d19e:	4606      	mov	r6, r0
 800d1a0:	460f      	mov	r7, r1
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7f2 ffd7 	bl	8000158 <__aeabi_dsub>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4650      	mov	r0, sl
 800d1b0:	4659      	mov	r1, fp
 800d1b2:	f7f2 ffd1 	bl	8000158 <__aeabi_dsub>
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	464b      	mov	r3, r9
 800d1ba:	f7f3 f985 	bl	80004c8 <__aeabi_dmul>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	4639      	mov	r1, r7
 800d1c6:	f7f2 ffc7 	bl	8000158 <__aeabi_dsub>
 800d1ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1ce:	f7f3 f97b 	bl	80004c8 <__aeabi_dmul>
 800d1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1da:	4610      	mov	r0, r2
 800d1dc:	4619      	mov	r1, r3
 800d1de:	f7f3 f973 	bl	80004c8 <__aeabi_dmul>
 800d1e2:	a37b      	add	r3, pc, #492	; (adr r3, 800d3d0 <__ieee754_pow+0x6e0>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	f7f3 f96c 	bl	80004c8 <__aeabi_dmul>
 800d1f0:	a379      	add	r3, pc, #484	; (adr r3, 800d3d8 <__ieee754_pow+0x6e8>)
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	f7f2 ffb1 	bl	800015c <__adddf3>
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	f7f3 f963 	bl	80004c8 <__aeabi_dmul>
 800d202:	a377      	add	r3, pc, #476	; (adr r3, 800d3e0 <__ieee754_pow+0x6f0>)
 800d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d208:	f7f2 ffa8 	bl	800015c <__adddf3>
 800d20c:	4622      	mov	r2, r4
 800d20e:	462b      	mov	r3, r5
 800d210:	f7f3 f95a 	bl	80004c8 <__aeabi_dmul>
 800d214:	a374      	add	r3, pc, #464	; (adr r3, 800d3e8 <__ieee754_pow+0x6f8>)
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	f7f2 ff9f 	bl	800015c <__adddf3>
 800d21e:	4622      	mov	r2, r4
 800d220:	462b      	mov	r3, r5
 800d222:	f7f3 f951 	bl	80004c8 <__aeabi_dmul>
 800d226:	a372      	add	r3, pc, #456	; (adr r3, 800d3f0 <__ieee754_pow+0x700>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f7f2 ff96 	bl	800015c <__adddf3>
 800d230:	4622      	mov	r2, r4
 800d232:	462b      	mov	r3, r5
 800d234:	f7f3 f948 	bl	80004c8 <__aeabi_dmul>
 800d238:	a36f      	add	r3, pc, #444	; (adr r3, 800d3f8 <__ieee754_pow+0x708>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	f7f2 ff8d 	bl	800015c <__adddf3>
 800d242:	4622      	mov	r2, r4
 800d244:	4606      	mov	r6, r0
 800d246:	460f      	mov	r7, r1
 800d248:	462b      	mov	r3, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	4629      	mov	r1, r5
 800d24e:	f7f3 f93b 	bl	80004c8 <__aeabi_dmul>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4630      	mov	r0, r6
 800d258:	4639      	mov	r1, r7
 800d25a:	f7f3 f935 	bl	80004c8 <__aeabi_dmul>
 800d25e:	4604      	mov	r4, r0
 800d260:	460d      	mov	r5, r1
 800d262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d266:	4642      	mov	r2, r8
 800d268:	464b      	mov	r3, r9
 800d26a:	f7f2 ff77 	bl	800015c <__adddf3>
 800d26e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d272:	f7f3 f929 	bl	80004c8 <__aeabi_dmul>
 800d276:	4622      	mov	r2, r4
 800d278:	462b      	mov	r3, r5
 800d27a:	f7f2 ff6f 	bl	800015c <__adddf3>
 800d27e:	4642      	mov	r2, r8
 800d280:	4606      	mov	r6, r0
 800d282:	460f      	mov	r7, r1
 800d284:	464b      	mov	r3, r9
 800d286:	4640      	mov	r0, r8
 800d288:	4649      	mov	r1, r9
 800d28a:	f7f3 f91d 	bl	80004c8 <__aeabi_dmul>
 800d28e:	2200      	movs	r2, #0
 800d290:	4b67      	ldr	r3, [pc, #412]	; (800d430 <__ieee754_pow+0x740>)
 800d292:	4682      	mov	sl, r0
 800d294:	468b      	mov	fp, r1
 800d296:	f7f2 ff61 	bl	800015c <__adddf3>
 800d29a:	4632      	mov	r2, r6
 800d29c:	463b      	mov	r3, r7
 800d29e:	f7f2 ff5d 	bl	800015c <__adddf3>
 800d2a2:	9c04      	ldr	r4, [sp, #16]
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	f7f3 f90b 	bl	80004c8 <__aeabi_dmul>
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	4680      	mov	r8, r0
 800d2b6:	4689      	mov	r9, r1
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	4b5c      	ldr	r3, [pc, #368]	; (800d430 <__ieee754_pow+0x740>)
 800d2be:	f7f2 ff4b 	bl	8000158 <__aeabi_dsub>
 800d2c2:	4652      	mov	r2, sl
 800d2c4:	465b      	mov	r3, fp
 800d2c6:	f7f2 ff47 	bl	8000158 <__aeabi_dsub>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	4639      	mov	r1, r7
 800d2d2:	f7f2 ff41 	bl	8000158 <__aeabi_dsub>
 800d2d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2da:	f7f3 f8f5 	bl	80004c8 <__aeabi_dmul>
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	f7f3 f8ed 	bl	80004c8 <__aeabi_dmul>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f2 ff31 	bl	800015c <__adddf3>
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4640      	mov	r0, r8
 800d304:	4649      	mov	r1, r9
 800d306:	f7f2 ff29 	bl	800015c <__adddf3>
 800d30a:	a33d      	add	r3, pc, #244	; (adr r3, 800d400 <__ieee754_pow+0x710>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	9c04      	ldr	r4, [sp, #16]
 800d312:	460d      	mov	r5, r1
 800d314:	4620      	mov	r0, r4
 800d316:	f7f3 f8d7 	bl	80004c8 <__aeabi_dmul>
 800d31a:	4642      	mov	r2, r8
 800d31c:	464b      	mov	r3, r9
 800d31e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d322:	4620      	mov	r0, r4
 800d324:	4629      	mov	r1, r5
 800d326:	f7f2 ff17 	bl	8000158 <__aeabi_dsub>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4630      	mov	r0, r6
 800d330:	4639      	mov	r1, r7
 800d332:	f7f2 ff11 	bl	8000158 <__aeabi_dsub>
 800d336:	a334      	add	r3, pc, #208	; (adr r3, 800d408 <__ieee754_pow+0x718>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	f7f3 f8c4 	bl	80004c8 <__aeabi_dmul>
 800d340:	a333      	add	r3, pc, #204	; (adr r3, 800d410 <__ieee754_pow+0x720>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	4606      	mov	r6, r0
 800d348:	460f      	mov	r7, r1
 800d34a:	4620      	mov	r0, r4
 800d34c:	4629      	mov	r1, r5
 800d34e:	f7f3 f8bb 	bl	80004c8 <__aeabi_dmul>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4630      	mov	r0, r6
 800d358:	4639      	mov	r1, r7
 800d35a:	f7f2 feff 	bl	800015c <__adddf3>
 800d35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d360:	4b34      	ldr	r3, [pc, #208]	; (800d434 <__ieee754_pow+0x744>)
 800d362:	4413      	add	r3, r2
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	f7f2 fef8 	bl	800015c <__adddf3>
 800d36c:	4680      	mov	r8, r0
 800d36e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d370:	4689      	mov	r9, r1
 800d372:	f7f3 f83f 	bl	80003f4 <__aeabi_i2d>
 800d376:	4604      	mov	r4, r0
 800d378:	460d      	mov	r5, r1
 800d37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d37c:	4b2e      	ldr	r3, [pc, #184]	; (800d438 <__ieee754_pow+0x748>)
 800d37e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d382:	4413      	add	r3, r2
 800d384:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d388:	4642      	mov	r2, r8
 800d38a:	464b      	mov	r3, r9
 800d38c:	f7f2 fee6 	bl	800015c <__adddf3>
 800d390:	4632      	mov	r2, r6
 800d392:	463b      	mov	r3, r7
 800d394:	f7f2 fee2 	bl	800015c <__adddf3>
 800d398:	4622      	mov	r2, r4
 800d39a:	462b      	mov	r3, r5
 800d39c:	f7f2 fede 	bl	800015c <__adddf3>
 800d3a0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	462b      	mov	r3, r5
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	468b      	mov	fp, r1
 800d3ac:	f7f2 fed4 	bl	8000158 <__aeabi_dsub>
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	f7f2 fed0 	bl	8000158 <__aeabi_dsub>
 800d3b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3bc:	f7f2 fecc 	bl	8000158 <__aeabi_dsub>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	e608      	b.n	800cfdc <__ieee754_pow+0x2ec>
 800d3ca:	bf00      	nop
 800d3cc:	f3af 8000 	nop.w
 800d3d0:	4a454eef 	.word	0x4a454eef
 800d3d4:	3fca7e28 	.word	0x3fca7e28
 800d3d8:	93c9db65 	.word	0x93c9db65
 800d3dc:	3fcd864a 	.word	0x3fcd864a
 800d3e0:	a91d4101 	.word	0xa91d4101
 800d3e4:	3fd17460 	.word	0x3fd17460
 800d3e8:	518f264d 	.word	0x518f264d
 800d3ec:	3fd55555 	.word	0x3fd55555
 800d3f0:	db6fabff 	.word	0xdb6fabff
 800d3f4:	3fdb6db6 	.word	0x3fdb6db6
 800d3f8:	33333303 	.word	0x33333303
 800d3fc:	3fe33333 	.word	0x3fe33333
 800d400:	e0000000 	.word	0xe0000000
 800d404:	3feec709 	.word	0x3feec709
 800d408:	dc3a03fd 	.word	0xdc3a03fd
 800d40c:	3feec709 	.word	0x3feec709
 800d410:	145b01f5 	.word	0x145b01f5
 800d414:	be3e2fe0 	.word	0xbe3e2fe0
 800d418:	7ff00000 	.word	0x7ff00000
 800d41c:	43400000 	.word	0x43400000
 800d420:	0003988e 	.word	0x0003988e
 800d424:	000bb679 	.word	0x000bb679
 800d428:	0800edc0 	.word	0x0800edc0
 800d42c:	3ff00000 	.word	0x3ff00000
 800d430:	40080000 	.word	0x40080000
 800d434:	0800ede0 	.word	0x0800ede0
 800d438:	0800edd0 	.word	0x0800edd0
 800d43c:	2601      	movs	r6, #1
 800d43e:	e667      	b.n	800d110 <__ieee754_pow+0x420>
 800d440:	a39d      	add	r3, pc, #628	; (adr r3, 800d6b8 <__ieee754_pow+0x9c8>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	4640      	mov	r0, r8
 800d448:	4649      	mov	r1, r9
 800d44a:	f7f2 fe87 	bl	800015c <__adddf3>
 800d44e:	4622      	mov	r2, r4
 800d450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d454:	462b      	mov	r3, r5
 800d456:	4650      	mov	r0, sl
 800d458:	4639      	mov	r1, r7
 800d45a:	f7f2 fe7d 	bl	8000158 <__aeabi_dsub>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d466:	f7f3 fabf 	bl	80009e8 <__aeabi_dcmpgt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f47f ae01 	bne.w	800d072 <__ieee754_pow+0x382>
 800d470:	4aa5      	ldr	r2, [pc, #660]	; (800d708 <__ieee754_pow+0xa18>)
 800d472:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d476:	4293      	cmp	r3, r2
 800d478:	f340 8103 	ble.w	800d682 <__ieee754_pow+0x992>
 800d47c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d480:	2000      	movs	r0, #0
 800d482:	151b      	asrs	r3, r3, #20
 800d484:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d488:	fa4a f303 	asr.w	r3, sl, r3
 800d48c:	4433      	add	r3, r6
 800d48e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d492:	4f9e      	ldr	r7, [pc, #632]	; (800d70c <__ieee754_pow+0xa1c>)
 800d494:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d498:	4117      	asrs	r7, r2
 800d49a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d49e:	ea23 0107 	bic.w	r1, r3, r7
 800d4a2:	f1c2 0214 	rsb	r2, r2, #20
 800d4a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	fa4a fa02 	asr.w	sl, sl, r2
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	bfb8      	it	lt
 800d4ba:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4be:	f7f2 fe4b 	bl	8000158 <__aeabi_dsub>
 800d4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ca:	2400      	movs	r4, #0
 800d4cc:	4642      	mov	r2, r8
 800d4ce:	464b      	mov	r3, r9
 800d4d0:	f7f2 fe44 	bl	800015c <__adddf3>
 800d4d4:	a37a      	add	r3, pc, #488	; (adr r3, 800d6c0 <__ieee754_pow+0x9d0>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	460d      	mov	r5, r1
 800d4de:	f7f2 fff3 	bl	80004c8 <__aeabi_dmul>
 800d4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	460f      	mov	r7, r1
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f2 fe33 	bl	8000158 <__aeabi_dsub>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	f7f2 fe2d 	bl	8000158 <__aeabi_dsub>
 800d4fe:	a372      	add	r3, pc, #456	; (adr r3, 800d6c8 <__ieee754_pow+0x9d8>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f2 ffe0 	bl	80004c8 <__aeabi_dmul>
 800d508:	a371      	add	r3, pc, #452	; (adr r3, 800d6d0 <__ieee754_pow+0x9e0>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	4680      	mov	r8, r0
 800d510:	4689      	mov	r9, r1
 800d512:	4620      	mov	r0, r4
 800d514:	4629      	mov	r1, r5
 800d516:	f7f2 ffd7 	bl	80004c8 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4640      	mov	r0, r8
 800d520:	4649      	mov	r1, r9
 800d522:	f7f2 fe1b 	bl	800015c <__adddf3>
 800d526:	4604      	mov	r4, r0
 800d528:	460d      	mov	r5, r1
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	4630      	mov	r0, r6
 800d530:	4639      	mov	r1, r7
 800d532:	f7f2 fe13 	bl	800015c <__adddf3>
 800d536:	4632      	mov	r2, r6
 800d538:	463b      	mov	r3, r7
 800d53a:	4680      	mov	r8, r0
 800d53c:	4689      	mov	r9, r1
 800d53e:	f7f2 fe0b 	bl	8000158 <__aeabi_dsub>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4620      	mov	r0, r4
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f2 fe05 	bl	8000158 <__aeabi_dsub>
 800d54e:	4642      	mov	r2, r8
 800d550:	4606      	mov	r6, r0
 800d552:	460f      	mov	r7, r1
 800d554:	464b      	mov	r3, r9
 800d556:	4640      	mov	r0, r8
 800d558:	4649      	mov	r1, r9
 800d55a:	f7f2 ffb5 	bl	80004c8 <__aeabi_dmul>
 800d55e:	a35e      	add	r3, pc, #376	; (adr r3, 800d6d8 <__ieee754_pow+0x9e8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	f7f2 ffae 	bl	80004c8 <__aeabi_dmul>
 800d56c:	a35c      	add	r3, pc, #368	; (adr r3, 800d6e0 <__ieee754_pow+0x9f0>)
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	f7f2 fdf1 	bl	8000158 <__aeabi_dsub>
 800d576:	4622      	mov	r2, r4
 800d578:	462b      	mov	r3, r5
 800d57a:	f7f2 ffa5 	bl	80004c8 <__aeabi_dmul>
 800d57e:	a35a      	add	r3, pc, #360	; (adr r3, 800d6e8 <__ieee754_pow+0x9f8>)
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	f7f2 fdea 	bl	800015c <__adddf3>
 800d588:	4622      	mov	r2, r4
 800d58a:	462b      	mov	r3, r5
 800d58c:	f7f2 ff9c 	bl	80004c8 <__aeabi_dmul>
 800d590:	a357      	add	r3, pc, #348	; (adr r3, 800d6f0 <__ieee754_pow+0xa00>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	f7f2 fddf 	bl	8000158 <__aeabi_dsub>
 800d59a:	4622      	mov	r2, r4
 800d59c:	462b      	mov	r3, r5
 800d59e:	f7f2 ff93 	bl	80004c8 <__aeabi_dmul>
 800d5a2:	a355      	add	r3, pc, #340	; (adr r3, 800d6f8 <__ieee754_pow+0xa08>)
 800d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a8:	f7f2 fdd8 	bl	800015c <__adddf3>
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	f7f2 ff8a 	bl	80004c8 <__aeabi_dmul>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	f7f2 fdcc 	bl	8000158 <__aeabi_dsub>
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	f7f2 ff7c 	bl	80004c8 <__aeabi_dmul>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4629      	mov	r1, r5
 800d5de:	f7f2 fdbb 	bl	8000158 <__aeabi_dsub>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	f7f3 f897 	bl	800071c <__aeabi_ddiv>
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	463b      	mov	r3, r7
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	f7f2 ff65 	bl	80004c8 <__aeabi_dmul>
 800d5fe:	4632      	mov	r2, r6
 800d600:	463b      	mov	r3, r7
 800d602:	f7f2 fdab 	bl	800015c <__adddf3>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	4620      	mov	r0, r4
 800d60c:	4629      	mov	r1, r5
 800d60e:	f7f2 fda3 	bl	8000158 <__aeabi_dsub>
 800d612:	4642      	mov	r2, r8
 800d614:	464b      	mov	r3, r9
 800d616:	f7f2 fd9f 	bl	8000158 <__aeabi_dsub>
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	2000      	movs	r0, #0
 800d620:	493b      	ldr	r1, [pc, #236]	; (800d710 <__ieee754_pow+0xa20>)
 800d622:	f7f2 fd99 	bl	8000158 <__aeabi_dsub>
 800d626:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d62a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d62e:	da2b      	bge.n	800d688 <__ieee754_pow+0x998>
 800d630:	4652      	mov	r2, sl
 800d632:	f001 f8e1 	bl	800e7f8 <scalbn>
 800d636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d63a:	f7ff bbf2 	b.w	800ce22 <__ieee754_pow+0x132>
 800d63e:	4b35      	ldr	r3, [pc, #212]	; (800d714 <__ieee754_pow+0xa24>)
 800d640:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d644:	429f      	cmp	r7, r3
 800d646:	f77f af13 	ble.w	800d470 <__ieee754_pow+0x780>
 800d64a:	4b33      	ldr	r3, [pc, #204]	; (800d718 <__ieee754_pow+0xa28>)
 800d64c:	440b      	add	r3, r1
 800d64e:	4303      	orrs	r3, r0
 800d650:	d00b      	beq.n	800d66a <__ieee754_pow+0x97a>
 800d652:	a32b      	add	r3, pc, #172	; (adr r3, 800d700 <__ieee754_pow+0xa10>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d65c:	f7f2 ff34 	bl	80004c8 <__aeabi_dmul>
 800d660:	a327      	add	r3, pc, #156	; (adr r3, 800d700 <__ieee754_pow+0xa10>)
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	f7ff bbdc 	b.w	800ce22 <__ieee754_pow+0x132>
 800d66a:	4622      	mov	r2, r4
 800d66c:	462b      	mov	r3, r5
 800d66e:	f7f2 fd73 	bl	8000158 <__aeabi_dsub>
 800d672:	4642      	mov	r2, r8
 800d674:	464b      	mov	r3, r9
 800d676:	f7f3 f9ad 	bl	80009d4 <__aeabi_dcmpge>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	f43f aef8 	beq.w	800d470 <__ieee754_pow+0x780>
 800d680:	e7e7      	b.n	800d652 <__ieee754_pow+0x962>
 800d682:	f04f 0a00 	mov.w	sl, #0
 800d686:	e71e      	b.n	800d4c6 <__ieee754_pow+0x7d6>
 800d688:	4621      	mov	r1, r4
 800d68a:	e7d4      	b.n	800d636 <__ieee754_pow+0x946>
 800d68c:	f04f 0b00 	mov.w	fp, #0
 800d690:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d710 <__ieee754_pow+0xa20>
 800d694:	f7ff bbb0 	b.w	800cdf8 <__ieee754_pow+0x108>
 800d698:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d69c:	f7ff bbac 	b.w	800cdf8 <__ieee754_pow+0x108>
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	4641      	mov	r1, r8
 800d6a4:	f7ff bbbf 	b.w	800ce26 <__ieee754_pow+0x136>
 800d6a8:	9200      	str	r2, [sp, #0]
 800d6aa:	f7ff bb7f 	b.w	800cdac <__ieee754_pow+0xbc>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f7ff bb69 	b.w	800cd86 <__ieee754_pow+0x96>
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	652b82fe 	.word	0x652b82fe
 800d6bc:	3c971547 	.word	0x3c971547
 800d6c0:	00000000 	.word	0x00000000
 800d6c4:	3fe62e43 	.word	0x3fe62e43
 800d6c8:	fefa39ef 	.word	0xfefa39ef
 800d6cc:	3fe62e42 	.word	0x3fe62e42
 800d6d0:	0ca86c39 	.word	0x0ca86c39
 800d6d4:	be205c61 	.word	0xbe205c61
 800d6d8:	72bea4d0 	.word	0x72bea4d0
 800d6dc:	3e663769 	.word	0x3e663769
 800d6e0:	c5d26bf1 	.word	0xc5d26bf1
 800d6e4:	3ebbbd41 	.word	0x3ebbbd41
 800d6e8:	af25de2c 	.word	0xaf25de2c
 800d6ec:	3f11566a 	.word	0x3f11566a
 800d6f0:	16bebd93 	.word	0x16bebd93
 800d6f4:	3f66c16c 	.word	0x3f66c16c
 800d6f8:	5555553e 	.word	0x5555553e
 800d6fc:	3fc55555 	.word	0x3fc55555
 800d700:	c2f8f359 	.word	0xc2f8f359
 800d704:	01a56e1f 	.word	0x01a56e1f
 800d708:	3fe00000 	.word	0x3fe00000
 800d70c:	000fffff 	.word	0x000fffff
 800d710:	3ff00000 	.word	0x3ff00000
 800d714:	4090cbff 	.word	0x4090cbff
 800d718:	3f6f3400 	.word	0x3f6f3400

0800d71c <__ieee754_sqrt>:
 800d71c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800d870 <__ieee754_sqrt+0x154>
 800d720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d724:	ea3c 0c01 	bics.w	ip, ip, r1
 800d728:	460b      	mov	r3, r1
 800d72a:	4606      	mov	r6, r0
 800d72c:	460d      	mov	r5, r1
 800d72e:	460a      	mov	r2, r1
 800d730:	4607      	mov	r7, r0
 800d732:	4604      	mov	r4, r0
 800d734:	d10e      	bne.n	800d754 <__ieee754_sqrt+0x38>
 800d736:	4602      	mov	r2, r0
 800d738:	f7f2 fec6 	bl	80004c8 <__aeabi_dmul>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4630      	mov	r0, r6
 800d742:	4629      	mov	r1, r5
 800d744:	f7f2 fd0a 	bl	800015c <__adddf3>
 800d748:	4606      	mov	r6, r0
 800d74a:	460d      	mov	r5, r1
 800d74c:	4630      	mov	r0, r6
 800d74e:	4629      	mov	r1, r5
 800d750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d754:	2900      	cmp	r1, #0
 800d756:	dc0d      	bgt.n	800d774 <__ieee754_sqrt+0x58>
 800d758:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d75c:	ea5c 0707 	orrs.w	r7, ip, r7
 800d760:	d0f4      	beq.n	800d74c <__ieee754_sqrt+0x30>
 800d762:	b139      	cbz	r1, 800d774 <__ieee754_sqrt+0x58>
 800d764:	4602      	mov	r2, r0
 800d766:	f7f2 fcf7 	bl	8000158 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	f7f2 ffd5 	bl	800071c <__aeabi_ddiv>
 800d772:	e7e9      	b.n	800d748 <__ieee754_sqrt+0x2c>
 800d774:	1512      	asrs	r2, r2, #20
 800d776:	d074      	beq.n	800d862 <__ieee754_sqrt+0x146>
 800d778:	2000      	movs	r0, #0
 800d77a:	07d5      	lsls	r5, r2, #31
 800d77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d780:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800d784:	bf5e      	ittt	pl
 800d786:	0fe3      	lsrpl	r3, r4, #31
 800d788:	0064      	lslpl	r4, r4, #1
 800d78a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800d78e:	0fe3      	lsrs	r3, r4, #31
 800d790:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d794:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d798:	2516      	movs	r5, #22
 800d79a:	4601      	mov	r1, r0
 800d79c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7a0:	1076      	asrs	r6, r6, #1
 800d7a2:	0064      	lsls	r4, r4, #1
 800d7a4:	188f      	adds	r7, r1, r2
 800d7a6:	429f      	cmp	r7, r3
 800d7a8:	bfde      	ittt	le
 800d7aa:	1bdb      	suble	r3, r3, r7
 800d7ac:	18b9      	addle	r1, r7, r2
 800d7ae:	1880      	addle	r0, r0, r2
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	3d01      	subs	r5, #1
 800d7b4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d7b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d7bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d7c0:	d1f0      	bne.n	800d7a4 <__ieee754_sqrt+0x88>
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	f04f 0e20 	mov.w	lr, #32
 800d7c8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d7cc:	428b      	cmp	r3, r1
 800d7ce:	eb07 0c05 	add.w	ip, r7, r5
 800d7d2:	dc02      	bgt.n	800d7da <__ieee754_sqrt+0xbe>
 800d7d4:	d113      	bne.n	800d7fe <__ieee754_sqrt+0xe2>
 800d7d6:	45a4      	cmp	ip, r4
 800d7d8:	d811      	bhi.n	800d7fe <__ieee754_sqrt+0xe2>
 800d7da:	f1bc 0f00 	cmp.w	ip, #0
 800d7de:	eb0c 0507 	add.w	r5, ip, r7
 800d7e2:	da43      	bge.n	800d86c <__ieee754_sqrt+0x150>
 800d7e4:	2d00      	cmp	r5, #0
 800d7e6:	db41      	blt.n	800d86c <__ieee754_sqrt+0x150>
 800d7e8:	f101 0801 	add.w	r8, r1, #1
 800d7ec:	1a5b      	subs	r3, r3, r1
 800d7ee:	4641      	mov	r1, r8
 800d7f0:	45a4      	cmp	ip, r4
 800d7f2:	bf88      	it	hi
 800d7f4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d7f8:	eba4 040c 	sub.w	r4, r4, ip
 800d7fc:	443a      	add	r2, r7
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	f1be 0e01 	subs.w	lr, lr, #1
 800d804:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d808:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800d80c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d810:	d1dc      	bne.n	800d7cc <__ieee754_sqrt+0xb0>
 800d812:	4323      	orrs	r3, r4
 800d814:	d006      	beq.n	800d824 <__ieee754_sqrt+0x108>
 800d816:	1c54      	adds	r4, r2, #1
 800d818:	bf0b      	itete	eq
 800d81a:	4672      	moveq	r2, lr
 800d81c:	3201      	addne	r2, #1
 800d81e:	3001      	addeq	r0, #1
 800d820:	f022 0201 	bicne.w	r2, r2, #1
 800d824:	1043      	asrs	r3, r0, #1
 800d826:	07c1      	lsls	r1, r0, #31
 800d828:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d82c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d830:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d834:	bf48      	it	mi
 800d836:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d83a:	4610      	mov	r0, r2
 800d83c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d840:	e782      	b.n	800d748 <__ieee754_sqrt+0x2c>
 800d842:	0ae3      	lsrs	r3, r4, #11
 800d844:	3915      	subs	r1, #21
 800d846:	0564      	lsls	r4, r4, #21
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0fa      	beq.n	800d842 <__ieee754_sqrt+0x126>
 800d84c:	02de      	lsls	r6, r3, #11
 800d84e:	d50a      	bpl.n	800d866 <__ieee754_sqrt+0x14a>
 800d850:	f1c2 0020 	rsb	r0, r2, #32
 800d854:	fa24 f000 	lsr.w	r0, r4, r0
 800d858:	1e55      	subs	r5, r2, #1
 800d85a:	4094      	lsls	r4, r2
 800d85c:	4303      	orrs	r3, r0
 800d85e:	1b4a      	subs	r2, r1, r5
 800d860:	e78a      	b.n	800d778 <__ieee754_sqrt+0x5c>
 800d862:	4611      	mov	r1, r2
 800d864:	e7f0      	b.n	800d848 <__ieee754_sqrt+0x12c>
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	3201      	adds	r2, #1
 800d86a:	e7ef      	b.n	800d84c <__ieee754_sqrt+0x130>
 800d86c:	4688      	mov	r8, r1
 800d86e:	e7bd      	b.n	800d7ec <__ieee754_sqrt+0xd0>
 800d870:	7ff00000 	.word	0x7ff00000

0800d874 <__ieee754_asinf>:
 800d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800d87c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d880:	4604      	mov	r4, r0
 800d882:	4605      	mov	r5, r0
 800d884:	d10c      	bne.n	800d8a0 <__ieee754_asinf+0x2c>
 800d886:	498d      	ldr	r1, [pc, #564]	; (800dabc <__ieee754_asinf+0x248>)
 800d888:	f7f3 fa54 	bl	8000d34 <__aeabi_fmul>
 800d88c:	498c      	ldr	r1, [pc, #560]	; (800dac0 <__ieee754_asinf+0x24c>)
 800d88e:	4605      	mov	r5, r0
 800d890:	4620      	mov	r0, r4
 800d892:	f7f3 fa4f 	bl	8000d34 <__aeabi_fmul>
 800d896:	4601      	mov	r1, r0
 800d898:	4628      	mov	r0, r5
 800d89a:	f7f3 f943 	bl	8000b24 <__addsf3>
 800d89e:	e006      	b.n	800d8ae <__ieee754_asinf+0x3a>
 800d8a0:	dd07      	ble.n	800d8b2 <__ieee754_asinf+0x3e>
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	f7f3 f93c 	bl	8000b20 <__aeabi_fsub>
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	f7f3 faf7 	bl	8000e9c <__aeabi_fdiv>
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	e00e      	b.n	800d8d0 <__ieee754_asinf+0x5c>
 800d8b2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800d8b6:	da58      	bge.n	800d96a <__ieee754_asinf+0xf6>
 800d8b8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800d8bc:	da0b      	bge.n	800d8d6 <__ieee754_asinf+0x62>
 800d8be:	4981      	ldr	r1, [pc, #516]	; (800dac4 <__ieee754_asinf+0x250>)
 800d8c0:	f7f3 f930 	bl	8000b24 <__addsf3>
 800d8c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d8c8:	f7f3 fbf0 	bl	80010ac <__aeabi_fcmpgt>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d04c      	beq.n	800d96a <__ieee754_asinf+0xf6>
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	f7f3 fa2c 	bl	8000d34 <__aeabi_fmul>
 800d8dc:	4605      	mov	r5, r0
 800d8de:	497a      	ldr	r1, [pc, #488]	; (800dac8 <__ieee754_asinf+0x254>)
 800d8e0:	f7f3 fa28 	bl	8000d34 <__aeabi_fmul>
 800d8e4:	4979      	ldr	r1, [pc, #484]	; (800dacc <__ieee754_asinf+0x258>)
 800d8e6:	f7f3 f91d 	bl	8000b24 <__addsf3>
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	f7f3 fa22 	bl	8000d34 <__aeabi_fmul>
 800d8f0:	4977      	ldr	r1, [pc, #476]	; (800dad0 <__ieee754_asinf+0x25c>)
 800d8f2:	f7f3 f915 	bl	8000b20 <__aeabi_fsub>
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f3 fa1c 	bl	8000d34 <__aeabi_fmul>
 800d8fc:	4975      	ldr	r1, [pc, #468]	; (800dad4 <__ieee754_asinf+0x260>)
 800d8fe:	f7f3 f911 	bl	8000b24 <__addsf3>
 800d902:	4629      	mov	r1, r5
 800d904:	f7f3 fa16 	bl	8000d34 <__aeabi_fmul>
 800d908:	4973      	ldr	r1, [pc, #460]	; (800dad8 <__ieee754_asinf+0x264>)
 800d90a:	f7f3 f909 	bl	8000b20 <__aeabi_fsub>
 800d90e:	4629      	mov	r1, r5
 800d910:	f7f3 fa10 	bl	8000d34 <__aeabi_fmul>
 800d914:	4971      	ldr	r1, [pc, #452]	; (800dadc <__ieee754_asinf+0x268>)
 800d916:	f7f3 f905 	bl	8000b24 <__addsf3>
 800d91a:	4629      	mov	r1, r5
 800d91c:	f7f3 fa0a 	bl	8000d34 <__aeabi_fmul>
 800d920:	496f      	ldr	r1, [pc, #444]	; (800dae0 <__ieee754_asinf+0x26c>)
 800d922:	4606      	mov	r6, r0
 800d924:	4628      	mov	r0, r5
 800d926:	f7f3 fa05 	bl	8000d34 <__aeabi_fmul>
 800d92a:	496e      	ldr	r1, [pc, #440]	; (800dae4 <__ieee754_asinf+0x270>)
 800d92c:	f7f3 f8f8 	bl	8000b20 <__aeabi_fsub>
 800d930:	4629      	mov	r1, r5
 800d932:	f7f3 f9ff 	bl	8000d34 <__aeabi_fmul>
 800d936:	496c      	ldr	r1, [pc, #432]	; (800dae8 <__ieee754_asinf+0x274>)
 800d938:	f7f3 f8f4 	bl	8000b24 <__addsf3>
 800d93c:	4629      	mov	r1, r5
 800d93e:	f7f3 f9f9 	bl	8000d34 <__aeabi_fmul>
 800d942:	496a      	ldr	r1, [pc, #424]	; (800daec <__ieee754_asinf+0x278>)
 800d944:	f7f3 f8ec 	bl	8000b20 <__aeabi_fsub>
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f3 f9f3 	bl	8000d34 <__aeabi_fmul>
 800d94e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d952:	f7f3 f8e7 	bl	8000b24 <__addsf3>
 800d956:	4601      	mov	r1, r0
 800d958:	4630      	mov	r0, r6
 800d95a:	f7f3 fa9f 	bl	8000e9c <__aeabi_fdiv>
 800d95e:	4621      	mov	r1, r4
 800d960:	f7f3 f9e8 	bl	8000d34 <__aeabi_fmul>
 800d964:	4601      	mov	r1, r0
 800d966:	4620      	mov	r0, r4
 800d968:	e797      	b.n	800d89a <__ieee754_asinf+0x26>
 800d96a:	4620      	mov	r0, r4
 800d96c:	f7ff f862 	bl	800ca34 <fabsf>
 800d970:	4601      	mov	r1, r0
 800d972:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d976:	f7f3 f8d3 	bl	8000b20 <__aeabi_fsub>
 800d97a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d97e:	f7f3 f9d9 	bl	8000d34 <__aeabi_fmul>
 800d982:	4606      	mov	r6, r0
 800d984:	4950      	ldr	r1, [pc, #320]	; (800dac8 <__ieee754_asinf+0x254>)
 800d986:	f7f3 f9d5 	bl	8000d34 <__aeabi_fmul>
 800d98a:	4950      	ldr	r1, [pc, #320]	; (800dacc <__ieee754_asinf+0x258>)
 800d98c:	f7f3 f8ca 	bl	8000b24 <__addsf3>
 800d990:	4631      	mov	r1, r6
 800d992:	f7f3 f9cf 	bl	8000d34 <__aeabi_fmul>
 800d996:	494e      	ldr	r1, [pc, #312]	; (800dad0 <__ieee754_asinf+0x25c>)
 800d998:	f7f3 f8c2 	bl	8000b20 <__aeabi_fsub>
 800d99c:	4631      	mov	r1, r6
 800d99e:	f7f3 f9c9 	bl	8000d34 <__aeabi_fmul>
 800d9a2:	494c      	ldr	r1, [pc, #304]	; (800dad4 <__ieee754_asinf+0x260>)
 800d9a4:	f7f3 f8be 	bl	8000b24 <__addsf3>
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	f7f3 f9c3 	bl	8000d34 <__aeabi_fmul>
 800d9ae:	494a      	ldr	r1, [pc, #296]	; (800dad8 <__ieee754_asinf+0x264>)
 800d9b0:	f7f3 f8b6 	bl	8000b20 <__aeabi_fsub>
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	f7f3 f9bd 	bl	8000d34 <__aeabi_fmul>
 800d9ba:	4948      	ldr	r1, [pc, #288]	; (800dadc <__ieee754_asinf+0x268>)
 800d9bc:	f7f3 f8b2 	bl	8000b24 <__addsf3>
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	f7f3 f9b7 	bl	8000d34 <__aeabi_fmul>
 800d9c6:	4946      	ldr	r1, [pc, #280]	; (800dae0 <__ieee754_asinf+0x26c>)
 800d9c8:	4681      	mov	r9, r0
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f7f3 f9b2 	bl	8000d34 <__aeabi_fmul>
 800d9d0:	4944      	ldr	r1, [pc, #272]	; (800dae4 <__ieee754_asinf+0x270>)
 800d9d2:	f7f3 f8a5 	bl	8000b20 <__aeabi_fsub>
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	f7f3 f9ac 	bl	8000d34 <__aeabi_fmul>
 800d9dc:	4942      	ldr	r1, [pc, #264]	; (800dae8 <__ieee754_asinf+0x274>)
 800d9de:	f7f3 f8a1 	bl	8000b24 <__addsf3>
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	f7f3 f9a6 	bl	8000d34 <__aeabi_fmul>
 800d9e8:	4940      	ldr	r1, [pc, #256]	; (800daec <__ieee754_asinf+0x278>)
 800d9ea:	f7f3 f899 	bl	8000b20 <__aeabi_fsub>
 800d9ee:	4631      	mov	r1, r6
 800d9f0:	f7f3 f9a0 	bl	8000d34 <__aeabi_fmul>
 800d9f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d9f8:	f7f3 f894 	bl	8000b24 <__addsf3>
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 fa60 	bl	800dec4 <__ieee754_sqrtf>
 800da04:	4b3a      	ldr	r3, [pc, #232]	; (800daf0 <__ieee754_asinf+0x27c>)
 800da06:	4607      	mov	r7, r0
 800da08:	4598      	cmp	r8, r3
 800da0a:	dd1a      	ble.n	800da42 <__ieee754_asinf+0x1ce>
 800da0c:	4651      	mov	r1, sl
 800da0e:	4648      	mov	r0, r9
 800da10:	f7f3 fa44 	bl	8000e9c <__aeabi_fdiv>
 800da14:	4639      	mov	r1, r7
 800da16:	f7f3 f98d 	bl	8000d34 <__aeabi_fmul>
 800da1a:	4639      	mov	r1, r7
 800da1c:	f7f3 f882 	bl	8000b24 <__addsf3>
 800da20:	4601      	mov	r1, r0
 800da22:	f7f3 f87f 	bl	8000b24 <__addsf3>
 800da26:	4933      	ldr	r1, [pc, #204]	; (800daf4 <__ieee754_asinf+0x280>)
 800da28:	f7f3 f87c 	bl	8000b24 <__addsf3>
 800da2c:	4601      	mov	r1, r0
 800da2e:	4823      	ldr	r0, [pc, #140]	; (800dabc <__ieee754_asinf+0x248>)
 800da30:	f7f3 f876 	bl	8000b20 <__aeabi_fsub>
 800da34:	2d00      	cmp	r5, #0
 800da36:	4604      	mov	r4, r0
 800da38:	f73f af4a 	bgt.w	800d8d0 <__ieee754_asinf+0x5c>
 800da3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800da40:	e735      	b.n	800d8ae <__ieee754_asinf+0x3a>
 800da42:	4601      	mov	r1, r0
 800da44:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800da48:	f7f3 f86c 	bl	8000b24 <__addsf3>
 800da4c:	4651      	mov	r1, sl
 800da4e:	4604      	mov	r4, r0
 800da50:	4648      	mov	r0, r9
 800da52:	f7f3 fa23 	bl	8000e9c <__aeabi_fdiv>
 800da56:	4601      	mov	r1, r0
 800da58:	4620      	mov	r0, r4
 800da5a:	f7f3 f96b 	bl	8000d34 <__aeabi_fmul>
 800da5e:	f028 080f 	bic.w	r8, r8, #15
 800da62:	4681      	mov	r9, r0
 800da64:	4641      	mov	r1, r8
 800da66:	4640      	mov	r0, r8
 800da68:	f7f3 f964 	bl	8000d34 <__aeabi_fmul>
 800da6c:	4601      	mov	r1, r0
 800da6e:	4630      	mov	r0, r6
 800da70:	f7f3 f856 	bl	8000b20 <__aeabi_fsub>
 800da74:	4641      	mov	r1, r8
 800da76:	4604      	mov	r4, r0
 800da78:	4638      	mov	r0, r7
 800da7a:	f7f3 f853 	bl	8000b24 <__addsf3>
 800da7e:	4601      	mov	r1, r0
 800da80:	4620      	mov	r0, r4
 800da82:	f7f3 fa0b 	bl	8000e9c <__aeabi_fdiv>
 800da86:	4601      	mov	r1, r0
 800da88:	f7f3 f84c 	bl	8000b24 <__addsf3>
 800da8c:	4601      	mov	r1, r0
 800da8e:	480c      	ldr	r0, [pc, #48]	; (800dac0 <__ieee754_asinf+0x24c>)
 800da90:	f7f3 f846 	bl	8000b20 <__aeabi_fsub>
 800da94:	4601      	mov	r1, r0
 800da96:	4648      	mov	r0, r9
 800da98:	f7f3 f842 	bl	8000b20 <__aeabi_fsub>
 800da9c:	4641      	mov	r1, r8
 800da9e:	4604      	mov	r4, r0
 800daa0:	4640      	mov	r0, r8
 800daa2:	f7f3 f83f 	bl	8000b24 <__addsf3>
 800daa6:	4601      	mov	r1, r0
 800daa8:	4813      	ldr	r0, [pc, #76]	; (800daf8 <__ieee754_asinf+0x284>)
 800daaa:	f7f3 f839 	bl	8000b20 <__aeabi_fsub>
 800daae:	4601      	mov	r1, r0
 800dab0:	4620      	mov	r0, r4
 800dab2:	f7f3 f835 	bl	8000b20 <__aeabi_fsub>
 800dab6:	4601      	mov	r1, r0
 800dab8:	480f      	ldr	r0, [pc, #60]	; (800daf8 <__ieee754_asinf+0x284>)
 800daba:	e7b9      	b.n	800da30 <__ieee754_asinf+0x1bc>
 800dabc:	3fc90fdb 	.word	0x3fc90fdb
 800dac0:	b33bbd2e 	.word	0xb33bbd2e
 800dac4:	7149f2ca 	.word	0x7149f2ca
 800dac8:	3811ef08 	.word	0x3811ef08
 800dacc:	3a4f7f04 	.word	0x3a4f7f04
 800dad0:	3d241146 	.word	0x3d241146
 800dad4:	3e4e0aa8 	.word	0x3e4e0aa8
 800dad8:	3ea6b090 	.word	0x3ea6b090
 800dadc:	3e2aaaab 	.word	0x3e2aaaab
 800dae0:	3d9dc62e 	.word	0x3d9dc62e
 800dae4:	3f303361 	.word	0x3f303361
 800dae8:	4001572d 	.word	0x4001572d
 800daec:	4019d139 	.word	0x4019d139
 800daf0:	3f799999 	.word	0x3f799999
 800daf4:	333bbd2e 	.word	0x333bbd2e
 800daf8:	3f490fdb 	.word	0x3f490fdb

0800dafc <__ieee754_atan2f>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800db02:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800db06:	4603      	mov	r3, r0
 800db08:	dc05      	bgt.n	800db16 <__ieee754_atan2f+0x1a>
 800db0a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800db0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db12:	4607      	mov	r7, r0
 800db14:	dd04      	ble.n	800db20 <__ieee754_atan2f+0x24>
 800db16:	4618      	mov	r0, r3
 800db18:	f7f3 f804 	bl	8000b24 <__addsf3>
 800db1c:	4603      	mov	r3, r0
 800db1e:	e011      	b.n	800db44 <__ieee754_atan2f+0x48>
 800db20:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800db24:	d103      	bne.n	800db2e <__ieee754_atan2f+0x32>
 800db26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db2a:	f7fe be43 	b.w	800c7b4 <atanf>
 800db2e:	178c      	asrs	r4, r1, #30
 800db30:	f004 0402 	and.w	r4, r4, #2
 800db34:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800db38:	b932      	cbnz	r2, 800db48 <__ieee754_atan2f+0x4c>
 800db3a:	2c02      	cmp	r4, #2
 800db3c:	d04c      	beq.n	800dbd8 <__ieee754_atan2f+0xdc>
 800db3e:	2c03      	cmp	r4, #3
 800db40:	d100      	bne.n	800db44 <__ieee754_atan2f+0x48>
 800db42:	4b29      	ldr	r3, [pc, #164]	; (800dbe8 <__ieee754_atan2f+0xec>)
 800db44:	4618      	mov	r0, r3
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db48:	b91e      	cbnz	r6, 800db52 <__ieee754_atan2f+0x56>
 800db4a:	2f00      	cmp	r7, #0
 800db4c:	da4a      	bge.n	800dbe4 <__ieee754_atan2f+0xe8>
 800db4e:	4b27      	ldr	r3, [pc, #156]	; (800dbec <__ieee754_atan2f+0xf0>)
 800db50:	e7f8      	b.n	800db44 <__ieee754_atan2f+0x48>
 800db52:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800db56:	d10e      	bne.n	800db76 <__ieee754_atan2f+0x7a>
 800db58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db5c:	f104 34ff 	add.w	r4, r4, #4294967295
 800db60:	d105      	bne.n	800db6e <__ieee754_atan2f+0x72>
 800db62:	2c02      	cmp	r4, #2
 800db64:	d83a      	bhi.n	800dbdc <__ieee754_atan2f+0xe0>
 800db66:	4b22      	ldr	r3, [pc, #136]	; (800dbf0 <__ieee754_atan2f+0xf4>)
 800db68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800db6c:	e7ea      	b.n	800db44 <__ieee754_atan2f+0x48>
 800db6e:	2c02      	cmp	r4, #2
 800db70:	d836      	bhi.n	800dbe0 <__ieee754_atan2f+0xe4>
 800db72:	4b20      	ldr	r3, [pc, #128]	; (800dbf4 <__ieee754_atan2f+0xf8>)
 800db74:	e7f8      	b.n	800db68 <__ieee754_atan2f+0x6c>
 800db76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800db7a:	d0e6      	beq.n	800db4a <__ieee754_atan2f+0x4e>
 800db7c:	1b92      	subs	r2, r2, r6
 800db7e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800db82:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800db86:	da17      	bge.n	800dbb8 <__ieee754_atan2f+0xbc>
 800db88:	2900      	cmp	r1, #0
 800db8a:	da01      	bge.n	800db90 <__ieee754_atan2f+0x94>
 800db8c:	303c      	adds	r0, #60	; 0x3c
 800db8e:	db15      	blt.n	800dbbc <__ieee754_atan2f+0xc0>
 800db90:	4618      	mov	r0, r3
 800db92:	f7f3 f983 	bl	8000e9c <__aeabi_fdiv>
 800db96:	f7fe ff4d 	bl	800ca34 <fabsf>
 800db9a:	f7fe fe0b 	bl	800c7b4 <atanf>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2c01      	cmp	r4, #1
 800dba2:	d00d      	beq.n	800dbc0 <__ieee754_atan2f+0xc4>
 800dba4:	2c02      	cmp	r4, #2
 800dba6:	d00e      	beq.n	800dbc6 <__ieee754_atan2f+0xca>
 800dba8:	2c00      	cmp	r4, #0
 800dbaa:	d0cb      	beq.n	800db44 <__ieee754_atan2f+0x48>
 800dbac:	4912      	ldr	r1, [pc, #72]	; (800dbf8 <__ieee754_atan2f+0xfc>)
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f2 ffb8 	bl	8000b24 <__addsf3>
 800dbb4:	4911      	ldr	r1, [pc, #68]	; (800dbfc <__ieee754_atan2f+0x100>)
 800dbb6:	e00c      	b.n	800dbd2 <__ieee754_atan2f+0xd6>
 800dbb8:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <__ieee754_atan2f+0x104>)
 800dbba:	e7f1      	b.n	800dba0 <__ieee754_atan2f+0xa4>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e7ef      	b.n	800dba0 <__ieee754_atan2f+0xa4>
 800dbc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbc4:	e7be      	b.n	800db44 <__ieee754_atan2f+0x48>
 800dbc6:	490c      	ldr	r1, [pc, #48]	; (800dbf8 <__ieee754_atan2f+0xfc>)
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f2 ffab 	bl	8000b24 <__addsf3>
 800dbce:	4601      	mov	r1, r0
 800dbd0:	480a      	ldr	r0, [pc, #40]	; (800dbfc <__ieee754_atan2f+0x100>)
 800dbd2:	f7f2 ffa5 	bl	8000b20 <__aeabi_fsub>
 800dbd6:	e7a1      	b.n	800db1c <__ieee754_atan2f+0x20>
 800dbd8:	4b08      	ldr	r3, [pc, #32]	; (800dbfc <__ieee754_atan2f+0x100>)
 800dbda:	e7b3      	b.n	800db44 <__ieee754_atan2f+0x48>
 800dbdc:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <__ieee754_atan2f+0x108>)
 800dbde:	e7b1      	b.n	800db44 <__ieee754_atan2f+0x48>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e7af      	b.n	800db44 <__ieee754_atan2f+0x48>
 800dbe4:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <__ieee754_atan2f+0x104>)
 800dbe6:	e7ad      	b.n	800db44 <__ieee754_atan2f+0x48>
 800dbe8:	c0490fdb 	.word	0xc0490fdb
 800dbec:	bfc90fdb 	.word	0xbfc90fdb
 800dbf0:	0800edf0 	.word	0x0800edf0
 800dbf4:	0800edfc 	.word	0x0800edfc
 800dbf8:	33bbbd2e 	.word	0x33bbbd2e
 800dbfc:	40490fdb 	.word	0x40490fdb
 800dc00:	3fc90fdb 	.word	0x3fc90fdb
 800dc04:	3f490fdb 	.word	0x3f490fdb

0800dc08 <__ieee754_rem_pio2f>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	4aa0      	ldr	r2, [pc, #640]	; (800de90 <__ieee754_rem_pio2f+0x288>)
 800dc0e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800dc12:	4296      	cmp	r6, r2
 800dc14:	460c      	mov	r4, r1
 800dc16:	4682      	mov	sl, r0
 800dc18:	b087      	sub	sp, #28
 800dc1a:	dc04      	bgt.n	800dc26 <__ieee754_rem_pio2f+0x1e>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	6008      	str	r0, [r1, #0]
 800dc20:	604b      	str	r3, [r1, #4]
 800dc22:	2500      	movs	r5, #0
 800dc24:	e01a      	b.n	800dc5c <__ieee754_rem_pio2f+0x54>
 800dc26:	4a9b      	ldr	r2, [pc, #620]	; (800de94 <__ieee754_rem_pio2f+0x28c>)
 800dc28:	4296      	cmp	r6, r2
 800dc2a:	dc4b      	bgt.n	800dcc4 <__ieee754_rem_pio2f+0xbc>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	499a      	ldr	r1, [pc, #616]	; (800de98 <__ieee754_rem_pio2f+0x290>)
 800dc30:	4f9a      	ldr	r7, [pc, #616]	; (800de9c <__ieee754_rem_pio2f+0x294>)
 800dc32:	f026 060f 	bic.w	r6, r6, #15
 800dc36:	dd23      	ble.n	800dc80 <__ieee754_rem_pio2f+0x78>
 800dc38:	f7f2 ff72 	bl	8000b20 <__aeabi_fsub>
 800dc3c:	42be      	cmp	r6, r7
 800dc3e:	4605      	mov	r5, r0
 800dc40:	d010      	beq.n	800dc64 <__ieee754_rem_pio2f+0x5c>
 800dc42:	4997      	ldr	r1, [pc, #604]	; (800dea0 <__ieee754_rem_pio2f+0x298>)
 800dc44:	f7f2 ff6c 	bl	8000b20 <__aeabi_fsub>
 800dc48:	4601      	mov	r1, r0
 800dc4a:	6020      	str	r0, [r4, #0]
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f7f2 ff67 	bl	8000b20 <__aeabi_fsub>
 800dc52:	4993      	ldr	r1, [pc, #588]	; (800dea0 <__ieee754_rem_pio2f+0x298>)
 800dc54:	f7f2 ff64 	bl	8000b20 <__aeabi_fsub>
 800dc58:	2501      	movs	r5, #1
 800dc5a:	6060      	str	r0, [r4, #4]
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	b007      	add	sp, #28
 800dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc64:	498f      	ldr	r1, [pc, #572]	; (800dea4 <__ieee754_rem_pio2f+0x29c>)
 800dc66:	f7f2 ff5b 	bl	8000b20 <__aeabi_fsub>
 800dc6a:	498f      	ldr	r1, [pc, #572]	; (800dea8 <__ieee754_rem_pio2f+0x2a0>)
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	f7f2 ff57 	bl	8000b20 <__aeabi_fsub>
 800dc72:	4601      	mov	r1, r0
 800dc74:	6020      	str	r0, [r4, #0]
 800dc76:	4628      	mov	r0, r5
 800dc78:	f7f2 ff52 	bl	8000b20 <__aeabi_fsub>
 800dc7c:	498a      	ldr	r1, [pc, #552]	; (800dea8 <__ieee754_rem_pio2f+0x2a0>)
 800dc7e:	e7e9      	b.n	800dc54 <__ieee754_rem_pio2f+0x4c>
 800dc80:	f7f2 ff50 	bl	8000b24 <__addsf3>
 800dc84:	42be      	cmp	r6, r7
 800dc86:	4605      	mov	r5, r0
 800dc88:	d00e      	beq.n	800dca8 <__ieee754_rem_pio2f+0xa0>
 800dc8a:	4985      	ldr	r1, [pc, #532]	; (800dea0 <__ieee754_rem_pio2f+0x298>)
 800dc8c:	f7f2 ff4a 	bl	8000b24 <__addsf3>
 800dc90:	4601      	mov	r1, r0
 800dc92:	6020      	str	r0, [r4, #0]
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7f2 ff43 	bl	8000b20 <__aeabi_fsub>
 800dc9a:	4981      	ldr	r1, [pc, #516]	; (800dea0 <__ieee754_rem_pio2f+0x298>)
 800dc9c:	f7f2 ff42 	bl	8000b24 <__addsf3>
 800dca0:	f04f 35ff 	mov.w	r5, #4294967295
 800dca4:	6060      	str	r0, [r4, #4]
 800dca6:	e7d9      	b.n	800dc5c <__ieee754_rem_pio2f+0x54>
 800dca8:	497e      	ldr	r1, [pc, #504]	; (800dea4 <__ieee754_rem_pio2f+0x29c>)
 800dcaa:	f7f2 ff3b 	bl	8000b24 <__addsf3>
 800dcae:	497e      	ldr	r1, [pc, #504]	; (800dea8 <__ieee754_rem_pio2f+0x2a0>)
 800dcb0:	4605      	mov	r5, r0
 800dcb2:	f7f2 ff37 	bl	8000b24 <__addsf3>
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	6020      	str	r0, [r4, #0]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7f2 ff30 	bl	8000b20 <__aeabi_fsub>
 800dcc0:	4979      	ldr	r1, [pc, #484]	; (800dea8 <__ieee754_rem_pio2f+0x2a0>)
 800dcc2:	e7eb      	b.n	800dc9c <__ieee754_rem_pio2f+0x94>
 800dcc4:	4a79      	ldr	r2, [pc, #484]	; (800deac <__ieee754_rem_pio2f+0x2a4>)
 800dcc6:	4296      	cmp	r6, r2
 800dcc8:	f300 8091 	bgt.w	800ddee <__ieee754_rem_pio2f+0x1e6>
 800dccc:	f7fe feb2 	bl	800ca34 <fabsf>
 800dcd0:	4977      	ldr	r1, [pc, #476]	; (800deb0 <__ieee754_rem_pio2f+0x2a8>)
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	f7f3 f82e 	bl	8000d34 <__aeabi_fmul>
 800dcd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dcdc:	f7f2 ff22 	bl	8000b24 <__addsf3>
 800dce0:	f7f3 fa04 	bl	80010ec <__aeabi_f2iz>
 800dce4:	4605      	mov	r5, r0
 800dce6:	f7f2 ffd1 	bl	8000c8c <__aeabi_i2f>
 800dcea:	496b      	ldr	r1, [pc, #428]	; (800de98 <__ieee754_rem_pio2f+0x290>)
 800dcec:	4681      	mov	r9, r0
 800dcee:	f7f3 f821 	bl	8000d34 <__aeabi_fmul>
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	f7f2 ff13 	bl	8000b20 <__aeabi_fsub>
 800dcfa:	4969      	ldr	r1, [pc, #420]	; (800dea0 <__ieee754_rem_pio2f+0x298>)
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	4648      	mov	r0, r9
 800dd00:	f7f3 f818 	bl	8000d34 <__aeabi_fmul>
 800dd04:	2d1f      	cmp	r5, #31
 800dd06:	4607      	mov	r7, r0
 800dd08:	dc0c      	bgt.n	800dd24 <__ieee754_rem_pio2f+0x11c>
 800dd0a:	4a6a      	ldr	r2, [pc, #424]	; (800deb4 <__ieee754_rem_pio2f+0x2ac>)
 800dd0c:	1e69      	subs	r1, r5, #1
 800dd0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dd12:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d004      	beq.n	800dd24 <__ieee754_rem_pio2f+0x11c>
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	f7f2 feff 	bl	8000b20 <__aeabi_fsub>
 800dd22:	e00b      	b.n	800dd3c <__ieee754_rem_pio2f+0x134>
 800dd24:	4639      	mov	r1, r7
 800dd26:	4640      	mov	r0, r8
 800dd28:	f7f2 fefa 	bl	8000b20 <__aeabi_fsub>
 800dd2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dd30:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800dd34:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800dd38:	2e08      	cmp	r6, #8
 800dd3a:	dc01      	bgt.n	800dd40 <__ieee754_rem_pio2f+0x138>
 800dd3c:	6020      	str	r0, [r4, #0]
 800dd3e:	e026      	b.n	800dd8e <__ieee754_rem_pio2f+0x186>
 800dd40:	4958      	ldr	r1, [pc, #352]	; (800dea4 <__ieee754_rem_pio2f+0x29c>)
 800dd42:	4648      	mov	r0, r9
 800dd44:	f7f2 fff6 	bl	8000d34 <__aeabi_fmul>
 800dd48:	4607      	mov	r7, r0
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	f7f2 fee7 	bl	8000b20 <__aeabi_fsub>
 800dd52:	4601      	mov	r1, r0
 800dd54:	4606      	mov	r6, r0
 800dd56:	4640      	mov	r0, r8
 800dd58:	f7f2 fee2 	bl	8000b20 <__aeabi_fsub>
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	f7f2 fedf 	bl	8000b20 <__aeabi_fsub>
 800dd62:	4607      	mov	r7, r0
 800dd64:	4950      	ldr	r1, [pc, #320]	; (800dea8 <__ieee754_rem_pio2f+0x2a0>)
 800dd66:	4648      	mov	r0, r9
 800dd68:	f7f2 ffe4 	bl	8000d34 <__aeabi_fmul>
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	f7f2 fed7 	bl	8000b20 <__aeabi_fsub>
 800dd72:	4601      	mov	r1, r0
 800dd74:	4607      	mov	r7, r0
 800dd76:	4630      	mov	r0, r6
 800dd78:	f7f2 fed2 	bl	8000b20 <__aeabi_fsub>
 800dd7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dd80:	ebab 0b03 	sub.w	fp, fp, r3
 800dd84:	f1bb 0f19 	cmp.w	fp, #25
 800dd88:	dc16      	bgt.n	800ddb8 <__ieee754_rem_pio2f+0x1b0>
 800dd8a:	46b0      	mov	r8, r6
 800dd8c:	6020      	str	r0, [r4, #0]
 800dd8e:	6826      	ldr	r6, [r4, #0]
 800dd90:	4640      	mov	r0, r8
 800dd92:	4631      	mov	r1, r6
 800dd94:	f7f2 fec4 	bl	8000b20 <__aeabi_fsub>
 800dd98:	4639      	mov	r1, r7
 800dd9a:	f7f2 fec1 	bl	8000b20 <__aeabi_fsub>
 800dd9e:	f1ba 0f00 	cmp.w	sl, #0
 800dda2:	6060      	str	r0, [r4, #4]
 800dda4:	f6bf af5a 	bge.w	800dc5c <__ieee754_rem_pio2f+0x54>
 800dda8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ddac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ddb0:	6026      	str	r6, [r4, #0]
 800ddb2:	6060      	str	r0, [r4, #4]
 800ddb4:	426d      	negs	r5, r5
 800ddb6:	e751      	b.n	800dc5c <__ieee754_rem_pio2f+0x54>
 800ddb8:	493f      	ldr	r1, [pc, #252]	; (800deb8 <__ieee754_rem_pio2f+0x2b0>)
 800ddba:	4648      	mov	r0, r9
 800ddbc:	f7f2 ffba 	bl	8000d34 <__aeabi_fmul>
 800ddc0:	4607      	mov	r7, r0
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f7f2 feab 	bl	8000b20 <__aeabi_fsub>
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4680      	mov	r8, r0
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7f2 fea6 	bl	8000b20 <__aeabi_fsub>
 800ddd4:	4639      	mov	r1, r7
 800ddd6:	f7f2 fea3 	bl	8000b20 <__aeabi_fsub>
 800ddda:	4606      	mov	r6, r0
 800dddc:	4937      	ldr	r1, [pc, #220]	; (800debc <__ieee754_rem_pio2f+0x2b4>)
 800ddde:	4648      	mov	r0, r9
 800dde0:	f7f2 ffa8 	bl	8000d34 <__aeabi_fmul>
 800dde4:	4631      	mov	r1, r6
 800dde6:	f7f2 fe9b 	bl	8000b20 <__aeabi_fsub>
 800ddea:	4607      	mov	r7, r0
 800ddec:	e795      	b.n	800dd1a <__ieee754_rem_pio2f+0x112>
 800ddee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ddf2:	db05      	blt.n	800de00 <__ieee754_rem_pio2f+0x1f8>
 800ddf4:	4601      	mov	r1, r0
 800ddf6:	f7f2 fe93 	bl	8000b20 <__aeabi_fsub>
 800ddfa:	6060      	str	r0, [r4, #4]
 800ddfc:	6020      	str	r0, [r4, #0]
 800ddfe:	e710      	b.n	800dc22 <__ieee754_rem_pio2f+0x1a>
 800de00:	15f7      	asrs	r7, r6, #23
 800de02:	3f86      	subs	r7, #134	; 0x86
 800de04:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800de08:	4630      	mov	r0, r6
 800de0a:	f7f3 f96f 	bl	80010ec <__aeabi_f2iz>
 800de0e:	f7f2 ff3d 	bl	8000c8c <__aeabi_i2f>
 800de12:	4601      	mov	r1, r0
 800de14:	9003      	str	r0, [sp, #12]
 800de16:	4630      	mov	r0, r6
 800de18:	f7f2 fe82 	bl	8000b20 <__aeabi_fsub>
 800de1c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800de20:	f7f2 ff88 	bl	8000d34 <__aeabi_fmul>
 800de24:	4606      	mov	r6, r0
 800de26:	f7f3 f961 	bl	80010ec <__aeabi_f2iz>
 800de2a:	f7f2 ff2f 	bl	8000c8c <__aeabi_i2f>
 800de2e:	4601      	mov	r1, r0
 800de30:	9004      	str	r0, [sp, #16]
 800de32:	4605      	mov	r5, r0
 800de34:	4630      	mov	r0, r6
 800de36:	f7f2 fe73 	bl	8000b20 <__aeabi_fsub>
 800de3a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800de3e:	f7f2 ff79 	bl	8000d34 <__aeabi_fmul>
 800de42:	2100      	movs	r1, #0
 800de44:	9005      	str	r0, [sp, #20]
 800de46:	f7f3 f909 	bl	800105c <__aeabi_fcmpeq>
 800de4a:	b1f0      	cbz	r0, 800de8a <__ieee754_rem_pio2f+0x282>
 800de4c:	2100      	movs	r1, #0
 800de4e:	4628      	mov	r0, r5
 800de50:	f7f3 f904 	bl	800105c <__aeabi_fcmpeq>
 800de54:	2800      	cmp	r0, #0
 800de56:	bf14      	ite	ne
 800de58:	2301      	movne	r3, #1
 800de5a:	2302      	moveq	r3, #2
 800de5c:	4a18      	ldr	r2, [pc, #96]	; (800dec0 <__ieee754_rem_pio2f+0x2b8>)
 800de5e:	4621      	mov	r1, r4
 800de60:	9201      	str	r2, [sp, #4]
 800de62:	2202      	movs	r2, #2
 800de64:	a803      	add	r0, sp, #12
 800de66:	9200      	str	r2, [sp, #0]
 800de68:	463a      	mov	r2, r7
 800de6a:	f000 f8fd 	bl	800e068 <__kernel_rem_pio2f>
 800de6e:	f1ba 0f00 	cmp.w	sl, #0
 800de72:	4605      	mov	r5, r0
 800de74:	f6bf aef2 	bge.w	800dc5c <__ieee754_rem_pio2f+0x54>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	6863      	ldr	r3, [r4, #4]
 800de82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de86:	6063      	str	r3, [r4, #4]
 800de88:	e794      	b.n	800ddb4 <__ieee754_rem_pio2f+0x1ac>
 800de8a:	2303      	movs	r3, #3
 800de8c:	e7e6      	b.n	800de5c <__ieee754_rem_pio2f+0x254>
 800de8e:	bf00      	nop
 800de90:	3f490fd8 	.word	0x3f490fd8
 800de94:	4016cbe3 	.word	0x4016cbe3
 800de98:	3fc90f80 	.word	0x3fc90f80
 800de9c:	3fc90fd0 	.word	0x3fc90fd0
 800dea0:	37354443 	.word	0x37354443
 800dea4:	37354400 	.word	0x37354400
 800dea8:	2e85a308 	.word	0x2e85a308
 800deac:	43490f80 	.word	0x43490f80
 800deb0:	3f22f984 	.word	0x3f22f984
 800deb4:	0800ee08 	.word	0x0800ee08
 800deb8:	2e85a300 	.word	0x2e85a300
 800debc:	248d3132 	.word	0x248d3132
 800dec0:	0800ee88 	.word	0x0800ee88

0800dec4 <__ieee754_sqrtf>:
 800dec4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dec8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4603      	mov	r3, r0
 800ded0:	4604      	mov	r4, r0
 800ded2:	d309      	bcc.n	800dee8 <__ieee754_sqrtf+0x24>
 800ded4:	4601      	mov	r1, r0
 800ded6:	f7f2 ff2d 	bl	8000d34 <__aeabi_fmul>
 800deda:	4601      	mov	r1, r0
 800dedc:	4620      	mov	r0, r4
 800dede:	f7f2 fe21 	bl	8000b24 <__addsf3>
 800dee2:	4604      	mov	r4, r0
 800dee4:	4620      	mov	r0, r4
 800dee6:	bd70      	pop	{r4, r5, r6, pc}
 800dee8:	2a00      	cmp	r2, #0
 800deea:	d0fb      	beq.n	800dee4 <__ieee754_sqrtf+0x20>
 800deec:	2800      	cmp	r0, #0
 800deee:	da06      	bge.n	800defe <__ieee754_sqrtf+0x3a>
 800def0:	4601      	mov	r1, r0
 800def2:	f7f2 fe15 	bl	8000b20 <__aeabi_fsub>
 800def6:	4601      	mov	r1, r0
 800def8:	f7f2 ffd0 	bl	8000e9c <__aeabi_fdiv>
 800defc:	e7f1      	b.n	800dee2 <__ieee754_sqrtf+0x1e>
 800defe:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800df02:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800df06:	d029      	beq.n	800df5c <__ieee754_sqrtf+0x98>
 800df08:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800df0c:	07cb      	lsls	r3, r1, #31
 800df0e:	f04f 0300 	mov.w	r3, #0
 800df12:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800df16:	f04f 0419 	mov.w	r4, #25
 800df1a:	461e      	mov	r6, r3
 800df1c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800df20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800df24:	bf58      	it	pl
 800df26:	0052      	lslpl	r2, r2, #1
 800df28:	1040      	asrs	r0, r0, #1
 800df2a:	0052      	lsls	r2, r2, #1
 800df2c:	1875      	adds	r5, r6, r1
 800df2e:	4295      	cmp	r5, r2
 800df30:	bfde      	ittt	le
 800df32:	186e      	addle	r6, r5, r1
 800df34:	1b52      	suble	r2, r2, r5
 800df36:	185b      	addle	r3, r3, r1
 800df38:	3c01      	subs	r4, #1
 800df3a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800df3e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df42:	d1f3      	bne.n	800df2c <__ieee754_sqrtf+0x68>
 800df44:	b112      	cbz	r2, 800df4c <__ieee754_sqrtf+0x88>
 800df46:	3301      	adds	r3, #1
 800df48:	f023 0301 	bic.w	r3, r3, #1
 800df4c:	105c      	asrs	r4, r3, #1
 800df4e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800df52:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800df56:	e7c5      	b.n	800dee4 <__ieee754_sqrtf+0x20>
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	3201      	adds	r2, #1
 800df5c:	0218      	lsls	r0, r3, #8
 800df5e:	d5fb      	bpl.n	800df58 <__ieee754_sqrtf+0x94>
 800df60:	3a01      	subs	r2, #1
 800df62:	1a89      	subs	r1, r1, r2
 800df64:	e7d0      	b.n	800df08 <__ieee754_sqrtf+0x44>
	...

0800df68 <__kernel_cosf>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800df70:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800df74:	4606      	mov	r6, r0
 800df76:	4688      	mov	r8, r1
 800df78:	da03      	bge.n	800df82 <__kernel_cosf+0x1a>
 800df7a:	f7f3 f8b7 	bl	80010ec <__aeabi_f2iz>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d05c      	beq.n	800e03c <__kernel_cosf+0xd4>
 800df82:	4631      	mov	r1, r6
 800df84:	4630      	mov	r0, r6
 800df86:	f7f2 fed5 	bl	8000d34 <__aeabi_fmul>
 800df8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800df8e:	4605      	mov	r5, r0
 800df90:	f7f2 fed0 	bl	8000d34 <__aeabi_fmul>
 800df94:	492b      	ldr	r1, [pc, #172]	; (800e044 <__kernel_cosf+0xdc>)
 800df96:	4607      	mov	r7, r0
 800df98:	4628      	mov	r0, r5
 800df9a:	f7f2 fecb 	bl	8000d34 <__aeabi_fmul>
 800df9e:	492a      	ldr	r1, [pc, #168]	; (800e048 <__kernel_cosf+0xe0>)
 800dfa0:	f7f2 fdc0 	bl	8000b24 <__addsf3>
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	f7f2 fec5 	bl	8000d34 <__aeabi_fmul>
 800dfaa:	4928      	ldr	r1, [pc, #160]	; (800e04c <__kernel_cosf+0xe4>)
 800dfac:	f7f2 fdb8 	bl	8000b20 <__aeabi_fsub>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f7f2 febf 	bl	8000d34 <__aeabi_fmul>
 800dfb6:	4926      	ldr	r1, [pc, #152]	; (800e050 <__kernel_cosf+0xe8>)
 800dfb8:	f7f2 fdb4 	bl	8000b24 <__addsf3>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7f2 feb9 	bl	8000d34 <__aeabi_fmul>
 800dfc2:	4924      	ldr	r1, [pc, #144]	; (800e054 <__kernel_cosf+0xec>)
 800dfc4:	f7f2 fdac 	bl	8000b20 <__aeabi_fsub>
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 feb3 	bl	8000d34 <__aeabi_fmul>
 800dfce:	4922      	ldr	r1, [pc, #136]	; (800e058 <__kernel_cosf+0xf0>)
 800dfd0:	f7f2 fda8 	bl	8000b24 <__addsf3>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fead 	bl	8000d34 <__aeabi_fmul>
 800dfda:	4629      	mov	r1, r5
 800dfdc:	f7f2 feaa 	bl	8000d34 <__aeabi_fmul>
 800dfe0:	4641      	mov	r1, r8
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f7f2 fea5 	bl	8000d34 <__aeabi_fmul>
 800dfea:	4601      	mov	r1, r0
 800dfec:	4628      	mov	r0, r5
 800dfee:	f7f2 fd97 	bl	8000b20 <__aeabi_fsub>
 800dff2:	4b1a      	ldr	r3, [pc, #104]	; (800e05c <__kernel_cosf+0xf4>)
 800dff4:	4605      	mov	r5, r0
 800dff6:	429c      	cmp	r4, r3
 800dff8:	dc0a      	bgt.n	800e010 <__kernel_cosf+0xa8>
 800dffa:	4601      	mov	r1, r0
 800dffc:	4638      	mov	r0, r7
 800dffe:	f7f2 fd8f 	bl	8000b20 <__aeabi_fsub>
 800e002:	4601      	mov	r1, r0
 800e004:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e008:	f7f2 fd8a 	bl	8000b20 <__aeabi_fsub>
 800e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e010:	4b13      	ldr	r3, [pc, #76]	; (800e060 <__kernel_cosf+0xf8>)
 800e012:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e016:	429c      	cmp	r4, r3
 800e018:	bfcc      	ite	gt
 800e01a:	4c12      	ldrgt	r4, [pc, #72]	; (800e064 <__kernel_cosf+0xfc>)
 800e01c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e020:	4621      	mov	r1, r4
 800e022:	f7f2 fd7d 	bl	8000b20 <__aeabi_fsub>
 800e026:	4621      	mov	r1, r4
 800e028:	4606      	mov	r6, r0
 800e02a:	4638      	mov	r0, r7
 800e02c:	f7f2 fd78 	bl	8000b20 <__aeabi_fsub>
 800e030:	4629      	mov	r1, r5
 800e032:	f7f2 fd75 	bl	8000b20 <__aeabi_fsub>
 800e036:	4601      	mov	r1, r0
 800e038:	4630      	mov	r0, r6
 800e03a:	e7e5      	b.n	800e008 <__kernel_cosf+0xa0>
 800e03c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e040:	e7e4      	b.n	800e00c <__kernel_cosf+0xa4>
 800e042:	bf00      	nop
 800e044:	ad47d74e 	.word	0xad47d74e
 800e048:	310f74f6 	.word	0x310f74f6
 800e04c:	3493f27c 	.word	0x3493f27c
 800e050:	37d00d01 	.word	0x37d00d01
 800e054:	3ab60b61 	.word	0x3ab60b61
 800e058:	3d2aaaab 	.word	0x3d2aaaab
 800e05c:	3e999999 	.word	0x3e999999
 800e060:	3f480000 	.word	0x3f480000
 800e064:	3e900000 	.word	0x3e900000

0800e068 <__kernel_rem_pio2f>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	b0db      	sub	sp, #364	; 0x16c
 800e06e:	9202      	str	r2, [sp, #8]
 800e070:	9304      	str	r3, [sp, #16]
 800e072:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e074:	4bc5      	ldr	r3, [pc, #788]	; (800e38c <__kernel_rem_pio2f+0x324>)
 800e076:	9005      	str	r0, [sp, #20]
 800e078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07c:	9100      	str	r1, [sp, #0]
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	9b04      	ldr	r3, [sp, #16]
 800e082:	3b01      	subs	r3, #1
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	9b02      	ldr	r3, [sp, #8]
 800e088:	1d1a      	adds	r2, r3, #4
 800e08a:	f2c0 809b 	blt.w	800e1c4 <__kernel_rem_pio2f+0x15c>
 800e08e:	1edc      	subs	r4, r3, #3
 800e090:	bf48      	it	mi
 800e092:	1d1c      	addmi	r4, r3, #4
 800e094:	10e4      	asrs	r4, r4, #3
 800e096:	2500      	movs	r5, #0
 800e098:	f04f 0a00 	mov.w	sl, #0
 800e09c:	1c67      	adds	r7, r4, #1
 800e09e:	00fb      	lsls	r3, r7, #3
 800e0a0:	9306      	str	r3, [sp, #24]
 800e0a2:	9b02      	ldr	r3, [sp, #8]
 800e0a4:	9a03      	ldr	r2, [sp, #12]
 800e0a6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e0aa:	9b01      	ldr	r3, [sp, #4]
 800e0ac:	1aa6      	subs	r6, r4, r2
 800e0ae:	eb03 0802 	add.w	r8, r3, r2
 800e0b2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e0b4:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800e0b8:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800e0bc:	4545      	cmp	r5, r8
 800e0be:	f340 8083 	ble.w	800e1c8 <__kernel_rem_pio2f+0x160>
 800e0c2:	f04f 0800 	mov.w	r8, #0
 800e0c6:	f04f 0b00 	mov.w	fp, #0
 800e0ca:	9b04      	ldr	r3, [sp, #16]
 800e0cc:	aa1e      	add	r2, sp, #120	; 0x78
 800e0ce:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e0d2:	ab46      	add	r3, sp, #280	; 0x118
 800e0d4:	9a01      	ldr	r2, [sp, #4]
 800e0d6:	4590      	cmp	r8, r2
 800e0d8:	f340 809c 	ble.w	800e214 <__kernel_rem_pio2f+0x1ac>
 800e0dc:	4613      	mov	r3, r2
 800e0de:	aa0a      	add	r2, sp, #40	; 0x28
 800e0e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0e4:	9308      	str	r3, [sp, #32]
 800e0e6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e0e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e0ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e0f0:	9307      	str	r3, [sp, #28]
 800e0f2:	ad0a      	add	r5, sp, #40	; 0x28
 800e0f4:	462e      	mov	r6, r5
 800e0f6:	46c3      	mov	fp, r8
 800e0f8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800e0fc:	ab5a      	add	r3, sp, #360	; 0x168
 800e0fe:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e102:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e106:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800e10a:	f1bb 0f00 	cmp.w	fp, #0
 800e10e:	f300 8086 	bgt.w	800e21e <__kernel_rem_pio2f+0x1b6>
 800e112:	4639      	mov	r1, r7
 800e114:	4620      	mov	r0, r4
 800e116:	f000 fc3b 	bl	800e990 <scalbnf>
 800e11a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e11e:	4604      	mov	r4, r0
 800e120:	f7f2 fe08 	bl	8000d34 <__aeabi_fmul>
 800e124:	f000 fbee 	bl	800e904 <floorf>
 800e128:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e12c:	f7f2 fe02 	bl	8000d34 <__aeabi_fmul>
 800e130:	4601      	mov	r1, r0
 800e132:	4620      	mov	r0, r4
 800e134:	f7f2 fcf4 	bl	8000b20 <__aeabi_fsub>
 800e138:	4604      	mov	r4, r0
 800e13a:	f7f2 ffd7 	bl	80010ec <__aeabi_f2iz>
 800e13e:	4606      	mov	r6, r0
 800e140:	f7f2 fda4 	bl	8000c8c <__aeabi_i2f>
 800e144:	4601      	mov	r1, r0
 800e146:	4620      	mov	r0, r4
 800e148:	f7f2 fcea 	bl	8000b20 <__aeabi_fsub>
 800e14c:	2f00      	cmp	r7, #0
 800e14e:	4681      	mov	r9, r0
 800e150:	f340 8084 	ble.w	800e25c <__kernel_rem_pio2f+0x1f4>
 800e154:	f108 32ff 	add.w	r2, r8, #4294967295
 800e158:	ab0a      	add	r3, sp, #40	; 0x28
 800e15a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800e15e:	f1c7 0108 	rsb	r1, r7, #8
 800e162:	fa44 f301 	asr.w	r3, r4, r1
 800e166:	441e      	add	r6, r3
 800e168:	408b      	lsls	r3, r1
 800e16a:	1ae4      	subs	r4, r4, r3
 800e16c:	f1c7 0007 	rsb	r0, r7, #7
 800e170:	ab0a      	add	r3, sp, #40	; 0x28
 800e172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e176:	4104      	asrs	r4, r0
 800e178:	2c00      	cmp	r4, #0
 800e17a:	dd7e      	ble.n	800e27a <__kernel_rem_pio2f+0x212>
 800e17c:	2200      	movs	r2, #0
 800e17e:	4692      	mov	sl, r2
 800e180:	3601      	adds	r6, #1
 800e182:	4590      	cmp	r8, r2
 800e184:	f300 80b0 	bgt.w	800e2e8 <__kernel_rem_pio2f+0x280>
 800e188:	2f00      	cmp	r7, #0
 800e18a:	dd05      	ble.n	800e198 <__kernel_rem_pio2f+0x130>
 800e18c:	2f01      	cmp	r7, #1
 800e18e:	f000 80bd 	beq.w	800e30c <__kernel_rem_pio2f+0x2a4>
 800e192:	2f02      	cmp	r7, #2
 800e194:	f000 80c5 	beq.w	800e322 <__kernel_rem_pio2f+0x2ba>
 800e198:	2c02      	cmp	r4, #2
 800e19a:	d16e      	bne.n	800e27a <__kernel_rem_pio2f+0x212>
 800e19c:	4649      	mov	r1, r9
 800e19e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1a2:	f7f2 fcbd 	bl	8000b20 <__aeabi_fsub>
 800e1a6:	4681      	mov	r9, r0
 800e1a8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ac:	d065      	beq.n	800e27a <__kernel_rem_pio2f+0x212>
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1b4:	f000 fbec 	bl	800e990 <scalbnf>
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	4648      	mov	r0, r9
 800e1bc:	f7f2 fcb0 	bl	8000b20 <__aeabi_fsub>
 800e1c0:	4681      	mov	r9, r0
 800e1c2:	e05a      	b.n	800e27a <__kernel_rem_pio2f+0x212>
 800e1c4:	2400      	movs	r4, #0
 800e1c6:	e766      	b.n	800e096 <__kernel_rem_pio2f+0x2e>
 800e1c8:	42ee      	cmn	r6, r5
 800e1ca:	d407      	bmi.n	800e1dc <__kernel_rem_pio2f+0x174>
 800e1cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e1d0:	f7f2 fd5c 	bl	8000c8c <__aeabi_i2f>
 800e1d4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e1d8:	3501      	adds	r5, #1
 800e1da:	e76f      	b.n	800e0bc <__kernel_rem_pio2f+0x54>
 800e1dc:	4650      	mov	r0, sl
 800e1de:	e7f9      	b.n	800e1d4 <__kernel_rem_pio2f+0x16c>
 800e1e0:	9b05      	ldr	r3, [sp, #20]
 800e1e2:	f8da 1000 	ldr.w	r1, [sl]
 800e1e6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e1ea:	f7f2 fda3 	bl	8000d34 <__aeabi_fmul>
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7f2 fc97 	bl	8000b24 <__addsf3>
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	f109 0901 	add.w	r9, r9, #1
 800e1fc:	ab46      	add	r3, sp, #280	; 0x118
 800e1fe:	9a03      	ldr	r2, [sp, #12]
 800e200:	f1aa 0a04 	sub.w	sl, sl, #4
 800e204:	4591      	cmp	r9, r2
 800e206:	ddeb      	ble.n	800e1e0 <__kernel_rem_pio2f+0x178>
 800e208:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e20c:	3504      	adds	r5, #4
 800e20e:	f108 0801 	add.w	r8, r8, #1
 800e212:	e75f      	b.n	800e0d4 <__kernel_rem_pio2f+0x6c>
 800e214:	46aa      	mov	sl, r5
 800e216:	465e      	mov	r6, fp
 800e218:	f04f 0900 	mov.w	r9, #0
 800e21c:	e7ef      	b.n	800e1fe <__kernel_rem_pio2f+0x196>
 800e21e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e222:	4620      	mov	r0, r4
 800e224:	f7f2 fd86 	bl	8000d34 <__aeabi_fmul>
 800e228:	f7f2 ff60 	bl	80010ec <__aeabi_f2iz>
 800e22c:	f7f2 fd2e 	bl	8000c8c <__aeabi_i2f>
 800e230:	4649      	mov	r1, r9
 800e232:	9009      	str	r0, [sp, #36]	; 0x24
 800e234:	f7f2 fd7e 	bl	8000d34 <__aeabi_fmul>
 800e238:	4601      	mov	r1, r0
 800e23a:	4620      	mov	r0, r4
 800e23c:	f7f2 fc70 	bl	8000b20 <__aeabi_fsub>
 800e240:	f7f2 ff54 	bl	80010ec <__aeabi_f2iz>
 800e244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e246:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e24a:	f846 0b04 	str.w	r0, [r6], #4
 800e24e:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800e252:	4618      	mov	r0, r3
 800e254:	f7f2 fc66 	bl	8000b24 <__addsf3>
 800e258:	4604      	mov	r4, r0
 800e25a:	e756      	b.n	800e10a <__kernel_rem_pio2f+0xa2>
 800e25c:	d106      	bne.n	800e26c <__kernel_rem_pio2f+0x204>
 800e25e:	f108 33ff 	add.w	r3, r8, #4294967295
 800e262:	aa0a      	add	r2, sp, #40	; 0x28
 800e264:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e268:	1224      	asrs	r4, r4, #8
 800e26a:	e785      	b.n	800e178 <__kernel_rem_pio2f+0x110>
 800e26c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e270:	f7f2 ff12 	bl	8001098 <__aeabi_fcmpge>
 800e274:	4604      	mov	r4, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d134      	bne.n	800e2e4 <__kernel_rem_pio2f+0x27c>
 800e27a:	2100      	movs	r1, #0
 800e27c:	4648      	mov	r0, r9
 800e27e:	f7f2 feed 	bl	800105c <__aeabi_fcmpeq>
 800e282:	2800      	cmp	r0, #0
 800e284:	f000 809a 	beq.w	800e3bc <__kernel_rem_pio2f+0x354>
 800e288:	f108 35ff 	add.w	r5, r8, #4294967295
 800e28c:	462b      	mov	r3, r5
 800e28e:	2200      	movs	r2, #0
 800e290:	9901      	ldr	r1, [sp, #4]
 800e292:	428b      	cmp	r3, r1
 800e294:	da4d      	bge.n	800e332 <__kernel_rem_pio2f+0x2ca>
 800e296:	2a00      	cmp	r2, #0
 800e298:	d07c      	beq.n	800e394 <__kernel_rem_pio2f+0x32c>
 800e29a:	ab0a      	add	r3, sp, #40	; 0x28
 800e29c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2a0:	3f08      	subs	r7, #8
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 8088 	beq.w	800e3b8 <__kernel_rem_pio2f+0x350>
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e2ae:	f000 fb6f 	bl	800e990 <scalbnf>
 800e2b2:	46aa      	mov	sl, r5
 800e2b4:	4681      	mov	r9, r0
 800e2b6:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800e2ba:	af46      	add	r7, sp, #280	; 0x118
 800e2bc:	f1ba 0f00 	cmp.w	sl, #0
 800e2c0:	f280 80b1 	bge.w	800e426 <__kernel_rem_pio2f+0x3be>
 800e2c4:	46a9      	mov	r9, r5
 800e2c6:	f04f 0a00 	mov.w	sl, #0
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f1b9 0f00 	cmp.w	r9, #0
 800e2d0:	f2c0 80db 	blt.w	800e48a <__kernel_rem_pio2f+0x422>
 800e2d4:	a946      	add	r1, sp, #280	; 0x118
 800e2d6:	4617      	mov	r7, r2
 800e2d8:	f04f 0800 	mov.w	r8, #0
 800e2dc:	4b2c      	ldr	r3, [pc, #176]	; (800e390 <__kernel_rem_pio2f+0x328>)
 800e2de:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800e2e2:	e0c3      	b.n	800e46c <__kernel_rem_pio2f+0x404>
 800e2e4:	2402      	movs	r4, #2
 800e2e6:	e749      	b.n	800e17c <__kernel_rem_pio2f+0x114>
 800e2e8:	682b      	ldr	r3, [r5, #0]
 800e2ea:	f1ba 0f00 	cmp.w	sl, #0
 800e2ee:	d108      	bne.n	800e302 <__kernel_rem_pio2f+0x29a>
 800e2f0:	b11b      	cbz	r3, 800e2fa <__kernel_rem_pio2f+0x292>
 800e2f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e2f6:	602b      	str	r3, [r5, #0]
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	469a      	mov	sl, r3
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	3504      	adds	r5, #4
 800e300:	e73f      	b.n	800e182 <__kernel_rem_pio2f+0x11a>
 800e302:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e306:	602b      	str	r3, [r5, #0]
 800e308:	4653      	mov	r3, sl
 800e30a:	e7f6      	b.n	800e2fa <__kernel_rem_pio2f+0x292>
 800e30c:	f108 32ff 	add.w	r2, r8, #4294967295
 800e310:	ab0a      	add	r3, sp, #40	; 0x28
 800e312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e31a:	a90a      	add	r1, sp, #40	; 0x28
 800e31c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e320:	e73a      	b.n	800e198 <__kernel_rem_pio2f+0x130>
 800e322:	f108 32ff 	add.w	r2, r8, #4294967295
 800e326:	ab0a      	add	r3, sp, #40	; 0x28
 800e328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e330:	e7f3      	b.n	800e31a <__kernel_rem_pio2f+0x2b2>
 800e332:	a90a      	add	r1, sp, #40	; 0x28
 800e334:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e338:	3b01      	subs	r3, #1
 800e33a:	430a      	orrs	r2, r1
 800e33c:	e7a8      	b.n	800e290 <__kernel_rem_pio2f+0x228>
 800e33e:	3301      	adds	r3, #1
 800e340:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e344:	2900      	cmp	r1, #0
 800e346:	d0fa      	beq.n	800e33e <__kernel_rem_pio2f+0x2d6>
 800e348:	9a04      	ldr	r2, [sp, #16]
 800e34a:	f108 0501 	add.w	r5, r8, #1
 800e34e:	eb08 0402 	add.w	r4, r8, r2
 800e352:	aa1e      	add	r2, sp, #120	; 0x78
 800e354:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e358:	4498      	add	r8, r3
 800e35a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e35e:	45a8      	cmp	r8, r5
 800e360:	f6ff aec7 	blt.w	800e0f2 <__kernel_rem_pio2f+0x8a>
 800e364:	9b07      	ldr	r3, [sp, #28]
 800e366:	46a3      	mov	fp, r4
 800e368:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e36c:	f7f2 fc8e 	bl	8000c8c <__aeabi_i2f>
 800e370:	f04f 0a00 	mov.w	sl, #0
 800e374:	2600      	movs	r6, #0
 800e376:	f84b 0b04 	str.w	r0, [fp], #4
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	459a      	cmp	sl, r3
 800e37e:	dd0c      	ble.n	800e39a <__kernel_rem_pio2f+0x332>
 800e380:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e384:	465c      	mov	r4, fp
 800e386:	3501      	adds	r5, #1
 800e388:	e7e9      	b.n	800e35e <__kernel_rem_pio2f+0x2f6>
 800e38a:	bf00      	nop
 800e38c:	0800f1cc 	.word	0x0800f1cc
 800e390:	0800f1a0 	.word	0x0800f1a0
 800e394:	2301      	movs	r3, #1
 800e396:	9a08      	ldr	r2, [sp, #32]
 800e398:	e7d2      	b.n	800e340 <__kernel_rem_pio2f+0x2d8>
 800e39a:	9b05      	ldr	r3, [sp, #20]
 800e39c:	f854 0904 	ldr.w	r0, [r4], #-4
 800e3a0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e3a4:	f7f2 fcc6 	bl	8000d34 <__aeabi_fmul>
 800e3a8:	4601      	mov	r1, r0
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7f2 fbba 	bl	8000b24 <__addsf3>
 800e3b0:	f10a 0a01 	add.w	sl, sl, #1
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	e7e0      	b.n	800e37a <__kernel_rem_pio2f+0x312>
 800e3b8:	3d01      	subs	r5, #1
 800e3ba:	e76e      	b.n	800e29a <__kernel_rem_pio2f+0x232>
 800e3bc:	9b06      	ldr	r3, [sp, #24]
 800e3be:	9a02      	ldr	r2, [sp, #8]
 800e3c0:	4648      	mov	r0, r9
 800e3c2:	1a99      	subs	r1, r3, r2
 800e3c4:	f000 fae4 	bl	800e990 <scalbnf>
 800e3c8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	f7f2 fe63 	bl	8001098 <__aeabi_fcmpge>
 800e3d2:	b300      	cbz	r0, 800e416 <__kernel_rem_pio2f+0x3ae>
 800e3d4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f7f2 fcab 	bl	8000d34 <__aeabi_fmul>
 800e3de:	f7f2 fe85 	bl	80010ec <__aeabi_f2iz>
 800e3e2:	f7f2 fc53 	bl	8000c8c <__aeabi_i2f>
 800e3e6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e3ea:	4681      	mov	r9, r0
 800e3ec:	f7f2 fca2 	bl	8000d34 <__aeabi_fmul>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f7f2 fb94 	bl	8000b20 <__aeabi_fsub>
 800e3f8:	f7f2 fe78 	bl	80010ec <__aeabi_f2iz>
 800e3fc:	ab0a      	add	r3, sp, #40	; 0x28
 800e3fe:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e402:	4648      	mov	r0, r9
 800e404:	f7f2 fe72 	bl	80010ec <__aeabi_f2iz>
 800e408:	f108 0501 	add.w	r5, r8, #1
 800e40c:	ab0a      	add	r3, sp, #40	; 0x28
 800e40e:	3708      	adds	r7, #8
 800e410:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e414:	e748      	b.n	800e2a8 <__kernel_rem_pio2f+0x240>
 800e416:	4628      	mov	r0, r5
 800e418:	f7f2 fe68 	bl	80010ec <__aeabi_f2iz>
 800e41c:	ab0a      	add	r3, sp, #40	; 0x28
 800e41e:	4645      	mov	r5, r8
 800e420:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e424:	e740      	b.n	800e2a8 <__kernel_rem_pio2f+0x240>
 800e426:	ab0a      	add	r3, sp, #40	; 0x28
 800e428:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e42c:	f7f2 fc2e 	bl	8000c8c <__aeabi_i2f>
 800e430:	4649      	mov	r1, r9
 800e432:	f7f2 fc7f 	bl	8000d34 <__aeabi_fmul>
 800e436:	4641      	mov	r1, r8
 800e438:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e43c:	4648      	mov	r0, r9
 800e43e:	f7f2 fc79 	bl	8000d34 <__aeabi_fmul>
 800e442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e446:	4681      	mov	r9, r0
 800e448:	e738      	b.n	800e2bc <__kernel_rem_pio2f+0x254>
 800e44a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e44e:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e452:	9203      	str	r2, [sp, #12]
 800e454:	9302      	str	r3, [sp, #8]
 800e456:	f7f2 fc6d 	bl	8000d34 <__aeabi_fmul>
 800e45a:	4601      	mov	r1, r0
 800e45c:	4638      	mov	r0, r7
 800e45e:	f7f2 fb61 	bl	8000b24 <__addsf3>
 800e462:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e466:	4607      	mov	r7, r0
 800e468:	f108 0801 	add.w	r8, r8, #1
 800e46c:	9901      	ldr	r1, [sp, #4]
 800e46e:	4588      	cmp	r8, r1
 800e470:	dc01      	bgt.n	800e476 <__kernel_rem_pio2f+0x40e>
 800e472:	45c2      	cmp	sl, r8
 800e474:	dae9      	bge.n	800e44a <__kernel_rem_pio2f+0x3e2>
 800e476:	ab5a      	add	r3, sp, #360	; 0x168
 800e478:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e47c:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e480:	f109 39ff 	add.w	r9, r9, #4294967295
 800e484:	f10a 0a01 	add.w	sl, sl, #1
 800e488:	e720      	b.n	800e2cc <__kernel_rem_pio2f+0x264>
 800e48a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	dc07      	bgt.n	800e4a0 <__kernel_rem_pio2f+0x438>
 800e490:	2b00      	cmp	r3, #0
 800e492:	dc4d      	bgt.n	800e530 <__kernel_rem_pio2f+0x4c8>
 800e494:	d02e      	beq.n	800e4f4 <__kernel_rem_pio2f+0x48c>
 800e496:	f006 0007 	and.w	r0, r6, #7
 800e49a:	b05b      	add	sp, #364	; 0x16c
 800e49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e4a2:	2b03      	cmp	r3, #3
 800e4a4:	d1f7      	bne.n	800e496 <__kernel_rem_pio2f+0x42e>
 800e4a6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e4aa:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e4ae:	46b8      	mov	r8, r7
 800e4b0:	46aa      	mov	sl, r5
 800e4b2:	f1ba 0f00 	cmp.w	sl, #0
 800e4b6:	dc48      	bgt.n	800e54a <__kernel_rem_pio2f+0x4e2>
 800e4b8:	46a9      	mov	r9, r5
 800e4ba:	f1b9 0f01 	cmp.w	r9, #1
 800e4be:	dc5f      	bgt.n	800e580 <__kernel_rem_pio2f+0x518>
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	2d01      	cmp	r5, #1
 800e4c4:	dc75      	bgt.n	800e5b2 <__kernel_rem_pio2f+0x54a>
 800e4c6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e4c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e4ca:	2c00      	cmp	r4, #0
 800e4cc:	d177      	bne.n	800e5be <__kernel_rem_pio2f+0x556>
 800e4ce:	9900      	ldr	r1, [sp, #0]
 800e4d0:	600a      	str	r2, [r1, #0]
 800e4d2:	460a      	mov	r2, r1
 800e4d4:	604b      	str	r3, [r1, #4]
 800e4d6:	6090      	str	r0, [r2, #8]
 800e4d8:	e7dd      	b.n	800e496 <__kernel_rem_pio2f+0x42e>
 800e4da:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e4de:	f7f2 fb21 	bl	8000b24 <__addsf3>
 800e4e2:	3d01      	subs	r5, #1
 800e4e4:	2d00      	cmp	r5, #0
 800e4e6:	daf8      	bge.n	800e4da <__kernel_rem_pio2f+0x472>
 800e4e8:	b10c      	cbz	r4, 800e4ee <__kernel_rem_pio2f+0x486>
 800e4ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e4ee:	9b00      	ldr	r3, [sp, #0]
 800e4f0:	6018      	str	r0, [r3, #0]
 800e4f2:	e7d0      	b.n	800e496 <__kernel_rem_pio2f+0x42e>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	af32      	add	r7, sp, #200	; 0xc8
 800e4f8:	e7f4      	b.n	800e4e4 <__kernel_rem_pio2f+0x47c>
 800e4fa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e4fe:	f7f2 fb11 	bl	8000b24 <__addsf3>
 800e502:	3f01      	subs	r7, #1
 800e504:	2f00      	cmp	r7, #0
 800e506:	daf8      	bge.n	800e4fa <__kernel_rem_pio2f+0x492>
 800e508:	b1bc      	cbz	r4, 800e53a <__kernel_rem_pio2f+0x4d2>
 800e50a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e50e:	9a00      	ldr	r2, [sp, #0]
 800e510:	4601      	mov	r1, r0
 800e512:	6013      	str	r3, [r2, #0]
 800e514:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e516:	f7f2 fb03 	bl	8000b20 <__aeabi_fsub>
 800e51a:	2701      	movs	r7, #1
 800e51c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e520:	42bd      	cmp	r5, r7
 800e522:	da0c      	bge.n	800e53e <__kernel_rem_pio2f+0x4d6>
 800e524:	b10c      	cbz	r4, 800e52a <__kernel_rem_pio2f+0x4c2>
 800e526:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e52a:	9b00      	ldr	r3, [sp, #0]
 800e52c:	6058      	str	r0, [r3, #4]
 800e52e:	e7b2      	b.n	800e496 <__kernel_rem_pio2f+0x42e>
 800e530:	462f      	mov	r7, r5
 800e532:	2000      	movs	r0, #0
 800e534:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e538:	e7e4      	b.n	800e504 <__kernel_rem_pio2f+0x49c>
 800e53a:	4603      	mov	r3, r0
 800e53c:	e7e7      	b.n	800e50e <__kernel_rem_pio2f+0x4a6>
 800e53e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e542:	f7f2 faef 	bl	8000b24 <__addsf3>
 800e546:	3701      	adds	r7, #1
 800e548:	e7ea      	b.n	800e520 <__kernel_rem_pio2f+0x4b8>
 800e54a:	f8d8 3000 	ldr.w	r3, [r8]
 800e54e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	9302      	str	r3, [sp, #8]
 800e558:	9201      	str	r2, [sp, #4]
 800e55a:	f7f2 fae3 	bl	8000b24 <__addsf3>
 800e55e:	9a01      	ldr	r2, [sp, #4]
 800e560:	4601      	mov	r1, r0
 800e562:	4681      	mov	r9, r0
 800e564:	4610      	mov	r0, r2
 800e566:	f7f2 fadb 	bl	8000b20 <__aeabi_fsub>
 800e56a:	9b02      	ldr	r3, [sp, #8]
 800e56c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e570:	4619      	mov	r1, r3
 800e572:	f7f2 fad7 	bl	8000b24 <__addsf3>
 800e576:	f848 0904 	str.w	r0, [r8], #-4
 800e57a:	f8c8 9000 	str.w	r9, [r8]
 800e57e:	e798      	b.n	800e4b2 <__kernel_rem_pio2f+0x44a>
 800e580:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e584:	f8d7 a000 	ldr.w	sl, [r7]
 800e588:	4618      	mov	r0, r3
 800e58a:	4651      	mov	r1, sl
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	f7f2 fac9 	bl	8000b24 <__addsf3>
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	4601      	mov	r1, r0
 800e596:	4680      	mov	r8, r0
 800e598:	4618      	mov	r0, r3
 800e59a:	f7f2 fac1 	bl	8000b20 <__aeabi_fsub>
 800e59e:	4651      	mov	r1, sl
 800e5a0:	f7f2 fac0 	bl	8000b24 <__addsf3>
 800e5a4:	f847 0904 	str.w	r0, [r7], #-4
 800e5a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5ac:	f8c7 8000 	str.w	r8, [r7]
 800e5b0:	e783      	b.n	800e4ba <__kernel_rem_pio2f+0x452>
 800e5b2:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e5b6:	f7f2 fab5 	bl	8000b24 <__addsf3>
 800e5ba:	3d01      	subs	r5, #1
 800e5bc:	e781      	b.n	800e4c2 <__kernel_rem_pio2f+0x45a>
 800e5be:	9900      	ldr	r1, [sp, #0]
 800e5c0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e5c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5c8:	600a      	str	r2, [r1, #0]
 800e5ca:	604b      	str	r3, [r1, #4]
 800e5cc:	460a      	mov	r2, r1
 800e5ce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e5d2:	e780      	b.n	800e4d6 <__kernel_rem_pio2f+0x46e>

0800e5d4 <__kernel_sinf>:
 800e5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e5dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	460f      	mov	r7, r1
 800e5e4:	4691      	mov	r9, r2
 800e5e6:	da03      	bge.n	800e5f0 <__kernel_sinf+0x1c>
 800e5e8:	f7f2 fd80 	bl	80010ec <__aeabi_f2iz>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d035      	beq.n	800e65c <__kernel_sinf+0x88>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7f2 fb9e 	bl	8000d34 <__aeabi_fmul>
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f7f2 fb99 	bl	8000d34 <__aeabi_fmul>
 800e602:	4929      	ldr	r1, [pc, #164]	; (800e6a8 <__kernel_sinf+0xd4>)
 800e604:	4606      	mov	r6, r0
 800e606:	4628      	mov	r0, r5
 800e608:	f7f2 fb94 	bl	8000d34 <__aeabi_fmul>
 800e60c:	4927      	ldr	r1, [pc, #156]	; (800e6ac <__kernel_sinf+0xd8>)
 800e60e:	f7f2 fa87 	bl	8000b20 <__aeabi_fsub>
 800e612:	4629      	mov	r1, r5
 800e614:	f7f2 fb8e 	bl	8000d34 <__aeabi_fmul>
 800e618:	4925      	ldr	r1, [pc, #148]	; (800e6b0 <__kernel_sinf+0xdc>)
 800e61a:	f7f2 fa83 	bl	8000b24 <__addsf3>
 800e61e:	4629      	mov	r1, r5
 800e620:	f7f2 fb88 	bl	8000d34 <__aeabi_fmul>
 800e624:	4923      	ldr	r1, [pc, #140]	; (800e6b4 <__kernel_sinf+0xe0>)
 800e626:	f7f2 fa7b 	bl	8000b20 <__aeabi_fsub>
 800e62a:	4629      	mov	r1, r5
 800e62c:	f7f2 fb82 	bl	8000d34 <__aeabi_fmul>
 800e630:	4921      	ldr	r1, [pc, #132]	; (800e6b8 <__kernel_sinf+0xe4>)
 800e632:	f7f2 fa77 	bl	8000b24 <__addsf3>
 800e636:	4680      	mov	r8, r0
 800e638:	f1b9 0f00 	cmp.w	r9, #0
 800e63c:	d111      	bne.n	800e662 <__kernel_sinf+0x8e>
 800e63e:	4601      	mov	r1, r0
 800e640:	4628      	mov	r0, r5
 800e642:	f7f2 fb77 	bl	8000d34 <__aeabi_fmul>
 800e646:	491d      	ldr	r1, [pc, #116]	; (800e6bc <__kernel_sinf+0xe8>)
 800e648:	f7f2 fa6a 	bl	8000b20 <__aeabi_fsub>
 800e64c:	4631      	mov	r1, r6
 800e64e:	f7f2 fb71 	bl	8000d34 <__aeabi_fmul>
 800e652:	4601      	mov	r1, r0
 800e654:	4620      	mov	r0, r4
 800e656:	f7f2 fa65 	bl	8000b24 <__addsf3>
 800e65a:	4604      	mov	r4, r0
 800e65c:	4620      	mov	r0, r4
 800e65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e662:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e666:	4638      	mov	r0, r7
 800e668:	f7f2 fb64 	bl	8000d34 <__aeabi_fmul>
 800e66c:	4641      	mov	r1, r8
 800e66e:	4681      	mov	r9, r0
 800e670:	4630      	mov	r0, r6
 800e672:	f7f2 fb5f 	bl	8000d34 <__aeabi_fmul>
 800e676:	4601      	mov	r1, r0
 800e678:	4648      	mov	r0, r9
 800e67a:	f7f2 fa51 	bl	8000b20 <__aeabi_fsub>
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f2 fb58 	bl	8000d34 <__aeabi_fmul>
 800e684:	4639      	mov	r1, r7
 800e686:	f7f2 fa4b 	bl	8000b20 <__aeabi_fsub>
 800e68a:	490c      	ldr	r1, [pc, #48]	; (800e6bc <__kernel_sinf+0xe8>)
 800e68c:	4605      	mov	r5, r0
 800e68e:	4630      	mov	r0, r6
 800e690:	f7f2 fb50 	bl	8000d34 <__aeabi_fmul>
 800e694:	4601      	mov	r1, r0
 800e696:	4628      	mov	r0, r5
 800e698:	f7f2 fa44 	bl	8000b24 <__addsf3>
 800e69c:	4601      	mov	r1, r0
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f7f2 fa3e 	bl	8000b20 <__aeabi_fsub>
 800e6a4:	e7d9      	b.n	800e65a <__kernel_sinf+0x86>
 800e6a6:	bf00      	nop
 800e6a8:	2f2ec9d3 	.word	0x2f2ec9d3
 800e6ac:	32d72f34 	.word	0x32d72f34
 800e6b0:	3638ef1b 	.word	0x3638ef1b
 800e6b4:	39500d01 	.word	0x39500d01
 800e6b8:	3c088889 	.word	0x3c088889
 800e6bc:	3e2aaaab 	.word	0x3e2aaaab

0800e6c0 <fabs>:
 800e6c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e6c4:	4770      	bx	lr

0800e6c6 <finite>:
 800e6c6:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e6ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6ce:	0fc0      	lsrs	r0, r0, #31
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <nan>:
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	4901      	ldr	r1, [pc, #4]	; (800e6dc <nan+0x8>)
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	7ff80000 	.word	0x7ff80000

0800e6e0 <rint>:
 800e6e0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6e6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e6ea:	2f13      	cmp	r7, #19
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e6f8:	dc59      	bgt.n	800e7ae <rint+0xce>
 800e6fa:	2f00      	cmp	r7, #0
 800e6fc:	da2a      	bge.n	800e754 <rint+0x74>
 800e6fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e702:	4301      	orrs	r1, r0
 800e704:	d022      	beq.n	800e74c <rint+0x6c>
 800e706:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e70a:	4301      	orrs	r1, r0
 800e70c:	424d      	negs	r5, r1
 800e70e:	430d      	orrs	r5, r1
 800e710:	4936      	ldr	r1, [pc, #216]	; (800e7ec <rint+0x10c>)
 800e712:	0c5c      	lsrs	r4, r3, #17
 800e714:	0b2d      	lsrs	r5, r5, #12
 800e716:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e71a:	0464      	lsls	r4, r4, #17
 800e71c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e720:	ea45 0304 	orr.w	r3, r5, r4
 800e724:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e728:	4620      	mov	r0, r4
 800e72a:	4629      	mov	r1, r5
 800e72c:	f7f1 fd16 	bl	800015c <__adddf3>
 800e730:	e9cd 0100 	strd	r0, r1, [sp]
 800e734:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e738:	462b      	mov	r3, r5
 800e73a:	4622      	mov	r2, r4
 800e73c:	f7f1 fd0c 	bl	8000158 <__aeabi_dsub>
 800e740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e744:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4610      	mov	r0, r2
 800e74e:	4619      	mov	r1, r3
 800e750:	b003      	add	sp, #12
 800e752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e754:	4926      	ldr	r1, [pc, #152]	; (800e7f0 <rint+0x110>)
 800e756:	4139      	asrs	r1, r7
 800e758:	ea03 0001 	and.w	r0, r3, r1
 800e75c:	4310      	orrs	r0, r2
 800e75e:	d0f5      	beq.n	800e74c <rint+0x6c>
 800e760:	084b      	lsrs	r3, r1, #1
 800e762:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e766:	ea52 0501 	orrs.w	r5, r2, r1
 800e76a:	d00c      	beq.n	800e786 <rint+0xa6>
 800e76c:	ea24 0303 	bic.w	r3, r4, r3
 800e770:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e774:	2f13      	cmp	r7, #19
 800e776:	bf0c      	ite	eq
 800e778:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e77c:	2500      	movne	r5, #0
 800e77e:	fa44 f707 	asr.w	r7, r4, r7
 800e782:	ea43 0407 	orr.w	r4, r3, r7
 800e786:	4919      	ldr	r1, [pc, #100]	; (800e7ec <rint+0x10c>)
 800e788:	4623      	mov	r3, r4
 800e78a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e78e:	462a      	mov	r2, r5
 800e790:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e794:	4620      	mov	r0, r4
 800e796:	4629      	mov	r1, r5
 800e798:	f7f1 fce0 	bl	800015c <__adddf3>
 800e79c:	e9cd 0100 	strd	r0, r1, [sp]
 800e7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7a4:	4622      	mov	r2, r4
 800e7a6:	462b      	mov	r3, r5
 800e7a8:	f7f1 fcd6 	bl	8000158 <__aeabi_dsub>
 800e7ac:	e7cc      	b.n	800e748 <rint+0x68>
 800e7ae:	2f33      	cmp	r7, #51	; 0x33
 800e7b0:	dd05      	ble.n	800e7be <rint+0xde>
 800e7b2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e7b6:	d1c9      	bne.n	800e74c <rint+0x6c>
 800e7b8:	f7f1 fcd0 	bl	800015c <__adddf3>
 800e7bc:	e7c4      	b.n	800e748 <rint+0x68>
 800e7be:	f04f 31ff 	mov.w	r1, #4294967295
 800e7c2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e7c6:	fa21 f10c 	lsr.w	r1, r1, ip
 800e7ca:	4208      	tst	r0, r1
 800e7cc:	d0be      	beq.n	800e74c <rint+0x6c>
 800e7ce:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e7d2:	bf18      	it	ne
 800e7d4:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800e7d8:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800e7dc:	bf1e      	ittt	ne
 800e7de:	ea20 0303 	bicne.w	r3, r0, r3
 800e7e2:	fa45 fc0c 	asrne.w	ip, r5, ip
 800e7e6:	ea43 050c 	orrne.w	r5, r3, ip
 800e7ea:	e7cc      	b.n	800e786 <rint+0xa6>
 800e7ec:	0800f1d8 	.word	0x0800f1d8
 800e7f0:	000fffff 	.word	0x000fffff
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <scalbn>:
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e7fe:	4604      	mov	r4, r0
 800e800:	460d      	mov	r5, r1
 800e802:	4617      	mov	r7, r2
 800e804:	460b      	mov	r3, r1
 800e806:	b996      	cbnz	r6, 800e82e <scalbn+0x36>
 800e808:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e80c:	4303      	orrs	r3, r0
 800e80e:	d039      	beq.n	800e884 <scalbn+0x8c>
 800e810:	4b35      	ldr	r3, [pc, #212]	; (800e8e8 <scalbn+0xf0>)
 800e812:	2200      	movs	r2, #0
 800e814:	f7f1 fe58 	bl	80004c8 <__aeabi_dmul>
 800e818:	4b34      	ldr	r3, [pc, #208]	; (800e8ec <scalbn+0xf4>)
 800e81a:	4604      	mov	r4, r0
 800e81c:	429f      	cmp	r7, r3
 800e81e:	460d      	mov	r5, r1
 800e820:	da0f      	bge.n	800e842 <scalbn+0x4a>
 800e822:	a32d      	add	r3, pc, #180	; (adr r3, 800e8d8 <scalbn+0xe0>)
 800e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e828:	f7f1 fe4e 	bl	80004c8 <__aeabi_dmul>
 800e82c:	e006      	b.n	800e83c <scalbn+0x44>
 800e82e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e832:	4296      	cmp	r6, r2
 800e834:	d10a      	bne.n	800e84c <scalbn+0x54>
 800e836:	4602      	mov	r2, r0
 800e838:	f7f1 fc90 	bl	800015c <__adddf3>
 800e83c:	4604      	mov	r4, r0
 800e83e:	460d      	mov	r5, r1
 800e840:	e020      	b.n	800e884 <scalbn+0x8c>
 800e842:	460b      	mov	r3, r1
 800e844:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e848:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e84c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e850:	19b9      	adds	r1, r7, r6
 800e852:	4291      	cmp	r1, r2
 800e854:	dd0e      	ble.n	800e874 <scalbn+0x7c>
 800e856:	a322      	add	r3, pc, #136	; (adr r3, 800e8e0 <scalbn+0xe8>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e860:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e864:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e868:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e86c:	4820      	ldr	r0, [pc, #128]	; (800e8f0 <scalbn+0xf8>)
 800e86e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e872:	e7d9      	b.n	800e828 <scalbn+0x30>
 800e874:	2900      	cmp	r1, #0
 800e876:	dd08      	ble.n	800e88a <scalbn+0x92>
 800e878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e87c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e880:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e884:	4620      	mov	r0, r4
 800e886:	4629      	mov	r1, r5
 800e888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e88a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e88e:	da16      	bge.n	800e8be <scalbn+0xc6>
 800e890:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e894:	429f      	cmp	r7, r3
 800e896:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e89a:	dd08      	ble.n	800e8ae <scalbn+0xb6>
 800e89c:	4c15      	ldr	r4, [pc, #84]	; (800e8f4 <scalbn+0xfc>)
 800e89e:	4814      	ldr	r0, [pc, #80]	; (800e8f0 <scalbn+0xf8>)
 800e8a0:	f363 74df 	bfi	r4, r3, #31, #1
 800e8a4:	a30e      	add	r3, pc, #56	; (adr r3, 800e8e0 <scalbn+0xe8>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	e7bc      	b.n	800e828 <scalbn+0x30>
 800e8ae:	4c12      	ldr	r4, [pc, #72]	; (800e8f8 <scalbn+0x100>)
 800e8b0:	4812      	ldr	r0, [pc, #72]	; (800e8fc <scalbn+0x104>)
 800e8b2:	f363 74df 	bfi	r4, r3, #31, #1
 800e8b6:	a308      	add	r3, pc, #32	; (adr r3, 800e8d8 <scalbn+0xe0>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	e7f5      	b.n	800e8aa <scalbn+0xb2>
 800e8be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8c2:	3136      	adds	r1, #54	; 0x36
 800e8c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4b0b      	ldr	r3, [pc, #44]	; (800e900 <scalbn+0x108>)
 800e8d4:	e7a8      	b.n	800e828 <scalbn+0x30>
 800e8d6:	bf00      	nop
 800e8d8:	c2f8f359 	.word	0xc2f8f359
 800e8dc:	01a56e1f 	.word	0x01a56e1f
 800e8e0:	8800759c 	.word	0x8800759c
 800e8e4:	7e37e43c 	.word	0x7e37e43c
 800e8e8:	43500000 	.word	0x43500000
 800e8ec:	ffff3cb0 	.word	0xffff3cb0
 800e8f0:	8800759c 	.word	0x8800759c
 800e8f4:	7e37e43c 	.word	0x7e37e43c
 800e8f8:	01a56e1f 	.word	0x01a56e1f
 800e8fc:	c2f8f359 	.word	0xc2f8f359
 800e900:	3c900000 	.word	0x3c900000

0800e904 <floorf>:
 800e904:	b570      	push	{r4, r5, r6, lr}
 800e906:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e90a:	3d7f      	subs	r5, #127	; 0x7f
 800e90c:	2d16      	cmp	r5, #22
 800e90e:	4601      	mov	r1, r0
 800e910:	4604      	mov	r4, r0
 800e912:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e916:	dc26      	bgt.n	800e966 <floorf+0x62>
 800e918:	2d00      	cmp	r5, #0
 800e91a:	da0e      	bge.n	800e93a <floorf+0x36>
 800e91c:	4917      	ldr	r1, [pc, #92]	; (800e97c <floorf+0x78>)
 800e91e:	f7f2 f901 	bl	8000b24 <__addsf3>
 800e922:	2100      	movs	r1, #0
 800e924:	f7f2 fbc2 	bl	80010ac <__aeabi_fcmpgt>
 800e928:	b128      	cbz	r0, 800e936 <floorf+0x32>
 800e92a:	2c00      	cmp	r4, #0
 800e92c:	da23      	bge.n	800e976 <floorf+0x72>
 800e92e:	4b14      	ldr	r3, [pc, #80]	; (800e980 <floorf+0x7c>)
 800e930:	2e00      	cmp	r6, #0
 800e932:	bf18      	it	ne
 800e934:	461c      	movne	r4, r3
 800e936:	4621      	mov	r1, r4
 800e938:	e01b      	b.n	800e972 <floorf+0x6e>
 800e93a:	4e12      	ldr	r6, [pc, #72]	; (800e984 <floorf+0x80>)
 800e93c:	412e      	asrs	r6, r5
 800e93e:	4230      	tst	r0, r6
 800e940:	d017      	beq.n	800e972 <floorf+0x6e>
 800e942:	490e      	ldr	r1, [pc, #56]	; (800e97c <floorf+0x78>)
 800e944:	f7f2 f8ee 	bl	8000b24 <__addsf3>
 800e948:	2100      	movs	r1, #0
 800e94a:	f7f2 fbaf 	bl	80010ac <__aeabi_fcmpgt>
 800e94e:	2800      	cmp	r0, #0
 800e950:	d0f1      	beq.n	800e936 <floorf+0x32>
 800e952:	2c00      	cmp	r4, #0
 800e954:	bfbe      	ittt	lt
 800e956:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800e95a:	fa43 f505 	asrlt.w	r5, r3, r5
 800e95e:	1964      	addlt	r4, r4, r5
 800e960:	ea24 0406 	bic.w	r4, r4, r6
 800e964:	e7e7      	b.n	800e936 <floorf+0x32>
 800e966:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e96a:	d302      	bcc.n	800e972 <floorf+0x6e>
 800e96c:	f7f2 f8da 	bl	8000b24 <__addsf3>
 800e970:	4601      	mov	r1, r0
 800e972:	4608      	mov	r0, r1
 800e974:	bd70      	pop	{r4, r5, r6, pc}
 800e976:	2400      	movs	r4, #0
 800e978:	e7dd      	b.n	800e936 <floorf+0x32>
 800e97a:	bf00      	nop
 800e97c:	7149f2ca 	.word	0x7149f2ca
 800e980:	bf800000 	.word	0xbf800000
 800e984:	007fffff 	.word	0x007fffff

0800e988 <nanf>:
 800e988:	4800      	ldr	r0, [pc, #0]	; (800e98c <nanf+0x4>)
 800e98a:	4770      	bx	lr
 800e98c:	7fc00000 	.word	0x7fc00000

0800e990 <scalbnf>:
 800e990:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4603      	mov	r3, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	4604      	mov	r4, r0
 800e99c:	d02a      	beq.n	800e9f4 <scalbnf+0x64>
 800e99e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e9a2:	d304      	bcc.n	800e9ae <scalbnf+0x1e>
 800e9a4:	4601      	mov	r1, r0
 800e9a6:	f7f2 f8bd 	bl	8000b24 <__addsf3>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	e022      	b.n	800e9f4 <scalbnf+0x64>
 800e9ae:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e9b2:	d117      	bne.n	800e9e4 <scalbnf+0x54>
 800e9b4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e9b8:	f7f2 f9bc 	bl	8000d34 <__aeabi_fmul>
 800e9bc:	4a17      	ldr	r2, [pc, #92]	; (800ea1c <scalbnf+0x8c>)
 800e9be:	4603      	mov	r3, r0
 800e9c0:	4295      	cmp	r5, r2
 800e9c2:	db0b      	blt.n	800e9dc <scalbnf+0x4c>
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e9ca:	3a19      	subs	r2, #25
 800e9cc:	442a      	add	r2, r5
 800e9ce:	2afe      	cmp	r2, #254	; 0xfe
 800e9d0:	dd0a      	ble.n	800e9e8 <scalbnf+0x58>
 800e9d2:	4913      	ldr	r1, [pc, #76]	; (800ea20 <scalbnf+0x90>)
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f361 001e 	bfi	r0, r1, #0, #31
 800e9da:	e000      	b.n	800e9de <scalbnf+0x4e>
 800e9dc:	4911      	ldr	r1, [pc, #68]	; (800ea24 <scalbnf+0x94>)
 800e9de:	f7f2 f9a9 	bl	8000d34 <__aeabi_fmul>
 800e9e2:	e7e2      	b.n	800e9aa <scalbnf+0x1a>
 800e9e4:	0dd2      	lsrs	r2, r2, #23
 800e9e6:	e7f1      	b.n	800e9cc <scalbnf+0x3c>
 800e9e8:	2a00      	cmp	r2, #0
 800e9ea:	dd05      	ble.n	800e9f8 <scalbnf+0x68>
 800e9ec:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800e9f0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	bd38      	pop	{r3, r4, r5, pc}
 800e9f8:	f112 0f16 	cmn.w	r2, #22
 800e9fc:	da05      	bge.n	800ea0a <scalbnf+0x7a>
 800e9fe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ea02:	4295      	cmp	r5, r2
 800ea04:	dce5      	bgt.n	800e9d2 <scalbnf+0x42>
 800ea06:	4907      	ldr	r1, [pc, #28]	; (800ea24 <scalbnf+0x94>)
 800ea08:	e7e4      	b.n	800e9d4 <scalbnf+0x44>
 800ea0a:	3219      	adds	r2, #25
 800ea0c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ea10:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ea14:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ea18:	e7e1      	b.n	800e9de <scalbnf+0x4e>
 800ea1a:	bf00      	nop
 800ea1c:	ffff3cb0 	.word	0xffff3cb0
 800ea20:	7149f2ca 	.word	0x7149f2ca
 800ea24:	0da24260 	.word	0x0da24260

0800ea28 <abort>:
 800ea28:	2006      	movs	r0, #6
 800ea2a:	b508      	push	{r3, lr}
 800ea2c:	f000 f94c 	bl	800ecc8 <raise>
 800ea30:	2001      	movs	r0, #1
 800ea32:	f7f5 fde4 	bl	80045fe <_exit>
	...

0800ea38 <__errno>:
 800ea38:	4b01      	ldr	r3, [pc, #4]	; (800ea40 <__errno+0x8>)
 800ea3a:	6818      	ldr	r0, [r3, #0]
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	20000010 	.word	0x20000010

0800ea44 <__libc_init_array>:
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	2600      	movs	r6, #0
 800ea48:	4d0c      	ldr	r5, [pc, #48]	; (800ea7c <__libc_init_array+0x38>)
 800ea4a:	4c0d      	ldr	r4, [pc, #52]	; (800ea80 <__libc_init_array+0x3c>)
 800ea4c:	1b64      	subs	r4, r4, r5
 800ea4e:	10a4      	asrs	r4, r4, #2
 800ea50:	42a6      	cmp	r6, r4
 800ea52:	d109      	bne.n	800ea68 <__libc_init_array+0x24>
 800ea54:	f000 f962 	bl	800ed1c <_init>
 800ea58:	2600      	movs	r6, #0
 800ea5a:	4d0a      	ldr	r5, [pc, #40]	; (800ea84 <__libc_init_array+0x40>)
 800ea5c:	4c0a      	ldr	r4, [pc, #40]	; (800ea88 <__libc_init_array+0x44>)
 800ea5e:	1b64      	subs	r4, r4, r5
 800ea60:	10a4      	asrs	r4, r4, #2
 800ea62:	42a6      	cmp	r6, r4
 800ea64:	d105      	bne.n	800ea72 <__libc_init_array+0x2e>
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea6c:	4798      	blx	r3
 800ea6e:	3601      	adds	r6, #1
 800ea70:	e7ee      	b.n	800ea50 <__libc_init_array+0xc>
 800ea72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea76:	4798      	blx	r3
 800ea78:	3601      	adds	r6, #1
 800ea7a:	e7f2      	b.n	800ea62 <__libc_init_array+0x1e>
 800ea7c:	0800f248 	.word	0x0800f248
 800ea80:	0800f248 	.word	0x0800f248
 800ea84:	0800f248 	.word	0x0800f248
 800ea88:	0800f250 	.word	0x0800f250

0800ea8c <malloc>:
 800ea8c:	4b02      	ldr	r3, [pc, #8]	; (800ea98 <malloc+0xc>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f000 b887 	b.w	800eba4 <_malloc_r>
 800ea96:	bf00      	nop
 800ea98:	20000010 	.word	0x20000010

0800ea9c <free>:
 800ea9c:	4b02      	ldr	r3, [pc, #8]	; (800eaa8 <free+0xc>)
 800ea9e:	4601      	mov	r1, r0
 800eaa0:	6818      	ldr	r0, [r3, #0]
 800eaa2:	f000 b833 	b.w	800eb0c <_free_r>
 800eaa6:	bf00      	nop
 800eaa8:	20000010 	.word	0x20000010

0800eaac <memcpy>:
 800eaac:	440a      	add	r2, r1
 800eaae:	4291      	cmp	r1, r2
 800eab0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eab4:	d100      	bne.n	800eab8 <memcpy+0xc>
 800eab6:	4770      	bx	lr
 800eab8:	b510      	push	{r4, lr}
 800eaba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eabe:	4291      	cmp	r1, r2
 800eac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eac4:	d1f9      	bne.n	800eaba <memcpy+0xe>
 800eac6:	bd10      	pop	{r4, pc}

0800eac8 <memmove>:
 800eac8:	4288      	cmp	r0, r1
 800eaca:	b510      	push	{r4, lr}
 800eacc:	eb01 0402 	add.w	r4, r1, r2
 800ead0:	d902      	bls.n	800ead8 <memmove+0x10>
 800ead2:	4284      	cmp	r4, r0
 800ead4:	4623      	mov	r3, r4
 800ead6:	d807      	bhi.n	800eae8 <memmove+0x20>
 800ead8:	1e43      	subs	r3, r0, #1
 800eada:	42a1      	cmp	r1, r4
 800eadc:	d008      	beq.n	800eaf0 <memmove+0x28>
 800eade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eae6:	e7f8      	b.n	800eada <memmove+0x12>
 800eae8:	4601      	mov	r1, r0
 800eaea:	4402      	add	r2, r0
 800eaec:	428a      	cmp	r2, r1
 800eaee:	d100      	bne.n	800eaf2 <memmove+0x2a>
 800eaf0:	bd10      	pop	{r4, pc}
 800eaf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eafa:	e7f7      	b.n	800eaec <memmove+0x24>

0800eafc <memset>:
 800eafc:	4603      	mov	r3, r0
 800eafe:	4402      	add	r2, r0
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d100      	bne.n	800eb06 <memset+0xa>
 800eb04:	4770      	bx	lr
 800eb06:	f803 1b01 	strb.w	r1, [r3], #1
 800eb0a:	e7f9      	b.n	800eb00 <memset+0x4>

0800eb0c <_free_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4605      	mov	r5, r0
 800eb10:	2900      	cmp	r1, #0
 800eb12:	d043      	beq.n	800eb9c <_free_r+0x90>
 800eb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb18:	1f0c      	subs	r4, r1, #4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bfb8      	it	lt
 800eb1e:	18e4      	addlt	r4, r4, r3
 800eb20:	f000 f8f0 	bl	800ed04 <__malloc_lock>
 800eb24:	4a1e      	ldr	r2, [pc, #120]	; (800eba0 <_free_r+0x94>)
 800eb26:	6813      	ldr	r3, [r2, #0]
 800eb28:	4610      	mov	r0, r2
 800eb2a:	b933      	cbnz	r3, 800eb3a <_free_r+0x2e>
 800eb2c:	6063      	str	r3, [r4, #4]
 800eb2e:	6014      	str	r4, [r2, #0]
 800eb30:	4628      	mov	r0, r5
 800eb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb36:	f000 b8eb 	b.w	800ed10 <__malloc_unlock>
 800eb3a:	42a3      	cmp	r3, r4
 800eb3c:	d90a      	bls.n	800eb54 <_free_r+0x48>
 800eb3e:	6821      	ldr	r1, [r4, #0]
 800eb40:	1862      	adds	r2, r4, r1
 800eb42:	4293      	cmp	r3, r2
 800eb44:	bf01      	itttt	eq
 800eb46:	681a      	ldreq	r2, [r3, #0]
 800eb48:	685b      	ldreq	r3, [r3, #4]
 800eb4a:	1852      	addeq	r2, r2, r1
 800eb4c:	6022      	streq	r2, [r4, #0]
 800eb4e:	6063      	str	r3, [r4, #4]
 800eb50:	6004      	str	r4, [r0, #0]
 800eb52:	e7ed      	b.n	800eb30 <_free_r+0x24>
 800eb54:	461a      	mov	r2, r3
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	b10b      	cbz	r3, 800eb5e <_free_r+0x52>
 800eb5a:	42a3      	cmp	r3, r4
 800eb5c:	d9fa      	bls.n	800eb54 <_free_r+0x48>
 800eb5e:	6811      	ldr	r1, [r2, #0]
 800eb60:	1850      	adds	r0, r2, r1
 800eb62:	42a0      	cmp	r0, r4
 800eb64:	d10b      	bne.n	800eb7e <_free_r+0x72>
 800eb66:	6820      	ldr	r0, [r4, #0]
 800eb68:	4401      	add	r1, r0
 800eb6a:	1850      	adds	r0, r2, r1
 800eb6c:	4283      	cmp	r3, r0
 800eb6e:	6011      	str	r1, [r2, #0]
 800eb70:	d1de      	bne.n	800eb30 <_free_r+0x24>
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	4401      	add	r1, r0
 800eb78:	6011      	str	r1, [r2, #0]
 800eb7a:	6053      	str	r3, [r2, #4]
 800eb7c:	e7d8      	b.n	800eb30 <_free_r+0x24>
 800eb7e:	d902      	bls.n	800eb86 <_free_r+0x7a>
 800eb80:	230c      	movs	r3, #12
 800eb82:	602b      	str	r3, [r5, #0]
 800eb84:	e7d4      	b.n	800eb30 <_free_r+0x24>
 800eb86:	6820      	ldr	r0, [r4, #0]
 800eb88:	1821      	adds	r1, r4, r0
 800eb8a:	428b      	cmp	r3, r1
 800eb8c:	bf01      	itttt	eq
 800eb8e:	6819      	ldreq	r1, [r3, #0]
 800eb90:	685b      	ldreq	r3, [r3, #4]
 800eb92:	1809      	addeq	r1, r1, r0
 800eb94:	6021      	streq	r1, [r4, #0]
 800eb96:	6063      	str	r3, [r4, #4]
 800eb98:	6054      	str	r4, [r2, #4]
 800eb9a:	e7c9      	b.n	800eb30 <_free_r+0x24>
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	20000da4 	.word	0x20000da4

0800eba4 <_malloc_r>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	1ccd      	adds	r5, r1, #3
 800eba8:	f025 0503 	bic.w	r5, r5, #3
 800ebac:	3508      	adds	r5, #8
 800ebae:	2d0c      	cmp	r5, #12
 800ebb0:	bf38      	it	cc
 800ebb2:	250c      	movcc	r5, #12
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	db01      	blt.n	800ebbe <_malloc_r+0x1a>
 800ebba:	42a9      	cmp	r1, r5
 800ebbc:	d903      	bls.n	800ebc6 <_malloc_r+0x22>
 800ebbe:	230c      	movs	r3, #12
 800ebc0:	6033      	str	r3, [r6, #0]
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc6:	f000 f89d 	bl	800ed04 <__malloc_lock>
 800ebca:	4921      	ldr	r1, [pc, #132]	; (800ec50 <_malloc_r+0xac>)
 800ebcc:	680a      	ldr	r2, [r1, #0]
 800ebce:	4614      	mov	r4, r2
 800ebd0:	b99c      	cbnz	r4, 800ebfa <_malloc_r+0x56>
 800ebd2:	4f20      	ldr	r7, [pc, #128]	; (800ec54 <_malloc_r+0xb0>)
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	b923      	cbnz	r3, 800ebe2 <_malloc_r+0x3e>
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f000 f83c 	bl	800ec58 <_sbrk_r>
 800ebe0:	6038      	str	r0, [r7, #0]
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f000 f837 	bl	800ec58 <_sbrk_r>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d123      	bne.n	800ec36 <_malloc_r+0x92>
 800ebee:	230c      	movs	r3, #12
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	6033      	str	r3, [r6, #0]
 800ebf4:	f000 f88c 	bl	800ed10 <__malloc_unlock>
 800ebf8:	e7e3      	b.n	800ebc2 <_malloc_r+0x1e>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	1b5b      	subs	r3, r3, r5
 800ebfe:	d417      	bmi.n	800ec30 <_malloc_r+0x8c>
 800ec00:	2b0b      	cmp	r3, #11
 800ec02:	d903      	bls.n	800ec0c <_malloc_r+0x68>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	441c      	add	r4, r3
 800ec08:	6025      	str	r5, [r4, #0]
 800ec0a:	e004      	b.n	800ec16 <_malloc_r+0x72>
 800ec0c:	6863      	ldr	r3, [r4, #4]
 800ec0e:	42a2      	cmp	r2, r4
 800ec10:	bf0c      	ite	eq
 800ec12:	600b      	streq	r3, [r1, #0]
 800ec14:	6053      	strne	r3, [r2, #4]
 800ec16:	4630      	mov	r0, r6
 800ec18:	f000 f87a 	bl	800ed10 <__malloc_unlock>
 800ec1c:	f104 000b 	add.w	r0, r4, #11
 800ec20:	1d23      	adds	r3, r4, #4
 800ec22:	f020 0007 	bic.w	r0, r0, #7
 800ec26:	1ac2      	subs	r2, r0, r3
 800ec28:	d0cc      	beq.n	800ebc4 <_malloc_r+0x20>
 800ec2a:	1a1b      	subs	r3, r3, r0
 800ec2c:	50a3      	str	r3, [r4, r2]
 800ec2e:	e7c9      	b.n	800ebc4 <_malloc_r+0x20>
 800ec30:	4622      	mov	r2, r4
 800ec32:	6864      	ldr	r4, [r4, #4]
 800ec34:	e7cc      	b.n	800ebd0 <_malloc_r+0x2c>
 800ec36:	1cc4      	adds	r4, r0, #3
 800ec38:	f024 0403 	bic.w	r4, r4, #3
 800ec3c:	42a0      	cmp	r0, r4
 800ec3e:	d0e3      	beq.n	800ec08 <_malloc_r+0x64>
 800ec40:	1a21      	subs	r1, r4, r0
 800ec42:	4630      	mov	r0, r6
 800ec44:	f000 f808 	bl	800ec58 <_sbrk_r>
 800ec48:	3001      	adds	r0, #1
 800ec4a:	d1dd      	bne.n	800ec08 <_malloc_r+0x64>
 800ec4c:	e7cf      	b.n	800ebee <_malloc_r+0x4a>
 800ec4e:	bf00      	nop
 800ec50:	20000da4 	.word	0x20000da4
 800ec54:	20000da8 	.word	0x20000da8

0800ec58 <_sbrk_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	4d05      	ldr	r5, [pc, #20]	; (800ec74 <_sbrk_r+0x1c>)
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	602b      	str	r3, [r5, #0]
 800ec64:	f7f5 fcd6 	bl	8004614 <_sbrk>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_sbrk_r+0x1a>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_sbrk_r+0x1a>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20000dc0 	.word	0x20000dc0

0800ec78 <_raise_r>:
 800ec78:	291f      	cmp	r1, #31
 800ec7a:	b538      	push	{r3, r4, r5, lr}
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	460d      	mov	r5, r1
 800ec80:	d904      	bls.n	800ec8c <_raise_r+0x14>
 800ec82:	2316      	movs	r3, #22
 800ec84:	6003      	str	r3, [r0, #0]
 800ec86:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec8e:	b112      	cbz	r2, 800ec96 <_raise_r+0x1e>
 800ec90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec94:	b94b      	cbnz	r3, 800ecaa <_raise_r+0x32>
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 f830 	bl	800ecfc <_getpid_r>
 800ec9c:	462a      	mov	r2, r5
 800ec9e:	4601      	mov	r1, r0
 800eca0:	4620      	mov	r0, r4
 800eca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eca6:	f000 b817 	b.w	800ecd8 <_kill_r>
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d00a      	beq.n	800ecc4 <_raise_r+0x4c>
 800ecae:	1c59      	adds	r1, r3, #1
 800ecb0:	d103      	bne.n	800ecba <_raise_r+0x42>
 800ecb2:	2316      	movs	r3, #22
 800ecb4:	6003      	str	r3, [r0, #0]
 800ecb6:	2001      	movs	r0, #1
 800ecb8:	e7e7      	b.n	800ec8a <_raise_r+0x12>
 800ecba:	2400      	movs	r4, #0
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecc2:	4798      	blx	r3
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e7e0      	b.n	800ec8a <_raise_r+0x12>

0800ecc8 <raise>:
 800ecc8:	4b02      	ldr	r3, [pc, #8]	; (800ecd4 <raise+0xc>)
 800ecca:	4601      	mov	r1, r0
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	f7ff bfd3 	b.w	800ec78 <_raise_r>
 800ecd2:	bf00      	nop
 800ecd4:	20000010 	.word	0x20000010

0800ecd8 <_kill_r>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	2300      	movs	r3, #0
 800ecdc:	4d06      	ldr	r5, [pc, #24]	; (800ecf8 <_kill_r+0x20>)
 800ecde:	4604      	mov	r4, r0
 800ece0:	4608      	mov	r0, r1
 800ece2:	4611      	mov	r1, r2
 800ece4:	602b      	str	r3, [r5, #0]
 800ece6:	f7f5 fc7a 	bl	80045de <_kill>
 800ecea:	1c43      	adds	r3, r0, #1
 800ecec:	d102      	bne.n	800ecf4 <_kill_r+0x1c>
 800ecee:	682b      	ldr	r3, [r5, #0]
 800ecf0:	b103      	cbz	r3, 800ecf4 <_kill_r+0x1c>
 800ecf2:	6023      	str	r3, [r4, #0]
 800ecf4:	bd38      	pop	{r3, r4, r5, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20000dc0 	.word	0x20000dc0

0800ecfc <_getpid_r>:
 800ecfc:	f7f5 bc68 	b.w	80045d0 <_getpid>

0800ed00 <__retarget_lock_acquire_recursive>:
 800ed00:	4770      	bx	lr

0800ed02 <__retarget_lock_release_recursive>:
 800ed02:	4770      	bx	lr

0800ed04 <__malloc_lock>:
 800ed04:	4801      	ldr	r0, [pc, #4]	; (800ed0c <__malloc_lock+0x8>)
 800ed06:	f7ff bffb 	b.w	800ed00 <__retarget_lock_acquire_recursive>
 800ed0a:	bf00      	nop
 800ed0c:	20000db8 	.word	0x20000db8

0800ed10 <__malloc_unlock>:
 800ed10:	4801      	ldr	r0, [pc, #4]	; (800ed18 <__malloc_unlock+0x8>)
 800ed12:	f7ff bff6 	b.w	800ed02 <__retarget_lock_release_recursive>
 800ed16:	bf00      	nop
 800ed18:	20000db8 	.word	0x20000db8

0800ed1c <_init>:
 800ed1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1e:	bf00      	nop
 800ed20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed22:	bc08      	pop	{r3}
 800ed24:	469e      	mov	lr, r3
 800ed26:	4770      	bx	lr

0800ed28 <_fini>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	bf00      	nop
 800ed2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2e:	bc08      	pop	{r3}
 800ed30:	469e      	mov	lr, r3
 800ed32:	4770      	bx	lr
