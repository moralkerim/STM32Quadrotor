
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080142f8  080142f8  000242f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a18  08014a18  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08014a18  08014a18  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014a18  08014a18  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014a18  08014a18  00024a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014a20  08014a20  00024a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08014a28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c0  20000078  08014a9c  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a38  08014a9c  00031a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a868  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000546e  00000000  00000000  0005a905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0005fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  000612e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef2b  00000000  00000000  000626b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d698  00000000  00000000  000815e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000957cb  00000000  00000000  0009ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab8  00000000  00000000  0013449c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080142e0 	.word	0x080142e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080142e0 	.word	0x080142e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HMC5883L_initialize+0x44>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001194:	2378      	movs	r3, #120	; 0x78
 8001196:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HMC5883L_initialize+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b299      	uxth	r1, r3
 800119e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HMC5883L_initialize+0x48>)
 80011b2:	f006 fb05 	bl	80077c0 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f80c 	bl	80011d4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f829 	bl	8001214 <HMC5883L_setMode>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000094 	.word	0x20000094
 80011d0:	20001724 	.word	0x20001724

080011d4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HMC5883L_setGain+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HMC5883L_setGain+0x3c>)
 8001200:	f006 fade 	bl	80077c0 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000094 	.word	0x20000094
 8001210:	20001724 	.word	0x20001724

08001214 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HMC5883L_setMode+0x3c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b299      	uxth	r1, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2202      	movs	r2, #2
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HMC5883L_setMode+0x40>)
 800123c:	f006 fac0 	bl	80077c0 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HMC5883L_setMode+0x44>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000094 	.word	0x20000094
 8001254:	20001724 	.word	0x20001724
 8001258:	2000009e 	.word	0x2000009e

0800125c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HMC5883L_getMagData+0x84>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2306      	movs	r3, #6
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <HMC5883L_getMagData+0x8c>)
 8001282:	f006 fb97 	bl	80079b4 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HMC5883L_getMagData+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HMC5883L_getMagData+0x38>
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ffc0 	bl	8001214 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HMC5883L_getMagData+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000094 	.word	0x20000094
 80012e4:	20000098 	.word	0x20000098
 80012e8:	20001724 	.word	0x20001724
 80012ec:	2000009e 	.word	0x2000009e

080012f0 <getDataAt>:
   @returns the specified data as a string
*/



char *getDataAt (char * str, const char * delim, int pos) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b8      	sub	sp, #224	; 0xe0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	char *token;
	char copy[200] = "\0"; // modify size for larger strings
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	22c4      	movs	r2, #196	; 0xc4
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f011 ff29 	bl	8013160 <memset>

	strcpy(copy, str);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f011 ffe1 	bl	80132dc <strcpy>
	token = strtok(copy, delim);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f011 ffe3 	bl	80132ec <strtok>
 8001326:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001330:	e00a      	b.n	8001348 <getDataAt+0x58>
		token = strtok(NULL, delim);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	2000      	movs	r0, #0
 8001336:	f011 ffd9 	bl	80132ec <strtok>
 800133a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	for(int i = 0; i < pos; i++) {
 800133e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001348:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbef      	blt.n	8001332 <getDataAt+0x42>
	}
	return token;
 8001352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8001356:	4618      	mov	r0, r3
 8001358:	37e0      	adds	r7, #224	; 0xe0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <pow2>:


double pow2(long number, int pow2er) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b08a      	sub	sp, #40	; 0x28
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]

	if(pow2er > 0) {
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd20      	ble.n	80013b0 <pow2+0x52>
		double result=number;
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff f848 	bl	8000404 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	e00f      	b.n	80013a2 <pow2+0x44>
			result *= number;
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f83e 	bl	8000404 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for(int i=1;i<pow2er;i++) {
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbeb      	blt.n	8001382 <pow2+0x24>
		}
		return result;
 80013aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ae:	e023      	b.n	80013f8 <pow2+0x9a>
	}

	else {
		double result=1/number;
 80013b0:	2201      	movs	r2, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f823 	bl	8000404 <__aeabi_i2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00f      	b.n	80013ec <pow2+0x8e>
				result /= number;
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f819 	bl	8000404 <__aeabi_i2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f9a7 	bl	800072c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for(int i=1;i>pow2er;i--) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dceb      	bgt.n	80013cc <pow2+0x6e>
			}
		return result;
 80013f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}



}
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga) {
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b08e      	sub	sp, #56	; 0x38
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]

	char buffer[12];

	strcpy(buffer, getDataAt(GGAbuffer, ",", 5));
 8001410:	2205      	movs	r2, #5
 8001412:	4983      	ldr	r1, [pc, #524]	; (8001620 <decodeGGA+0x21c>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff6b 	bl	80012f0 <getDataAt>
 800141a:	4602      	mov	r2, r0
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f011 ff5a 	bl	80132dc <strcpy>
	if (buffer[0] == '1' || buffer[0] == '2' || buffer[0] == '6')   // 0 indicates no fix yet
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	2b31      	cmp	r3, #49	; 0x31
 800142c:	d005      	beq.n	800143a <decodeGGA+0x36>
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d002      	beq.n	800143a <decodeGGA+0x36>
 8001434:	7b3b      	ldrb	r3, [r7, #12]
 8001436:	2b36      	cmp	r3, #54	; 0x36
 8001438:	d11e      	bne.n	8001478 <decodeGGA+0x74>
	{
		gga->isfixValid = 1;   // fix available
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
	gga->tim.min = min;
	gga->tim.sec = atoi(buffer)%100;
*/
	/***************** Get LATITUDE  **********************/

	memset(buffer, '\0', 12);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	220c      	movs	r2, #12
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f011 fe89 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 1));
 800144e:	2201      	movs	r2, #1
 8001450:	4973      	ldr	r1, [pc, #460]	; (8001620 <decodeGGA+0x21c>)
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4c 	bl	80012f0 <getDataAt>
 8001458:	4602      	mov	r2, r0
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f011 ff3b 	bl	80132dc <strcpy>

	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fe70 	bl	8000150 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	2b05      	cmp	r3, #5
 8001474:	d905      	bls.n	8001482 <decodeGGA+0x7e>
 8001476:	e006      	b.n	8001486 <decodeGGA+0x82>
		gga->isfixValid = 0;   // If the fix is not available
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800147e:	2301      	movs	r3, #1
 8001480:	e22d      	b.n	80018de <decodeGGA+0x4da>
	if (strlen(buffer) < 6) return 2;  	// If the buffer length is not appropriate, return error
 8001482:	2302      	movs	r3, #2
 8001484:	e22b      	b.n	80018de <decodeGGA+0x4da>

	int16_t num = (atoi(buffer));   	// change the buffer to a number. It will only convert up to decimal
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4618      	mov	r0, r3
 800148c:	f011 fe1c 	bl	80130c8 <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	867b      	strh	r3, [r7, #50]	; 0x32
	int dd = num/100;					// extract the degrees
 8001494:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001498:	4a62      	ldr	r2, [pc, #392]	; (8001624 <decodeGGA+0x220>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int mmint = num%100;				// extract the integer part of minutes
 80014a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <decodeGGA+0x220>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1151      	asrs	r1, r2, #5
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	1a8a      	subs	r2, r1, r2
 80014b8:	2164      	movs	r1, #100	; 0x64
 80014ba:	fb01 f202 	mul.w	r2, r1, r2
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
	int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014c8:	e00d      	b.n	80014e6 <decodeGGA+0xe2>
		if(j > strlen(buffer)) return 2;
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe3e 	bl	8000150 <strlen>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	429a      	cmp	r2, r3
 80014da:	d201      	bcs.n	80014e0 <decodeGGA+0xdc>
 80014dc:	2302      	movs	r3, #2
 80014de:	e1fe      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	3301      	adds	r3, #1
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b2e      	cmp	r3, #46	; 0x2e
 80014f2:	d1ea      	bne.n	80014ca <decodeGGA+0xc6>
	}
	j++;
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	3301      	adds	r3, #1
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
	int declen = (strlen(buffer))-j;  	// calculate the number of digit after decimal
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe26 	bl	8000150 <strlen>
 8001504:	4602      	mov	r2, r0
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
	int mmdec = atoi ((char *) buffer+j);  // extract the decimal part of minutes
 800150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f011 fdd7 	bl	80130c8 <atoi>
 800151a:	6238      	str	r0, [r7, #32]
	float lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;	// combine minutes and convert to degrees
 800151c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800151e:	f7fe ff71 	bl	8000404 <__aeabi_i2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001528:	f7fe ff6c 	bl	8000404 <__aeabi_i2d>
 800152c:	4680      	mov	r8, r0
 800152e:	4689      	mov	r9, r1
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	f7fe ff67 	bl	8000404 <__aeabi_i2d>
 8001536:	4682      	mov	sl, r0
 8001538:	468b      	mov	fp, r1
 800153a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153c:	200a      	movs	r0, #10
 800153e:	f7ff ff0e 	bl	800135e <pow2>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4650      	mov	r0, sl
 8001548:	4659      	mov	r1, fp
 800154a:	f7ff f8ef 	bl	800072c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4640      	mov	r0, r8
 8001554:	4649      	mov	r1, r9
 8001556:	f7fe fe09 	bl	800016c <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <decodeGGA+0x224>)
 8001568:	f7ff f8e0 	bl	800072c <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe fdfa 	bl	800016c <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa82 	bl	8000a88 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	61fb      	str	r3, [r7, #28]
	gga->lcation.latitude = lat;  		// save the latitude data into the structure
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	601a      	str	r2, [r3, #0]

	gga->lcation.NS = *getDataAt(GGAbuffer, ",", 2);  // save the N/S into the structure
 800158e:	2202      	movs	r2, #2
 8001590:	4923      	ldr	r1, [pc, #140]	; (8001620 <decodeGGA+0x21c>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff feac 	bl	80012f0 <getDataAt>
 8001598:	4603      	mov	r3, r0
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	711a      	strb	r2, [r3, #4]


	/***********************  GET LONGITUDE **********************/

	memset(buffer, '\0', 12);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	220c      	movs	r2, #12
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f011 fdd9 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 3));
 80015ae:	2203      	movs	r2, #3
 80015b0:	491b      	ldr	r1, [pc, #108]	; (8001620 <decodeGGA+0x21c>)
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe9c 	bl	80012f0 <getDataAt>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f011 fe8b 	bl	80132dc <strcpy>

	num = (atoi(buffer));  	// change the buffer to the number. It will only convert up to decimal
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4618      	mov	r0, r3
 80015cc:	f011 fd7c 	bl	80130c8 <atoi>
 80015d0:	4603      	mov	r3, r0
 80015d2:	867b      	strh	r3, [r7, #50]	; 0x32
	dd = num/100;			// extract the degrees
 80015d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <decodeGGA+0x220>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1152      	asrs	r2, r2, #5
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	mmint = num%100;		// extract the integer part of minutes
 80015e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <decodeGGA+0x220>)
 80015ee:	fb82 1203 	smull	r1, r2, r2, r3
 80015f2:	1151      	asrs	r1, r2, #5
 80015f4:	17da      	asrs	r2, r3, #31
 80015f6:	1a8a      	subs	r2, r1, r2
 80015f8:	2164      	movs	r1, #100	; 0x64
 80015fa:	fb01 f202 	mul.w	r2, r1, r2
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	j = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001608:	e013      	b.n	8001632 <decodeGGA+0x22e>
		if(j > strlen(buffer)) return 2;
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fd9e 	bl	8000150 <strlen>
 8001614:	4602      	mov	r2, r0
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <decodeGGA+0x228>
 800161c:	2302      	movs	r3, #2
 800161e:	e15e      	b.n	80018de <decodeGGA+0x4da>
 8001620:	080142f8 	.word	0x080142f8
 8001624:	51eb851f 	.word	0x51eb851f
 8001628:	404e0000 	.word	0x404e0000
		j++;   	// Figure out how many digits before the decimal
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	3301      	adds	r3, #1
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b2e      	cmp	r3, #46	; 0x2e
 800163e:	d1e4      	bne.n	800160a <decodeGGA+0x206>
	}
	j++;
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	3301      	adds	r3, #1
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;  		// calculate the number of digit after decimal
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fd80 	bl	8000150 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
	mmdec = atoi ((char *) buffer+j);  	// extract the decimal part of minutes
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	4413      	add	r3, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f011 fd31 	bl	80130c8 <atoi>
 8001666:	6238      	str	r0, [r7, #32]
	lat = dd + (mmint + mmdec/pow2(10, (declen)))/60;  // combine minutes and convert to degrees
 8001668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800166a:	f7fe fecb 	bl	8000404 <__aeabi_i2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001674:	f7fe fec6 	bl	8000404 <__aeabi_i2d>
 8001678:	4680      	mov	r8, r0
 800167a:	4689      	mov	r9, r1
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f7fe fec1 	bl	8000404 <__aeabi_i2d>
 8001682:	4682      	mov	sl, r0
 8001684:	468b      	mov	fp, r1
 8001686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001688:	200a      	movs	r0, #10
 800168a:	f7ff fe68 	bl	800135e <pow2>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4650      	mov	r0, sl
 8001694:	4659      	mov	r1, fp
 8001696:	f7ff f849 	bl	800072c <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe fd63 	bl	800016c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <decodeGGA+0x4e4>)
 80016b4:	f7ff f83a 	bl	800072c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7fe fd54 	bl	800016c <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9dc 	bl	8000a88 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	61fb      	str	r3, [r7, #28]
	gga->lcation.longitude = lat;  // save the longitude data into the structure
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	609a      	str	r2, [r3, #8]

	gga->lcation.EW = *getDataAt(GGAbuffer, ",", 4);  // save the E/W into the structure
 80016da:	2204      	movs	r2, #4
 80016dc:	4983      	ldr	r1, [pc, #524]	; (80018ec <decodeGGA+0x4e8>)
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fe06 	bl	80012f0 <getDataAt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	731a      	strb	r2, [r3, #12]

	/***************** NUMMBER OF SATELLITES  *********************/

	strcpy(buffer, getDataAt(GGAbuffer, ",", 6));
 80016ec:	2206      	movs	r2, #6
 80016ee:	497f      	ldr	r1, [pc, #508]	; (80018ec <decodeGGA+0x4e8>)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fdfd 	bl	80012f0 <getDataAt>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f011 fdec 	bl	80132dc <strcpy>

	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f011 fcdd 	bl	80130c8 <atoi>
 800170e:	4602      	mov	r2, r0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28

	/***************** HDOP  *********************/

	memset(buffer, '\0', 12);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	220c      	movs	r2, #12
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f011 fd1f 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 7));
 8001722:	2207      	movs	r2, #7
 8001724:	4971      	ldr	r1, [pc, #452]	; (80018ec <decodeGGA+0x4e8>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fde2 	bl	80012f0 <getDataAt>
 800172c:	4602      	mov	r2, r0
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f011 fdd1 	bl	80132dc <strcpy>

	num = (atoi(buffer));
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4618      	mov	r0, r3
 8001740:	f011 fcc2 	bl	80130c8 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800174c:	e00d      	b.n	800176a <decodeGGA+0x366>
		if(j > strlen(buffer)) return 2;
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4602      	mov	r2, r0
 800175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175c:	429a      	cmp	r2, r3
 800175e:	d201      	bcs.n	8001764 <decodeGGA+0x360>
 8001760:	2302      	movs	r3, #2
 8001762:	e0bc      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3301      	adds	r3, #1
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800176a:	f107 020c 	add.w	r2, r7, #12
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2e      	cmp	r3, #46	; 0x2e
 8001776:	d1ea      	bne.n	800174e <decodeGGA+0x34a>
	}
	j++;
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	3301      	adds	r3, #1
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fce4 	bl	8000150 <strlen>
 8001788:	4602      	mov	r2, r0
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
	int dec = atoi ((char *) buffer+j);
 8001790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001792:	f107 020c 	add.w	r2, r7, #12
 8001796:	4413      	add	r3, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f011 fc95 	bl	80130c8 <atoi>
 800179e:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 80017a0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe2d 	bl	8000404 <__aeabi_i2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff fdcf 	bl	800135e <pow2>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe ffb0 	bl	800072c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fcca 	bl	800016c <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f952 	bl	8000a88 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	61fb      	str	r3, [r7, #28]
	gga->HDOP = lat;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c

	/*************** ALTITUDE CALCULATION ********************/

	memset(buffer, '\0', 12);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	220c      	movs	r2, #12
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f011 fcb2 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(GGAbuffer, ",", 8));
 80017fc:	2208      	movs	r2, #8
 80017fe:	493b      	ldr	r1, [pc, #236]	; (80018ec <decodeGGA+0x4e8>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fd75 	bl	80012f0 <getDataAt>
 8001806:	4602      	mov	r2, r0
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f011 fd64 	bl	80132dc <strcpy>

	num = (atoi(buffer));
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4618      	mov	r0, r3
 800181a:	f011 fc55 	bl	80130c8 <atoi>
 800181e:	4603      	mov	r3, r0
 8001820:	867b      	strh	r3, [r7, #50]	; 0x32
	j = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001826:	e00d      	b.n	8001844 <decodeGGA+0x440>
		if(j > strlen(buffer)) return 2;
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fc8f 	bl	8000150 <strlen>
 8001832:	4602      	mov	r2, r0
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	429a      	cmp	r2, r3
 8001838:	d201      	bcs.n	800183e <decodeGGA+0x43a>
 800183a:	2302      	movs	r3, #2
 800183c:	e04f      	b.n	80018de <decodeGGA+0x4da>
		j++;   	// Figure out how many digits before the decimal
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	3301      	adds	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001844:	f107 020c 	add.w	r2, r7, #12
 8001848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b2e      	cmp	r3, #46	; 0x2e
 8001850:	d1ea      	bne.n	8001828 <decodeGGA+0x424>
	}
	j++;
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	3301      	adds	r3, #1
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
	declen = (strlen(buffer))-j;
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fc77 	bl	8000150 <strlen>
 8001862:	4602      	mov	r2, r0
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
	dec = atoi ((char *) buffer+j);
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	4413      	add	r3, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f011 fc28 	bl	80130c8 <atoi>
 8001878:	61b8      	str	r0, [r7, #24]
	lat = (num) + (dec/pow2(10, (declen)));
 800187a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f7fe fdbb 	bl	8000404 <__aeabi_i2d>
 800188e:	4680      	mov	r8, r0
 8001890:	4689      	mov	r9, r1
 8001892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001894:	200a      	movs	r0, #10
 8001896:	f7ff fd62 	bl	800135e <pow2>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4640      	mov	r0, r8
 80018a0:	4649      	mov	r1, r9
 80018a2:	f7fe ff43 	bl	800072c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fc5d 	bl	800016c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f8e5 	bl	8000a88 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	61fb      	str	r3, [r7, #28]
	gga->alt.altitude = lat;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	621a      	str	r2, [r3, #32]

	gga->alt.unit = *getDataAt(GGAbuffer, ",", 9);
 80018c8:	2209      	movs	r2, #9
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <decodeGGA+0x4e8>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fd0f 	bl	80012f0 <getDataAt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80018dc:	2300      	movs	r3, #0

}
 80018de:	4618      	mov	r0, r3
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e8:	404e0000 	.word	0x404e0000
 80018ec:	080142f8 	.word	0x080142f8

080018f0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc) {
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b08e      	sub	sp, #56	; 0x38
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]

	char buffer[12];

	if (*getDataAt(RMCbuffer, ",", 1) == 'A') rmc->isValid = 1; // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80018fc:	2201      	movs	r2, #1
 80018fe:	4985      	ldr	r1, [pc, #532]	; (8001b14 <decodeRMC+0x224>)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fcf5 	bl	80012f0 <getDataAt>
 8001906:	4603      	mov	r3, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b41      	cmp	r3, #65	; 0x41
 800190c:	d118      	bne.n	8001940 <decodeRMC+0x50>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
	else {
		rmc->isValid = 0;
		return 1;
	}

	memset(buffer, '\0', 12);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	220c      	movs	r2, #12
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f011 fc1f 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 6));
 8001922:	2206      	movs	r2, #6
 8001924:	497b      	ldr	r1, [pc, #492]	; (8001b14 <decodeRMC+0x224>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fce2 	bl	80012f0 <getDataAt>
 800192c:	4602      	mov	r2, r0
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f011 fcd1 	bl	80132dc <strcpy>

	int j = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 800193e:	e012      	b.n	8001966 <decodeRMC+0x76>
		rmc->isValid = 0;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
		return 1;
 8001946:	2301      	movs	r3, #1
 8001948:	e0df      	b.n	8001b0a <decodeRMC+0x21a>
		if(j > strlen(buffer)) return 2;
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fbfe 	bl	8000150 <strlen>
 8001954:	4602      	mov	r2, r0
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	429a      	cmp	r2, r3
 800195a:	d201      	bcs.n	8001960 <decodeRMC+0x70>
 800195c:	2302      	movs	r3, #2
 800195e:	e0d4      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   // same as above
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b2e      	cmp	r3, #46	; 0x2e
 8001972:	d1ea      	bne.n	800194a <decodeRMC+0x5a>
	}

	if (strlen (buffer) > j) {          // if the speed have some valid data
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4602      	mov	r2, r0
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	429a      	cmp	r2, r3
 8001984:	d942      	bls.n	8001a0c <decodeRMC+0x11c>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f011 fb9c 	bl	80130c8 <atoi>
 8001990:	4603      	mov	r3, r0
 8001992:	867b      	strh	r3, [r7, #50]	; 0x32
		j++;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3301      	adds	r3, #1
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fbd6 	bl	8000150 <strlen>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	f107 0208 	add.w	r2, r7, #8
 80019b2:	4413      	add	r3, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f011 fb87 	bl	80130c8 <atoi>
 80019ba:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow2(10, (declen)));
 80019bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd1f 	bl	8000404 <__aeabi_i2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019cc:	f7fe fd1a 	bl	8000404 <__aeabi_i2d>
 80019d0:	4680      	mov	r8, r0
 80019d2:	4689      	mov	r9, r1
 80019d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019d6:	200a      	movs	r0, #10
 80019d8:	f7ff fcc1 	bl	800135e <pow2>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4640      	mov	r0, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	f7fe fea2 	bl	800072c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4620      	mov	r0, r4
 80019ee:	4629      	mov	r1, r5
 80019f0:	f7fe fbbc 	bl	800016c <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f844 	bl	8000a88 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e003      	b.n	8001a14 <decodeRMC+0x124>
	}
	else rmc->speed = 0;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]

	// Get Course

	memset(buffer, '\0', 12);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	220c      	movs	r2, #12
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f011 fb9f 	bl	8013160 <memset>
	strcpy(buffer, getDataAt(RMCbuffer, ",", 7));
 8001a22:	2207      	movs	r2, #7
 8001a24:	493b      	ldr	r1, [pc, #236]	; (8001b14 <decodeRMC+0x224>)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fc62 	bl	80012f0 <getDataAt>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f011 fc51 	bl	80132dc <strcpy>

	j = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a3e:	e00d      	b.n	8001a5c <decodeRMC+0x16c>
		if(j > strlen(buffer)) return 2;
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fb83 	bl	8000150 <strlen>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d201      	bcs.n	8001a56 <decodeRMC+0x166>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e059      	b.n	8001b0a <decodeRMC+0x21a>
		j++;   	// Figure out how many digits before the decimal
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
	while (buffer[j] != '.') {
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b2e      	cmp	r3, #46	; 0x2e
 8001a68:	d1ea      	bne.n	8001a40 <decodeRMC+0x150>
	}

	if (strlen (buffer) > j){  // if the course have some data
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fb6e 	bl	8000150 <strlen>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d942      	bls.n	8001b02 <decodeRMC+0x212>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f011 fb21 	bl	80130c8 <atoi>
 8001a86:	4603      	mov	r3, r0
 8001a88:	847b      	strh	r3, [r7, #34]	; 0x22
		j++;
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fb5b 	bl	8000150 <strlen>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f011 fb0c 	bl	80130c8 <atoi>
 8001ab0:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow2(10, (declen)));
 8001ab2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fca4 	bl	8000404 <__aeabi_i2d>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f7fe fc9f 	bl	8000404 <__aeabi_i2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	69f9      	ldr	r1, [r7, #28]
 8001acc:	200a      	movs	r0, #10
 8001ace:	f7ff fc46 	bl	800135e <pow2>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fe27 	bl	800072c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fb41 	bl	800016c <__adddf3>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe ffc9 	bl	8000a88 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	e003      	b.n	8001b0a <decodeRMC+0x21a>
	}
	else rmc->course = 0;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
		rmc->date.Mon = mon;
		rmc->date.Yr = yr;
	}
	return 0;
	*/
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3738      	adds	r7, #56	; 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b14:	080142f8 	.word	0x080142f8

08001b18 <getGPSData>:


void getGPSData (GPSSTRUCT *gpsData) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	char GGA[100];
	char RMC[100];
	unsigned int tail = GetTail ();
 8001b20:	f000 f97a 	bl	8001e18 <GetTail>
 8001b24:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	unsigned int head = GetHead ();
 8001b28:	f000 f99a 	bl	8001e60 <GetHead>
 8001b2c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	ring_buffer* buf_prev = GetRxBuf ();
 8001b30:	f000 f97e 	bl	8001e30 <GetRxBuf>
 8001b34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	unsigned long _gga_time = gga_time;
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <getGPSData+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


	if (Wait_for("GGA")) {
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <getGPSData+0xb0>)
 8001b42:	f000 f999 	bl	8001e78 <Wait_for>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d019      	beq.n	8001b80 <getGPSData+0x68>
		gga_time = HAL_GetTick();
 8001b4c:	f004 fb10 	bl	8006170 <HAL_GetTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <getGPSData+0xac>)
 8001b54:	6013      	str	r3, [r2, #0]
		gga_time_dif = gga_time - _gga_time;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <getGPSData+0xac>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <getGPSData+0xb4>)
 8001b62:	6013      	str	r3, [r2, #0]
		Copy_upto("*", GGA);
 8001b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <getGPSData+0xb8>)
 8001b6c:	f000 f8de 	bl	8001d2c <Copy_upto>
		decodeGGA(GGA, &gpsData->ggastruct);
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fc43 	bl	8001404 <decodeGGA>
 8001b7e:	e003      	b.n	8001b88 <getGPSData+0x70>
	}

	else {
		//SetTail(tail);
		//SetHead(head);
		SetRxBuf(buf_prev);
 8001b80:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001b84:	f000 f95e 	bl	8001e44 <SetRxBuf>
	}



	if (Wait_for("RMC")) {
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <getGPSData+0xbc>)
 8001b8a:	f000 f975 	bl	8001e78 <Wait_for>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <getGPSData+0x9c>
		Copy_upto("*", RMC);
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <getGPSData+0xb8>)
 8001b9c:	f000 f8c6 	bl	8001d2c <Copy_upto>
		decodeRMC(RMC, &gpsData->rmcstruct);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe9f 	bl	80018f0 <decodeRMC>


	//Uart_flush();
	//return;

}
 8001bb2:	e003      	b.n	8001bbc <getGPSData+0xa4>
		SetRxBuf(buf_prev);
 8001bb4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001bb8:	f000 f944 	bl	8001e44 <SetRxBuf>
}
 8001bbc:	bf00      	nop
 8001bbe:	37e0      	adds	r7, #224	; 0xe0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20001644 	.word	0x20001644
 8001bc8:	080142fc 	.word	0x080142fc
 8001bcc:	20001648 	.word	0x20001648
 8001bd0:	08014300 	.word	0x08014300
 8001bd4:	08014304 	.word	0x08014304

08001bd8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <Ringbuf_init+0x38>)
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <Ringbuf_init+0x3c>)
 8001be0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <Ringbuf_init+0x40>)
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <Ringbuf_init+0x44>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Ringbuf_init+0x48>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <Ringbuf_init+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Ringbuf_init+0x48>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <Ringbuf_init+0x48>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	60da      	str	r2, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	2000171c 	.word	0x2000171c
 8001c14:	200000a0 	.word	0x200000a0
 8001c18:	20001718 	.word	0x20001718
 8001c1c:	200004a8 	.word	0x200004a8
 8001c20:	200018dc 	.word	0x200018dc

08001c24 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d009      	beq.n	8001c5e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	79f9      	ldrb	r1, [r7, #7]
 8001c54:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <Uart_read+0x54>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <Uart_read+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d102      	bne.n	8001c88 <Uart_read+0x20>
  {
    return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e013      	b.n	8001cb0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <Uart_read+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <Uart_read+0x54>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <Uart_read+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <Uart_read+0x54>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001caa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 8001cae:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000171c 	.word	0x2000171c

08001cc0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <IsDataAvailable+0x30>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000171c 	.word	0x2000171c

08001cf4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <Uart_peek+0x34>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Uart_peek+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d102      	bne.n	8001d12 <Uart_peek+0x1e>
  {
    return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e006      	b.n	8001d20 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <Uart_peek+0x34>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <Uart_peek+0x34>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	2000171c 	.word	0x2000171c

08001d2c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fa08 	bl	8000150 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001d48:	e01e      	b.n	8001d88 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <Copy_upto+0xe4>)
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <Copy_upto+0xe4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	4403      	add	r3, r0
 8001d5c:	5c8a      	ldrb	r2, [r1, r2]
 8001d5e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <Copy_upto+0xe4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <Copy_upto+0xe4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			indx++;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001d7c:	bf00      	nop
 8001d7e:	f7ff ff9f 	bl	8001cc0 <IsDataAvailable>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0fa      	beq.n	8001d7e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001d88:	f7ff ffb4 	bl	8001cf4 <Uart_peek>
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d1d7      	bne.n	8001d4a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001d9a:	e01d      	b.n	8001dd8 <Copy_upto+0xac>
	{
		so_far++;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001da2:	f7ff ff61 	bl	8001c68 <Uart_read>
 8001da6:	4601      	mov	r1, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	613a      	str	r2, [r7, #16]
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d101      	bne.n	8001dc4 <Copy_upto+0x98>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e020      	b.n	8001e06 <Copy_upto+0xda>
		timeout = TIMEOUT_DEF;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <Copy_upto+0xe8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001dca:	f7ff ff79 	bl	8001cc0 <IsDataAvailable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <Copy_upto+0xac>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e016      	b.n	8001e06 <Copy_upto+0xda>
	while (Uart_peek() == string [so_far])
 8001dd8:	f7ff ff8c 	bl	8001cf4 <Uart_peek>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d0d8      	beq.n	8001d9c <Copy_upto+0x70>
	}

	if (so_far != len)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d002      	beq.n	8001df8 <Copy_upto+0xcc>
	{
		so_far = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
		goto again;
 8001df6:	e7a7      	b.n	8001d48 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d101      	bne.n	8001e04 <Copy_upto+0xd8>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <Copy_upto+0xda>
	else return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000171c 	.word	0x2000171c
 8001e14:	20001720 	.word	0x20001720

08001e18 <GetTail>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions

unsigned int GetTail () {
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return _rx_buffer->tail;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <GetTail+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404

}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	2000171c 	.word	0x2000171c

08001e30 <GetRxBuf>:

ring_buffer* GetRxBuf () {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return _rx_buffer;
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <GetRxBuf+0x10>)
 8001e36:	681b      	ldr	r3, [r3, #0]

}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	2000171c 	.word	0x2000171c

08001e44 <SetRxBuf>:

void SetRxBuf(ring_buffer* buf) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	_rx_buffer = buf;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <SetRxBuf+0x18>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	2000171c 	.word	0x2000171c

08001e60 <GetHead>:


unsigned int GetHead () {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return _rx_buffer->head;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <GetHead+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	2000171c 	.word	0x2000171c

08001e78 <Wait_for>:
	_rx_buffer->head = _head;

}

int Wait_for (char *string)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	int so_far = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe f963 	bl	8000150 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <Wait_for+0xe4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
	if ((IsDataAvailable())) {  // let's wait for the data to show up
 8001e94:	f7ff ff14 	bl	8001cc0 <IsDataAvailable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d058      	beq.n	8001f50 <Wait_for+0xd8>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001e9e:	e017      	b.n	8001ed0 <Wait_for+0x58>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <Wait_for+0xe8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <Wait_for+0xe8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d00b      	beq.n	8001ecc <Wait_for+0x54>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <Wait_for+0xe8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <Wait_for+0xe8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ec6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001eca:	e001      	b.n	8001ed0 <Wait_for+0x58>
		}

		else
		{
			//Uart_flush();
			return 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e040      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001ed0:	f7ff ff10 	bl	8001cf4 <Uart_peek>
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d1de      	bne.n	8001ea0 <Wait_for+0x28>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001ee2:	e01d      	b.n	8001f20 <Wait_for+0xa8>
	{
		// now we will peek for the other letters too
		so_far++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <Wait_for+0xe8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <Wait_for+0xe8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001efc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d101      	bne.n	8001f0c <Wait_for+0x94>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e022      	b.n	8001f52 <Wait_for+0xda>
		timeout = TIMEOUT_DEF;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <Wait_for+0xe4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]
		if ((!IsDataAvailable())) return 0;
 8001f12:	f7ff fed5 	bl	8001cc0 <IsDataAvailable>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <Wait_for+0xa8>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e018      	b.n	8001f52 <Wait_for+0xda>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001f20:	f7ff fee8 	bl	8001cf4 <Uart_peek>
 8001f24:	4601      	mov	r1, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	d0d8      	beq.n	8001ee4 <Wait_for+0x6c>
	}

	if (so_far != len)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d002      	beq.n	8001f40 <Wait_for+0xc8>
	{
		so_far = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f3e:	e7a6      	b.n	8001e8e <Wait_for+0x16>
	}

	if (so_far == len)
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <Wait_for+0xd4>
		{
		//Uart_flush();
		return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e002      	b.n	8001f52 <Wait_for+0xda>

		}
	else {
		//Uart_flush();
		return 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <Wait_for+0xda>
	}
}

	else {
		return 0;
 8001f50:	2300      	movs	r3, #0
	}

}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001720 	.word	0x20001720
 8001f60:	2000171c 	.word	0x2000171c

08001f64 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <Uart_isr+0x4a>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <Uart_isr+0xb4>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe3c 	bl	8001c24 <store_char>
        return;
 8001fac:	e031      	b.n	8002012 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02c      	beq.n	8002012 <Uart_isr+0xae>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d027      	beq.n	8002012 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <Uart_isr+0xb8>)
 8001fc4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <Uart_isr+0xb8>)
 8001fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001fe2:	e015      	b.n	8002010 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <Uart_isr+0xb8>)
 8001fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <Uart_isr+0xb8>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <Uart_isr+0xb8>)
 8001ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <Uart_isr+0xb8>)
 8001ffe:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7bba      	ldrb	r2, [r7, #14]
 800200e:	605a      	str	r2, [r3, #4]
    	return;
 8002010:	bf00      	nop
    }
}
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000171c 	.word	0x2000171c
 800201c:	200004a8 	.word	0x200004a8

08002020 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800202e:	2301      	movs	r3, #1
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2301      	movs	r3, #1
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	1dbb      	adds	r3, r7, #6
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	22d0      	movs	r2, #208	; 0xd0
 800203e:	21ef      	movs	r1, #239	; 0xef
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <read_chip_id+0x3c>)
 8002042:	f005 fcb7 	bl	80079b4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b55      	cmp	r3, #85	; 0x55
 800204a:	d001      	beq.n	8002050 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800204c:	2301      	movs	r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8002050:	79fb      	ldrb	r3, [r7, #7]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20001724 	.word	0x20001724

08002060 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 800206c:	2300      	movs	r3, #0
 800206e:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d81a      	bhi.n	80020ac <set_oss+0x4c>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <set_oss+0x1c>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002095 	.word	0x08002095
 8002084:	0800209d 	.word	0x0800209d
 8002088:	080020a5 	.word	0x080020a5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	705a      	strb	r2, [r3, #1]
			break;
 8002092:	e00f      	b.n	80020b4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2208      	movs	r2, #8
 8002098:	705a      	strb	r2, [r3, #1]
			break;
 800209a:	e00b      	b.n	80020b4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	220e      	movs	r2, #14
 80020a0:	705a      	strb	r2, [r3, #1]
			break;
 80020a2:	e007      	b.n	80020b4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	221a      	movs	r2, #26
 80020a8:	705a      	strb	r2, [r3, #1]
			break;
 80020aa:	e003      	b.n	80020b4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2208      	movs	r2, #8
 80020b0:	705a      	strb	r2, [r3, #1]
			break;
 80020b2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80020c4:	2301      	movs	r3, #1
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	22f4      	movs	r2, #244	; 0xf4
 80020d6:	21ee      	movs	r1, #238	; 0xee
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <set_oss+0x88>)
 80020da:	f005 fb71 	bl	80077c0 <HAL_I2C_Mem_Write>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20001724 	.word	0x20001724

080020ec <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800211a:	2301      	movs	r3, #1
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	2316      	movs	r3, #22
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	22aa      	movs	r2, #170	; 0xaa
 800212c:	21ef      	movs	r1, #239	; 0xef
 800212e:	4828      	ldr	r0, [pc, #160]	; (80021d0 <read_calib_data+0xe4>)
 8002130:	f005 fc40 	bl	80079b4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800213a:	e03e      	b.n	80021ba <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800213c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b219      	sxth	r1, r3
 8002150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002154:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002158:	4413      	add	r3, r2
 800215a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800215e:	b21a      	sxth	r2, r3
 8002160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4403      	add	r3, r0
 800216a:	430a      	orrs	r2, r1
 800216c:	b212      	sxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8002170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2da      	uxtb	r2, r3
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	440b      	add	r3, r1
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80021b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021be:	2b0b      	cmp	r3, #11
 80021c0:	d9bc      	bls.n	800213c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80021c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20001724 	.word	0x20001724

080021d4 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f010 ffbc 	bl	8013160 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80021e8:	687c      	ldr	r4, [r7, #4]
 80021ea:	f7ff ff19 	bl	8002020 <read_chip_id>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	687c      	ldr	r4, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff77 	bl	80020ec <read_calib_data>
 80021fe:	4603      	mov	r3, r0
 8002200:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3338      	adds	r3, #56	; 0x38
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff28 	bl	8002060 <set_oss>
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800221e:	232e      	movs	r3, #46	; 0x2e
 8002220:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002222:	2301      	movs	r3, #1
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	22f4      	movs	r2, #244	; 0xf4
 8002232:	21ee      	movs	r1, #238	; 0xee
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <write_ut+0x2c>)
 8002236:	f005 fac3 	bl	80077c0 <HAL_I2C_Mem_Write>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20001724 	.word	0x20001724

08002248 <read_ut>:

int32_t read_ut (void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800224e:	2301      	movs	r3, #1
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2302      	movs	r3, #2
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	22f6      	movs	r2, #246	; 0xf6
 800225e:	21ef      	movs	r1, #239	; 0xef
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <read_ut+0x30>)
 8002262:	f005 fba7 	bl	80079b4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8002266:	793b      	ldrb	r3, [r7, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	797a      	ldrb	r2, [r7, #5]
 800226c:	4313      	orrs	r3, r2
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20001724 	.word	0x20001724

0800227c <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
	float temp = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ff30 	bl	80010fc <__aeabi_f2iz>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	895b      	ldrh	r3, [r3, #10]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	8912      	ldrh	r2, [r2, #8]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	13db      	asrs	r3, r3, #15
 80022ae:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022b6:	02da      	lsls	r2, r3, #11
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022be:	4619      	mov	r1, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	440b      	add	r3, r1
 80022c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	3308      	adds	r3, #8
 80022da:	111b      	asrs	r3, r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fcdd 	bl	8000c9c <__aeabi_i2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <get_temp+0xa4>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd2c 	bl	8000d44 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <get_temp+0xa8>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7fe fece 	bl	8001094 <__aeabi_fcmple>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <get_temp+0x90>
 80022fe:	490a      	ldr	r1, [pc, #40]	; (8002328 <get_temp+0xac>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe fed1 	bl	80010a8 <__aeabi_fcmpge>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	3dcccccd 	.word	0x3dcccccd
 8002324:	c2200000 	.word	0xc2200000
 8002328:	42aa0000 	.word	0x42aa0000

0800232c <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <write_up+0x38>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	803b      	strh	r3, [r7, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8002340:	2334      	movs	r3, #52	; 0x34
 8002342:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8002344:	2301      	movs	r3, #1
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	463b      	mov	r3, r7
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	22f4      	movs	r2, #244	; 0xf4
 8002354:	21ee      	movs	r1, #238	; 0xee
 8002356:	4804      	ldr	r0, [pc, #16]	; (8002368 <write_up+0x3c>)
 8002358:	f005 fa32 	bl	80077c0 <HAL_I2C_Mem_Write>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08014308 	.word	0x08014308
 8002368:	20001724 	.word	0x20001724

0800236c <read_up>:

int32_t read_up (oss_t oss)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af04      	add	r7, sp, #16
 8002372:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <read_up+0x54>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	2300      	movs	r3, #0
 800237c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8002382:	2301      	movs	r3, #1
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	2303      	movs	r3, #3
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2301      	movs	r3, #1
 8002392:	22f6      	movs	r2, #246	; 0xf6
 8002394:	21ef      	movs	r1, #239	; 0xef
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <read_up+0x58>)
 8002398:	f005 fb0c 	bl	80079b4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800239c:	7a3b      	ldrb	r3, [r7, #8]
 800239e:	041a      	lsls	r2, r3, #16
 80023a0:	7a7b      	ldrb	r3, [r7, #9]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	4413      	add	r3, r2
 80023a6:	7aba      	ldrb	r2, [r7, #10]
 80023a8:	441a      	add	r2, r3
 80023aa:	793b      	ldrb	r3, [r7, #4]
 80023ac:	f1c3 0308 	rsb	r3, r3, #8
 80023b0:	fa42 f303 	asr.w	r3, r2, r3
 80023b4:	60fb      	str	r3, [r7, #12]
	return up;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	08014308 	.word	0x08014308
 80023c4:	20001724 	.word	0x20001724

080023c8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80023c8:	b084      	sub	sp, #16
 80023ca:	b480      	push	{r7}
 80023cc:	b089      	sub	sp, #36	; 0x24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80023d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80023e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80023e6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80023e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80023ec:	461a      	mov	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fb03 f303 	mul.w	r3, r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da01      	bge.n	80023fc <get_pressure+0x34>
 80023f8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023fc:	131b      	asrs	r3, r3, #12
 80023fe:	fb03 f302 	mul.w	r3, r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	da01      	bge.n	800240a <get_pressure+0x42>
 8002406:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800240a:	12db      	asrs	r3, r3, #11
 800240c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800240e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002412:	461a      	mov	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fb03 f302 	mul.w	r3, r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	da01      	bge.n	8002422 <get_pressure+0x5a>
 800241e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002422:	12db      	asrs	r3, r3, #11
 8002424:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800242e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002432:	009a      	lsls	r2, r3, #2
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4413      	add	r3, r2
 8002438:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800243c:	4093      	lsls	r3, r2
 800243e:	3302      	adds	r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	da00      	bge.n	8002446 <get_pressure+0x7e>
 8002444:	3303      	adds	r3, #3
 8002446:	109b      	asrs	r3, r3, #2
 8002448:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800244a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800244e:	461a      	mov	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb03 f302 	mul.w	r3, r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	da02      	bge.n	8002460 <get_pressure+0x98>
 800245a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800245e:	331f      	adds	r3, #31
 8002460:	135b      	asrs	r3, r3, #13
 8002462:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8002464:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fb03 f303 	mul.w	r3, r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	da01      	bge.n	8002478 <get_pressure+0xb0>
 8002474:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002478:	131b      	asrs	r3, r3, #12
 800247a:	fb03 f302 	mul.w	r3, r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	da02      	bge.n	8002488 <get_pressure+0xc0>
 8002482:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002486:	33ff      	adds	r3, #255	; 0xff
 8002488:	141b      	asrs	r3, r3, #16
 800248a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	3302      	adds	r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	da00      	bge.n	800249a <get_pressure+0xd2>
 8002498:	3303      	adds	r3, #3
 800249a:	109b      	asrs	r3, r3, #2
 800249c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800249e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024a8:	fb03 f302 	mul.w	r3, r3, r2
 80024ac:	0bdb      	lsrs	r3, r3, #15
 80024ae:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80024bc:	4611      	mov	r1, r2
 80024be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80024c2:	410a      	asrs	r2, r1
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db06      	blt.n	80024de <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	e005      	b.n	80024ea <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <get_pressure+0x12a>
 80024f0:	33ff      	adds	r3, #255	; 0xff
 80024f2:	121b      	asrs	r3, r3, #8
 80024f4:	461a      	mov	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da00      	bge.n	80024fe <get_pressure+0x136>
 80024fc:	33ff      	adds	r3, #255	; 0xff
 80024fe:	121b      	asrs	r3, r3, #8
 8002500:	fb03 f302 	mul.w	r3, r3, r2
 8002504:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f640 32de 	movw	r2, #3038	; 0xbde
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	da02      	bge.n	800251a <get_pressure+0x152>
 8002514:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002518:	33ff      	adds	r3, #255	; 0xff
 800251a:	141b      	asrs	r3, r3, #16
 800251c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <get_pressure+0x194>)
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	da02      	bge.n	8002530 <get_pressure+0x168>
 800252a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800252e:	33ff      	adds	r3, #255	; 0xff
 8002530:	141b      	asrs	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <get_pressure+0x17c>
 8002542:	330f      	adds	r3, #15
 8002544:	111b      	asrs	r3, r3, #4
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	61fb      	str	r3, [r7, #28]

	return p;
 800254e:	69fb      	ldr	r3, [r7, #28]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	b004      	add	sp, #16
 800255a:	4770      	bx	lr
 800255c:	ffffe343 	.word	0xffffe343

08002560 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fb92 	bl	8000c9c <__aeabi_i2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4923      	ldr	r1, [pc, #140]	; (8002608 <get_altitude+0xa8>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fc95 	bl	8000eac <__aeabi_fdiv>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff4f 	bl	8000428 <__aeabi_f2d>
 800258a:	a31b      	add	r3, pc, #108	; (adr r3, 80025f8 <get_altitude+0x98>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f00e fdda 	bl	8011148 <pow>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	491b      	ldr	r1, [pc, #108]	; (800260c <get_altitude+0xac>)
 800259e:	f7fd fde3 	bl	8000168 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	a315      	add	r3, pc, #84	; (adr r3, 8002600 <get_altitude+0xa0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fa64 	bl	8000a88 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <get_altitude+0xb0>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7fe fd64 	bl	8001094 <__aeabi_fcmple>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <get_altitude+0x80>
 80025d2:	4910      	ldr	r1, [pc, #64]	; (8002614 <get_altitude+0xb4>)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe fd67 	bl	80010a8 <__aeabi_fcmpge>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	ccd9456c 	.word	0xccd9456c
 80025fc:	3fc85b95 	.word	0x3fc85b95
 8002600:	00000000 	.word	0x00000000
 8002604:	40e5a540 	.word	0x40e5a540
 8002608:	47c5e680 	.word	0x47c5e680
 800260c:	3ff00000 	.word	0x3ff00000
 8002610:	c3fa0000 	.word	0xc3fa0000
 8002614:	460ca000 	.word	0x460ca000

08002618 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
	return b_counter;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <get_b_counter+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	200008b0 	.word	0x200008b0

0800262c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

	b_counter++;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <set_b_counter+0x30>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <set_b_counter+0x30>)
 800263c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <set_b_counter+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4293      	cmp	r3, r2
 8002648:	d202      	bcs.n	8002650 <set_b_counter+0x24>
		b_counter = 0;
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <set_b_counter+0x30>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
	}
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200008b0 	.word	0x200008b0

08002660 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f00e fcff 	bl	801106c <cosf>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f00e fd2b 	bl	80110dc <sinf>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_Z8lla2ecefPfS_>:
 *  Created on: Jul 21, 2022
 *      Author: Kerim
 */
#include <coordinates.hpp>

void lla2ecef(float lla[3], float ecef[3]) {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	float deg2rad = M_PI/180.0;
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <_Z8lla2ecefPfS_+0x168>)
 800269c:	617b      	str	r3, [r7, #20]

	float lat = deg2rad*lla[0];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f7fe fb4d 	bl	8000d44 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	613b      	str	r3, [r7, #16]
	float lon = deg2rad*lla[1];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7fe fb44 	bl	8000d44 <__aeabi_fmul>
 80026bc:	4603      	mov	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
	float h = lla[2];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]

	ecef[0] = (Nlla+h)*cos(lat)*cos(lon);
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f7fd feae 	bl	8000428 <__aeabi_f2d>
 80026cc:	a346      	add	r3, pc, #280	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd fd4b 	bl	800016c <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	6938      	ldr	r0, [r7, #16]
 80026e0:	f7ff ffbe 	bl	8002660 <_ZSt3cosf>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe9e 	bl	8000428 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd fef0 	bl	80004d8 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff ffad 	bl	8002660 <_ZSt3cosf>
 8002706:	4603      	mov	r3, r0
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe8d 	bl	8000428 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fedf 	bl	80004d8 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f9b1 	bl	8000a88 <__aeabi_d2f>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
	ecef[1] = (Nlla+h)*cos(lat)*sin(lon);
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	a32d      	add	r3, pc, #180	; (adr r3, 80027e8 <_Z8lla2ecefPfS_+0x158>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fd18 	bl	800016c <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f7ff ff8b 	bl	8002660 <_ZSt3cosf>
 800274a:	4603      	mov	r3, r0
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fe6b 	bl	8000428 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fd febd 	bl	80004d8 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff86 	bl	8002678 <_ZSt3sinf>
 800276c:	4603      	mov	r3, r0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe5a 	bl	8000428 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd feac 	bl	80004d8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	1d1c      	adds	r4, r3, #4
 800278c:	f7fe f97c 	bl	8000a88 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	6023      	str	r3, [r4, #0]
	ecef[2] = ((1-e*e)*Nlla+h)*sin(lat);
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f7fd fe47 	bl	8000428 <__aeabi_f2d>
 800279a:	a315      	add	r3, pc, #84	; (adr r3, 80027f0 <_Z8lla2ecefPfS_+0x160>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fce4 	bl	800016c <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7ff ff63 	bl	8002678 <_ZSt3sinf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe37 	bl	8000428 <__aeabi_f2d>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fe89 	bl	80004d8 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f103 0408 	add.w	r4, r3, #8
 80027d4:	f7fe f958 	bl	8000a88 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	6023      	str	r3, [r4, #0]
/*
	ecef[0] = 1;
	ecef[1] = 2;
	ecef[2] = 4;
	*/
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	f3af 8000 	nop.w
 80027e8:	00000000 	.word	0x00000000
 80027ec:	4158549d 	.word	0x4158549d
 80027f0:	8ae0b0af 	.word	0x8ae0b0af
 80027f4:	41585457 	.word	0x41585457
 80027f8:	3c8efa35 	.word	0x3c8efa35

080027fc <_Z8ecef2nedPfS_S_S_>:

void ecef2ned(float ecef[3], float ecef0[3], float lla0[3], float vned[2]) {
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
	float deg2rad = M_PI/180.0;
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <_Z8ecef2nedPfS_S_S_+0x138>)
 800280c:	627b      	str	r3, [r7, #36]	; 0x24


	float dxecef = ecef[0]- ecef0[0];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fe f989 	bl	8000b30 <__aeabi_fsub>
 800281e:	4603      	mov	r3, r0
 8002820:	623b      	str	r3, [r7, #32]
	float dyecef = ecef[1]- ecef0[1];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3304      	adds	r3, #4
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe f97d 	bl	8000b30 <__aeabi_fsub>
 8002836:	4603      	mov	r3, r0
 8002838:	61fb      	str	r3, [r7, #28]
	float dzecef = ecef[2] -ecef0[2];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3308      	adds	r3, #8
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3308      	adds	r3, #8
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7fe f971 	bl	8000b30 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
	//dzecef = 0;

	float lat0 = deg2rad*lla0[0];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285a:	f7fe fa73 	bl	8000d44 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	617b      	str	r3, [r7, #20]
	float lon0 = deg2rad*lla0[1];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286c:	f7fe fa6a 	bl	8000d44 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	613b      	str	r3, [r7, #16]

	vned[1]=  -sin(lon0)*dxecef + cos(lon0)*dyecef;
 8002874:	6938      	ldr	r0, [r7, #16]
 8002876:	f7ff feff 	bl	8002678 <_ZSt3sinf>
 800287a:	4603      	mov	r3, r0
 800287c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa5e 	bl	8000d44 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	461d      	mov	r5, r3
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f7ff fee7 	bl	8002660 <_ZSt3cosf>
 8002892:	4603      	mov	r3, r0
 8002894:	69f9      	ldr	r1, [r7, #28]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fa54 	bl	8000d44 <__aeabi_fmul>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	1d1c      	adds	r4, r3, #4
 80028a4:	4611      	mov	r1, r2
 80028a6:	4628      	mov	r0, r5
 80028a8:	f7fe f944 	bl	8000b34 <__addsf3>
 80028ac:	4603      	mov	r3, r0
 80028ae:	6023      	str	r3, [r4, #0]
	vned[0] = -sin(lat0)*cos(lon0)*dxecef - sin(lat0)*sin(lon0)*dyecef + cos(lat0)*dzecef;
 80028b0:	6978      	ldr	r0, [r7, #20]
 80028b2:	f7ff fee1 	bl	8002678 <_ZSt3sinf>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80028bc:	6938      	ldr	r0, [r7, #16]
 80028be:	f7ff fecf 	bl	8002660 <_ZSt3cosf>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fa3c 	bl	8000d44 <__aeabi_fmul>
 80028cc:	4603      	mov	r3, r0
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa37 	bl	8000d44 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461d      	mov	r5, r3
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff fecc 	bl	8002678 <_ZSt3sinf>
 80028e0:	4604      	mov	r4, r0
 80028e2:	6938      	ldr	r0, [r7, #16]
 80028e4:	f7ff fec8 	bl	8002678 <_ZSt3sinf>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fa29 	bl	8000d44 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	69f9      	ldr	r1, [r7, #28]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fa24 	bl	8000d44 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4619      	mov	r1, r3
 8002900:	4628      	mov	r0, r5
 8002902:	f7fe f915 	bl	8000b30 <__aeabi_fsub>
 8002906:	4603      	mov	r3, r0
 8002908:	461c      	mov	r4, r3
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff fea8 	bl	8002660 <_ZSt3cosf>
 8002910:	4603      	mov	r3, r0
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fa15 	bl	8000d44 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	4620      	mov	r0, r4
 8002920:	f7fe f908 	bl	8000b34 <__addsf3>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}
 8002934:	3c8efa35 	.word	0x3c8efa35

08002938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_DMA_Init+0x58>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <MX_DMA_Init+0x58>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6153      	str	r3, [r2, #20]
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_DMA_Init+0x58>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	200f      	movs	r0, #15
 800295c:	f003 fd31 	bl	80063c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002960:	200f      	movs	r0, #15
 8002962:	f003 fd4a 	bl	80063fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2010      	movs	r0, #16
 800296c:	f003 fd29 	bl	80063c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002970:	2010      	movs	r0, #16
 8002972:	f003 fd42 	bl	80063fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2011      	movs	r0, #17
 800297c:	f003 fd21 	bl	80063c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002980:	2011      	movs	r0, #17
 8002982:	f003 fd3a 	bl	80063fa <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029c6:	f043 0320 	orr.w	r3, r3, #32
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029f6:	f043 0308 	orr.w	r3, r3, #8
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_GPIO_Init+0xf8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a0e:	4820      	ldr	r0, [pc, #128]	; (8002a90 <MX_GPIO_Init+0xfc>)
 8002a10:	f004 fa1c 	bl	8006e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	f248 0130 	movw	r1, #32816	; 0x8030
 8002a1a:	481e      	ldr	r0, [pc, #120]	; (8002a94 <MX_GPIO_Init+0x100>)
 8002a1c:	f004 fa16 	bl	8006e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2102      	movs	r1, #2
 8002a24:	481c      	ldr	r0, [pc, #112]	; (8002a98 <MX_GPIO_Init+0x104>)
 8002a26:	f004 fa11 	bl	8006e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4619      	mov	r1, r3
 8002a42:	4813      	ldr	r0, [pc, #76]	; (8002a90 <MX_GPIO_Init+0xfc>)
 8002a44:	f003 ffc2 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8002a48:	f248 0330 	movw	r3, #32816	; 0x8030
 8002a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0310 	add.w	r3, r7, #16
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <MX_GPIO_Init+0x100>)
 8002a62:	f003 ffb3 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a66:	2302      	movs	r3, #2
 8002a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4806      	ldr	r0, [pc, #24]	; (8002a98 <MX_GPIO_Init+0x104>)
 8002a7e:	f003 ffa5 	bl	80069cc <HAL_GPIO_Init>

}
 8002a82:	bf00      	nop
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40010800 	.word	0x40010800
 8002a98:	40010c00 	.word	0x40010c00

08002a9c <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8002aa2:	2351      	movs	r3, #81	; 0x51
 8002aa4:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8002aa6:	1dba      	adds	r2, r7, #6
 8002aa8:	2364      	movs	r3, #100	; 0x64
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2301      	movs	r3, #1
 8002aae:	21e0      	movs	r1, #224	; 0xe0
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <request_range+0x2c>)
 8002ab2:	f004 fb27 	bl	8007104 <HAL_I2C_Master_Transmit>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <request_range+0x30>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]

}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20001724 	.word	0x20001724
 8002acc:	20000000 	.word	0x20000000

08002ad0 <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <getRange+0x34>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
			write = 1;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <getRange+0x38>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8002ae2:	1d3a      	adds	r2, r7, #4
 8002ae4:	2364      	movs	r3, #100	; 0x64
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2302      	movs	r3, #2
 8002aea:	21e1      	movs	r1, #225	; 0xe1
 8002aec:	4807      	ldr	r0, [pc, #28]	; (8002b0c <getRange+0x3c>)
 8002aee:	f004 fc07 	bl	8007300 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8002af2:	793b      	ldrb	r3, [r7, #4]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	797a      	ldrb	r2, [r7, #5]
 8002af8:	4313      	orrs	r3, r2



	//return -1;

}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20001722 	.word	0x20001722
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20001724 	.word	0x20001724

08002b10 <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

	u_counter++;
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <set_ucounter+0x30>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <set_ucounter+0x30>)
 8002b20:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <set_ucounter+0x30>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d202      	bcs.n	8002b34 <set_ucounter+0x24>
		u_counter = 0;
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <set_ucounter+0x30>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
	}
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	200008b4 	.word	0x200008b4

08002b44 <get_ucounter>:

int get_ucounter(void) {
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
	return u_counter;
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <get_ucounter+0x10>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	200008b4 	.word	0x200008b4

08002b58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <MX_I2C1_Init+0x54>)
 8002b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <MX_I2C1_Init+0x58>)
 8002b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_I2C1_Init+0x50>)
 8002b96:	f004 f971 	bl	8006e7c <HAL_I2C_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ba0:	f002 fba8 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20001724 	.word	0x20001724
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	00061a80 	.word	0x00061a80

08002bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_I2C_MspInit+0x70>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d123      	bne.n	8002c1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	6193      	str	r3, [r2, #24]
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bec:	23c0      	movs	r3, #192	; 0xc0
 8002bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf0:	2312      	movs	r3, #18
 8002bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480b      	ldr	r0, [pc, #44]	; (8002c2c <HAL_I2C_MspInit+0x78>)
 8002c00:	f003 fee4 	bl	80069cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c0e:	61d3      	str	r3, [r2, #28]
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_I2C_MspInit+0x74>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40005400 	.word	0x40005400
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010c00 	.word	0x40010c00

08002c30 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f00e fb51 	bl	80112f8 <asinf>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f00e f8f3 	bl	8010e54 <atanf>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00e fb5d 	bl	8011344 <atan2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f00e fb53 	bl	8011348 <sqrtf>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <HAL_UART_TxCpltCallback+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d134      	bne.n	8002d2a <HAL_UART_TxCpltCallback+0x7e>
		char end_char;
		switch(tx_type) {
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_UART_TxCpltCallback+0x8c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_UART_TxCpltCallback+0x44>
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	dc2e      	bgt.n	8002d2a <HAL_UART_TxCpltCallback+0x7e>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_TxCpltCallback+0x2a>
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d017      	beq.n	8002d04 <HAL_UART_TxCpltCallback+0x58>
		    sent_time = HAL_GetTick();
		    break;
		}

	}
}
 8002cd4:	e029      	b.n	8002d2a <HAL_UART_TxCpltCallback+0x7e>
			end_char = 0x01;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002cda:	f107 030f 	add.w	r3, r7, #15
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4814      	ldr	r0, [pc, #80]	; (8002d34 <HAL_UART_TxCpltCallback+0x88>)
 8002ce4:	f007 fe8c 	bl	800aa00 <HAL_UART_Transmit_DMA>
			tx_type = package;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_UART_TxCpltCallback+0x8c>)
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
			break;
 8002cee:	e01c      	b.n	8002d2a <HAL_UART_TxCpltCallback+0x7e>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8002cf0:	f240 1205 	movw	r2, #261	; 0x105
 8002cf4:	4911      	ldr	r1, [pc, #68]	; (8002d3c <HAL_UART_TxCpltCallback+0x90>)
 8002cf6:	480f      	ldr	r0, [pc, #60]	; (8002d34 <HAL_UART_TxCpltCallback+0x88>)
 8002cf8:	f007 fe82 	bl	800aa00 <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_UART_TxCpltCallback+0x8c>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
			break;
 8002d02:	e012      	b.n	8002d2a <HAL_UART_TxCpltCallback+0x7e>
			end_char = 0x04;
 8002d04:	2304      	movs	r3, #4
 8002d06:	73fb      	strb	r3, [r7, #15]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002d08:	f107 030f 	add.w	r3, r7, #15
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <HAL_UART_TxCpltCallback+0x88>)
 8002d12:	f007 fe75 	bl	800aa00 <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_UART_TxCpltCallback+0x8c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		    sent_time = HAL_GetTick();
 8002d1c:	f003 fa28 	bl	8006170 <HAL_GetTick>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_UART_TxCpltCallback+0x94>)
 8002d26:	601a      	str	r2, [r3, #0]
		    break;
 8002d28:	bf00      	nop
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200019e4 	.word	0x200019e4
 8002d38:	2000166c 	.word	0x2000166c
 8002d3c:	20000a68 	.word	0x20000a68
 8002d40:	200015a0 	.word	0x200015a0
 8002d44:	00000000 	.word	0x00000000

08002d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4e:	f003 f9b7 	bl	80060c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8002d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d56:	f003 fa15 	bl	8006184 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d5a:	f000 f933 	bl	8002fc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5e:	f7ff fe19 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d62:	f7ff fde9 	bl	8002938 <MX_DMA_Init>
  MX_I2C1_Init();
 8002d66:	f7ff fef7 	bl	8002b58 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002d6a:	f002 fd71 	bl	8005850 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002d6e:	f002 fcc7 	bl	8005700 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002d72:	f002 ff81 	bl	8005c78 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002d76:	f002 fdb7 	bl	80058e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d7a:	f002 fe25 	bl	80059c8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002d7e:	f002 ff51 	bl	8005c24 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002d82:	f002 ffa3 	bl	8005ccc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8002d86:	2209      	movs	r2, #9
 8002d88:	4975      	ldr	r1, [pc, #468]	; (8002f60 <main+0x218>)
 8002d8a:	4876      	ldr	r0, [pc, #472]	; (8002f64 <main+0x21c>)
 8002d8c:	f007 fea4 	bl	800aad8 <HAL_UART_Receive_DMA>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
 8002d90:	2201      	movs	r2, #1
 8002d92:	4975      	ldr	r1, [pc, #468]	; (8002f68 <main+0x220>)
 8002d94:	4875      	ldr	r0, [pc, #468]	; (8002f6c <main+0x224>)
 8002d96:	f007 fe9f 	bl	800aad8 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
  MPU6050_Baslat();
 8002d9a:	f000 f963 	bl	8003064 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8002d9e:	4874      	ldr	r0, [pc, #464]	; (8002f70 <main+0x228>)
 8002da0:	f7ff fa18 	bl	80021d4 <bmp_init>
  HMC5883L_initialize();
 8002da4:	f7fe f9f0 	bl	8001188 <HMC5883L_initialize>
  MotorBaslat();
 8002da8:	f001 faea 	bl	8004380 <_Z11MotorBaslatv>
  GPSInit();
 8002dac:	f000 feae 	bl	8003b0c <_Z7GPSInitv>
  HAL_Delay(1000);
 8002db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db4:	f003 f9e6 	bl	8006184 <HAL_Delay>

  Ringbuf_init();
 8002db8:	f7fe ff0e 	bl	8001bd8 <Ringbuf_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8002dbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dc0:	f003 f9e0 	bl	8006184 <HAL_Delay>
  //EKF.roll_bias=GyroErr(GYRO_X_ADDR)/14.375; EKF.pitch_bias=-1*GyroErr(GYRO_Y_ADDR)/14.375;
  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8002dc4:	201d      	movs	r0, #29
 8002dc6:	f001 fa7f 	bl	80042c8 <_Z7GyroErrh>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <main+0x22c>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	201f      	movs	r0, #31
 8002dd2:	f001 fa79 	bl	80042c8 <_Z7GyroErrh>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <main+0x230>)
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	2021      	movs	r0, #33	; 0x21
 8002dde:	f001 fa73 	bl	80042c8 <_Z7GyroErrh>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a65      	ldr	r2, [pc, #404]	; (8002f7c <main+0x234>)
 8002de6:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8002de8:	2032      	movs	r0, #50	; 0x32
 8002dea:	f001 fa9b 	bl	8004324 <_Z6AccErrh>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb19 	bl	8000428 <__aeabi_f2d>
 8002df6:	a358      	add	r3, pc, #352	; (adr r3, 8002f58 <main+0x210>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fb6c 	bl	80004d8 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fd fe3e 	bl	8000a88 <__aeabi_d2f>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a5c      	ldr	r2, [pc, #368]	; (8002f80 <main+0x238>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2034      	movs	r0, #52	; 0x34
 8002e14:	f001 fa86 	bl	8004324 <_Z6AccErrh>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fb04 	bl	8000428 <__aeabi_f2d>
 8002e20:	a34d      	add	r3, pc, #308	; (adr r3, 8002f58 <main+0x210>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fb57 	bl	80004d8 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fe29 	bl	8000a88 <__aeabi_d2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <main+0x23c>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	2036      	movs	r0, #54	; 0x36
 8002e3e:	f001 fa71 	bl	8004324 <_Z6AccErrh>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd faef 	bl	8000428 <__aeabi_f2d>
 8002e4a:	a343      	add	r3, pc, #268	; (adr r3, 8002f58 <main+0x210>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f7fd fb42 	bl	80004d8 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fe14 	bl	8000a88 <__aeabi_d2f>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4a49      	ldr	r2, [pc, #292]	; (8002f88 <main+0x240>)
 8002e64:	6013      	str	r3, [r2, #0]
  //AccYh = 0.96009*AccYh - 0.42592*AccXh + 0.0091315*AccZh + 0.042165;
  //AccZh = 0.0091315*AccYh - 0.072464*AccXh + 0.98549*AccZh + 0.08443;

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002e66:	2032      	movs	r0, #50	; 0x32
 8002e68:	f000 ff06 	bl	8003c78 <_Z6AccOkuh>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd ff14 	bl	8000c9c <__aeabi_i2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4a45      	ldr	r2, [pc, #276]	; (8002f8c <main+0x244>)
 8002e78:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002e7a:	2034      	movs	r0, #52	; 0x34
 8002e7c:	f000 fefc 	bl	8003c78 <_Z6AccOkuh>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ff0a 	bl	8000c9c <__aeabi_i2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a41      	ldr	r2, [pc, #260]	; (8002f90 <main+0x248>)
 8002e8c:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 8002e8e:	2036      	movs	r0, #54	; 0x36
 8002e90:	f000 fef2 	bl	8003c78 <_Z6AccOkuh>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff00 	bl	8000c9c <__aeabi_i2f>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a3d      	ldr	r2, [pc, #244]	; (8002f94 <main+0x24c>)
 8002ea0:	6013      	str	r3, [r2, #0]

  ch[0] = 1500;
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <main+0x250>)
 8002ea4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ea8:	601a      	str	r2, [r3, #0]
  _ch[0] = 1500;
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <main+0x254>)
 8002eac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002eb0:	601a      	str	r2, [r3, #0]


	for(int i=1; i< CH_NUM; i++) {
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	dc0f      	bgt.n	8002edc <main+0x194>
		ch[i] = 1000;
 8002ebc:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <main+0x250>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		_ch[i] = 1000;
 8002ec8:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <main+0x254>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=1; i< CH_NUM; i++) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	e7ec      	b.n	8002eb6 <main+0x16e>
	}


	ch_init = true;
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <main+0x258>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]

	moving_median_create(&med_filter1, 3, 3);
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <main+0x25c>)
 8002ee8:	f002 fa44 	bl	8005374 <moving_median_create>
	moving_median_create(&med_filter2, 3, 3);
 8002eec:	2203      	movs	r2, #3
 8002eee:	2103      	movs	r1, #3
 8002ef0:	482d      	ldr	r0, [pc, #180]	; (8002fa8 <main+0x260>)
 8002ef2:	f002 fa3f 	bl	8005374 <moving_median_create>
	moving_median_create(&med_filter3, 3, 3);
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	2103      	movs	r1, #3
 8002efa:	482c      	ldr	r0, [pc, #176]	; (8002fac <main+0x264>)
 8002efc:	f002 fa3a 	bl	8005374 <moving_median_create>
	moving_median_create(&med_filter4, 3, 3);
 8002f00:	2203      	movs	r2, #3
 8002f02:	2103      	movs	r1, #3
 8002f04:	482a      	ldr	r0, [pc, #168]	; (8002fb0 <main+0x268>)
 8002f06:	f002 fa35 	bl	8005374 <moving_median_create>
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
  */

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8002f0a:	482a      	ldr	r0, [pc, #168]	; (8002fb4 <main+0x26c>)
 8002f0c:	f006 f918 	bl	8009140 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002f10:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <main+0x270>)
 8002f12:	f006 f8cb 	bl	80090ac <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f16:	2100      	movs	r1, #0
 8002f18:	4828      	ldr	r0, [pc, #160]	; (8002fbc <main+0x274>)
 8002f1a:	f006 f9b3 	bl	8009284 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002f1e:	2104      	movs	r1, #4
 8002f20:	4826      	ldr	r0, [pc, #152]	; (8002fbc <main+0x274>)
 8002f22:	f007 fadf 	bl	800a4e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002f26:	2108      	movs	r1, #8
 8002f28:	4824      	ldr	r0, [pc, #144]	; (8002fbc <main+0x274>)
 8002f2a:	f007 fadb 	bl	800a4e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002f2e:	210c      	movs	r1, #12
 8002f30:	4822      	ldr	r0, [pc, #136]	; (8002fbc <main+0x274>)
 8002f32:	f006 f9a7 	bl	8009284 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002f36:	2108      	movs	r1, #8
 8002f38:	481f      	ldr	r0, [pc, #124]	; (8002fb8 <main+0x270>)
 8002f3a:	f006 fa9d 	bl	8009478 <HAL_TIM_IC_Start_IT>

	char end_char = 0x01;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8002f42:	1cfb      	adds	r3, r7, #3
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <main+0x224>)
 8002f4a:	f007 fd59 	bl	800aa00 <HAL_UART_Transmit_DMA>
	tx_type = package;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <main+0x278>)
 8002f50:	2202      	movs	r2, #2
 8002f52:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002f54:	e7fe      	b.n	8002f54 <main+0x20c>
 8002f56:	bf00      	nop
 8002f58:	8e8a71de 	.word	0x8e8a71de
 8002f5c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002f60:	20001620 	.word	0x20001620
 8002f64:	200019a4 	.word	0x200019a4
 8002f68:	2000165c 	.word	0x2000165c
 8002f6c:	200019e4 	.word	0x200019e4
 8002f70:	200015c8 	.word	0x200015c8
 8002f74:	200008e8 	.word	0x200008e8
 8002f78:	200008ec 	.word	0x200008ec
 8002f7c:	200008f0 	.word	0x200008f0
 8002f80:	200008f4 	.word	0x200008f4
 8002f84:	200008f8 	.word	0x200008f8
 8002f88:	200008fc 	.word	0x200008fc
 8002f8c:	200008c4 	.word	0x200008c4
 8002f90:	200008c8 	.word	0x200008c8
 8002f94:	200008cc 	.word	0x200008cc
 8002f98:	20001510 	.word	0x20001510
 8002f9c:	20001568 	.word	0x20001568
 8002fa0:	20001658 	.word	0x20001658
 8002fa4:	200016bc 	.word	0x200016bc
 8002fa8:	200016d0 	.word	0x200016d0
 8002fac:	200016e4 	.word	0x200016e4
 8002fb0:	200016f8 	.word	0x200016f8
 8002fb4:	20001850 	.word	0x20001850
 8002fb8:	200017c0 	.word	0x200017c0
 8002fbc:	20001808 	.word	0x20001808
 8002fc0:	2000166c 	.word	0x2000166c

08002fc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fca:	f107 0318 	add.w	r3, r7, #24
 8002fce:	2228      	movs	r2, #40	; 0x28
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f010 f8c4 	bl	8013160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003002:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003008:	f107 0318 	add.w	r3, r7, #24
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fbe3 	bl	80087d8 <HAL_RCC_OscConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003022:	f002 f967 	bl	80052f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003026:	230f      	movs	r3, #15
 8003028:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302a:	2302      	movs	r3, #2
 800302c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2102      	movs	r1, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f005 fe49 	bl	8008cd8 <HAL_RCC_ClockConfig>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8003056:	f002 f94d 	bl	80052f4 <Error_Handler>
  }
}
 800305a:	bf00      	nop
 800305c:	3740      	adds	r7, #64	; 0x40
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800306e:	2305      	movs	r3, #5
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	2301      	movs	r3, #1
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	223e      	movs	r2, #62	; 0x3e
 800307e:	21d0      	movs	r1, #208	; 0xd0
 8003080:	4826      	ldr	r0, [pc, #152]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 8003082:	f004 fb9d 	bl	80077c0 <HAL_I2C_Mem_Write>
	config = 0x18;
 8003086:	2318      	movs	r3, #24
 8003088:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 800308a:	2305      	movs	r3, #5
 800308c:	9302      	str	r3, [sp, #8]
 800308e:	2301      	movs	r3, #1
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	2216      	movs	r2, #22
 800309a:	21d0      	movs	r1, #208	; 0xd0
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 800309e:	f004 fb8f 	bl	80077c0 <HAL_I2C_Mem_Write>
	config = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80030a6:	2305      	movs	r3, #5
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2301      	movs	r3, #1
 80030b4:	222d      	movs	r2, #45	; 0x2d
 80030b6:	21a6      	movs	r1, #166	; 0xa6
 80030b8:	4818      	ldr	r0, [pc, #96]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 80030ba:	f004 fb81 	bl	80077c0 <HAL_I2C_Mem_Write>
	config = 0x08;
 80030be:	2308      	movs	r3, #8
 80030c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80030c2:	2305      	movs	r3, #5
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	2301      	movs	r3, #1
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2301      	movs	r3, #1
 80030d0:	222d      	movs	r2, #45	; 0x2d
 80030d2:	21a6      	movs	r1, #166	; 0xa6
 80030d4:	4811      	ldr	r0, [pc, #68]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 80030d6:	f004 fb73 	bl	80077c0 <HAL_I2C_Mem_Write>
	config = 0x0D;
 80030da:	230d      	movs	r3, #13
 80030dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80030de:	2305      	movs	r3, #5
 80030e0:	9302      	str	r3, [sp, #8]
 80030e2:	2301      	movs	r3, #1
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2301      	movs	r3, #1
 80030ec:	222c      	movs	r2, #44	; 0x2c
 80030ee:	21a6      	movs	r1, #166	; 0xa6
 80030f0:	480a      	ldr	r0, [pc, #40]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 80030f2:	f004 fb65 	bl	80077c0 <HAL_I2C_Mem_Write>
	config = 0x01;
 80030f6:	2301      	movs	r3, #1
 80030f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80030fa:	2305      	movs	r3, #5
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	2301      	movs	r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2301      	movs	r3, #1
 8003108:	2231      	movs	r2, #49	; 0x31
 800310a:	21a6      	movs	r1, #166	; 0xa6
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <_Z14MPU6050_Baslatv+0xb8>)
 800310e:	f004 fb57 	bl	80077c0 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20001724 	.word	0x20001724

08003120 <_Z8MagCalibsss>:

}

#endif

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
 800312a:	460b      	mov	r3, r1
 800312c:	80bb      	strh	r3, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 8003132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f964 	bl	8000404 <__aeabi_i2d>
 800313c:	a366      	add	r3, pc, #408	; (adr r3, 80032d8 <_Z8MagCalibsss+0x1b8>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd f9c9 	bl	80004d8 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4614      	mov	r4, r2
 800314c:	461d      	mov	r5, r3
 800314e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f956 	bl	8000404 <__aeabi_i2d>
 8003158:	a361      	add	r3, pc, #388	; (adr r3, 80032e0 <_Z8MagCalibsss+0x1c0>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f7fd f9bb 	bl	80004d8 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fc ffff 	bl	800016c <__adddf3>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4614      	mov	r4, r2
 8003174:	461d      	mov	r5, r3
 8003176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f942 	bl	8000404 <__aeabi_i2d>
 8003180:	a359      	add	r3, pc, #356	; (adr r3, 80032e8 <_Z8MagCalibsss+0x1c8>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd f9a7 	bl	80004d8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fc ffe9 	bl	8000168 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <_Z8MagCalibsss+0x1f8>)
 80031a4:	f7fc ffe2 	bl	800016c <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fc42 	bl	8000a38 <__aeabi_d2iz>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b21a      	sxth	r2, r3
 80031b8:	4b58      	ldr	r3, [pc, #352]	; (800331c <_Z8MagCalibsss+0x1fc>)
 80031ba:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 80031bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f91f 	bl	8000404 <__aeabi_i2d>
 80031c6:	a346      	add	r3, pc, #280	; (adr r3, 80032e0 <_Z8MagCalibsss+0x1c0>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fd f984 	bl	80004d8 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f911 	bl	8000404 <__aeabi_i2d>
 80031e2:	a343      	add	r3, pc, #268	; (adr r3, 80032f0 <_Z8MagCalibsss+0x1d0>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd f976 	bl	80004d8 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fc ffba 	bl	800016c <__adddf3>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f8fd 	bl	8000404 <__aeabi_i2d>
 800320a:	a33b      	add	r3, pc, #236	; (adr r3, 80032f8 <_Z8MagCalibsss+0x1d8>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd f962 	bl	80004d8 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4620      	mov	r0, r4
 800321a:	4629      	mov	r1, r5
 800321c:	f7fc ffa6 	bl	800016c <__adddf3>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	a335      	add	r3, pc, #212	; (adr r3, 8003300 <_Z8MagCalibsss+0x1e0>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fc ff9d 	bl	800016c <__adddf3>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fbfd 	bl	8000a38 <__aeabi_d2iz>
 800323e:	4603      	mov	r3, r0
 8003240:	b21a      	sxth	r2, r3
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <_Z8MagCalibsss+0x200>)
 8003244:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 8003246:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f8da 	bl	8000404 <__aeabi_i2d>
 8003250:	a329      	add	r3, pc, #164	; (adr r3, 80032f8 <_Z8MagCalibsss+0x1d8>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd f93f 	bl	80004d8 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4614      	mov	r4, r2
 8003260:	461d      	mov	r5, r3
 8003262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f8cc 	bl	8000404 <__aeabi_i2d>
 800326c:	a31e      	add	r3, pc, #120	; (adr r3, 80032e8 <_Z8MagCalibsss+0x1c8>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd f931 	bl	80004d8 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f7fc ff73 	bl	8000168 <__aeabi_dsub>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4614      	mov	r4, r2
 8003288:	461d      	mov	r5, r3
 800328a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f8b8 	bl	8000404 <__aeabi_i2d>
 8003294:	a31c      	add	r3, pc, #112	; (adr r3, 8003308 <_Z8MagCalibsss+0x1e8>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fd f91d 	bl	80004d8 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4620      	mov	r0, r4
 80032a4:	4629      	mov	r1, r5
 80032a6:	f7fc ff61 	bl	800016c <__adddf3>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	a317      	add	r3, pc, #92	; (adr r3, 8003310 <_Z8MagCalibsss+0x1f0>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fc ff56 	bl	8000168 <__aeabi_dsub>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fbb8 	bl	8000a38 <__aeabi_d2iz>
 80032c8:	4603      	mov	r3, r0
 80032ca:	b21a      	sxth	r2, r3
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_Z8MagCalibsss+0x204>)
 80032ce:	801a      	strh	r2, [r3, #0]
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}
 80032d8:	4189374c 	.word	0x4189374c
 80032dc:	3feee560 	.word	0x3feee560
 80032e0:	3dee7818 	.word	0x3dee7818
 80032e4:	3f8c725c 	.word	0x3f8c725c
 80032e8:	f861a60d 	.word	0xf861a60d
 80032ec:	3f929888 	.word	0x3f929888
 80032f0:	3c361134 	.word	0x3c361134
 80032f4:	3fee52bd 	.word	0x3fee52bd
 80032f8:	a6ce3583 	.word	0xa6ce3583
 80032fc:	3f7b8023 	.word	0x3f7b8023
 8003300:	33333333 	.word	0x33333333
 8003304:	4059d333 	.word	0x4059d333
 8003308:	24dd2f1b 	.word	0x24dd2f1b
 800330c:	3ff18106 	.word	0x3ff18106
 8003310:	e353f7cf 	.word	0xe353f7cf
 8003314:	40211ba5 	.word	0x40211ba5
 8003318:	40300000 	.word	0x40300000
 800331c:	20001652 	.word	0x20001652
 8003320:	20001654 	.word	0x20001654
 8003324:	20001656 	.word	0x20001656

08003328 <_Z9checkModei>:

void checkMode(int mod_ch) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003336:	da1f      	bge.n	8003378 <_Z9checkModei+0x50>

		  controller.mod = STABILIZE;
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <_Z9checkModei+0x88>)
 800333a:	2200      	movs	r2, #0
 800333c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  controller.z0 = EKF.alt_gnd;
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <_Z9checkModei+0x8c>)
 8003342:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003346:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <_Z9checkModei+0x88>)
 8003348:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		  controller.x0 = EKF.x;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <_Z9checkModei+0x8c>)
 800334e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <_Z9checkModei+0x88>)
 8003354:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		  controller.y0 = EKF.y;
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <_Z9checkModei+0x8c>)
 800335a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <_Z9checkModei+0x88>)
 8003360:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
		  controller.p_alt.reset();
 8003364:	4814      	ldr	r0, [pc, #80]	; (80033b8 <_Z9checkModei+0x90>)
 8003366:	f00d fc0f 	bl	8010b88 <_ZN3PID5resetEv>
		  controller.p_velx.reset();
 800336a:	4814      	ldr	r0, [pc, #80]	; (80033bc <_Z9checkModei+0x94>)
 800336c:	f00d fc0c 	bl	8010b88 <_ZN3PID5resetEv>
		  controller.p_vely.reset();
 8003370:	4813      	ldr	r0, [pc, #76]	; (80033c0 <_Z9checkModei+0x98>)
 8003372:	f00d fc09 	bl	8010b88 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 8003376:	e016      	b.n	80033a6 <_Z9checkModei+0x7e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800337e:	db0e      	blt.n	800339e <_Z9checkModei+0x76>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003386:	4293      	cmp	r3, r2
 8003388:	dc09      	bgt.n	800339e <_Z9checkModei+0x76>
		  controller.mod = STABILIZE;
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <_Z9checkModei+0x88>)
 800338c:	2200      	movs	r2, #0
 800338e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <_Z9checkModei+0x88>)
 8003394:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <_Z9checkModei+0x9c>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	e003      	b.n	80033a6 <_Z9checkModei+0x7e>
		  controller.mod = STABILIZE;
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <_Z9checkModei+0x88>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000eb0 	.word	0x20000eb0
 80033b4:	20000b70 	.word	0x20000b70
 80033b8:	200012b0 	.word	0x200012b0
 80033bc:	20001368 	.word	0x20001368
 80033c0:	20001420 	.word	0x20001420
 80033c4:	20001604 	.word	0x20001604

080033c8 <_Z9SwitchMagv>:

void SwitchMag() {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0

	char state;

	// determine which state is the switch on
	if		(ch[MAGNET_CH-1] > 750  && ch[MAGNET_CH-1] < 1250) state = 0;
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <_Z9SwitchMagv+0xc4>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80033d6:	4293      	cmp	r3, r2
 80033d8:	dd08      	ble.n	80033ec <_Z9SwitchMagv+0x24>
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <_Z9SwitchMagv+0xc4>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80033e2:	4293      	cmp	r3, r2
 80033e4:	dc02      	bgt.n	80033ec <_Z9SwitchMagv+0x24>
 80033e6:	2300      	movs	r3, #0
 80033e8:	71fb      	strb	r3, [r7, #7]
 80033ea:	e01f      	b.n	800342c <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1250 && ch[MAGNET_CH-1] < 1750) state = 1;
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <_Z9SwitchMagv+0xc4>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80033f4:	4293      	cmp	r3, r2
 80033f6:	dd08      	ble.n	800340a <_Z9SwitchMagv+0x42>
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <_Z9SwitchMagv+0xc4>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8003400:	4293      	cmp	r3, r2
 8003402:	dc02      	bgt.n	800340a <_Z9SwitchMagv+0x42>
 8003404:	2301      	movs	r3, #1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	e010      	b.n	800342c <_Z9SwitchMagv+0x64>
	else if (ch[MAGNET_CH-1] > 1750 && ch[MAGNET_CH-1] < 2250) state = 2;
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <_Z9SwitchMagv+0xc4>)
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8003412:	4293      	cmp	r3, r2
 8003414:	dd08      	ble.n	8003428 <_Z9SwitchMagv+0x60>
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <_Z9SwitchMagv+0xc4>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800341e:	4293      	cmp	r3, r2
 8003420:	dc02      	bgt.n	8003428 <_Z9SwitchMagv+0x60>
 8003422:	2302      	movs	r3, #2
 8003424:	71fb      	strb	r3, [r7, #7]
 8003426:	e001      	b.n	800342c <_Z9SwitchMagv+0x64>
	else state = -1;
 8003428:	23ff      	movs	r3, #255	; 0xff
 800342a:	71fb      	strb	r3, [r7, #7]
	// change magnet state based on state of switch
	// state = 0 -> off
	// state = 1 -> attach
	// state = 2 -> separate

	switch(state) {
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d017      	beq.n	8003462 <_Z9SwitchMagv+0x9a>
 8003432:	2b02      	cmp	r3, #2
 8003434:	dc20      	bgt.n	8003478 <_Z9SwitchMagv+0xb0>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <_Z9SwitchMagv+0x78>
 800343a:	2b01      	cmp	r3, #1
 800343c:	d006      	beq.n	800344c <_Z9SwitchMagv+0x84>
 800343e:	e01b      	b.n	8003478 <_Z9SwitchMagv+0xb0>
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	2130      	movs	r1, #48	; 0x30
 8003444:	4812      	ldr	r0, [pc, #72]	; (8003490 <_Z9SwitchMagv+0xc8>)
 8003446:	f003 fd01 	bl	8006e4c <HAL_GPIO_WritePin>
		break;
 800344a:	e01b      	b.n	8003484 <_Z9SwitchMagv+0xbc>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800344c:	2201      	movs	r2, #1
 800344e:	2110      	movs	r1, #16
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <_Z9SwitchMagv+0xc8>)
 8003452:	f003 fcfb 	bl	8006e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003456:	2200      	movs	r2, #0
 8003458:	2120      	movs	r1, #32
 800345a:	480d      	ldr	r0, [pc, #52]	; (8003490 <_Z9SwitchMagv+0xc8>)
 800345c:	f003 fcf6 	bl	8006e4c <HAL_GPIO_WritePin>
		break;
 8003460:	e010      	b.n	8003484 <_Z9SwitchMagv+0xbc>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003462:	2200      	movs	r2, #0
 8003464:	2110      	movs	r1, #16
 8003466:	480a      	ldr	r0, [pc, #40]	; (8003490 <_Z9SwitchMagv+0xc8>)
 8003468:	f003 fcf0 	bl	8006e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800346c:	2201      	movs	r2, #1
 800346e:	2120      	movs	r1, #32
 8003470:	4807      	ldr	r0, [pc, #28]	; (8003490 <_Z9SwitchMagv+0xc8>)
 8003472:	f003 fceb 	bl	8006e4c <HAL_GPIO_WritePin>
		break;
 8003476:	e005      	b.n	8003484 <_Z9SwitchMagv+0xbc>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	2130      	movs	r1, #48	; 0x30
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <_Z9SwitchMagv+0xc8>)
 800347e:	f003 fce5 	bl	8006e4c <HAL_GPIO_WritePin>
		break;
 8003482:	bf00      	nop
	}
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20001510 	.word	0x20001510
 8003490:	40010800 	.word	0x40010800

08003494 <_Z10CheckSwarmv>:

void CheckSwarm() {
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8003498:	4b18      	ldr	r3, [pc, #96]	; (80034fc <_Z10CheckSwarmv+0x68>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034a0:	4293      	cmp	r3, r2
 80034a2:	dd14      	ble.n	80034ce <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <_Z10CheckSwarmv+0x6c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d024      	beq.n	80034f6 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <_Z10CheckSwarmv+0x6c>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <_Z10CheckSwarmv+0x70>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 80034ba:	4813      	ldr	r0, [pc, #76]	; (8003508 <_Z10CheckSwarmv+0x74>)
 80034bc:	f00d fb64 	bl	8010b88 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80034c0:	4812      	ldr	r0, [pc, #72]	; (800350c <_Z10CheckSwarmv+0x78>)
 80034c2:	f00d fb61 	bl	8010b88 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80034c6:	4812      	ldr	r0, [pc, #72]	; (8003510 <_Z10CheckSwarmv+0x7c>)
 80034c8:	f00d fb5e 	bl	8010b88 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 80034cc:	e013      	b.n	80034f6 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <_Z10CheckSwarmv+0x6c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <_Z10CheckSwarmv+0x70>)
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <_Z10CheckSwarmv+0x6c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <_Z10CheckSwarmv+0x74>)
 80034e6:	f00d fb4f 	bl	8010b88 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80034ea:	4808      	ldr	r0, [pc, #32]	; (800350c <_Z10CheckSwarmv+0x78>)
 80034ec:	f00d fb4c 	bl	8010b88 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80034f0:	4807      	ldr	r0, [pc, #28]	; (8003510 <_Z10CheckSwarmv+0x7c>)
 80034f2:	f00d fb49 	bl	8010b88 <_ZN3PID5resetEv>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20001510 	.word	0x20001510
 8003500:	2000166d 	.word	0x2000166d
 8003504:	20000eb0 	.word	0x20000eb0
 8003508:	20001088 	.word	0x20001088
 800350c:	20001140 	.word	0x20001140
 8003510:	200011f8 	.word	0x200011f8

08003514 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 8003514:	b598      	push	{r3, r4, r7, lr}
 8003516:	af00      	add	r7, sp, #0

	if(armed) {
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <_Z13CheckFailsafev+0xa4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d048      	beq.n	80035b2 <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <_Z13CheckFailsafev+0xa8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f240 32c9 	movw	r2, #969	; 0x3c9
 8003528:	4293      	cmp	r3, r2
 800352a:	dc0d      	bgt.n	8003548 <_Z13CheckFailsafev+0x34>
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <_Z13CheckFailsafev+0xac>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <_Z13CheckFailsafev+0xac>)
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <_Z13CheckFailsafev+0xb0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <_Z13CheckFailsafev+0xb4>)
 8003546:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <_Z13CheckFailsafev+0xb8>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003550:	d226      	bcs.n	80035a0 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <_Z13CheckFailsafev+0xac>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02b      	beq.n	80035b2 <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <_Z13CheckFailsafev+0xb0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <_Z13CheckFailsafev+0xb4>)
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fae3 	bl	8000b30 <__aeabi_fsub>
 800356a:	4603      	mov	r3, r0
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fb5f 	bl	8002c30 <_ZSt3absf>
 8003572:	4603      	mov	r3, r0
 8003574:	2201      	movs	r2, #1
 8003576:	4614      	mov	r4, r2
 8003578:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fd7f 	bl	8001080 <__aeabi_fcmplt>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <_Z13CheckFailsafev+0x78>
 8003588:	2300      	movs	r3, #0
 800358a:	461c      	mov	r4, r3
 800358c:	b2e3      	uxtb	r3, r4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00f      	beq.n	80035b2 <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <_Z13CheckFailsafev+0xb8>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <_Z13CheckFailsafev+0xb8>)
 800359c:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 800359e:	e008      	b.n	80035b2 <_Z13CheckFailsafev+0x9e>
			armed = false;
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <_Z13CheckFailsafev+0xa4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <_Z13CheckFailsafev+0xac>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <_Z13CheckFailsafev+0xb8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	801a      	strh	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	bd98      	pop	{r3, r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200015a5 	.word	0x200015a5
 80035bc:	20001510 	.word	0x20001510
 80035c0:	20001666 	.word	0x20001666
 80035c4:	200008d0 	.word	0x200008d0
 80035c8:	20001668 	.word	0x20001668
 80035cc:	20001664 	.word	0x20001664

080035d0 <_Z9Check_Armv>:


void Check_Arm() {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
	if(!armed) {
 80035d4:	4b28      	ldr	r3, [pc, #160]	; (8003678 <_Z9Check_Armv+0xa8>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	f083 0301 	eor.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d047      	beq.n	8003672 <_Z9Check_Armv+0xa2>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <_Z9Check_Armv+0xac>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f240 424b 	movw	r2, #1099	; 0x44b
 80035ea:	4293      	cmp	r3, r2
 80035ec:	dc3d      	bgt.n	800366a <_Z9Check_Armv+0x9a>
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <_Z9Check_Armv+0xac>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80035f6:	4293      	cmp	r3, r2
 80035f8:	dd37      	ble.n	800366a <_Z9Check_Armv+0x9a>
				if(!arm_start){
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <_Z9Check_Armv+0xb0>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8003608:	f002 fdb2 	bl	8006170 <HAL_GetTick>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <_Z9Check_Armv+0xb4>)
 8003612:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <_Z9Check_Armv+0xb0>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800361a:	f002 fda9 	bl	8006170 <HAL_GetTick>
 800361e:	4603      	mov	r3, r0
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <_Z9Check_Armv+0xb4>)
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800362a:	4293      	cmp	r3, r2
 800362c:	bf8c      	ite	hi
 800362e:	2301      	movhi	r3, #1
 8003630:	2300      	movls	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <_Z9Check_Armv+0xa2>
					controller.pid_roll.reset();
 8003638:	4813      	ldr	r0, [pc, #76]	; (8003688 <_Z9Check_Armv+0xb8>)
 800363a:	f00d faa5 	bl	8010b88 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 800363e:	4813      	ldr	r0, [pc, #76]	; (800368c <_Z9Check_Armv+0xbc>)
 8003640:	f00d faa2 	bl	8010b88 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8003644:	4812      	ldr	r0, [pc, #72]	; (8003690 <_Z9Check_Armv+0xc0>)
 8003646:	f00d fa9f 	bl	8010b88 <_ZN3PID5resetEv>
					armed = true;
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <_Z9Check_Armv+0xa8>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <_Z9Check_Armv+0xc4>)
 8003652:	2201      	movs	r2, #1
 8003654:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					SetHome2();
 8003658:	f000 ff1e 	bl	8004498 <_Z8SetHome2v>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800365c:	2201      	movs	r2, #1
 800365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003662:	480d      	ldr	r0, [pc, #52]	; (8003698 <_Z9Check_Armv+0xc8>)
 8003664:	f003 fbf2 	bl	8006e4c <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8003668:	e003      	b.n	8003672 <_Z9Check_Armv+0xa2>
				}

		}

		else {
			arm_start = false;
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <_Z9Check_Armv+0xb0>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8003670:	e7ff      	b.n	8003672 <_Z9Check_Armv+0xa2>
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200015a5 	.word	0x200015a5
 800367c:	20001510 	.word	0x20001510
 8003680:	200015a4 	.word	0x200015a4
 8003684:	20001598 	.word	0x20001598
 8003688:	20001088 	.word	0x20001088
 800368c:	20001140 	.word	0x20001140
 8003690:	200011f8 	.word	0x200011f8
 8003694:	20000b70 	.word	0x20000b70
 8003698:	40010800 	.word	0x40010800

0800369c <_Z12Check_Disarmv>:

void Check_Disarm() {
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
	if(armed) {
 80036a0:	4b21      	ldr	r3, [pc, #132]	; (8003728 <_Z12Check_Disarmv+0x8c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <_Z12Check_Disarmv+0x90>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f240 424b 	movw	r2, #1099	; 0x44b
 80036b0:	4293      	cmp	r3, r2
 80036b2:	dc32      	bgt.n	800371a <_Z12Check_Disarmv+0x7e>
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <_Z12Check_Disarmv+0x90>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f240 424b 	movw	r2, #1099	; 0x44b
 80036bc:	4293      	cmp	r3, r2
 80036be:	dc2c      	bgt.n	800371a <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <_Z12Check_Disarmv+0x94>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f083 0301 	eor.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80036ce:	f002 fd4f 	bl	8006170 <HAL_GetTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <_Z12Check_Disarmv+0x98>)
 80036d8:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <_Z12Check_Disarmv+0x94>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80036e0:	f002 fd46 	bl	8006170 <HAL_GetTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <_Z12Check_Disarmv+0x98>)
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036f0:	4293      	cmp	r3, r2
 80036f2:	bf8c      	ite	hi
 80036f4:	2301      	movhi	r3, #1
 80036f6:	2300      	movls	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d011      	beq.n	8003722 <_Z12Check_Disarmv+0x86>
					armed = false;
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <_Z12Check_Disarmv+0x8c>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <_Z12Check_Disarmv+0x9c>)
 8003706:	2200      	movs	r2, #0
 8003708:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003712:	480a      	ldr	r0, [pc, #40]	; (800373c <_Z12Check_Disarmv+0xa0>)
 8003714:	f003 fb9a 	bl	8006e4c <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8003718:	e003      	b.n	8003722 <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <_Z12Check_Disarmv+0x94>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003720:	e7ff      	b.n	8003722 <_Z12Check_Disarmv+0x86>
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200015a5 	.word	0x200015a5
 800372c:	20001510 	.word	0x20001510
 8003730:	200015a6 	.word	0x200015a6
 8003734:	2000159c 	.word	0x2000159c
 8003738:	20000b70 	.word	0x20000b70
 800373c:	40010800 	.word	0x40010800

08003740 <_Z9TelemPackv>:

void TelemPack() {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8003744:	4ba1      	ldr	r3, [pc, #644]	; (80039cc <_Z9TelemPackv+0x28c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4aa1      	ldr	r2, [pc, #644]	; (80039d0 <_Z9TelemPackv+0x290>)
 800374a:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 800374c:	4b9f      	ldr	r3, [pc, #636]	; (80039cc <_Z9TelemPackv+0x28c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a9f      	ldr	r2, [pc, #636]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003752:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8003754:	4b9d      	ldr	r3, [pc, #628]	; (80039cc <_Z9TelemPackv+0x28c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a9d      	ldr	r2, [pc, #628]	; (80039d0 <_Z9TelemPackv+0x290>)
 800375a:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 800375c:	4b9d      	ldr	r3, [pc, #628]	; (80039d4 <_Z9TelemPackv+0x294>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b9b      	ldr	r3, [pc, #620]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003764:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8003766:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <_Z9TelemPackv+0x294>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b29a      	uxth	r2, r3
 800376c:	4b98      	ldr	r3, [pc, #608]	; (80039d0 <_Z9TelemPackv+0x290>)
 800376e:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8003770:	4b98      	ldr	r3, [pc, #608]	; (80039d4 <_Z9TelemPackv+0x294>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b96      	ldr	r3, [pc, #600]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003778:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 800377a:	4b96      	ldr	r3, [pc, #600]	; (80039d4 <_Z9TelemPackv+0x294>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	b29a      	uxth	r2, r3
 8003780:	4b93      	ldr	r3, [pc, #588]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 8003784:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003786:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800378a:	4a91      	ldr	r2, [pc, #580]	; (80039d0 <_Z9TelemPackv+0x290>)
 800378c:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 800378e:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003790:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8003794:	4a8e      	ldr	r2, [pc, #568]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003796:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 8003798:	4b90      	ldr	r3, [pc, #576]	; (80039dc <_Z9TelemPackv+0x29c>)
 800379a:	f993 3000 	ldrsb.w	r3, [r3]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fa7c 	bl	8000c9c <__aeabi_i2f>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037a8:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <_Z9TelemPackv+0x28c>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a88      	ldr	r2, [pc, #544]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037b0:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80037b2:	4b86      	ldr	r3, [pc, #536]	; (80039cc <_Z9TelemPackv+0x28c>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	4a86      	ldr	r2, [pc, #536]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037b8:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80037ba:	4b84      	ldr	r3, [pc, #528]	; (80039cc <_Z9TelemPackv+0x28c>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4a84      	ldr	r2, [pc, #528]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037c0:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80037c2:	4b87      	ldr	r3, [pc, #540]	; (80039e0 <_Z9TelemPackv+0x2a0>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a82      	ldr	r2, [pc, #520]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037c8:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80037ca:	4b85      	ldr	r3, [pc, #532]	; (80039e0 <_Z9TelemPackv+0x2a0>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037d0:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 80037d2:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80037d4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80037d8:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037da:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 80037dc:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80037de:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80037e2:	4a7b      	ldr	r2, [pc, #492]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037e4:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 80037e6:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80037e8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80037ec:	4a78      	ldr	r2, [pc, #480]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037ee:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80037f0:	4b7c      	ldr	r3, [pc, #496]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80037f2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80037f6:	4a76      	ldr	r2, [pc, #472]	; (80039d0 <_Z9TelemPackv+0x290>)
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 80037fa:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80037fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003800:	4a73      	ldr	r2, [pc, #460]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003802:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 8003804:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003806:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800380a:	4a71      	ldr	r2, [pc, #452]	; (80039d0 <_Z9TelemPackv+0x290>)
 800380c:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800380e:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003810:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003814:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003816:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8003818:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 800381a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800381e:	4a6c      	ldr	r2, [pc, #432]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003820:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003824:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003828:	4a69      	ldr	r2, [pc, #420]	; (80039d0 <_Z9TelemPackv+0x290>)
 800382a:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <_Z9TelemPackv+0x298>)
 800382e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8003832:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003834:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8003836:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003838:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800383c:	4a64      	ldr	r2, [pc, #400]	; (80039d0 <_Z9TelemPackv+0x290>)
 800383e:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8003840:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003842:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8003846:	4a62      	ldr	r2, [pc, #392]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003848:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <_Z9TelemPackv+0x298>)
 800384c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8003850:	4a5f      	ldr	r2, [pc, #380]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003852:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8003854:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003856:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800385a:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <_Z9TelemPackv+0x290>)
 800385c:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 800385e:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <_Z9TelemPackv+0x298>)
 8003860:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8003864:	4a5a      	ldr	r2, [pc, #360]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8003868:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <_Z9TelemPackv+0x298>)
 800386a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800386e:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003870:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003874:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003878:	4a55      	ldr	r2, [pc, #340]	; (80039d0 <_Z9TelemPackv+0x290>)
 800387a:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 800387e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8003882:	4a53      	ldr	r2, [pc, #332]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 800388a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800388e:	4a50      	ldr	r2, [pc, #320]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8003894:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <_Z9TelemPackv+0x2a8>)
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <_Z9TelemPackv+0x290>)
 800389a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 800389e:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <_Z9TelemPackv+0x2a8>)
 80038a0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038a8:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <_Z9TelemPackv+0x2a8>)
 80038ae:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80038b2:	b21a      	sxth	r2, r3
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038b6:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 80038ba:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <_Z9TelemPackv+0x2a8>)
 80038bc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038c4:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 80038c8:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80038ca:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80038ce:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80038d6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 80038e0:	4b40      	ldr	r3, [pc, #256]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80038e2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 80038ec:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80038ee:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80038f2:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <_Z9TelemPackv+0x290>)
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <_Z9TelemPackv+0x298>)
 80038fa:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003900:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 8003902:	f002 fc35 	bl	8006170 <HAL_GetTick>
 8003906:	4603      	mov	r3, r0
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <_Z9TelemPackv+0x290>)
 800390a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXc;
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <_Z9TelemPackv+0x2ac>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003914:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYc;
 8003918:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <_Z9TelemPackv+0x2b0>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <_Z9TelemPackv+0x290>)
 800391e:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <_Z9TelemPackv+0x2b4>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003928:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 800392c:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <_Z9TelemPackv+0x2b8>)
 800392e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003934:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <_Z9TelemPackv+0x2bc>)
 800393a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003940:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <_Z9TelemPackv+0x2c0>)
 8003946:	f9b3 2000 	ldrsh.w	r2, [r3]
 800394a:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <_Z9TelemPackv+0x290>)
 800394c:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.lla.x = gpsData.ggastruct.lcation.latitude;
 8003950:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <_Z9TelemPackv+0x2c4>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003956:	f8c3 20b7 	str.w	r2, [r3, #183]	; 0xb7
	  telem_pack.gps.lla.y = gpsData.ggastruct.lcation.longitude;
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <_Z9TelemPackv+0x2c4>)
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003960:	f8c3 20bb 	str.w	r2, [r3, #187]	; 0xbb

	  telem_pack.gps.pos_body.x = EKF.xbody;
 8003964:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003966:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <_Z9TelemPackv+0x290>)
 800396c:	f8c3 20cf 	str.w	r2, [r3, #207]	; 0xcf
	  telem_pack.gps.pos_body.y = EKF.ybody;
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003972:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003978:	f8c3 20d3 	str.w	r2, [r3, #211]	; 0xd3

	  telem_pack.gps.pos_ned.x = EKF.xned;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 800397e:	f8d3 22b4 	ldr.w	r2, [r3, #692]	; 0x2b4
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003984:	f8c3 20c3 	str.w	r2, [r3, #195]	; 0xc3
	  telem_pack.gps.pos_ned.y = EKF.yned;
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 800398a:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <_Z9TelemPackv+0x290>)
 8003990:	f8c3 20c7 	str.w	r2, [r3, #199]	; 0xc7

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 8003996:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <_Z9TelemPackv+0x290>)
 800399c:	f8c3 20db 	str.w	r2, [r3, #219]	; 0xdb
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <_Z9TelemPackv+0x2a4>)
 80039a2:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <_Z9TelemPackv+0x290>)
 80039a8:	f8c3 20df 	str.w	r2, [r3, #223]	; 0xdf

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <_Z9TelemPackv+0x2c8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <_Z9TelemPackv+0x290>)
 80039b4:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <_Z9TelemPackv+0x2c8>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <_Z9TelemPackv+0x290>)
 80039c0:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <_Z9TelemPackv+0x2c8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	e01f      	b.n	8003a0c <_Z9TelemPackv+0x2cc>
 80039cc:	2000093c 	.word	0x2000093c
 80039d0:	20000960 	.word	0x20000960
 80039d4:	200014e0 	.word	0x200014e0
 80039d8:	20000eb0 	.word	0x20000eb0
 80039dc:	2000166e 	.word	0x2000166e
 80039e0:	20000918 	.word	0x20000918
 80039e4:	20000b70 	.word	0x20000b70
 80039e8:	2000162c 	.word	0x2000162c
 80039ec:	200008d0 	.word	0x200008d0
 80039f0:	200008d4 	.word	0x200008d4
 80039f4:	200008e4 	.word	0x200008e4
 80039f8:	20001652 	.word	0x20001652
 80039fc:	20001654 	.word	0x20001654
 8003a00:	20001656 	.word	0x20001656
 8003a04:	20001674 	.word	0x20001674
 8003a08:	20001510 	.word	0x20001510
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a0e:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a1a:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a26:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a32:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8003a36:	4b21      	ldr	r3, [pc, #132]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a3e:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a4a:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a56:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a62:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <_Z9TelemPackv+0x37c>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a6e:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <_Z9TelemPackv+0x380>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a7a:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <_Z9TelemPackv+0x380>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a86:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <_Z9TelemPackv+0x380>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a92:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <_Z9TelemPackv+0x380>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003a9e:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <_Z9TelemPackv+0x384>)
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <_Z9TelemPackv+0x378>)
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f240 1305 	movw	r3, #261	; 0x105
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f00f fb48 	bl	8013144 <memcpy>
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000960 	.word	0x20000960
 8003abc:	20001510 	.word	0x20001510
 8003ac0:	200014f0 	.word	0x200014f0
 8003ac4:	20000a68 	.word	0x20000a68

08003ac8 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af04      	add	r7, sp, #16
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	9302      	str	r3, [sp, #8]
 8003ada:	2302      	movs	r3, #2
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	21d1      	movs	r1, #209	; 0xd1
 8003ae8:	4807      	ldr	r0, [pc, #28]	; (8003b08 <_Z7GyroOkuh+0x40>)
 8003aea:	f003 ff63 	bl	80079b4 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8003aee:	7b3b      	ldrb	r3, [r7, #12]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	7b7b      	ldrb	r3, [r7, #13]
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20001724 	.word	0x20001724

08003b0c <_Z7GPSInitv>:

void GPSInit() {
 8003b0c:	b5b0      	push	{r4, r5, r7, lr}
 8003b0e:	b08e      	sub	sp, #56	; 0x38
 8003b10:	af00      	add	r7, sp, #0
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 8003b12:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <_Z7GPSInitv+0x94>)
 8003b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b1a:	c303      	stmia	r3!, {r0, r1}
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	0c12      	lsrs	r2, r2, #16
 8003b22:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Disable_GPGSV, 11, 100);
 8003b24:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003b28:	2364      	movs	r3, #100	; 0x64
 8003b2a:	220b      	movs	r2, #11
 8003b2c:	481d      	ldr	r0, [pc, #116]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b2e:	f006 fed5 	bl	800a8dc <HAL_UART_Transmit>
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <_Z7GPSInitv+0x9c>)
 8003b34:	f107 041c 	add.w	r4, r7, #28
 8003b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b3a:	c407      	stmia	r4!, {r0, r1, r2}
 8003b3c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_5Hz, 14, 100);
 8003b3e:	f107 011c 	add.w	r1, r7, #28
 8003b42:	2364      	movs	r3, #100	; 0x64
 8003b44:	220e      	movs	r2, #14
 8003b46:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b48:	f006 fec8 	bl	800a8dc <HAL_UART_Transmit>
	uint8_t Set_to_115[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7E};
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <_Z7GPSInitv+0xa0>)
 8003b4e:	463c      	mov	r4, r7
 8003b50:	461d      	mov	r5, r3
 8003b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t*)Set_to_115, 28, 100);
 8003b5e:	4639      	mov	r1, r7
 8003b60:	2364      	movs	r3, #100	; 0x64
 8003b62:	221c      	movs	r2, #28
 8003b64:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b66:	f006 feb9 	bl	800a8dc <HAL_UART_Transmit>


    HAL_UART_Abort_IT(&huart3);
 8003b6a:	480e      	ldr	r0, [pc, #56]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b6c:	f007 f834 	bl	800abd8 <HAL_UART_Abort_IT>

    HAL_UART_DeInit(&huart3);
 8003b70:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b72:	f006 fe87 	bl	800a884 <HAL_UART_DeInit>

    huart3.Init.BaudRate = 115200;
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b7c:	605a      	str	r2, [r3, #4]

    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8003b7e:	4809      	ldr	r0, [pc, #36]	; (8003ba4 <_Z7GPSInitv+0x98>)
 8003b80:	f006 fe33 	bl	800a7ea <HAL_UART_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <_Z7GPSInitv+0x8c>
        Error_Handler();
 8003b94:	f001 fbae 	bl	80052f4 <Error_Handler>
    }


}
 8003b98:	bf00      	nop
 8003b9a:	3738      	adds	r7, #56	; 0x38
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	0801431c 	.word	0x0801431c
 8003ba4:	200018dc 	.word	0x200018dc
 8003ba8:	08014328 	.word	0x08014328
 8003bac:	08014338 	.word	0x08014338

08003bb0 <_Z7pwm2angt>:

float pwm2ang(unsigned short int pwm) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8003bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc2:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003bc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bc8:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 8003bca:	f06f 0313 	mvn.w	r3, #19
 8003bce:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8003bd0:	2314      	movs	r3, #20
 8003bd2:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8003bd4:	88fa      	ldrh	r2, [r7, #6]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8003bdc:	3304      	adds	r3, #4
 8003bde:	429a      	cmp	r2, r3
 8003be0:	dd09      	ble.n	8003bf6 <_Z7pwm2angt+0x46>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	db03      	blt.n	8003bf6 <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8003bee:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003bf2:	83fb      	strh	r3, [r7, #30]
 8003bf4:	e001      	b.n	8003bfa <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003bfa:	8bfa      	ldrh	r2, [r7, #30]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	1a8a      	subs	r2, r1, r2
 8003c06:	fb02 f203 	mul.w	r2, r2, r3
 8003c0a:	6939      	ldr	r1, [r7, #16]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1acb      	subs	r3, r1, r3
 8003c10:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd f83f 	bl	8000c9c <__aeabi_i2f>
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8003c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c36:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8003c38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c3c:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8003c3e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003c42:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8003c44:	2364      	movs	r3, #100	; 0x64
 8003c46:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	1a8a      	subs	r2, r1, r2
 8003c54:	fb02 f203 	mul.w	r2, r2, r3
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1acb      	subs	r3, r1, r3
 8003c5e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	425b      	negs	r3, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd f817 	bl	8000c9c <__aeabi_i2f>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af04      	add	r7, sp, #16
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	2301      	movs	r3, #1
 8003c88:	9302      	str	r3, [sp, #8]
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2301      	movs	r3, #1
 8003c96:	21a7      	movs	r1, #167	; 0xa7
 8003c98:	4807      	ldr	r0, [pc, #28]	; (8003cb8 <_Z6AccOkuh+0x40>)
 8003c9a:	f003 fe8b 	bl	80079b4 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8003c9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	7b3b      	ldrb	r3, [r7, #12]
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8003cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20001724 	.word	0x20001724

08003cbc <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fc fb9d 	bl	8000404 <__aeabi_i2d>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f00d fae5 	bl	80112a0 <sqrt>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b08e      	sub	sp, #56	; 0x38
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8003cf0:	4bc6      	ldr	r3, [pc, #792]	; (800400c <_Z9DCM2EulerPsS_+0x328>)
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d02:	fb03 f202 	mul.w	r2, r3, r2
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3302      	adds	r3, #2
 8003d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d18:	fb03 f301 	mul.w	r3, r3, r1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3304      	adds	r3, #4
 8003d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d26:	4619      	mov	r1, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d30:	fb03 f301 	mul.w	r3, r3, r1
 8003d34:	4413      	add	r3, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ffc0 	bl	8003cbc <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fc fea0 	bl	8000a88 <__aeabi_d2f>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3302      	adds	r3, #2
 8003d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5c:	fb03 f302 	mul.w	r3, r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	3202      	adds	r2, #2
 8003d64:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d68:	fb02 f203 	mul.w	r2, r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d72:	4619      	mov	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3302      	adds	r3, #2
 8003d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d7c:	fb03 f301 	mul.w	r3, r3, r1
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	3102      	adds	r1, #2
 8003d84:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d94:	4619      	mov	r1, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d9e:	fb03 f301 	mul.w	r3, r3, r1
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	3104      	adds	r1, #4
 8003da6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	441a      	add	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db6:	4619      	mov	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc0:	fb03 f301 	mul.w	r3, r3, r1
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	3104      	adds	r1, #4
 8003dc8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ff62 	bl	8000c9c <__aeabi_i2f>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3302      	adds	r3, #2
 8003de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3302      	adds	r3, #2
 8003df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df6:	4619      	mov	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfe:	fb03 f301 	mul.w	r3, r3, r1
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc ff49 	bl	8000c9c <__aeabi_i2f>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f9d3 	bl	80041b8 <_Z6squaref>
 8003e12:	4605      	mov	r5, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e24:	fb03 f202 	mul.w	r2, r3, r2
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e30:	4619      	mov	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e38:	fb03 f301 	mul.w	r3, r3, r1
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc ff2c 	bl	8000c9c <__aeabi_i2f>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f9b6 	bl	80041b8 <_Z6squaref>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4628      	mov	r0, r5
 8003e52:	f7fc fe6f 	bl	8000b34 <__addsf3>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461d      	mov	r5, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e62:	461a      	mov	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6c:	fb03 f202 	mul.w	r2, r3, r2
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3304      	adds	r3, #4
 8003e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e82:	fb03 f301 	mul.w	r3, r3, r1
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc ff07 	bl	8000c9c <__aeabi_i2f>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f991 	bl	80041b8 <_Z6squaref>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f7fc fe4a 	bl	8000b34 <__addsf3>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fef6 	bl	8002c94 <_ZSt4sqrtf>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc ff49 	bl	8000d44 <__aeabi_fmul>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fc fff8 	bl	8000eac <__aeabi_fdiv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed2:	fb03 f202 	mul.w	r2, r3, r2
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee8:	fb03 f301 	mul.w	r3, r3, r1
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fed4 	bl	8000c9c <__aeabi_i2f>
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3302      	adds	r3, #2
 8003f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f06:	fb03 f202 	mul.w	r2, r3, r2
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f12:	4619      	mov	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f1a:	fb03 f301 	mul.w	r3, r3, r1
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc febb 	bl	8000c9c <__aeabi_i2f>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f945 	bl	80041b8 <_Z6squaref>
 8003f2e:	4605      	mov	r5, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f40:	fb03 f202 	mul.w	r2, r3, r2
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3304      	adds	r3, #4
 8003f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f54:	fb03 f301 	mul.w	r3, r3, r1
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fe9e 	bl	8000c9c <__aeabi_i2f>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f928 	bl	80041b8 <_Z6squaref>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f7fc fde1 	bl	8000b34 <__addsf3>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461d      	mov	r5, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f88:	fb03 f202 	mul.w	r2, r3, r2
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f94:	4619      	mov	r1, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f9e:	fb03 f301 	mul.w	r3, r3, r1
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fe79 	bl	8000c9c <__aeabi_i2f>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f903 	bl	80041b8 <_Z6squaref>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f7fc fdbc 	bl	8000b34 <__addsf3>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fe68 	bl	8002c94 <_ZSt4sqrtf>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7fc ff6f 	bl	8000eac <__aeabi_fdiv>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd8:	425b      	negs	r3, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fe5e 	bl	8000c9c <__aeabi_i2f>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc ff61 	bl	8000eac <__aeabi_fdiv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	425b      	negs	r3, r3
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fe4f 	bl	8000c9c <__aeabi_i2f>
 8003ffe:	4603      	mov	r3, r0
 8004000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc ff52 	bl	8000eac <__aeabi_fdiv>
 8004008:	4603      	mov	r3, r0
 800400a:	e001      	b.n	8004010 <_Z9DCM2EulerPsS_+0x32c>
 800400c:	42654ca3 	.word	0x42654ca3
 8004010:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3304      	adds	r3, #4
 8004016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401a:	425b      	negs	r3, r3
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fe3d 	bl	8000c9c <__aeabi_i2f>
 8004022:	4603      	mov	r3, r0
 8004024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc ff40 	bl	8000eac <__aeabi_fdiv>
 800402c:	4603      	mov	r3, r0
 800402e:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fe06 	bl	8002c48 <_ZSt4asinf>
 800403c:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 800403e:	69b8      	ldr	r0, [r7, #24]
 8004040:	f7fe fb0e 	bl	8002660 <_ZSt3cosf>
 8004044:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800404a:	f7fc fe7b 	bl	8000d44 <__aeabi_fmul>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	6a38      	ldr	r0, [r7, #32]
 800405a:	f7fc ff27 	bl	8000eac <__aeabi_fdiv>
 800405e:	4603      	mov	r3, r0
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fdfd 	bl	8002c60 <_ZSt4atanf>
 8004066:	4603      	mov	r3, r0
 8004068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fe6a 	bl	8000d44 <__aeabi_fmul>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407c:	f7fc ff16 	bl	8000eac <__aeabi_fdiv>
 8004080:	4603      	mov	r3, r0
 8004082:	461c      	mov	r4, r3
 8004084:	6979      	ldr	r1, [r7, #20]
 8004086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004088:	f7fc ff10 	bl	8000eac <__aeabi_fdiv>
 800408c:	4603      	mov	r3, r0
 800408e:	4619      	mov	r1, r3
 8004090:	4620      	mov	r0, r4
 8004092:	f7fe fdf1 	bl	8002c78 <_ZSt5atan2ff>
 8004096:	4603      	mov	r3, r0
 8004098:	4619      	mov	r1, r3
 800409a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800409c:	f7fc fe52 	bl	8000d44 <__aeabi_fmul>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 80040a4:	6938      	ldr	r0, [r7, #16]
 80040a6:	f7fd f829 	bl	80010fc <__aeabi_f2iz>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 80040b0:	da23      	bge.n	80040fa <_Z9DCM2EulerPsS_+0x416>
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f7fd f822 	bl	80010fc <__aeabi_f2iz>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80040be:	db1c      	blt.n	80040fa <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80040c0:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d04b      	beq.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <_Z9DCM2EulerPsS_+0x4c8>)
 80040ca:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc ffd4 	bl	8001080 <__aeabi_fcmplt>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <_Z9DCM2EulerPsS_+0x3fc>
 80040de:	e03f      	b.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <_Z9DCM2EulerPsS_+0x4cc>)
 80040e2:	f993 3000 	ldrsb.w	r3, [r3]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <_Z9DCM2EulerPsS_+0x4cc>)
 80040f0:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80040f8:	e032      	b.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80040fa:	6938      	ldr	r0, [r7, #16]
 80040fc:	f7fc fffe 	bl	80010fc <__aeabi_f2iz>
 8004100:	4603      	mov	r3, r0
 8004102:	2baf      	cmp	r3, #175	; 0xaf
 8004104:	dd22      	ble.n	800414c <_Z9DCM2EulerPsS_+0x468>
 8004106:	6938      	ldr	r0, [r7, #16]
 8004108:	f7fc fff8 	bl	80010fc <__aeabi_f2iz>
 800410c:	4603      	mov	r3, r0
 800410e:	2bb4      	cmp	r3, #180	; 0xb4
 8004110:	dc1c      	bgt.n	800414c <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 8004112:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d022      	beq.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <_Z9DCM2EulerPsS_+0x4c8>)
 800411c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc ffc9 	bl	80010bc <__aeabi_fcmpgt>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <_Z9DCM2EulerPsS_+0x44e>
 8004130:	e016      	b.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004134:	f993 3000 	ldrsb.w	r3, [r3]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b25a      	sxtb	r2, r3
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004142:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 800414a:	e009      	b.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <_Z9DCM2EulerPsS_+0x4d0>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	2b32      	cmp	r3, #50	; 0x32
 8004152:	d905      	bls.n	8004160 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <_Z9DCM2EulerPsS_+0x4d0>)
 800415c:	2200      	movs	r2, #0
 800415e:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <_Z9DCM2EulerPsS_+0x4c4>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d005      	beq.n	8004174 <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8004168:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <_Z9DCM2EulerPsS_+0x4d0>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <_Z9DCM2EulerPsS_+0x4d0>)
 8004172:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <_Z9DCM2EulerPsS_+0x4cc>)
 8004176:	f993 3000 	ldrsb.w	r3, [r3]
 800417a:	461a      	mov	r2, r3
 800417c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004180:	fb03 f302 	mul.w	r3, r3, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc fd89 	bl	8000c9c <__aeabi_i2f>
 800418a:	4603      	mov	r3, r0
 800418c:	4619      	mov	r1, r3
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f7fc fcd0 	bl	8000b34 <__addsf3>
 8004194:	4603      	mov	r3, r0
 8004196:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 800419e:	bf00      	nop

}
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	3738      	adds	r7, #56	; 0x38
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bdb0      	pop	{r4, r5, r7, pc}
 80041a8:	20000001 	.word	0x20000001
 80041ac:	20000b70 	.word	0x20000b70
 80041b0:	2000166e 	.word	0x2000166e
 80041b4:	20001670 	.word	0x20001670

080041b8 <_Z6squaref>:

float square(float x) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	float y = x*x;
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fdbe 	bl	8000d44 <__aeabi_fmul>
 80041c8:	4603      	mov	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]
	return y;
 80041cc:	68fb      	ldr	r3, [r7, #12]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <_Z6PWMYazv>:

void PWMYaz() {
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <_Z6PWMYazv+0xdc>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d04f      	beq.n	8004284 <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 80041e4:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <_Z6PWMYazv+0xe0>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d014      	beq.n	8004216 <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <_Z6PWMYazv+0xe4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f240 5214 	movw	r2, #1300	; 0x514
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <_Z6PWMYazv+0xe4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f240 5214 	movw	r2, #1300	; 0x514
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 8004200:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f240 5214 	movw	r2, #1300	; 0x514
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 800420a:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <_Z6PWMYazv+0xe4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f240 5214 	movw	r2, #1300	; 0x514
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 8004214:	e04a      	b.n	80042ac <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8004216:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <_Z6PWMYazv+0xe8>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f240 52db 	movw	r2, #1499	; 0x5db
 800421e:	4293      	cmp	r3, r2
 8004220:	dc1b      	bgt.n	800425a <_Z6PWMYazv+0x82>
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <_Z6PWMYazv+0xe8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f240 424c 	movw	r2, #1100	; 0x44c
 800422a:	4293      	cmp	r3, r2
 800422c:	dd15      	ble.n	800425a <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 800422e:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <_Z6PWMYazv+0xec>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <_Z6PWMYazv+0xec>)
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <_Z6PWMYazv+0xe4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <_Z6PWMYazv+0xec>)
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <_Z6PWMYazv+0xec>)
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
 8004256:	bf00      	nop
}
 8004258:	e028      	b.n	80042ac <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <_Z6PWMYazv+0xe4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004262:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <_Z6PWMYazv+0xe4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004282:	e013      	b.n	80042ac <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800428c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <_Z6PWMYazv+0xe4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <_Z6PWMYazv+0xe4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <_Z6PWMYazv+0xe4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	200015a5 	.word	0x200015a5
 80042b8:	20001666 	.word	0x20001666
 80042bc:	20001808 	.word	0x20001808
 80042c0:	20001510 	.word	0x20001510
 80042c4:	200014e0 	.word	0x200014e0

080042c8 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042e2:	da12      	bge.n	800430a <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fbee 	bl	8003ac8 <_Z7GyroOkuh>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc fcd4 	bl	8000c9c <__aeabi_i2f>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4619      	mov	r1, r3
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7fc fc1b 	bl	8000b34 <__addsf3>
 80042fe:	4603      	mov	r3, r0
 8004300:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3301      	adds	r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	e7e8      	b.n	80042dc <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800430a:	4905      	ldr	r1, [pc, #20]	; (8004320 <_Z7GyroErrh+0x58>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7fc fdcd 	bl	8000eac <__aeabi_fdiv>
 8004312:	4603      	mov	r3, r0
 8004314:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	44fa0000 	.word	0x44fa0000

08004324 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800433e:	da12      	bge.n	8004366 <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fc98 	bl	8003c78 <_Z6AccOkuh>
 8004348:	4603      	mov	r3, r0
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fca6 	bl	8000c9c <__aeabi_i2f>
 8004350:	4603      	mov	r3, r0
 8004352:	4619      	mov	r1, r3
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7fc fbed 	bl	8000b34 <__addsf3>
 800435a:	4603      	mov	r3, r0
 800435c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	e7e8      	b.n	8004338 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 8004366:	4905      	ldr	r1, [pc, #20]	; (800437c <_Z6AccErrh+0x58>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7fc fd9f 	bl	8000eac <__aeabi_fdiv>
 800436e:	4603      	mov	r3, r0
 8004370:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8004372:	68fb      	ldr	r3, [r7, #12]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	44fa0000 	.word	0x44fa0000

08004380 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <_Z11MotorBaslatv+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <_Z11MotorBaslatv+0x38>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <_Z11MotorBaslatv+0x38>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <_Z11MotorBaslatv+0x38>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80043ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043b0:	f001 fee8 	bl	8006184 <HAL_Delay>
}
 80043b4:	bf00      	nop
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20001808 	.word	0x20001808

080043bc <_Z7SetHomev>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void SetHome() {
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
	home_counter++;
 80043c0:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <_Z7SetHomev+0xc4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a2e      	ldr	r2, [pc, #184]	; (8004480 <_Z7SetHomev+0xc4>)
 80043c8:	6013      	str	r3, [r2, #0]
	if(home_counter != 11) {
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <_Z7SetHomev+0xc4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b0b      	cmp	r3, #11
 80043d0:	d024      	beq.n	800441c <_Z7SetHomev+0x60>
		lla0_mean[0]  += gpsData.ggastruct.lcation.latitude;
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <_Z7SetHomev+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <_Z7SetHomev+0xcc>)
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc fba9 	bl	8000b34 <__addsf3>
 80043e2:	4603      	mov	r3, r0
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <_Z7SetHomev+0xc8>)
 80043e8:	601a      	str	r2, [r3, #0]
		lla0_mean[1] += gpsData.ggastruct.lcation.longitude;
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <_Z7SetHomev+0xc8>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a26      	ldr	r2, [pc, #152]	; (8004488 <_Z7SetHomev+0xcc>)
 80043f0:	6892      	ldr	r2, [r2, #8]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fb9d 	bl	8000b34 <__addsf3>
 80043fa:	4603      	mov	r3, r0
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <_Z7SetHomev+0xc8>)
 8004400:	605a      	str	r2, [r3, #4]
		lla0_mean[2] += gpsData.ggastruct.alt.altitude;
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <_Z7SetHomev+0xc8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4a20      	ldr	r2, [pc, #128]	; (8004488 <_Z7SetHomev+0xcc>)
 8004408:	6a12      	ldr	r2, [r2, #32]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fb91 	bl	8000b34 <__addsf3>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <_Z7SetHomev+0xc8>)
 8004418:	609a      	str	r2, [r3, #8]
		lla0_mean[2] = 0;

		home = true;
	}

}
 800441a:	e02f      	b.n	800447c <_Z7SetHomev+0xc0>
		home_counter = 0;
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <_Z7SetHomev+0xc4>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
		lla0[0] = lla0_mean[0]/10;
 8004422:	4b18      	ldr	r3, [pc, #96]	; (8004484 <_Z7SetHomev+0xc8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4919      	ldr	r1, [pc, #100]	; (800448c <_Z7SetHomev+0xd0>)
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fd3f 	bl	8000eac <__aeabi_fdiv>
 800442e:	4603      	mov	r3, r0
 8004430:	461a      	mov	r2, r3
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <_Z7SetHomev+0xd4>)
 8004434:	601a      	str	r2, [r3, #0]
		lla0[1] = lla0_mean[1]/10;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <_Z7SetHomev+0xc8>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4914      	ldr	r1, [pc, #80]	; (800448c <_Z7SetHomev+0xd0>)
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fd35 	bl	8000eac <__aeabi_fdiv>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <_Z7SetHomev+0xd4>)
 8004448:	605a      	str	r2, [r3, #4]
		lla0[2] = lla0_mean[2]/10;
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <_Z7SetHomev+0xc8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	490f      	ldr	r1, [pc, #60]	; (800448c <_Z7SetHomev+0xd0>)
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc fd2b 	bl	8000eac <__aeabi_fdiv>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <_Z7SetHomev+0xd4>)
 800445c:	609a      	str	r2, [r3, #8]
		lla0_mean[0] = 0;
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <_Z7SetHomev+0xc8>)
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
		lla0_mean[1] = 0;
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <_Z7SetHomev+0xc8>)
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	605a      	str	r2, [r3, #4]
		lla0_mean[2] = 0;
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <_Z7SetHomev+0xc8>)
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
		home = true;
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <_Z7SetHomev+0xd8>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000161c 	.word	0x2000161c
 8004484:	2000090c 	.word	0x2000090c
 8004488:	20001674 	.word	0x20001674
 800448c:	41200000 	.word	0x41200000
 8004490:	20000900 	.word	0x20000900
 8004494:	2000160c 	.word	0x2000160c

08004498 <_Z8SetHome2v>:

void SetHome2() {
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
		lla0[0] = gpsData.ggastruct.lcation.latitude;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <_Z8SetHome2v+0x2c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <_Z8SetHome2v+0x30>)
 80044a2:	6013      	str	r3, [r2, #0]
		lla0[1] = gpsData.ggastruct.lcation.longitude;
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <_Z8SetHome2v+0x2c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <_Z8SetHome2v+0x30>)
 80044aa:	6053      	str	r3, [r2, #4]
		lla0[2] = gpsData.ggastruct.alt.altitude;
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_Z8SetHome2v+0x2c>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <_Z8SetHome2v+0x30>)
 80044b2:	6093      	str	r3, [r2, #8]

		home = true;
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_Z8SetHome2v+0x34>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20001674 	.word	0x20001674
 80044c8:	20000900 	.word	0x20000900
 80044cc:	2000160c 	.word	0x2000160c

080044d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80044d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d2:	b0ad      	sub	sp, #180	; 0xb4
 80044d4:	af0c      	add	r7, sp, #48	; 0x30
 80044d6:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	f040 862e 	bne.w	800513e <HAL_TIM_PeriodElapsedCallback+0xc6e>
		//1.25 ms || 800 Hz
		  Check_Arm();
 80044e2:	f7ff f875 	bl	80035d0 <_Z9Check_Armv>
		  Check_Disarm();
 80044e6:	f7ff f8d9 	bl	800369c <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 80044ea:	2014      	movs	r0, #20
 80044ec:	f7fe fb10 	bl	8002b10 <set_ucounter>
		set_b_counter(12);
 80044f0:	200c      	movs	r0, #12
 80044f2:	f7fe f89b 	bl	800262c <set_b_counter>

		controller_counter++;
 80044f6:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	4b97      	ldr	r3, [pc, #604]	; (800475c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004500:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	4b95      	ldr	r3, [pc, #596]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800450c:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 800450e:	4b95      	ldr	r3, [pc, #596]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	4b93      	ldr	r3, [pc, #588]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004518:	801a      	strh	r2, [r3, #0]
		gps_counter++;
 800451a:	4b93      	ldr	r3, [pc, #588]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	4b91      	ldr	r3, [pc, #580]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004524:	801a      	strh	r2, [r3, #0]
#ifdef UAV1
		if(gps_counter == GPS_CLOCK_RATE) {
 8004526:	4b90      	ldr	r3, [pc, #576]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	2b28      	cmp	r3, #40	; 0x28
 800452c:	f040 808d 	bne.w	800464a <HAL_TIM_PeriodElapsedCallback+0x17a>
			gps_counter = 0;
 8004530:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004532:	2200      	movs	r2, #0
 8004534:	801a      	strh	r2, [r3, #0]
			getGPSData(&gpsData);
 8004536:	488d      	ldr	r0, [pc, #564]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004538:	f7fd faee 	bl	8001b18 <getGPSData>
			EKF.gps_fixed = gpsData.ggastruct.isfixValid;
 800453c:	4b8b      	ldr	r3, [pc, #556]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b89      	ldr	r3, [pc, #548]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800454c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			if(!home && gpsData.ggastruct.isfixValid) {
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_TIM_PeriodElapsedCallback+0x9a>
 800455e:	4b83      	ldr	r3, [pc, #524]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_TIM_PeriodElapsedCallback+0x9a>
				SetHome();
 8004566:	f7ff ff29 	bl	80043bc <_Z7SetHomev>
			}

			if(home) {
 800456a:	4b82      	ldr	r3, [pc, #520]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d06b      	beq.n	800464a <HAL_TIM_PeriodElapsedCallback+0x17a>

				float lla[3];
				float ecef[3];
				float ecef0[3];

				lla[0] = gpsData.ggastruct.lcation.latitude;
 8004572:	4b7e      	ldr	r3, [pc, #504]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
				lla[1] = gpsData.ggastruct.lcation.longitude;
 8004578:	4b7c      	ldr	r3, [pc, #496]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
				lla[2] = gpsData.ggastruct.alt.altitude;
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	657b      	str	r3, [r7, #84]	; 0x54

				lla2ecef(lla, ecef);
 8004584:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004588:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe f87e 	bl	8002690 <_Z8lla2ecefPfS_>
				lla2ecef(lla0, ecef0);
 8004594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004598:	4619      	mov	r1, r3
 800459a:	4877      	ldr	r0, [pc, #476]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800459c:	f7fe f878 	bl	8002690 <_Z8lla2ecefPfS_>

				float vned[2];
				ecef2ned(ecef, ecef0, lla0, vned);
 80045a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80045a8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80045ac:	4a72      	ldr	r2, [pc, #456]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80045ae:	f7fe f925 	bl	80027fc <_Z8ecef2nedPfS_S_S_>

				EKF.xned = vned[0];
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80045b6:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
				EKF.yned = vned[1];
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	4a6c      	ldr	r2, [pc, #432]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80045be:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
				EKF.v_ground = gpsData.rmcstruct.speed * 0.514444444; //Knot to m/s
 80045c2:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fb ff2e 	bl	8000428 <__aeabi_f2d>
 80045cc:	a360      	add	r3, pc, #384	; (adr r3, 8004750 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fb ff81 	bl	80004d8 <__aeabi_dmul>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	f7fc fa53 	bl	8000a88 <__aeabi_d2f>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4a62      	ldr	r2, [pc, #392]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80045e6:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc

				float deg2rad = M_PI/180.0;
 80045ea:	4b64      	ldr	r3, [pc, #400]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80045ec:	67fb      	str	r3, [r7, #124]	; 0x7c
				EKF.vgpsxned = EKF.v_ground * cos(gpsData.rmcstruct.course * deg2rad);
 80045ee:	4b60      	ldr	r3, [pc, #384]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80045f0:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 80045f4:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fba2 	bl	8000d44 <__aeabi_fmul>
 8004600:	4603      	mov	r3, r0
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe f82c 	bl	8002660 <_ZSt3cosf>
 8004608:	4603      	mov	r3, r0
 800460a:	4619      	mov	r1, r3
 800460c:	4620      	mov	r0, r4
 800460e:	f7fc fb99 	bl	8000d44 <__aeabi_fmul>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
				EKF.vgpsyned = EKF.v_ground * sin(gpsData.rmcstruct.course * deg2rad);
 800461c:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800461e:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 8004622:	4b52      	ldr	r3, [pc, #328]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fb8b 	bl	8000d44 <__aeabi_fmul>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe f821 	bl	8002678 <_ZSt3sinf>
 8004636:	4603      	mov	r3, r0
 8004638:	4619      	mov	r1, r3
 800463a:	4620      	mov	r0, r4
 800463c:	f7fc fb82 	bl	8000d44 <__aeabi_fmul>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004646:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

		//else {
		//	EKF.Qgps = 400 * gpsData.ggastruct.HDOP;
		//}

		if(mag_counter == MAG_CLOCK_RATE) {
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	2b04      	cmp	r3, #4
 8004650:	d146      	bne.n	80046e0 <HAL_TIM_PeriodElapsedCallback+0x210>
			mag_counter = 0;
 8004652:	4b44      	ldr	r3, [pc, #272]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004654:	2200      	movs	r2, #0
 8004656:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 8004658:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800465a:	494a      	ldr	r1, [pc, #296]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800465c:	484a      	ldr	r0, [pc, #296]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800465e:	f7fc fdfd 	bl	800125c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 8004662:	4b49      	ldr	r3, [pc, #292]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004668:	4a46      	ldr	r2, [pc, #280]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800466a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800466e:	4a44      	ldr	r2, [pc, #272]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004670:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fd53 	bl	8003120 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 800467a:	4b44      	ldr	r3, [pc, #272]	; (800478c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800467c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004680:	84bb      	strh	r3, [r7, #36]	; 0x24
			mag[1] = MAG_Y_CALIB;
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004688:	84fb      	strh	r3, [r7, #38]	; 0x26
			mag[2] = MAG_Z_CALIB;
 800468a:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800468c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004690:	853b      	strh	r3, [r7, #40]	; 0x28

			int16_t acc[3];
			acc[0] = accX;
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc fd30 	bl	80010fc <__aeabi_f2iz>
 800469c:	4603      	mov	r3, r0
 800469e:	b21b      	sxth	r3, r3
 80046a0:	83bb      	strh	r3, [r7, #28]
			acc[1] = accY;
 80046a2:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fd28 	bl	80010fc <__aeabi_f2iz>
 80046ac:	4603      	mov	r3, r0
 80046ae:	b21b      	sxth	r3, r3
 80046b0:	83fb      	strh	r3, [r7, #30]
			acc[2] = accZ;
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fd20 	bl	80010fc <__aeabi_f2iz>
 80046bc:	4603      	mov	r3, r0
 80046be:	b21b      	sxth	r3, r3
 80046c0:	843b      	strh	r3, [r7, #32]
			euler_angles = DCM2Euler(acc, mag);
 80046c2:	4c38      	ldr	r4, [pc, #224]	; (80047a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80046c4:	463b      	mov	r3, r7
 80046c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80046ca:	f107 011c 	add.w	r1, r7, #28
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fb08 	bl	8003ce4 <_Z9DCM2EulerPsS_>
 80046d4:	4623      	mov	r3, r4
 80046d6:	463a      	mov	r2, r7
 80046d8:	6810      	ldr	r0, [r2, #0]
 80046da:	6851      	ldr	r1, [r2, #4]
 80046dc:	6892      	ldr	r2, [r2, #8]
 80046de:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 80046e0:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	2b28      	cmp	r3, #40	; 0x28
 80046e6:	d125      	bne.n	8004734 <HAL_TIM_PeriodElapsedCallback+0x264>
			  camera_counter = 0;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80046f0:	4a2e      	ldr	r2, [pc, #184]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80046f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f4:	c303      	stmia	r3!, {r0, r1}
 80046f6:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80046fa:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80046fe:	b21b      	sxth	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	f7fc facb 	bl	8000c9c <__aeabi_i2f>
 8004706:	4603      	mov	r3, r0
 8004708:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fbce 	bl	8000eac <__aeabi_fdiv>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004716:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			  if(!cam_data.detected) {
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_TIM_PeriodElapsedCallback+0x25c>
				  EKF.Qc = 9e9;
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004724:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004726:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800472a:	e003      	b.n	8004734 <HAL_TIM_PeriodElapsedCallback+0x264>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 800472c:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800472e:	4a22      	ldr	r2, [pc, #136]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004730:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  }
		}

		if(get_ucounter() == 1) {
 8004734:	f7fe fa06 	bl	8002b44 <get_ucounter>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d039      	beq.n	80047bc <HAL_TIM_PeriodElapsedCallback+0x2ec>
			request_range();
 8004748:	f7fe f9a8 	bl	8002a9c <request_range>
 800474c:	e0f7      	b.n	800493e <HAL_TIM_PeriodElapsedCallback+0x46e>
 800474e:	bf00      	nop
 8004750:	31d2d84c 	.word	0x31d2d84c
 8004754:	3fe07654 	.word	0x3fe07654
 8004758:	20001850 	.word	0x20001850
 800475c:	200015c0 	.word	0x200015c0
 8004760:	200015c2 	.word	0x200015c2
 8004764:	200015c4 	.word	0x200015c4
 8004768:	200015c6 	.word	0x200015c6
 800476c:	20001674 	.word	0x20001674
 8004770:	20000b70 	.word	0x20000b70
 8004774:	2000160c 	.word	0x2000160c
 8004778:	20000900 	.word	0x20000900
 800477c:	3c8efa35 	.word	0x3c8efa35
 8004780:	20001650 	.word	0x20001650
 8004784:	2000164e 	.word	0x2000164e
 8004788:	2000164c 	.word	0x2000164c
 800478c:	20001652 	.word	0x20001652
 8004790:	20001654 	.word	0x20001654
 8004794:	20001656 	.word	0x20001656
 8004798:	200008c4 	.word	0x200008c4
 800479c:	200008c8 	.word	0x200008c8
 80047a0:	200008cc 	.word	0x200008cc
 80047a4:	20001638 	.word	0x20001638
 80047a8:	2000162c 	.word	0x2000162c
 80047ac:	20001620 	.word	0x20001620
 80047b0:	42c80000 	.word	0x42c80000
 80047b4:	50061c46 	.word	0x50061c46
 80047b8:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 80047bc:	f7fe f9c2 	bl	8002b44 <get_ucounter>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b14      	cmp	r3, #20
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80b6 	beq.w	800493e <HAL_TIM_PeriodElapsedCallback+0x46e>

		  sonar_range = getRange();
 80047d2:	f7fe f97d 	bl	8002ad0 <getRange>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461a      	mov	r2, r3
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80047dc:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 80047de:	4b6f      	ldr	r3, [pc, #444]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6f      	ldr	r2, [pc, #444]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80047e4:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 80047e6:	4b6f      	ldr	r3, [pc, #444]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6f      	ldr	r2, [pc, #444]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80047ec:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 80047ee:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	496f      	ldr	r1, [pc, #444]	; (80049b0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc faa5 	bl	8000d44 <__aeabi_fmul>
 80047fa:	4603      	mov	r3, r0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe fa17 	bl	8002c30 <_ZSt3absf>
 8004802:	67b8      	str	r0, [r7, #120]	; 0x78
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8004804:	4b69      	ldr	r3, [pc, #420]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4969      	ldr	r1, [pc, #420]	; (80049b0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fa9a 	bl	8000d44 <__aeabi_fmul>
 8004810:	4603      	mov	r3, r0
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fa0c 	bl	8002c30 <_ZSt3absf>
 8004818:	6778      	str	r0, [r7, #116]	; 0x74
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc fa38 	bl	8000c94 <__aeabi_ui2f>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb fdfe 	bl	8000428 <__aeabi_f2d>
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	4b60      	ldr	r3, [pc, #384]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8004832:	f7fb ff7b 	bl	800072c <__aeabi_ddiv>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4614      	mov	r4, r2
 800483c:	461d      	mov	r5, r3
 800483e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004840:	f7fd ff0e 	bl	8002660 <_ZSt3cosf>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fdee 	bl	8000428 <__aeabi_f2d>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4620      	mov	r0, r4
 8004852:	4629      	mov	r1, r5
 8004854:	f7fb fe40 	bl	80004d8 <__aeabi_dmul>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004862:	f7fd fefd 	bl	8002660 <_ZSt3cosf>
 8004866:	4603      	mov	r3, r0
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fddd 	bl	8000428 <__aeabi_f2d>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4620      	mov	r0, r4
 8004874:	4629      	mov	r1, r5
 8004876:	f7fb fe2f 	bl	80004d8 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	f7fc f901 	bl	8000a88 <__aeabi_d2f>
 8004886:	4603      	mov	r3, r0
 8004888:	4a44      	ldr	r2, [pc, #272]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 800488a:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 800488c:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8004890:	673b      	str	r3, [r7, #112]	; 0x70
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8004892:	4b42      	ldr	r3, [pc, #264]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc f947 	bl	8000b30 <__aeabi_fsub>
 80048a2:	4603      	mov	r3, r0
 80048a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fc fb00 	bl	8000eac <__aeabi_fdiv>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80048b2:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe f9b9 	bl	8002c30 <_ZSt3absf>
 80048be:	4603      	mov	r3, r0
 80048c0:	2201      	movs	r2, #1
 80048c2:	4614      	mov	r4, r2
 80048c4:	493c      	ldr	r1, [pc, #240]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc fbf8 	bl	80010bc <__aeabi_fcmpgt>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_PeriodElapsedCallback+0x406>
 80048d2:	2300      	movs	r3, #0
 80048d4:	461c      	mov	r4, r3
 80048d6:	b2e3      	uxtb	r3, r4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_PeriodElapsedCallback+0x41c>
			  sonar_alt = sonar_alt_;
 80048dc:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80048e2:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 80048e4:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2e      	ldr	r2, [pc, #184]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80048ea:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4932      	ldr	r1, [pc, #200]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fc fbe2 	bl	80010bc <__aeabi_fcmpgt>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <HAL_TIM_PeriodElapsedCallback+0x448>
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fb fd90 	bl	8000428 <__aeabi_f2d>
 8004908:	a321      	add	r3, pc, #132	; (adr r3, 8004990 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fc f855 	bl	80009bc <__aeabi_dcmplt>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_TIM_PeriodElapsedCallback+0x45a>
			  EKF.Qs = 9e9;
 8004918:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800491a:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800491c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 50;
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004922:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8004924:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8004928:	e009      	b.n	800493e <HAL_TIM_PeriodElapsedCallback+0x46e>
		  }

		  else {
			  EKF.Qs = 0.25;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800492c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004930:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
			  EKF.salt = 1;
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8004936:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800493a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		  }


		}

		if(get_b_counter() == 1) {
 800493e:	f7fd fe6b 	bl	8002618 <get_b_counter>
 8004942:	4603      	mov	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_TIM_PeriodElapsedCallback+0x488>
			write_ut();
 8004952:	f7fd fc61 	bl	8002218 <write_ut>
 8004956:	e069      	b.n	8004a2c <HAL_TIM_PeriodElapsedCallback+0x55c>
		}

		else if(get_b_counter() == 5) { //5 ms
 8004958:	f7fd fe5e 	bl	8002618 <get_b_counter>
 800495c:	4603      	mov	r3, r0
 800495e:	2b05      	cmp	r3, #5
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d031      	beq.n	80049d0 <HAL_TIM_PeriodElapsedCallback+0x500>
			bmp.uncomp.temp = read_ut ();
 800496c:	f7fd fc6c 	bl	8002248 <read_ut>
 8004970:	4603      	mov	r3, r0
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc f992 	bl	8000c9c <__aeabi_i2f>
 8004978:	4603      	mov	r3, r0
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800497c:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 800497e:	4813      	ldr	r0, [pc, #76]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004980:	f7fd fc7c 	bl	800227c <get_temp>
 8004984:	4603      	mov	r3, r0
 8004986:	4a11      	ldr	r2, [pc, #68]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8004988:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 800498a:	f7fd fccf 	bl	800232c <write_up>
 800498e:	e04d      	b.n	8004a2c <HAL_TIM_PeriodElapsedCallback+0x55c>
 8004990:	33333333 	.word	0x33333333
 8004994:	3fd33333 	.word	0x3fd33333
 8004998:	200015bc 	.word	0x200015bc
 800499c:	200015ac 	.word	0x200015ac
 80049a0:	200015b0 	.word	0x200015b0
 80049a4:	200015b4 	.word	0x200015b4
 80049a8:	200015b8 	.word	0x200015b8
 80049ac:	2000093c 	.word	0x2000093c
 80049b0:	3c8e8a72 	.word	0x3c8e8a72
 80049b4:	40590000 	.word	0x40590000
 80049b8:	40e00000 	.word	0x40e00000
 80049bc:	40c00000 	.word	0x40c00000
 80049c0:	20000b70 	.word	0x20000b70
 80049c4:	50061c46 	.word	0x50061c46
 80049c8:	42480000 	.word	0x42480000
 80049cc:	200015c8 	.word	0x200015c8
		}

		else if(get_b_counter() == 12) { //
 80049d0:	f7fd fe22 	bl	8002618 <get_b_counter>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d023      	beq.n	8004a2c <HAL_TIM_PeriodElapsedCallback+0x55c>
			bmp.uncomp.press = read_up (bmp.oss);
 80049e4:	4ba8      	ldr	r3, [pc, #672]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80049e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049e8:	f7fd fcc0 	bl	800236c <read_up>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4aa6      	ldr	r2, [pc, #664]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80049f0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80049f2:	4ea5      	ldr	r6, [pc, #660]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80049f4:	466d      	mov	r5, sp
 80049f6:	f106 0410 	add.w	r4, r6, #16
 80049fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004a0e:	f7fd fcdb 	bl	80023c8 <get_pressure>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a9c      	ldr	r2, [pc, #624]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004a16:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8004a18:	489b      	ldr	r0, [pc, #620]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004a1a:	f7fd fda1 	bl	8002560 <get_altitude>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4a99      	ldr	r2, [pc, #612]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004a22:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 8004a24:	4b98      	ldr	r3, [pc, #608]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	4a98      	ldr	r2, [pc, #608]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8004a2a:	6013      	str	r3, [r2, #0]

		}
#endif
		//}

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8004a2c:	4b98      	ldr	r3, [pc, #608]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 8384 	bne.w	800513e <HAL_TIM_PeriodElapsedCallback+0xc6e>
			_controller_timer = controller_timer;
 8004a36:	4b97      	ldr	r3, [pc, #604]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a97      	ldr	r2, [pc, #604]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004a3c:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8004a3e:	f001 fb97 	bl	8006170 <HAL_GetTick>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b93      	ldr	r3, [pc, #588]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004a48:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8004a4a:	4b92      	ldr	r3, [pc, #584]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	4a91      	ldr	r2, [pc, #580]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8004a56:	6013      	str	r3, [r2, #0]
		  controller_counter = 0;
 8004a58:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 8004a5e:	201d      	movs	r0, #29
 8004a60:	f7ff f832 	bl	8003ac8 <_Z7GyroOkuh>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc f918 	bl	8000c9c <__aeabi_i2f>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b8c      	ldr	r3, [pc, #560]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7fc f85b 	bl	8000b30 <__aeabi_fsub>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4989      	ldr	r1, [pc, #548]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc fa14 	bl	8000eac <__aeabi_fdiv>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b87      	ldr	r3, [pc, #540]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004a8a:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8004a8c:	201f      	movs	r0, #31
 8004a8e:	f7ff f81b 	bl	8003ac8 <_Z7GyroOkuh>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fc f901 	bl	8000c9c <__aeabi_i2f>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4b83      	ldr	r3, [pc, #524]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fc f844 	bl	8000b30 <__aeabi_fsub>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	497e      	ldr	r1, [pc, #504]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc f9fd 	bl	8000eac <__aeabi_fdiv>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004ab8:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8004aba:	2021      	movs	r0, #33	; 0x21
 8004abc:	f7ff f804 	bl	8003ac8 <_Z7GyroOkuh>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc f8ea 	bl	8000c9c <__aeabi_i2f>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b7a      	ldr	r3, [pc, #488]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fc f82d 	bl	8000b30 <__aeabi_fsub>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4972      	ldr	r1, [pc, #456]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc f9e6 	bl	8000eac <__aeabi_fdiv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b74      	ldr	r3, [pc, #464]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004ae6:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8004ae8:	4b6f      	ldr	r3, [pc, #444]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a73      	ldr	r2, [pc, #460]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004aee:	f8c2 31f4 	str.w	r3, [r2, #500]	; 0x1f4
		  EKF.gyro[1] = -1*gyroY;
 8004af2:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004afa:	4a70      	ldr	r2, [pc, #448]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004afc:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
		  EKF.gyro[2] = gyroZ;
 8004b00:	4b6d      	ldr	r3, [pc, #436]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6d      	ldr	r2, [pc, #436]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004b06:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8004b0a:	2032      	movs	r0, #50	; 0x32
 8004b0c:	f7ff f8b4 	bl	8003c78 <_Z6AccOkuh>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc f8c2 	bl	8000c9c <__aeabi_i2f>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4a69      	ldr	r2, [pc, #420]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004b1c:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8004b1e:	2034      	movs	r0, #52	; 0x34
 8004b20:	f7ff f8aa 	bl	8003c78 <_Z6AccOkuh>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fc f8b8 	bl	8000c9c <__aeabi_i2f>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4a65      	ldr	r2, [pc, #404]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004b30:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 8004b32:	2036      	movs	r0, #54	; 0x36
 8004b34:	f7ff f8a0 	bl	8003c78 <_Z6AccOkuh>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fc f8ae 	bl	8000c9c <__aeabi_i2f>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4a61      	ldr	r2, [pc, #388]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004b44:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 8004b46:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4960      	ldr	r1, [pc, #384]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fc f8f9 	bl	8000d44 <__aeabi_fmul>
 8004b52:	4603      	mov	r3, r0
 8004b54:	495e      	ldr	r1, [pc, #376]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fb ffea 	bl	8000b30 <__aeabi_fsub>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4b57      	ldr	r3, [pc, #348]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004b62:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 8004b64:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	495a      	ldr	r1, [pc, #360]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc f8ea 	bl	8000d44 <__aeabi_fmul>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4959      	ldr	r1, [pc, #356]	; (8004cd8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb ffdd 	bl	8000b34 <__addsf3>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004b80:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 8004b82:	4b51      	ldr	r3, [pc, #324]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4955      	ldr	r1, [pc, #340]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fc f8db 	bl	8000d44 <__aeabi_fmul>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4953      	ldr	r1, [pc, #332]	; (8004ce0 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb ffce 	bl	8000b34 <__addsf3>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b4a      	ldr	r3, [pc, #296]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004b9e:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8004ba0:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fc3f 	bl	8000428 <__aeabi_f2d>
 8004baa:	a335      	add	r3, pc, #212	; (adr r3, 8004c80 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fc92 	bl	80004d8 <__aeabi_dmul>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f7fb ff64 	bl	8000a88 <__aeabi_d2f>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4a48      	ldr	r2, [pc, #288]	; (8004ce4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8004bc4:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fb fc2c 	bl	8000428 <__aeabi_f2d>
 8004bd0:	a32b      	add	r3, pc, #172	; (adr r3, 8004c80 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fc7f 	bl	80004d8 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fb ff51 	bl	8000a88 <__aeabi_d2f>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8004bea:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fb fc19 	bl	8000428 <__aeabi_f2d>
 8004bf6:	a322      	add	r3, pc, #136	; (adr r3, 8004c80 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	f7fb ff3e 	bl	8000a88 <__aeabi_d2f>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4a37      	ldr	r2, [pc, #220]	; (8004cec <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8004c10:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8004c12:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.acc[1] = accY;// - AccYh;
 8004c1c:	4b29      	ldr	r3, [pc, #164]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c22:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		  EKF.acc[2] = accZ;// - AccZh;
 8004c26:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c2c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8004c30:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8004c32:	66fb      	str	r3, [r7, #108]	; 0x6c
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8004c34:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c36:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004c3a:	492e      	ldr	r1, [pc, #184]	; (8004cf4 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fc f881 	bl	8000d44 <__aeabi_fmul>
 8004c42:	4603      	mov	r3, r0
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004c48:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004c4c:	4929      	ldr	r1, [pc, #164]	; (8004cf4 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fc f878 	bl	8000d44 <__aeabi_fmul>
 8004c54:	4603      	mov	r3, r0
 8004c56:	667b      	str	r3, [r7, #100]	; 0x64

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 8004c58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c5a:	f7fd fd0d 	bl	8002678 <_ZSt3sinf>
 8004c5e:	6638      	str	r0, [r7, #96]	; 0x60
		  float gy = cos(pitch_r)*sin(roll_r);
 8004c60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c62:	f7fd fcfd 	bl	8002660 <_ZSt3cosf>
 8004c66:	4604      	mov	r4, r0
 8004c68:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c6a:	f7fd fd05 	bl	8002678 <_ZSt3sinf>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4619      	mov	r1, r3
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7fc f866 	bl	8000d44 <__aeabi_fmul>
 8004c78:	e03e      	b.n	8004cf8 <HAL_TIM_PeriodElapsedCallback+0x828>
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	8e8a71de 	.word	0x8e8a71de
 8004c84:	3f7ff2e4 	.word	0x3f7ff2e4
 8004c88:	200015c8 	.word	0x200015c8
 8004c8c:	200015a8 	.word	0x200015a8
 8004c90:	200015c0 	.word	0x200015c0
 8004c94:	20001610 	.word	0x20001610
 8004c98:	20001614 	.word	0x20001614
 8004c9c:	20001618 	.word	0x20001618
 8004ca0:	200008e8 	.word	0x200008e8
 8004ca4:	41660000 	.word	0x41660000
 8004ca8:	200008b8 	.word	0x200008b8
 8004cac:	200008ec 	.word	0x200008ec
 8004cb0:	200008bc 	.word	0x200008bc
 8004cb4:	200008f0 	.word	0x200008f0
 8004cb8:	200008c0 	.word	0x200008c0
 8004cbc:	20000b70 	.word	0x20000b70
 8004cc0:	200008c4 	.word	0x200008c4
 8004cc4:	200008c8 	.word	0x200008c8
 8004cc8:	200008cc 	.word	0x200008cc
 8004ccc:	3f7f3b64 	.word	0x3f7f3b64
 8004cd0:	3efae148 	.word	0x3efae148
 8004cd4:	3f7e978d 	.word	0x3f7e978d
 8004cd8:	414d0a3d 	.word	0x414d0a3d
 8004cdc:	3f797f63 	.word	0x3f797f63
 8004ce0:	404d1eb8 	.word	0x404d1eb8
 8004ce4:	200008d0 	.word	0x200008d0
 8004ce8:	200008d4 	.word	0x200008d4
 8004cec:	200008d8 	.word	0x200008d8
 8004cf0:	411cf5c3 	.word	0x411cf5c3
 8004cf4:	3c8e8a72 	.word	0x3c8e8a72
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
		  float gz = cos(roll_r)*cos(pitch_r);
 8004cfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004cfe:	f7fd fcaf 	bl	8002660 <_ZSt3cosf>
 8004d02:	4604      	mov	r4, r0
 8004d04:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d06:	f7fd fcab 	bl	8002660 <_ZSt3cosf>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7fc f818 	bl	8000d44 <__aeabi_fmul>
 8004d14:	4603      	mov	r3, r0
 8004d16:	65bb      	str	r3, [r7, #88]	; 0x58



		  accXc -= gx;
 8004d18:	4b98      	ldr	r3, [pc, #608]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb ff06 	bl	8000b30 <__aeabi_fsub>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b94      	ldr	r3, [pc, #592]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004d2a:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 8004d2c:	4b94      	ldr	r3, [pc, #592]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb fefc 	bl	8000b30 <__aeabi_fsub>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b90      	ldr	r3, [pc, #576]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004d3e:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8004d40:	4b90      	ldr	r3, [pc, #576]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fef2 	bl	8000b30 <__aeabi_fsub>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b8c      	ldr	r3, [pc, #560]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004d52:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8004d54:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d56:	f7fd fc83 	bl	8002660 <_ZSt3cosf>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b87      	ldr	r3, [pc, #540]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fb ffee 	bl	8000d44 <__aeabi_fmul>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461c      	mov	r4, r3
 8004d6c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d6e:	f7fd fc77 	bl	8002660 <_ZSt3cosf>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b83      	ldr	r3, [pc, #524]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fb ffe2 	bl	8000d44 <__aeabi_fmul>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461d      	mov	r5, r3
 8004d84:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d86:	f7fd fc77 	bl	8002678 <_ZSt3sinf>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7fb ffd8 	bl	8000d44 <__aeabi_fmul>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4619      	mov	r1, r3
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7fb fec9 	bl	8000b30 <__aeabi_fsub>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461c      	mov	r4, r3
 8004da2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004da4:	f7fd fc68 	bl	8002678 <_ZSt3sinf>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fb ffc7 	bl	8000d44 <__aeabi_fmul>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461d      	mov	r5, r3
 8004dba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004dbc:	f7fd fc5c 	bl	8002678 <_ZSt3sinf>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f7fb ffbd 	bl	8000d44 <__aeabi_fmul>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7fb feae 	bl	8000b30 <__aeabi_fsub>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004dda:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8004ddc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004dde:	f7fd fc3f 	bl	8002660 <_ZSt3cosf>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fb ffaa 	bl	8000d44 <__aeabi_fmul>
 8004df0:	4603      	mov	r3, r0
 8004df2:	461c      	mov	r4, r3
 8004df4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004df6:	f7fd fc3f 	bl	8002678 <_ZSt3sinf>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7fb ff9e 	bl	8000d44 <__aeabi_fmul>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7fb fe8f 	bl	8000b30 <__aeabi_fsub>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b5d      	ldr	r3, [pc, #372]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004e18:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8004e1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e1c:	f7fd fc20 	bl	8002660 <_ZSt3cosf>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fb ff8b 	bl	8000d44 <__aeabi_fmul>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461c      	mov	r4, r3
 8004e32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004e34:	f7fd fc14 	bl	8002660 <_ZSt3cosf>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7fb ff81 	bl	8000d44 <__aeabi_fmul>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461c      	mov	r4, r3
 8004e46:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004e48:	f7fd fc16 	bl	8002678 <_ZSt3sinf>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fb ff75 	bl	8000d44 <__aeabi_fmul>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7fb fe68 	bl	8000b34 <__addsf3>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461c      	mov	r4, r3
 8004e68:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004e6a:	f7fd fbf9 	bl	8002660 <_ZSt3cosf>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7fb ff64 	bl	8000d44 <__aeabi_fmul>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461d      	mov	r5, r3
 8004e80:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e82:	f7fd fbf9 	bl	8002678 <_ZSt3sinf>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f7fb ff5a 	bl	8000d44 <__aeabi_fmul>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4619      	mov	r1, r3
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fb fe4d 	bl	8000b34 <__addsf3>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b3c      	ldr	r3, [pc, #240]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8004ea0:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb ff4b 	bl	8000d44 <__aeabi_fmul>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb ff41 	bl	8000d44 <__aeabi_fmul>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb ff37 	bl	8000d44 <__aeabi_fmul>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8004edc:	601a      	str	r2, [r3, #0]

		  //EKF.acc_vert = (accZc - 1.0)  * g;
		  EKF.acc_vert = accZm;
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004ee4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
		  float accXm = ax_b  * g;
		  float accYm = (accYc-AccYh)  * g;
		  */


		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8004ee8:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004eee:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		  EKF.accYm = accYm;
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004ef8:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.acc_pos_x = accXm;
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f02:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
		  EKF.acc_pos_y = -accYm;
 8004f06:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f10:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  EKF.sonar_alt = sonar_alt;
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f1a:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
		  EKF.baro_alt = baro_alt;
 8004f1e:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xacc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f24:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f32:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4

		  EKF.Run();
 8004f36:	4817      	ldr	r0, [pc, #92]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f38:	f00b fa78 	bl	801042c <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f3e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f44:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f48:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f4e:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f52:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f58:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f5c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f62:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f66:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f6a:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f6c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f70:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004f74:	4a0b      	ldr	r2, [pc, #44]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8004f76:	6153      	str	r3, [r2, #20]
 8004f78:	e016      	b.n	8004fa8 <HAL_TIM_PeriodElapsedCallback+0xad8>
 8004f7a:	bf00      	nop
 8004f7c:	200008d0 	.word	0x200008d0
 8004f80:	200008d4 	.word	0x200008d4
 8004f84:	200008d8 	.word	0x200008d8
 8004f88:	200008dc 	.word	0x200008dc
 8004f8c:	200008e0 	.word	0x200008e0
 8004f90:	200008e4 	.word	0x200008e4
 8004f94:	20000b70 	.word	0x20000b70
 8004f98:	200015ac 	.word	0x200015ac
 8004f9c:	200015a8 	.word	0x200015a8
 8004fa0:	20001638 	.word	0x20001638
 8004fa4:	2000093c 	.word	0x2000093c


		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));

			checkMode(ch[MOD_CH-1]);
 8004fa8:	4b67      	ldr	r3, [pc, #412]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe f9bb 	bl	8003328 <_Z9checkModei>

			controller.z_vel = EKF.vz;
 8004fb2:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004fb4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8004fb8:	4a65      	ldr	r2, [pc, #404]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004fba:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
			controller.z = EKF.alt_gnd;
 8004fbe:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004fc0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004fc4:	4a62      	ldr	r2, [pc, #392]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004fc6:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

			controller.vx	 = EKF.vx;
 8004fca:	4b60      	ldr	r3, [pc, #384]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004fcc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004fd0:	4a5f      	ldr	r2, [pc, #380]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004fd2:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			controller.x     = EKF.x;
 8004fd6:	4b5d      	ldr	r3, [pc, #372]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004fd8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004fdc:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004fde:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

			controller.vy	 = EKF.vy;
 8004fe2:	4b5a      	ldr	r3, [pc, #360]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004fe4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8004fe8:	4a59      	ldr	r2, [pc, #356]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004fea:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
			controller.y     = EKF.y;
 8004fee:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8004ff0:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004ff4:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004ff6:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

		  controller.state = state;
 8004ffa:	4b55      	ldr	r3, [pc, #340]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8004ffc:	4a55      	ldr	r2, [pc, #340]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8004ffe:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8005002:	4615      	mov	r5, r2
 8005004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800500a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8005010:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005012:	4a51      	ldr	r2, [pc, #324]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005014:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8005018:	4615      	mov	r5, r2
 800501a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800501c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800501e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8005026:	4b48      	ldr	r3, [pc, #288]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fe36 	bl	8000c9c <__aeabi_i2f>
 8005030:	4603      	mov	r3, r0
 8005032:	4a47      	ldr	r2, [pc, #284]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005034:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 8005038:	4b43      	ldr	r3, [pc, #268]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fe2d 	bl	8000c9c <__aeabi_i2f>
 8005042:	4603      	mov	r3, r0
 8005044:	4a42      	ldr	r2, [pc, #264]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005046:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb fe24 	bl	8000c9c <__aeabi_i2f>
 8005054:	4603      	mov	r3, r0
 8005056:	4a3e      	ldr	r2, [pc, #248]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005058:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 800505c:	483c      	ldr	r0, [pc, #240]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800505e:	f006 fba9 	bl	800b7b4 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005064:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005068:	4a3c      	ldr	r2, [pc, #240]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800506a:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 800506c:	4b38      	ldr	r3, [pc, #224]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800506e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005072:	4a3a      	ldr	r2, [pc, #232]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8005074:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005078:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800507c:	4a37      	ldr	r2, [pc, #220]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800507e:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005082:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005086:	4a35      	ldr	r2, [pc, #212]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8005088:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 800508a:	4b35      	ldr	r3, [pc, #212]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d031      	beq.n	80050f6 <HAL_TIM_PeriodElapsedCallback+0xc26>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8005092:	4b2d      	ldr	r3, [pc, #180]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f240 52db 	movw	r2, #1499	; 0x5db
 800509a:	4293      	cmp	r3, r2
 800509c:	dc1a      	bgt.n	80050d4 <HAL_TIM_PeriodElapsedCallback+0xc04>
 800509e:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f240 424c 	movw	r2, #1100	; 0x44c
 80050a6:	4293      	cmp	r3, r2
 80050a8:	dd14      	ble.n	80050d4 <HAL_TIM_PeriodElapsedCallback+0xc04>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80050ac:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050b2:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80050b6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80050ba:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050bc:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80050c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050c6:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 80050c8:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80050ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80050ce:	4a25      	ldr	r2, [pc, #148]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e020      	b.n	8005116 <HAL_TIM_PeriodElapsedCallback+0xc46>

			  }

			  else {
				  controller_output_2[0] = 1000;
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050da:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050e2:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ea:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e00f      	b.n	8005116 <HAL_TIM_PeriodElapsedCallback+0xc46>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 80050f6:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80050f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050fc:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 80050fe:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005104:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 8005106:	4b17      	ldr	r3, [pc, #92]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800510c:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 800510e:	4b15      	ldr	r3, [pc, #84]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8005110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005114:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005118:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800511c:	4a0e      	ldr	r2, [pc, #56]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800511e:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8005122:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8005128:	6113      	str	r3, [r2, #16]

		  //ie_roll_sat = controller.pid_roll.ie_roll_sat;
		 // SendTelem();
		  TelemPack();
 800512a:	f7fe fb09 	bl	8003740 <_Z9TelemPackv>
		  CheckFailsafe();
 800512e:	f7fe f9f1 	bl	8003514 <_Z13CheckFailsafev>
		  CheckSwarm();
 8005132:	f7fe f9af 	bl	8003494 <_Z10CheckSwarmv>
		  PWMYaz();
 8005136:	f7ff f84f 	bl	80041d8 <_Z6PWMYazv>
		  SwitchMag();
 800513a:	f7fe f945 	bl	80033c8 <_Z9SwitchMagv>


		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 800513e:	bf00      	nop
 8005140:	3784      	adds	r7, #132	; 0x84
 8005142:	46bd      	mov	sp, r7
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005146:	bf00      	nop
 8005148:	20001510 	.word	0x20001510
 800514c:	20000b70 	.word	0x20000b70
 8005150:	20000eb0 	.word	0x20000eb0
 8005154:	2000093c 	.word	0x2000093c
 8005158:	20000918 	.word	0x20000918
 800515c:	200014e0 	.word	0x200014e0
 8005160:	200015a5 	.word	0x200015a5
 8005164:	200014f0 	.word	0x200014f0

08005168 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a55      	ldr	r2, [pc, #340]	; (80052c8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f040 80a2 	bne.w	80052be <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	7f1b      	ldrb	r3, [r3, #28]
 800517e:	2b04      	cmp	r3, #4
 8005180:	f040 809d 	bne.w	80052be <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8005184:	4b51      	ldr	r3, [pc, #324]	; (80052cc <HAL_TIM_IC_CaptureCallback+0x164>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800518a:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 800518c:	2108      	movs	r1, #8
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f004 fd96 	bl	8009cc0 <HAL_TIM_ReadCapturedValue>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <HAL_TIM_IC_CaptureCallback+0x164>)
 800519a:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <HAL_TIM_IC_CaptureCallback+0x164>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <HAL_TIM_IC_CaptureCallback+0x168>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051a8:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 80051aa:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	0fdb      	lsrs	r3, r3, #31
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80051be:	33ff      	adds	r3, #255	; 0xff
 80051c0:	4a44      	ldr	r2, [pc, #272]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051c2:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80051cc:	db06      	blt.n	80051dc <HAL_TIM_IC_CaptureCallback+0x74>
 80051ce:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80051d6:	dc01      	bgt.n	80051dc <HAL_TIM_IC_CaptureCallback+0x74>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <HAL_TIM_IC_CaptureCallback+0x76>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01c      	beq.n	800521c <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 80051e2:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b21b      	sxth	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 80051f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f8:	4a39      	ldr	r2, [pc, #228]	; (80052e0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80051fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b21b      	sxth	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 800520c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8005210:	4b34      	ldr	r3, [pc, #208]	; (80052e4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e015      	b.n	8005248 <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	bfcc      	ite	gt
 8005228:	2301      	movgt	r3, #1
 800522a:	2300      	movle	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005238:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 800523a:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 8005240:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8005244:	2201      	movs	r2, #1
 8005246:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fcae 	bl	8003bb0 <_Z7pwm2angt>
 8005254:	4603      	mov	r3, r0
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <HAL_TIM_IC_CaptureCallback+0x184>)
 8005258:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 800525a:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b29b      	uxth	r3, r3
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fca5 	bl	8003bb0 <_Z7pwm2angt>
 8005266:	4603      	mov	r3, r0
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <HAL_TIM_IC_CaptureCallback+0x184>)
 800526a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800526c:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <HAL_TIM_IC_CaptureCallback+0x184>)
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_TIM_IC_CaptureCallback+0x174>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	b29b      	uxth	r3, r3
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fcd4 	bl	8003c28 <_Z8pwm2ratet>
 8005280:	4603      	mov	r3, r0
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_TIM_IC_CaptureCallback+0x184>)
 8005284:	6153      	str	r3, [r2, #20]

				i++;
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b21b      	sxth	r3, r3
 800528c:	b29b      	uxth	r3, r3
 800528e:	3301      	adds	r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	b21a      	sxth	r2, r3
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8005296:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b21b      	sxth	r3, r3
 800529e:	4619      	mov	r1, r3
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80052a2:	fb83 2301 	smull	r2, r3, r3, r1
 80052a6:	105a      	asrs	r2, r3, #1
 80052a8:	17cb      	asrs	r3, r1, #31
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	1aca      	subs	r2, r1, r3
 80052b8:	b212      	sxth	r2, r2
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <HAL_TIM_IC_CaptureCallback+0x170>)
 80052bc:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	200017c0 	.word	0x200017c0
 80052cc:	20001500 	.word	0x20001500
 80052d0:	20001504 	.word	0x20001504
 80052d4:	20001508 	.word	0x20001508
 80052d8:	2000150c 	.word	0x2000150c
 80052dc:	20001510 	.word	0x20001510
 80052e0:	2000153c 	.word	0x2000153c
 80052e4:	20001608 	.word	0x20001608
 80052e8:	20001594 	.word	0x20001594
 80052ec:	20000918 	.word	0x20000918
 80052f0:	2e8ba2e9 	.word	0x2e8ba2e9

080052f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052f8:	b672      	cpsid	i
}
 80052fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052fc:	e7fe      	b.n	80052fc <Error_Handler+0x8>
	...

08005300 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10a      	bne.n	8005326 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005316:	4293      	cmp	r3, r2
 8005318:	d105      	bne.n	8005326 <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800531c:	f006 ff54 	bl	800c1c8 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8005320:	480b      	ldr	r0, [pc, #44]	; (8005350 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005322:	f006 f94d 	bl	800b5c0 <_ZN10ControllerC1Ev>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005332:	4293      	cmp	r3, r2
 8005334:	d105      	bne.n	8005342 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8005336:	4806      	ldr	r0, [pc, #24]	; (8005350 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005338:	f006 ff08 	bl	800c14c <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800533e:	f00b f8e9 	bl	8010514 <_ZN15Kalman_FiltresiD1Ev>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000b70 	.word	0x20000b70
 8005350:	20000eb0 	.word	0x20000eb0

08005354 <_GLOBAL__sub_I_gyroX>:
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
 8005358:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800535c:	2001      	movs	r0, #1
 800535e:	f7ff ffcf 	bl	8005300 <_Z41__static_initialization_and_destruction_0ii>
 8005362:	bd80      	pop	{r7, pc}

08005364 <_GLOBAL__sub_D_gyroX>:
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
 8005368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800536c:	2000      	movs	r0, #0
 800536e:	f7ff ffc7 	bl	8005300 <_Z41__static_initialization_and_destruction_0ii>
 8005372:	bd80      	pop	{r7, pc}

08005374 <moving_median_create>:

void
moving_median_create(movingMedian_t *context,
                     uint16_t filter_size,
                     uint16_t sample_time)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	803b      	strh	r3, [r7, #0]
  free(context->buffer);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f00d fed3 	bl	8013134 <free>

  if (filter_size % 2 == 0)
 800538e:	887b      	ldrh	r3, [r7, #2]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <moving_median_create+0x32>
  {
    context->size = filter_size - 1;
 800539a:	887b      	ldrh	r3, [r7, #2]
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	809a      	strh	r2, [r3, #4]
 80053a4:	e002      	b.n	80053ac <moving_median_create+0x38>
  }
  else
  {
    context->size = filter_size;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	809a      	strh	r2, [r3, #4]
  }

  context->buffer = (int16_t*)malloc(filter_size * sizeof(int16_t));
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f00d feb7 	bl	8013124 <malloc>
 80053b6:	4603      	mov	r3, r0
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
  context->index = 0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	80da      	strh	r2, [r3, #6]
  context->fill = 0;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	811a      	strh	r2, [r3, #8]
  context->filtered = 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	815a      	strh	r2, [r3, #10]
  context->sample_time = sample_time;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	883a      	ldrh	r2, [r7, #0]
 80053d4:	819a      	strh	r2, [r3, #12]
  context->last_time = 0;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_MspInit+0x5c>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_MspInit+0x5c>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6193      	str	r3, [r2, #24]
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_MspInit+0x5c>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_MspInit+0x5c>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4a0e      	ldr	r2, [pc, #56]	; (8005440 <HAL_MspInit+0x5c>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	61d3      	str	r3, [r2, #28]
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <HAL_MspInit+0x5c>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_MspInit+0x60>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <HAL_MspInit+0x60>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	40021000 	.word	0x40021000
 8005444:	40010000 	.word	0x40010000

08005448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800544c:	e7fe      	b.n	800544c <NMI_Handler+0x4>
	...

08005450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HardFault_Handler+0x30>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800545c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HardFault_Handler+0x30>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HardFault_Handler+0x30>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8005472:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HardFault_Handler+0x30>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800547a:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800547c:	e7fe      	b.n	800547c <HardFault_Handler+0x2c>
 800547e:	bf00      	nop
 8005480:	20001808 	.word	0x20001808

08005484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005488:	e7fe      	b.n	8005488 <MemManage_Handler+0x4>

0800548a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800548e:	e7fe      	b.n	800548e <BusFault_Handler+0x4>

08005490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005494:	e7fe      	b.n	8005494 <UsageFault_Handler+0x4>

08005496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054b2:	bf00      	nop
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
	...

080054bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <SysTick_Handler+0x24>)
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <SysTick_Handler+0x1c>
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <SysTick_Handler+0x24>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b02      	ldr	r3, [pc, #8]	; (80054e0 <SysTick_Handler+0x24>)
 80054d6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054d8:	f000 fe38 	bl	800614c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001720 	.word	0x20001720

080054e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <DMA1_Channel5_IRQHandler+0x10>)
 80054ea:	f001 f93b 	bl	8006764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	2000191c 	.word	0x2000191c

080054f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054fc:	4802      	ldr	r0, [pc, #8]	; (8005508 <DMA1_Channel6_IRQHandler+0x10>)
 80054fe:	f001 f931 	bl	8006764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20001898 	.word	0x20001898

0800550c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005510:	4802      	ldr	r0, [pc, #8]	; (800551c <DMA1_Channel7_IRQHandler+0x10>)
 8005512:	f001 f927 	bl	8006764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20001960 	.word	0x20001960

08005520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005524:	4802      	ldr	r0, [pc, #8]	; (8005530 <TIM2_IRQHandler+0x10>)
 8005526:	f004 f8ad 	bl	8009684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20001850 	.word	0x20001850

08005534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005538:	4802      	ldr	r0, [pc, #8]	; (8005544 <TIM3_IRQHandler+0x10>)
 800553a:	f004 f8a3 	bl	8009684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200017c0 	.word	0x200017c0

08005548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800554c:	4802      	ldr	r0, [pc, #8]	; (8005558 <USART2_IRQHandler+0x10>)
 800554e:	f005 fbe7 	bl	800ad20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200019e4 	.word	0x200019e4

0800555c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8005560:	4803      	ldr	r0, [pc, #12]	; (8005570 <USART3_IRQHandler+0x14>)
 8005562:	f7fc fcff 	bl	8001f64 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005566:	4802      	ldr	r0, [pc, #8]	; (8005570 <USART3_IRQHandler+0x14>)
 8005568:	f005 fbda 	bl	800ad20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200018dc 	.word	0x200018dc

08005574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
	return 1;
 8005578:	2301      	movs	r3, #1
}
 800557a:	4618      	mov	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <_kill>:

int _kill(int pid, int sig)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800558c:	f00d fda0 	bl	80130d0 <__errno>
 8005590:	4603      	mov	r3, r0
 8005592:	2216      	movs	r2, #22
 8005594:	601a      	str	r2, [r3, #0]
	return -1;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_exit>:

void _exit (int status)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055aa:	f04f 31ff 	mov.w	r1, #4294967295
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ffe7 	bl	8005582 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055b4:	e7fe      	b.n	80055b4 <_exit+0x12>

080055b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e00a      	b.n	80055de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055c8:	f3af 8000 	nop.w
 80055cc:	4601      	mov	r1, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	60ba      	str	r2, [r7, #8]
 80055d4:	b2ca      	uxtb	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3301      	adds	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	dbf0      	blt.n	80055c8 <_read+0x12>
	}

return len;
 80055e6:	687b      	ldr	r3, [r7, #4]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e009      	b.n	8005616 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	60ba      	str	r2, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	dbf1      	blt.n	8005602 <_write+0x12>
	}
	return len;
 800561e:	687b      	ldr	r3, [r7, #4]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_close>:

int _close(int file)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	return -1;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800564e:	605a      	str	r2, [r3, #4]
	return 0;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <_isatty>:

int _isatty(int file)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	return 1;
 8005664:	2301      	movs	r3, #1
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
	return 0;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <_sbrk+0x5c>)
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <_sbrk+0x60>)
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800569c:	4b13      	ldr	r3, [pc, #76]	; (80056ec <_sbrk+0x64>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <_sbrk+0x64>)
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <_sbrk+0x68>)
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <_sbrk+0x64>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d207      	bcs.n	80056c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056b8:	f00d fd0a 	bl	80130d0 <__errno>
 80056bc:	4603      	mov	r3, r0
 80056be:	220c      	movs	r2, #12
 80056c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e009      	b.n	80056dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <_sbrk+0x64>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <_sbrk+0x64>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <_sbrk+0x64>)
 80056d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20005000 	.word	0x20005000
 80056e8:	00000400 	.word	0x00000400
 80056ec:	2000170c 	.word	0x2000170c
 80056f0:	20001a38 	.word	0x20001a38

080056f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b092      	sub	sp, #72	; 0x48
 8005704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005706:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	609a      	str	r2, [r3, #8]
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	611a      	str	r2, [r3, #16]
 8005720:	615a      	str	r2, [r3, #20]
 8005722:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	2220      	movs	r2, #32
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f00d fd18 	bl	8013160 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005730:	4b45      	ldr	r3, [pc, #276]	; (8005848 <MX_TIM1_Init+0x148>)
 8005732:	4a46      	ldr	r2, [pc, #280]	; (800584c <MX_TIM1_Init+0x14c>)
 8005734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8005736:	4b44      	ldr	r3, [pc, #272]	; (8005848 <MX_TIM1_Init+0x148>)
 8005738:	2247      	movs	r2, #71	; 0x47
 800573a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800573c:	4b42      	ldr	r3, [pc, #264]	; (8005848 <MX_TIM1_Init+0x148>)
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <MX_TIM1_Init+0x148>)
 8005744:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800574a:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <MX_TIM1_Init+0x148>)
 800574c:	2200      	movs	r2, #0
 800574e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <MX_TIM1_Init+0x148>)
 8005752:	2200      	movs	r2, #0
 8005754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005756:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <MX_TIM1_Init+0x148>)
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800575c:	483a      	ldr	r0, [pc, #232]	; (8005848 <MX_TIM1_Init+0x148>)
 800575e:	f003 fd41 	bl	80091e4 <HAL_TIM_PWM_Init>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005768:	f7ff fdc4 	bl	80052f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576c:	2300      	movs	r3, #0
 800576e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005778:	4619      	mov	r1, r3
 800577a:	4833      	ldr	r0, [pc, #204]	; (8005848 <MX_TIM1_Init+0x148>)
 800577c:	f004 ff50 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005786:	f7ff fdb5 	bl	80052f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800578a:	2360      	movs	r3, #96	; 0x60
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005796:	2300      	movs	r3, #0
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800579e:	2300      	movs	r3, #0
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057aa:	2200      	movs	r2, #0
 80057ac:	4619      	mov	r1, r3
 80057ae:	4826      	ldr	r0, [pc, #152]	; (8005848 <MX_TIM1_Init+0x148>)
 80057b0:	f004 f904 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80057ba:	f7ff fd9b 	bl	80052f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	2204      	movs	r2, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4820      	ldr	r0, [pc, #128]	; (8005848 <MX_TIM1_Init+0x148>)
 80057c8:	f004 f8f8 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80057d2:	f7ff fd8f 	bl	80052f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80057d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057da:	2208      	movs	r2, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	481a      	ldr	r0, [pc, #104]	; (8005848 <MX_TIM1_Init+0x148>)
 80057e0:	f004 f8ec 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80057ea:	f7ff fd83 	bl	80052f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80057ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f2:	220c      	movs	r2, #12
 80057f4:	4619      	mov	r1, r3
 80057f6:	4814      	ldr	r0, [pc, #80]	; (8005848 <MX_TIM1_Init+0x148>)
 80057f8:	f004 f8e0 	bl	80099bc <HAL_TIM_PWM_ConfigChannel>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005802:	f7ff fd77 	bl	80052f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800581a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800581e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4807      	ldr	r0, [pc, #28]	; (8005848 <MX_TIM1_Init+0x148>)
 800582a:	f004 ff57 	bl	800a6dc <HAL_TIMEx_ConfigBreakDeadTime>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005834:	f7ff fd5e 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005838:	4803      	ldr	r0, [pc, #12]	; (8005848 <MX_TIM1_Init+0x148>)
 800583a:	f000 f9a5 	bl	8005b88 <HAL_TIM_MspPostInit>

}
 800583e:	bf00      	nop
 8005840:	3748      	adds	r7, #72	; 0x48
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20001808 	.word	0x20001808
 800584c:	40012c00 	.word	0x40012c00

08005850 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005856:	f107 0308 	add.w	r3, r7, #8
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005864:	463b      	mov	r3, r7
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <MX_TIM2_Init+0x94>)
 800586e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8005874:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <MX_TIM2_Init+0x94>)
 8005876:	2247      	movs	r2, #71	; 0x47
 8005878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <MX_TIM2_Init+0x94>)
 800587c:	2200      	movs	r2, #0
 800587e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8005880:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <MX_TIM2_Init+0x94>)
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005888:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <MX_TIM2_Init+0x94>)
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <MX_TIM2_Init+0x94>)
 8005890:	2200      	movs	r2, #0
 8005892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005894:	4813      	ldr	r0, [pc, #76]	; (80058e4 <MX_TIM2_Init+0x94>)
 8005896:	f003 fbb9 	bl	800900c <HAL_TIM_Base_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80058a0:	f7ff fd28 	bl	80052f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	4619      	mov	r1, r3
 80058b0:	480c      	ldr	r0, [pc, #48]	; (80058e4 <MX_TIM2_Init+0x94>)
 80058b2:	f004 f941 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80058bc:	f7ff fd1a 	bl	80052f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058c0:	2300      	movs	r3, #0
 80058c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058c8:	463b      	mov	r3, r7
 80058ca:	4619      	mov	r1, r3
 80058cc:	4805      	ldr	r0, [pc, #20]	; (80058e4 <MX_TIM2_Init+0x94>)
 80058ce:	f004 fea7 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80058d8:	f7ff fd0c 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20001850 	.word	0x20001850

080058e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ee:	f107 0318 	add.w	r3, r7, #24
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	605a      	str	r2, [r3, #4]
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005906:	463b      	mov	r3, r7
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005914:	4a2b      	ldr	r2, [pc, #172]	; (80059c4 <MX_TIM3_Init+0xdc>)
 8005916:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <MX_TIM3_Init+0xd8>)
 800591a:	2247      	movs	r2, #71	; 0x47
 800591c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800591e:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <MX_TIM3_Init+0xd8>)
 800592e:	2200      	movs	r2, #0
 8005930:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005932:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005938:	4821      	ldr	r0, [pc, #132]	; (80059c0 <MX_TIM3_Init+0xd8>)
 800593a:	f003 fb67 	bl	800900c <HAL_TIM_Base_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8005944:	f7ff fcd6 	bl	80052f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800594e:	f107 0318 	add.w	r3, r7, #24
 8005952:	4619      	mov	r1, r3
 8005954:	481a      	ldr	r0, [pc, #104]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005956:	f004 f8ef 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005960:	f7ff fcc8 	bl	80052f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005964:	4816      	ldr	r0, [pc, #88]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005966:	f003 fd2f 	bl	80093c8 <HAL_TIM_IC_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005970:	f7ff fcc0 	bl	80052f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	4619      	mov	r1, r3
 8005982:	480f      	ldr	r0, [pc, #60]	; (80059c0 <MX_TIM3_Init+0xd8>)
 8005984:	f004 fe4c 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800598e:	f7ff fcb1 	bl	80052f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005992:	2300      	movs	r3, #0
 8005994:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005996:	2301      	movs	r3, #1
 8005998:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80059a2:	463b      	mov	r3, r7
 80059a4:	2208      	movs	r2, #8
 80059a6:	4619      	mov	r1, r3
 80059a8:	4805      	ldr	r0, [pc, #20]	; (80059c0 <MX_TIM3_Init+0xd8>)
 80059aa:	f003 ff73 	bl	8009894 <HAL_TIM_IC_ConfigChannel>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80059b4:	f7ff fc9e 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80059b8:	bf00      	nop
 80059ba:	3728      	adds	r7, #40	; 0x28
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200017c0 	.word	0x200017c0
 80059c4:	40000400 	.word	0x40000400

080059c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	609a      	str	r2, [r3, #8]
 80059da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059dc:	463b      	mov	r3, r7
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <MX_TIM4_Init+0x94>)
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <MX_TIM4_Init+0x98>)
 80059e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80059ea:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <MX_TIM4_Init+0x94>)
 80059ec:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80059f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059f2:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <MX_TIM4_Init+0x94>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <MX_TIM4_Init+0x94>)
 80059fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <MX_TIM4_Init+0x94>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <MX_TIM4_Init+0x94>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a0c:	4813      	ldr	r0, [pc, #76]	; (8005a5c <MX_TIM4_Init+0x94>)
 8005a0e:	f003 fafd 	bl	800900c <HAL_TIM_Base_Init>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005a18:	f7ff fc6c 	bl	80052f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	4619      	mov	r1, r3
 8005a28:	480c      	ldr	r0, [pc, #48]	; (8005a5c <MX_TIM4_Init+0x94>)
 8005a2a:	f004 f885 	bl	8009b38 <HAL_TIM_ConfigClockSource>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005a34:	f7ff fc5e 	bl	80052f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a40:	463b      	mov	r3, r7
 8005a42:	4619      	mov	r1, r3
 8005a44:	4805      	ldr	r0, [pc, #20]	; (8005a5c <MX_TIM4_Init+0x94>)
 8005a46:	f004 fdeb 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005a50:	f7ff fc50 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a54:	bf00      	nop
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20001778 	.word	0x20001778
 8005a60:	40000800 	.word	0x40000800

08005a64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <HAL_TIM_PWM_MspInit+0x34>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d10b      	bne.n	8005a8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_TIM_PWM_MspInit+0x38>)
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <HAL_TIM_PWM_MspInit+0x38>)
 8005a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a80:	6193      	str	r3, [r2, #24]
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_TIM_PWM_MspInit+0x38>)
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	f107 0318 	add.w	r3, r7, #24
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d114      	bne.n	8005aea <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ac0:	4b2d      	ldr	r3, [pc, #180]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	61d3      	str	r3, [r2, #28]
 8005acc:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2101      	movs	r1, #1
 8005adc:	201c      	movs	r0, #28
 8005ade:	f000 fc70 	bl	80063c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ae2:	201c      	movs	r0, #28
 8005ae4:	f000 fc89 	bl	80063fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005ae8:	e042      	b.n	8005b70 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <HAL_TIM_Base_MspInit+0xdc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d12c      	bne.n	8005b4e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005afa:	f043 0302 	orr.w	r3, r3, #2
 8005afe:	61d3      	str	r3, [r2, #28]
 8005b00:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b12:	f043 0308 	orr.w	r3, r3, #8
 8005b16:	6193      	str	r3, [r2, #24]
 8005b18:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005b24:	2301      	movs	r3, #1
 8005b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b30:	f107 0318 	add.w	r3, r7, #24
 8005b34:	4619      	mov	r1, r3
 8005b36:	4812      	ldr	r0, [pc, #72]	; (8005b80 <HAL_TIM_Base_MspInit+0xe0>)
 8005b38:	f000 ff48 	bl	80069cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	201d      	movs	r0, #29
 8005b42:	f000 fc3e 	bl	80063c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b46:	201d      	movs	r0, #29
 8005b48:	f000 fc57 	bl	80063fa <HAL_NVIC_EnableIRQ>
}
 8005b4c:	e010      	b.n	8005b70 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <HAL_TIM_Base_MspInit+0xe4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10b      	bne.n	8005b70 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b58:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	4a06      	ldr	r2, [pc, #24]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b5e:	f043 0304 	orr.w	r3, r3, #4
 8005b62:	61d3      	str	r3, [r2, #28]
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <HAL_TIM_Base_MspInit+0xd8>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
}
 8005b70:	bf00      	nop
 8005b72:	3728      	adds	r7, #40	; 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40010c00 	.word	0x40010c00
 8005b84:	40000800 	.word	0x40000800

08005b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0310 	add.w	r3, r7, #16
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_TIM_MspPostInit+0x8c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d131      	bne.n	8005c0c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	6193      	str	r3, [r2, #24]
 8005bb4:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc0:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005bc6:	f043 0304 	orr.w	r3, r3, #4
 8005bca:	6193      	str	r3, [r2, #24]
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <HAL_TIM_MspPostInit+0x90>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005bd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bde:	2302      	movs	r3, #2
 8005be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be2:	2302      	movs	r3, #2
 8005be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	4619      	mov	r1, r3
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <HAL_TIM_MspPostInit+0x94>)
 8005bee:	f000 feed 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005bf2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	4619      	mov	r1, r3
 8005c06:	4806      	ldr	r0, [pc, #24]	; (8005c20 <HAL_TIM_MspPostInit+0x98>)
 8005c08:	f000 fee0 	bl	80069cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005c0c:	bf00      	nop
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40010c00 	.word	0x40010c00
 8005c20:	40010800 	.word	0x40010800

08005c24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c28:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <MX_USART1_UART_Init+0x50>)
 8005c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005c2e:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c4a:	220c      	movs	r2, #12
 8005c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c5a:	4805      	ldr	r0, [pc, #20]	; (8005c70 <MX_USART1_UART_Init+0x4c>)
 8005c5c:	f004 fdc5 	bl	800a7ea <HAL_UART_Init>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005c66:	f7ff fb45 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200019a4 	.word	0x200019a4
 8005c74:	40013800 	.word	0x40013800

08005c78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c7e:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <MX_USART2_UART_Init+0x4c>)
 8005c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c84:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <MX_USART2_UART_Init+0x50>)
 8005c86:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005c9c:	220c      	movs	r2, #12
 8005c9e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cac:	4804      	ldr	r0, [pc, #16]	; (8005cc0 <MX_USART2_UART_Init+0x48>)
 8005cae:	f004 fd9c 	bl	800a7ea <HAL_UART_Init>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8005cb8:	f7ff fb1c 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cbc:	bf00      	nop
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	200019e4 	.word	0x200019e4
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	000f4240 	.word	0x000f4240

08005ccc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <MX_USART3_UART_Init+0x50>)
 8005cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cf2:	220c      	movs	r2, #12
 8005cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d02:	4805      	ldr	r0, [pc, #20]	; (8005d18 <MX_USART3_UART_Init+0x4c>)
 8005d04:	f004 fd71 	bl	800a7ea <HAL_UART_Init>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005d0e:	f7ff faf1 	bl	80052f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200018dc 	.word	0x200018dc
 8005d1c:	40004800 	.word	0x40004800

08005d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	; 0x30
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d28:	f107 0320 	add.w	r3, r7, #32
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a95      	ldr	r2, [pc, #596]	; (8005f90 <HAL_UART_MspInit+0x270>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d159      	bne.n	8005df4 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d40:	4b94      	ldr	r3, [pc, #592]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	4a93      	ldr	r2, [pc, #588]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d4a:	6193      	str	r3, [r2, #24]
 8005d4c:	4b91      	ldr	r3, [pc, #580]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d58:	4b8e      	ldr	r3, [pc, #568]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	4a8d      	ldr	r2, [pc, #564]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6193      	str	r3, [r2, #24]
 8005d64:	4b8b      	ldr	r3, [pc, #556]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d76:	2302      	movs	r3, #2
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7e:	f107 0320 	add.w	r3, r7, #32
 8005d82:	4619      	mov	r1, r3
 8005d84:	4884      	ldr	r0, [pc, #528]	; (8005f98 <HAL_UART_MspInit+0x278>)
 8005d86:	f000 fe21 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d98:	f107 0320 	add.w	r3, r7, #32
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	487e      	ldr	r0, [pc, #504]	; (8005f98 <HAL_UART_MspInit+0x278>)
 8005da0:	f000 fe14 	bl	80069cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005da4:	4b7d      	ldr	r3, [pc, #500]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005da6:	4a7e      	ldr	r2, [pc, #504]	; (8005fa0 <HAL_UART_MspInit+0x280>)
 8005da8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005daa:	4b7c      	ldr	r3, [pc, #496]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db0:	4b7a      	ldr	r3, [pc, #488]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005db6:	4b79      	ldr	r3, [pc, #484]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005db8:	2280      	movs	r2, #128	; 0x80
 8005dba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dbc:	4b77      	ldr	r3, [pc, #476]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc2:	4b76      	ldr	r3, [pc, #472]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005dc8:	4b74      	ldr	r3, [pc, #464]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dca:	2220      	movs	r2, #32
 8005dcc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005dce:	4b73      	ldr	r3, [pc, #460]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005dd6:	4871      	ldr	r0, [pc, #452]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dd8:	f000 fb38 	bl	800644c <HAL_DMA_Init>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005de2:	f7ff fa87 	bl	80052f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a6c      	ldr	r2, [pc, #432]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34
 8005dec:	4a6b      	ldr	r2, [pc, #428]	; (8005f9c <HAL_UART_MspInit+0x27c>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005df2:	e0c9      	b.n	8005f88 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART2)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6a      	ldr	r2, [pc, #424]	; (8005fa4 <HAL_UART_MspInit+0x284>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f040 8085 	bne.w	8005f0a <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e00:	4b64      	ldr	r3, [pc, #400]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4a63      	ldr	r2, [pc, #396]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0a:	61d3      	str	r3, [r2, #28]
 8005e0c:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e18:	4b5e      	ldr	r3, [pc, #376]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e1e:	f043 0304 	orr.w	r3, r3, #4
 8005e22:	6193      	str	r3, [r2, #24]
 8005e24:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e30:	2304      	movs	r3, #4
 8005e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	2302      	movs	r3, #2
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e3c:	f107 0320 	add.w	r3, r7, #32
 8005e40:	4619      	mov	r1, r3
 8005e42:	4855      	ldr	r0, [pc, #340]	; (8005f98 <HAL_UART_MspInit+0x278>)
 8005e44:	f000 fdc2 	bl	80069cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e48:	2308      	movs	r3, #8
 8005e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e54:	f107 0320 	add.w	r3, r7, #32
 8005e58:	4619      	mov	r1, r3
 8005e5a:	484f      	ldr	r0, [pc, #316]	; (8005f98 <HAL_UART_MspInit+0x278>)
 8005e5c:	f000 fdb6 	bl	80069cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005e60:	4b51      	ldr	r3, [pc, #324]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e62:	4a52      	ldr	r2, [pc, #328]	; (8005fac <HAL_UART_MspInit+0x28c>)
 8005e64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e66:	4b50      	ldr	r3, [pc, #320]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6c:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e72:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e78:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005e84:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e86:	2220      	movs	r2, #32
 8005e88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e90:	4845      	ldr	r0, [pc, #276]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005e92:	f000 fadb 	bl	800644c <HAL_DMA_Init>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8005e9c:	f7ff fa2a 	bl	80052f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a41      	ldr	r2, [pc, #260]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ea6:	4a40      	ldr	r2, [pc, #256]	; (8005fa8 <HAL_UART_MspInit+0x288>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005eac:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005eae:	4a41      	ldr	r2, [pc, #260]	; (8005fb4 <HAL_UART_MspInit+0x294>)
 8005eb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eca:	4b39      	ldr	r3, [pc, #228]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ed6:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005edc:	4834      	ldr	r0, [pc, #208]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ede:	f000 fab5 	bl	800644c <HAL_DMA_Init>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8005ee8:	f7ff fa04 	bl	80052f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a30      	ldr	r2, [pc, #192]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef2:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <HAL_UART_MspInit+0x290>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	2026      	movs	r0, #38	; 0x26
 8005efe:	f000 fa60 	bl	80063c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f02:	2026      	movs	r0, #38	; 0x26
 8005f04:	f000 fa79 	bl	80063fa <HAL_NVIC_EnableIRQ>
}
 8005f08:	e03e      	b.n	8005f88 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <HAL_UART_MspInit+0x298>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d139      	bne.n	8005f88 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f14:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f1e:	61d3      	str	r3, [r2, #28]
 8005f20:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	6193      	str	r3, [r2, #24]
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <HAL_UART_MspInit+0x274>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f52:	f107 0320 	add.w	r3, r7, #32
 8005f56:	4619      	mov	r1, r3
 8005f58:	4818      	ldr	r0, [pc, #96]	; (8005fbc <HAL_UART_MspInit+0x29c>)
 8005f5a:	f000 fd37 	bl	80069cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f6c:	f107 0320 	add.w	r3, r7, #32
 8005f70:	4619      	mov	r1, r3
 8005f72:	4812      	ldr	r0, [pc, #72]	; (8005fbc <HAL_UART_MspInit+0x29c>)
 8005f74:	f000 fd2a 	bl	80069cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	2027      	movs	r0, #39	; 0x27
 8005f7e:	f000 fa20 	bl	80063c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005f82:	2027      	movs	r0, #39	; 0x27
 8005f84:	f000 fa39 	bl	80063fa <HAL_NVIC_EnableIRQ>
}
 8005f88:	bf00      	nop
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40013800 	.word	0x40013800
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010800 	.word	0x40010800
 8005f9c:	2000191c 	.word	0x2000191c
 8005fa0:	40020058 	.word	0x40020058
 8005fa4:	40004400 	.word	0x40004400
 8005fa8:	20001898 	.word	0x20001898
 8005fac:	4002006c 	.word	0x4002006c
 8005fb0:	20001960 	.word	0x20001960
 8005fb4:	40020080 	.word	0x40020080
 8005fb8:	40004800 	.word	0x40004800
 8005fbc:	40010c00 	.word	0x40010c00

08005fc0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a23      	ldr	r2, [pc, #140]	; (800605c <HAL_UART_MspDeInit+0x9c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d110      	bne.n	8005ff4 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005fd2:	4b23      	ldr	r3, [pc, #140]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 8005fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fdc:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005fde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fe2:	4820      	ldr	r0, [pc, #128]	; (8006064 <HAL_UART_MspDeInit+0xa4>)
 8005fe4:	f000 fe76 	bl	8006cd4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fa87 	bl	8006500 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8005ff2:	e02f      	b.n	8006054 <HAL_UART_MspDeInit+0x94>
  else if(uartHandle->Instance==USART2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <HAL_UART_MspDeInit+0xa8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d117      	bne.n	800602e <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005ffe:	4b18      	ldr	r3, [pc, #96]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4a17      	ldr	r2, [pc, #92]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 8006004:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006008:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800600a:	210c      	movs	r1, #12
 800600c:	4815      	ldr	r0, [pc, #84]	; (8006064 <HAL_UART_MspDeInit+0xa4>)
 800600e:	f000 fe61 	bl	8006cd4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fa72 	bl	8006500 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fa6d 	bl	8006500 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006026:	2026      	movs	r0, #38	; 0x26
 8006028:	f000 f9f5 	bl	8006416 <HAL_NVIC_DisableIRQ>
}
 800602c:	e012      	b.n	8006054 <HAL_UART_MspDeInit+0x94>
  else if(uartHandle->Instance==USART3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0e      	ldr	r2, [pc, #56]	; (800606c <HAL_UART_MspDeInit+0xac>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d10d      	bne.n	8006054 <HAL_UART_MspDeInit+0x94>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4a08      	ldr	r2, [pc, #32]	; (8006060 <HAL_UART_MspDeInit+0xa0>)
 800603e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006042:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8006044:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006048:	4809      	ldr	r0, [pc, #36]	; (8006070 <HAL_UART_MspDeInit+0xb0>)
 800604a:	f000 fe43 	bl	8006cd4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800604e:	2027      	movs	r0, #39	; 0x27
 8006050:	f000 f9e1 	bl	8006416 <HAL_NVIC_DisableIRQ>
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40013800 	.word	0x40013800
 8006060:	40021000 	.word	0x40021000
 8006064:	40010800 	.word	0x40010800
 8006068:	40004400 	.word	0x40004400
 800606c:	40004800 	.word	0x40004800
 8006070:	40010c00 	.word	0x40010c00

08006074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006076:	e003      	b.n	8006080 <LoopCopyDataInit>

08006078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800607a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800607c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800607e:	3104      	adds	r1, #4

08006080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006080:	480a      	ldr	r0, [pc, #40]	; (80060ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006088:	d3f6      	bcc.n	8006078 <CopyDataInit>
  ldr r2, =_sbss
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800608c:	e002      	b.n	8006094 <LoopFillZerobss>

0800608e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800608e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006090:	f842 3b04 	str.w	r3, [r2], #4

08006094 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006094:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006098:	d3f9      	bcc.n	800608e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800609a:	f7ff fb2b 	bl	80056f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800609e:	f00d f81d 	bl	80130dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060a2:	f7fc fe51 	bl	8002d48 <main>
  bx lr
 80060a6:	4770      	bx	lr
  ldr r3, =_sidata
 80060a8:	08014a28 	.word	0x08014a28
  ldr r0, =_sdata
 80060ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80060b0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80060b4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80060b8:	20001a38 	.word	0x20001a38

080060bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060bc:	e7fe      	b.n	80060bc <ADC1_2_IRQHandler>
	...

080060c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <HAL_Init+0x28>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a07      	ldr	r2, [pc, #28]	; (80060e8 <HAL_Init+0x28>)
 80060ca:	f043 0310 	orr.w	r3, r3, #16
 80060ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060d0:	2003      	movs	r0, #3
 80060d2:	f000 f96b 	bl	80063ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060d6:	2000      	movs	r0, #0
 80060d8:	f000 f808 	bl	80060ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060dc:	f7ff f982 	bl	80053e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40022000 	.word	0x40022000

080060ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_InitTick+0x54>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_InitTick+0x58>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006102:	fbb3 f3f1 	udiv	r3, r3, r1
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f991 	bl	8006432 <HAL_SYSTICK_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e00e      	b.n	8006138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d80a      	bhi.n	8006136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006120:	2200      	movs	r2, #0
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	f000 f94b 	bl	80063c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800612c:	4a06      	ldr	r2, [pc, #24]	; (8006148 <HAL_InitTick+0x5c>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000004 	.word	0x20000004
 8006144:	2000000c 	.word	0x2000000c
 8006148:	20000008 	.word	0x20000008

0800614c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_IncTick+0x1c>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_IncTick+0x20>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4413      	add	r3, r2
 800615c:	4a03      	ldr	r2, [pc, #12]	; (800616c <HAL_IncTick+0x20>)
 800615e:	6013      	str	r3, [r2, #0]
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	2000000c 	.word	0x2000000c
 800616c:	20001a24 	.word	0x20001a24

08006170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return uwTick;
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <HAL_GetTick+0x10>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	20001a24 	.word	0x20001a24

08006184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800618c:	f7ff fff0 	bl	8006170 <HAL_GetTick>
 8006190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d005      	beq.n	80061aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <HAL_Delay+0x44>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061aa:	bf00      	nop
 80061ac:	f7ff ffe0 	bl	8006170 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d8f7      	bhi.n	80061ac <HAL_Delay+0x28>
  {
  }
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000000c 	.word	0x2000000c

080061cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <__NVIC_SetPriorityGrouping+0x44>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061e8:	4013      	ands	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061fe:	4a04      	ldr	r2, [pc, #16]	; (8006210 <__NVIC_SetPriorityGrouping+0x44>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	60d3      	str	r3, [r2, #12]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000ed00 	.word	0xe000ed00

08006214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <__NVIC_GetPriorityGrouping+0x18>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	0a1b      	lsrs	r3, r3, #8
 800621e:	f003 0307 	and.w	r3, r3, #7
}
 8006222:	4618      	mov	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000ed00 	.word	0xe000ed00

08006230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	2b00      	cmp	r3, #0
 8006240:	db0b      	blt.n	800625a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	f003 021f 	and.w	r2, r3, #31
 8006248:	4906      	ldr	r1, [pc, #24]	; (8006264 <__NVIC_EnableIRQ+0x34>)
 800624a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2001      	movs	r0, #1
 8006252:	fa00 f202 	lsl.w	r2, r0, r2
 8006256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	e000e100 	.word	0xe000e100

08006268 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	2b00      	cmp	r3, #0
 8006278:	db12      	blt.n	80062a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	f003 021f 	and.w	r2, r3, #31
 8006280:	490a      	ldr	r1, [pc, #40]	; (80062ac <__NVIC_DisableIRQ+0x44>)
 8006282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2001      	movs	r0, #1
 800628a:	fa00 f202 	lsl.w	r2, r0, r2
 800628e:	3320      	adds	r3, #32
 8006290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006294:	f3bf 8f4f 	dsb	sy
}
 8006298:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800629a:	f3bf 8f6f 	isb	sy
}
 800629e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	e000e100 	.word	0xe000e100

080062b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	db0a      	blt.n	80062da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	490c      	ldr	r1, [pc, #48]	; (80062fc <__NVIC_SetPriority+0x4c>)
 80062ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ce:	0112      	lsls	r2, r2, #4
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	440b      	add	r3, r1
 80062d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062d8:	e00a      	b.n	80062f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4908      	ldr	r1, [pc, #32]	; (8006300 <__NVIC_SetPriority+0x50>)
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	3b04      	subs	r3, #4
 80062e8:	0112      	lsls	r2, r2, #4
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	440b      	add	r3, r1
 80062ee:	761a      	strb	r2, [r3, #24]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e100 	.word	0xe000e100
 8006300:	e000ed00 	.word	0xe000ed00

08006304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f1c3 0307 	rsb	r3, r3, #7
 800631e:	2b04      	cmp	r3, #4
 8006320:	bf28      	it	cs
 8006322:	2304      	movcs	r3, #4
 8006324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3304      	adds	r3, #4
 800632a:	2b06      	cmp	r3, #6
 800632c:	d902      	bls.n	8006334 <NVIC_EncodePriority+0x30>
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3b03      	subs	r3, #3
 8006332:	e000      	b.n	8006336 <NVIC_EncodePriority+0x32>
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006338:	f04f 32ff 	mov.w	r2, #4294967295
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43da      	mvns	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	401a      	ands	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800634c:	f04f 31ff 	mov.w	r1, #4294967295
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	fa01 f303 	lsl.w	r3, r1, r3
 8006356:	43d9      	mvns	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800635c:	4313      	orrs	r3, r2
         );
}
 800635e:	4618      	mov	r0, r3
 8006360:	3724      	adds	r7, #36	; 0x24
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3b01      	subs	r3, #1
 8006374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006378:	d301      	bcc.n	800637e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800637a:	2301      	movs	r3, #1
 800637c:	e00f      	b.n	800639e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800637e:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <SysTick_Config+0x40>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3b01      	subs	r3, #1
 8006384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006386:	210f      	movs	r1, #15
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	f7ff ff90 	bl	80062b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006390:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <SysTick_Config+0x40>)
 8006392:	2200      	movs	r2, #0
 8006394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006396:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <SysTick_Config+0x40>)
 8006398:	2207      	movs	r2, #7
 800639a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	e000e010 	.word	0xe000e010

080063ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff09 	bl	80061cc <__NVIC_SetPriorityGrouping>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	4603      	mov	r3, r0
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063d4:	f7ff ff1e 	bl	8006214 <__NVIC_GetPriorityGrouping>
 80063d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	6978      	ldr	r0, [r7, #20]
 80063e0:	f7ff ff90 	bl	8006304 <NVIC_EncodePriority>
 80063e4:	4602      	mov	r2, r0
 80063e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff ff5f 	bl	80062b0 <__NVIC_SetPriority>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	4603      	mov	r3, r0
 8006402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff11 	bl	8006230 <__NVIC_EnableIRQ>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	4603      	mov	r3, r0
 800641e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff ff1f 	bl	8006268 <__NVIC_DisableIRQ>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff ff94 	bl	8006368 <SysTick_Config>
 8006440:	4603      	mov	r3, r0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e043      	b.n	80064ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <HAL_DMA_Init+0xa8>)
 800646a:	4413      	add	r3, r2
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <HAL_DMA_Init+0xac>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	009a      	lsls	r2, r3, #2
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_DMA_Init+0xb0>)
 800647e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006496:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800649a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80064a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	bffdfff8 	.word	0xbffdfff8
 80064f8:	cccccccd 	.word	0xcccccccd
 80064fc:	40020000 	.word	0x40020000

08006500 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e046      	b.n	80065a0 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_DMA_DeInit+0xac>)
 800654a:	4413      	add	r3, r2
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_DMA_DeInit+0xb0>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	009a      	lsls	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_DMA_DeInit+0xb4>)
 800655e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f202 	lsl.w	r2, r1, r2
 800656e:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	bffdfff8 	.word	0xbffdfff8
 80065b0:	cccccccd 	.word	0xcccccccd
 80065b4:	40020000 	.word	0x40020000

080065b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_DMA_Start_IT+0x20>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e04a      	b.n	800666e <HAL_DMA_Start_IT+0xb6>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d13a      	bne.n	8006660 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0201 	bic.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f9ae 	bl	8006970 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 020e 	orr.w	r2, r2, #14
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e00f      	b.n	800664e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0204 	bic.w	r2, r2, #4
 800663c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 020a 	orr.w	r2, r2, #10
 800664c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e005      	b.n	800666c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006668:	2302      	movs	r3, #2
 800666a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800668a:	2b02      	cmp	r3, #2
 800668c:	d005      	beq.n	800669a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	e051      	b.n	800673e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 020e 	bic.w	r2, r2, #14
 80066a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a22      	ldr	r2, [pc, #136]	; (8006748 <HAL_DMA_Abort_IT+0xd0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d029      	beq.n	8006718 <HAL_DMA_Abort_IT+0xa0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a20      	ldr	r2, [pc, #128]	; (800674c <HAL_DMA_Abort_IT+0xd4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMA_Abort_IT+0x9c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <HAL_DMA_Abort_IT+0xd8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01a      	beq.n	800670e <HAL_DMA_Abort_IT+0x96>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <HAL_DMA_Abort_IT+0xdc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d012      	beq.n	8006708 <HAL_DMA_Abort_IT+0x90>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <HAL_DMA_Abort_IT+0xe0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00a      	beq.n	8006702 <HAL_DMA_Abort_IT+0x8a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	; (800675c <HAL_DMA_Abort_IT+0xe4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d102      	bne.n	80066fc <HAL_DMA_Abort_IT+0x84>
 80066f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80066fa:	e00e      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 80066fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006700:	e00b      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 8006702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006706:	e008      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 8006708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670c:	e005      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 800670e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006712:	e002      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 8006714:	2310      	movs	r3, #16
 8006716:	e000      	b.n	800671a <HAL_DMA_Abort_IT+0xa2>
 8006718:	2301      	movs	r3, #1
 800671a:	4a11      	ldr	r2, [pc, #68]	; (8006760 <HAL_DMA_Abort_IT+0xe8>)
 800671c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
    } 
  }
  return status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40020008 	.word	0x40020008
 800674c:	4002001c 	.word	0x4002001c
 8006750:	40020030 	.word	0x40020030
 8006754:	40020044 	.word	0x40020044
 8006758:	40020058 	.word	0x40020058
 800675c:	4002006c 	.word	0x4002006c
 8006760:	40020000 	.word	0x40020000

08006764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2204      	movs	r2, #4
 8006782:	409a      	lsls	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d04f      	beq.n	800682c <HAL_DMA_IRQHandler+0xc8>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d04a      	beq.n	800682c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a66      	ldr	r2, [pc, #408]	; (8006954 <HAL_DMA_IRQHandler+0x1f0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d029      	beq.n	8006812 <HAL_DMA_IRQHandler+0xae>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a65      	ldr	r2, [pc, #404]	; (8006958 <HAL_DMA_IRQHandler+0x1f4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <HAL_DMA_IRQHandler+0xaa>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a63      	ldr	r2, [pc, #396]	; (800695c <HAL_DMA_IRQHandler+0x1f8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01a      	beq.n	8006808 <HAL_DMA_IRQHandler+0xa4>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a62      	ldr	r2, [pc, #392]	; (8006960 <HAL_DMA_IRQHandler+0x1fc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d012      	beq.n	8006802 <HAL_DMA_IRQHandler+0x9e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a60      	ldr	r2, [pc, #384]	; (8006964 <HAL_DMA_IRQHandler+0x200>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00a      	beq.n	80067fc <HAL_DMA_IRQHandler+0x98>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <HAL_DMA_IRQHandler+0x204>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d102      	bne.n	80067f6 <HAL_DMA_IRQHandler+0x92>
 80067f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067f4:	e00e      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 80067f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067fa:	e00b      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 80067fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006800:	e008      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 8006802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006806:	e005      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 8006808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680c:	e002      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	e000      	b.n	8006814 <HAL_DMA_IRQHandler+0xb0>
 8006812:	2304      	movs	r3, #4
 8006814:	4a55      	ldr	r2, [pc, #340]	; (800696c <HAL_DMA_IRQHandler+0x208>)
 8006816:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8094 	beq.w	800694a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800682a:	e08e      	b.n	800694a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006830:	2202      	movs	r2, #2
 8006832:	409a      	lsls	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d056      	beq.n	80068ea <HAL_DMA_IRQHandler+0x186>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d051      	beq.n	80068ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 020a 	bic.w	r2, r2, #10
 8006862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a38      	ldr	r2, [pc, #224]	; (8006954 <HAL_DMA_IRQHandler+0x1f0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d029      	beq.n	80068ca <HAL_DMA_IRQHandler+0x166>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a37      	ldr	r2, [pc, #220]	; (8006958 <HAL_DMA_IRQHandler+0x1f4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d022      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x162>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a35      	ldr	r2, [pc, #212]	; (800695c <HAL_DMA_IRQHandler+0x1f8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01a      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x15c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a34      	ldr	r2, [pc, #208]	; (8006960 <HAL_DMA_IRQHandler+0x1fc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d012      	beq.n	80068ba <HAL_DMA_IRQHandler+0x156>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a32      	ldr	r2, [pc, #200]	; (8006964 <HAL_DMA_IRQHandler+0x200>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00a      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x150>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a31      	ldr	r2, [pc, #196]	; (8006968 <HAL_DMA_IRQHandler+0x204>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d102      	bne.n	80068ae <HAL_DMA_IRQHandler+0x14a>
 80068a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068ac:	e00e      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b2:	e00b      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068b8:	e008      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068be:	e005      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c4:	e002      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068c6:	2320      	movs	r3, #32
 80068c8:	e000      	b.n	80068cc <HAL_DMA_IRQHandler+0x168>
 80068ca:	2302      	movs	r3, #2
 80068cc:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_DMA_IRQHandler+0x208>)
 80068ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d034      	beq.n	800694a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80068e8:	e02f      	b.n	800694a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2208      	movs	r2, #8
 80068f0:	409a      	lsls	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_DMA_IRQHandler+0x1e8>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d023      	beq.n	800694c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 020e 	bic.w	r2, r2, #14
 8006912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2101      	movs	r1, #1
 800691e:	fa01 f202 	lsl.w	r2, r1, r2
 8006922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
    }
  }
  return;
 800694a:	bf00      	nop
 800694c:	bf00      	nop
}
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40020008 	.word	0x40020008
 8006958:	4002001c 	.word	0x4002001c
 800695c:	40020030 	.word	0x40020030
 8006960:	40020044 	.word	0x40020044
 8006964:	40020058 	.word	0x40020058
 8006968:	4002006c 	.word	0x4002006c
 800696c:	40020000 	.word	0x40020000

08006970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	2101      	movs	r1, #1
 8006988:	fa01 f202 	lsl.w	r2, r1, r2
 800698c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b10      	cmp	r3, #16
 800699c:	d108      	bne.n	80069b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069ae:	e007      	b.n	80069c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
	...

080069cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b08b      	sub	sp, #44	; 0x2c
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069da:	2300      	movs	r3, #0
 80069dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069de:	e169      	b.n	8006cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069e0:	2201      	movs	r2, #1
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	f040 8158 	bne.w	8006cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a9a      	ldr	r2, [pc, #616]	; (8006c6c <HAL_GPIO_Init+0x2a0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d05e      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a08:	4a98      	ldr	r2, [pc, #608]	; (8006c6c <HAL_GPIO_Init+0x2a0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d875      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a0e:	4a98      	ldr	r2, [pc, #608]	; (8006c70 <HAL_GPIO_Init+0x2a4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d058      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a14:	4a96      	ldr	r2, [pc, #600]	; (8006c70 <HAL_GPIO_Init+0x2a4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d86f      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a1a:	4a96      	ldr	r2, [pc, #600]	; (8006c74 <HAL_GPIO_Init+0x2a8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d052      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a20:	4a94      	ldr	r2, [pc, #592]	; (8006c74 <HAL_GPIO_Init+0x2a8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d869      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a26:	4a94      	ldr	r2, [pc, #592]	; (8006c78 <HAL_GPIO_Init+0x2ac>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d04c      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a2c:	4a92      	ldr	r2, [pc, #584]	; (8006c78 <HAL_GPIO_Init+0x2ac>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d863      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a32:	4a92      	ldr	r2, [pc, #584]	; (8006c7c <HAL_GPIO_Init+0x2b0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d046      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a38:	4a90      	ldr	r2, [pc, #576]	; (8006c7c <HAL_GPIO_Init+0x2b0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d85d      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a3e:	2b12      	cmp	r3, #18
 8006a40:	d82a      	bhi.n	8006a98 <HAL_GPIO_Init+0xcc>
 8006a42:	2b12      	cmp	r3, #18
 8006a44:	d859      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <HAL_GPIO_Init+0x80>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006ab3 	.word	0x08006ab3
 8006a58:	08006af5 	.word	0x08006af5
 8006a5c:	08006afb 	.word	0x08006afb
 8006a60:	08006afb 	.word	0x08006afb
 8006a64:	08006afb 	.word	0x08006afb
 8006a68:	08006afb 	.word	0x08006afb
 8006a6c:	08006afb 	.word	0x08006afb
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006afb 	.word	0x08006afb
 8006a78:	08006afb 	.word	0x08006afb
 8006a7c:	08006afb 	.word	0x08006afb
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006afb 	.word	0x08006afb
 8006a88:	08006afb 	.word	0x08006afb
 8006a8c:	08006afb 	.word	0x08006afb
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	4a79      	ldr	r2, [pc, #484]	; (8006c80 <HAL_GPIO_Init+0x2b4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a9e:	e02c      	b.n	8006afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	623b      	str	r3, [r7, #32]
          break;
 8006aa6:	e029      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	3304      	adds	r3, #4
 8006aae:	623b      	str	r3, [r7, #32]
          break;
 8006ab0:	e024      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	623b      	str	r3, [r7, #32]
          break;
 8006aba:	e01f      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	623b      	str	r3, [r7, #32]
          break;
 8006ac4:	e01a      	b.n	8006afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ace:	2304      	movs	r3, #4
 8006ad0:	623b      	str	r3, [r7, #32]
          break;
 8006ad2:	e013      	b.n	8006afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d105      	bne.n	8006ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006adc:	2308      	movs	r3, #8
 8006ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	611a      	str	r2, [r3, #16]
          break;
 8006ae6:	e009      	b.n	8006afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ae8:	2308      	movs	r3, #8
 8006aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	615a      	str	r2, [r3, #20]
          break;
 8006af2:	e003      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006af4:	2300      	movs	r3, #0
 8006af6:	623b      	str	r3, [r7, #32]
          break;
 8006af8:	e000      	b.n	8006afc <HAL_GPIO_Init+0x130>
          break;
 8006afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d801      	bhi.n	8006b06 <HAL_GPIO_Init+0x13a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	e001      	b.n	8006b0a <HAL_GPIO_Init+0x13e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2bff      	cmp	r3, #255	; 0xff
 8006b10:	d802      	bhi.n	8006b18 <HAL_GPIO_Init+0x14c>
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	e002      	b.n	8006b1e <HAL_GPIO_Init+0x152>
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	3b08      	subs	r3, #8
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	210f      	movs	r1, #15
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	6a39      	ldr	r1, [r7, #32]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80b1 	beq.w	8006cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	; (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	4a4c      	ldr	r2, [pc, #304]	; (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6193      	str	r3, [r2, #24]
 8006b58:	4b4a      	ldr	r3, [pc, #296]	; (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b64:	4a48      	ldr	r2, [pc, #288]	; (8006c88 <HAL_GPIO_Init+0x2bc>)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <HAL_GPIO_Init+0x2c0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_GPIO_Init+0x1ec>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3f      	ldr	r2, [pc, #252]	; (8006c90 <HAL_GPIO_Init+0x2c4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00d      	beq.n	8006bb4 <HAL_GPIO_Init+0x1e8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3e      	ldr	r2, [pc, #248]	; (8006c94 <HAL_GPIO_Init+0x2c8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <HAL_GPIO_Init+0x1e4>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3d      	ldr	r2, [pc, #244]	; (8006c98 <HAL_GPIO_Init+0x2cc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d101      	bne.n	8006bac <HAL_GPIO_Init+0x1e0>
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bac:	2304      	movs	r3, #4
 8006bae:	e004      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e002      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	f002 0203 	and.w	r2, r2, #3
 8006bc0:	0092      	lsls	r2, r2, #2
 8006bc2:	4093      	lsls	r3, r2
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bca:	492f      	ldr	r1, [pc, #188]	; (8006c88 <HAL_GPIO_Init+0x2bc>)
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006be4:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	492c      	ldr	r1, [pc, #176]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	600b      	str	r3, [r1, #0]
 8006bf0:	e006      	b.n	8006c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	4928      	ldr	r1, [pc, #160]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c0c:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	4922      	ldr	r1, [pc, #136]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c1a:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	491e      	ldr	r1, [pc, #120]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	4918      	ldr	r1, [pc, #96]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	608b      	str	r3, [r1, #8]
 8006c40:	e006      	b.n	8006c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c42:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	4914      	ldr	r1, [pc, #80]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d021      	beq.n	8006ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60cb      	str	r3, [r1, #12]
 8006c68:	e021      	b.n	8006cae <HAL_GPIO_Init+0x2e2>
 8006c6a:	bf00      	nop
 8006c6c:	10320000 	.word	0x10320000
 8006c70:	10310000 	.word	0x10310000
 8006c74:	10220000 	.word	0x10220000
 8006c78:	10210000 	.word	0x10210000
 8006c7c:	10120000 	.word	0x10120000
 8006c80:	10110000 	.word	0x10110000
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010800 	.word	0x40010800
 8006c90:	40010c00 	.word	0x40010c00
 8006c94:	40011000 	.word	0x40011000
 8006c98:	40011400 	.word	0x40011400
 8006c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_GPIO_Init+0x304>)
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	4909      	ldr	r1, [pc, #36]	; (8006cd0 <HAL_GPIO_Init+0x304>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f47f ae8e 	bne.w	80069e0 <HAL_GPIO_Init+0x14>
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	372c      	adds	r7, #44	; 0x2c
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006ce2:	e09a      	b.n	8006e1a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 808d 	beq.w	8006e14 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006cfa:	4a4e      	ldr	r2, [pc, #312]	; (8006e34 <HAL_GPIO_DeInit+0x160>)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	3302      	adds	r3, #2
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	220f      	movs	r2, #15
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a46      	ldr	r2, [pc, #280]	; (8006e38 <HAL_GPIO_DeInit+0x164>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <HAL_GPIO_DeInit+0x78>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a45      	ldr	r2, [pc, #276]	; (8006e3c <HAL_GPIO_DeInit+0x168>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00d      	beq.n	8006d48 <HAL_GPIO_DeInit+0x74>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a44      	ldr	r2, [pc, #272]	; (8006e40 <HAL_GPIO_DeInit+0x16c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <HAL_GPIO_DeInit+0x70>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a43      	ldr	r2, [pc, #268]	; (8006e44 <HAL_GPIO_DeInit+0x170>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d101      	bne.n	8006d40 <HAL_GPIO_DeInit+0x6c>
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e006      	b.n	8006d4e <HAL_GPIO_DeInit+0x7a>
 8006d40:	2304      	movs	r3, #4
 8006d42:	e004      	b.n	8006d4e <HAL_GPIO_DeInit+0x7a>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e002      	b.n	8006d4e <HAL_GPIO_DeInit+0x7a>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <HAL_GPIO_DeInit+0x7a>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	f002 0203 	and.w	r2, r2, #3
 8006d54:	0092      	lsls	r2, r2, #2
 8006d56:	4093      	lsls	r3, r2
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d132      	bne.n	8006dc4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	220f      	movs	r2, #15
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006d6e:	4a31      	ldr	r2, [pc, #196]	; (8006e34 <HAL_GPIO_DeInit+0x160>)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	089b      	lsrs	r3, r3, #2
 8006d74:	3302      	adds	r3, #2
 8006d76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	43da      	mvns	r2, r3
 8006d7e:	482d      	ldr	r0, [pc, #180]	; (8006e34 <HAL_GPIO_DeInit+0x160>)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	400a      	ands	r2, r1
 8006d86:	3302      	adds	r3, #2
 8006d88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006d8c:	4b2e      	ldr	r3, [pc, #184]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	492c      	ldr	r1, [pc, #176]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	4929      	ldr	r1, [pc, #164]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006da8:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	43db      	mvns	r3, r3
 8006db0:	4925      	ldr	r1, [pc, #148]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006db6:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	4922      	ldr	r1, [pc, #136]	; (8006e48 <HAL_GPIO_DeInit+0x174>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2bff      	cmp	r3, #255	; 0xff
 8006dc8:	d801      	bhi.n	8006dce <HAL_GPIO_DeInit+0xfa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	e001      	b.n	8006dd2 <HAL_GPIO_DeInit+0xfe>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2bff      	cmp	r3, #255	; 0xff
 8006dd8:	d802      	bhi.n	8006de0 <HAL_GPIO_DeInit+0x10c>
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	e002      	b.n	8006de6 <HAL_GPIO_DeInit+0x112>
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3b08      	subs	r3, #8
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	210f      	movs	r1, #15
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	2104      	movs	r1, #4
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	431a      	orrs	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	3301      	adds	r3, #1
 8006e18:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f47f af5e 	bne.w	8006ce4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40010800 	.word	0x40010800
 8006e3c:	40010c00 	.word	0x40010c00
 8006e40:	40011000 	.word	0x40011000
 8006e44:	40011400 	.word	0x40011400
 8006e48:	40010400 	.word	0x40010400

08006e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	807b      	strh	r3, [r7, #2]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e5c:	787b      	ldrb	r3, [r7, #1]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e62:	887a      	ldrh	r2, [r7, #2]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e68:	e003      	b.n	8006e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e6a:	887b      	ldrh	r3, [r7, #2]
 8006e6c:	041a      	lsls	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e12b      	b.n	80070e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fb fe86 	bl	8002bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2224      	movs	r2, #36	; 0x24
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f002 f84e 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4a81      	ldr	r2, [pc, #516]	; (80070f0 <HAL_I2C_Init+0x274>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d807      	bhi.n	8006f00 <HAL_I2C_Init+0x84>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a80      	ldr	r2, [pc, #512]	; (80070f4 <HAL_I2C_Init+0x278>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	bf94      	ite	ls
 8006ef8:	2301      	movls	r3, #1
 8006efa:	2300      	movhi	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	e006      	b.n	8006f0e <HAL_I2C_Init+0x92>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a7d      	ldr	r2, [pc, #500]	; (80070f8 <HAL_I2C_Init+0x27c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	bf94      	ite	ls
 8006f08:	2301      	movls	r3, #1
 8006f0a:	2300      	movhi	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e0e7      	b.n	80070e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a78      	ldr	r2, [pc, #480]	; (80070fc <HAL_I2C_Init+0x280>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	0c9b      	lsrs	r3, r3, #18
 8006f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4a6a      	ldr	r2, [pc, #424]	; (80070f0 <HAL_I2C_Init+0x274>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d802      	bhi.n	8006f50 <HAL_I2C_Init+0xd4>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	e009      	b.n	8006f64 <HAL_I2C_Init+0xe8>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	4a69      	ldr	r2, [pc, #420]	; (8007100 <HAL_I2C_Init+0x284>)
 8006f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f60:	099b      	lsrs	r3, r3, #6
 8006f62:	3301      	adds	r3, #1
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	495c      	ldr	r1, [pc, #368]	; (80070f0 <HAL_I2C_Init+0x274>)
 8006f80:	428b      	cmp	r3, r1
 8006f82:	d819      	bhi.n	8006fb8 <HAL_I2C_Init+0x13c>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	1e59      	subs	r1, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f98:	400b      	ands	r3, r1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_I2C_Init+0x138>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1e59      	subs	r1, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fac:	3301      	adds	r3, #1
 8006fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb2:	e051      	b.n	8007058 <HAL_I2C_Init+0x1dc>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	e04f      	b.n	8007058 <HAL_I2C_Init+0x1dc>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d111      	bne.n	8006fe4 <HAL_I2C_Init+0x168>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1e58      	subs	r0, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	440b      	add	r3, r1
 8006fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e012      	b.n	800700a <HAL_I2C_Init+0x18e>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1e58      	subs	r0, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	0099      	lsls	r1, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_I2C_Init+0x196>
 800700e:	2301      	movs	r3, #1
 8007010:	e022      	b.n	8007058 <HAL_I2C_Init+0x1dc>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10e      	bne.n	8007038 <HAL_I2C_Init+0x1bc>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1e58      	subs	r0, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	440b      	add	r3, r1
 8007028:	fbb0 f3f3 	udiv	r3, r0, r3
 800702c:	3301      	adds	r3, #1
 800702e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	e00f      	b.n	8007058 <HAL_I2C_Init+0x1dc>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1e58      	subs	r0, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	0099      	lsls	r1, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	fbb0 f3f3 	udiv	r3, r0, r3
 800704e:	3301      	adds	r3, #1
 8007050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	6809      	ldr	r1, [r1, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6911      	ldr	r1, [r2, #16]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68d2      	ldr	r2, [r2, #12]
 8007092:	4311      	orrs	r1, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	430b      	orrs	r3, r1
 800709a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	000186a0 	.word	0x000186a0
 80070f4:	001e847f 	.word	0x001e847f
 80070f8:	003d08ff 	.word	0x003d08ff
 80070fc:	431bde83 	.word	0x431bde83
 8007100:	10624dd3 	.word	0x10624dd3

08007104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	461a      	mov	r2, r3
 8007110:	460b      	mov	r3, r1
 8007112:	817b      	strh	r3, [r7, #10]
 8007114:	4613      	mov	r3, r2
 8007116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007118:	f7ff f82a 	bl	8006170 <HAL_GetTick>
 800711c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b20      	cmp	r3, #32
 8007128:	f040 80e0 	bne.w	80072ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	2319      	movs	r3, #25
 8007132:	2201      	movs	r2, #1
 8007134:	4970      	ldr	r1, [pc, #448]	; (80072f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 f972 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007142:	2302      	movs	r3, #2
 8007144:	e0d3      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_I2C_Master_Transmit+0x50>
 8007150:	2302      	movs	r3, #2
 8007152:	e0cc      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d007      	beq.n	800717a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2210      	movs	r2, #16
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	893a      	ldrh	r2, [r7, #8]
 80071aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a50      	ldr	r2, [pc, #320]	; (80072fc <HAL_I2C_Master_Transmit+0x1f8>)
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80071bc:	8979      	ldrh	r1, [r7, #10]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fe5e 	bl	8007e84 <I2C_MasterRequestWrite>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e08d      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80071e8:	e066      	b.n	80072b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	6a39      	ldr	r1, [r7, #32]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f001 f9ec 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d107      	bne.n	8007212 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e06b      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d11b      	bne.n	800728c <HAL_I2C_Master_Transmit+0x188>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	d017      	beq.n	800728c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	6a39      	ldr	r1, [r7, #32]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 f9dc 	bl	800864e <I2C_WaitOnBTFFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d107      	bne.n	80072b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e01a      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d194      	bne.n	80071ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	00100002 	.word	0x00100002
 80072fc:	ffff0000 	.word	0xffff0000

08007300 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08c      	sub	sp, #48	; 0x30
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	461a      	mov	r2, r3
 800730c:	460b      	mov	r3, r1
 800730e:	817b      	strh	r3, [r7, #10]
 8007310:	4613      	mov	r3, r2
 8007312:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007318:	f7fe ff2a 	bl	8006170 <HAL_GetTick>
 800731c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b20      	cmp	r3, #32
 8007328:	f040 823f 	bne.w	80077aa <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2319      	movs	r3, #25
 8007332:	2201      	movs	r2, #1
 8007334:	497f      	ldr	r1, [pc, #508]	; (8007534 <HAL_I2C_Master_Receive+0x234>)
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 f872 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007342:	2302      	movs	r3, #2
 8007344:	e232      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_I2C_Master_Receive+0x54>
 8007350:	2302      	movs	r3, #2
 8007352:	e22b      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b01      	cmp	r3, #1
 8007368:	d007      	beq.n	800737a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2222      	movs	r2, #34	; 0x22
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2210      	movs	r2, #16
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	893a      	ldrh	r2, [r7, #8]
 80073aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a5f      	ldr	r2, [pc, #380]	; (8007538 <HAL_I2C_Master_Receive+0x238>)
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80073bc:	8979      	ldrh	r1, [r7, #10]
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fde0 	bl	8007f88 <I2C_MasterRequestRead>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e1ec      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d113      	bne.n	8007402 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e1c0      	b.n	8007784 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	2b01      	cmp	r3, #1
 8007408:	d11e      	bne.n	8007448 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800741a:	b672      	cpsid	i
}
 800741c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007444:	b662      	cpsie	i
}
 8007446:	e035      	b.n	80074b4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744c:	2b02      	cmp	r3, #2
 800744e:	d11e      	bne.n	800748e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800745e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007460:	b672      	cpsid	i
}
 8007462:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800748a:	b662      	cpsie	i
}
 800748c:	e012      	b.n	80074b4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800749c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80074b4:	e166      	b.n	8007784 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	f200 811f 	bhi.w	80076fe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d123      	bne.n	8007510 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f001 f8ff 	bl	80086d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e167      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800750e:	e139      	b.n	8007784 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007514:	2b02      	cmp	r3, #2
 8007516:	d152      	bne.n	80075be <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	2200      	movs	r2, #0
 8007520:	4906      	ldr	r1, [pc, #24]	; (800753c <HAL_I2C_Master_Receive+0x23c>)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 ff7c 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e13c      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
 8007532:	bf00      	nop
 8007534:	00100002 	.word	0x00100002
 8007538:	ffff0000 	.word	0xffff0000
 800753c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007540:	b672      	cpsid	i
}
 8007542:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007586:	b662      	cpsie	i
}
 8007588:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075bc:	e0e2      	b.n	8007784 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2200      	movs	r2, #0
 80075c6:	497b      	ldr	r1, [pc, #492]	; (80077b4 <HAL_I2C_Master_Receive+0x4b4>)
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 ff29 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0e9      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80075e8:	b672      	cpsid	i
}
 80075ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800761e:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <HAL_I2C_Master_Receive+0x4b8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	08db      	lsrs	r3, r3, #3
 8007624:	4a65      	ldr	r2, [pc, #404]	; (80077bc <HAL_I2C_Master_Receive+0x4bc>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	0a1a      	lsrs	r2, r3, #8
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	00da      	lsls	r2, r3, #3
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	3b01      	subs	r3, #1
 800763c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d118      	bne.n	8007676 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f043 0220 	orr.w	r2, r3, #32
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007666:	b662      	cpsie	i
}
 8007668:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e09a      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d1d9      	bne.n	8007638 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80076c6:	b662      	cpsie	i
}
 80076c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076fc:	e042      	b.n	8007784 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 ffe4 	bl	80086d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e04c      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b04      	cmp	r3, #4
 8007750:	d118      	bne.n	8007784 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f ae94 	bne.w	80074b6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	; 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	00010004 	.word	0x00010004
 80077b8:	20000004 	.word	0x20000004
 80077bc:	14f8b589 	.word	0x14f8b589

080077c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	817b      	strh	r3, [r7, #10]
 80077d2:	460b      	mov	r3, r1
 80077d4:	813b      	strh	r3, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077da:	f7fe fcc9 	bl	8006170 <HAL_GetTick>
 80077de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	f040 80d9 	bne.w	80079a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2319      	movs	r3, #25
 80077f4:	2201      	movs	r2, #1
 80077f6:	496d      	ldr	r1, [pc, #436]	; (80079ac <HAL_I2C_Mem_Write+0x1ec>)
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fe11 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
 8007806:	e0cc      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_I2C_Mem_Write+0x56>
 8007812:	2302      	movs	r3, #2
 8007814:	e0c5      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d007      	beq.n	800783c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2221      	movs	r2, #33	; 0x21
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a3a      	ldr	r2, [r7, #32]
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800786c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a4d      	ldr	r2, [pc, #308]	; (80079b0 <HAL_I2C_Mem_Write+0x1f0>)
 800787c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800787e:	88f8      	ldrh	r0, [r7, #6]
 8007880:	893a      	ldrh	r2, [r7, #8]
 8007882:	8979      	ldrh	r1, [r7, #10]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fc48 	bl	8008124 <I2C_RequestMemoryWrite>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d052      	beq.n	8007940 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e081      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 fe92 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00d      	beq.n	80078ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d107      	bne.n	80078c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e06b      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b04      	cmp	r3, #4
 8007906:	d11b      	bne.n	8007940 <HAL_I2C_Mem_Write+0x180>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d017      	beq.n	8007940 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1aa      	bne.n	800789e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fe7e 	bl	800864e <I2C_WaitOnBTFFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	2b04      	cmp	r3, #4
 800795e:	d107      	bne.n	8007970 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e016      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	00100002 	.word	0x00100002
 80079b0:	ffff0000 	.word	0xffff0000

080079b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	; 0x30
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	4608      	mov	r0, r1
 80079be:	4611      	mov	r1, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	817b      	strh	r3, [r7, #10]
 80079c6:	460b      	mov	r3, r1
 80079c8:	813b      	strh	r3, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079d2:	f7fe fbcd 	bl	8006170 <HAL_GetTick>
 80079d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	f040 8244 	bne.w	8007e6e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2319      	movs	r3, #25
 80079ec:	2201      	movs	r2, #1
 80079ee:	4982      	ldr	r1, [pc, #520]	; (8007bf8 <HAL_I2C_Mem_Read+0x244>)
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fd15 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80079fc:	2302      	movs	r3, #2
 80079fe:	e237      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_I2C_Mem_Read+0x5a>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e230      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d007      	beq.n	8007a34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2222      	movs	r2, #34	; 0x22
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a62      	ldr	r2, [pc, #392]	; (8007bfc <HAL_I2C_Mem_Read+0x248>)
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a76:	88f8      	ldrh	r0, [r7, #6]
 8007a78:	893a      	ldrh	r2, [r7, #8]
 8007a7a:	8979      	ldrh	r1, [r7, #10]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fbe2 	bl	8008250 <I2C_RequestMemoryRead>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e1ec      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d113      	bne.n	8007ac6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e1c0      	b.n	8007e48 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d11e      	bne.n	8007b0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ade:	b672      	cpsid	i
}
 8007ae0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007b08:	b662      	cpsie	i
}
 8007b0a:	e035      	b.n	8007b78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d11e      	bne.n	8007b52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b24:	b672      	cpsid	i
}
 8007b26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007b4e:	b662      	cpsie	i
}
 8007b50:	e012      	b.n	8007b78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007b78:	e166      	b.n	8007e48 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	f200 811f 	bhi.w	8007dc2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d123      	bne.n	8007bd4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fd9d 	bl	80086d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e167      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bd2:	e139      	b.n	8007e48 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d152      	bne.n	8007c82 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	2200      	movs	r2, #0
 8007be4:	4906      	ldr	r1, [pc, #24]	; (8007c00 <HAL_I2C_Mem_Read+0x24c>)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fc1a 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e13c      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
 8007bf6:	bf00      	nop
 8007bf8:	00100002 	.word	0x00100002
 8007bfc:	ffff0000 	.word	0xffff0000
 8007c00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007c04:	b672      	cpsid	i
}
 8007c06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691a      	ldr	r2, [r3, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007c4a:	b662      	cpsie	i
}
 8007c4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c80:	e0e2      	b.n	8007e48 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	2200      	movs	r2, #0
 8007c8a:	497b      	ldr	r1, [pc, #492]	; (8007e78 <HAL_I2C_Mem_Read+0x4c4>)
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fbc7 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0e9      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007caa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cac:	b672      	cpsid	i
}
 8007cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ce2:	4b66      	ldr	r3, [pc, #408]	; (8007e7c <HAL_I2C_Mem_Read+0x4c8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	08db      	lsrs	r3, r3, #3
 8007ce8:	4a65      	ldr	r2, [pc, #404]	; (8007e80 <HAL_I2C_Mem_Read+0x4cc>)
 8007cea:	fba2 2303 	umull	r2, r3, r2, r3
 8007cee:	0a1a      	lsrs	r2, r3, #8
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00da      	lsls	r2, r3, #3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d118      	bne.n	8007d3a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007d2a:	b662      	cpsie	i
}
 8007d2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e09a      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d1d9      	bne.n	8007cfc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007d8a:	b662      	cpsie	i
}
 8007d8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dc0:	e042      	b.n	8007e48 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fc82 	bl	80086d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e04c      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d118      	bne.n	8007e48 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f ae94 	bne.w	8007b7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007e6e:	2302      	movs	r3, #2
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	00010004 	.word	0x00010004
 8007e7c:	20000004 	.word	0x20000004
 8007e80:	14f8b589 	.word	0x14f8b589

08007e84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	607a      	str	r2, [r7, #4]
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	460b      	mov	r3, r1
 8007e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d006      	beq.n	8007eae <I2C_MasterRequestWrite+0x2a>
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d003      	beq.n	8007eae <I2C_MasterRequestWrite+0x2a>
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007eac:	d108      	bne.n	8007ec0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e00b      	b.n	8007ed8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	2b12      	cmp	r3, #18
 8007ec6:	d107      	bne.n	8007ed8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fa9b 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efe:	d103      	bne.n	8007f08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e035      	b.n	8007f78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f14:	d108      	bne.n	8007f28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f16:	897b      	ldrh	r3, [r7, #10]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f24:	611a      	str	r2, [r3, #16]
 8007f26:	e01b      	b.n	8007f60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f28:	897b      	ldrh	r3, [r7, #10]
 8007f2a:	11db      	asrs	r3, r3, #7
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0306 	and.w	r3, r3, #6
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f063 030f 	orn	r3, r3, #15
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	490e      	ldr	r1, [pc, #56]	; (8007f80 <I2C_MasterRequestWrite+0xfc>)
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fac1 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e010      	b.n	8007f78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f56:	897b      	ldrh	r3, [r7, #10]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4907      	ldr	r1, [pc, #28]	; (8007f84 <I2C_MasterRequestWrite+0x100>)
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fab1 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	00010008 	.word	0x00010008
 8007f84:	00010002 	.word	0x00010002

08007f88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	607a      	str	r2, [r7, #4]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	460b      	mov	r3, r1
 8007f96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d006      	beq.n	8007fc2 <I2C_MasterRequestRead+0x3a>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d003      	beq.n	8007fc2 <I2C_MasterRequestRead+0x3a>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fc0:	d108      	bne.n	8007fd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	e00b      	b.n	8007fec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	2b11      	cmp	r3, #17
 8007fda:	d107      	bne.n	8007fec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 fa11 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008012:	d103      	bne.n	800801c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800801a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e079      	b.n	8008114 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008028:	d108      	bne.n	800803c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800802a:	897b      	ldrh	r3, [r7, #10]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	b2da      	uxtb	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	611a      	str	r2, [r3, #16]
 800803a:	e05f      	b.n	80080fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800803c:	897b      	ldrh	r3, [r7, #10]
 800803e:	11db      	asrs	r3, r3, #7
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0306 	and.w	r3, r3, #6
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f063 030f 	orn	r3, r3, #15
 800804c:	b2da      	uxtb	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4930      	ldr	r1, [pc, #192]	; (800811c <I2C_MasterRequestRead+0x194>)
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fa37 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e054      	b.n	8008114 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4929      	ldr	r1, [pc, #164]	; (8008120 <I2C_MasterRequestRead+0x198>)
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fa27 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e044      	b.n	8008114 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f9af 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d103      	bne.n	80080e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e017      	b.n	8008114 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80080e4:	897b      	ldrh	r3, [r7, #10]
 80080e6:	11db      	asrs	r3, r3, #7
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 0306 	and.w	r3, r3, #6
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f063 030e 	orn	r3, r3, #14
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4907      	ldr	r1, [pc, #28]	; (8008120 <I2C_MasterRequestRead+0x198>)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f9e3 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	00010008 	.word	0x00010008
 8008120:	00010002 	.word	0x00010002

08008124 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	817b      	strh	r3, [r7, #10]
 8008136:	460b      	mov	r3, r1
 8008138:	813b      	strh	r3, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800814c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2200      	movs	r2, #0
 8008156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f960 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008174:	d103      	bne.n	800817e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e05f      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008182:	897b      	ldrh	r3, [r7, #10]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	492d      	ldr	r1, [pc, #180]	; (800824c <I2C_RequestMemoryWrite+0x128>)
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f998 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e04c      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fa02 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e02b      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d105      	bne.n	80081fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081f0:	893b      	ldrh	r3, [r7, #8]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	e021      	b.n	8008240 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081fc:	893b      	ldrh	r3, [r7, #8]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	b29b      	uxth	r3, r3
 8008202:	b2da      	uxtb	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820c:	6a39      	ldr	r1, [r7, #32]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f9dc 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b04      	cmp	r3, #4
 8008220:	d107      	bne.n	8008232 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e005      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008236:	893b      	ldrh	r3, [r7, #8]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	00010002 	.word	0x00010002

08008250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	461a      	mov	r2, r3
 800825e:	4603      	mov	r3, r0
 8008260:	817b      	strh	r3, [r7, #10]
 8008262:	460b      	mov	r3, r1
 8008264:	813b      	strh	r3, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008278:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	2200      	movs	r2, #0
 8008292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f8c2 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00d      	beq.n	80082be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b0:	d103      	bne.n	80082ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e0aa      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082be:	897b      	ldrh	r3, [r7, #10]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	4952      	ldr	r1, [pc, #328]	; (800841c <I2C_RequestMemoryRead+0x1cc>)
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f8fa 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e097      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	6a39      	ldr	r1, [r7, #32]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f964 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	2b04      	cmp	r3, #4
 8008310:	d107      	bne.n	8008322 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e076      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800832c:	893b      	ldrh	r3, [r7, #8]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	611a      	str	r2, [r3, #16]
 8008336:	e021      	b.n	800837c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	0a1b      	lsrs	r3, r3, #8
 800833c:	b29b      	uxth	r3, r3
 800833e:	b2da      	uxtb	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008348:	6a39      	ldr	r1, [r7, #32]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f93e 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b04      	cmp	r3, #4
 800835c:	d107      	bne.n	800836e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e050      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008372:	893b      	ldrh	r3, [r7, #8]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800837c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837e:	6a39      	ldr	r1, [r7, #32]
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 f923 	bl	80085cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00d      	beq.n	80083a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	2b04      	cmp	r3, #4
 8008392:	d107      	bne.n	80083a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e035      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	2200      	movs	r2, #0
 80083c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f82b 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083de:	d103      	bne.n	80083e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e013      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083ec:	897b      	ldrh	r3, [r7, #10]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	4906      	ldr	r1, [pc, #24]	; (800841c <I2C_RequestMemoryRead+0x1cc>)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f863 	bl	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00010002 	.word	0x00010002

08008420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008430:	e025      	b.n	800847e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d021      	beq.n	800847e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843a:	f7fd fe99 	bl	8006170 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d302      	bcc.n	8008450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d116      	bne.n	800847e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	f043 0220 	orr.w	r2, r3, #32
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e023      	b.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	0c1b      	lsrs	r3, r3, #16
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10d      	bne.n	80084a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	43da      	mvns	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4013      	ands	r3, r2
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf0c      	ite	eq
 800849a:	2301      	moveq	r3, #1
 800849c:	2300      	movne	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	e00c      	b.n	80084be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	43da      	mvns	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4013      	ands	r3, r2
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bf0c      	ite	eq
 80084b6:	2301      	moveq	r3, #1
 80084b8:	2300      	movne	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d0b6      	beq.n	8008432 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084dc:	e051      	b.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ec:	d123      	bne.n	8008536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008506:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f043 0204 	orr.w	r2, r3, #4
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e046      	b.n	80085c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d021      	beq.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853e:	f7fd fe17 	bl	8006170 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d116      	bne.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f043 0220 	orr.w	r2, r3, #32
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e020      	b.n	80085c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	0c1b      	lsrs	r3, r3, #16
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	d10c      	bne.n	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	43da      	mvns	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4013      	ands	r3, r2
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	bf14      	ite	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	2300      	moveq	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	e00b      	b.n	80085be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	43da      	mvns	r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4013      	ands	r3, r2
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bf14      	ite	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	2300      	moveq	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d18d      	bne.n	80084de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085d8:	e02d      	b.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f8ce 	bl	800877c <I2C_IsAcknowledgeFailed>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e02d      	b.n	8008646 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d021      	beq.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f2:	f7fd fdbd 	bl	8006170 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d116      	bne.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e007      	b.n	8008646 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008640:	2b80      	cmp	r3, #128	; 0x80
 8008642:	d1ca      	bne.n	80085da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800865a:	e02d      	b.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f88d 	bl	800877c <I2C_IsAcknowledgeFailed>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e02d      	b.n	80086c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d021      	beq.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008674:	f7fd fd7c 	bl	8006170 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	d302      	bcc.n	800868a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d116      	bne.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	f043 0220 	orr.w	r2, r3, #32
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e007      	b.n	80086c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d1ca      	bne.n	800865c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086dc:	e042      	b.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	d119      	bne.n	8008720 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0210 	mvn.w	r2, #16
 80086f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e029      	b.n	8008774 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008720:	f7fd fd26 	bl	8006170 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d116      	bne.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	f043 0220 	orr.w	r2, r3, #32
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e007      	b.n	8008774 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d1b5      	bne.n	80086de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800878e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008792:	d11b      	bne.n	80087cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800879c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	f043 0204 	orr.w	r2, r3, #4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e26c      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8087 	beq.w	8008906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087f8:	4b92      	ldr	r3, [pc, #584]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f003 030c 	and.w	r3, r3, #12
 8008800:	2b04      	cmp	r3, #4
 8008802:	d00c      	beq.n	800881e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008804:	4b8f      	ldr	r3, [pc, #572]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f003 030c 	and.w	r3, r3, #12
 800880c:	2b08      	cmp	r3, #8
 800880e:	d112      	bne.n	8008836 <HAL_RCC_OscConfig+0x5e>
 8008810:	4b8c      	ldr	r3, [pc, #560]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881c:	d10b      	bne.n	8008836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800881e:	4b89      	ldr	r3, [pc, #548]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d06c      	beq.n	8008904 <HAL_RCC_OscConfig+0x12c>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d168      	bne.n	8008904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e246      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800883e:	d106      	bne.n	800884e <HAL_RCC_OscConfig+0x76>
 8008840:	4b80      	ldr	r3, [pc, #512]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a7f      	ldr	r2, [pc, #508]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	e02e      	b.n	80088ac <HAL_RCC_OscConfig+0xd4>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10c      	bne.n	8008870 <HAL_RCC_OscConfig+0x98>
 8008856:	4b7b      	ldr	r3, [pc, #492]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a7a      	ldr	r2, [pc, #488]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800885c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	4b78      	ldr	r3, [pc, #480]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a77      	ldr	r2, [pc, #476]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e01d      	b.n	80088ac <HAL_RCC_OscConfig+0xd4>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008878:	d10c      	bne.n	8008894 <HAL_RCC_OscConfig+0xbc>
 800887a:	4b72      	ldr	r3, [pc, #456]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a71      	ldr	r2, [pc, #452]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	4b6f      	ldr	r3, [pc, #444]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6e      	ldr	r2, [pc, #440]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800888c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	e00b      	b.n	80088ac <HAL_RCC_OscConfig+0xd4>
 8008894:	4b6b      	ldr	r3, [pc, #428]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a6a      	ldr	r2, [pc, #424]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800889a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4b68      	ldr	r3, [pc, #416]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a67      	ldr	r2, [pc, #412]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80088a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d013      	beq.n	80088dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7fd fc5c 	bl	8006170 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088bc:	f7fd fc58 	bl	8006170 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b64      	cmp	r3, #100	; 0x64
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e1fa      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ce:	4b5d      	ldr	r3, [pc, #372]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0xe4>
 80088da:	e014      	b.n	8008906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7fd fc48 	bl	8006170 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088e4:	f7fd fc44 	bl	8006170 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e1e6      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088f6:	4b53      	ldr	r3, [pc, #332]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f0      	bne.n	80088e4 <HAL_RCC_OscConfig+0x10c>
 8008902:	e000      	b.n	8008906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d063      	beq.n	80089da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008912:	4b4c      	ldr	r3, [pc, #304]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f003 030c 	and.w	r3, r3, #12
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800891e:	4b49      	ldr	r3, [pc, #292]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f003 030c 	and.w	r3, r3, #12
 8008926:	2b08      	cmp	r3, #8
 8008928:	d11c      	bne.n	8008964 <HAL_RCC_OscConfig+0x18c>
 800892a:	4b46      	ldr	r3, [pc, #280]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d116      	bne.n	8008964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008936:	4b43      	ldr	r3, [pc, #268]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <HAL_RCC_OscConfig+0x176>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d001      	beq.n	800894e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e1ba      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4939      	ldr	r1, [pc, #228]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008962:	e03a      	b.n	80089da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d020      	beq.n	80089ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800896c:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <HAL_RCC_OscConfig+0x270>)
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008972:	f7fd fbfd 	bl	8006170 <HAL_GetTick>
 8008976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800897a:	f7fd fbf9 	bl	8006170 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e19b      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898c:	4b2d      	ldr	r3, [pc, #180]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	4927      	ldr	r1, [pc, #156]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	600b      	str	r3, [r1, #0]
 80089ac:	e015      	b.n	80089da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ae:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <HAL_RCC_OscConfig+0x270>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b4:	f7fd fbdc 	bl	8006170 <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089bc:	f7fd fbd8 	bl	8006170 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e17a      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089ce:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d03a      	beq.n	8008a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d019      	beq.n	8008a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ee:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <HAL_RCC_OscConfig+0x274>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f4:	f7fd fbbc 	bl	8006170 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089fc:	f7fd fbb8 	bl	8006170 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e15a      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <HAL_RCC_OscConfig+0x26c>)
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	f000 fad8 	bl	8008fd0 <RCC_Delay>
 8008a20:	e01c      	b.n	8008a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a22:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <HAL_RCC_OscConfig+0x274>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a28:	f7fd fba2 	bl	8006170 <HAL_GetTick>
 8008a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a2e:	e00f      	b.n	8008a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a30:	f7fd fb9e 	bl	8006170 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d908      	bls.n	8008a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e140      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
 8008a42:	bf00      	nop
 8008a44:	40021000 	.word	0x40021000
 8008a48:	42420000 	.word	0x42420000
 8008a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a50:	4b9e      	ldr	r3, [pc, #632]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e9      	bne.n	8008a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80a6 	beq.w	8008bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a6e:	4b97      	ldr	r3, [pc, #604]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a7a:	4b94      	ldr	r3, [pc, #592]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	4a93      	ldr	r2, [pc, #588]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a84:	61d3      	str	r3, [r2, #28]
 8008a86:	4b91      	ldr	r3, [pc, #580]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8e:	60bb      	str	r3, [r7, #8]
 8008a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a92:	2301      	movs	r3, #1
 8008a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a96:	4b8e      	ldr	r3, [pc, #568]	; (8008cd0 <HAL_RCC_OscConfig+0x4f8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d118      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008aa2:	4b8b      	ldr	r3, [pc, #556]	; (8008cd0 <HAL_RCC_OscConfig+0x4f8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a8a      	ldr	r2, [pc, #552]	; (8008cd0 <HAL_RCC_OscConfig+0x4f8>)
 8008aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aae:	f7fd fb5f 	bl	8006170 <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ab6:	f7fd fb5b 	bl	8006170 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b64      	cmp	r3, #100	; 0x64
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e0fd      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ac8:	4b81      	ldr	r3, [pc, #516]	; (8008cd0 <HAL_RCC_OscConfig+0x4f8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0f0      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d106      	bne.n	8008aea <HAL_RCC_OscConfig+0x312>
 8008adc:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	4a7a      	ldr	r2, [pc, #488]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008ae2:	f043 0301 	orr.w	r3, r3, #1
 8008ae6:	6213      	str	r3, [r2, #32]
 8008ae8:	e02d      	b.n	8008b46 <HAL_RCC_OscConfig+0x36e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <HAL_RCC_OscConfig+0x334>
 8008af2:	4b76      	ldr	r3, [pc, #472]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	4a75      	ldr	r2, [pc, #468]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	6213      	str	r3, [r2, #32]
 8008afe:	4b73      	ldr	r3, [pc, #460]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	4a72      	ldr	r2, [pc, #456]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b04:	f023 0304 	bic.w	r3, r3, #4
 8008b08:	6213      	str	r3, [r2, #32]
 8008b0a:	e01c      	b.n	8008b46 <HAL_RCC_OscConfig+0x36e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	d10c      	bne.n	8008b2e <HAL_RCC_OscConfig+0x356>
 8008b14:	4b6d      	ldr	r3, [pc, #436]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	4a6c      	ldr	r2, [pc, #432]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b1a:	f043 0304 	orr.w	r3, r3, #4
 8008b1e:	6213      	str	r3, [r2, #32]
 8008b20:	4b6a      	ldr	r3, [pc, #424]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	4a69      	ldr	r2, [pc, #420]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	6213      	str	r3, [r2, #32]
 8008b2c:	e00b      	b.n	8008b46 <HAL_RCC_OscConfig+0x36e>
 8008b2e:	4b67      	ldr	r3, [pc, #412]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	4a66      	ldr	r2, [pc, #408]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	6213      	str	r3, [r2, #32]
 8008b3a:	4b64      	ldr	r3, [pc, #400]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	4a63      	ldr	r2, [pc, #396]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b40:	f023 0304 	bic.w	r3, r3, #4
 8008b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d015      	beq.n	8008b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b4e:	f7fd fb0f 	bl	8006170 <HAL_GetTick>
 8008b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b54:	e00a      	b.n	8008b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b56:	f7fd fb0b 	bl	8006170 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e0ab      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6c:	4b57      	ldr	r3, [pc, #348]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0ee      	beq.n	8008b56 <HAL_RCC_OscConfig+0x37e>
 8008b78:	e014      	b.n	8008ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b7a:	f7fd faf9 	bl	8006170 <HAL_GetTick>
 8008b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b80:	e00a      	b.n	8008b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b82:	f7fd faf5 	bl	8006170 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d901      	bls.n	8008b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e095      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b98:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1ee      	bne.n	8008b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d105      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008baa:	4b48      	ldr	r3, [pc, #288]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4a47      	ldr	r2, [pc, #284]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 8081 	beq.w	8008cc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bc0:	4b42      	ldr	r3, [pc, #264]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f003 030c 	and.w	r3, r3, #12
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d061      	beq.n	8008c90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d146      	bne.n	8008c62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd4:	4b3f      	ldr	r3, [pc, #252]	; (8008cd4 <HAL_RCC_OscConfig+0x4fc>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bda:	f7fd fac9 	bl	8006170 <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be2:	f7fd fac5 	bl	8006170 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e067      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bf4:	4b35      	ldr	r3, [pc, #212]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f0      	bne.n	8008be2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c08:	d108      	bne.n	8008c1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c0a:	4b30      	ldr	r3, [pc, #192]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	492d      	ldr	r1, [pc, #180]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c1c:	4b2b      	ldr	r3, [pc, #172]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a19      	ldr	r1, [r3, #32]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	4927      	ldr	r1, [pc, #156]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c34:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <HAL_RCC_OscConfig+0x4fc>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c3a:	f7fd fa99 	bl	8006170 <HAL_GetTick>
 8008c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c42:	f7fd fa95 	bl	8006170 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e037      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c54:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <HAL_RCC_OscConfig+0x46a>
 8008c60:	e02f      	b.n	8008cc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <HAL_RCC_OscConfig+0x4fc>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c68:	f7fd fa82 	bl	8006170 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c70:	f7fd fa7e 	bl	8006170 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e020      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c82:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0x498>
 8008c8e:	e018      	b.n	8008cc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e013      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <HAL_RCC_OscConfig+0x4f4>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d106      	bne.n	8008cbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d001      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	40007000 	.word	0x40007000
 8008cd4:	42420060 	.word	0x42420060

08008cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0d0      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cec:	4b6a      	ldr	r3, [pc, #424]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d910      	bls.n	8008d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfa:	4b67      	ldr	r3, [pc, #412]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f023 0207 	bic.w	r2, r3, #7
 8008d02:	4965      	ldr	r1, [pc, #404]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0a:	4b63      	ldr	r3, [pc, #396]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0b8      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d020      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d34:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a58      	ldr	r2, [pc, #352]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d4c:	4b53      	ldr	r3, [pc, #332]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a52      	ldr	r2, [pc, #328]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d58:	4b50      	ldr	r3, [pc, #320]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	494d      	ldr	r1, [pc, #308]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d040      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d107      	bne.n	8008d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d7e:	4b47      	ldr	r3, [pc, #284]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d115      	bne.n	8008db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e07f      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d107      	bne.n	8008da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d96:	4b41      	ldr	r3, [pc, #260]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e073      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008da6:	4b3d      	ldr	r3, [pc, #244]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e06b      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f023 0203 	bic.w	r2, r3, #3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4936      	ldr	r1, [pc, #216]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008dc8:	f7fd f9d2 	bl	8006170 <HAL_GetTick>
 8008dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dce:	e00a      	b.n	8008de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dd0:	f7fd f9ce 	bl	8006170 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e053      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008de6:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f003 020c 	and.w	r2, r3, #12
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d1eb      	bne.n	8008dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008df8:	4b27      	ldr	r3, [pc, #156]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d210      	bcs.n	8008e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e06:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f023 0207 	bic.w	r2, r3, #7
 8008e0e:	4922      	ldr	r1, [pc, #136]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e16:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <HAL_RCC_ClockConfig+0x1c0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d001      	beq.n	8008e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e032      	b.n	8008e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e34:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	4916      	ldr	r1, [pc, #88]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0308 	and.w	r3, r3, #8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e52:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	490e      	ldr	r1, [pc, #56]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e66:	f000 f821 	bl	8008eac <HAL_RCC_GetSysClockFreq>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_RCC_ClockConfig+0x1c4>)
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	091b      	lsrs	r3, r3, #4
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	490a      	ldr	r1, [pc, #40]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e78:	5ccb      	ldrb	r3, [r1, r3]
 8008e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7e:	4a09      	ldr	r2, [pc, #36]	; (8008ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8008e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e82:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fd f930 	bl	80060ec <HAL_InitTick>

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	40022000 	.word	0x40022000
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	08014364 	.word	0x08014364
 8008ea4:	20000004 	.word	0x20000004
 8008ea8:	20000008 	.word	0x20000008

08008eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eac:	b490      	push	{r4, r7}
 8008eae:	b08a      	sub	sp, #40	; 0x28
 8008eb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008eb4:	1d3c      	adds	r4, r7, #4
 8008eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ebc:	f240 2301 	movw	r3, #513	; 0x201
 8008ec0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61bb      	str	r3, [r7, #24]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ece:	2300      	movs	r3, #0
 8008ed0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008ed6:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f003 030c 	and.w	r3, r3, #12
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d002      	beq.n	8008eec <HAL_RCC_GetSysClockFreq+0x40>
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d003      	beq.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8008eea:	e02d      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008eec:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eee:	623b      	str	r3, [r7, #32]
      break;
 8008ef0:	e02d      	b.n	8008f4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	0c9b      	lsrs	r3, r3, #18
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008efe:	4413      	add	r3, r2
 8008f00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008f04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d013      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	0c5b      	lsrs	r3, r3, #17
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f1e:	4413      	add	r3, r2
 8008f20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008f24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	4a0e      	ldr	r2, [pc, #56]	; (8008f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f2a:	fb02 f203 	mul.w	r2, r2, r3
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
 8008f36:	e004      	b.n	8008f42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	4a0b      	ldr	r2, [pc, #44]	; (8008f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f3c:	fb02 f303 	mul.w	r3, r2, r3
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	623b      	str	r3, [r7, #32]
      break;
 8008f46:	e002      	b.n	8008f4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f4a:	623b      	str	r3, [r7, #32]
      break;
 8008f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3728      	adds	r7, #40	; 0x28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc90      	pop	{r4, r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	08014354 	.word	0x08014354
 8008f60:	40021000 	.word	0x40021000
 8008f64:	007a1200 	.word	0x007a1200
 8008f68:	003d0900 	.word	0x003d0900

08008f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8008f72:	681b      	ldr	r3, [r3, #0]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr
 8008f7c:	20000004 	.word	0x20000004

08008f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f84:	f7ff fff2 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	4903      	ldr	r1, [pc, #12]	; (8008fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f96:	5ccb      	ldrb	r3, [r1, r3]
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	08014374 	.word	0x08014374

08008fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fac:	f7ff ffde 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	0adb      	lsrs	r3, r3, #11
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	4903      	ldr	r1, [pc, #12]	; (8008fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fbe:	5ccb      	ldrb	r3, [r1, r3]
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	40021000 	.word	0x40021000
 8008fcc:	08014374 	.word	0x08014374

08008fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <RCC_Delay+0x34>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <RCC_Delay+0x38>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	0a5b      	lsrs	r3, r3, #9
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008fec:	bf00      	nop
  }
  while (Delay --);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1e5a      	subs	r2, r3, #1
 8008ff2:	60fa      	str	r2, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f9      	bne.n	8008fec <RCC_Delay+0x1c>
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr
 8009004:	20000004 	.word	0x20000004
 8009008:	10624dd3 	.word	0x10624dd3

0800900c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e041      	b.n	80090a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fc fd34 	bl	8005aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f000 fe98 	bl	8009d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e032      	b.n	800912a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a18      	ldr	r2, [pc, #96]	; (8009134 <HAL_TIM_Base_Start+0x88>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00e      	beq.n	80090f4 <HAL_TIM_Base_Start+0x48>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090de:	d009      	beq.n	80090f4 <HAL_TIM_Base_Start+0x48>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a14      	ldr	r2, [pc, #80]	; (8009138 <HAL_TIM_Base_Start+0x8c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <HAL_TIM_Base_Start+0x48>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a13      	ldr	r2, [pc, #76]	; (800913c <HAL_TIM_Base_Start+0x90>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d111      	bne.n	8009118 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b06      	cmp	r3, #6
 8009104:	d010      	beq.n	8009128 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0201 	orr.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009116:	e007      	b.n	8009128 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr
 8009134:	40012c00 	.word	0x40012c00
 8009138:	40000400 	.word	0x40000400
 800913c:	40000800 	.word	0x40000800

08009140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d001      	beq.n	8009158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e03a      	b.n	80091ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 0201 	orr.w	r2, r2, #1
 800916e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_TIM_Base_Start_IT+0x98>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x58>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009182:	d009      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x58>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a14      	ldr	r2, [pc, #80]	; (80091dc <HAL_TIM_Base_Start_IT+0x9c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x58>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d111      	bne.n	80091bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d010      	beq.n	80091cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0201 	orr.w	r2, r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ba:	e007      	b.n	80091cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr
 80091d8:	40012c00 	.word	0x40012c00
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800

080091e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e041      	b.n	800927a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fc fc2a 	bl	8005a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f000 fdac 	bl	8009d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d109      	bne.n	80092a8 <HAL_TIM_PWM_Start+0x24>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	e022      	b.n	80092ee <HAL_TIM_PWM_Start+0x6a>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d109      	bne.n	80092c2 <HAL_TIM_PWM_Start+0x3e>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	e015      	b.n	80092ee <HAL_TIM_PWM_Start+0x6a>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d109      	bne.n	80092dc <HAL_TIM_PWM_Start+0x58>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	bf14      	ite	ne
 80092d4:	2301      	movne	r3, #1
 80092d6:	2300      	moveq	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	e008      	b.n	80092ee <HAL_TIM_PWM_Start+0x6a>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e05e      	b.n	80093b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_PWM_Start+0x82>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009304:	e013      	b.n	800932e <HAL_TIM_PWM_Start+0xaa>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Start+0x92>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009314:	e00b      	b.n	800932e <HAL_TIM_PWM_Start+0xaa>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d104      	bne.n	8009326 <HAL_TIM_PWM_Start+0xa2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009324:	e003      	b.n	800932e <HAL_TIM_PWM_Start+0xaa>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2201      	movs	r2, #1
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f001 f8af 	bl	800a49a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a1e      	ldr	r2, [pc, #120]	; (80093bc <HAL_TIM_PWM_Start+0x138>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d107      	bne.n	8009356 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a18      	ldr	r2, [pc, #96]	; (80093bc <HAL_TIM_PWM_Start+0x138>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00e      	beq.n	800937e <HAL_TIM_PWM_Start+0xfa>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009368:	d009      	beq.n	800937e <HAL_TIM_PWM_Start+0xfa>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <HAL_TIM_PWM_Start+0x13c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d004      	beq.n	800937e <HAL_TIM_PWM_Start+0xfa>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a12      	ldr	r2, [pc, #72]	; (80093c4 <HAL_TIM_PWM_Start+0x140>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d111      	bne.n	80093a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b06      	cmp	r3, #6
 800938e:	d010      	beq.n	80093b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0201 	orr.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a0:	e007      	b.n	80093b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40012c00 	.word	0x40012c00
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800

080093c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e041      	b.n	800945e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f839 	bl	8009466 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3304      	adds	r3, #4
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f000 fcba 	bl	8009d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <HAL_TIM_IC_Start_IT+0x1a>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800948e:	b2db      	uxtb	r3, r3
 8009490:	e013      	b.n	80094ba <HAL_TIM_IC_Start_IT+0x42>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b04      	cmp	r3, #4
 8009496:	d104      	bne.n	80094a2 <HAL_TIM_IC_Start_IT+0x2a>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	e00b      	b.n	80094ba <HAL_TIM_IC_Start_IT+0x42>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d104      	bne.n	80094b2 <HAL_TIM_IC_Start_IT+0x3a>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	e003      	b.n	80094ba <HAL_TIM_IC_Start_IT+0x42>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <HAL_TIM_IC_Start_IT+0x54>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	e013      	b.n	80094f4 <HAL_TIM_IC_Start_IT+0x7c>
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d104      	bne.n	80094dc <HAL_TIM_IC_Start_IT+0x64>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	e00b      	b.n	80094f4 <HAL_TIM_IC_Start_IT+0x7c>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b08      	cmp	r3, #8
 80094e0:	d104      	bne.n	80094ec <HAL_TIM_IC_Start_IT+0x74>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	e003      	b.n	80094f4 <HAL_TIM_IC_Start_IT+0x7c>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d102      	bne.n	8009502 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d001      	beq.n	8009506 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0b3      	b.n	800966e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <HAL_TIM_IC_Start_IT+0x9e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009514:	e013      	b.n	800953e <HAL_TIM_IC_Start_IT+0xc6>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b04      	cmp	r3, #4
 800951a:	d104      	bne.n	8009526 <HAL_TIM_IC_Start_IT+0xae>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009524:	e00b      	b.n	800953e <HAL_TIM_IC_Start_IT+0xc6>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b08      	cmp	r3, #8
 800952a:	d104      	bne.n	8009536 <HAL_TIM_IC_Start_IT+0xbe>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009534:	e003      	b.n	800953e <HAL_TIM_IC_Start_IT+0xc6>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <HAL_TIM_IC_Start_IT+0xd6>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800954c:	e013      	b.n	8009576 <HAL_TIM_IC_Start_IT+0xfe>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b04      	cmp	r3, #4
 8009552:	d104      	bne.n	800955e <HAL_TIM_IC_Start_IT+0xe6>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800955c:	e00b      	b.n	8009576 <HAL_TIM_IC_Start_IT+0xfe>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b08      	cmp	r3, #8
 8009562:	d104      	bne.n	800956e <HAL_TIM_IC_Start_IT+0xf6>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800956c:	e003      	b.n	8009576 <HAL_TIM_IC_Start_IT+0xfe>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2202      	movs	r2, #2
 8009572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b0c      	cmp	r3, #12
 800957a:	d841      	bhi.n	8009600 <HAL_TIM_IC_Start_IT+0x188>
 800957c:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <HAL_TIM_IC_Start_IT+0x10c>)
 800957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009582:	bf00      	nop
 8009584:	080095b9 	.word	0x080095b9
 8009588:	08009601 	.word	0x08009601
 800958c:	08009601 	.word	0x08009601
 8009590:	08009601 	.word	0x08009601
 8009594:	080095cb 	.word	0x080095cb
 8009598:	08009601 	.word	0x08009601
 800959c:	08009601 	.word	0x08009601
 80095a0:	08009601 	.word	0x08009601
 80095a4:	080095dd 	.word	0x080095dd
 80095a8:	08009601 	.word	0x08009601
 80095ac:	08009601 	.word	0x08009601
 80095b0:	08009601 	.word	0x08009601
 80095b4:	080095ef 	.word	0x080095ef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0202 	orr.w	r2, r2, #2
 80095c6:	60da      	str	r2, [r3, #12]
      break;
 80095c8:	e01b      	b.n	8009602 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0204 	orr.w	r2, r2, #4
 80095d8:	60da      	str	r2, [r3, #12]
      break;
 80095da:	e012      	b.n	8009602 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0208 	orr.w	r2, r2, #8
 80095ea:	60da      	str	r2, [r3, #12]
      break;
 80095ec:	e009      	b.n	8009602 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0210 	orr.w	r2, r2, #16
 80095fc:	60da      	str	r2, [r3, #12]
      break;
 80095fe:	e000      	b.n	8009602 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009600:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 ff45 	bl	800a49a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a18      	ldr	r2, [pc, #96]	; (8009678 <HAL_TIM_IC_Start_IT+0x200>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00e      	beq.n	8009638 <HAL_TIM_IC_Start_IT+0x1c0>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009622:	d009      	beq.n	8009638 <HAL_TIM_IC_Start_IT+0x1c0>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a14      	ldr	r2, [pc, #80]	; (800967c <HAL_TIM_IC_Start_IT+0x204>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d004      	beq.n	8009638 <HAL_TIM_IC_Start_IT+0x1c0>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a13      	ldr	r2, [pc, #76]	; (8009680 <HAL_TIM_IC_Start_IT+0x208>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d111      	bne.n	800965c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b06      	cmp	r3, #6
 8009648:	d010      	beq.n	800966c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0201 	orr.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965a:	e007      	b.n	800966c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0201 	orr.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	40012c00 	.word	0x40012c00
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800

08009684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b02      	cmp	r3, #2
 8009698:	d122      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d11b      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f06f 0202 	mvn.w	r2, #2
 80096b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fb fd4e 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 80096cc:	e005      	b.n	80096da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fb3a 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fb40 	bl	8009d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d122      	bne.n	8009734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d11b      	bne.n	8009734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f06f 0204 	mvn.w	r2, #4
 8009704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fb fd24 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8009720:	e005      	b.n	800972e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fb10 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fb16 	bl	8009d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b08      	cmp	r3, #8
 8009740:	d122      	bne.n	8009788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d11b      	bne.n	8009788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f06f 0208 	mvn.w	r2, #8
 8009758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2204      	movs	r2, #4
 800975e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fb fcfa 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8009774:	e005      	b.n	8009782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fae6 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 faec 	bl	8009d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b10      	cmp	r3, #16
 8009794:	d122      	bne.n	80097dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0310 	and.w	r3, r3, #16
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d11b      	bne.n	80097dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0210 	mvn.w	r2, #16
 80097ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2208      	movs	r2, #8
 80097b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fb fcd0 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 80097c8:	e005      	b.n	80097d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fabc 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fac2 	bl	8009d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10e      	bne.n	8009808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d107      	bne.n	8009808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0201 	mvn.w	r2, #1
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fa fe64 	bl	80044d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009812:	2b80      	cmp	r3, #128	; 0x80
 8009814:	d10e      	bne.n	8009834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009820:	2b80      	cmp	r3, #128	; 0x80
 8009822:	d107      	bne.n	8009834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800982c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 ffae 	bl	800a790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b40      	cmp	r3, #64	; 0x40
 8009840:	d10e      	bne.n	8009860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984c:	2b40      	cmp	r3, #64	; 0x40
 800984e:	d107      	bne.n	8009860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa86 	bl	8009d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b20      	cmp	r3, #32
 800986c:	d10e      	bne.n	800988c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b20      	cmp	r3, #32
 800987a:	d107      	bne.n	800988c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0220 	mvn.w	r2, #32
 8009884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 ff79 	bl	800a77e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_TIM_IC_ConfigChannel+0x1a>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e082      	b.n	80099b4 <HAL_TIM_IC_ConfigChannel+0x120>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d11b      	bne.n	80098f4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f000 fc42 	bl	800a154 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 020c 	bic.w	r2, r2, #12
 80098de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6999      	ldr	r1, [r3, #24]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	619a      	str	r2, [r3, #24]
 80098f2:	e05a      	b.n	80099aa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d11c      	bne.n	8009934 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6819      	ldr	r1, [r3, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f000 fcab 	bl	800a264 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800991c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6999      	ldr	r1, [r3, #24]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	021a      	lsls	r2, r3, #8
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	619a      	str	r2, [r3, #24]
 8009932:	e03a      	b.n	80099aa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b08      	cmp	r3, #8
 8009938:	d11b      	bne.n	8009972 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6819      	ldr	r1, [r3, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f000 fcf6 	bl	800a33a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 020c 	bic.w	r2, r2, #12
 800995c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69d9      	ldr	r1, [r3, #28]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	61da      	str	r2, [r3, #28]
 8009970:	e01b      	b.n	80099aa <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6819      	ldr	r1, [r3, #0]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f000 fd15 	bl	800a3b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69da      	ldr	r2, [r3, #28]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009994:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	69d9      	ldr	r1, [r3, #28]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	021a      	lsls	r2, r3, #8
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d101      	bne.n	80099d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e0ac      	b.n	8009b30 <HAL_TIM_PWM_ConfigChannel+0x174>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	f200 809f 	bhi.w	8009b24 <HAL_TIM_PWM_ConfigChannel+0x168>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009b25 	.word	0x08009b25
 80099f4:	08009b25 	.word	0x08009b25
 80099f8:	08009b25 	.word	0x08009b25
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009b25 	.word	0x08009b25
 8009a04:	08009b25 	.word	0x08009b25
 8009a08:	08009b25 	.word	0x08009b25
 8009a0c:	08009aa3 	.word	0x08009aa3
 8009a10:	08009b25 	.word	0x08009b25
 8009a14:	08009b25 	.word	0x08009b25
 8009a18:	08009b25 	.word	0x08009b25
 8009a1c:	08009ae3 	.word	0x08009ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68b9      	ldr	r1, [r7, #8]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fa0c 	bl	8009e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0208 	orr.w	r2, r2, #8
 8009a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0204 	bic.w	r2, r2, #4
 8009a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6999      	ldr	r1, [r3, #24]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	619a      	str	r2, [r3, #24]
      break;
 8009a5e:	e062      	b.n	8009b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fa52 	bl	8009f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6999      	ldr	r1, [r3, #24]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	021a      	lsls	r2, r3, #8
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	619a      	str	r2, [r3, #24]
      break;
 8009aa0:	e041      	b.n	8009b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fa9b 	bl	8009fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0208 	orr.w	r2, r2, #8
 8009abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0204 	bic.w	r2, r2, #4
 8009acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69d9      	ldr	r1, [r3, #28]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	691a      	ldr	r2, [r3, #16]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	61da      	str	r2, [r3, #28]
      break;
 8009ae0:	e021      	b.n	8009b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fae5 	bl	800a0b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69da      	ldr	r2, [r3, #28]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69da      	ldr	r2, [r3, #28]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69d9      	ldr	r1, [r3, #28]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	021a      	lsls	r2, r3, #8
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	61da      	str	r2, [r3, #28]
      break;
 8009b22:	e000      	b.n	8009b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009b24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIM_ConfigClockSource+0x18>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e0b3      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x180>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b88:	d03e      	beq.n	8009c08 <HAL_TIM_ConfigClockSource+0xd0>
 8009b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b8e:	f200 8087 	bhi.w	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b96:	f000 8085 	beq.w	8009ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9e:	d87f      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009ba0:	2b70      	cmp	r3, #112	; 0x70
 8009ba2:	d01a      	beq.n	8009bda <HAL_TIM_ConfigClockSource+0xa2>
 8009ba4:	2b70      	cmp	r3, #112	; 0x70
 8009ba6:	d87b      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009ba8:	2b60      	cmp	r3, #96	; 0x60
 8009baa:	d050      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x116>
 8009bac:	2b60      	cmp	r3, #96	; 0x60
 8009bae:	d877      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009bb0:	2b50      	cmp	r3, #80	; 0x50
 8009bb2:	d03c      	beq.n	8009c2e <HAL_TIM_ConfigClockSource+0xf6>
 8009bb4:	2b50      	cmp	r3, #80	; 0x50
 8009bb6:	d873      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009bb8:	2b40      	cmp	r3, #64	; 0x40
 8009bba:	d058      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x136>
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d86f      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009bc0:	2b30      	cmp	r3, #48	; 0x30
 8009bc2:	d064      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x156>
 8009bc4:	2b30      	cmp	r3, #48	; 0x30
 8009bc6:	d86b      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d060      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x156>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d867      	bhi.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d05c      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x156>
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d05a      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009bd8:	e062      	b.n	8009ca0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6899      	ldr	r1, [r3, #8]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f000 fc37 	bl	800a45c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	609a      	str	r2, [r3, #8]
      break;
 8009c06:	e04e      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	6899      	ldr	r1, [r3, #8]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f000 fc20 	bl	800a45c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c2a:	609a      	str	r2, [r3, #8]
      break;
 8009c2c:	e03b      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6859      	ldr	r1, [r3, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f000 fae4 	bl	800a208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2150      	movs	r1, #80	; 0x50
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fbee 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009c4c:	e02b      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f000 fb3e 	bl	800a2dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2160      	movs	r1, #96	; 0x60
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fbde 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009c6c:	e01b      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6859      	ldr	r1, [r3, #4]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f000 fac4 	bl	800a208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2140      	movs	r1, #64	; 0x40
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fbce 	bl	800a428 <TIM_ITRx_SetConfig>
      break;
 8009c8c:	e00b      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4619      	mov	r1, r3
 8009c98:	4610      	mov	r0, r2
 8009c9a:	f000 fbc5 	bl	800a428 <TIM_ITRx_SetConfig>
        break;
 8009c9e:	e002      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ca4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b0c      	cmp	r3, #12
 8009cd2:	d831      	bhi.n	8009d38 <HAL_TIM_ReadCapturedValue+0x78>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009d11 	.word	0x08009d11
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	08009d39 	.word	0x08009d39
 8009ce8:	08009d39 	.word	0x08009d39
 8009cec:	08009d1b 	.word	0x08009d1b
 8009cf0:	08009d39 	.word	0x08009d39
 8009cf4:	08009d39 	.word	0x08009d39
 8009cf8:	08009d39 	.word	0x08009d39
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d39 	.word	0x08009d39
 8009d04:	08009d39 	.word	0x08009d39
 8009d08:	08009d39 	.word	0x08009d39
 8009d0c:	08009d2f 	.word	0x08009d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	60fb      	str	r3, [r7, #12]

      break;
 8009d18:	e00f      	b.n	8009d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	60fb      	str	r3, [r7, #12]

      break;
 8009d22:	e00a      	b.n	8009d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2a:	60fb      	str	r3, [r7, #12]

      break;
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	60fb      	str	r3, [r7, #12]

      break;
 8009d36:	e000      	b.n	8009d3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009d38:	bf00      	nop
  }

  return tmpreg;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop

08009d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr

08009d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bc80      	pop	{r7}
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bc80      	pop	{r7}
 8009d7c:	4770      	bx	lr
	...

08009d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a29      	ldr	r2, [pc, #164]	; (8009e38 <TIM_Base_SetConfig+0xb8>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9e:	d007      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a26      	ldr	r2, [pc, #152]	; (8009e3c <TIM_Base_SetConfig+0xbc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a25      	ldr	r2, [pc, #148]	; (8009e40 <TIM_Base_SetConfig+0xc0>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d108      	bne.n	8009dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a1c      	ldr	r2, [pc, #112]	; (8009e38 <TIM_Base_SetConfig+0xb8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd0:	d007      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <TIM_Base_SetConfig+0xbc>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a18      	ldr	r2, [pc, #96]	; (8009e40 <TIM_Base_SetConfig+0xc0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d108      	bne.n	8009df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a07      	ldr	r2, [pc, #28]	; (8009e38 <TIM_Base_SetConfig+0xb8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d103      	bne.n	8009e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	615a      	str	r2, [r3, #20]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr
 8009e38:	40012c00 	.word	0x40012c00
 8009e3c:	40000400 	.word	0x40000400
 8009e40:	40000800 	.word	0x40000800

08009e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f023 0201 	bic.w	r2, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f023 0302 	bic.w	r3, r3, #2
 8009e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a1c      	ldr	r2, [pc, #112]	; (8009f0c <TIM_OC1_SetConfig+0xc8>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10c      	bne.n	8009eba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f023 0308 	bic.w	r3, r3, #8
 8009ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f023 0304 	bic.w	r3, r3, #4
 8009eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <TIM_OC1_SetConfig+0xc8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d111      	bne.n	8009ee6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	621a      	str	r2, [r3, #32]
}
 8009f00:	bf00      	nop
 8009f02:	371c      	adds	r7, #28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40012c00 	.word	0x40012c00

08009f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	f023 0210 	bic.w	r2, r3, #16
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	021b      	lsls	r3, r3, #8
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f023 0320 	bic.w	r3, r3, #32
 8009f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a1d      	ldr	r2, [pc, #116]	; (8009fe0 <TIM_OC2_SetConfig+0xd0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10d      	bne.n	8009f8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a14      	ldr	r2, [pc, #80]	; (8009fe0 <TIM_OC2_SetConfig+0xd0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d113      	bne.n	8009fbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bc80      	pop	{r7}
 8009fde:	4770      	bx	lr
 8009fe0:	40012c00 	.word	0x40012c00

08009fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a02c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <TIM_OC3_SetConfig+0xd0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d10d      	bne.n	800a05e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a14      	ldr	r2, [pc, #80]	; (800a0b4 <TIM_OC3_SetConfig+0xd0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d113      	bne.n	800a08e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a06c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4313      	orrs	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	621a      	str	r2, [r3, #32]
}
 800a0a8:	bf00      	nop
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40012c00 	.word	0x40012c00

0800a0b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	031b      	lsls	r3, r3, #12
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a0f      	ldr	r2, [pc, #60]	; (800a150 <TIM_OC4_SetConfig+0x98>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d109      	bne.n	800a12c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a11e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	019b      	lsls	r3, r3, #6
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	4313      	orrs	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	621a      	str	r2, [r3, #32]
}
 800a146:	bf00      	nop
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr
 800a150:	40012c00 	.word	0x40012c00

0800a154 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	f023 0201 	bic.w	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	4a1f      	ldr	r2, [pc, #124]	; (800a1fc <TIM_TI1_SetConfig+0xa8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d00b      	beq.n	800a19a <TIM_TI1_SetConfig+0x46>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a188:	d007      	beq.n	800a19a <TIM_TI1_SetConfig+0x46>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <TIM_TI1_SetConfig+0xac>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d003      	beq.n	800a19a <TIM_TI1_SetConfig+0x46>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4a1b      	ldr	r2, [pc, #108]	; (800a204 <TIM_TI1_SetConfig+0xb0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d101      	bne.n	800a19e <TIM_TI1_SetConfig+0x4a>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <TIM_TI1_SetConfig+0x4c>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 0303 	bic.w	r3, r3, #3
 800a1aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	e003      	b.n	800a1be <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f043 0301 	orr.w	r3, r3, #1
 800a1bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f023 030a 	bic.w	r3, r3, #10
 800a1d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f003 030a 	and.w	r3, r3, #10
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	621a      	str	r2, [r3, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bc80      	pop	{r7}
 800a1fa:	4770      	bx	lr
 800a1fc:	40012c00 	.word	0x40012c00
 800a200:	40000400 	.word	0x40000400
 800a204:	40000800 	.word	0x40000800

0800a208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f023 030a 	bic.w	r3, r3, #10
 800a244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	621a      	str	r2, [r3, #32]
}
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	bc80      	pop	{r7}
 800a262:	4770      	bx	lr

0800a264 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f023 0210 	bic.w	r2, r3, #16
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	031b      	lsls	r3, r3, #12
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bc80      	pop	{r7}
 800a2da:	4770      	bx	lr

0800a2dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	f023 0210 	bic.w	r2, r3, #16
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	031b      	lsls	r3, r3, #12
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	621a      	str	r2, [r3, #32]
}
 800a330:	bf00      	nop
 800a332:	371c      	adds	r7, #28
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	4770      	bx	lr

0800a33a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b087      	sub	sp, #28
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
 800a346:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f023 0303 	bic.w	r3, r3, #3
 800a366:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a376:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4313      	orrs	r3, r2
 800a382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a38a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	621a      	str	r2, [r3, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr

0800a3b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	031b      	lsls	r3, r3, #12
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a402:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	031b      	lsls	r3, r3, #12
 800a408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	621a      	str	r2, [r3, #32]
}
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr

0800a428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	f043 0307 	orr.w	r3, r3, #7
 800a44a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	609a      	str	r2, [r3, #8]
}
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	bc80      	pop	{r7}
 800a45a:	4770      	bx	lr

0800a45c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	021a      	lsls	r2, r3, #8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	431a      	orrs	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4313      	orrs	r3, r2
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	609a      	str	r2, [r3, #8]
}
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr

0800a49a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b087      	sub	sp, #28
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f003 031f 	and.w	r3, r3, #31
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a1a      	ldr	r2, [r3, #32]
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	43db      	mvns	r3, r3
 800a4bc:	401a      	ands	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f003 031f 	and.w	r3, r3, #31
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	621a      	str	r2, [r3, #32]
}
 800a4d8:	bf00      	nop
 800a4da:	371c      	adds	r7, #28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <HAL_TIMEx_PWMN_Start+0x24>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	e022      	b.n	800a54e <HAL_TIMEx_PWMN_Start+0x6a>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d109      	bne.n	800a522 <HAL_TIMEx_PWMN_Start+0x3e>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	bf14      	ite	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	2300      	moveq	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	e015      	b.n	800a54e <HAL_TIMEx_PWMN_Start+0x6a>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b08      	cmp	r3, #8
 800a526:	d109      	bne.n	800a53c <HAL_TIMEx_PWMN_Start+0x58>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	bf14      	ite	ne
 800a534:	2301      	movne	r3, #1
 800a536:	2300      	moveq	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	e008      	b.n	800a54e <HAL_TIMEx_PWMN_Start+0x6a>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	bf14      	ite	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	2300      	moveq	r3, #0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e059      	b.n	800a60a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <HAL_TIMEx_PWMN_Start+0x82>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a564:	e013      	b.n	800a58e <HAL_TIMEx_PWMN_Start+0xaa>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d104      	bne.n	800a576 <HAL_TIMEx_PWMN_Start+0x92>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a574:	e00b      	b.n	800a58e <HAL_TIMEx_PWMN_Start+0xaa>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d104      	bne.n	800a586 <HAL_TIMEx_PWMN_Start+0xa2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a584:	e003      	b.n	800a58e <HAL_TIMEx_PWMN_Start+0xaa>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2202      	movs	r2, #2
 800a58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2204      	movs	r2, #4
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f903 	bl	800a7a2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a18      	ldr	r2, [pc, #96]	; (800a614 <HAL_TIMEx_PWMN_Start+0x130>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d00e      	beq.n	800a5d4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5be:	d009      	beq.n	800a5d4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a14      	ldr	r2, [pc, #80]	; (800a618 <HAL_TIMEx_PWMN_Start+0x134>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d004      	beq.n	800a5d4 <HAL_TIMEx_PWMN_Start+0xf0>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a13      	ldr	r2, [pc, #76]	; (800a61c <HAL_TIMEx_PWMN_Start+0x138>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d111      	bne.n	800a5f8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b06      	cmp	r3, #6
 800a5e4:	d010      	beq.n	800a608 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0201 	orr.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f6:	e007      	b.n	800a608 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	40012c00 	.word	0x40012c00
 800a618:	40000400 	.word	0x40000400
 800a61c:	40000800 	.word	0x40000800

0800a620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e046      	b.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a16      	ldr	r2, [pc, #88]	; (800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00e      	beq.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a684:	d009      	beq.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a12      	ldr	r2, [pc, #72]	; (800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d004      	beq.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a10      	ldr	r2, [pc, #64]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d10c      	bne.n	800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bc80      	pop	{r7}
 800a6ce:	4770      	bx	lr
 800a6d0:	40012c00 	.word	0x40012c00
 800a6d4:	40000400 	.word	0x40000400
 800a6d8:	40000800 	.word	0x40000800

0800a6dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d101      	bne.n	800a6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e03d      	b.n	800a774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4313      	orrs	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr

0800a77e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr

0800a7a2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f003 031f 	and.w	r3, r3, #31
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a1a      	ldr	r2, [r3, #32]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	43db      	mvns	r3, r3
 800a7c4:	401a      	ands	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a1a      	ldr	r2, [r3, #32]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f003 031f 	and.w	r3, r3, #31
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	621a      	str	r2, [r3, #32]
}
 800a7e0:	bf00      	nop
 800a7e2:	371c      	adds	r7, #28
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bc80      	pop	{r7}
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e03f      	b.n	800a87c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	d106      	bne.n	800a816 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fb fa85 	bl	8005d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2224      	movs	r2, #36	; 0x24
 800a81a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68da      	ldr	r2, [r3, #12]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a82c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fe38 	bl	800b4a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a842:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695a      	ldr	r2, [r3, #20]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a852:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a862:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2220      	movs	r2, #32
 800a876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e01e      	b.n	800a8d4 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2224      	movs	r2, #36	; 0x24
 800a89a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68da      	ldr	r2, [r3, #12]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8ac:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7fb fb86 	bl	8005fc0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d17c      	bne.n	800a9f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_UART_Transmit+0x2c>
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e075      	b.n	800a9f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a912:	2b01      	cmp	r3, #1
 800a914:	d101      	bne.n	800a91a <HAL_UART_Transmit+0x3e>
 800a916:	2302      	movs	r3, #2
 800a918:	e06e      	b.n	800a9f8 <HAL_UART_Transmit+0x11c>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2221      	movs	r2, #33	; 0x21
 800a92c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a930:	f7fb fc1e 	bl	8006170 <HAL_GetTick>
 800a934:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	88fa      	ldrh	r2, [r7, #6]
 800a93a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	88fa      	ldrh	r2, [r7, #6]
 800a940:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94a:	d108      	bne.n	800a95e <HAL_UART_Transmit+0x82>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	e003      	b.n	800a966 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a96e:	e02a      	b.n	800a9c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2200      	movs	r2, #0
 800a978:	2180      	movs	r1, #128	; 0x80
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fbc0 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e036      	b.n	800a9f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a99e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	3302      	adds	r3, #2
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	e007      	b.n	800a9b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1cf      	bne.n	800a970 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2140      	movs	r1, #64	; 0x40
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fb90 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e006      	b.n	800a9f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e000      	b.n	800a9f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a9f6:	2302      	movs	r3, #2
  }
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d153      	bne.n	800aac2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <HAL_UART_Transmit_DMA+0x26>
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e04c      	b.n	800aac4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d101      	bne.n	800aa38 <HAL_UART_Transmit_DMA+0x38>
 800aa34:	2302      	movs	r3, #2
 800aa36:	e045      	b.n	800aac4 <HAL_UART_Transmit_DMA+0xc4>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	88fa      	ldrh	r2, [r7, #6]
 800aa4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	88fa      	ldrh	r2, [r7, #6]
 800aa50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2221      	movs	r2, #33	; 0x21
 800aa5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	4a19      	ldr	r2, [pc, #100]	; (800aacc <HAL_UART_Transmit_DMA+0xcc>)
 800aa66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6c:	4a18      	ldr	r2, [pc, #96]	; (800aad0 <HAL_UART_Transmit_DMA+0xd0>)
 800aa6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa74:	4a17      	ldr	r2, [pc, #92]	; (800aad4 <HAL_UART_Transmit_DMA+0xd4>)
 800aa76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3304      	adds	r3, #4
 800aa94:	461a      	mov	r2, r3
 800aa96:	88fb      	ldrh	r3, [r7, #6]
 800aa98:	f7fb fd8e 	bl	80065b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaa4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695a      	ldr	r2, [r3, #20]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aabc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e000      	b.n	800aac4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800aac2:	2302      	movs	r3, #2
  }
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	0800af7b 	.word	0x0800af7b
 800aad0:	0800afcd 	.word	0x0800afcd
 800aad4:	0800b06d 	.word	0x0800b06d

0800aad8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4613      	mov	r3, r2
 800aae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d166      	bne.n	800abc0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <HAL_UART_Receive_DMA+0x26>
 800aaf8:	88fb      	ldrh	r3, [r7, #6]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e05f      	b.n	800abc2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Receive_DMA+0x38>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e058      	b.n	800abc2 <HAL_UART_Receive_DMA+0xea>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	88fa      	ldrh	r2, [r7, #6]
 800ab22:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2222      	movs	r2, #34	; 0x22
 800ab2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	4a25      	ldr	r2, [pc, #148]	; (800abcc <HAL_UART_Receive_DMA+0xf4>)
 800ab38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3e:	4a24      	ldr	r2, [pc, #144]	; (800abd0 <HAL_UART_Receive_DMA+0xf8>)
 800ab40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab46:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <HAL_UART_Receive_DMA+0xfc>)
 800ab48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4e:	2200      	movs	r2, #0
 800ab50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	f7fb fd25 	bl	80065b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ab6e:	2300      	movs	r3, #0
 800ab70:	613b      	str	r3, [r7, #16]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	695a      	ldr	r2, [r3, #20]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0201 	orr.w	r2, r2, #1
 800abaa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695a      	ldr	r2, [r3, #20]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	e000      	b.n	800abc2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800abc0:	2302      	movs	r3, #2
  }
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	0800afe9 	.word	0x0800afe9
 800abd0:	0800b051 	.word	0x0800b051
 800abd4:	0800b06d 	.word	0x0800b06d

0800abd8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800abe0:	2301      	movs	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800abf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695a      	ldr	r2, [r3, #20]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0201 	bic.w	r2, r2, #1
 800ac02:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00f      	beq.n	800ac2c <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	4a3e      	ldr	r2, [pc, #248]	; (800ad18 <HAL_UART_Abort_IT+0x140>)
 800ac20:	635a      	str	r2, [r3, #52]	; 0x34
 800ac22:	e003      	b.n	800ac2c <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac28:	2200      	movs	r2, #0
 800ac2a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00f      	beq.n	800ac54 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	4a35      	ldr	r2, [pc, #212]	; (800ad1c <HAL_UART_Abort_IT+0x144>)
 800ac48:	635a      	str	r2, [r3, #52]	; 0x34
 800ac4a:	e003      	b.n	800ac54 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac50:	2200      	movs	r2, #0
 800ac52:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01a      	beq.n	800ac98 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	695a      	ldr	r2, [r3, #20]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac70:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00e      	beq.n	800ac98 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fb fcfa 	bl	8006678 <HAL_DMA_Abort_IT>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	2200      	movs	r2, #0
 800ac90:	635a      	str	r2, [r3, #52]	; 0x34
 800ac92:	e001      	b.n	800ac98 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d01c      	beq.n	800ace0 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	695a      	ldr	r2, [r3, #20]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acb4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d010      	beq.n	800ace0 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fb fcd8 	bl	8006678 <HAL_DMA_Abort_IT>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d006      	beq.n	800acdc <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd2:	2200      	movs	r2, #0
 800acd4:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800acd6:	2301      	movs	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	e001      	b.n	800ace0 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d113      	bne.n	800ad0e <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f92d 	bl	800af68 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0800b221 	.word	0x0800b221
 800ad1c:	0800b27b 	.word	0x0800b27b

0800ad20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10d      	bne.n	800ad72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d008      	beq.n	800ad72 <HAL_UART_IRQHandler+0x52>
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fb19 	bl	800b3a2 <UART_Receive_IT>
      return;
 800ad70:	e0d0      	b.n	800af14 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 80b0 	beq.w	800aeda <HAL_UART_IRQHandler+0x1ba>
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d105      	bne.n	800ad90 <HAL_UART_IRQHandler+0x70>
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 80a5 	beq.w	800aeda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <HAL_UART_IRQHandler+0x90>
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	f043 0201 	orr.w	r2, r3, #1
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <HAL_UART_IRQHandler+0xb0>
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc8:	f043 0202 	orr.w	r2, r3, #2
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <HAL_UART_IRQHandler+0xd0>
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade8:	f043 0204 	orr.w	r2, r3, #4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <HAL_UART_IRQHandler+0xfa>
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <HAL_UART_IRQHandler+0xee>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d005      	beq.n	800ae1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	f043 0208 	orr.w	r2, r3, #8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d077      	beq.n	800af12 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <HAL_UART_IRQHandler+0x11c>
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fab3 	bl	800b3a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bf14      	ite	ne
 800ae4a:	2301      	movne	r3, #1
 800ae4c:	2300      	moveq	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d102      	bne.n	800ae64 <HAL_UART_IRQHandler+0x144>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d031      	beq.n	800aec8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f9aa 	bl	800b1be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d023      	beq.n	800aec0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	695a      	ldr	r2, [r3, #20]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d013      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae94:	4a21      	ldr	r2, [pc, #132]	; (800af1c <HAL_UART_IRQHandler+0x1fc>)
 800ae96:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fb fbeb 	bl	8006678 <HAL_DMA_Abort_IT>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d016      	beq.n	800aed6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb6:	e00e      	b.n	800aed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f84c 	bl	800af56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aebe:	e00a      	b.n	800aed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f848 	bl	800af56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec6:	e006      	b.n	800aed6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f844 	bl	800af56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800aed4:	e01d      	b.n	800af12 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed6:	bf00      	nop
    return;
 800aed8:	e01b      	b.n	800af12 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d008      	beq.n	800aef6 <HAL_UART_IRQHandler+0x1d6>
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f9f0 	bl	800b2d4 <UART_Transmit_IT>
    return;
 800aef4:	e00e      	b.n	800af14 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d009      	beq.n	800af14 <HAL_UART_IRQHandler+0x1f4>
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa31 	bl	800b372 <UART_EndTransmit_IT>
    return;
 800af10:	e000      	b.n	800af14 <HAL_UART_IRQHandler+0x1f4>
    return;
 800af12:	bf00      	nop
  }
}
 800af14:	3720      	adds	r7, #32
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	0800b1f9 	.word	0x0800b1f9

0800af20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr

0800af32 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800af3a:	bf00      	nop
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	bc80      	pop	{r7}
 800af54:	4770      	bx	lr

0800af56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af56:	b480      	push	{r7}
 800af58:	b083      	sub	sp, #12
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr

0800af68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	bc80      	pop	{r7}
 800af78:	4770      	bx	lr

0800af7a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	d113      	bne.n	800afbe <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afaa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afba:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afbc:	e002      	b.n	800afc4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7f7 fe74 	bl	8002cac <HAL_UART_TxCpltCallback>
}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff ffa0 	bl	800af20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0320 	and.w	r3, r3, #32
 800b000:	2b00      	cmp	r3, #0
 800b002:	d11e      	bne.n	800b042 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b018:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	695a      	ldr	r2, [r3, #20]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f022 0201 	bic.w	r2, r2, #1
 800b028:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	695a      	ldr	r2, [r3, #20]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b038:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff ff75 	bl	800af32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b048:	bf00      	nop
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7ff ff70 	bl	800af44 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bf14      	ite	ne
 800b08c:	2301      	movne	r3, #1
 800b08e:	2300      	moveq	r3, #0
 800b090:	b2db      	uxtb	r3, r3
 800b092:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b21      	cmp	r3, #33	; 0x21
 800b09e:	d108      	bne.n	800b0b2 <UART_DMAError+0x46>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d005      	beq.n	800b0b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b0ac:	68b8      	ldr	r0, [r7, #8]
 800b0ae:	f000 f871 	bl	800b194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bf14      	ite	ne
 800b0c0:	2301      	movne	r3, #1
 800b0c2:	2300      	moveq	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b22      	cmp	r3, #34	; 0x22
 800b0d2:	d108      	bne.n	800b0e6 <UART_DMAError+0x7a>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d005      	beq.n	800b0e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f000 f86c 	bl	800b1be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ea:	f043 0210 	orr.w	r2, r3, #16
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0f2:	68b8      	ldr	r0, [r7, #8]
 800b0f4:	f7ff ff2f 	bl	800af56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b110:	e02c      	b.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d028      	beq.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d007      	beq.n	800b130 <UART_WaitOnFlagUntilTimeout+0x30>
 800b120:	f7fb f826 	bl	8006170 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d21d      	bcs.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b13e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695a      	ldr	r2, [r3, #20]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2220      	movs	r2, #32
 800b154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e00f      	b.n	800b18c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	4013      	ands	r3, r2
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	bf0c      	ite	eq
 800b17c:	2301      	moveq	r3, #1
 800b17e:	2300      	movne	r3, #0
 800b180:	b2db      	uxtb	r3, r3
 800b182:	461a      	mov	r2, r3
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	429a      	cmp	r2, r3
 800b188:	d0c3      	beq.n	800b112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b1aa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bc80      	pop	{r7}
 800b1bc:	4770      	bx	lr

0800b1be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	695a      	ldr	r2, [r3, #20]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0201 	bic.w	r2, r2, #1
 800b1e4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr

0800b1f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7ff fe9f 	bl	800af56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b218:	bf00      	nop
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22c:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	2200      	movs	r2, #0
 800b234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b244:	2b00      	cmp	r3, #0
 800b246:	d114      	bne.n	800b272 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2220      	movs	r2, #32
 800b25e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2220      	movs	r2, #32
 800b266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff fe7c 	bl	800af68 <HAL_UART_AbortCpltCallback>
 800b270:	e000      	b.n	800b274 <UART_DMATxAbortCallback+0x54>
      return;
 800b272:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28c:	2200      	movs	r2, #0
 800b28e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d114      	bne.n	800b2cc <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fe4f 	bl	800af68 <HAL_UART_AbortCpltCallback>
 800b2ca:	e000      	b.n	800b2ce <UART_DMARxAbortCallback+0x54>
      return;
 800b2cc:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b21      	cmp	r3, #33	; 0x21
 800b2e6:	d13e      	bne.n	800b366 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f0:	d114      	bne.n	800b31c <UART_Transmit_IT+0x48>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d110      	bne.n	800b31c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b30e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	1c9a      	adds	r2, r3, #2
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	621a      	str	r2, [r3, #32]
 800b31a:	e008      	b.n	800b32e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	1c59      	adds	r1, r3, #1
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	6211      	str	r1, [r2, #32]
 800b326:	781a      	ldrb	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	b29b      	uxth	r3, r3
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	4619      	mov	r1, r3
 800b33c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10f      	bne.n	800b362 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b350:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b360:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	e000      	b.n	800b368 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b366:	2302      	movs	r3, #2
  }
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7f7 fc8a 	bl	8002cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b22      	cmp	r3, #34	; 0x22
 800b3b4:	d170      	bne.n	800b498 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3be:	d117      	bne.n	800b3f0 <UART_Receive_IT+0x4e>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d113      	bne.n	800b3f0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e8:	1c9a      	adds	r2, r3, #2
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	629a      	str	r2, [r3, #40]	; 0x28
 800b3ee:	e026      	b.n	800b43e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b402:	d007      	beq.n	800b414 <UART_Receive_IT+0x72>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <UART_Receive_IT+0x80>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	e008      	b.n	800b434 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29b      	uxth	r3, r3
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	4619      	mov	r1, r3
 800b44c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d120      	bne.n	800b494 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0220 	bic.w	r2, r2, #32
 800b460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68da      	ldr	r2, [r3, #12]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b470:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	695a      	ldr	r2, [r3, #20]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0201 	bic.w	r2, r2, #1
 800b480:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fd51 	bl	800af32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	e002      	b.n	800b49a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	e000      	b.n	800b49a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b498:	2302      	movs	r3, #2
  }
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b4de:	f023 030c 	bic.w	r3, r3, #12
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	430b      	orrs	r3, r1
 800b4ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a2c      	ldr	r2, [pc, #176]	; (800b5b8 <UART_SetConfig+0x114>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d103      	bne.n	800b514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b50c:	f7fd fd4c 	bl	8008fa8 <HAL_RCC_GetPCLK2Freq>
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	e002      	b.n	800b51a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b514:	f7fd fd34 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 800b518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009a      	lsls	r2, r3, #2
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	4a22      	ldr	r2, [pc, #136]	; (800b5bc <UART_SetConfig+0x118>)
 800b532:	fba2 2303 	umull	r2, r3, r2, r3
 800b536:	095b      	lsrs	r3, r3, #5
 800b538:	0119      	lsls	r1, r3, #4
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	009a      	lsls	r2, r3, #2
 800b544:	441a      	add	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b550:	4b1a      	ldr	r3, [pc, #104]	; (800b5bc <UART_SetConfig+0x118>)
 800b552:	fba3 0302 	umull	r0, r3, r3, r2
 800b556:	095b      	lsrs	r3, r3, #5
 800b558:	2064      	movs	r0, #100	; 0x64
 800b55a:	fb00 f303 	mul.w	r3, r0, r3
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	011b      	lsls	r3, r3, #4
 800b562:	3332      	adds	r3, #50	; 0x32
 800b564:	4a15      	ldr	r2, [pc, #84]	; (800b5bc <UART_SetConfig+0x118>)
 800b566:	fba2 2303 	umull	r2, r3, r2, r3
 800b56a:	095b      	lsrs	r3, r3, #5
 800b56c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b570:	4419      	add	r1, r3
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	009a      	lsls	r2, r3, #2
 800b57c:	441a      	add	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	fbb2 f2f3 	udiv	r2, r2, r3
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <UART_SetConfig+0x118>)
 800b58a:	fba3 0302 	umull	r0, r3, r3, r2
 800b58e:	095b      	lsrs	r3, r3, #5
 800b590:	2064      	movs	r0, #100	; 0x64
 800b592:	fb00 f303 	mul.w	r3, r0, r3
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	3332      	adds	r3, #50	; 0x32
 800b59c:	4a07      	ldr	r2, [pc, #28]	; (800b5bc <UART_SetConfig+0x118>)
 800b59e:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a2:	095b      	lsrs	r3, r3, #5
 800b5a4:	f003 020f 	and.w	r2, r3, #15
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	40013800 	.word	0x40013800
 800b5bc:	51eb851f 	.word	0x51eb851f

0800b5c0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af04      	add	r7, sp, #16
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a6b      	ldr	r2, [pc, #428]	; (800b778 <_ZN10ControllerC1Ev+0x1b8>)
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a6a      	ldr	r2, [pc, #424]	; (800b77c <_ZN10ControllerC1Ev+0x1bc>)
 800b5d2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	22c8      	movs	r2, #200	; 0xc8
 800b5d8:	641a      	str	r2, [r3, #64]	; 0x40
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f5 fb5c 	bl	8000c9c <__aeabi_i2f>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b5ec:	f7f5 fc5e 	bl	8000eac <__aeabi_fdiv>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	645a      	str	r2, [r3, #68]	; 0x44
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a61      	ldr	r2, [pc, #388]	; (800b780 <_ZN10ControllerC1Ev+0x1c0>)
 800b5fc:	649a      	str	r2, [r3, #72]	; 0x48
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a60      	ldr	r2, [pc, #384]	; (800b784 <_ZN10ControllerC1Ev+0x1c4>)
 800b602:	64da      	str	r2, [r3, #76]	; 0x4c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a60      	ldr	r2, [pc, #384]	; (800b788 <_ZN10ControllerC1Ev+0x1c8>)
 800b608:	651a      	str	r2, [r3, #80]	; 0x50
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	655a      	str	r2, [r3, #84]	; 0x54
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a5d      	ldr	r2, [pc, #372]	; (800b78c <_ZN10ControllerC1Ev+0x1cc>)
 800b616:	659a      	str	r2, [r3, #88]	; 0x58
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a5d      	ldr	r2, [pc, #372]	; (800b790 <_ZN10ControllerC1Ev+0x1d0>)
 800b61c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a5c      	ldr	r2, [pc, #368]	; (800b794 <_ZN10ControllerC1Ev+0x1d4>)
 800b622:	661a      	str	r2, [r3, #96]	; 0x60
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	665a      	str	r2, [r3, #100]	; 0x64
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	669a      	str	r2, [r3, #104]	; 0x68
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a56      	ldr	r2, [pc, #344]	; (800b798 <_ZN10ControllerC1Ev+0x1d8>)
 800b640:	671a      	str	r2, [r3, #112]	; 0x70
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a55      	ldr	r2, [pc, #340]	; (800b79c <_ZN10ControllerC1Ev+0x1dc>)
 800b646:	675a      	str	r2, [r3, #116]	; 0x74
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a55      	ldr	r2, [pc, #340]	; (800b7a0 <_ZN10ControllerC1Ev+0x1e0>)
 800b64c:	679a      	str	r2, [r3, #120]	; 0x78
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a54      	ldr	r2, [pc, #336]	; (800b7a4 <_ZN10ControllerC1Ev+0x1e4>)
 800b652:	67da      	str	r2, [r3, #124]	; 0x7c
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a54      	ldr	r2, [pc, #336]	; (800b7a8 <_ZN10ControllerC1Ev+0x1e8>)
 800b658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a53      	ldr	r2, [pc, #332]	; (800b7ac <_ZN10ControllerC1Ev+0x1ec>)
 800b660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a52      	ldr	r2, [pc, #328]	; (800b7b0 <_ZN10ControllerC1Ev+0x1f0>)
 800b668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f04f 0200 	mov.w	r2, #0
 800b672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f04f 0200 	mov.w	r2, #0
 800b69a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800b6a4:	a330      	add	r3, pc, #192	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ae:	a32e      	add	r3, pc, #184	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	e9cd 2300 	strd	r2, r3, [sp]
 800b6b8:	a32d      	add	r3, pc, #180	; (adr r3, 800b770 <_ZN10ControllerC1Ev+0x1b0>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	4608      	mov	r0, r1
 800b6c0:	f005 fb4c 	bl	8010d5c <_ZN3lpfC1Eddd>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800b6ca:	a327      	add	r3, pc, #156	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6d4:	a324      	add	r3, pc, #144	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	e9cd 2300 	strd	r2, r3, [sp]
 800b6de:	a324      	add	r3, pc, #144	; (adr r3, 800b770 <_ZN10ControllerC1Ev+0x1b0>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	f005 fb39 	bl	8010d5c <_ZN3lpfC1Eddd>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b6f0:	a31d      	add	r3, pc, #116	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6fa:	a31b      	add	r3, pc, #108	; (adr r3, 800b768 <_ZN10ControllerC1Ev+0x1a8>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	e9cd 2300 	strd	r2, r3, [sp]
 800b704:	a31a      	add	r3, pc, #104	; (adr r3, 800b770 <_ZN10ControllerC1Ev+0x1b0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	4608      	mov	r0, r1
 800b70c:	f005 fb26 	bl	8010d5c <_ZN3lpfC1Eddd>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b716:	4618      	mov	r0, r3
 800b718:	f004 ff1a 	bl	8010550 <_ZN3PIDC1Ev>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b722:	4618      	mov	r0, r3
 800b724:	f004 ff14 	bl	8010550 <_ZN3PIDC1Ev>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800b72e:	4618      	mov	r0, r3
 800b730:	f004 ff0e 	bl	8010550 <_ZN3PIDC1Ev>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b73a:	4618      	mov	r0, r3
 800b73c:	f004 ff08 	bl	8010550 <_ZN3PIDC1Ev>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800b746:	4618      	mov	r0, r3
 800b748:	f004 ff02 	bl	8010550 <_ZN3PIDC1Ev>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800b752:	4618      	mov	r0, r3
 800b754:	f004 fefc 	bl	8010550 <_ZN3PIDC1Ev>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	f3af 8000 	nop.w
 800b768:	fc3b4f61 	.word	0xfc3b4f61
 800b76c:	3fa35935 	.word	0x3fa35935
 800b770:	4f0d844d 	.word	0x4f0d844d
 800b774:	3fed94af 	.word	0x3fed94af
 800b778:	44c1c000 	.word	0x44c1c000
 800b77c:	42654ca3 	.word	0x42654ca3
 800b780:	3fb33333 	.word	0x3fb33333
 800b784:	411cf5c3 	.word	0x411cf5c3
 800b788:	41f9d70a 	.word	0x41f9d70a
 800b78c:	3e6147ae 	.word	0x3e6147ae
 800b790:	3d4ccccd 	.word	0x3d4ccccd
 800b794:	3cf5c28f 	.word	0x3cf5c28f
 800b798:	40a00000 	.word	0x40a00000
 800b79c:	41100000 	.word	0x41100000
 800b7a0:	41400000 	.word	0x41400000
 800b7a4:	40400000 	.word	0x40400000
 800b7a8:	41200000 	.word	0x41200000
 800b7ac:	41700000 	.word	0x41700000
 800b7b0:	c0800000 	.word	0xc0800000

0800b7b4 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	b092      	sub	sp, #72	; 0x48
 800b7ba:	af04      	add	r7, sp, #16
 800b7bc:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	609a      	str	r2, [r3, #8]
        
    if(!swarm) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b828:	f083 0301 	eor.w	r3, r3, #1
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d01b      	beq.n	800b86a <_ZN10Controller3RunEv+0xb6>
         Kp_roll = 0.28; //0.3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a52      	ldr	r2, [pc, #328]	; (800b980 <_ZN10Controller3RunEv+0x1cc>)
 800b836:	659a      	str	r2, [r3, #88]	; 0x58
         Ki_roll = 0.02;  //0.008
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a52      	ldr	r2, [pc, #328]	; (800b984 <_ZN10Controller3RunEv+0x1d0>)
 800b83c:	65da      	str	r2, [r3, #92]	; 0x5c
         Kd_roll = 0.03; //0.007 0.01
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a51      	ldr	r2, [pc, #324]	; (800b988 <_ZN10Controller3RunEv+0x1d4>)
 800b842:	661a      	str	r2, [r3, #96]	; 0x60

         Kp_pitch = Kp_roll;	//0.8
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	665a      	str	r2, [r3, #100]	; 0x64
         Ki_pitch = Ki_roll;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	669a      	str	r2, [r3, #104]	; 0x68
         Kd_pitch = Kd_roll;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	66da      	str	r2, [r3, #108]	; 0x6c

         Kp_yaw = 5.0;// 1;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a4b      	ldr	r2, [pc, #300]	; (800b98c <_ZN10Controller3RunEv+0x1d8>)
 800b860:	671a      	str	r2, [r3, #112]	; 0x70
         Ki_yaw = 12;// 1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a4a      	ldr	r2, [pc, #296]	; (800b990 <_ZN10Controller3RunEv+0x1dc>)
 800b866:	675a      	str	r2, [r3, #116]	; 0x74
 800b868:	e01b      	b.n	800b8a2 <_ZN10Controller3RunEv+0xee>
    }

    else {
        Kp_roll = 0.9; //0.3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a49      	ldr	r2, [pc, #292]	; (800b994 <_ZN10Controller3RunEv+0x1e0>)
 800b86e:	659a      	str	r2, [r3, #88]	; 0x58
        Ki_roll = 0.00;  //0.008
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f04f 0200 	mov.w	r2, #0
 800b876:	65da      	str	r2, [r3, #92]	; 0x5c
        Kd_roll = 0.03; //0.007 0.01
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a43      	ldr	r2, [pc, #268]	; (800b988 <_ZN10Controller3RunEv+0x1d4>)
 800b87c:	661a      	str	r2, [r3, #96]	; 0x60

        Kp_pitch = Kp_roll;	//0.8
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	665a      	str	r2, [r3, #100]	; 0x64
        Ki_pitch = Ki_roll;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	669a      	str	r2, [r3, #104]	; 0x68
        Kd_pitch = Kd_roll;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	66da      	str	r2, [r3, #108]	; 0x6c

        Kp_yaw = 5.0;// 1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a3c      	ldr	r2, [pc, #240]	; (800b98c <_ZN10Controller3RunEv+0x1d8>)
 800b89a:	671a      	str	r2, [r3, #112]	; 0x70
        Ki_yaw = 12;// 1;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a3c      	ldr	r2, [pc, #240]	; (800b990 <_ZN10Controller3RunEv+0x1dc>)
 800b8a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b8ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b8b6:	f005 f9db 	bl	8010c70 <_ZN3PID3SatEfii>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7f5 fc1d 	bl	80010fc <__aeabi_f2iz>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch(mod) {
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	f000 8153 	beq.w	800bb78 <_ZN10Controller3RunEv+0x3c4>
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	f300 81d4 	bgt.w	800bc80 <_ZN10Controller3RunEv+0x4cc>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <_ZN10Controller3RunEv+0x12e>
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d05b      	beq.n	800b998 <_ZN10Controller3RunEv+0x1e4>
 800b8e0:	e1ce      	b.n	800bc80 <_ZN10Controller3RunEv+0x4cc>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b8ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8f2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b8f6:	f005 f9bb 	bl	8010c70 <_ZN3PID3SatEfii>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7f5 fbfd 	bl	80010fc <__aeabi_f2iz>
 800b902:	4603      	mov	r3, r0
 800b904:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f005 fa2a 	bl	8010d92 <_ZN3lpf3RunEf>
 800b93e:	4602      	mov	r2, r0
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b952:	4619      	mov	r1, r3
 800b954:	4610      	mov	r0, r2
 800b956:	f005 fa1c 	bl	8010d92 <_ZN3lpf3RunEf>
 800b95a:	4602      	mov	r2, r0
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f005 fa0e 	bl	8010d92 <_ZN3lpf3RunEf>
 800b976:	4602      	mov	r2, r0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800b97e:	e17f      	b.n	800bc80 <_ZN10Controller3RunEv+0x4cc>
 800b980:	3e8f5c29 	.word	0x3e8f5c29
 800b984:	3ca3d70a 	.word	0x3ca3d70a
 800b988:	3cf5c28f 	.word	0x3cf5c28f
 800b98c:	40a00000 	.word	0x40a00000
 800b990:	41400000 	.word	0x41400000
 800b994:	3f666666 	.word	0x3f666666
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f5 fbc0 	bl	8001148 <__aeabi_f2uiz>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	9302      	str	r3, [sp, #8]
 800b9cc:	9501      	str	r5, [sp, #4]
 800b9ce:	9400      	str	r4, [sp, #0]
 800b9d0:	4653      	mov	r3, sl
 800b9d2:	464a      	mov	r2, r9
 800b9d4:	4641      	mov	r1, r8
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f004 fe54 	bl	8010684 <_ZN3PID6PI_VelEfffffj>
 800b9dc:	4604      	mov	r4, r0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	f7f5 f9ab 	bl	8000d44 <__aeabi_fmul>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f7f5 f89e 	bl	8000b34 <__addsf3>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800ba02:	4b5c      	ldr	r3, [pc, #368]	; (800bb74 <_ZN10Controller3RunEv+0x3c0>)
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
			float roll_r = roll * deg2rad;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba0e:	f7f5 f999 	bl	8000d44 <__aeabi_fmul>
 800ba12:	4603      	mov	r3, r0
 800ba14:	62bb      	str	r3, [r7, #40]	; 0x28
			float pitch_r = pitch * deg2rad;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba1e:	f7f5 f991 	bl	8000d44 <__aeabi_fmul>
 800ba22:	4603      	mov	r3, r0
 800ba24:	627b      	str	r3, [r7, #36]	; 0x24
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800ba26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba28:	f7f6 fe1a 	bl	8002660 <_ZSt3cosf>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4619      	mov	r1, r3
 800ba30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ba34:	f7f5 fa3a 	bl	8000eac <__aeabi_fdiv>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba3e:	f7f6 fe0f 	bl	8002660 <_ZSt3cosf>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4619      	mov	r1, r3
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7f5 fa30 	bl	8000eac <__aeabi_fdiv>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	623b      	str	r3, [r7, #32]

			F = F * b2e ; // Body to Earth
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ba56:	6a39      	ldr	r1, [r7, #32]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7f5 f973 	bl	8000d44 <__aeabi_fmul>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	461a      	mov	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f5 fb3f 	bl	80010fc <__aeabi_f2iz>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f5 fb39 	bl	80010fc <__aeabi_f2iz>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4620      	mov	r0, r4
 800ba92:	f005 f8ed 	bl	8010c70 <_ZN3PID3SatEfii>
 800ba96:	4602      	mov	r2, r0
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f005 f90f 	bl	8010cd0 <_ZN3PID5F2thrEf>
 800bab2:	4603      	mov	r3, r0
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800babc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800babe:	f7f5 f8ed 	bl	8000c9c <__aeabi_i2f>
 800bac2:	4601      	mov	r1, r0
 800bac4:	f240 434c 	movw	r3, #1100	; 0x44c
 800bac8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bacc:	4620      	mov	r0, r4
 800bace:	f005 f8cf 	bl	8010c70 <_ZN3PID3SatEfii>
 800bad2:	4603      	mov	r3, r0
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f5 fb11 	bl	80010fc <__aeabi_f2iz>
 800bada:	4603      	mov	r3, r0
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800bade:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bae0:	f7f5 f8dc 	bl	8000c9c <__aeabi_i2f>
 800bae4:	4602      	mov	r2, r0
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f005 f931 	bl	8010d92 <_ZN3lpf3RunEf>
 800bb30:	4602      	mov	r2, r0
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f005 f923 	bl	8010d92 <_ZN3lpf3RunEf>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f005 f915 	bl	8010d92 <_ZN3lpf3RunEf>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800bb70:	e086      	b.n	800bc80 <_ZN10Controller3RunEv+0x4cc>
 800bb72:	bf00      	nop
 800bb74:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800bb84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb88:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bb8c:	f005 f870 	bl	8010c70 <_ZN3PID3SatEfii>
 800bb90:	4603      	mov	r3, r0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f5 fab2 	bl	80010fc <__aeabi_f2iz>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba0:	2b09      	cmp	r3, #9
 800bba2:	d958      	bls.n	800bc56 <_ZN10Controller3RunEv+0x4a2>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bbce:	9201      	str	r2, [sp, #4]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	f004 feab 	bl	8010930 <_ZN3PID7PID_PosEfffff>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800bc06:	9201      	str	r2, [sp, #4]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	f004 fe8f 	bl	8010930 <_ZN3PID7PID_PosEfffff>
 800bc12:	4602      	mov	r2, r0
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bc26:	f06f 0313 	mvn.w	r3, #19
 800bc2a:	2214      	movs	r2, #20
 800bc2c:	f005 f820 	bl	8010c70 <_ZN3PID3SatEfii>
 800bc30:	4602      	mov	r2, r0
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bc44:	f06f 0313 	mvn.w	r3, #19
 800bc48:	2214      	movs	r2, #20
 800bc4a:	f005 f811 	bl	8010c70 <_ZN3PID3SatEfii>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4610      	mov	r0, r2
 800bc72:	f005 f88e 	bl	8010d92 <_ZN3lpf3RunEf>
 800bc76:	4602      	mov	r2, r0
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800bc7e:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4623      	mov	r3, r4
 800bc9c:	f004 fcb4 	bl	8010608 <_ZN3PID7P_AngleEffff>
 800bca0:	4602      	mov	r2, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f7f4 ff42 	bl	8000b34 <__addsf3>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	691a      	ldr	r2, [r3, #16]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	f004 fc97 	bl	8010608 <_ZN3PID7P_AngleEffff>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bce2:	4619      	mov	r1, r3
 800bce4:	4610      	mov	r0, r2
 800bce6:	f7f4 ff25 	bl	8000b34 <__addsf3>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f004 fd1c 	bl	8010740 <_ZN3PID6RateFFEf>
 800bd08:	61f8      	str	r0, [r7, #28]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bd16:	4619      	mov	r1, r3
 800bd18:	4610      	mov	r0, r2
 800bd1a:	f004 fd11 	bl	8010740 <_ZN3PID6RateFFEf>
 800bd1e:	61b8      	str	r0, [r7, #24]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699e      	ldr	r6, [r3, #24]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bd46:	9003      	str	r0, [sp, #12]
 800bd48:	9102      	str	r1, [sp, #8]
 800bd4a:	9201      	str	r2, [sp, #4]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	4663      	mov	r3, ip
 800bd50:	4632      	mov	r2, r6
 800bd52:	4629      	mov	r1, r5
 800bd54:	4620      	mov	r0, r4
 800bd56:	f004 fd43 	bl	80107e0 <_ZN3PID9PID_Rate2Efffffff>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	69de      	ldr	r6, [r3, #28]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bd80:	6879      	ldr	r1, [r7, #4]
 800bd82:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bd88:	9003      	str	r0, [sp, #12]
 800bd8a:	9102      	str	r1, [sp, #8]
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	4663      	mov	r3, ip
 800bd92:	4632      	mov	r2, r6
 800bd94:	4629      	mov	r1, r5
 800bd96:	4620      	mov	r0, r4
 800bd98:	f004 fd22 	bl	80107e0 <_ZN3PID9PID_Rate2Efffffff>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1a      	ldr	r2, [r3, #32]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdbc:	f04f 0500 	mov.w	r5, #0
 800bdc0:	9501      	str	r5, [sp, #4]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	4623      	mov	r3, r4
 800bdc6:	f004 fdf1 	bl	80109ac <_ZN3PID7PD_RateEfffff>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140


#ifdef UAV1


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800bdd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bdd4:	f7f4 ff62 	bl	8000c9c <__aeabi_i2f>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7f4 fea6 	bl	8000b34 <__addsf3>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7f4 fe9b 	bl	8000b30 <__aeabi_fsub>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f7f4 fe92 	bl	8000b30 <__aeabi_fsub>
 800be0c:	4603      	mov	r3, r0
 800be0e:	4982      	ldr	r1, [pc, #520]	; (800c018 <_ZN10Controller3RunEv+0x864>)
 800be10:	4618      	mov	r0, r3
 800be12:	f7f4 fe8f 	bl	8000b34 <__addsf3>
 800be16:	4603      	mov	r3, r0
 800be18:	4980      	ldr	r1, [pc, #512]	; (800c01c <_ZN10Controller3RunEv+0x868>)
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f4 fe88 	bl	8000b30 <__aeabi_fsub>
 800be20:	4603      	mov	r3, r0
 800be22:	4618      	mov	r0, r3
 800be24:	f7f5 f96a 	bl	80010fc <__aeabi_f2iz>
 800be28:	4603      	mov	r3, r0
 800be2a:	617b      	str	r3, [r7, #20]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800be2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be2e:	f7f4 ff35 	bl	8000c9c <__aeabi_i2f>
 800be32:	4602      	mov	r2, r0
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800be3a:	4619      	mov	r1, r3
 800be3c:	4610      	mov	r0, r2
 800be3e:	f7f4 fe77 	bl	8000b30 <__aeabi_fsub>
 800be42:	4603      	mov	r3, r0
 800be44:	461a      	mov	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7f4 fe70 	bl	8000b34 <__addsf3>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f7f4 fe65 	bl	8000b30 <__aeabi_fsub>
 800be66:	4603      	mov	r3, r0
 800be68:	496b      	ldr	r1, [pc, #428]	; (800c018 <_ZN10Controller3RunEv+0x864>)
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f4 fe60 	bl	8000b30 <__aeabi_fsub>
 800be70:	4603      	mov	r3, r0
 800be72:	496a      	ldr	r1, [pc, #424]	; (800c01c <_ZN10Controller3RunEv+0x868>)
 800be74:	4618      	mov	r0, r3
 800be76:	f7f4 fe5d 	bl	8000b34 <__addsf3>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f5 f93d 	bl	80010fc <__aeabi_f2iz>
 800be82:	4603      	mov	r3, r0
 800be84:	613b      	str	r3, [r7, #16]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800be86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be88:	f7f4 ff08 	bl	8000c9c <__aeabi_i2f>
 800be8c:	4602      	mov	r2, r0
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	f7f4 fe4c 	bl	8000b34 <__addsf3>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7f4 fe43 	bl	8000b34 <__addsf3>
 800beae:	4603      	mov	r3, r0
 800beb0:	461a      	mov	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7f4 fe3a 	bl	8000b34 <__addsf3>
 800bec0:	4603      	mov	r3, r0
 800bec2:	4955      	ldr	r1, [pc, #340]	; (800c018 <_ZN10Controller3RunEv+0x864>)
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7f4 fe35 	bl	8000b34 <__addsf3>
 800beca:	4603      	mov	r3, r0
 800becc:	4953      	ldr	r1, [pc, #332]	; (800c01c <_ZN10Controller3RunEv+0x868>)
 800bece:	4618      	mov	r0, r3
 800bed0:	f7f4 fe30 	bl	8000b34 <__addsf3>
 800bed4:	4603      	mov	r3, r0
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f5 f910 	bl	80010fc <__aeabi_f2iz>
 800bedc:	4603      	mov	r3, r0
 800bede:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800bee0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bee2:	f7f4 fedb 	bl	8000c9c <__aeabi_i2f>
 800bee6:	4602      	mov	r2, r0
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f7f4 fe1d 	bl	8000b30 <__aeabi_fsub>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bf00:	4619      	mov	r1, r3
 800bf02:	4610      	mov	r0, r2
 800bf04:	f7f4 fe14 	bl	8000b30 <__aeabi_fsub>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7f4 fe0d 	bl	8000b34 <__addsf3>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	493e      	ldr	r1, [pc, #248]	; (800c018 <_ZN10Controller3RunEv+0x864>)
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f4 fe06 	bl	8000b30 <__aeabi_fsub>
 800bf24:	4603      	mov	r3, r0
 800bf26:	493d      	ldr	r1, [pc, #244]	; (800c01c <_ZN10Controller3RunEv+0x868>)
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7f4 fe01 	bl	8000b30 <__aeabi_fsub>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7f5 f8e3 	bl	80010fc <__aeabi_f2iz>
 800bf36:	4603      	mov	r3, r0
 800bf38:	60bb      	str	r3, [r7, #8]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bf40:	6978      	ldr	r0, [r7, #20]
 800bf42:	f7f4 feab 	bl	8000c9c <__aeabi_i2f>
 800bf46:	4601      	mov	r1, r0
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	f240 434c 	movw	r3, #1100	; 0x44c
 800bf50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bf54:	4620      	mov	r0, r4
 800bf56:	f004 fe51 	bl	8010bfc <_ZN3PID3SatEfiii>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f5 f8cd 	bl	80010fc <__aeabi_f2iz>
 800bf62:	4603      	mov	r3, r0
 800bf64:	617b      	str	r3, [r7, #20]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bf6c:	6938      	ldr	r0, [r7, #16]
 800bf6e:	f7f4 fe95 	bl	8000c9c <__aeabi_i2f>
 800bf72:	4601      	mov	r1, r0
 800bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	f240 434c 	movw	r3, #1100	; 0x44c
 800bf7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bf80:	4620      	mov	r0, r4
 800bf82:	f004 fe3b 	bl	8010bfc <_ZN3PID3SatEfiii>
 800bf86:	4603      	mov	r3, r0
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7f5 f8b7 	bl	80010fc <__aeabi_f2iz>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	613b      	str	r3, [r7, #16]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7f4 fe7f 	bl	8000c9c <__aeabi_i2f>
 800bf9e:	4601      	mov	r1, r0
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	f240 434c 	movw	r3, #1100	; 0x44c
 800bfa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f004 fe25 	bl	8010bfc <_ZN3PID3SatEfiii>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7f5 f8a1 	bl	80010fc <__aeabi_f2iz>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	60fb      	str	r3, [r7, #12]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	f7f4 fe69 	bl	8000c9c <__aeabi_i2f>
 800bfca:	4601      	mov	r1, r0
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	f240 434c 	movw	r3, #1100	; 0x44c
 800bfd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f004 fe0f 	bl	8010bfc <_ZN3PID3SatEfiii>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f5 f88b 	bl	80010fc <__aeabi_f2iz>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	60bb      	str	r3, [r7, #8]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    if(swarm) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d015      	beq.n	800c020 <_ZN10Controller3RunEv+0x86c>
        controller_output_pwm2[0] = thr2;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = thr2;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c000:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = thr2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c008:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = thr2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c010:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800c014:	e018      	b.n	800c048 <_ZN10Controller3RunEv+0x894>
 800c016:	bf00      	nop
 800c018:	41f00000 	.word	0x41f00000
 800c01c:	41500000 	.word	0x41500000
    }

    else {
        controller_output_pwm2[0] = 1000;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c026:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = 1000;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c030:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = 1000;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c03a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = 1000;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c044:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c054:	4618      	mov	r0, r3
 800c056:	f7f4 fe21 	bl	8000c9c <__aeabi_i2f>
 800c05a:	4601      	mov	r1, r0
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c064:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c068:	4620      	mov	r0, r4
 800c06a:	f004 fdc7 	bl	8010bfc <_ZN3PID3SatEfiii>
 800c06e:	4603      	mov	r3, r0
 800c070:	4618      	mov	r0, r3
 800c072:	f7f5 f843 	bl	80010fc <__aeabi_f2iz>
 800c076:	4602      	mov	r2, r0
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7f4 fe06 	bl	8000c9c <__aeabi_i2f>
 800c090:	4601      	mov	r1, r0
 800c092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c09a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f004 fdac 	bl	8010bfc <_ZN3PID3SatEfiii>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f5 f828 	bl	80010fc <__aeabi_f2iz>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f4 fdeb 	bl	8000c9c <__aeabi_i2f>
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f004 fd91 	bl	8010bfc <_ZN3PID3SatEfiii>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f5 f80d 	bl	80010fc <__aeabi_f2iz>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f4 fdd0 	bl	8000c9c <__aeabi_i2f>
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c106:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c10a:	4620      	mov	r0, r4
 800c10c:	f004 fd76 	bl	8010bfc <_ZN3PID3SatEfiii>
 800c110:	4603      	mov	r3, r0
 800c112:	4618      	mov	r0, r3
 800c114:	f7f4 fff2 	bl	80010fc <__aeabi_f2iz>
 800c118:	4602      	mov	r2, r0
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800c140:	bf00      	nop
 800c142:	3738      	adds	r7, #56	; 0x38
 800c144:	46bd      	mov	sp, r7
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	bf00      	nop

0800c14c <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800c15a:	4618      	mov	r0, r3
 800c15c:	f004 fdf0 	bl	8010d40 <_ZN3PIDD1Ev>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800c166:	4618      	mov	r0, r3
 800c168:	f004 fdea 	bl	8010d40 <_ZN3PIDD1Ev>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c172:	4618      	mov	r0, r3
 800c174:	f004 fde4 	bl	8010d40 <_ZN3PIDD1Ev>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c17e:	4618      	mov	r0, r3
 800c180:	f004 fdde 	bl	8010d40 <_ZN3PIDD1Ev>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800c18a:	4618      	mov	r0, r3
 800c18c:	f004 fdd8 	bl	8010d40 <_ZN3PIDD1Ev>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c196:	4618      	mov	r0, r3
 800c198:	f004 fdd2 	bl	8010d40 <_ZN3PIDD1Ev>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	33f0      	adds	r3, #240	; 0xf0
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f004 fe4c 	bl	8010e3e <_ZN3lpfD1Ev>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	33c8      	adds	r3, #200	; 0xc8
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f004 fe47 	bl	8010e3e <_ZN3lpfD1Ev>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	33a0      	adds	r3, #160	; 0xa0
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f004 fe42 	bl	8010e3e <_ZN3lpfD1Ev>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	0000      	movs	r0, r0
	...

0800c1c8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af04      	add	r7, sp, #16
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f04f 0200 	mov.w	r2, #0
 800c1d6:	60da      	str	r2, [r3, #12]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a85      	ldr	r2, [pc, #532]	; (800c3f0 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800c1dc:	611a      	str	r2, [r3, #16]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f04f 0200 	mov.w	r2, #0
 800c1ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f04f 0200 	mov.w	r2, #0
 800c1f4:	635a      	str	r2, [r3, #52]	; 0x34
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a7e      	ldr	r2, [pc, #504]	; (800c3f4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a7e      	ldr	r2, [pc, #504]	; (800c3f8 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800c200:	651a      	str	r2, [r3, #80]	; 0x50
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a7d      	ldr	r2, [pc, #500]	; (800c3fc <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800c206:	655a      	str	r2, [r3, #84]	; 0x54
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f04f 0200 	mov.w	r2, #0
 800c20e:	659a      	str	r2, [r3, #88]	; 0x58
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	65da      	str	r2, [r3, #92]	; 0x5c
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f04f 0200 	mov.w	r2, #0
 800c21e:	661a      	str	r2, [r3, #96]	; 0x60
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a74      	ldr	r2, [pc, #464]	; (800c3f4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c224:	665a      	str	r2, [r3, #100]	; 0x64
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a75      	ldr	r2, [pc, #468]	; (800c400 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800c22a:	67da      	str	r2, [r3, #124]	; 0x7c
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f04f 0200 	mov.w	r2, #0
 800c232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a70      	ldr	r2, [pc, #448]	; (800c404 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800c244:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a6a      	ldr	r2, [pc, #424]	; (800c3f4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c24c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a68      	ldr	r2, [pc, #416]	; (800c3f4 <_ZN15Kalman_FiltresiC1Ev+0x22c>)
 800c254:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a6b      	ldr	r2, [pc, #428]	; (800c408 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c25c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a6a      	ldr	r2, [pc, #424]	; (800c40c <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800c264:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c26e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a66      	ldr	r2, [pc, #408]	; (800c410 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800c276:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a65      	ldr	r2, [pc, #404]	; (800c414 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800c27e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c288:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a62      	ldr	r2, [pc, #392]	; (800c418 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800c290:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	22c8      	movs	r2, #200	; 0xc8
 800c298:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f4 fcfa 	bl	8000c9c <__aeabi_i2f>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c2b0:	f7f4 fdfc 	bl	8000eac <__aeabi_fdiv>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7f4 f8b6 	bl	8000428 <__aeabi_f2d>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	6879      	ldr	r1, [r7, #4]
 800c2c2:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a54      	ldr	r2, [pc, #336]	; (800c41c <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800c2ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a53      	ldr	r2, [pc, #332]	; (800c420 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c2d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a51      	ldr	r2, [pc, #324]	; (800c420 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c2da:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a50      	ldr	r2, [pc, #320]	; (800c424 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800c2e2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800c2ec:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a4d      	ldr	r2, [pc, #308]	; (800c428 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800c2f4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c2fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a49      	ldr	r2, [pc, #292]	; (800c42c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800c306:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a48      	ldr	r2, [pc, #288]	; (800c430 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800c30e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a47      	ldr	r2, [pc, #284]	; (800c434 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800c316:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c320:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c32a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a41      	ldr	r2, [pc, #260]	; (800c438 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800c332:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 800c346:	a31e      	add	r3, pc, #120	; (adr r3, 800c3c0 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c350:	a31b      	add	r3, pc, #108	; (adr r3, 800c3c0 <_ZN15Kalman_FiltresiC1Ev+0x1f8>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	e9cd 2300 	strd	r2, r3, [sp]
 800c35a:	a31b      	add	r3, pc, #108	; (adr r3, 800c3c8 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	4608      	mov	r0, r1
 800c362:	f004 fcfb 	bl	8010d5c <_ZN3lpfC1Eddd>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800c36c:	a318      	add	r3, pc, #96	; (adr r3, 800c3d0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c376:	a316      	add	r3, pc, #88	; (adr r3, 800c3d0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	e9cd 2300 	strd	r2, r3, [sp]
 800c380:	a315      	add	r3, pc, #84	; (adr r3, 800c3d8 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	4608      	mov	r0, r1
 800c388:	f004 fce8 	bl	8010d5c <_ZN3lpfC1Eddd>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f503 7146 	add.w	r1, r3, #792	; 0x318
 800c392:	a313      	add	r3, pc, #76	; (adr r3, 800c3e0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c39c:	a310      	add	r3, pc, #64	; (adr r3, 800c3e0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	e9cd 2300 	strd	r2, r3, [sp]
 800c3a6:	a310      	add	r3, pc, #64	; (adr r3, 800c3e8 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	f004 fcd5 	bl	8010d5c <_ZN3lpfC1Eddd>

}
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	de7ea5f8 	.word	0xde7ea5f8
 800c3c4:	3fb2a454 	.word	0x3fb2a454
 800c3c8:	ab367a10 	.word	0xab367a10
 800c3cc:	3feb573e 	.word	0x3feb573e
 800c3d0:	fc3b4f61 	.word	0xfc3b4f61
 800c3d4:	3fa35935 	.word	0x3fa35935
 800c3d8:	4f0d844d 	.word	0x4f0d844d
 800c3dc:	3fed94af 	.word	0x3fed94af
 800c3e0:	e5c91d15 	.word	0xe5c91d15
 800c3e4:	3feda43f 	.word	0x3feda43f
 800c3e8:	cb923a2a 	.word	0xcb923a2a
 800c3ec:	bfeb487f 	.word	0xbfeb487f
 800c3f0:	3ca3d70a 	.word	0x3ca3d70a
 800c3f4:	4e6e6b28 	.word	0x4e6e6b28
 800c3f8:	3c23d70a 	.word	0x3c23d70a
 800c3fc:	3f333333 	.word	0x3f333333
 800c400:	47c35000 	.word	0x47c35000
 800c404:	461c4000 	.word	0x461c4000
 800c408:	41200000 	.word	0x41200000
 800c40c:	4b189680 	.word	0x4b189680
 800c410:	40a00000 	.word	0x40a00000
 800c414:	42480000 	.word	0x42480000
 800c418:	42654ca3 	.word	0x42654ca3
 800c41c:	38d1b717 	.word	0x38d1b717
 800c420:	40400000 	.word	0x40400000
 800c424:	41a00000 	.word	0x41a00000
 800c428:	3cdd2f1b 	.word	0x3cdd2f1b
 800c42c:	48f42400 	.word	0x48f42400
 800c430:	3727c5ac 	.word	0x3727c5ac
 800c434:	322bcc77 	.word	0x322bcc77
 800c438:	40066666 	.word	0x40066666

0800c43c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>:
void Kalman_Filtresi::PredictUpdatePos(pos_axis axis) {
 800c43c:	b5b0      	push	{r4, r5, r7, lr}
 800c43e:	b0a8      	sub	sp, #160	; 0xa0
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
	float pos,vel,a,b,accm,pos_gps,vgps,S1_1,S1_2,S1_3,S1_4,S2_1,S2_2,S2_3,S2_4,S3_1,S3_2,S3_3,S3_4,S4_1, S4_2, S4_3, S4_4;
	float angle;
	float deg2rad = M_PI/180.0;
 800c448:	4b3b      	ldr	r3, [pc, #236]	; (800c538 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0xfc>)
 800c44a:	643b      	str	r3, [r7, #64]	; 0x40

	switch (axis) {
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1c>
 800c452:	2b01      	cmp	r3, #1
 800c454:	d072      	beq.n	800c53c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x100>
 800c456:	e0df      	b.n	800c618 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
		case x_axis:
			pos = x;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c45e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apx;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vx;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c472:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bax;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c47c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = -pitch_ekf*deg2rad;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800c486:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c48a:	4619      	mov	r1, r3
 800c48c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c48e:	f7f4 fc59 	bl	8000d44 <__aeabi_fmul>
 800c492:	4603      	mov	r3, r0
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = xgps;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c49c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsx;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accx;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1x;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c4ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2x;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c4c4:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3x;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4cc:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4x;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c4d4:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1x;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4dc:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2x;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4e4:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3x;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c4ec:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4x;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4f4:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1x;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4fc:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2x;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c504:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3x;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c50c:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4x;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c514:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1x;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c51c:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2x;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c524:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3x;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c52c:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4x;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c534:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800c536:	e06f      	b.n	800c618 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x1dc>
 800c538:	3c8efa35 	.word	0x3c8efa35

		case y_axis:
			pos = y;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800c542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			a = apy;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800c54c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			vel = vy;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800c556:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			b = bay;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800c560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			angle = roll_ekf*deg2rad;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800c56a:	4619      	mov	r1, r3
 800c56c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c56e:	f7f4 fbe9 	bl	8000d44 <__aeabi_fmul>
 800c572:	4603      	mov	r3, r0
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c

			pos_gps = ygps;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800c57c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			vgps   = vgpsy;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			accm		= accy;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800c590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			S1_1 = Sp1_1y;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c59a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S1_2 = Sp1_2y;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
			S1_3 = Sp1_3y;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c5ac:	67bb      	str	r3, [r7, #120]	; 0x78
			S1_4 = Sp1_4y;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c5b4:	677b      	str	r3, [r7, #116]	; 0x74
			S2_1 = Sp2_1y;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c5bc:	673b      	str	r3, [r7, #112]	; 0x70
			S2_2 = Sp2_2y;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c5c4:	66fb      	str	r3, [r7, #108]	; 0x6c
			S2_3 = Sp2_3y;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c5cc:	66bb      	str	r3, [r7, #104]	; 0x68
			S2_4 = Sp2_4y;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c5d4:	667b      	str	r3, [r7, #100]	; 0x64
			S3_1 = Sp3_1y;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c5dc:	663b      	str	r3, [r7, #96]	; 0x60
			S3_2 = Sp3_2y;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
			S3_3 = Sp3_3y;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c5ec:	65bb      	str	r3, [r7, #88]	; 0x58
			S3_4 = Sp3_4y;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c5f4:	657b      	str	r3, [r7, #84]	; 0x54
			S4_1 = Sp4_1y;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c5fc:	653b      	str	r3, [r7, #80]	; 0x50
			S4_2 = Sp4_2y;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c604:	64fb      	str	r3, [r7, #76]	; 0x4c
			S4_3 = Sp4_3y;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c60c:	64bb      	str	r3, [r7, #72]	; 0x48
			S4_4 = Sp4_4y;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c614:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800c616:	bf00      	nop

	}
	pos =(a*pos_st*pos_st)/2 + (vel)*pos_st + (pos);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c620:	4618      	mov	r0, r3
 800c622:	f7f4 fb8f 	bl	8000d44 <__aeabi_fmul>
 800c626:	4603      	mov	r3, r0
 800c628:	461a      	mov	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	4619      	mov	r1, r3
 800c630:	4610      	mov	r0, r2
 800c632:	f7f4 fb87 	bl	8000d44 <__aeabi_fmul>
 800c636:	4603      	mov	r3, r0
 800c638:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f4 fc35 	bl	8000eac <__aeabi_fdiv>
 800c642:	4603      	mov	r3, r0
 800c644:	461c      	mov	r4, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c64e:	4618      	mov	r0, r3
 800c650:	f7f4 fb78 	bl	8000d44 <__aeabi_fmul>
 800c654:	4603      	mov	r3, r0
 800c656:	4619      	mov	r1, r3
 800c658:	4620      	mov	r0, r4
 800c65a:	f7f4 fa6b 	bl	8000b34 <__addsf3>
 800c65e:	4603      	mov	r3, r0
 800c660:	4619      	mov	r1, r3
 800c662:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c666:	f7f4 fa65 	bl	8000b34 <__addsf3>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	vel =                   (vel) + pos_st*a;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c678:	4618      	mov	r0, r3
 800c67a:	f7f4 fb63 	bl	8000d44 <__aeabi_fmul>
 800c67e:	4603      	mov	r3, r0
 800c680:	4619      	mov	r1, r3
 800c682:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c686:	f7f4 fa55 	bl	8000b34 <__addsf3>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		//a = g*angle;
//	}

	//b =                                (b);

	S1_1=S1_1 + sx + S1_2*pos_st + S2_1*pos_st + (S1_3*pos_st*pos_st)/2 + S2_2*pos_st*pos_st + (S2_3*pos_st*pos_st*pos_st)/2 + (S3_1*pos_st*pos_st)/2 + (S3_2*pos_st*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st*pos_st)/4;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800c696:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f4 fa4a 	bl	8000b34 <__addsf3>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	461c      	mov	r4, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f4 fb4a 	bl	8000d44 <__aeabi_fmul>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f7f4 fa3d 	bl	8000b34 <__addsf3>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	461c      	mov	r4, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f4 fb3d 	bl	8000d44 <__aeabi_fmul>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f7f4 fa30 	bl	8000b34 <__addsf3>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461c      	mov	r4, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f4 fb30 	bl	8000d44 <__aeabi_fmul>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f7f4 fb28 	bl	8000d44 <__aeabi_fmul>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f4 fbd6 	bl	8000eac <__aeabi_fdiv>
 800c700:	4603      	mov	r3, r0
 800c702:	4619      	mov	r1, r3
 800c704:	4620      	mov	r0, r4
 800c706:	f7f4 fa15 	bl	8000b34 <__addsf3>
 800c70a:	4603      	mov	r3, r0
 800c70c:	461c      	mov	r4, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c714:	4618      	mov	r0, r3
 800c716:	f7f4 fb15 	bl	8000d44 <__aeabi_fmul>
 800c71a:	4603      	mov	r3, r0
 800c71c:	461a      	mov	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7f4 fb0d 	bl	8000d44 <__aeabi_fmul>
 800c72a:	4603      	mov	r3, r0
 800c72c:	4619      	mov	r1, r3
 800c72e:	4620      	mov	r0, r4
 800c730:	f7f4 fa00 	bl	8000b34 <__addsf3>
 800c734:	4603      	mov	r3, r0
 800c736:	461c      	mov	r4, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c73e:	4618      	mov	r0, r3
 800c740:	f7f4 fb00 	bl	8000d44 <__aeabi_fmul>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7f4 faf8 	bl	8000d44 <__aeabi_fmul>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	4619      	mov	r1, r3
 800c75e:	4610      	mov	r0, r2
 800c760:	f7f4 faf0 	bl	8000d44 <__aeabi_fmul>
 800c764:	4603      	mov	r3, r0
 800c766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f4 fb9e 	bl	8000eac <__aeabi_fdiv>
 800c770:	4603      	mov	r3, r0
 800c772:	4619      	mov	r1, r3
 800c774:	4620      	mov	r0, r4
 800c776:	f7f4 f9dd 	bl	8000b34 <__addsf3>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461c      	mov	r4, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c784:	4618      	mov	r0, r3
 800c786:	f7f4 fadd 	bl	8000d44 <__aeabi_fmul>
 800c78a:	4603      	mov	r3, r0
 800c78c:	461a      	mov	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7f4 fad5 	bl	8000d44 <__aeabi_fmul>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7f4 fb83 	bl	8000eac <__aeabi_fdiv>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7f4 f9c2 	bl	8000b34 <__addsf3>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	461c      	mov	r4, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7f4 fac2 	bl	8000d44 <__aeabi_fmul>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f7f4 faba 	bl	8000d44 <__aeabi_fmul>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7f4 fab2 	bl	8000d44 <__aeabi_fmul>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7f4 fb60 	bl	8000eac <__aeabi_fdiv>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7f4 f99f 	bl	8000b34 <__addsf3>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	461c      	mov	r4, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c800:	4618      	mov	r0, r3
 800c802:	f7f4 fa9f 	bl	8000d44 <__aeabi_fmul>
 800c806:	4603      	mov	r3, r0
 800c808:	461a      	mov	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	4619      	mov	r1, r3
 800c810:	4610      	mov	r0, r2
 800c812:	f7f4 fa97 	bl	8000d44 <__aeabi_fmul>
 800c816:	4603      	mov	r3, r0
 800c818:	461a      	mov	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	4619      	mov	r1, r3
 800c820:	4610      	mov	r0, r2
 800c822:	f7f4 fa8f 	bl	8000d44 <__aeabi_fmul>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	4619      	mov	r1, r3
 800c830:	4610      	mov	r0, r2
 800c832:	f7f4 fa87 	bl	8000d44 <__aeabi_fmul>
 800c836:	4603      	mov	r3, r0
 800c838:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7f4 fb35 	bl	8000eac <__aeabi_fdiv>
 800c842:	4603      	mov	r3, r0
 800c844:	4619      	mov	r1, r3
 800c846:	4620      	mov	r0, r4
 800c848:	f7f4 f974 	bl	8000b34 <__addsf3>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=S1_2 + S1_3*pos_st + S2_2*pos_st + S2_3*pos_st*pos_st + (S3_2*pos_st*pos_st)/2 + (S3_3*pos_st*pos_st*pos_st)/2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c858:	4618      	mov	r0, r3
 800c85a:	f7f4 fa73 	bl	8000d44 <__aeabi_fmul>
 800c85e:	4603      	mov	r3, r0
 800c860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c862:	4618      	mov	r0, r3
 800c864:	f7f4 f966 	bl	8000b34 <__addsf3>
 800c868:	4603      	mov	r3, r0
 800c86a:	461c      	mov	r4, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c872:	4618      	mov	r0, r3
 800c874:	f7f4 fa66 	bl	8000d44 <__aeabi_fmul>
 800c878:	4603      	mov	r3, r0
 800c87a:	4619      	mov	r1, r3
 800c87c:	4620      	mov	r0, r4
 800c87e:	f7f4 f959 	bl	8000b34 <__addsf3>
 800c882:	4603      	mov	r3, r0
 800c884:	461c      	mov	r4, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f4 fa59 	bl	8000d44 <__aeabi_fmul>
 800c892:	4603      	mov	r3, r0
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	4619      	mov	r1, r3
 800c89c:	4610      	mov	r0, r2
 800c89e:	f7f4 fa51 	bl	8000d44 <__aeabi_fmul>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7f4 f944 	bl	8000b34 <__addsf3>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	461c      	mov	r4, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7f4 fa44 	bl	8000d44 <__aeabi_fmul>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	461a      	mov	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7f4 fa3c 	bl	8000d44 <__aeabi_fmul>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7f4 faea 	bl	8000eac <__aeabi_fdiv>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f7f4 f929 	bl	8000b34 <__addsf3>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	461c      	mov	r4, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7f4 fa29 	bl	8000d44 <__aeabi_fmul>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7f4 fa21 	bl	8000d44 <__aeabi_fmul>
 800c902:	4603      	mov	r3, r0
 800c904:	461a      	mov	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	4619      	mov	r1, r3
 800c90c:	4610      	mov	r0, r2
 800c90e:	f7f4 fa19 	bl	8000d44 <__aeabi_fmul>
 800c912:	4603      	mov	r3, r0
 800c914:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c918:	4618      	mov	r0, r3
 800c91a:	f7f4 fac7 	bl	8000eac <__aeabi_fdiv>
 800c91e:	4603      	mov	r3, r0
 800c920:	4619      	mov	r1, r3
 800c922:	4620      	mov	r0, r4
 800c924:	f7f4 f906 	bl	8000b34 <__addsf3>
 800c928:	4603      	mov	r3, r0
 800c92a:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=0;
 800c92c:	f04f 0300 	mov.w	r3, #0
 800c930:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=S1_4 + S2_4*pos_st + (S3_4*pos_st*pos_st)/2;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c938:	4618      	mov	r0, r3
 800c93a:	f7f4 fa03 	bl	8000d44 <__aeabi_fmul>
 800c93e:	4603      	mov	r3, r0
 800c940:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c942:	4618      	mov	r0, r3
 800c944:	f7f4 f8f6 	bl	8000b34 <__addsf3>
 800c948:	4603      	mov	r3, r0
 800c94a:	461c      	mov	r4, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c952:	4618      	mov	r0, r3
 800c954:	f7f4 f9f6 	bl	8000d44 <__aeabi_fmul>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	4619      	mov	r1, r3
 800c962:	4610      	mov	r0, r2
 800c964:	f7f4 f9ee 	bl	8000d44 <__aeabi_fmul>
 800c968:	4603      	mov	r3, r0
 800c96a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c96e:	4618      	mov	r0, r3
 800c970:	f7f4 fa9c 	bl	8000eac <__aeabi_fdiv>
 800c974:	4603      	mov	r3, r0
 800c976:	4619      	mov	r1, r3
 800c978:	4620      	mov	r0, r4
 800c97a:	f7f4 f8db 	bl	8000b34 <__addsf3>
 800c97e:	4603      	mov	r3, r0
 800c980:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=S2_1 + (pos_st*pos_st*(S2_3 + S3_3*pos_st))/2 + S3_1*pos_st + pos_st*(S2_2 + S3_2*pos_st);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	4619      	mov	r1, r3
 800c98c:	4610      	mov	r0, r2
 800c98e:	f7f4 f9d9 	bl	8000d44 <__aeabi_fmul>
 800c992:	4603      	mov	r3, r0
 800c994:	461c      	mov	r4, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7f4 f9d1 	bl	8000d44 <__aeabi_fmul>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7f4 f8c4 	bl	8000b34 <__addsf3>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7f4 f9c7 	bl	8000d44 <__aeabi_fmul>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f4 fa75 	bl	8000eac <__aeabi_fdiv>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7f4 f8b4 	bl	8000b34 <__addsf3>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7f4 f9b4 	bl	8000d44 <__aeabi_fmul>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7f4 f8a7 	bl	8000b34 <__addsf3>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	461d      	mov	r5, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	691c      	ldr	r4, [r3, #16]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f4 f9a5 	bl	8000d44 <__aeabi_fmul>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7f4 f898 	bl	8000b34 <__addsf3>
 800ca04:	4603      	mov	r3, r0
 800ca06:	4619      	mov	r1, r3
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7f4 f99b 	bl	8000d44 <__aeabi_fmul>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	4619      	mov	r1, r3
 800ca12:	4628      	mov	r0, r5
 800ca14:	f7f4 f88e 	bl	8000b34 <__addsf3>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=S2_2 + sv + S3_2*pos_st + pos_st*(S2_3 + S3_3*pos_st);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800ca22:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f4 f885 	bl	8000b34 <__addsf3>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	461c      	mov	r4, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f4 f985 	bl	8000d44 <__aeabi_fmul>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7f4 f878 	bl	8000b34 <__addsf3>
 800ca44:	4603      	mov	r3, r0
 800ca46:	461d      	mov	r5, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691c      	ldr	r4, [r3, #16]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f4 f976 	bl	8000d44 <__aeabi_fmul>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f4 f869 	bl	8000b34 <__addsf3>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4619      	mov	r1, r3
 800ca66:	4620      	mov	r0, r4
 800ca68:	f7f4 f96c 	bl	8000d44 <__aeabi_fmul>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4628      	mov	r0, r5
 800ca72:	f7f4 f85f 	bl	8000b34 <__addsf3>
 800ca76:	4603      	mov	r3, r0
 800ca78:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=0;
 800ca7a:	f04f 0300 	mov.w	r3, #0
 800ca7e:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=S2_4 + S3_4*pos_st;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7f4 f95c 	bl	8000d44 <__aeabi_fmul>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ca92:	f7f4 f84f 	bl	8000b34 <__addsf3>
 800ca96:	4603      	mov	r3, r0
 800ca98:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=0;
 800ca9a:	f04f 0300 	mov.w	r3, #0
 800ca9e:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=0;
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=sa;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caaa:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=0;
 800caac:	f04f 0300 	mov.w	r3, #0
 800cab0:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=S4_1 + S4_2*pos_st + (S4_3*pos_st*pos_st)/2;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cab8:	4618      	mov	r0, r3
 800caba:	f7f4 f943 	bl	8000d44 <__aeabi_fmul>
 800cabe:	4603      	mov	r3, r0
 800cac0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7f4 f836 	bl	8000b34 <__addsf3>
 800cac8:	4603      	mov	r3, r0
 800caca:	461c      	mov	r4, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f4 f936 	bl	8000d44 <__aeabi_fmul>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	4619      	mov	r1, r3
 800cae2:	4610      	mov	r0, r2
 800cae4:	f7f4 f92e 	bl	8000d44 <__aeabi_fmul>
 800cae8:	4603      	mov	r3, r0
 800caea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f4 f9dc 	bl	8000eac <__aeabi_fdiv>
 800caf4:	4603      	mov	r3, r0
 800caf6:	4619      	mov	r1, r3
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7f4 f81b 	bl	8000b34 <__addsf3>
 800cafe:	4603      	mov	r3, r0
 800cb00:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=S4_2 + S4_3*pos_st;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f4 f91b 	bl	8000d44 <__aeabi_fmul>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	4619      	mov	r1, r3
 800cb12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cb14:	f7f4 f80e 	bl	8000b34 <__addsf3>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=0;
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=S4_4 + sb;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb2c:	f7f4 f802 	bl	8000b34 <__addsf3>
 800cb30:	4603      	mov	r3, r0
 800cb32:	647b      	str	r3, [r7, #68]	; 0x44

	float A = (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qap*S1_1*S2_2 - Qap*S1_2*S2_1 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7f4 f8fe 	bl	8000d44 <__aeabi_fmul>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7f4 f8f6 	bl	8000d44 <__aeabi_fmul>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	f7f4 f8ea 	bl	8000d44 <__aeabi_fmul>
 800cb70:	4603      	mov	r3, r0
 800cb72:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7f4 f8e5 	bl	8000d44 <__aeabi_fmul>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f7f3 ffd8 	bl	8000b34 <__addsf3>
 800cb84:	4603      	mov	r3, r0
 800cb86:	461c      	mov	r4, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	4619      	mov	r1, r3
 800cb94:	4610      	mov	r0, r2
 800cb96:	f7f4 f8d5 	bl	8000d44 <__aeabi_fmul>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f4 f8cf 	bl	8000d44 <__aeabi_fmul>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f7f3 ffc2 	bl	8000b34 <__addsf3>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461c      	mov	r4, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	f7f4 f8bf 	bl	8000d44 <__aeabi_fmul>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f4 f8ba 	bl	8000d44 <__aeabi_fmul>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7f3 ffad 	bl	8000b34 <__addsf3>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	461c      	mov	r4, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4610      	mov	r0, r2
 800cbec:	f7f4 f8aa 	bl	8000d44 <__aeabi_fmul>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f4 f8a5 	bl	8000d44 <__aeabi_fmul>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7f3 ff98 	bl	8000b34 <__addsf3>
 800cc04:	4603      	mov	r3, r0
 800cc06:	461c      	mov	r4, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	4619      	mov	r1, r3
 800cc14:	4610      	mov	r0, r2
 800cc16:	f7f4 f895 	bl	8000d44 <__aeabi_fmul>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f4 f890 	bl	8000d44 <__aeabi_fmul>
 800cc24:	4603      	mov	r3, r0
 800cc26:	4619      	mov	r1, r3
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f7f3 ff83 	bl	8000b34 <__addsf3>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461c      	mov	r4, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7f4 f880 	bl	8000d44 <__aeabi_fmul>
 800cc44:	4603      	mov	r3, r0
 800cc46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f4 f87b 	bl	8000d44 <__aeabi_fmul>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4619      	mov	r1, r3
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7f3 ff6e 	bl	8000b34 <__addsf3>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461c      	mov	r4, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800cc62:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f4 f86c 	bl	8000d44 <__aeabi_fmul>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f4 f867 	bl	8000d44 <__aeabi_fmul>
 800cc76:	4603      	mov	r3, r0
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f7f3 ff5a 	bl	8000b34 <__addsf3>
 800cc80:	4603      	mov	r3, r0
 800cc82:	461c      	mov	r4, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800cc8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f4 f859 	bl	8000d44 <__aeabi_fmul>
 800cc92:	4603      	mov	r3, r0
 800cc94:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7f4 f854 	bl	8000d44 <__aeabi_fmul>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7f3 ff45 	bl	8000b30 <__aeabi_fsub>
 800cca6:	4603      	mov	r3, r0
 800cca8:	461c      	mov	r4, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ccb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7f4 f846 	bl	8000d44 <__aeabi_fmul>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f4 f841 	bl	8000d44 <__aeabi_fmul>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f7f3 ff34 	bl	8000b34 <__addsf3>
 800cccc:	4603      	mov	r3, r0
 800ccce:	461c      	mov	r4, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ccd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7f4 f833 	bl	8000d44 <__aeabi_fmul>
 800ccde:	4603      	mov	r3, r0
 800cce0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f4 f82e 	bl	8000d44 <__aeabi_fmul>
 800cce8:	4603      	mov	r3, r0
 800ccea:	4619      	mov	r1, r3
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7f3 ff1f 	bl	8000b30 <__aeabi_fsub>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	461c      	mov	r4, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800ccfc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f4 f820 	bl	8000d44 <__aeabi_fmul>
 800cd04:	4603      	mov	r3, r0
 800cd06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7f4 f81b 	bl	8000d44 <__aeabi_fmul>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4619      	mov	r1, r3
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7f3 ff0e 	bl	8000b34 <__addsf3>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	461c      	mov	r4, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f4 f80d 	bl	8000d44 <__aeabi_fmul>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f4 f808 	bl	8000d44 <__aeabi_fmul>
 800cd34:	4603      	mov	r3, r0
 800cd36:	4619      	mov	r1, r3
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7f3 fef9 	bl	8000b30 <__aeabi_fsub>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461c      	mov	r4, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7f3 fffa 	bl	8000d44 <__aeabi_fmul>
 800cd50:	4603      	mov	r3, r0
 800cd52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7f3 fff5 	bl	8000d44 <__aeabi_fmul>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7f3 fee8 	bl	8000b34 <__addsf3>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461c      	mov	r4, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f3 ffe7 	bl	8000d44 <__aeabi_fmul>
 800cd76:	4603      	mov	r3, r0
 800cd78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7f3 ffe2 	bl	8000d44 <__aeabi_fmul>
 800cd80:	4603      	mov	r3, r0
 800cd82:	4619      	mov	r1, r3
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7f3 fed3 	bl	8000b30 <__aeabi_fsub>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	461c      	mov	r4, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cd94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7f3 ffd4 	bl	8000d44 <__aeabi_fmul>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7f3 ffcf 	bl	8000d44 <__aeabi_fmul>
 800cda6:	4603      	mov	r3, r0
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f7f3 fec2 	bl	8000b34 <__addsf3>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	461c      	mov	r4, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800cdba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7f3 ffc1 	bl	8000d44 <__aeabi_fmul>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7f3 ffbc 	bl	8000d44 <__aeabi_fmul>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f7f3 fead 	bl	8000b30 <__aeabi_fsub>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461c      	mov	r4, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f3 ffae 	bl	8000d44 <__aeabi_fmul>
 800cde8:	4603      	mov	r3, r0
 800cdea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f3 ffa9 	bl	8000d44 <__aeabi_fmul>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7f3 fe9c 	bl	8000b34 <__addsf3>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	461c      	mov	r4, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f3 ff9c 	bl	8000d44 <__aeabi_fmul>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f3 ff97 	bl	8000d44 <__aeabi_fmul>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4619      	mov	r1, r3
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f7f3 fe88 	bl	8000b30 <__aeabi_fsub>
 800ce20:	4603      	mov	r3, r0
 800ce22:	461c      	mov	r4, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f3 ff89 	bl	8000d44 <__aeabi_fmul>
 800ce32:	4603      	mov	r3, r0
 800ce34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f3 ff84 	bl	8000d44 <__aeabi_fmul>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4620      	mov	r0, r4
 800ce42:	f7f3 fe77 	bl	8000b34 <__addsf3>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461c      	mov	r4, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7f3 ff77 	bl	8000d44 <__aeabi_fmul>
 800ce56:	4603      	mov	r3, r0
 800ce58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7f3 ff72 	bl	8000d44 <__aeabi_fmul>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4619      	mov	r1, r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7f3 fe63 	bl	8000b30 <__aeabi_fsub>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	461c      	mov	r4, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f3 ff64 	bl	8000d44 <__aeabi_fmul>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7f3 ff5f 	bl	8000d44 <__aeabi_fmul>
 800ce86:	4603      	mov	r3, r0
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f7f3 fe52 	bl	8000b34 <__addsf3>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461c      	mov	r4, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7f3 ff52 	bl	8000d44 <__aeabi_fmul>
 800cea0:	4603      	mov	r3, r0
 800cea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7f3 ff4d 	bl	8000d44 <__aeabi_fmul>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	4619      	mov	r1, r3
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f7f3 fe3e 	bl	8000b30 <__aeabi_fsub>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	461c      	mov	r4, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f3 ff3f 	bl	8000d44 <__aeabi_fmul>
 800cec6:	4603      	mov	r3, r0
 800cec8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f3 ff3a 	bl	8000d44 <__aeabi_fmul>
 800ced0:	4603      	mov	r3, r0
 800ced2:	4619      	mov	r1, r3
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7f3 fe2d 	bl	8000b34 <__addsf3>
 800ceda:	4603      	mov	r3, r0
 800cedc:	461c      	mov	r4, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7f3 ff2d 	bl	8000d44 <__aeabi_fmul>
 800ceea:	4603      	mov	r3, r0
 800ceec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7f3 ff28 	bl	8000d44 <__aeabi_fmul>
 800cef4:	4603      	mov	r3, r0
 800cef6:	4619      	mov	r1, r3
 800cef8:	4620      	mov	r0, r4
 800cefa:	f7f3 fe19 	bl	8000b30 <__aeabi_fsub>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461c      	mov	r4, r3
 800cf02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cf04:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cf08:	f7f3 ff1c 	bl	8000d44 <__aeabi_fmul>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7f3 ff17 	bl	8000d44 <__aeabi_fmul>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f7f3 fe0a 	bl	8000b34 <__addsf3>
 800cf20:	4603      	mov	r3, r0
 800cf22:	461c      	mov	r4, r3
 800cf24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf26:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cf2a:	f7f3 ff0b 	bl	8000d44 <__aeabi_fmul>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f3 ff06 	bl	8000d44 <__aeabi_fmul>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f7f3 fdf7 	bl	8000b30 <__aeabi_fsub>
 800cf42:	4603      	mov	r3, r0
 800cf44:	461c      	mov	r4, r3
 800cf46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf48:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cf4a:	f7f3 fefb 	bl	8000d44 <__aeabi_fmul>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7f3 fef6 	bl	8000d44 <__aeabi_fmul>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f7f3 fde7 	bl	8000b30 <__aeabi_fsub>
 800cf62:	4603      	mov	r3, r0
 800cf64:	461c      	mov	r4, r3
 800cf66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cf6a:	f7f3 feeb 	bl	8000d44 <__aeabi_fmul>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f3 fee6 	bl	8000d44 <__aeabi_fmul>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7f3 fdd9 	bl	8000b34 <__addsf3>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461c      	mov	r4, r3
 800cf86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf88:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cf8a:	f7f3 fedb 	bl	8000d44 <__aeabi_fmul>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f3 fed6 	bl	8000d44 <__aeabi_fmul>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7f3 fdc9 	bl	8000b34 <__addsf3>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	461c      	mov	r4, r3
 800cfa6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cfa8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cfaa:	f7f3 fecb 	bl	8000d44 <__aeabi_fmul>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f3 fec6 	bl	8000d44 <__aeabi_fmul>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f7f3 fdb7 	bl	8000b30 <__aeabi_fsub>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	461c      	mov	r4, r3
 800cfc6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cfc8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cfcc:	f7f3 feba 	bl	8000d44 <__aeabi_fmul>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7f3 feb5 	bl	8000d44 <__aeabi_fmul>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7f3 fda8 	bl	8000b34 <__addsf3>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cfea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cfee:	f7f3 fea9 	bl	8000d44 <__aeabi_fmul>
 800cff2:	4603      	mov	r3, r0
 800cff4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7f3 fea4 	bl	8000d44 <__aeabi_fmul>
 800cffc:	4603      	mov	r3, r0
 800cffe:	4619      	mov	r1, r3
 800d000:	4620      	mov	r0, r4
 800d002:	f7f3 fd95 	bl	8000b30 <__aeabi_fsub>
 800d006:	4603      	mov	r3, r0
 800d008:	461c      	mov	r4, r3
 800d00a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d00c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d00e:	f7f3 fe99 	bl	8000d44 <__aeabi_fmul>
 800d012:	4603      	mov	r3, r0
 800d014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d016:	4618      	mov	r0, r3
 800d018:	f7f3 fe94 	bl	8000d44 <__aeabi_fmul>
 800d01c:	4603      	mov	r3, r0
 800d01e:	4619      	mov	r1, r3
 800d020:	4620      	mov	r0, r4
 800d022:	f7f3 fd85 	bl	8000b30 <__aeabi_fsub>
 800d026:	4603      	mov	r3, r0
 800d028:	461c      	mov	r4, r3
 800d02a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d02c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d02e:	f7f3 fe89 	bl	8000d44 <__aeabi_fmul>
 800d032:	4603      	mov	r3, r0
 800d034:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d036:	4618      	mov	r0, r3
 800d038:	f7f3 fe84 	bl	8000d44 <__aeabi_fmul>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4619      	mov	r1, r3
 800d040:	4620      	mov	r0, r4
 800d042:	f7f3 fd77 	bl	8000b34 <__addsf3>
 800d046:	4603      	mov	r3, r0
 800d048:	461c      	mov	r4, r3
 800d04a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d04c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d04e:	f7f3 fe79 	bl	8000d44 <__aeabi_fmul>
 800d052:	4603      	mov	r3, r0
 800d054:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d056:	4618      	mov	r0, r3
 800d058:	f7f3 fe74 	bl	8000d44 <__aeabi_fmul>
 800d05c:	4603      	mov	r3, r0
 800d05e:	4619      	mov	r1, r3
 800d060:	4620      	mov	r0, r4
 800d062:	f7f3 fd67 	bl	8000b34 <__addsf3>
 800d066:	4603      	mov	r3, r0
 800d068:	461c      	mov	r4, r3
 800d06a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d06c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d06e:	f7f3 fe69 	bl	8000d44 <__aeabi_fmul>
 800d072:	4603      	mov	r3, r0
 800d074:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d076:	4618      	mov	r0, r3
 800d078:	f7f3 fe64 	bl	8000d44 <__aeabi_fmul>
 800d07c:	4603      	mov	r3, r0
 800d07e:	4619      	mov	r1, r3
 800d080:	4620      	mov	r0, r4
 800d082:	f7f3 fd55 	bl	8000b30 <__aeabi_fsub>
 800d086:	4603      	mov	r3, r0
 800d088:	461c      	mov	r4, r3
 800d08a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d08c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d090:	f7f3 fe58 	bl	8000d44 <__aeabi_fmul>
 800d094:	4603      	mov	r3, r0
 800d096:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d098:	4618      	mov	r0, r3
 800d09a:	f7f3 fe53 	bl	8000d44 <__aeabi_fmul>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7f3 fd46 	bl	8000b34 <__addsf3>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461c      	mov	r4, r3
 800d0ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d0ae:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d0b2:	f7f3 fe47 	bl	8000d44 <__aeabi_fmul>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f3 fe42 	bl	8000d44 <__aeabi_fmul>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7f3 fd33 	bl	8000b30 <__aeabi_fsub>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461c      	mov	r4, r3
 800d0ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0d0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d0d2:	f7f3 fe37 	bl	8000d44 <__aeabi_fmul>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f3 fe32 	bl	8000d44 <__aeabi_fmul>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f7f3 fd23 	bl	8000b30 <__aeabi_fsub>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	461c      	mov	r4, r3
 800d0ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d0f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d0f2:	f7f3 fe27 	bl	8000d44 <__aeabi_fmul>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f3 fe22 	bl	8000d44 <__aeabi_fmul>
 800d100:	4603      	mov	r3, r0
 800d102:	4619      	mov	r1, r3
 800d104:	4620      	mov	r0, r4
 800d106:	f7f3 fd15 	bl	8000b34 <__addsf3>
 800d10a:	4603      	mov	r3, r0
 800d10c:	461c      	mov	r4, r3
 800d10e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d110:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d112:	f7f3 fe17 	bl	8000d44 <__aeabi_fmul>
 800d116:	4603      	mov	r3, r0
 800d118:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 fe12 	bl	8000d44 <__aeabi_fmul>
 800d120:	4603      	mov	r3, r0
 800d122:	4619      	mov	r1, r3
 800d124:	4620      	mov	r0, r4
 800d126:	f7f3 fd05 	bl	8000b34 <__addsf3>
 800d12a:	4603      	mov	r3, r0
 800d12c:	461c      	mov	r4, r3
 800d12e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d130:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d132:	f7f3 fe07 	bl	8000d44 <__aeabi_fmul>
 800d136:	4603      	mov	r3, r0
 800d138:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f3 fe02 	bl	8000d44 <__aeabi_fmul>
 800d140:	4603      	mov	r3, r0
 800d142:	4619      	mov	r1, r3
 800d144:	4620      	mov	r0, r4
 800d146:	f7f3 fcf3 	bl	8000b30 <__aeabi_fsub>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461c      	mov	r4, r3
 800d14e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d150:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d154:	f7f3 fdf6 	bl	8000d44 <__aeabi_fmul>
 800d158:	4603      	mov	r3, r0
 800d15a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f3 fdf1 	bl	8000d44 <__aeabi_fmul>
 800d162:	4603      	mov	r3, r0
 800d164:	4619      	mov	r1, r3
 800d166:	4620      	mov	r0, r4
 800d168:	f7f3 fce4 	bl	8000b34 <__addsf3>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461c      	mov	r4, r3
 800d170:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d172:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d176:	f7f3 fde5 	bl	8000d44 <__aeabi_fmul>
 800d17a:	4603      	mov	r3, r0
 800d17c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d17e:	4618      	mov	r0, r3
 800d180:	f7f3 fde0 	bl	8000d44 <__aeabi_fmul>
 800d184:	4603      	mov	r3, r0
 800d186:	4619      	mov	r1, r3
 800d188:	4620      	mov	r0, r4
 800d18a:	f7f3 fcd1 	bl	8000b30 <__aeabi_fsub>
 800d18e:	4603      	mov	r3, r0
 800d190:	461c      	mov	r4, r3
 800d192:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d194:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d196:	f7f3 fdd5 	bl	8000d44 <__aeabi_fmul>
 800d19a:	4603      	mov	r3, r0
 800d19c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f3 fdd0 	bl	8000d44 <__aeabi_fmul>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7f3 fcc1 	bl	8000b30 <__aeabi_fsub>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	461c      	mov	r4, r3
 800d1b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d1b4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d1b6:	f7f3 fdc5 	bl	8000d44 <__aeabi_fmul>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f3 fdc0 	bl	8000d44 <__aeabi_fmul>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f7f3 fcb3 	bl	8000b34 <__addsf3>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	461c      	mov	r4, r3
 800d1d2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d1d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d1d6:	f7f3 fdb5 	bl	8000d44 <__aeabi_fmul>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f3 fdb0 	bl	8000d44 <__aeabi_fmul>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f7f3 fca3 	bl	8000b34 <__addsf3>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	461c      	mov	r4, r3
 800d1f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d1f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d1f6:	f7f3 fda5 	bl	8000d44 <__aeabi_fmul>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f3 fda0 	bl	8000d44 <__aeabi_fmul>
 800d204:	4603      	mov	r3, r0
 800d206:	4619      	mov	r1, r3
 800d208:	4620      	mov	r0, r4
 800d20a:	f7f3 fc91 	bl	8000b30 <__aeabi_fsub>
 800d20e:	4603      	mov	r3, r0
 800d210:	63bb      	str	r3, [r7, #56]	; 0x38
	float Kt11=1 - (Qap*Qgps*Qgps_v + Qap*Qgps*S2_2 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2)/A;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d21e:	4619      	mov	r1, r3
 800d220:	4610      	mov	r0, r2
 800d222:	f7f3 fd8f 	bl	8000d44 <__aeabi_fmul>
 800d226:	4603      	mov	r3, r0
 800d228:	461a      	mov	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	4619      	mov	r1, r3
 800d230:	4610      	mov	r0, r2
 800d232:	f7f3 fd87 	bl	8000d44 <__aeabi_fmul>
 800d236:	4603      	mov	r3, r0
 800d238:	461c      	mov	r4, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d246:	4619      	mov	r1, r3
 800d248:	4610      	mov	r0, r2
 800d24a:	f7f3 fd7b 	bl	8000d44 <__aeabi_fmul>
 800d24e:	4603      	mov	r3, r0
 800d250:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d252:	4618      	mov	r0, r3
 800d254:	f7f3 fd76 	bl	8000d44 <__aeabi_fmul>
 800d258:	4603      	mov	r3, r0
 800d25a:	4619      	mov	r1, r3
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7f3 fc69 	bl	8000b34 <__addsf3>
 800d262:	4603      	mov	r3, r0
 800d264:	461c      	mov	r4, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f7f3 fd66 	bl	8000d44 <__aeabi_fmul>
 800d278:	4603      	mov	r3, r0
 800d27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7f3 fd61 	bl	8000d44 <__aeabi_fmul>
 800d282:	4603      	mov	r3, r0
 800d284:	4619      	mov	r1, r3
 800d286:	4620      	mov	r0, r4
 800d288:	f7f3 fc54 	bl	8000b34 <__addsf3>
 800d28c:	4603      	mov	r3, r0
 800d28e:	461c      	mov	r4, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	4619      	mov	r1, r3
 800d29c:	4610      	mov	r0, r2
 800d29e:	f7f3 fd51 	bl	8000d44 <__aeabi_fmul>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f3 fd4c 	bl	8000d44 <__aeabi_fmul>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7f3 fc3f 	bl	8000b34 <__addsf3>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	461c      	mov	r4, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	f7f3 fd3c 	bl	8000d44 <__aeabi_fmul>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f3 fd37 	bl	8000d44 <__aeabi_fmul>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f7f3 fc2a 	bl	8000b34 <__addsf3>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7f3 fd27 	bl	8000d44 <__aeabi_fmul>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f3 fd22 	bl	8000d44 <__aeabi_fmul>
 800d300:	4603      	mov	r3, r0
 800d302:	4619      	mov	r1, r3
 800d304:	4620      	mov	r0, r4
 800d306:	f7f3 fc15 	bl	8000b34 <__addsf3>
 800d30a:	4603      	mov	r3, r0
 800d30c:	461c      	mov	r4, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d314:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d316:	4618      	mov	r0, r3
 800d318:	f7f3 fd14 	bl	8000d44 <__aeabi_fmul>
 800d31c:	4603      	mov	r3, r0
 800d31e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d320:	4618      	mov	r0, r3
 800d322:	f7f3 fd0f 	bl	8000d44 <__aeabi_fmul>
 800d326:	4603      	mov	r3, r0
 800d328:	4619      	mov	r1, r3
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7f3 fc02 	bl	8000b34 <__addsf3>
 800d330:	4603      	mov	r3, r0
 800d332:	461c      	mov	r4, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d33a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f3 fd01 	bl	8000d44 <__aeabi_fmul>
 800d342:	4603      	mov	r3, r0
 800d344:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d346:	4618      	mov	r0, r3
 800d348:	f7f3 fcfc 	bl	8000d44 <__aeabi_fmul>
 800d34c:	4603      	mov	r3, r0
 800d34e:	4619      	mov	r1, r3
 800d350:	4620      	mov	r0, r4
 800d352:	f7f3 fbed 	bl	8000b30 <__aeabi_fsub>
 800d356:	4603      	mov	r3, r0
 800d358:	461c      	mov	r4, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d360:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d362:	4618      	mov	r0, r3
 800d364:	f7f3 fcee 	bl	8000d44 <__aeabi_fmul>
 800d368:	4603      	mov	r3, r0
 800d36a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7f3 fce9 	bl	8000d44 <__aeabi_fmul>
 800d372:	4603      	mov	r3, r0
 800d374:	4619      	mov	r1, r3
 800d376:	4620      	mov	r0, r4
 800d378:	f7f3 fbdc 	bl	8000b34 <__addsf3>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461c      	mov	r4, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d386:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f3 fcdb 	bl	8000d44 <__aeabi_fmul>
 800d38e:	4603      	mov	r3, r0
 800d390:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d392:	4618      	mov	r0, r3
 800d394:	f7f3 fcd6 	bl	8000d44 <__aeabi_fmul>
 800d398:	4603      	mov	r3, r0
 800d39a:	4619      	mov	r1, r3
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7f3 fbc7 	bl	8000b30 <__aeabi_fsub>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	461c      	mov	r4, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d3ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7f3 fcc8 	bl	8000d44 <__aeabi_fmul>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f3 fcc3 	bl	8000d44 <__aeabi_fmul>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7f3 fbb6 	bl	8000b34 <__addsf3>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d3d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7f3 fcb5 	bl	8000d44 <__aeabi_fmul>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f3 fcb0 	bl	8000d44 <__aeabi_fmul>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7f3 fba1 	bl	8000b30 <__aeabi_fsub>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461c      	mov	r4, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d3f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7f3 fca2 	bl	8000d44 <__aeabi_fmul>
 800d400:	4603      	mov	r3, r0
 800d402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d404:	4618      	mov	r0, r3
 800d406:	f7f3 fc9d 	bl	8000d44 <__aeabi_fmul>
 800d40a:	4603      	mov	r3, r0
 800d40c:	4619      	mov	r1, r3
 800d40e:	4620      	mov	r0, r4
 800d410:	f7f3 fb90 	bl	8000b34 <__addsf3>
 800d414:	4603      	mov	r3, r0
 800d416:	461c      	mov	r4, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d41e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d420:	4618      	mov	r0, r3
 800d422:	f7f3 fc8f 	bl	8000d44 <__aeabi_fmul>
 800d426:	4603      	mov	r3, r0
 800d428:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f3 fc8a 	bl	8000d44 <__aeabi_fmul>
 800d430:	4603      	mov	r3, r0
 800d432:	4619      	mov	r1, r3
 800d434:	4620      	mov	r0, r4
 800d436:	f7f3 fb7b 	bl	8000b30 <__aeabi_fsub>
 800d43a:	4603      	mov	r3, r0
 800d43c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d43e:	4618      	mov	r0, r3
 800d440:	f7f3 fd34 	bl	8000eac <__aeabi_fdiv>
 800d444:	4603      	mov	r3, r0
 800d446:	4619      	mov	r1, r3
 800d448:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d44c:	f7f3 fb70 	bl	8000b30 <__aeabi_fsub>
 800d450:	4603      	mov	r3, r0
 800d452:	637b      	str	r3, [r7, #52]	; 0x34
	float Kt12=(Qgps*(Qgps_v*S1_3 + Qgps_v*S1_4 - S1_2*S2_3 + S1_3*S2_2 - S1_2*S2_4 + S1_4*S2_2))/A;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d460:	4618      	mov	r0, r3
 800d462:	f7f3 fc6f 	bl	8000d44 <__aeabi_fmul>
 800d466:	4603      	mov	r3, r0
 800d468:	461d      	mov	r5, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d470:	4618      	mov	r0, r3
 800d472:	f7f3 fc67 	bl	8000d44 <__aeabi_fmul>
 800d476:	4603      	mov	r3, r0
 800d478:	4619      	mov	r1, r3
 800d47a:	4628      	mov	r0, r5
 800d47c:	f7f3 fb5a 	bl	8000b34 <__addsf3>
 800d480:	4603      	mov	r3, r0
 800d482:	461d      	mov	r5, r3
 800d484:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d486:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d488:	f7f3 fc5c 	bl	8000d44 <__aeabi_fmul>
 800d48c:	4603      	mov	r3, r0
 800d48e:	4619      	mov	r1, r3
 800d490:	4628      	mov	r0, r5
 800d492:	f7f3 fb4d 	bl	8000b30 <__aeabi_fsub>
 800d496:	4603      	mov	r3, r0
 800d498:	461d      	mov	r5, r3
 800d49a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d49c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d49e:	f7f3 fc51 	bl	8000d44 <__aeabi_fmul>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f7f3 fb44 	bl	8000b34 <__addsf3>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461d      	mov	r5, r3
 800d4b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d4b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d4b4:	f7f3 fc46 	bl	8000d44 <__aeabi_fmul>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f7f3 fb37 	bl	8000b30 <__aeabi_fsub>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	461d      	mov	r5, r3
 800d4c6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d4ca:	f7f3 fc3b 	bl	8000d44 <__aeabi_fmul>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f7f3 fb2e 	bl	8000b34 <__addsf3>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f7f3 fc31 	bl	8000d44 <__aeabi_fmul>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7f3 fce0 	bl	8000eac <__aeabi_fdiv>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	633b      	str	r3, [r7, #48]	; 0x30
	float Kt13=(Qgps*(Qap*S1_2 + S1_2*S3_3 - S1_3*S3_2 + S1_2*S3_4 - S1_4*S3_2 + S1_2*S4_3 - S1_3*S4_2 + S1_2*S4_4 - S1_4*S4_2))/A;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d4fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f3 fc20 	bl	8000d44 <__aeabi_fmul>
 800d504:	4603      	mov	r3, r0
 800d506:	461d      	mov	r5, r3
 800d508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d50a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d50c:	f7f3 fc1a 	bl	8000d44 <__aeabi_fmul>
 800d510:	4603      	mov	r3, r0
 800d512:	4619      	mov	r1, r3
 800d514:	4628      	mov	r0, r5
 800d516:	f7f3 fb0d 	bl	8000b34 <__addsf3>
 800d51a:	4603      	mov	r3, r0
 800d51c:	461d      	mov	r5, r3
 800d51e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d520:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d522:	f7f3 fc0f 	bl	8000d44 <__aeabi_fmul>
 800d526:	4603      	mov	r3, r0
 800d528:	4619      	mov	r1, r3
 800d52a:	4628      	mov	r0, r5
 800d52c:	f7f3 fb00 	bl	8000b30 <__aeabi_fsub>
 800d530:	4603      	mov	r3, r0
 800d532:	461d      	mov	r5, r3
 800d534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d536:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d538:	f7f3 fc04 	bl	8000d44 <__aeabi_fmul>
 800d53c:	4603      	mov	r3, r0
 800d53e:	4619      	mov	r1, r3
 800d540:	4628      	mov	r0, r5
 800d542:	f7f3 faf7 	bl	8000b34 <__addsf3>
 800d546:	4603      	mov	r3, r0
 800d548:	461d      	mov	r5, r3
 800d54a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d54c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d54e:	f7f3 fbf9 	bl	8000d44 <__aeabi_fmul>
 800d552:	4603      	mov	r3, r0
 800d554:	4619      	mov	r1, r3
 800d556:	4628      	mov	r0, r5
 800d558:	f7f3 faea 	bl	8000b30 <__aeabi_fsub>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461d      	mov	r5, r3
 800d560:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d562:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d564:	f7f3 fbee 	bl	8000d44 <__aeabi_fmul>
 800d568:	4603      	mov	r3, r0
 800d56a:	4619      	mov	r1, r3
 800d56c:	4628      	mov	r0, r5
 800d56e:	f7f3 fae1 	bl	8000b34 <__addsf3>
 800d572:	4603      	mov	r3, r0
 800d574:	461d      	mov	r5, r3
 800d576:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d578:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d57a:	f7f3 fbe3 	bl	8000d44 <__aeabi_fmul>
 800d57e:	4603      	mov	r3, r0
 800d580:	4619      	mov	r1, r3
 800d582:	4628      	mov	r0, r5
 800d584:	f7f3 fad4 	bl	8000b30 <__aeabi_fsub>
 800d588:	4603      	mov	r3, r0
 800d58a:	461d      	mov	r5, r3
 800d58c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d58e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d590:	f7f3 fbd8 	bl	8000d44 <__aeabi_fmul>
 800d594:	4603      	mov	r3, r0
 800d596:	4619      	mov	r1, r3
 800d598:	4628      	mov	r0, r5
 800d59a:	f7f3 facb 	bl	8000b34 <__addsf3>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	461d      	mov	r5, r3
 800d5a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d5a4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d5a6:	f7f3 fbcd 	bl	8000d44 <__aeabi_fmul>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f7f3 fabe 	bl	8000b30 <__aeabi_fsub>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f7f3 fbc3 	bl	8000d44 <__aeabi_fmul>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f3 fc72 	bl	8000eac <__aeabi_fdiv>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Kt21=(Qgps_v*(Qap*S2_1 + S2_1*S3_3 - S2_3*S3_1 + S2_1*S3_4 - S2_4*S3_1 + S2_1*S4_3 - S2_3*S4_1 + S2_1*S4_4 - S2_4*S4_1))/A;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	68dc      	ldr	r4, [r3, #12]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d5d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7f3 fbb3 	bl	8000d44 <__aeabi_fmul>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	461d      	mov	r5, r3
 800d5e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d5e6:	f7f3 fbad 	bl	8000d44 <__aeabi_fmul>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f7f3 faa0 	bl	8000b34 <__addsf3>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d5fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d5fc:	f7f3 fba2 	bl	8000d44 <__aeabi_fmul>
 800d600:	4603      	mov	r3, r0
 800d602:	4619      	mov	r1, r3
 800d604:	4628      	mov	r0, r5
 800d606:	f7f3 fa93 	bl	8000b30 <__aeabi_fsub>
 800d60a:	4603      	mov	r3, r0
 800d60c:	461d      	mov	r5, r3
 800d60e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d610:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d612:	f7f3 fb97 	bl	8000d44 <__aeabi_fmul>
 800d616:	4603      	mov	r3, r0
 800d618:	4619      	mov	r1, r3
 800d61a:	4628      	mov	r0, r5
 800d61c:	f7f3 fa8a 	bl	8000b34 <__addsf3>
 800d620:	4603      	mov	r3, r0
 800d622:	461d      	mov	r5, r3
 800d624:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d626:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d628:	f7f3 fb8c 	bl	8000d44 <__aeabi_fmul>
 800d62c:	4603      	mov	r3, r0
 800d62e:	4619      	mov	r1, r3
 800d630:	4628      	mov	r0, r5
 800d632:	f7f3 fa7d 	bl	8000b30 <__aeabi_fsub>
 800d636:	4603      	mov	r3, r0
 800d638:	461d      	mov	r5, r3
 800d63a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d63c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d63e:	f7f3 fb81 	bl	8000d44 <__aeabi_fmul>
 800d642:	4603      	mov	r3, r0
 800d644:	4619      	mov	r1, r3
 800d646:	4628      	mov	r0, r5
 800d648:	f7f3 fa74 	bl	8000b34 <__addsf3>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461d      	mov	r5, r3
 800d650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d652:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d654:	f7f3 fb76 	bl	8000d44 <__aeabi_fmul>
 800d658:	4603      	mov	r3, r0
 800d65a:	4619      	mov	r1, r3
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7f3 fa67 	bl	8000b30 <__aeabi_fsub>
 800d662:	4603      	mov	r3, r0
 800d664:	461d      	mov	r5, r3
 800d666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d668:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d66a:	f7f3 fb6b 	bl	8000d44 <__aeabi_fmul>
 800d66e:	4603      	mov	r3, r0
 800d670:	4619      	mov	r1, r3
 800d672:	4628      	mov	r0, r5
 800d674:	f7f3 fa5e 	bl	8000b34 <__addsf3>
 800d678:	4603      	mov	r3, r0
 800d67a:	461d      	mov	r5, r3
 800d67c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d67e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d680:	f7f3 fb60 	bl	8000d44 <__aeabi_fmul>
 800d684:	4603      	mov	r3, r0
 800d686:	4619      	mov	r1, r3
 800d688:	4628      	mov	r0, r5
 800d68a:	f7f3 fa51 	bl	8000b30 <__aeabi_fsub>
 800d68e:	4603      	mov	r3, r0
 800d690:	4619      	mov	r1, r3
 800d692:	4620      	mov	r0, r4
 800d694:	f7f3 fb56 	bl	8000d44 <__aeabi_fmul>
 800d698:	4603      	mov	r3, r0
 800d69a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f3 fc05 	bl	8000eac <__aeabi_fdiv>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kt22=(Qgps_v*(Qgps*S2_3 + Qgps*S2_4 + S1_1*S2_3 - S1_3*S2_1 + S1_1*S2_4 - S1_4*S2_1))/A;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68dc      	ldr	r4, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d6b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f3 fb46 	bl	8000d44 <__aeabi_fmul>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	461d      	mov	r5, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d6c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7f3 fb3d 	bl	8000d44 <__aeabi_fmul>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7f3 fa30 	bl	8000b34 <__addsf3>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461d      	mov	r5, r3
 800d6d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6da:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d6de:	f7f3 fb31 	bl	8000d44 <__aeabi_fmul>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f7f3 fa24 	bl	8000b34 <__addsf3>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d6f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d6f4:	f7f3 fb26 	bl	8000d44 <__aeabi_fmul>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f7f3 fa17 	bl	8000b30 <__aeabi_fsub>
 800d702:	4603      	mov	r3, r0
 800d704:	461d      	mov	r5, r3
 800d706:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d708:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d70c:	f7f3 fb1a 	bl	8000d44 <__aeabi_fmul>
 800d710:	4603      	mov	r3, r0
 800d712:	4619      	mov	r1, r3
 800d714:	4628      	mov	r0, r5
 800d716:	f7f3 fa0d 	bl	8000b34 <__addsf3>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461d      	mov	r5, r3
 800d71e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d720:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800d722:	f7f3 fb0f 	bl	8000d44 <__aeabi_fmul>
 800d726:	4603      	mov	r3, r0
 800d728:	4619      	mov	r1, r3
 800d72a:	4628      	mov	r0, r5
 800d72c:	f7f3 fa00 	bl	8000b30 <__aeabi_fsub>
 800d730:	4603      	mov	r3, r0
 800d732:	4619      	mov	r1, r3
 800d734:	4620      	mov	r0, r4
 800d736:	f7f3 fb05 	bl	8000d44 <__aeabi_fmul>
 800d73a:	4603      	mov	r3, r0
 800d73c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f3 fbb4 	bl	8000eac <__aeabi_fdiv>
 800d744:	4603      	mov	r3, r0
 800d746:	627b      	str	r3, [r7, #36]	; 0x24
	float Kt23=1 - (Qap*Qgps*Qgps_v + Qap*Qgps_v*S1_1 + Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1)/A;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7f3 faf4 	bl	8000d44 <__aeabi_fmul>
 800d75c:	4603      	mov	r3, r0
 800d75e:	461a      	mov	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f7f3 faec 	bl	8000d44 <__aeabi_fmul>
 800d76c:	4603      	mov	r3, r0
 800d76e:	461c      	mov	r4, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7f3 fae1 	bl	8000d44 <__aeabi_fmul>
 800d782:	4603      	mov	r3, r0
 800d784:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d788:	4618      	mov	r0, r3
 800d78a:	f7f3 fadb 	bl	8000d44 <__aeabi_fmul>
 800d78e:	4603      	mov	r3, r0
 800d790:	4619      	mov	r1, r3
 800d792:	4620      	mov	r0, r4
 800d794:	f7f3 f9ce 	bl	8000b34 <__addsf3>
 800d798:	4603      	mov	r3, r0
 800d79a:	461c      	mov	r4, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f7f3 facb 	bl	8000d44 <__aeabi_fmul>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f3 fac6 	bl	8000d44 <__aeabi_fmul>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f7f3 f9b9 	bl	8000b34 <__addsf3>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	461c      	mov	r4, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	f7f3 fab6 	bl	8000d44 <__aeabi_fmul>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f3 fab1 	bl	8000d44 <__aeabi_fmul>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7f3 f9a4 	bl	8000b34 <__addsf3>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461c      	mov	r4, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	f7f3 faa1 	bl	8000d44 <__aeabi_fmul>
 800d802:	4603      	mov	r3, r0
 800d804:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d806:	4618      	mov	r0, r3
 800d808:	f7f3 fa9c 	bl	8000d44 <__aeabi_fmul>
 800d80c:	4603      	mov	r3, r0
 800d80e:	4619      	mov	r1, r3
 800d810:	4620      	mov	r0, r4
 800d812:	f7f3 f98f 	bl	8000b34 <__addsf3>
 800d816:	4603      	mov	r3, r0
 800d818:	461c      	mov	r4, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7f3 fa8c 	bl	8000d44 <__aeabi_fmul>
 800d82c:	4603      	mov	r3, r0
 800d82e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d830:	4618      	mov	r0, r3
 800d832:	f7f3 fa87 	bl	8000d44 <__aeabi_fmul>
 800d836:	4603      	mov	r3, r0
 800d838:	4619      	mov	r1, r3
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7f3 f97a 	bl	8000b34 <__addsf3>
 800d840:	4603      	mov	r3, r0
 800d842:	461c      	mov	r4, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f3 fa79 	bl	8000d44 <__aeabi_fmul>
 800d852:	4603      	mov	r3, r0
 800d854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d856:	4618      	mov	r0, r3
 800d858:	f7f3 fa74 	bl	8000d44 <__aeabi_fmul>
 800d85c:	4603      	mov	r3, r0
 800d85e:	4619      	mov	r1, r3
 800d860:	4620      	mov	r0, r4
 800d862:	f7f3 f967 	bl	8000b34 <__addsf3>
 800d866:	4603      	mov	r3, r0
 800d868:	461c      	mov	r4, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d870:	4618      	mov	r0, r3
 800d872:	f7f3 fa67 	bl	8000d44 <__aeabi_fmul>
 800d876:	4603      	mov	r3, r0
 800d878:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f3 fa62 	bl	8000d44 <__aeabi_fmul>
 800d880:	4603      	mov	r3, r0
 800d882:	4619      	mov	r1, r3
 800d884:	4620      	mov	r0, r4
 800d886:	f7f3 f953 	bl	8000b30 <__aeabi_fsub>
 800d88a:	4603      	mov	r3, r0
 800d88c:	461c      	mov	r4, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d896:	4618      	mov	r0, r3
 800d898:	f7f3 fa54 	bl	8000d44 <__aeabi_fmul>
 800d89c:	4603      	mov	r3, r0
 800d89e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f3 fa4f 	bl	8000d44 <__aeabi_fmul>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7f3 f942 	bl	8000b34 <__addsf3>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461c      	mov	r4, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7f3 fa42 	bl	8000d44 <__aeabi_fmul>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7f3 fa3d 	bl	8000d44 <__aeabi_fmul>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f7f3 f92e 	bl	8000b30 <__aeabi_fsub>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	461c      	mov	r4, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7f3 fa2f 	bl	8000d44 <__aeabi_fmul>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f3 fa2a 	bl	8000d44 <__aeabi_fmul>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7f3 f91d 	bl	8000b34 <__addsf3>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461c      	mov	r4, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d904:	4618      	mov	r0, r3
 800d906:	f7f3 fa1d 	bl	8000d44 <__aeabi_fmul>
 800d90a:	4603      	mov	r3, r0
 800d90c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f3 fa18 	bl	8000d44 <__aeabi_fmul>
 800d914:	4603      	mov	r3, r0
 800d916:	4619      	mov	r1, r3
 800d918:	4620      	mov	r0, r4
 800d91a:	f7f3 f909 	bl	8000b30 <__aeabi_fsub>
 800d91e:	4603      	mov	r3, r0
 800d920:	461c      	mov	r4, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f3 fa0a 	bl	8000d44 <__aeabi_fmul>
 800d930:	4603      	mov	r3, r0
 800d932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d934:	4618      	mov	r0, r3
 800d936:	f7f3 fa05 	bl	8000d44 <__aeabi_fmul>
 800d93a:	4603      	mov	r3, r0
 800d93c:	4619      	mov	r1, r3
 800d93e:	4620      	mov	r0, r4
 800d940:	f7f3 f8f8 	bl	8000b34 <__addsf3>
 800d944:	4603      	mov	r3, r0
 800d946:	461c      	mov	r4, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d94e:	4618      	mov	r0, r3
 800d950:	f7f3 f9f8 	bl	8000d44 <__aeabi_fmul>
 800d954:	4603      	mov	r3, r0
 800d956:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d958:	4618      	mov	r0, r3
 800d95a:	f7f3 f9f3 	bl	8000d44 <__aeabi_fmul>
 800d95e:	4603      	mov	r3, r0
 800d960:	4619      	mov	r1, r3
 800d962:	4620      	mov	r0, r4
 800d964:	f7f3 f8e4 	bl	8000b30 <__aeabi_fsub>
 800d968:	4603      	mov	r3, r0
 800d96a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7f3 fa9d 	bl	8000eac <__aeabi_fdiv>
 800d972:	4603      	mov	r3, r0
 800d974:	4619      	mov	r1, r3
 800d976:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d97a:	f7f3 f8d9 	bl	8000b30 <__aeabi_fsub>
 800d97e:	4603      	mov	r3, r0
 800d980:	623b      	str	r3, [r7, #32]
	float Kt31=(Qap*Qgps_v*S3_1 - Qap*S2_1*S3_2 + Qap*S2_2*S3_1 + Qgps_v*S3_1*S4_3 - Qgps_v*S3_3*S4_1 + Qgps_v*S3_1*S4_4 - Qgps_v*S3_4*S4_1 - S2_1*S3_2*S4_3 + S2_1*S3_3*S4_2 + S2_2*S3_1*S4_3 - S2_2*S3_3*S4_1 - S2_3*S3_1*S4_2 + S2_3*S3_2*S4_1 - S2_1*S3_2*S4_4 + S2_1*S3_4*S4_2 + S2_2*S3_1*S4_4 - S2_2*S3_4*S4_1 - S2_4*S3_1*S4_2 + S2_4*S3_2*S4_1)/A;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	4619      	mov	r1, r3
 800d98e:	4610      	mov	r0, r2
 800d990:	f7f3 f9d8 	bl	8000d44 <__aeabi_fmul>
 800d994:	4603      	mov	r3, r0
 800d996:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d998:	4618      	mov	r0, r3
 800d99a:	f7f3 f9d3 	bl	8000d44 <__aeabi_fmul>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	461c      	mov	r4, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d9a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7f3 f9ca 	bl	8000d44 <__aeabi_fmul>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7f3 f9c5 	bl	8000d44 <__aeabi_fmul>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7f3 f8b6 	bl	8000b30 <__aeabi_fsub>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	461c      	mov	r4, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800d9ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7f3 f9b7 	bl	8000d44 <__aeabi_fmul>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f3 f9b2 	bl	8000d44 <__aeabi_fmul>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7f3 f8a5 	bl	8000b34 <__addsf3>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	461c      	mov	r4, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f3 f9a5 	bl	8000d44 <__aeabi_fmul>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7f3 f9a0 	bl	8000d44 <__aeabi_fmul>
 800da04:	4603      	mov	r3, r0
 800da06:	4619      	mov	r1, r3
 800da08:	4620      	mov	r0, r4
 800da0a:	f7f3 f893 	bl	8000b34 <__addsf3>
 800da0e:	4603      	mov	r3, r0
 800da10:	461c      	mov	r4, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f3 f993 	bl	8000d44 <__aeabi_fmul>
 800da1e:	4603      	mov	r3, r0
 800da20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da22:	4618      	mov	r0, r3
 800da24:	f7f3 f98e 	bl	8000d44 <__aeabi_fmul>
 800da28:	4603      	mov	r3, r0
 800da2a:	4619      	mov	r1, r3
 800da2c:	4620      	mov	r0, r4
 800da2e:	f7f3 f87f 	bl	8000b30 <__aeabi_fsub>
 800da32:	4603      	mov	r3, r0
 800da34:	461c      	mov	r4, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7f3 f981 	bl	8000d44 <__aeabi_fmul>
 800da42:	4603      	mov	r3, r0
 800da44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da46:	4618      	mov	r0, r3
 800da48:	f7f3 f97c 	bl	8000d44 <__aeabi_fmul>
 800da4c:	4603      	mov	r3, r0
 800da4e:	4619      	mov	r1, r3
 800da50:	4620      	mov	r0, r4
 800da52:	f7f3 f86f 	bl	8000b34 <__addsf3>
 800da56:	4603      	mov	r3, r0
 800da58:	461c      	mov	r4, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da60:	4618      	mov	r0, r3
 800da62:	f7f3 f96f 	bl	8000d44 <__aeabi_fmul>
 800da66:	4603      	mov	r3, r0
 800da68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f3 f96a 	bl	8000d44 <__aeabi_fmul>
 800da70:	4603      	mov	r3, r0
 800da72:	4619      	mov	r1, r3
 800da74:	4620      	mov	r0, r4
 800da76:	f7f3 f85b 	bl	8000b30 <__aeabi_fsub>
 800da7a:	4603      	mov	r3, r0
 800da7c:	461c      	mov	r4, r3
 800da7e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800da80:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800da82:	f7f3 f95f 	bl	8000d44 <__aeabi_fmul>
 800da86:	4603      	mov	r3, r0
 800da88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f3 f95a 	bl	8000d44 <__aeabi_fmul>
 800da90:	4603      	mov	r3, r0
 800da92:	4619      	mov	r1, r3
 800da94:	4620      	mov	r0, r4
 800da96:	f7f3 f84b 	bl	8000b30 <__aeabi_fsub>
 800da9a:	4603      	mov	r3, r0
 800da9c:	461c      	mov	r4, r3
 800da9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800daa0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800daa2:	f7f3 f94f 	bl	8000d44 <__aeabi_fmul>
 800daa6:	4603      	mov	r3, r0
 800daa8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f3 f94a 	bl	8000d44 <__aeabi_fmul>
 800dab0:	4603      	mov	r3, r0
 800dab2:	4619      	mov	r1, r3
 800dab4:	4620      	mov	r0, r4
 800dab6:	f7f3 f83d 	bl	8000b34 <__addsf3>
 800daba:	4603      	mov	r3, r0
 800dabc:	461c      	mov	r4, r3
 800dabe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dac0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dac2:	f7f3 f93f 	bl	8000d44 <__aeabi_fmul>
 800dac6:	4603      	mov	r3, r0
 800dac8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800daca:	4618      	mov	r0, r3
 800dacc:	f7f3 f93a 	bl	8000d44 <__aeabi_fmul>
 800dad0:	4603      	mov	r3, r0
 800dad2:	4619      	mov	r1, r3
 800dad4:	4620      	mov	r0, r4
 800dad6:	f7f3 f82d 	bl	8000b34 <__addsf3>
 800dada:	4603      	mov	r3, r0
 800dadc:	461c      	mov	r4, r3
 800dade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dae2:	f7f3 f92f 	bl	8000d44 <__aeabi_fmul>
 800dae6:	4603      	mov	r3, r0
 800dae8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daea:	4618      	mov	r0, r3
 800daec:	f7f3 f92a 	bl	8000d44 <__aeabi_fmul>
 800daf0:	4603      	mov	r3, r0
 800daf2:	4619      	mov	r1, r3
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7f3 f81b 	bl	8000b30 <__aeabi_fsub>
 800dafa:	4603      	mov	r3, r0
 800dafc:	461c      	mov	r4, r3
 800dafe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800db02:	f7f3 f91f 	bl	8000d44 <__aeabi_fmul>
 800db06:	4603      	mov	r3, r0
 800db08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f3 f91a 	bl	8000d44 <__aeabi_fmul>
 800db10:	4603      	mov	r3, r0
 800db12:	4619      	mov	r1, r3
 800db14:	4620      	mov	r0, r4
 800db16:	f7f3 f80b 	bl	8000b30 <__aeabi_fsub>
 800db1a:	4603      	mov	r3, r0
 800db1c:	461c      	mov	r4, r3
 800db1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800db20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800db22:	f7f3 f90f 	bl	8000d44 <__aeabi_fmul>
 800db26:	4603      	mov	r3, r0
 800db28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7f3 f90a 	bl	8000d44 <__aeabi_fmul>
 800db30:	4603      	mov	r3, r0
 800db32:	4619      	mov	r1, r3
 800db34:	4620      	mov	r0, r4
 800db36:	f7f2 fffd 	bl	8000b34 <__addsf3>
 800db3a:	4603      	mov	r3, r0
 800db3c:	461c      	mov	r4, r3
 800db3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800db40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800db42:	f7f3 f8ff 	bl	8000d44 <__aeabi_fmul>
 800db46:	4603      	mov	r3, r0
 800db48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7f3 f8fa 	bl	8000d44 <__aeabi_fmul>
 800db50:	4603      	mov	r3, r0
 800db52:	4619      	mov	r1, r3
 800db54:	4620      	mov	r0, r4
 800db56:	f7f2 ffeb 	bl	8000b30 <__aeabi_fsub>
 800db5a:	4603      	mov	r3, r0
 800db5c:	461c      	mov	r4, r3
 800db5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800db62:	f7f3 f8ef 	bl	8000d44 <__aeabi_fmul>
 800db66:	4603      	mov	r3, r0
 800db68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f3 f8ea 	bl	8000d44 <__aeabi_fmul>
 800db70:	4603      	mov	r3, r0
 800db72:	4619      	mov	r1, r3
 800db74:	4620      	mov	r0, r4
 800db76:	f7f2 ffdd 	bl	8000b34 <__addsf3>
 800db7a:	4603      	mov	r3, r0
 800db7c:	461c      	mov	r4, r3
 800db7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db82:	f7f3 f8df 	bl	8000d44 <__aeabi_fmul>
 800db86:	4603      	mov	r3, r0
 800db88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7f3 f8da 	bl	8000d44 <__aeabi_fmul>
 800db90:	4603      	mov	r3, r0
 800db92:	4619      	mov	r1, r3
 800db94:	4620      	mov	r0, r4
 800db96:	f7f2 ffcd 	bl	8000b34 <__addsf3>
 800db9a:	4603      	mov	r3, r0
 800db9c:	461c      	mov	r4, r3
 800db9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dba0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dba2:	f7f3 f8cf 	bl	8000d44 <__aeabi_fmul>
 800dba6:	4603      	mov	r3, r0
 800dba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f3 f8ca 	bl	8000d44 <__aeabi_fmul>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7f2 ffbb 	bl	8000b30 <__aeabi_fsub>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	461c      	mov	r4, r3
 800dbbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dbc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dbc2:	f7f3 f8bf 	bl	8000d44 <__aeabi_fmul>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f3 f8ba 	bl	8000d44 <__aeabi_fmul>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7f2 ffab 	bl	8000b30 <__aeabi_fsub>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461c      	mov	r4, r3
 800dbde:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dbe0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dbe2:	f7f3 f8af 	bl	8000d44 <__aeabi_fmul>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f3 f8aa 	bl	8000d44 <__aeabi_fmul>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7f2 ff9d 	bl	8000b34 <__addsf3>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7f3 f954 	bl	8000eac <__aeabi_fdiv>
 800dc04:	4603      	mov	r3, r0
 800dc06:	61fb      	str	r3, [r7, #28]
	float Kt32=(Qgps*Qgps_v*S3_3 + Qgps*Qgps_v*S3_4 + Qgps*S2_2*S3_3 - Qgps*S2_3*S3_2 + Qgps*S2_2*S3_4 - Qgps*S2_4*S3_2 + Qgps_v*S1_1*S3_3 - Qgps_v*S1_3*S3_1 + Qgps_v*S1_1*S3_4 - Qgps_v*S1_4*S3_1 + S1_1*S2_2*S3_3 - S1_1*S2_3*S3_2 - S1_2*S2_1*S3_3 + S1_2*S2_3*S3_1 + S1_3*S2_1*S3_2 - S1_3*S2_2*S3_1 + S1_1*S2_2*S3_4 - S1_1*S2_4*S3_2 - S1_2*S2_1*S3_4 + S1_2*S2_4*S3_1 + S1_4*S2_1*S3_2 - S1_4*S2_2*S3_1)/A;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7f3 f895 	bl	8000d44 <__aeabi_fmul>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7f3 f890 	bl	8000d44 <__aeabi_fmul>
 800dc24:	4603      	mov	r3, r0
 800dc26:	461c      	mov	r4, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	4619      	mov	r1, r3
 800dc34:	4610      	mov	r0, r2
 800dc36:	f7f3 f885 	bl	8000d44 <__aeabi_fmul>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f3 f880 	bl	8000d44 <__aeabi_fmul>
 800dc44:	4603      	mov	r3, r0
 800dc46:	4619      	mov	r1, r3
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7f2 ff73 	bl	8000b34 <__addsf3>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	461c      	mov	r4, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dc58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7f3 f872 	bl	8000d44 <__aeabi_fmul>
 800dc60:	4603      	mov	r3, r0
 800dc62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7f3 f86d 	bl	8000d44 <__aeabi_fmul>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f7f2 ff60 	bl	8000b34 <__addsf3>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461c      	mov	r4, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dc7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f3 f85f 	bl	8000d44 <__aeabi_fmul>
 800dc86:	4603      	mov	r3, r0
 800dc88:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f3 f85a 	bl	8000d44 <__aeabi_fmul>
 800dc90:	4603      	mov	r3, r0
 800dc92:	4619      	mov	r1, r3
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7f2 ff4b 	bl	8000b30 <__aeabi_fsub>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461c      	mov	r4, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dca4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7f3 f84c 	bl	8000d44 <__aeabi_fmul>
 800dcac:	4603      	mov	r3, r0
 800dcae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f3 f847 	bl	8000d44 <__aeabi_fmul>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f7f2 ff3a 	bl	8000b34 <__addsf3>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461c      	mov	r4, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dcca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7f3 f839 	bl	8000d44 <__aeabi_fmul>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7f3 f834 	bl	8000d44 <__aeabi_fmul>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	4619      	mov	r1, r3
 800dce0:	4620      	mov	r0, r4
 800dce2:	f7f2 ff25 	bl	8000b30 <__aeabi_fsub>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461c      	mov	r4, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7f3 f826 	bl	8000d44 <__aeabi_fmul>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f3 f821 	bl	8000d44 <__aeabi_fmul>
 800dd02:	4603      	mov	r3, r0
 800dd04:	4619      	mov	r1, r3
 800dd06:	4620      	mov	r0, r4
 800dd08:	f7f2 ff14 	bl	8000b34 <__addsf3>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461c      	mov	r4, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f3 f814 	bl	8000d44 <__aeabi_fmul>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7f3 f80f 	bl	8000d44 <__aeabi_fmul>
 800dd26:	4603      	mov	r3, r0
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f7f2 ff00 	bl	8000b30 <__aeabi_fsub>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461c      	mov	r4, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7f3 f801 	bl	8000d44 <__aeabi_fmul>
 800dd42:	4603      	mov	r3, r0
 800dd44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7f2 fffc 	bl	8000d44 <__aeabi_fmul>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7f2 feef 	bl	8000b34 <__addsf3>
 800dd56:	4603      	mov	r3, r0
 800dd58:	461c      	mov	r4, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f2 ffef 	bl	8000d44 <__aeabi_fmul>
 800dd66:	4603      	mov	r3, r0
 800dd68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f2 ffea 	bl	8000d44 <__aeabi_fmul>
 800dd70:	4603      	mov	r3, r0
 800dd72:	4619      	mov	r1, r3
 800dd74:	4620      	mov	r0, r4
 800dd76:	f7f2 fedb 	bl	8000b30 <__aeabi_fsub>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	461c      	mov	r4, r3
 800dd7e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dd80:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800dd84:	f7f2 ffde 	bl	8000d44 <__aeabi_fmul>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f2 ffd9 	bl	8000d44 <__aeabi_fmul>
 800dd92:	4603      	mov	r3, r0
 800dd94:	4619      	mov	r1, r3
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7f2 fecc 	bl	8000b34 <__addsf3>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	461c      	mov	r4, r3
 800dda0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dda2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800dda6:	f7f2 ffcd 	bl	8000d44 <__aeabi_fmul>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f2 ffc8 	bl	8000d44 <__aeabi_fmul>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f2 feb9 	bl	8000b30 <__aeabi_fsub>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461c      	mov	r4, r3
 800ddc2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ddc4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ddc6:	f7f2 ffbd 	bl	8000d44 <__aeabi_fmul>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 ffb8 	bl	8000d44 <__aeabi_fmul>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f7f2 fea9 	bl	8000b30 <__aeabi_fsub>
 800ddde:	4603      	mov	r3, r0
 800dde0:	461c      	mov	r4, r3
 800dde2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dde4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dde6:	f7f2 ffad 	bl	8000d44 <__aeabi_fmul>
 800ddea:	4603      	mov	r3, r0
 800ddec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f2 ffa8 	bl	8000d44 <__aeabi_fmul>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7f2 fe9b 	bl	8000b34 <__addsf3>
 800ddfe:	4603      	mov	r3, r0
 800de00:	461c      	mov	r4, r3
 800de02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800de06:	f7f2 ff9d 	bl	8000d44 <__aeabi_fmul>
 800de0a:	4603      	mov	r3, r0
 800de0c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de0e:	4618      	mov	r0, r3
 800de10:	f7f2 ff98 	bl	8000d44 <__aeabi_fmul>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	4620      	mov	r0, r4
 800de1a:	f7f2 fe8b 	bl	8000b34 <__addsf3>
 800de1e:	4603      	mov	r3, r0
 800de20:	461c      	mov	r4, r3
 800de22:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de24:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800de26:	f7f2 ff8d 	bl	8000d44 <__aeabi_fmul>
 800de2a:	4603      	mov	r3, r0
 800de2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de2e:	4618      	mov	r0, r3
 800de30:	f7f2 ff88 	bl	8000d44 <__aeabi_fmul>
 800de34:	4603      	mov	r3, r0
 800de36:	4619      	mov	r1, r3
 800de38:	4620      	mov	r0, r4
 800de3a:	f7f2 fe79 	bl	8000b30 <__aeabi_fsub>
 800de3e:	4603      	mov	r3, r0
 800de40:	461c      	mov	r4, r3
 800de42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de44:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800de48:	f7f2 ff7c 	bl	8000d44 <__aeabi_fmul>
 800de4c:	4603      	mov	r3, r0
 800de4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de50:	4618      	mov	r0, r3
 800de52:	f7f2 ff77 	bl	8000d44 <__aeabi_fmul>
 800de56:	4603      	mov	r3, r0
 800de58:	4619      	mov	r1, r3
 800de5a:	4620      	mov	r0, r4
 800de5c:	f7f2 fe6a 	bl	8000b34 <__addsf3>
 800de60:	4603      	mov	r3, r0
 800de62:	461c      	mov	r4, r3
 800de64:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800de66:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800de6a:	f7f2 ff6b 	bl	8000d44 <__aeabi_fmul>
 800de6e:	4603      	mov	r3, r0
 800de70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800de72:	4618      	mov	r0, r3
 800de74:	f7f2 ff66 	bl	8000d44 <__aeabi_fmul>
 800de78:	4603      	mov	r3, r0
 800de7a:	4619      	mov	r1, r3
 800de7c:	4620      	mov	r0, r4
 800de7e:	f7f2 fe57 	bl	8000b30 <__aeabi_fsub>
 800de82:	4603      	mov	r3, r0
 800de84:	461c      	mov	r4, r3
 800de86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800de88:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800de8a:	f7f2 ff5b 	bl	8000d44 <__aeabi_fmul>
 800de8e:	4603      	mov	r3, r0
 800de90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de92:	4618      	mov	r0, r3
 800de94:	f7f2 ff56 	bl	8000d44 <__aeabi_fmul>
 800de98:	4603      	mov	r3, r0
 800de9a:	4619      	mov	r1, r3
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7f2 fe47 	bl	8000b30 <__aeabi_fsub>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461c      	mov	r4, r3
 800dea6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dea8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800deaa:	f7f2 ff4b 	bl	8000d44 <__aeabi_fmul>
 800deae:	4603      	mov	r3, r0
 800deb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7f2 ff46 	bl	8000d44 <__aeabi_fmul>
 800deb8:	4603      	mov	r3, r0
 800deba:	4619      	mov	r1, r3
 800debc:	4620      	mov	r0, r4
 800debe:	f7f2 fe39 	bl	8000b34 <__addsf3>
 800dec2:	4603      	mov	r3, r0
 800dec4:	461c      	mov	r4, r3
 800dec6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dec8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800deca:	f7f2 ff3b 	bl	8000d44 <__aeabi_fmul>
 800dece:	4603      	mov	r3, r0
 800ded0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f2 ff36 	bl	8000d44 <__aeabi_fmul>
 800ded8:	4603      	mov	r3, r0
 800deda:	4619      	mov	r1, r3
 800dedc:	4620      	mov	r0, r4
 800dede:	f7f2 fe29 	bl	8000b34 <__addsf3>
 800dee2:	4603      	mov	r3, r0
 800dee4:	461c      	mov	r4, r3
 800dee6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dee8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800deea:	f7f2 ff2b 	bl	8000d44 <__aeabi_fmul>
 800deee:	4603      	mov	r3, r0
 800def0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800def2:	4618      	mov	r0, r3
 800def4:	f7f2 ff26 	bl	8000d44 <__aeabi_fmul>
 800def8:	4603      	mov	r3, r0
 800defa:	4619      	mov	r1, r3
 800defc:	4620      	mov	r0, r4
 800defe:	f7f2 fe17 	bl	8000b30 <__aeabi_fsub>
 800df02:	4603      	mov	r3, r0
 800df04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df06:	4618      	mov	r0, r3
 800df08:	f7f2 ffd0 	bl	8000eac <__aeabi_fdiv>
 800df0c:	4603      	mov	r3, r0
 800df0e:	61bb      	str	r3, [r7, #24]
	float Kt33=(Qap*Qgps*S3_2 + Qap*S1_1*S3_2 - Qap*S1_2*S3_1 + Qgps*S3_2*S4_3 - Qgps*S3_3*S4_2 + Qgps*S3_2*S4_4 - Qgps*S3_4*S4_2 + S1_1*S3_2*S4_3 - S1_1*S3_3*S4_2 - S1_2*S3_1*S4_3 + S1_2*S3_3*S4_1 + S1_3*S3_1*S4_2 - S1_3*S3_2*S4_1 + S1_1*S3_2*S4_4 - S1_1*S3_4*S4_2 - S1_2*S3_1*S4_4 + S1_2*S3_4*S4_1 + S1_4*S3_1*S4_2 - S1_4*S3_2*S4_1)/A;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f7f2 ff10 	bl	8000d44 <__aeabi_fmul>
 800df24:	4603      	mov	r3, r0
 800df26:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800df28:	4618      	mov	r0, r3
 800df2a:	f7f2 ff0b 	bl	8000d44 <__aeabi_fmul>
 800df2e:	4603      	mov	r3, r0
 800df30:	461c      	mov	r4, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800df38:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7f2 ff01 	bl	8000d44 <__aeabi_fmul>
 800df42:	4603      	mov	r3, r0
 800df44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800df46:	4618      	mov	r0, r3
 800df48:	f7f2 fefc 	bl	8000d44 <__aeabi_fmul>
 800df4c:	4603      	mov	r3, r0
 800df4e:	4619      	mov	r1, r3
 800df50:	4620      	mov	r0, r4
 800df52:	f7f2 fdef 	bl	8000b34 <__addsf3>
 800df56:	4603      	mov	r3, r0
 800df58:	461c      	mov	r4, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800df60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800df62:	4618      	mov	r0, r3
 800df64:	f7f2 feee 	bl	8000d44 <__aeabi_fmul>
 800df68:	4603      	mov	r3, r0
 800df6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f2 fee9 	bl	8000d44 <__aeabi_fmul>
 800df72:	4603      	mov	r3, r0
 800df74:	4619      	mov	r1, r3
 800df76:	4620      	mov	r0, r4
 800df78:	f7f2 fdda 	bl	8000b30 <__aeabi_fsub>
 800df7c:	4603      	mov	r3, r0
 800df7e:	461c      	mov	r4, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800df86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800df88:	4618      	mov	r0, r3
 800df8a:	f7f2 fedb 	bl	8000d44 <__aeabi_fmul>
 800df8e:	4603      	mov	r3, r0
 800df90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df92:	4618      	mov	r0, r3
 800df94:	f7f2 fed6 	bl	8000d44 <__aeabi_fmul>
 800df98:	4603      	mov	r3, r0
 800df9a:	4619      	mov	r1, r3
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7f2 fdc9 	bl	8000b34 <__addsf3>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461c      	mov	r4, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dfac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7f2 fec8 	bl	8000d44 <__aeabi_fmul>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7f2 fec3 	bl	8000d44 <__aeabi_fmul>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7f2 fdb4 	bl	8000b30 <__aeabi_fsub>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461c      	mov	r4, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dfd2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7f2 feb5 	bl	8000d44 <__aeabi_fmul>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f2 feb0 	bl	8000d44 <__aeabi_fmul>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7f2 fda3 	bl	8000b34 <__addsf3>
 800dfee:	4603      	mov	r3, r0
 800dff0:	461c      	mov	r4, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800dff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f2 fea2 	bl	8000d44 <__aeabi_fmul>
 800e000:	4603      	mov	r3, r0
 800e002:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e004:	4618      	mov	r0, r3
 800e006:	f7f2 fe9d 	bl	8000d44 <__aeabi_fmul>
 800e00a:	4603      	mov	r3, r0
 800e00c:	4619      	mov	r1, r3
 800e00e:	4620      	mov	r0, r4
 800e010:	f7f2 fd8e 	bl	8000b30 <__aeabi_fsub>
 800e014:	4603      	mov	r3, r0
 800e016:	461c      	mov	r4, r3
 800e018:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e01a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e01e:	f7f2 fe91 	bl	8000d44 <__aeabi_fmul>
 800e022:	4603      	mov	r3, r0
 800e024:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e026:	4618      	mov	r0, r3
 800e028:	f7f2 fe8c 	bl	8000d44 <__aeabi_fmul>
 800e02c:	4603      	mov	r3, r0
 800e02e:	4619      	mov	r1, r3
 800e030:	4620      	mov	r0, r4
 800e032:	f7f2 fd7f 	bl	8000b34 <__addsf3>
 800e036:	4603      	mov	r3, r0
 800e038:	461c      	mov	r4, r3
 800e03a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e03c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e040:	f7f2 fe80 	bl	8000d44 <__aeabi_fmul>
 800e044:	4603      	mov	r3, r0
 800e046:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e048:	4618      	mov	r0, r3
 800e04a:	f7f2 fe7b 	bl	8000d44 <__aeabi_fmul>
 800e04e:	4603      	mov	r3, r0
 800e050:	4619      	mov	r1, r3
 800e052:	4620      	mov	r0, r4
 800e054:	f7f2 fd6c 	bl	8000b30 <__aeabi_fsub>
 800e058:	4603      	mov	r3, r0
 800e05a:	461c      	mov	r4, r3
 800e05c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e05e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e060:	f7f2 fe70 	bl	8000d44 <__aeabi_fmul>
 800e064:	4603      	mov	r3, r0
 800e066:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e068:	4618      	mov	r0, r3
 800e06a:	f7f2 fe6b 	bl	8000d44 <__aeabi_fmul>
 800e06e:	4603      	mov	r3, r0
 800e070:	4619      	mov	r1, r3
 800e072:	4620      	mov	r0, r4
 800e074:	f7f2 fd5c 	bl	8000b30 <__aeabi_fsub>
 800e078:	4603      	mov	r3, r0
 800e07a:	461c      	mov	r4, r3
 800e07c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e07e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e080:	f7f2 fe60 	bl	8000d44 <__aeabi_fmul>
 800e084:	4603      	mov	r3, r0
 800e086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f2 fe5b 	bl	8000d44 <__aeabi_fmul>
 800e08e:	4603      	mov	r3, r0
 800e090:	4619      	mov	r1, r3
 800e092:	4620      	mov	r0, r4
 800e094:	f7f2 fd4e 	bl	8000b34 <__addsf3>
 800e098:	4603      	mov	r3, r0
 800e09a:	461c      	mov	r4, r3
 800e09c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e09e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e0a0:	f7f2 fe50 	bl	8000d44 <__aeabi_fmul>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f2 fe4b 	bl	8000d44 <__aeabi_fmul>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7f2 fd3e 	bl	8000b34 <__addsf3>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	461c      	mov	r4, r3
 800e0bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e0be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e0c0:	f7f2 fe40 	bl	8000d44 <__aeabi_fmul>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7f2 fe3b 	bl	8000d44 <__aeabi_fmul>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f7f2 fd2c 	bl	8000b30 <__aeabi_fsub>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461c      	mov	r4, r3
 800e0dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e0de:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e0e2:	f7f2 fe2f 	bl	8000d44 <__aeabi_fmul>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7f2 fe2a 	bl	8000d44 <__aeabi_fmul>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f7f2 fd1d 	bl	8000b34 <__addsf3>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461c      	mov	r4, r3
 800e0fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e100:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e104:	f7f2 fe1e 	bl	8000d44 <__aeabi_fmul>
 800e108:	4603      	mov	r3, r0
 800e10a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f2 fe19 	bl	8000d44 <__aeabi_fmul>
 800e112:	4603      	mov	r3, r0
 800e114:	4619      	mov	r1, r3
 800e116:	4620      	mov	r0, r4
 800e118:	f7f2 fd0a 	bl	8000b30 <__aeabi_fsub>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461c      	mov	r4, r3
 800e120:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e122:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e124:	f7f2 fe0e 	bl	8000d44 <__aeabi_fmul>
 800e128:	4603      	mov	r3, r0
 800e12a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f2 fe09 	bl	8000d44 <__aeabi_fmul>
 800e132:	4603      	mov	r3, r0
 800e134:	4619      	mov	r1, r3
 800e136:	4620      	mov	r0, r4
 800e138:	f7f2 fcfa 	bl	8000b30 <__aeabi_fsub>
 800e13c:	4603      	mov	r3, r0
 800e13e:	461c      	mov	r4, r3
 800e140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e142:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e144:	f7f2 fdfe 	bl	8000d44 <__aeabi_fmul>
 800e148:	4603      	mov	r3, r0
 800e14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f2 fdf9 	bl	8000d44 <__aeabi_fmul>
 800e152:	4603      	mov	r3, r0
 800e154:	4619      	mov	r1, r3
 800e156:	4620      	mov	r0, r4
 800e158:	f7f2 fcec 	bl	8000b34 <__addsf3>
 800e15c:	4603      	mov	r3, r0
 800e15e:	461c      	mov	r4, r3
 800e160:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e162:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e164:	f7f2 fdee 	bl	8000d44 <__aeabi_fmul>
 800e168:	4603      	mov	r3, r0
 800e16a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7f2 fde9 	bl	8000d44 <__aeabi_fmul>
 800e172:	4603      	mov	r3, r0
 800e174:	4619      	mov	r1, r3
 800e176:	4620      	mov	r0, r4
 800e178:	f7f2 fcdc 	bl	8000b34 <__addsf3>
 800e17c:	4603      	mov	r3, r0
 800e17e:	461c      	mov	r4, r3
 800e180:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e182:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e184:	f7f2 fdde 	bl	8000d44 <__aeabi_fmul>
 800e188:	4603      	mov	r3, r0
 800e18a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f2 fdd9 	bl	8000d44 <__aeabi_fmul>
 800e192:	4603      	mov	r3, r0
 800e194:	4619      	mov	r1, r3
 800e196:	4620      	mov	r0, r4
 800e198:	f7f2 fcca 	bl	8000b30 <__aeabi_fsub>
 800e19c:	4603      	mov	r3, r0
 800e19e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7f2 fe83 	bl	8000eac <__aeabi_fdiv>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	617b      	str	r3, [r7, #20]
	float Kt41=(Qap*Qgps_v*S4_1 - Qap*S2_1*S4_2 + Qap*S2_2*S4_1 - Qgps_v*S3_1*S4_3 + Qgps_v*S3_3*S4_1 - Qgps_v*S3_1*S4_4 + Qgps_v*S3_4*S4_1 + S2_1*S3_2*S4_3 - S2_1*S3_3*S4_2 - S2_2*S3_1*S4_3 + S2_2*S3_3*S4_1 + S2_3*S3_1*S4_2 - S2_3*S3_2*S4_1 + S2_1*S3_2*S4_4 - S2_1*S3_4*S4_2 - S2_2*S3_1*S4_4 + S2_2*S3_4*S4_1 + S2_4*S3_1*S4_2 - S2_4*S3_2*S4_1)/A;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7f2 fdc4 	bl	8000d44 <__aeabi_fmul>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7f2 fdbf 	bl	8000d44 <__aeabi_fmul>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	461c      	mov	r4, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e1d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7f2 fdb6 	bl	8000d44 <__aeabi_fmul>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7f2 fdb1 	bl	8000d44 <__aeabi_fmul>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f7f2 fca2 	bl	8000b30 <__aeabi_fsub>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e1f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7f2 fda3 	bl	8000d44 <__aeabi_fmul>
 800e1fe:	4603      	mov	r3, r0
 800e200:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e202:	4618      	mov	r0, r3
 800e204:	f7f2 fd9e 	bl	8000d44 <__aeabi_fmul>
 800e208:	4603      	mov	r3, r0
 800e20a:	4619      	mov	r1, r3
 800e20c:	4620      	mov	r0, r4
 800e20e:	f7f2 fc91 	bl	8000b34 <__addsf3>
 800e212:	4603      	mov	r3, r0
 800e214:	461c      	mov	r4, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f2 fd91 	bl	8000d44 <__aeabi_fmul>
 800e222:	4603      	mov	r3, r0
 800e224:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e226:	4618      	mov	r0, r3
 800e228:	f7f2 fd8c 	bl	8000d44 <__aeabi_fmul>
 800e22c:	4603      	mov	r3, r0
 800e22e:	4619      	mov	r1, r3
 800e230:	4620      	mov	r0, r4
 800e232:	f7f2 fc7d 	bl	8000b30 <__aeabi_fsub>
 800e236:	4603      	mov	r3, r0
 800e238:	461c      	mov	r4, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e240:	4618      	mov	r0, r3
 800e242:	f7f2 fd7f 	bl	8000d44 <__aeabi_fmul>
 800e246:	4603      	mov	r3, r0
 800e248:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7f2 fd7a 	bl	8000d44 <__aeabi_fmul>
 800e250:	4603      	mov	r3, r0
 800e252:	4619      	mov	r1, r3
 800e254:	4620      	mov	r0, r4
 800e256:	f7f2 fc6d 	bl	8000b34 <__addsf3>
 800e25a:	4603      	mov	r3, r0
 800e25c:	461c      	mov	r4, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e264:	4618      	mov	r0, r3
 800e266:	f7f2 fd6d 	bl	8000d44 <__aeabi_fmul>
 800e26a:	4603      	mov	r3, r0
 800e26c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e26e:	4618      	mov	r0, r3
 800e270:	f7f2 fd68 	bl	8000d44 <__aeabi_fmul>
 800e274:	4603      	mov	r3, r0
 800e276:	4619      	mov	r1, r3
 800e278:	4620      	mov	r0, r4
 800e27a:	f7f2 fc59 	bl	8000b30 <__aeabi_fsub>
 800e27e:	4603      	mov	r3, r0
 800e280:	461c      	mov	r4, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e288:	4618      	mov	r0, r3
 800e28a:	f7f2 fd5b 	bl	8000d44 <__aeabi_fmul>
 800e28e:	4603      	mov	r3, r0
 800e290:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e292:	4618      	mov	r0, r3
 800e294:	f7f2 fd56 	bl	8000d44 <__aeabi_fmul>
 800e298:	4603      	mov	r3, r0
 800e29a:	4619      	mov	r1, r3
 800e29c:	4620      	mov	r0, r4
 800e29e:	f7f2 fc49 	bl	8000b34 <__addsf3>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	461c      	mov	r4, r3
 800e2a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e2a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e2aa:	f7f2 fd4b 	bl	8000d44 <__aeabi_fmul>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f2 fd46 	bl	8000d44 <__aeabi_fmul>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f7f2 fc39 	bl	8000b34 <__addsf3>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	461c      	mov	r4, r3
 800e2c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e2ca:	f7f2 fd3b 	bl	8000d44 <__aeabi_fmul>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f2 fd36 	bl	8000d44 <__aeabi_fmul>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f7f2 fc27 	bl	8000b30 <__aeabi_fsub>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	461c      	mov	r4, r3
 800e2e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e2e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e2ea:	f7f2 fd2b 	bl	8000d44 <__aeabi_fmul>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f2 fd26 	bl	8000d44 <__aeabi_fmul>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f7f2 fc17 	bl	8000b30 <__aeabi_fsub>
 800e302:	4603      	mov	r3, r0
 800e304:	461c      	mov	r4, r3
 800e306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e308:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e30a:	f7f2 fd1b 	bl	8000d44 <__aeabi_fmul>
 800e30e:	4603      	mov	r3, r0
 800e310:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e312:	4618      	mov	r0, r3
 800e314:	f7f2 fd16 	bl	8000d44 <__aeabi_fmul>
 800e318:	4603      	mov	r3, r0
 800e31a:	4619      	mov	r1, r3
 800e31c:	4620      	mov	r0, r4
 800e31e:	f7f2 fc09 	bl	8000b34 <__addsf3>
 800e322:	4603      	mov	r3, r0
 800e324:	461c      	mov	r4, r3
 800e326:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e328:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e32a:	f7f2 fd0b 	bl	8000d44 <__aeabi_fmul>
 800e32e:	4603      	mov	r3, r0
 800e330:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e332:	4618      	mov	r0, r3
 800e334:	f7f2 fd06 	bl	8000d44 <__aeabi_fmul>
 800e338:	4603      	mov	r3, r0
 800e33a:	4619      	mov	r1, r3
 800e33c:	4620      	mov	r0, r4
 800e33e:	f7f2 fbf9 	bl	8000b34 <__addsf3>
 800e342:	4603      	mov	r3, r0
 800e344:	461c      	mov	r4, r3
 800e346:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e348:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e34a:	f7f2 fcfb 	bl	8000d44 <__aeabi_fmul>
 800e34e:	4603      	mov	r3, r0
 800e350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e352:	4618      	mov	r0, r3
 800e354:	f7f2 fcf6 	bl	8000d44 <__aeabi_fmul>
 800e358:	4603      	mov	r3, r0
 800e35a:	4619      	mov	r1, r3
 800e35c:	4620      	mov	r0, r4
 800e35e:	f7f2 fbe7 	bl	8000b30 <__aeabi_fsub>
 800e362:	4603      	mov	r3, r0
 800e364:	461c      	mov	r4, r3
 800e366:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e368:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e36a:	f7f2 fceb 	bl	8000d44 <__aeabi_fmul>
 800e36e:	4603      	mov	r3, r0
 800e370:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e372:	4618      	mov	r0, r3
 800e374:	f7f2 fce6 	bl	8000d44 <__aeabi_fmul>
 800e378:	4603      	mov	r3, r0
 800e37a:	4619      	mov	r1, r3
 800e37c:	4620      	mov	r0, r4
 800e37e:	f7f2 fbd9 	bl	8000b34 <__addsf3>
 800e382:	4603      	mov	r3, r0
 800e384:	461c      	mov	r4, r3
 800e386:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e388:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e38a:	f7f2 fcdb 	bl	8000d44 <__aeabi_fmul>
 800e38e:	4603      	mov	r3, r0
 800e390:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e392:	4618      	mov	r0, r3
 800e394:	f7f2 fcd6 	bl	8000d44 <__aeabi_fmul>
 800e398:	4603      	mov	r3, r0
 800e39a:	4619      	mov	r1, r3
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7f2 fbc7 	bl	8000b30 <__aeabi_fsub>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	461c      	mov	r4, r3
 800e3a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3aa:	f7f2 fccb 	bl	8000d44 <__aeabi_fmul>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f2 fcc6 	bl	8000d44 <__aeabi_fmul>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7f2 fbb7 	bl	8000b30 <__aeabi_fsub>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	461c      	mov	r4, r3
 800e3c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3ca:	f7f2 fcbb 	bl	8000d44 <__aeabi_fmul>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f2 fcb6 	bl	8000d44 <__aeabi_fmul>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7f2 fba9 	bl	8000b34 <__addsf3>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461c      	mov	r4, r3
 800e3e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e3ea:	f7f2 fcab 	bl	8000d44 <__aeabi_fmul>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f2 fca6 	bl	8000d44 <__aeabi_fmul>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f7f2 fb99 	bl	8000b34 <__addsf3>
 800e402:	4603      	mov	r3, r0
 800e404:	461c      	mov	r4, r3
 800e406:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e408:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e40a:	f7f2 fc9b 	bl	8000d44 <__aeabi_fmul>
 800e40e:	4603      	mov	r3, r0
 800e410:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e412:	4618      	mov	r0, r3
 800e414:	f7f2 fc96 	bl	8000d44 <__aeabi_fmul>
 800e418:	4603      	mov	r3, r0
 800e41a:	4619      	mov	r1, r3
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7f2 fb87 	bl	8000b30 <__aeabi_fsub>
 800e422:	4603      	mov	r3, r0
 800e424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e426:	4618      	mov	r0, r3
 800e428:	f7f2 fd40 	bl	8000eac <__aeabi_fdiv>
 800e42c:	4603      	mov	r3, r0
 800e42e:	613b      	str	r3, [r7, #16]
	float Kt42=(Qgps*Qgps_v*S4_3 + Qgps*Qgps_v*S4_4 + Qgps*S2_2*S4_3 - Qgps*S2_3*S4_2 + Qgps*S2_2*S4_4 - Qgps*S2_4*S4_2 + Qgps_v*S1_1*S4_3 - Qgps_v*S1_3*S4_1 + Qgps_v*S1_1*S4_4 - Qgps_v*S1_4*S4_1 + S1_1*S2_2*S4_3 - S1_1*S2_3*S4_2 - S1_2*S2_1*S4_3 + S1_2*S2_3*S4_1 + S1_3*S2_1*S4_2 - S1_3*S2_2*S4_1 + S1_1*S2_2*S4_4 - S1_1*S2_4*S4_2 - S1_2*S2_1*S4_4 + S1_2*S2_4*S4_1 + S1_4*S2_1*S4_2 - S1_4*S2_2*S4_1)/A;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7f2 fc81 	bl	8000d44 <__aeabi_fmul>
 800e442:	4603      	mov	r3, r0
 800e444:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e446:	4618      	mov	r0, r3
 800e448:	f7f2 fc7c 	bl	8000d44 <__aeabi_fmul>
 800e44c:	4603      	mov	r3, r0
 800e44e:	461c      	mov	r4, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7f2 fc71 	bl	8000d44 <__aeabi_fmul>
 800e462:	4603      	mov	r3, r0
 800e464:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e466:	4618      	mov	r0, r3
 800e468:	f7f2 fc6c 	bl	8000d44 <__aeabi_fmul>
 800e46c:	4603      	mov	r3, r0
 800e46e:	4619      	mov	r1, r3
 800e470:	4620      	mov	r0, r4
 800e472:	f7f2 fb5f 	bl	8000b34 <__addsf3>
 800e476:	4603      	mov	r3, r0
 800e478:	461c      	mov	r4, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e480:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e482:	4618      	mov	r0, r3
 800e484:	f7f2 fc5e 	bl	8000d44 <__aeabi_fmul>
 800e488:	4603      	mov	r3, r0
 800e48a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f2 fc59 	bl	8000d44 <__aeabi_fmul>
 800e492:	4603      	mov	r3, r0
 800e494:	4619      	mov	r1, r3
 800e496:	4620      	mov	r0, r4
 800e498:	f7f2 fb4c 	bl	8000b34 <__addsf3>
 800e49c:	4603      	mov	r3, r0
 800e49e:	461c      	mov	r4, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e4a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7f2 fc4b 	bl	8000d44 <__aeabi_fmul>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f2 fc46 	bl	8000d44 <__aeabi_fmul>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f7f2 fb37 	bl	8000b30 <__aeabi_fsub>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	461c      	mov	r4, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e4cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f2 fc38 	bl	8000d44 <__aeabi_fmul>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f2 fc33 	bl	8000d44 <__aeabi_fmul>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f7f2 fb26 	bl	8000b34 <__addsf3>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	461c      	mov	r4, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e4f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f2 fc25 	bl	8000d44 <__aeabi_fmul>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7f2 fc20 	bl	8000d44 <__aeabi_fmul>
 800e504:	4603      	mov	r3, r0
 800e506:	4619      	mov	r1, r3
 800e508:	4620      	mov	r0, r4
 800e50a:	f7f2 fb11 	bl	8000b30 <__aeabi_fsub>
 800e50e:	4603      	mov	r3, r0
 800e510:	461c      	mov	r4, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f2 fc12 	bl	8000d44 <__aeabi_fmul>
 800e520:	4603      	mov	r3, r0
 800e522:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e524:	4618      	mov	r0, r3
 800e526:	f7f2 fc0d 	bl	8000d44 <__aeabi_fmul>
 800e52a:	4603      	mov	r3, r0
 800e52c:	4619      	mov	r1, r3
 800e52e:	4620      	mov	r0, r4
 800e530:	f7f2 fb00 	bl	8000b34 <__addsf3>
 800e534:	4603      	mov	r3, r0
 800e536:	461c      	mov	r4, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e53e:	4618      	mov	r0, r3
 800e540:	f7f2 fc00 	bl	8000d44 <__aeabi_fmul>
 800e544:	4603      	mov	r3, r0
 800e546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e548:	4618      	mov	r0, r3
 800e54a:	f7f2 fbfb 	bl	8000d44 <__aeabi_fmul>
 800e54e:	4603      	mov	r3, r0
 800e550:	4619      	mov	r1, r3
 800e552:	4620      	mov	r0, r4
 800e554:	f7f2 faec 	bl	8000b30 <__aeabi_fsub>
 800e558:	4603      	mov	r3, r0
 800e55a:	461c      	mov	r4, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e564:	4618      	mov	r0, r3
 800e566:	f7f2 fbed 	bl	8000d44 <__aeabi_fmul>
 800e56a:	4603      	mov	r3, r0
 800e56c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e56e:	4618      	mov	r0, r3
 800e570:	f7f2 fbe8 	bl	8000d44 <__aeabi_fmul>
 800e574:	4603      	mov	r3, r0
 800e576:	4619      	mov	r1, r3
 800e578:	4620      	mov	r0, r4
 800e57a:	f7f2 fadb 	bl	8000b34 <__addsf3>
 800e57e:	4603      	mov	r3, r0
 800e580:	461c      	mov	r4, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f2 fbdb 	bl	8000d44 <__aeabi_fmul>
 800e58e:	4603      	mov	r3, r0
 800e590:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e592:	4618      	mov	r0, r3
 800e594:	f7f2 fbd6 	bl	8000d44 <__aeabi_fmul>
 800e598:	4603      	mov	r3, r0
 800e59a:	4619      	mov	r1, r3
 800e59c:	4620      	mov	r0, r4
 800e59e:	f7f2 fac7 	bl	8000b30 <__aeabi_fsub>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	461c      	mov	r4, r3
 800e5a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e5a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e5ac:	f7f2 fbca 	bl	8000d44 <__aeabi_fmul>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7f2 fbc5 	bl	8000d44 <__aeabi_fmul>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7f2 fab8 	bl	8000b34 <__addsf3>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	461c      	mov	r4, r3
 800e5c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e5ca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e5ce:	f7f2 fbb9 	bl	8000d44 <__aeabi_fmul>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f2 fbb4 	bl	8000d44 <__aeabi_fmul>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f7f2 faa5 	bl	8000b30 <__aeabi_fsub>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	461c      	mov	r4, r3
 800e5ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e5ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e5ee:	f7f2 fba9 	bl	8000d44 <__aeabi_fmul>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7f2 fba4 	bl	8000d44 <__aeabi_fmul>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	4619      	mov	r1, r3
 800e600:	4620      	mov	r0, r4
 800e602:	f7f2 fa95 	bl	8000b30 <__aeabi_fsub>
 800e606:	4603      	mov	r3, r0
 800e608:	461c      	mov	r4, r3
 800e60a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e60c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e60e:	f7f2 fb99 	bl	8000d44 <__aeabi_fmul>
 800e612:	4603      	mov	r3, r0
 800e614:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e616:	4618      	mov	r0, r3
 800e618:	f7f2 fb94 	bl	8000d44 <__aeabi_fmul>
 800e61c:	4603      	mov	r3, r0
 800e61e:	4619      	mov	r1, r3
 800e620:	4620      	mov	r0, r4
 800e622:	f7f2 fa87 	bl	8000b34 <__addsf3>
 800e626:	4603      	mov	r3, r0
 800e628:	461c      	mov	r4, r3
 800e62a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e62c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e62e:	f7f2 fb89 	bl	8000d44 <__aeabi_fmul>
 800e632:	4603      	mov	r3, r0
 800e634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e636:	4618      	mov	r0, r3
 800e638:	f7f2 fb84 	bl	8000d44 <__aeabi_fmul>
 800e63c:	4603      	mov	r3, r0
 800e63e:	4619      	mov	r1, r3
 800e640:	4620      	mov	r0, r4
 800e642:	f7f2 fa77 	bl	8000b34 <__addsf3>
 800e646:	4603      	mov	r3, r0
 800e648:	461c      	mov	r4, r3
 800e64a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e64c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e64e:	f7f2 fb79 	bl	8000d44 <__aeabi_fmul>
 800e652:	4603      	mov	r3, r0
 800e654:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e656:	4618      	mov	r0, r3
 800e658:	f7f2 fb74 	bl	8000d44 <__aeabi_fmul>
 800e65c:	4603      	mov	r3, r0
 800e65e:	4619      	mov	r1, r3
 800e660:	4620      	mov	r0, r4
 800e662:	f7f2 fa65 	bl	8000b30 <__aeabi_fsub>
 800e666:	4603      	mov	r3, r0
 800e668:	461c      	mov	r4, r3
 800e66a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e66c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e670:	f7f2 fb68 	bl	8000d44 <__aeabi_fmul>
 800e674:	4603      	mov	r3, r0
 800e676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f2 fb63 	bl	8000d44 <__aeabi_fmul>
 800e67e:	4603      	mov	r3, r0
 800e680:	4619      	mov	r1, r3
 800e682:	4620      	mov	r0, r4
 800e684:	f7f2 fa56 	bl	8000b34 <__addsf3>
 800e688:	4603      	mov	r3, r0
 800e68a:	461c      	mov	r4, r3
 800e68c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e68e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e692:	f7f2 fb57 	bl	8000d44 <__aeabi_fmul>
 800e696:	4603      	mov	r3, r0
 800e698:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f2 fb52 	bl	8000d44 <__aeabi_fmul>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f7f2 fa43 	bl	8000b30 <__aeabi_fsub>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	461c      	mov	r4, r3
 800e6ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e6b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e6b2:	f7f2 fb47 	bl	8000d44 <__aeabi_fmul>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7f2 fb42 	bl	8000d44 <__aeabi_fmul>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7f2 fa33 	bl	8000b30 <__aeabi_fsub>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	461c      	mov	r4, r3
 800e6ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e6d0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e6d2:	f7f2 fb37 	bl	8000d44 <__aeabi_fmul>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7f2 fb32 	bl	8000d44 <__aeabi_fmul>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7f2 fa25 	bl	8000b34 <__addsf3>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	461c      	mov	r4, r3
 800e6ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e6f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e6f2:	f7f2 fb27 	bl	8000d44 <__aeabi_fmul>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f2 fb22 	bl	8000d44 <__aeabi_fmul>
 800e700:	4603      	mov	r3, r0
 800e702:	4619      	mov	r1, r3
 800e704:	4620      	mov	r0, r4
 800e706:	f7f2 fa15 	bl	8000b34 <__addsf3>
 800e70a:	4603      	mov	r3, r0
 800e70c:	461c      	mov	r4, r3
 800e70e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e710:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e712:	f7f2 fb17 	bl	8000d44 <__aeabi_fmul>
 800e716:	4603      	mov	r3, r0
 800e718:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f2 fb12 	bl	8000d44 <__aeabi_fmul>
 800e720:	4603      	mov	r3, r0
 800e722:	4619      	mov	r1, r3
 800e724:	4620      	mov	r0, r4
 800e726:	f7f2 fa03 	bl	8000b30 <__aeabi_fsub>
 800e72a:	4603      	mov	r3, r0
 800e72c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e72e:	4618      	mov	r0, r3
 800e730:	f7f2 fbbc 	bl	8000eac <__aeabi_fdiv>
 800e734:	4603      	mov	r3, r0
 800e736:	60fb      	str	r3, [r7, #12]
	float Kt43=(Qap*Qgps*S4_2 + Qap*S1_1*S4_2 - Qap*S1_2*S4_1 - Qgps*S3_2*S4_3 + Qgps*S3_3*S4_2 - Qgps*S3_2*S4_4 + Qgps*S3_4*S4_2 - S1_1*S3_2*S4_3 + S1_1*S3_3*S4_2 + S1_2*S3_1*S4_3 - S1_2*S3_3*S4_1 - S1_3*S3_1*S4_2 + S1_3*S3_2*S4_1 - S1_1*S3_2*S4_4 + S1_1*S3_4*S4_2 + S1_2*S3_1*S4_4 - S1_2*S3_4*S4_1 - S1_4*S3_1*S4_2 + S1_4*S3_2*S4_1)/A;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e744:	4619      	mov	r1, r3
 800e746:	4610      	mov	r0, r2
 800e748:	f7f2 fafc 	bl	8000d44 <__aeabi_fmul>
 800e74c:	4603      	mov	r3, r0
 800e74e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e750:	4618      	mov	r0, r3
 800e752:	f7f2 faf7 	bl	8000d44 <__aeabi_fmul>
 800e756:	4603      	mov	r3, r0
 800e758:	461c      	mov	r4, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e760:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e764:	4618      	mov	r0, r3
 800e766:	f7f2 faed 	bl	8000d44 <__aeabi_fmul>
 800e76a:	4603      	mov	r3, r0
 800e76c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f2 fae8 	bl	8000d44 <__aeabi_fmul>
 800e774:	4603      	mov	r3, r0
 800e776:	4619      	mov	r1, r3
 800e778:	4620      	mov	r0, r4
 800e77a:	f7f2 f9db 	bl	8000b34 <__addsf3>
 800e77e:	4603      	mov	r3, r0
 800e780:	461c      	mov	r4, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800e788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f2 fada 	bl	8000d44 <__aeabi_fmul>
 800e790:	4603      	mov	r3, r0
 800e792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e794:	4618      	mov	r0, r3
 800e796:	f7f2 fad5 	bl	8000d44 <__aeabi_fmul>
 800e79a:	4603      	mov	r3, r0
 800e79c:	4619      	mov	r1, r3
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f7f2 f9c6 	bl	8000b30 <__aeabi_fsub>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e7ae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f2 fac7 	bl	8000d44 <__aeabi_fmul>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f2 fac2 	bl	8000d44 <__aeabi_fmul>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f7f2 f9b3 	bl	8000b30 <__aeabi_fsub>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	461c      	mov	r4, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e7d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f2 fab4 	bl	8000d44 <__aeabi_fmul>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f2 faaf 	bl	8000d44 <__aeabi_fmul>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f7f2 f9a2 	bl	8000b34 <__addsf3>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	461c      	mov	r4, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e7fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f2 faa1 	bl	8000d44 <__aeabi_fmul>
 800e802:	4603      	mov	r3, r0
 800e804:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e806:	4618      	mov	r0, r3
 800e808:	f7f2 fa9c 	bl	8000d44 <__aeabi_fmul>
 800e80c:	4603      	mov	r3, r0
 800e80e:	4619      	mov	r1, r3
 800e810:	4620      	mov	r0, r4
 800e812:	f7f2 f98d 	bl	8000b30 <__aeabi_fsub>
 800e816:	4603      	mov	r3, r0
 800e818:	461c      	mov	r4, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800e820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e822:	4618      	mov	r0, r3
 800e824:	f7f2 fa8e 	bl	8000d44 <__aeabi_fmul>
 800e828:	4603      	mov	r3, r0
 800e82a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7f2 fa89 	bl	8000d44 <__aeabi_fmul>
 800e832:	4603      	mov	r3, r0
 800e834:	4619      	mov	r1, r3
 800e836:	4620      	mov	r0, r4
 800e838:	f7f2 f97c 	bl	8000b34 <__addsf3>
 800e83c:	4603      	mov	r3, r0
 800e83e:	461c      	mov	r4, r3
 800e840:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e842:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e846:	f7f2 fa7d 	bl	8000d44 <__aeabi_fmul>
 800e84a:	4603      	mov	r3, r0
 800e84c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e84e:	4618      	mov	r0, r3
 800e850:	f7f2 fa78 	bl	8000d44 <__aeabi_fmul>
 800e854:	4603      	mov	r3, r0
 800e856:	4619      	mov	r1, r3
 800e858:	4620      	mov	r0, r4
 800e85a:	f7f2 f969 	bl	8000b30 <__aeabi_fsub>
 800e85e:	4603      	mov	r3, r0
 800e860:	461c      	mov	r4, r3
 800e862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e864:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e868:	f7f2 fa6c 	bl	8000d44 <__aeabi_fmul>
 800e86c:	4603      	mov	r3, r0
 800e86e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e870:	4618      	mov	r0, r3
 800e872:	f7f2 fa67 	bl	8000d44 <__aeabi_fmul>
 800e876:	4603      	mov	r3, r0
 800e878:	4619      	mov	r1, r3
 800e87a:	4620      	mov	r0, r4
 800e87c:	f7f2 f95a 	bl	8000b34 <__addsf3>
 800e880:	4603      	mov	r3, r0
 800e882:	461c      	mov	r4, r3
 800e884:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e886:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e888:	f7f2 fa5c 	bl	8000d44 <__aeabi_fmul>
 800e88c:	4603      	mov	r3, r0
 800e88e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e890:	4618      	mov	r0, r3
 800e892:	f7f2 fa57 	bl	8000d44 <__aeabi_fmul>
 800e896:	4603      	mov	r3, r0
 800e898:	4619      	mov	r1, r3
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7f2 f94a 	bl	8000b34 <__addsf3>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	461c      	mov	r4, r3
 800e8a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e8a8:	f7f2 fa4c 	bl	8000d44 <__aeabi_fmul>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f2 fa47 	bl	8000d44 <__aeabi_fmul>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f7f2 f938 	bl	8000b30 <__aeabi_fsub>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	461c      	mov	r4, r3
 800e8c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e8c8:	f7f2 fa3c 	bl	8000d44 <__aeabi_fmul>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7f2 fa37 	bl	8000d44 <__aeabi_fmul>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f7f2 f928 	bl	8000b30 <__aeabi_fsub>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e8e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e8e8:	f7f2 fa2c 	bl	8000d44 <__aeabi_fmul>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f2 fa27 	bl	8000d44 <__aeabi_fmul>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f7f2 f91a 	bl	8000b34 <__addsf3>
 800e900:	4603      	mov	r3, r0
 800e902:	461c      	mov	r4, r3
 800e904:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e906:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e90a:	f7f2 fa1b 	bl	8000d44 <__aeabi_fmul>
 800e90e:	4603      	mov	r3, r0
 800e910:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e912:	4618      	mov	r0, r3
 800e914:	f7f2 fa16 	bl	8000d44 <__aeabi_fmul>
 800e918:	4603      	mov	r3, r0
 800e91a:	4619      	mov	r1, r3
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7f2 f907 	bl	8000b30 <__aeabi_fsub>
 800e922:	4603      	mov	r3, r0
 800e924:	461c      	mov	r4, r3
 800e926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e928:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e92c:	f7f2 fa0a 	bl	8000d44 <__aeabi_fmul>
 800e930:	4603      	mov	r3, r0
 800e932:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e934:	4618      	mov	r0, r3
 800e936:	f7f2 fa05 	bl	8000d44 <__aeabi_fmul>
 800e93a:	4603      	mov	r3, r0
 800e93c:	4619      	mov	r1, r3
 800e93e:	4620      	mov	r0, r4
 800e940:	f7f2 f8f8 	bl	8000b34 <__addsf3>
 800e944:	4603      	mov	r3, r0
 800e946:	461c      	mov	r4, r3
 800e948:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e94a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e94c:	f7f2 f9fa 	bl	8000d44 <__aeabi_fmul>
 800e950:	4603      	mov	r3, r0
 800e952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e954:	4618      	mov	r0, r3
 800e956:	f7f2 f9f5 	bl	8000d44 <__aeabi_fmul>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4619      	mov	r1, r3
 800e95e:	4620      	mov	r0, r4
 800e960:	f7f2 f8e8 	bl	8000b34 <__addsf3>
 800e964:	4603      	mov	r3, r0
 800e966:	461c      	mov	r4, r3
 800e968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e96a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e96c:	f7f2 f9ea 	bl	8000d44 <__aeabi_fmul>
 800e970:	4603      	mov	r3, r0
 800e972:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e974:	4618      	mov	r0, r3
 800e976:	f7f2 f9e5 	bl	8000d44 <__aeabi_fmul>
 800e97a:	4603      	mov	r3, r0
 800e97c:	4619      	mov	r1, r3
 800e97e:	4620      	mov	r0, r4
 800e980:	f7f2 f8d6 	bl	8000b30 <__aeabi_fsub>
 800e984:	4603      	mov	r3, r0
 800e986:	461c      	mov	r4, r3
 800e988:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e98a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e98c:	f7f2 f9da 	bl	8000d44 <__aeabi_fmul>
 800e990:	4603      	mov	r3, r0
 800e992:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e994:	4618      	mov	r0, r3
 800e996:	f7f2 f9d5 	bl	8000d44 <__aeabi_fmul>
 800e99a:	4603      	mov	r3, r0
 800e99c:	4619      	mov	r1, r3
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f7f2 f8c6 	bl	8000b30 <__aeabi_fsub>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	461c      	mov	r4, r3
 800e9a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e9aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e9ac:	f7f2 f9ca 	bl	8000d44 <__aeabi_fmul>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7f2 f9c5 	bl	8000d44 <__aeabi_fmul>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f7f2 f8b8 	bl	8000b34 <__addsf3>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7f2 fa6f 	bl	8000eac <__aeabi_fdiv>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	60bb      	str	r3, [r7, #8]

	pos = pos - Kt13*(vel - vgps) - Kt11*(pos - pos_gps) - Kt12*(a - accm + b);
 800e9d2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e9d6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e9da:	f7f2 f8a9 	bl	8000b30 <__aeabi_fsub>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f2 f9ae 	bl	8000d44 <__aeabi_fmul>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e9f0:	f7f2 f89e 	bl	8000b30 <__aeabi_fsub>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	461c      	mov	r4, r3
 800e9f8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e9fc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ea00:	f7f2 f896 	bl	8000b30 <__aeabi_fsub>
 800ea04:	4603      	mov	r3, r0
 800ea06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f2 f99b 	bl	8000d44 <__aeabi_fmul>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	4619      	mov	r1, r3
 800ea12:	4620      	mov	r0, r4
 800ea14:	f7f2 f88c 	bl	8000b30 <__aeabi_fsub>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	461c      	mov	r4, r3
 800ea1c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ea20:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ea24:	f7f2 f884 	bl	8000b30 <__aeabi_fsub>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f2 f880 	bl	8000b34 <__addsf3>
 800ea34:	4603      	mov	r3, r0
 800ea36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f2 f983 	bl	8000d44 <__aeabi_fmul>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	4619      	mov	r1, r3
 800ea42:	4620      	mov	r0, r4
 800ea44:	f7f2 f874 	bl	8000b30 <__aeabi_fsub>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	vel = vel - Kt23*(vel - vgps) - Kt21*(pos - pos_gps) - Kt22*(a - accm + b);
 800ea4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ea52:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ea56:	f7f2 f86b 	bl	8000b30 <__aeabi_fsub>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	6a39      	ldr	r1, [r7, #32]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7f2 f970 	bl	8000d44 <__aeabi_fmul>
 800ea64:	4603      	mov	r3, r0
 800ea66:	4619      	mov	r1, r3
 800ea68:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ea6c:	f7f2 f860 	bl	8000b30 <__aeabi_fsub>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461c      	mov	r4, r3
 800ea74:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ea78:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ea7c:	f7f2 f858 	bl	8000b30 <__aeabi_fsub>
 800ea80:	4603      	mov	r3, r0
 800ea82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f2 f95d 	bl	8000d44 <__aeabi_fmul>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f7f2 f84e 	bl	8000b30 <__aeabi_fsub>
 800ea94:	4603      	mov	r3, r0
 800ea96:	461c      	mov	r4, r3
 800ea98:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ea9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eaa0:	f7f2 f846 	bl	8000b30 <__aeabi_fsub>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7f2 f842 	bl	8000b34 <__addsf3>
 800eab0:	4603      	mov	r3, r0
 800eab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f2 f945 	bl	8000d44 <__aeabi_fmul>
 800eaba:	4603      	mov	r3, r0
 800eabc:	4619      	mov	r1, r3
 800eabe:	4620      	mov	r0, r4
 800eac0:	f7f2 f836 	bl	8000b30 <__aeabi_fsub>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	a = a - Kt33*(vel - vgps) - Kt31*(pos - pos_gps) - Kt32*(a - accm + b);
 800eaca:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eace:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ead2:	f7f2 f82d 	bl	8000b30 <__aeabi_fsub>
 800ead6:	4603      	mov	r3, r0
 800ead8:	6979      	ldr	r1, [r7, #20]
 800eada:	4618      	mov	r0, r3
 800eadc:	f7f2 f932 	bl	8000d44 <__aeabi_fmul>
 800eae0:	4603      	mov	r3, r0
 800eae2:	4619      	mov	r1, r3
 800eae4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eae8:	f7f2 f822 	bl	8000b30 <__aeabi_fsub>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461c      	mov	r4, r3
 800eaf0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800eaf4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eaf8:	f7f2 f81a 	bl	8000b30 <__aeabi_fsub>
 800eafc:	4603      	mov	r3, r0
 800eafe:	69f9      	ldr	r1, [r7, #28]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7f2 f91f 	bl	8000d44 <__aeabi_fmul>
 800eb06:	4603      	mov	r3, r0
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f7f2 f810 	bl	8000b30 <__aeabi_fsub>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461c      	mov	r4, r3
 800eb14:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800eb18:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eb1c:	f7f2 f808 	bl	8000b30 <__aeabi_fsub>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f2 f804 	bl	8000b34 <__addsf3>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	69b9      	ldr	r1, [r7, #24]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f2 f907 	bl	8000d44 <__aeabi_fmul>
 800eb36:	4603      	mov	r3, r0
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f7f1 fff8 	bl	8000b30 <__aeabi_fsub>
 800eb40:	4603      	mov	r3, r0
 800eb42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	b = b - Kt43*(vel - vgps) - Kt41*(pos - pos_gps) - Kt42*(a - accm + b);
 800eb46:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eb4a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800eb4e:	f7f1 ffef 	bl	8000b30 <__aeabi_fsub>
 800eb52:	4603      	mov	r3, r0
 800eb54:	68b9      	ldr	r1, [r7, #8]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f2 f8f4 	bl	8000d44 <__aeabi_fmul>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	4619      	mov	r1, r3
 800eb60:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800eb64:	f7f1 ffe4 	bl	8000b30 <__aeabi_fsub>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800eb70:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eb74:	f7f1 ffdc 	bl	8000b30 <__aeabi_fsub>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	6939      	ldr	r1, [r7, #16]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f2 f8e1 	bl	8000d44 <__aeabi_fmul>
 800eb82:	4603      	mov	r3, r0
 800eb84:	4619      	mov	r1, r3
 800eb86:	4620      	mov	r0, r4
 800eb88:	f7f1 ffd2 	bl	8000b30 <__aeabi_fsub>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	461c      	mov	r4, r3
 800eb90:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800eb94:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eb98:	f7f1 ffca 	bl	8000b30 <__aeabi_fsub>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7f1 ffc6 	bl	8000b34 <__addsf3>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	68f9      	ldr	r1, [r7, #12]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f2 f8c9 	bl	8000d44 <__aeabi_fmul>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7f1 ffba 	bl	8000b30 <__aeabi_fsub>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	S1_1=- S1_1*(Kt11 - 1) - Kt13*S2_1 - Kt12*S3_1 - Kt12*S4_1;
 800ebc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebc6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ebca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ebce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebd0:	f7f1 ffae 	bl	8000b30 <__aeabi_fsub>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7f2 f8b3 	bl	8000d44 <__aeabi_fmul>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	461c      	mov	r4, r3
 800ebe2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ebe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebe6:	f7f2 f8ad 	bl	8000d44 <__aeabi_fmul>
 800ebea:	4603      	mov	r3, r0
 800ebec:	4619      	mov	r1, r3
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7f1 ff9e 	bl	8000b30 <__aeabi_fsub>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	461c      	mov	r4, r3
 800ebf8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ebfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebfc:	f7f2 f8a2 	bl	8000d44 <__aeabi_fmul>
 800ec00:	4603      	mov	r3, r0
 800ec02:	4619      	mov	r1, r3
 800ec04:	4620      	mov	r0, r4
 800ec06:	f7f1 ff93 	bl	8000b30 <__aeabi_fsub>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	461c      	mov	r4, r3
 800ec0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec12:	f7f2 f897 	bl	8000d44 <__aeabi_fmul>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7f1 ff88 	bl	8000b30 <__aeabi_fsub>
 800ec20:	4603      	mov	r3, r0
 800ec22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	S1_2=- S1_2*(Kt11 - 1) - Kt13*S2_2 - Kt12*S3_2 - Kt12*S4_2;
 800ec26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec28:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ec2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ec30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec32:	f7f1 ff7d 	bl	8000b30 <__aeabi_fsub>
 800ec36:	4603      	mov	r3, r0
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7f2 f882 	bl	8000d44 <__aeabi_fmul>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461c      	mov	r4, r3
 800ec44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ec46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec48:	f7f2 f87c 	bl	8000d44 <__aeabi_fmul>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4620      	mov	r0, r4
 800ec52:	f7f1 ff6d 	bl	8000b30 <__aeabi_fsub>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461c      	mov	r4, r3
 800ec5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ec5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec5e:	f7f2 f871 	bl	8000d44 <__aeabi_fmul>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4619      	mov	r1, r3
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7f1 ff62 	bl	8000b30 <__aeabi_fsub>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	461c      	mov	r4, r3
 800ec70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ec72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec74:	f7f2 f866 	bl	8000d44 <__aeabi_fmul>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f7f1 ff57 	bl	8000b30 <__aeabi_fsub>
 800ec82:	4603      	mov	r3, r0
 800ec84:	67fb      	str	r3, [r7, #124]	; 0x7c
	S1_3=- S1_3*(Kt11 - 1) - Kt13*S2_3 - Kt12*S3_3 - Kt12*S4_3;
 800ec86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec88:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ec8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ec90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec92:	f7f1 ff4d 	bl	8000b30 <__aeabi_fsub>
 800ec96:	4603      	mov	r3, r0
 800ec98:	4619      	mov	r1, r3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7f2 f852 	bl	8000d44 <__aeabi_fmul>
 800eca0:	4603      	mov	r3, r0
 800eca2:	461c      	mov	r4, r3
 800eca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eca8:	f7f2 f84c 	bl	8000d44 <__aeabi_fmul>
 800ecac:	4603      	mov	r3, r0
 800ecae:	4619      	mov	r1, r3
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f7f1 ff3d 	bl	8000b30 <__aeabi_fsub>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	461c      	mov	r4, r3
 800ecba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ecbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecbe:	f7f2 f841 	bl	8000d44 <__aeabi_fmul>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7f1 ff32 	bl	8000b30 <__aeabi_fsub>
 800eccc:	4603      	mov	r3, r0
 800ecce:	461c      	mov	r4, r3
 800ecd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecd4:	f7f2 f836 	bl	8000d44 <__aeabi_fmul>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f7f1 ff27 	bl	8000b30 <__aeabi_fsub>
 800ece2:	4603      	mov	r3, r0
 800ece4:	67bb      	str	r3, [r7, #120]	; 0x78
	S1_4=- S1_4*(Kt11 - 1) - Kt13*S2_4 - Kt12*S3_4 - Kt12*S4_4;
 800ece6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ece8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ecec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ecf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecf2:	f7f1 ff1d 	bl	8000b30 <__aeabi_fsub>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7f2 f822 	bl	8000d44 <__aeabi_fmul>
 800ed00:	4603      	mov	r3, r0
 800ed02:	461c      	mov	r4, r3
 800ed04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ed06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed08:	f7f2 f81c 	bl	8000d44 <__aeabi_fmul>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4620      	mov	r0, r4
 800ed12:	f7f1 ff0d 	bl	8000b30 <__aeabi_fsub>
 800ed16:	4603      	mov	r3, r0
 800ed18:	461c      	mov	r4, r3
 800ed1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed1e:	f7f2 f811 	bl	8000d44 <__aeabi_fmul>
 800ed22:	4603      	mov	r3, r0
 800ed24:	4619      	mov	r1, r3
 800ed26:	4620      	mov	r0, r4
 800ed28:	f7f1 ff02 	bl	8000b30 <__aeabi_fsub>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461c      	mov	r4, r3
 800ed30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed34:	f7f2 f806 	bl	8000d44 <__aeabi_fmul>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f7f1 fef7 	bl	8000b30 <__aeabi_fsub>
 800ed42:	4603      	mov	r3, r0
 800ed44:	677b      	str	r3, [r7, #116]	; 0x74
	S2_1=- S2_1*(Kt23 - 1) - Kt21*S1_1 - Kt22*S3_1 - Kt22*S4_1;
 800ed46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed48:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ed4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ed50:	6a38      	ldr	r0, [r7, #32]
 800ed52:	f7f1 feed 	bl	8000b30 <__aeabi_fsub>
 800ed56:	4603      	mov	r3, r0
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7f1 fff2 	bl	8000d44 <__aeabi_fmul>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461c      	mov	r4, r3
 800ed64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ed68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed6a:	f7f1 ffeb 	bl	8000d44 <__aeabi_fmul>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	4619      	mov	r1, r3
 800ed72:	4620      	mov	r0, r4
 800ed74:	f7f1 fedc 	bl	8000b30 <__aeabi_fsub>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	461c      	mov	r4, r3
 800ed7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed80:	f7f1 ffe0 	bl	8000d44 <__aeabi_fmul>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4619      	mov	r1, r3
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f7f1 fed1 	bl	8000b30 <__aeabi_fsub>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	461c      	mov	r4, r3
 800ed92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed96:	f7f1 ffd5 	bl	8000d44 <__aeabi_fmul>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f7f1 fec6 	bl	8000b30 <__aeabi_fsub>
 800eda4:	4603      	mov	r3, r0
 800eda6:	673b      	str	r3, [r7, #112]	; 0x70
	S2_2=- S2_2*(Kt23 - 1) - Kt21*S1_2 - Kt22*S3_2 - Kt22*S4_2;
 800eda8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edaa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800edae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800edb2:	6a38      	ldr	r0, [r7, #32]
 800edb4:	f7f1 febc 	bl	8000b30 <__aeabi_fsub>
 800edb8:	4603      	mov	r3, r0
 800edba:	4619      	mov	r1, r3
 800edbc:	4620      	mov	r0, r4
 800edbe:	f7f1 ffc1 	bl	8000d44 <__aeabi_fmul>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461c      	mov	r4, r3
 800edc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800edc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edca:	f7f1 ffbb 	bl	8000d44 <__aeabi_fmul>
 800edce:	4603      	mov	r3, r0
 800edd0:	4619      	mov	r1, r3
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7f1 feac 	bl	8000b30 <__aeabi_fsub>
 800edd8:	4603      	mov	r3, r0
 800edda:	461c      	mov	r4, r3
 800eddc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800edde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ede0:	f7f1 ffb0 	bl	8000d44 <__aeabi_fmul>
 800ede4:	4603      	mov	r3, r0
 800ede6:	4619      	mov	r1, r3
 800ede8:	4620      	mov	r0, r4
 800edea:	f7f1 fea1 	bl	8000b30 <__aeabi_fsub>
 800edee:	4603      	mov	r3, r0
 800edf0:	461c      	mov	r4, r3
 800edf2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800edf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edf6:	f7f1 ffa5 	bl	8000d44 <__aeabi_fmul>
 800edfa:	4603      	mov	r3, r0
 800edfc:	4619      	mov	r1, r3
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7f1 fe96 	bl	8000b30 <__aeabi_fsub>
 800ee04:	4603      	mov	r3, r0
 800ee06:	66fb      	str	r3, [r7, #108]	; 0x6c
	S2_3=- S2_3*(Kt23 - 1) - Kt21*S1_3 - Kt22*S3_3 - Kt22*S4_3;
 800ee08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee0a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ee0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee12:	6a38      	ldr	r0, [r7, #32]
 800ee14:	f7f1 fe8c 	bl	8000b30 <__aeabi_fsub>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f7f1 ff91 	bl	8000d44 <__aeabi_fmul>
 800ee22:	4603      	mov	r3, r0
 800ee24:	461c      	mov	r4, r3
 800ee26:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ee28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee2a:	f7f1 ff8b 	bl	8000d44 <__aeabi_fmul>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4619      	mov	r1, r3
 800ee32:	4620      	mov	r0, r4
 800ee34:	f7f1 fe7c 	bl	8000b30 <__aeabi_fsub>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	461c      	mov	r4, r3
 800ee3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee40:	f7f1 ff80 	bl	8000d44 <__aeabi_fmul>
 800ee44:	4603      	mov	r3, r0
 800ee46:	4619      	mov	r1, r3
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f7f1 fe71 	bl	8000b30 <__aeabi_fsub>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	461c      	mov	r4, r3
 800ee52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee56:	f7f1 ff75 	bl	8000d44 <__aeabi_fmul>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f7f1 fe66 	bl	8000b30 <__aeabi_fsub>
 800ee64:	4603      	mov	r3, r0
 800ee66:	66bb      	str	r3, [r7, #104]	; 0x68
	S2_4=- S2_4*(Kt23 - 1) - Kt21*S1_4 - Kt22*S3_4 - Kt22*S4_4;
 800ee68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee6a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ee6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee72:	6a38      	ldr	r0, [r7, #32]
 800ee74:	f7f1 fe5c 	bl	8000b30 <__aeabi_fsub>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f7f1 ff61 	bl	8000d44 <__aeabi_fmul>
 800ee82:	4603      	mov	r3, r0
 800ee84:	461c      	mov	r4, r3
 800ee86:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ee88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee8a:	f7f1 ff5b 	bl	8000d44 <__aeabi_fmul>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4619      	mov	r1, r3
 800ee92:	4620      	mov	r0, r4
 800ee94:	f7f1 fe4c 	bl	8000b30 <__aeabi_fsub>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	461c      	mov	r4, r3
 800ee9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ee9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea0:	f7f1 ff50 	bl	8000d44 <__aeabi_fmul>
 800eea4:	4603      	mov	r3, r0
 800eea6:	4619      	mov	r1, r3
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f7f1 fe41 	bl	8000b30 <__aeabi_fsub>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461c      	mov	r4, r3
 800eeb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeb6:	f7f1 ff45 	bl	8000d44 <__aeabi_fmul>
 800eeba:	4603      	mov	r3, r0
 800eebc:	4619      	mov	r1, r3
 800eebe:	4620      	mov	r0, r4
 800eec0:	f7f1 fe36 	bl	8000b30 <__aeabi_fsub>
 800eec4:	4603      	mov	r3, r0
 800eec6:	667b      	str	r3, [r7, #100]	; 0x64
	S3_1=- S3_1*(Kt32 - 1) - Kt31*S1_1 - Kt33*S2_1 - Kt32*S4_1;
 800eec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800eece:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eed2:	69b8      	ldr	r0, [r7, #24]
 800eed4:	f7f1 fe2c 	bl	8000b30 <__aeabi_fsub>
 800eed8:	4603      	mov	r3, r0
 800eeda:	4619      	mov	r1, r3
 800eedc:	4620      	mov	r0, r4
 800eede:	f7f1 ff31 	bl	8000d44 <__aeabi_fmul>
 800eee2:	4603      	mov	r3, r0
 800eee4:	461c      	mov	r4, r3
 800eee6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800eeea:	69f8      	ldr	r0, [r7, #28]
 800eeec:	f7f1 ff2a 	bl	8000d44 <__aeabi_fmul>
 800eef0:	4603      	mov	r3, r0
 800eef2:	4619      	mov	r1, r3
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7f1 fe1b 	bl	8000b30 <__aeabi_fsub>
 800eefa:	4603      	mov	r3, r0
 800eefc:	461c      	mov	r4, r3
 800eefe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef00:	6978      	ldr	r0, [r7, #20]
 800ef02:	f7f1 ff1f 	bl	8000d44 <__aeabi_fmul>
 800ef06:	4603      	mov	r3, r0
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f7f1 fe10 	bl	8000b30 <__aeabi_fsub>
 800ef10:	4603      	mov	r3, r0
 800ef12:	461c      	mov	r4, r3
 800ef14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef16:	69b8      	ldr	r0, [r7, #24]
 800ef18:	f7f1 ff14 	bl	8000d44 <__aeabi_fmul>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	4619      	mov	r1, r3
 800ef20:	4620      	mov	r0, r4
 800ef22:	f7f1 fe05 	bl	8000b30 <__aeabi_fsub>
 800ef26:	4603      	mov	r3, r0
 800ef28:	663b      	str	r3, [r7, #96]	; 0x60
	S3_2=- S3_2*(Kt32 - 1) - Kt31*S1_2 - Kt33*S2_2 - Kt32*S4_2;
 800ef2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef2c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ef30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ef34:	69b8      	ldr	r0, [r7, #24]
 800ef36:	f7f1 fdfb 	bl	8000b30 <__aeabi_fsub>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7f1 ff00 	bl	8000d44 <__aeabi_fmul>
 800ef44:	4603      	mov	r3, r0
 800ef46:	461c      	mov	r4, r3
 800ef48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ef4a:	69f8      	ldr	r0, [r7, #28]
 800ef4c:	f7f1 fefa 	bl	8000d44 <__aeabi_fmul>
 800ef50:	4603      	mov	r3, r0
 800ef52:	4619      	mov	r1, r3
 800ef54:	4620      	mov	r0, r4
 800ef56:	f7f1 fdeb 	bl	8000b30 <__aeabi_fsub>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	461c      	mov	r4, r3
 800ef5e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ef60:	6978      	ldr	r0, [r7, #20]
 800ef62:	f7f1 feef 	bl	8000d44 <__aeabi_fmul>
 800ef66:	4603      	mov	r3, r0
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7f1 fde0 	bl	8000b30 <__aeabi_fsub>
 800ef70:	4603      	mov	r3, r0
 800ef72:	461c      	mov	r4, r3
 800ef74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ef76:	69b8      	ldr	r0, [r7, #24]
 800ef78:	f7f1 fee4 	bl	8000d44 <__aeabi_fmul>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7f1 fdd5 	bl	8000b30 <__aeabi_fsub>
 800ef86:	4603      	mov	r3, r0
 800ef88:	65fb      	str	r3, [r7, #92]	; 0x5c
	S3_3=- S3_3*(Kt32 - 1) - Kt31*S1_3 - Kt33*S2_3 - Kt32*S4_3;
 800ef8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef8c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ef90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ef94:	69b8      	ldr	r0, [r7, #24]
 800ef96:	f7f1 fdcb 	bl	8000b30 <__aeabi_fsub>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7f1 fed0 	bl	8000d44 <__aeabi_fmul>
 800efa4:	4603      	mov	r3, r0
 800efa6:	461c      	mov	r4, r3
 800efa8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800efaa:	69f8      	ldr	r0, [r7, #28]
 800efac:	f7f1 feca 	bl	8000d44 <__aeabi_fmul>
 800efb0:	4603      	mov	r3, r0
 800efb2:	4619      	mov	r1, r3
 800efb4:	4620      	mov	r0, r4
 800efb6:	f7f1 fdbb 	bl	8000b30 <__aeabi_fsub>
 800efba:	4603      	mov	r3, r0
 800efbc:	461c      	mov	r4, r3
 800efbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800efc0:	6978      	ldr	r0, [r7, #20]
 800efc2:	f7f1 febf 	bl	8000d44 <__aeabi_fmul>
 800efc6:	4603      	mov	r3, r0
 800efc8:	4619      	mov	r1, r3
 800efca:	4620      	mov	r0, r4
 800efcc:	f7f1 fdb0 	bl	8000b30 <__aeabi_fsub>
 800efd0:	4603      	mov	r3, r0
 800efd2:	461c      	mov	r4, r3
 800efd4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800efd6:	69b8      	ldr	r0, [r7, #24]
 800efd8:	f7f1 feb4 	bl	8000d44 <__aeabi_fmul>
 800efdc:	4603      	mov	r3, r0
 800efde:	4619      	mov	r1, r3
 800efe0:	4620      	mov	r0, r4
 800efe2:	f7f1 fda5 	bl	8000b30 <__aeabi_fsub>
 800efe6:	4603      	mov	r3, r0
 800efe8:	65bb      	str	r3, [r7, #88]	; 0x58
	S3_4=- S3_4*(Kt32 - 1) - Kt31*S1_4 - Kt33*S2_4 - Kt32*S4_4;
 800efea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efec:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800eff0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eff4:	69b8      	ldr	r0, [r7, #24]
 800eff6:	f7f1 fd9b 	bl	8000b30 <__aeabi_fsub>
 800effa:	4603      	mov	r3, r0
 800effc:	4619      	mov	r1, r3
 800effe:	4620      	mov	r0, r4
 800f000:	f7f1 fea0 	bl	8000d44 <__aeabi_fmul>
 800f004:	4603      	mov	r3, r0
 800f006:	461c      	mov	r4, r3
 800f008:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f00a:	69f8      	ldr	r0, [r7, #28]
 800f00c:	f7f1 fe9a 	bl	8000d44 <__aeabi_fmul>
 800f010:	4603      	mov	r3, r0
 800f012:	4619      	mov	r1, r3
 800f014:	4620      	mov	r0, r4
 800f016:	f7f1 fd8b 	bl	8000b30 <__aeabi_fsub>
 800f01a:	4603      	mov	r3, r0
 800f01c:	461c      	mov	r4, r3
 800f01e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f020:	6978      	ldr	r0, [r7, #20]
 800f022:	f7f1 fe8f 	bl	8000d44 <__aeabi_fmul>
 800f026:	4603      	mov	r3, r0
 800f028:	4619      	mov	r1, r3
 800f02a:	4620      	mov	r0, r4
 800f02c:	f7f1 fd80 	bl	8000b30 <__aeabi_fsub>
 800f030:	4603      	mov	r3, r0
 800f032:	461c      	mov	r4, r3
 800f034:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f036:	69b8      	ldr	r0, [r7, #24]
 800f038:	f7f1 fe84 	bl	8000d44 <__aeabi_fmul>
 800f03c:	4603      	mov	r3, r0
 800f03e:	4619      	mov	r1, r3
 800f040:	4620      	mov	r0, r4
 800f042:	f7f1 fd75 	bl	8000b30 <__aeabi_fsub>
 800f046:	4603      	mov	r3, r0
 800f048:	657b      	str	r3, [r7, #84]	; 0x54
	S4_1=- S4_1*(Kt42 - 1) - Kt41*S1_1 - Kt43*S2_1 - Kt42*S3_1;
 800f04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f050:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7f1 fd6b 	bl	8000b30 <__aeabi_fsub>
 800f05a:	4603      	mov	r3, r0
 800f05c:	4619      	mov	r1, r3
 800f05e:	4620      	mov	r0, r4
 800f060:	f7f1 fe70 	bl	8000d44 <__aeabi_fmul>
 800f064:	4603      	mov	r3, r0
 800f066:	461c      	mov	r4, r3
 800f068:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f06c:	6938      	ldr	r0, [r7, #16]
 800f06e:	f7f1 fe69 	bl	8000d44 <__aeabi_fmul>
 800f072:	4603      	mov	r3, r0
 800f074:	4619      	mov	r1, r3
 800f076:	4620      	mov	r0, r4
 800f078:	f7f1 fd5a 	bl	8000b30 <__aeabi_fsub>
 800f07c:	4603      	mov	r3, r0
 800f07e:	461c      	mov	r4, r3
 800f080:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f082:	68b8      	ldr	r0, [r7, #8]
 800f084:	f7f1 fe5e 	bl	8000d44 <__aeabi_fmul>
 800f088:	4603      	mov	r3, r0
 800f08a:	4619      	mov	r1, r3
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7f1 fd4f 	bl	8000b30 <__aeabi_fsub>
 800f092:	4603      	mov	r3, r0
 800f094:	461c      	mov	r4, r3
 800f096:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f7f1 fe53 	bl	8000d44 <__aeabi_fmul>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f7f1 fd44 	bl	8000b30 <__aeabi_fsub>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	653b      	str	r3, [r7, #80]	; 0x50
	S4_2=- S4_2*(Kt42 - 1) - Kt41*S1_2 - Kt43*S2_2 - Kt42*S3_2;
 800f0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0ae:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f0b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7f1 fd3a 	bl	8000b30 <__aeabi_fsub>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f7f1 fe3f 	bl	8000d44 <__aeabi_fmul>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	461c      	mov	r4, r3
 800f0ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0cc:	6938      	ldr	r0, [r7, #16]
 800f0ce:	f7f1 fe39 	bl	8000d44 <__aeabi_fmul>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f7f1 fd2a 	bl	8000b30 <__aeabi_fsub>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	461c      	mov	r4, r3
 800f0e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f0e2:	68b8      	ldr	r0, [r7, #8]
 800f0e4:	f7f1 fe2e 	bl	8000d44 <__aeabi_fmul>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7f1 fd1f 	bl	8000b30 <__aeabi_fsub>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	461c      	mov	r4, r3
 800f0f6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f7f1 fe23 	bl	8000d44 <__aeabi_fmul>
 800f0fe:	4603      	mov	r3, r0
 800f100:	4619      	mov	r1, r3
 800f102:	4620      	mov	r0, r4
 800f104:	f7f1 fd14 	bl	8000b30 <__aeabi_fsub>
 800f108:	4603      	mov	r3, r0
 800f10a:	64fb      	str	r3, [r7, #76]	; 0x4c
	S4_3=- S4_3*(Kt42 - 1) - Kt41*S1_3 - Kt43*S2_3 - Kt42*S3_3;
 800f10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f10e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f112:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7f1 fd0a 	bl	8000b30 <__aeabi_fsub>
 800f11c:	4603      	mov	r3, r0
 800f11e:	4619      	mov	r1, r3
 800f120:	4620      	mov	r0, r4
 800f122:	f7f1 fe0f 	bl	8000d44 <__aeabi_fmul>
 800f126:	4603      	mov	r3, r0
 800f128:	461c      	mov	r4, r3
 800f12a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f12c:	6938      	ldr	r0, [r7, #16]
 800f12e:	f7f1 fe09 	bl	8000d44 <__aeabi_fmul>
 800f132:	4603      	mov	r3, r0
 800f134:	4619      	mov	r1, r3
 800f136:	4620      	mov	r0, r4
 800f138:	f7f1 fcfa 	bl	8000b30 <__aeabi_fsub>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461c      	mov	r4, r3
 800f140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f142:	68b8      	ldr	r0, [r7, #8]
 800f144:	f7f1 fdfe 	bl	8000d44 <__aeabi_fmul>
 800f148:	4603      	mov	r3, r0
 800f14a:	4619      	mov	r1, r3
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7f1 fcef 	bl	8000b30 <__aeabi_fsub>
 800f152:	4603      	mov	r3, r0
 800f154:	461c      	mov	r4, r3
 800f156:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f7f1 fdf3 	bl	8000d44 <__aeabi_fmul>
 800f15e:	4603      	mov	r3, r0
 800f160:	4619      	mov	r1, r3
 800f162:	4620      	mov	r0, r4
 800f164:	f7f1 fce4 	bl	8000b30 <__aeabi_fsub>
 800f168:	4603      	mov	r3, r0
 800f16a:	64bb      	str	r3, [r7, #72]	; 0x48
	S4_4=- S4_4*(Kt42 - 1) - Kt41*S1_4 - Kt43*S2_4 - Kt42*S3_4;
 800f16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f16e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800f172:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f7f1 fcda 	bl	8000b30 <__aeabi_fsub>
 800f17c:	4603      	mov	r3, r0
 800f17e:	4619      	mov	r1, r3
 800f180:	4620      	mov	r0, r4
 800f182:	f7f1 fddf 	bl	8000d44 <__aeabi_fmul>
 800f186:	4603      	mov	r3, r0
 800f188:	461c      	mov	r4, r3
 800f18a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f18c:	6938      	ldr	r0, [r7, #16]
 800f18e:	f7f1 fdd9 	bl	8000d44 <__aeabi_fmul>
 800f192:	4603      	mov	r3, r0
 800f194:	4619      	mov	r1, r3
 800f196:	4620      	mov	r0, r4
 800f198:	f7f1 fcca 	bl	8000b30 <__aeabi_fsub>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461c      	mov	r4, r3
 800f1a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f1a2:	68b8      	ldr	r0, [r7, #8]
 800f1a4:	f7f1 fdce 	bl	8000d44 <__aeabi_fmul>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7f1 fcbf 	bl	8000b30 <__aeabi_fsub>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	461c      	mov	r4, r3
 800f1b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f7f1 fdc3 	bl	8000d44 <__aeabi_fmul>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7f1 fcb4 	bl	8000b30 <__aeabi_fsub>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	647b      	str	r3, [r7, #68]	; 0x44

	switch (axis) {
 800f1cc:	78fb      	ldrb	r3, [r7, #3]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d002      	beq.n	800f1d8 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2d9c>
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d056      	beq.n	800f284 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2e48>
			 Sp4_4y = S4_4 ;
			break;

	}

}
 800f1d6:	e0ab      	b.n	800f330 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			x = pos;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f1de:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
			vx = vel;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f1e8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			apx = a;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f1f2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			bax = b;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f1fc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			 Sp1_1x = S1_1;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f206:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			 Sp1_2x = S1_2;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f20e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			 Sp1_3x = S1_3 ;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f216:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			 Sp1_4x = S1_4 ;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f21e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
			 Sp2_1x = S2_1 ;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f226:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			 Sp2_2x = S2_2;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f22e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			 Sp2_3x = S2_3 ;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f236:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			 Sp2_4x = S2_4 ;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f23e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			 Sp3_1x = S3_1 ;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f246:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
			 Sp3_2x = S3_2 ;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f24e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			 Sp3_3x = S3_3 ;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f256:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			 Sp3_4x = S3_4 ;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f25e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			 Sp4_1x = S4_1;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f266:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			 Sp4_2x = S4_2;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f26e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			 Sp4_3x = S4_3 ;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f276:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			 Sp4_4x = S4_4 ;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f27e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			break;
 800f282:	e055      	b.n	800f330 <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis+0x2ef4>
			y = pos;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f28a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			vy = vel;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f294:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
			apy = a;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f29e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
			bay = b;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f2a8:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
			 Sp1_1y = S1_1;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
			 Sp1_2y = S1_2;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f2ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			 Sp1_3y = S1_3 ;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f2c2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
			 Sp1_4y = S1_4 ;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f2ca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			 Sp2_1y = S2_1 ;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f2d2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			 Sp2_2y = S2_2;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f2da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
			 Sp2_3y = S2_3 ;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f2e2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			 Sp2_4y = S2_4 ;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f2ea:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			 Sp3_1y = S3_1 ;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f2f2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			 Sp3_2y = S3_2 ;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			 Sp3_3y = S3_3 ;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f302:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			 Sp3_4y = S3_4 ;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f30a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			 Sp4_1y = S4_1;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f312:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			 Sp4_2y = S4_2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f31a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			 Sp4_3y = S4_3 ;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f322:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			 Sp4_4y = S4_4 ;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f32a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
			break;
 800f32e:	bf00      	nop
}
 800f330:	bf00      	nop
 800f332:	37a0      	adds	r7, #160	; 0xa0
 800f334:	46bd      	mov	sp, r7
 800f336:	bdb0      	pop	{r4, r5, r7, pc}

0800f338 <_ZN15Kalman_Filtresi7EKF_PosEv>:

void Kalman_Filtresi::EKF_Pos() {
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]

	if(pos_ekf_counter == POS_EKF_RATE) { //50 Hz
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	2b04      	cmp	r3, #4
 800f346:	d146      	bne.n	800f3d6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x9e>
		accx = acc_pos_x;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		accy = acc_pos_y;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		acc_pos_x_med = 0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f04f 0200 	mov.w	r2, #0
 800f366:	601a      	str	r2, [r3, #0]
		pos_ekf_counter = 0;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	605a      	str	r2, [r3, #4]
		gps_ekf_counter++;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	609a      	str	r2, [r3, #8]

		if(gps_fixed) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d01a      	beq.n	800f3b8 <_ZN15Kalman_Filtresi7EKF_PosEv+0x80>

			if(	gps_ekf_counter >= 10) {	//5 Hz
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	2b09      	cmp	r3, #9
 800f388:	d90e      	bls.n	800f3a8 <_ZN15Kalman_Filtresi7EKF_PosEv+0x70>
				NED2Body();
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 ff9c 	bl	80102c8 <_ZN15Kalman_Filtresi8NED2BodyEv>

				gps_ekf_counter = 0;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	609a      	str	r2, [r3, #8]
				Qgps = 4.0;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800f39c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 80;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a0f      	ldr	r2, [pc, #60]	; (800f3e0 <_ZN15Kalman_Filtresi7EKF_PosEv+0xa8>)
 800f3a4:	60da      	str	r2, [r3, #12]
 800f3a6:	e00e      	b.n	800f3c6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

			else {
				Qgps = 1.0e9;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a0e      	ldr	r2, [pc, #56]	; (800f3e4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f3ac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a0c      	ldr	r2, [pc, #48]	; (800f3e4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f3b4:	60da      	str	r2, [r3, #12]
 800f3b6:	e006      	b.n	800f3c6 <_ZN15Kalman_Filtresi7EKF_PosEv+0x8e>
			}

		}

		else {
				Qgps = 1.0e9;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a0a      	ldr	r2, [pc, #40]	; (800f3e4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f3bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
				Qgps_v = 1.0e9;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a08      	ldr	r2, [pc, #32]	; (800f3e4 <_ZN15Kalman_Filtresi7EKF_PosEv+0xac>)
 800f3c4:	60da      	str	r2, [r3, #12]
					}

		PredictUpdatePos(x_axis);
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7fd f837 	bl	800c43c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>
		PredictUpdatePos(y_axis);
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7fd f833 	bl	800c43c <_ZN15Kalman_Filtresi16PredictUpdatePosE8pos_axis>


	}


}
 800f3d6:	bf00      	nop
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	42a00000 	.word	0x42a00000
 800f3e4:	4e6e6b28 	.word	0x4e6e6b28

0800f3e8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800f3e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3ec:	b09e      	sub	sp, #120	; 0x78
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float accY = acc[1];
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800f404:	63bb      	str	r3, [r7, #56]	; 0x38
	  float accZ = acc[2];
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800f40c:	637b      	str	r3, [r7, #52]	; 0x34

	  float gyroX = gyro[0];
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f414:	633b      	str	r3, [r7, #48]	; 0x30
	  float gyroY = gyro[1];
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800f41c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float gyroZ = gyro[2];
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800f426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f428:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f42a:	f7f1 fc8b 	bl	8000d44 <__aeabi_fmul>
 800f42e:	4603      	mov	r3, r0
 800f430:	461c      	mov	r4, r3
 800f432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f436:	f7f1 fc85 	bl	8000d44 <__aeabi_fmul>
 800f43a:	4603      	mov	r3, r0
 800f43c:	4619      	mov	r1, r3
 800f43e:	4620      	mov	r0, r4
 800f440:	f7f1 fb78 	bl	8000b34 <__addsf3>
 800f444:	4603      	mov	r3, r0
 800f446:	461c      	mov	r4, r3
 800f448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f44a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f44c:	f7f1 fc7a 	bl	8000d44 <__aeabi_fmul>
 800f450:	4603      	mov	r3, r0
 800f452:	4619      	mov	r1, r3
 800f454:	4620      	mov	r0, r4
 800f456:	f7f1 fb6d 	bl	8000b34 <__addsf3>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f3 fc19 	bl	8002c94 <_ZSt4sqrtf>
 800f462:	6278      	str	r0, [r7, #36]	; 0x24

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800f464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f468:	f7f1 fd20 	bl	8000eac <__aeabi_fdiv>
 800f46c:	4603      	mov	r3, r0
 800f46e:	4618      	mov	r0, r3
 800f470:	f7f3 fbea 	bl	8002c48 <_ZSt4asinf>
 800f474:	4602      	mov	r2, r0
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800f47c:	4619      	mov	r1, r3
 800f47e:	4610      	mov	r0, r2
 800f480:	f7f1 fc60 	bl	8000d44 <__aeabi_fmul>
 800f484:	4603      	mov	r3, r0
 800f486:	461a      	mov	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f48e:	4619      	mov	r1, r3
 800f490:	4610      	mov	r0, r2
 800f492:	f7f1 fb4f 	bl	8000b34 <__addsf3>
 800f496:	4603      	mov	r3, r0
 800f498:	461a      	mov	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800f4a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4a4:	f7f1 fd02 	bl	8000eac <__aeabi_fdiv>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f3 fbcc 	bl	8002c48 <_ZSt4asinf>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	f7f1 fc42 	bl	8000d44 <__aeabi_fmul>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	f7f1 fb31 	bl	8000b34 <__addsf3>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;
    //ANGLE PREDICTION
	switch(euler_angle) {
 800f4dc:	78fb      	ldrb	r3, [r7, #3]
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	f000 809a 	beq.w	800f618 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x230>
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	f300 80fb 	bgt.w	800f6e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x10c>
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d049      	beq.n	800f586 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x19e>
 800f4f2:	e0f5      	b.n	800f6e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
		case ROLL:
			angle_ekf = roll_ekf;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800f4fa:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = roll_rate;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a1b      	ldr	r3, [r3, #32]
 800f500:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = roll_bias;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f508:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = roll_acc;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800f510:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroX;
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a50      	ldr	r2, [pc, #320]	; (800f65c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f51a:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f522:	f083 0301 	eor.w	r3, r3, #1
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x14e>
				Qa = 3;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a4c      	ldr	r2, [pc, #304]	; (800f660 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f530:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f534:	e003      	b.n	800f53e <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x156>

			}

			else {
				Qa = 5e6;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a4a      	ldr	r2, [pc, #296]	; (800f664 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800f53a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a49      	ldr	r2, [pc, #292]	; (800f668 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800f542:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a44      	ldr	r2, [pc, #272]	; (800f65c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f54a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_roll;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f552:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_roll;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f558:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_roll;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f55e:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_roll;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f564:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_roll;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f56a:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_roll;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f570:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_roll;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f576:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_roll;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f57c:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_roll;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f582:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f584:	e0ac      	b.n	800f6e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case PITCH:
			angle_ekf = pitch_ekf;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800f58c:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = pitch_rate;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f592:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = pitch_bias;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f59a:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = pitch_acc;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800f5a2:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroY;
 800f5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a6:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 1e-2;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a2c      	ldr	r2, [pc, #176]	; (800f65c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f5ac:	651a      	str	r2, [r3, #80]	; 0x50
			if(!armed) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f5b4:	f083 0301 	eor.w	r3, r3, #1
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d004      	beq.n	800f5c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e0>
				Qa = 3;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a27      	ldr	r2, [pc, #156]	; (800f660 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f5c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f5c6:	e003      	b.n	800f5d0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1e8>

			}

			else {
				Qa = 5e6;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a26      	ldr	r2, [pc, #152]	; (800f664 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x27c>)
 800f5cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a25      	ldr	r2, [pc, #148]	; (800f668 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x280>)
 800f5d4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a20      	ldr	r2, [pc, #128]	; (800f65c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x274>)
 800f5dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_pitch;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e4:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_pitch;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_pitch;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5f0:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_pitch;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5f6:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_pitch;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5fc:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_pitch;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f602:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_pitch;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f608:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_pitch;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f60e:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_pitch;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f614:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f616:	e063      	b.n	800f6e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case YAW:
			angle_ekf = yaw_ekf;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800f61e:	677b      	str	r3, [r7, #116]	; 0x74
			angle_rate = yaw_rate;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f624:	673b      	str	r3, [r7, #112]	; 0x70
			angle_bias = yaw_bias;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f62c:	66fb      	str	r3, [r7, #108]	; 0x6c
			angle_acc = yaw_acc;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f634:	66bb      	str	r3, [r7, #104]	; 0x68
			gyro = gyroZ;
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	667b      	str	r3, [r7, #100]	; 0x64
			sa = 5e2;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a0b      	ldr	r2, [pc, #44]	; (800f66c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x284>)
 800f63e:	651a      	str	r2, [r3, #80]	; 0x50

			if(!armed) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800f646:	f083 0301 	eor.w	r3, r3, #1
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00f      	beq.n	800f670 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x288>
				Qa = 3;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a03      	ldr	r2, [pc, #12]	; (800f660 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x278>)
 800f654:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800f658:	e00e      	b.n	800f678 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x290>
 800f65a:	bf00      	nop
 800f65c:	3c23d70a 	.word	0x3c23d70a
 800f660:	40400000 	.word	0x40400000
 800f664:	4a989680 	.word	0x4a989680
 800f668:	41200000 	.word	0x41200000
 800f66c:	43fa0000 	.word	0x43fa0000

			}

			else {
				Qa = 5e8;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a18      	ldr	r2, [pc, #96]	; (800f6d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2ec>)
 800f674:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			}
			Qg = 1e1;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a17      	ldr	r2, [pc, #92]	; (800f6d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f0>)
 800f67c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
			sb = 1e-4;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a16      	ldr	r2, [pc, #88]	; (800f6dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f4>)
 800f684:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

			S11_angle = S11_yaw;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68c:	663b      	str	r3, [r7, #96]	; 0x60
			S12_angle = S12_yaw;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f694:	65fb      	str	r3, [r7, #92]	; 0x5c
			S13_angle = S13_yaw;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f69c:	65bb      	str	r3, [r7, #88]	; 0x58
			S21_angle = S21_yaw;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6a4:	657b      	str	r3, [r7, #84]	; 0x54
			S22_angle = S22_yaw;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6ac:	653b      	str	r3, [r7, #80]	; 0x50
			S23_angle = S23_yaw;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
			S31_angle = S31_yaw;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6bc:	64bb      	str	r3, [r7, #72]	; 0x48
			S32_angle = S32_yaw;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f6c4:	647b      	str	r3, [r7, #68]	; 0x44
			S33_angle = S33_yaw;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f6cc:	643b      	str	r3, [r7, #64]	; 0x40
			break;
 800f6ce:	bf00      	nop
 800f6d0:	e006      	b.n	800f6e0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
 800f6d2:	bf00      	nop
 800f6d4:	4dee6b28 	.word	0x4dee6b28
 800f6d8:	41200000 	.word	0x41200000
 800f6dc:	38d1b717 	.word	0x38d1b717

	}

    angle_ekf = (angle_ekf) + st*(angle_rate) - st*angle_bias;
 800f6e0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f6e2:	f7f0 fea1 	bl	8000428 <__aeabi_f2d>
 800f6e6:	4680      	mov	r8, r0
 800f6e8:	4689      	mov	r9, r1
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f6f0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f6f2:	f7f0 fe99 	bl	8000428 <__aeabi_f2d>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	f7f0 feeb 	bl	80004d8 <__aeabi_dmul>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4640      	mov	r0, r8
 800f708:	4649      	mov	r1, r9
 800f70a:	f7f0 fd2f 	bl	800016c <__adddf3>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4690      	mov	r8, r2
 800f714:	4699      	mov	r9, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	e9d3 455e 	ldrd	r4, r5, [r3, #376]	; 0x178
 800f71c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f71e:	f7f0 fe83 	bl	8000428 <__aeabi_f2d>
 800f722:	4602      	mov	r2, r0
 800f724:	460b      	mov	r3, r1
 800f726:	4620      	mov	r0, r4
 800f728:	4629      	mov	r1, r5
 800f72a:	f7f0 fed5 	bl	80004d8 <__aeabi_dmul>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 fd17 	bl	8000168 <__aeabi_dsub>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4610      	mov	r0, r2
 800f740:	4619      	mov	r1, r3
 800f742:	f7f1 f9a1 	bl	8000a88 <__aeabi_d2f>
 800f746:	4603      	mov	r3, r0
 800f748:	677b      	str	r3, [r7, #116]	; 0x74

    S11_angle = S11_angle + sa + S31_angle*st - st*st*(S12_angle - S22_angle*st + S32_angle*st)/st + (st*st*(S13_angle - S23_angle*st + S33_angle*st))/st;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f74e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f750:	4618      	mov	r0, r3
 800f752:	f7f1 f9ef 	bl	8000b34 <__addsf3>
 800f756:	4603      	mov	r3, r0
 800f758:	4618      	mov	r0, r3
 800f75a:	f7f0 fe65 	bl	8000428 <__aeabi_f2d>
 800f75e:	4604      	mov	r4, r0
 800f760:	460d      	mov	r5, r1
 800f762:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f764:	f7f0 fe60 	bl	8000428 <__aeabi_f2d>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f76e:	f7f0 feb3 	bl	80004d8 <__aeabi_dmul>
 800f772:	4602      	mov	r2, r0
 800f774:	460b      	mov	r3, r1
 800f776:	4620      	mov	r0, r4
 800f778:	4629      	mov	r1, r5
 800f77a:	f7f0 fcf7 	bl	800016c <__adddf3>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	4690      	mov	r8, r2
 800f784:	4699      	mov	r9, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f792:	f7f0 fea1 	bl	80004d8 <__aeabi_dmul>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	4692      	mov	sl, r2
 800f79c:	469b      	mov	fp, r3
 800f79e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f7a0:	f7f0 fe42 	bl	8000428 <__aeabi_f2d>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f7aa:	f7f0 fe3d 	bl	8000428 <__aeabi_f2d>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f7b4:	f7f0 fe90 	bl	80004d8 <__aeabi_dmul>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4629      	mov	r1, r5
 800f7c0:	f7f0 fcd2 	bl	8000168 <__aeabi_dsub>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	4614      	mov	r4, r2
 800f7ca:	461d      	mov	r5, r3
 800f7cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f7ce:	f7f0 fe2b 	bl	8000428 <__aeabi_f2d>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f7d8:	f7f0 fe7e 	bl	80004d8 <__aeabi_dmul>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	f7f0 fcc2 	bl	800016c <__adddf3>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4650      	mov	r0, sl
 800f7ee:	4659      	mov	r1, fp
 800f7f0:	f7f0 fe72 	bl	80004d8 <__aeabi_dmul>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f802:	f7f0 ff93 	bl	800072c <__aeabi_ddiv>
 800f806:	4602      	mov	r2, r0
 800f808:	460b      	mov	r3, r1
 800f80a:	4640      	mov	r0, r8
 800f80c:	4649      	mov	r1, r9
 800f80e:	f7f0 fcab 	bl	8000168 <__aeabi_dsub>
 800f812:	4602      	mov	r2, r0
 800f814:	460b      	mov	r3, r1
 800f816:	4690      	mov	r8, r2
 800f818:	4699      	mov	r9, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f826:	f7f0 fe57 	bl	80004d8 <__aeabi_dmul>
 800f82a:	4602      	mov	r2, r0
 800f82c:	460b      	mov	r3, r1
 800f82e:	4692      	mov	sl, r2
 800f830:	469b      	mov	fp, r3
 800f832:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f834:	f7f0 fdf8 	bl	8000428 <__aeabi_f2d>
 800f838:	4604      	mov	r4, r0
 800f83a:	460d      	mov	r5, r1
 800f83c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f83e:	f7f0 fdf3 	bl	8000428 <__aeabi_f2d>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f848:	f7f0 fe46 	bl	80004d8 <__aeabi_dmul>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	4620      	mov	r0, r4
 800f852:	4629      	mov	r1, r5
 800f854:	f7f0 fc88 	bl	8000168 <__aeabi_dsub>
 800f858:	4602      	mov	r2, r0
 800f85a:	460b      	mov	r3, r1
 800f85c:	4614      	mov	r4, r2
 800f85e:	461d      	mov	r5, r3
 800f860:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f862:	f7f0 fde1 	bl	8000428 <__aeabi_f2d>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f86c:	f7f0 fe34 	bl	80004d8 <__aeabi_dmul>
 800f870:	4602      	mov	r2, r0
 800f872:	460b      	mov	r3, r1
 800f874:	4620      	mov	r0, r4
 800f876:	4629      	mov	r1, r5
 800f878:	f7f0 fc78 	bl	800016c <__adddf3>
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	4650      	mov	r0, sl
 800f882:	4659      	mov	r1, fp
 800f884:	f7f0 fe28 	bl	80004d8 <__aeabi_dmul>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4610      	mov	r0, r2
 800f88e:	4619      	mov	r1, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f896:	f7f0 ff49 	bl	800072c <__aeabi_ddiv>
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	4640      	mov	r0, r8
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	f7f0 fc63 	bl	800016c <__adddf3>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	f7f1 f8eb 	bl	8000a88 <__aeabi_d2f>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	663b      	str	r3, [r7, #96]	; 0x60
    S12_angle = S12_angle - S22_angle*st + S32_angle*st;
 800f8b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f8b8:	f7f0 fdb6 	bl	8000428 <__aeabi_f2d>
 800f8bc:	4604      	mov	r4, r0
 800f8be:	460d      	mov	r5, r1
 800f8c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f8c2:	f7f0 fdb1 	bl	8000428 <__aeabi_f2d>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f8cc:	f7f0 fe04 	bl	80004d8 <__aeabi_dmul>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fc46 	bl	8000168 <__aeabi_dsub>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	4614      	mov	r4, r2
 800f8e2:	461d      	mov	r5, r3
 800f8e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8e6:	f7f0 fd9f 	bl	8000428 <__aeabi_f2d>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f8f0:	f7f0 fdf2 	bl	80004d8 <__aeabi_dmul>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	f7f0 fc36 	bl	800016c <__adddf3>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4610      	mov	r0, r2
 800f906:	4619      	mov	r1, r3
 800f908:	f7f1 f8be 	bl	8000a88 <__aeabi_d2f>
 800f90c:	4603      	mov	r3, r0
 800f90e:	65fb      	str	r3, [r7, #92]	; 0x5c
    S13_angle = S13_angle - S23_angle*st + S33_angle*st;
 800f910:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f912:	f7f0 fd89 	bl	8000428 <__aeabi_f2d>
 800f916:	4604      	mov	r4, r0
 800f918:	460d      	mov	r5, r1
 800f91a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f91c:	f7f0 fd84 	bl	8000428 <__aeabi_f2d>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f926:	f7f0 fdd7 	bl	80004d8 <__aeabi_dmul>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4620      	mov	r0, r4
 800f930:	4629      	mov	r1, r5
 800f932:	f7f0 fc19 	bl	8000168 <__aeabi_dsub>
 800f936:	4602      	mov	r2, r0
 800f938:	460b      	mov	r3, r1
 800f93a:	4614      	mov	r4, r2
 800f93c:	461d      	mov	r5, r3
 800f93e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f940:	f7f0 fd72 	bl	8000428 <__aeabi_f2d>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f94a:	f7f0 fdc5 	bl	80004d8 <__aeabi_dmul>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4620      	mov	r0, r4
 800f954:	4629      	mov	r1, r5
 800f956:	f7f0 fc09 	bl	800016c <__adddf3>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4610      	mov	r0, r2
 800f960:	4619      	mov	r1, r3
 800f962:	f7f1 f891 	bl	8000a88 <__aeabi_d2f>
 800f966:	4603      	mov	r3, r0
 800f968:	65bb      	str	r3, [r7, #88]	; 0x58

    S21_angle = S21_angle - S22_angle*st + S23_angle*(st);
 800f96a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f96c:	f7f0 fd5c 	bl	8000428 <__aeabi_f2d>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f976:	f7f0 fd57 	bl	8000428 <__aeabi_f2d>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f980:	f7f0 fdaa 	bl	80004d8 <__aeabi_dmul>
 800f984:	4602      	mov	r2, r0
 800f986:	460b      	mov	r3, r1
 800f988:	4620      	mov	r0, r4
 800f98a:	4629      	mov	r1, r5
 800f98c:	f7f0 fbec 	bl	8000168 <__aeabi_dsub>
 800f990:	4602      	mov	r2, r0
 800f992:	460b      	mov	r3, r1
 800f994:	4614      	mov	r4, r2
 800f996:	461d      	mov	r5, r3
 800f998:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f99a:	f7f0 fd45 	bl	8000428 <__aeabi_f2d>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f9a4:	f7f0 fd98 	bl	80004d8 <__aeabi_dmul>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	f7f0 fbdc 	bl	800016c <__adddf3>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f7f1 f864 	bl	8000a88 <__aeabi_d2f>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	657b      	str	r3, [r7, #84]	; 0x54
    S22_angle = S22_angle + sb;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f9ce:	f7f1 f8b1 	bl	8000b34 <__addsf3>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	653b      	str	r3, [r7, #80]	; 0x50
    //S23_angle = S23_angle;

    S31_angle = S31_angle - S32_angle*st  + S33_angle*(st);
 800f9d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f9d8:	f7f0 fd26 	bl	8000428 <__aeabi_f2d>
 800f9dc:	4604      	mov	r4, r0
 800f9de:	460d      	mov	r5, r1
 800f9e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9e2:	f7f0 fd21 	bl	8000428 <__aeabi_f2d>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800f9ec:	f7f0 fd74 	bl	80004d8 <__aeabi_dmul>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	f7f0 fbb6 	bl	8000168 <__aeabi_dsub>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	4614      	mov	r4, r2
 800fa02:	461d      	mov	r5, r3
 800fa04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa06:	f7f0 fd0f 	bl	8000428 <__aeabi_f2d>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 800fa10:	f7f0 fd62 	bl	80004d8 <__aeabi_dmul>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4620      	mov	r0, r4
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f7f0 fba6 	bl	800016c <__adddf3>
 800fa20:	4602      	mov	r2, r0
 800fa22:	460b      	mov	r3, r1
 800fa24:	4610      	mov	r0, r2
 800fa26:	4619      	mov	r1, r3
 800fa28:	f7f1 f82e 	bl	8000a88 <__aeabi_d2f>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	64bb      	str	r3, [r7, #72]	; 0x48
    //S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa34:	4619      	mov	r1, r3
 800fa36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa38:	f7f1 f87c 	bl	8000b34 <__addsf3>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	643b      	str	r3, [r7, #64]	; 0x40

    //ANGLE CORRECTION
    float A = (Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4610      	mov	r0, r2
 800fa50:	f7f1 f978 	bl	8000d44 <__aeabi_fmul>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461c      	mov	r4, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fa5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f1 f96f 	bl	8000d44 <__aeabi_fmul>
 800fa66:	4603      	mov	r3, r0
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f7f1 f862 	bl	8000b34 <__addsf3>
 800fa70:	4603      	mov	r3, r0
 800fa72:	461c      	mov	r4, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fa7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f1 f961 	bl	8000d44 <__aeabi_fmul>
 800fa82:	4603      	mov	r3, r0
 800fa84:	4619      	mov	r1, r3
 800fa86:	4620      	mov	r0, r4
 800fa88:	f7f1 f854 	bl	8000b34 <__addsf3>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	461c      	mov	r4, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fa96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7f1 f953 	bl	8000d44 <__aeabi_fmul>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	4619      	mov	r1, r3
 800faa2:	4620      	mov	r0, r4
 800faa4:	f7f1 f846 	bl	8000b34 <__addsf3>
 800faa8:	4603      	mov	r3, r0
 800faaa:	461c      	mov	r4, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f1 f945 	bl	8000d44 <__aeabi_fmul>
 800faba:	4603      	mov	r3, r0
 800fabc:	4619      	mov	r1, r3
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7f1 f838 	bl	8000b34 <__addsf3>
 800fac4:	4603      	mov	r3, r0
 800fac6:	461c      	mov	r4, r3
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800face:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f1 f937 	bl	8000d44 <__aeabi_fmul>
 800fad6:	4603      	mov	r3, r0
 800fad8:	4619      	mov	r1, r3
 800fada:	4620      	mov	r0, r4
 800fadc:	f7f1 f82a 	bl	8000b34 <__addsf3>
 800fae0:	4603      	mov	r3, r0
 800fae2:	461c      	mov	r4, r3
 800fae4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fae6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fae8:	f7f1 f92c 	bl	8000d44 <__aeabi_fmul>
 800faec:	4603      	mov	r3, r0
 800faee:	4619      	mov	r1, r3
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7f1 f81f 	bl	8000b34 <__addsf3>
 800faf6:	4603      	mov	r3, r0
 800faf8:	461c      	mov	r4, r3
 800fafa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fafc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fafe:	f7f1 f921 	bl	8000d44 <__aeabi_fmul>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4619      	mov	r1, r3
 800fb06:	4620      	mov	r0, r4
 800fb08:	f7f1 f812 	bl	8000b30 <__aeabi_fsub>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	461c      	mov	r4, r3
 800fb10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb12:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fb14:	f7f1 f916 	bl	8000d44 <__aeabi_fmul>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f7f1 f809 	bl	8000b34 <__addsf3>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461c      	mov	r4, r3
 800fb26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb2a:	f7f1 f90b 	bl	8000d44 <__aeabi_fmul>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	4619      	mov	r1, r3
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7f0 fffc 	bl	8000b30 <__aeabi_fsub>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461c      	mov	r4, r3
 800fb3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb3e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fb40:	f7f1 f900 	bl	8000d44 <__aeabi_fmul>
 800fb44:	4603      	mov	r3, r0
 800fb46:	4619      	mov	r1, r3
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7f0 fff3 	bl	8000b34 <__addsf3>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	461c      	mov	r4, r3
 800fb52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb54:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fb56:	f7f1 f8f5 	bl	8000d44 <__aeabi_fmul>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7f0 ffe6 	bl	8000b30 <__aeabi_fsub>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461c      	mov	r4, r3
 800fb68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb6a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fb6c:	f7f1 f8ea 	bl	8000d44 <__aeabi_fmul>
 800fb70:	4603      	mov	r3, r0
 800fb72:	4619      	mov	r1, r3
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7f0 ffdd 	bl	8000b34 <__addsf3>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	461c      	mov	r4, r3
 800fb7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb82:	f7f1 f8df 	bl	8000d44 <__aeabi_fmul>
 800fb86:	4603      	mov	r3, r0
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f7f0 ffd0 	bl	8000b30 <__aeabi_fsub>
 800fb90:	4603      	mov	r3, r0
 800fb92:	623b      	str	r3, [r7, #32]
    float Kt11_att = 1 - (Qa*(Qg + S22_angle + S23_angle + S32_angle + S33_angle))/A;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fba0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7f0 ffc6 	bl	8000b34 <__addsf3>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7f0 ffc1 	bl	8000b34 <__addsf3>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7f0 ffbc 	bl	8000b34 <__addsf3>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f0 ffb7 	bl	8000b34 <__addsf3>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f7f1 f8ba 	bl	8000d44 <__aeabi_fmul>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	6a39      	ldr	r1, [r7, #32]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7f1 f969 	bl	8000eac <__aeabi_fdiv>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	4619      	mov	r1, r3
 800fbde:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fbe2:	f7f0 ffa5 	bl	8000b30 <__aeabi_fsub>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	61fb      	str	r3, [r7, #28]
    float Kt12_att = (Qa*(S12_angle + S13_angle))/A;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800fbf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fbf2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fbf4:	f7f0 ff9e 	bl	8000b34 <__addsf3>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7f1 f8a1 	bl	8000d44 <__aeabi_fmul>
 800fc02:	4603      	mov	r3, r0
 800fc04:	6a39      	ldr	r1, [r7, #32]
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7f1 f950 	bl	8000eac <__aeabi_fdiv>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	61bb      	str	r3, [r7, #24]
    float Kt21_att = (Qg*S21_angle + S21_angle*S32_angle - S22_angle*S31_angle + S21_angle*S33_angle - S23_angle*S31_angle)/A;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fc16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7f1 f893 	bl	8000d44 <__aeabi_fmul>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	461c      	mov	r4, r3
 800fc22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fc26:	f7f1 f88d 	bl	8000d44 <__aeabi_fmul>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f7f0 ff80 	bl	8000b34 <__addsf3>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461c      	mov	r4, r3
 800fc38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fc3c:	f7f1 f882 	bl	8000d44 <__aeabi_fmul>
 800fc40:	4603      	mov	r3, r0
 800fc42:	4619      	mov	r1, r3
 800fc44:	4620      	mov	r0, r4
 800fc46:	f7f0 ff73 	bl	8000b30 <__aeabi_fsub>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	461c      	mov	r4, r3
 800fc4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fc52:	f7f1 f877 	bl	8000d44 <__aeabi_fmul>
 800fc56:	4603      	mov	r3, r0
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f7f0 ff6a 	bl	8000b34 <__addsf3>
 800fc60:	4603      	mov	r3, r0
 800fc62:	461c      	mov	r4, r3
 800fc64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc66:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc68:	f7f1 f86c 	bl	8000d44 <__aeabi_fmul>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	4619      	mov	r1, r3
 800fc70:	4620      	mov	r0, r4
 800fc72:	f7f0 ff5d 	bl	8000b30 <__aeabi_fsub>
 800fc76:	4603      	mov	r3, r0
 800fc78:	6a39      	ldr	r1, [r7, #32]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7f1 f916 	bl	8000eac <__aeabi_fdiv>
 800fc80:	4603      	mov	r3, r0
 800fc82:	617b      	str	r3, [r7, #20]
    float Kt22_att = (Qa*S22_angle + Qa*S23_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle)/A;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fc8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f1 f859 	bl	8000d44 <__aeabi_fmul>
 800fc92:	4603      	mov	r3, r0
 800fc94:	461c      	mov	r4, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fc9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7f1 f850 	bl	8000d44 <__aeabi_fmul>
 800fca4:	4603      	mov	r3, r0
 800fca6:	4619      	mov	r1, r3
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f7f0 ff43 	bl	8000b34 <__addsf3>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	461c      	mov	r4, r3
 800fcb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcb4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fcb6:	f7f1 f845 	bl	8000d44 <__aeabi_fmul>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f7f0 ff38 	bl	8000b34 <__addsf3>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	461c      	mov	r4, r3
 800fcc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fccc:	f7f1 f83a 	bl	8000d44 <__aeabi_fmul>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f7f0 ff2b 	bl	8000b30 <__aeabi_fsub>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	461c      	mov	r4, r3
 800fcde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fce0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fce2:	f7f1 f82f 	bl	8000d44 <__aeabi_fmul>
 800fce6:	4603      	mov	r3, r0
 800fce8:	4619      	mov	r1, r3
 800fcea:	4620      	mov	r0, r4
 800fcec:	f7f0 ff22 	bl	8000b34 <__addsf3>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	461c      	mov	r4, r3
 800fcf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcf6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fcf8:	f7f1 f824 	bl	8000d44 <__aeabi_fmul>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	4619      	mov	r1, r3
 800fd00:	4620      	mov	r0, r4
 800fd02:	f7f0 ff15 	bl	8000b30 <__aeabi_fsub>
 800fd06:	4603      	mov	r3, r0
 800fd08:	6a39      	ldr	r1, [r7, #32]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f1 f8ce 	bl	8000eac <__aeabi_fdiv>
 800fd10:	4603      	mov	r3, r0
 800fd12:	613b      	str	r3, [r7, #16]
    float Kt31_att = (Qg*S31_angle - S21_angle*S32_angle + S22_angle*S31_angle - S21_angle*S33_angle + S23_angle*S31_angle)/A;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fd1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7f1 f811 	bl	8000d44 <__aeabi_fmul>
 800fd22:	4603      	mov	r3, r0
 800fd24:	461c      	mov	r4, r3
 800fd26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd2a:	f7f1 f80b 	bl	8000d44 <__aeabi_fmul>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4619      	mov	r1, r3
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7f0 fefc 	bl	8000b30 <__aeabi_fsub>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fd40:	f7f1 f800 	bl	8000d44 <__aeabi_fmul>
 800fd44:	4603      	mov	r3, r0
 800fd46:	4619      	mov	r1, r3
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7f0 fef3 	bl	8000b34 <__addsf3>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	461c      	mov	r4, r3
 800fd52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd56:	f7f0 fff5 	bl	8000d44 <__aeabi_fmul>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7f0 fee6 	bl	8000b30 <__aeabi_fsub>
 800fd64:	4603      	mov	r3, r0
 800fd66:	461c      	mov	r4, r3
 800fd68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd6c:	f7f0 ffea 	bl	8000d44 <__aeabi_fmul>
 800fd70:	4603      	mov	r3, r0
 800fd72:	4619      	mov	r1, r3
 800fd74:	4620      	mov	r0, r4
 800fd76:	f7f0 fedd 	bl	8000b34 <__addsf3>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	6a39      	ldr	r1, [r7, #32]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7f1 f894 	bl	8000eac <__aeabi_fdiv>
 800fd84:	4603      	mov	r3, r0
 800fd86:	60fb      	str	r3, [r7, #12]
    float Kt32_att = (Qa*S32_angle + Qa*S33_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle)/A;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fd8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f0 ffd7 	bl	8000d44 <__aeabi_fmul>
 800fd96:	4603      	mov	r3, r0
 800fd98:	461c      	mov	r4, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fda0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7f0 ffce 	bl	8000d44 <__aeabi_fmul>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	4619      	mov	r1, r3
 800fdac:	4620      	mov	r0, r4
 800fdae:	f7f0 fec1 	bl	8000b34 <__addsf3>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461c      	mov	r4, r3
 800fdb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdb8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fdba:	f7f0 ffc3 	bl	8000d44 <__aeabi_fmul>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7f0 feb6 	bl	8000b34 <__addsf3>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	461c      	mov	r4, r3
 800fdcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fdce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fdd0:	f7f0 ffb8 	bl	8000d44 <__aeabi_fmul>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f7f0 fea9 	bl	8000b30 <__aeabi_fsub>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461c      	mov	r4, r3
 800fde2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fde4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fde6:	f7f0 ffad 	bl	8000d44 <__aeabi_fmul>
 800fdea:	4603      	mov	r3, r0
 800fdec:	4619      	mov	r1, r3
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7f0 fea0 	bl	8000b34 <__addsf3>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	461c      	mov	r4, r3
 800fdf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fdfa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fdfc:	f7f0 ffa2 	bl	8000d44 <__aeabi_fmul>
 800fe00:	4603      	mov	r3, r0
 800fe02:	4619      	mov	r1, r3
 800fe04:	4620      	mov	r0, r4
 800fe06:	f7f0 fe93 	bl	8000b30 <__aeabi_fsub>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6a39      	ldr	r1, [r7, #32]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7f1 f84c 	bl	8000eac <__aeabi_fdiv>
 800fe14:	4603      	mov	r3, r0
 800fe16:	60bb      	str	r3, [r7, #8]

    angle_ekf = (angle_ekf) + Kt11_att*((angle_acc) - (angle_ekf)) - Kt12_att*((angle_bias) - (gyro) + (angle_rate));
 800fe18:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fe1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800fe1c:	f7f0 fe88 	bl	8000b30 <__aeabi_fsub>
 800fe20:	4603      	mov	r3, r0
 800fe22:	69f9      	ldr	r1, [r7, #28]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7f0 ff8d 	bl	8000d44 <__aeabi_fmul>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7f0 fe80 	bl	8000b34 <__addsf3>
 800fe34:	4603      	mov	r3, r0
 800fe36:	461c      	mov	r4, r3
 800fe38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fe3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe3c:	f7f0 fe78 	bl	8000b30 <__aeabi_fsub>
 800fe40:	4603      	mov	r3, r0
 800fe42:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f0 fe75 	bl	8000b34 <__addsf3>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	69b9      	ldr	r1, [r7, #24]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f0 ff78 	bl	8000d44 <__aeabi_fmul>
 800fe54:	4603      	mov	r3, r0
 800fe56:	4619      	mov	r1, r3
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f7f0 fe69 	bl	8000b30 <__aeabi_fsub>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	677b      	str	r3, [r7, #116]	; 0x74


    angle_bias = (angle_bias) + Kt21_att*((angle_acc) - (angle_ekf)) - Kt22_att*((angle_bias) - (gyro) + (angle_rate));
 800fe62:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fe64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800fe66:	f7f0 fe63 	bl	8000b30 <__aeabi_fsub>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	6979      	ldr	r1, [r7, #20]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7f0 ff68 	bl	8000d44 <__aeabi_fmul>
 800fe74:	4603      	mov	r3, r0
 800fe76:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7f0 fe5b 	bl	8000b34 <__addsf3>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	461c      	mov	r4, r3
 800fe82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fe84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe86:	f7f0 fe53 	bl	8000b30 <__aeabi_fsub>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f0 fe50 	bl	8000b34 <__addsf3>
 800fe94:	4603      	mov	r3, r0
 800fe96:	6939      	ldr	r1, [r7, #16]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f0 ff53 	bl	8000d44 <__aeabi_fmul>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4619      	mov	r1, r3
 800fea2:	4620      	mov	r0, r4
 800fea4:	f7f0 fe44 	bl	8000b30 <__aeabi_fsub>
 800fea8:	4603      	mov	r3, r0
 800feaa:	66fb      	str	r3, [r7, #108]	; 0x6c


    angle_rate = (angle_rate) + Kt31_att*((angle_acc) - (angle_ekf)) - Kt32_att*((angle_bias) - (gyro) + (angle_rate));
 800feac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800feae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800feb0:	f7f0 fe3e 	bl	8000b30 <__aeabi_fsub>
 800feb4:	4603      	mov	r3, r0
 800feb6:	68f9      	ldr	r1, [r7, #12]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7f0 ff43 	bl	8000d44 <__aeabi_fmul>
 800febe:	4603      	mov	r3, r0
 800fec0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f0 fe36 	bl	8000b34 <__addsf3>
 800fec8:	4603      	mov	r3, r0
 800feca:	461c      	mov	r4, r3
 800fecc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fece:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fed0:	f7f0 fe2e 	bl	8000b30 <__aeabi_fsub>
 800fed4:	4603      	mov	r3, r0
 800fed6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fed8:	4618      	mov	r0, r3
 800feda:	f7f0 fe2b 	bl	8000b34 <__addsf3>
 800fede:	4603      	mov	r3, r0
 800fee0:	68b9      	ldr	r1, [r7, #8]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f0 ff2e 	bl	8000d44 <__aeabi_fmul>
 800fee8:	4603      	mov	r3, r0
 800feea:	4619      	mov	r1, r3
 800feec:	4620      	mov	r0, r4
 800feee:	f7f0 fe1f 	bl	8000b30 <__aeabi_fsub>
 800fef2:	4603      	mov	r3, r0
 800fef4:	673b      	str	r3, [r7, #112]	; 0x70


    S11_angle = - S11_angle*(Kt11_att - 1) - Kt12_att*S21_angle - Kt12_att*S31_angle;
 800fef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fef8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800fefc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ff00:	69f8      	ldr	r0, [r7, #28]
 800ff02:	f7f0 fe15 	bl	8000b30 <__aeabi_fsub>
 800ff06:	4603      	mov	r3, r0
 800ff08:	4619      	mov	r1, r3
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f7f0 ff1a 	bl	8000d44 <__aeabi_fmul>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461c      	mov	r4, r3
 800ff14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff16:	69b8      	ldr	r0, [r7, #24]
 800ff18:	f7f0 ff14 	bl	8000d44 <__aeabi_fmul>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	4619      	mov	r1, r3
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7f0 fe05 	bl	8000b30 <__aeabi_fsub>
 800ff26:	4603      	mov	r3, r0
 800ff28:	461c      	mov	r4, r3
 800ff2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff2c:	69b8      	ldr	r0, [r7, #24]
 800ff2e:	f7f0 ff09 	bl	8000d44 <__aeabi_fmul>
 800ff32:	4603      	mov	r3, r0
 800ff34:	4619      	mov	r1, r3
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7f0 fdfa 	bl	8000b30 <__aeabi_fsub>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	663b      	str	r3, [r7, #96]	; 0x60


    S12_angle = - S12_angle*(Kt11_att - 1) - Kt12_att*S22_angle - Kt12_att*S32_angle;
 800ff40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff42:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ff46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ff4a:	69f8      	ldr	r0, [r7, #28]
 800ff4c:	f7f0 fdf0 	bl	8000b30 <__aeabi_fsub>
 800ff50:	4603      	mov	r3, r0
 800ff52:	4619      	mov	r1, r3
 800ff54:	4620      	mov	r0, r4
 800ff56:	f7f0 fef5 	bl	8000d44 <__aeabi_fmul>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	461c      	mov	r4, r3
 800ff5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff60:	69b8      	ldr	r0, [r7, #24]
 800ff62:	f7f0 feef 	bl	8000d44 <__aeabi_fmul>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4619      	mov	r1, r3
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f7f0 fde0 	bl	8000b30 <__aeabi_fsub>
 800ff70:	4603      	mov	r3, r0
 800ff72:	461c      	mov	r4, r3
 800ff74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff76:	69b8      	ldr	r0, [r7, #24]
 800ff78:	f7f0 fee4 	bl	8000d44 <__aeabi_fmul>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7f0 fdd5 	bl	8000b30 <__aeabi_fsub>
 800ff86:	4603      	mov	r3, r0
 800ff88:	65fb      	str	r3, [r7, #92]	; 0x5c


    S13_angle = - S13_angle*(Kt11_att - 1) - Kt12_att*S23_angle - Kt12_att*S33_angle;
 800ff8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff8c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ff90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ff94:	69f8      	ldr	r0, [r7, #28]
 800ff96:	f7f0 fdcb 	bl	8000b30 <__aeabi_fsub>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7f0 fed0 	bl	8000d44 <__aeabi_fmul>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ffaa:	69b8      	ldr	r0, [r7, #24]
 800ffac:	f7f0 feca 	bl	8000d44 <__aeabi_fmul>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f7f0 fdbb 	bl	8000b30 <__aeabi_fsub>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	461c      	mov	r4, r3
 800ffbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffc0:	69b8      	ldr	r0, [r7, #24]
 800ffc2:	f7f0 febf 	bl	8000d44 <__aeabi_fmul>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7f0 fdb0 	bl	8000b30 <__aeabi_fsub>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	65bb      	str	r3, [r7, #88]	; 0x58


    S21_angle = - S21_angle*(Kt22_att - 1) - Kt21_att*S11_angle - Kt22_att*S31_angle;
 800ffd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffd6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800ffda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ffde:	6938      	ldr	r0, [r7, #16]
 800ffe0:	f7f0 fda6 	bl	8000b30 <__aeabi_fsub>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7f0 feab 	bl	8000d44 <__aeabi_fmul>
 800ffee:	4603      	mov	r3, r0
 800fff0:	461c      	mov	r4, r3
 800fff2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fff4:	6978      	ldr	r0, [r7, #20]
 800fff6:	f7f0 fea5 	bl	8000d44 <__aeabi_fmul>
 800fffa:	4603      	mov	r3, r0
 800fffc:	4619      	mov	r1, r3
 800fffe:	4620      	mov	r0, r4
 8010000:	f7f0 fd96 	bl	8000b30 <__aeabi_fsub>
 8010004:	4603      	mov	r3, r0
 8010006:	461c      	mov	r4, r3
 8010008:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801000a:	6938      	ldr	r0, [r7, #16]
 801000c:	f7f0 fe9a 	bl	8000d44 <__aeabi_fmul>
 8010010:	4603      	mov	r3, r0
 8010012:	4619      	mov	r1, r3
 8010014:	4620      	mov	r0, r4
 8010016:	f7f0 fd8b 	bl	8000b30 <__aeabi_fsub>
 801001a:	4603      	mov	r3, r0
 801001c:	657b      	str	r3, [r7, #84]	; 0x54


    S22_angle = - S22_angle*(Kt22_att - 1) - Kt21_att*S12_angle - Kt22_att*S32_angle;
 801001e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010020:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010024:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010028:	6938      	ldr	r0, [r7, #16]
 801002a:	f7f0 fd81 	bl	8000b30 <__aeabi_fsub>
 801002e:	4603      	mov	r3, r0
 8010030:	4619      	mov	r1, r3
 8010032:	4620      	mov	r0, r4
 8010034:	f7f0 fe86 	bl	8000d44 <__aeabi_fmul>
 8010038:	4603      	mov	r3, r0
 801003a:	461c      	mov	r4, r3
 801003c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801003e:	6978      	ldr	r0, [r7, #20]
 8010040:	f7f0 fe80 	bl	8000d44 <__aeabi_fmul>
 8010044:	4603      	mov	r3, r0
 8010046:	4619      	mov	r1, r3
 8010048:	4620      	mov	r0, r4
 801004a:	f7f0 fd71 	bl	8000b30 <__aeabi_fsub>
 801004e:	4603      	mov	r3, r0
 8010050:	461c      	mov	r4, r3
 8010052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010054:	6938      	ldr	r0, [r7, #16]
 8010056:	f7f0 fe75 	bl	8000d44 <__aeabi_fmul>
 801005a:	4603      	mov	r3, r0
 801005c:	4619      	mov	r1, r3
 801005e:	4620      	mov	r0, r4
 8010060:	f7f0 fd66 	bl	8000b30 <__aeabi_fsub>
 8010064:	4603      	mov	r3, r0
 8010066:	653b      	str	r3, [r7, #80]	; 0x50


    S23_angle = - S23_angle*(Kt22_att - 1) - Kt21_att*S13_angle - Kt22_att*S33_angle;
 8010068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801006a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 801006e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010072:	6938      	ldr	r0, [r7, #16]
 8010074:	f7f0 fd5c 	bl	8000b30 <__aeabi_fsub>
 8010078:	4603      	mov	r3, r0
 801007a:	4619      	mov	r1, r3
 801007c:	4620      	mov	r0, r4
 801007e:	f7f0 fe61 	bl	8000d44 <__aeabi_fmul>
 8010082:	4603      	mov	r3, r0
 8010084:	461c      	mov	r4, r3
 8010086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010088:	6978      	ldr	r0, [r7, #20]
 801008a:	f7f0 fe5b 	bl	8000d44 <__aeabi_fmul>
 801008e:	4603      	mov	r3, r0
 8010090:	4619      	mov	r1, r3
 8010092:	4620      	mov	r0, r4
 8010094:	f7f0 fd4c 	bl	8000b30 <__aeabi_fsub>
 8010098:	4603      	mov	r3, r0
 801009a:	461c      	mov	r4, r3
 801009c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801009e:	6938      	ldr	r0, [r7, #16]
 80100a0:	f7f0 fe50 	bl	8000d44 <__aeabi_fmul>
 80100a4:	4603      	mov	r3, r0
 80100a6:	4619      	mov	r1, r3
 80100a8:	4620      	mov	r0, r4
 80100aa:	f7f0 fd41 	bl	8000b30 <__aeabi_fsub>
 80100ae:	4603      	mov	r3, r0
 80100b0:	64fb      	str	r3, [r7, #76]	; 0x4c


    S31_angle = - S31_angle*(Kt32_att - 1) - Kt31_att*S11_angle - Kt32_att*S21_angle;
 80100b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100b4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80100b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f7f0 fd37 	bl	8000b30 <__aeabi_fsub>
 80100c2:	4603      	mov	r3, r0
 80100c4:	4619      	mov	r1, r3
 80100c6:	4620      	mov	r0, r4
 80100c8:	f7f0 fe3c 	bl	8000d44 <__aeabi_fmul>
 80100cc:	4603      	mov	r3, r0
 80100ce:	461c      	mov	r4, r3
 80100d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7f0 fe36 	bl	8000d44 <__aeabi_fmul>
 80100d8:	4603      	mov	r3, r0
 80100da:	4619      	mov	r1, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	f7f0 fd27 	bl	8000b30 <__aeabi_fsub>
 80100e2:	4603      	mov	r3, r0
 80100e4:	461c      	mov	r4, r3
 80100e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100e8:	68b8      	ldr	r0, [r7, #8]
 80100ea:	f7f0 fe2b 	bl	8000d44 <__aeabi_fmul>
 80100ee:	4603      	mov	r3, r0
 80100f0:	4619      	mov	r1, r3
 80100f2:	4620      	mov	r0, r4
 80100f4:	f7f0 fd1c 	bl	8000b30 <__aeabi_fsub>
 80100f8:	4603      	mov	r3, r0
 80100fa:	64bb      	str	r3, [r7, #72]	; 0x48


    S32_angle = - S32_angle*(Kt32_att - 1) - Kt31_att*S12_angle - Kt32_att*S22_angle;
 80100fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100fe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8010102:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010106:	68b8      	ldr	r0, [r7, #8]
 8010108:	f7f0 fd12 	bl	8000b30 <__aeabi_fsub>
 801010c:	4603      	mov	r3, r0
 801010e:	4619      	mov	r1, r3
 8010110:	4620      	mov	r0, r4
 8010112:	f7f0 fe17 	bl	8000d44 <__aeabi_fmul>
 8010116:	4603      	mov	r3, r0
 8010118:	461c      	mov	r4, r3
 801011a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f7f0 fe11 	bl	8000d44 <__aeabi_fmul>
 8010122:	4603      	mov	r3, r0
 8010124:	4619      	mov	r1, r3
 8010126:	4620      	mov	r0, r4
 8010128:	f7f0 fd02 	bl	8000b30 <__aeabi_fsub>
 801012c:	4603      	mov	r3, r0
 801012e:	461c      	mov	r4, r3
 8010130:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010132:	68b8      	ldr	r0, [r7, #8]
 8010134:	f7f0 fe06 	bl	8000d44 <__aeabi_fmul>
 8010138:	4603      	mov	r3, r0
 801013a:	4619      	mov	r1, r3
 801013c:	4620      	mov	r0, r4
 801013e:	f7f0 fcf7 	bl	8000b30 <__aeabi_fsub>
 8010142:	4603      	mov	r3, r0
 8010144:	647b      	str	r3, [r7, #68]	; 0x44


    S33_angle = - S33_angle*(Kt32_att - 1) - Kt31_att*S13_angle - Kt32_att*S23_angle;
 8010146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010148:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 801014c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010150:	68b8      	ldr	r0, [r7, #8]
 8010152:	f7f0 fced 	bl	8000b30 <__aeabi_fsub>
 8010156:	4603      	mov	r3, r0
 8010158:	4619      	mov	r1, r3
 801015a:	4620      	mov	r0, r4
 801015c:	f7f0 fdf2 	bl	8000d44 <__aeabi_fmul>
 8010160:	4603      	mov	r3, r0
 8010162:	461c      	mov	r4, r3
 8010164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7f0 fdec 	bl	8000d44 <__aeabi_fmul>
 801016c:	4603      	mov	r3, r0
 801016e:	4619      	mov	r1, r3
 8010170:	4620      	mov	r0, r4
 8010172:	f7f0 fcdd 	bl	8000b30 <__aeabi_fsub>
 8010176:	4603      	mov	r3, r0
 8010178:	461c      	mov	r4, r3
 801017a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801017c:	68b8      	ldr	r0, [r7, #8]
 801017e:	f7f0 fde1 	bl	8000d44 <__aeabi_fmul>
 8010182:	4603      	mov	r3, r0
 8010184:	4619      	mov	r1, r3
 8010186:	4620      	mov	r0, r4
 8010188:	f7f0 fcd2 	bl	8000b30 <__aeabi_fsub>
 801018c:	4603      	mov	r3, r0
 801018e:	643b      	str	r3, [r7, #64]	; 0x40

    switch(euler_angle) {
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d05d      	beq.n	8010252 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe6a>
 8010196:	2b02      	cmp	r3, #2
 8010198:	f300 808e 	bgt.w	80102b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
 801019c:	2b00      	cmp	r3, #0
 801019e:	d002      	beq.n	80101a6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xdbe>
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d02b      	beq.n	80101fc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe14>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 80101a4:	e088      	b.n	80102b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 roll_ekf = angle_ekf ;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80101aa:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    			 roll_rate = angle_rate;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80101b2:	621a      	str	r2, [r3, #32]
    			 roll_bias = angle_bias;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    			 roll_acc = angle_acc ;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101c0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    			 S11_roll = S11_angle;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101c8:	659a      	str	r2, [r3, #88]	; 0x58
    			 S12_roll = S12_angle;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101ce:	65da      	str	r2, [r3, #92]	; 0x5c
    			 S13_roll = S13_angle;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101d4:	669a      	str	r2, [r3, #104]	; 0x68
    			 S21_roll = S21_angle;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101da:	661a      	str	r2, [r3, #96]	; 0x60
    			 S22_roll = S22_angle;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101e0:	665a      	str	r2, [r3, #100]	; 0x64
    			 S23_roll = S23_angle;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101e6:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S31_roll = S31_angle;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101ec:	671a      	str	r2, [r3, #112]	; 0x70
    			 S32_roll = S32_angle;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101f2:	675a      	str	r2, [r3, #116]	; 0x74
    			 S33_roll = S33_angle;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101f8:	679a      	str	r2, [r3, #120]	; 0x78
    			break;
 80101fa:	e05d      	b.n	80102b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 pitch_ekf = angle_ekf ;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010200:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    			 pitch_rate = angle_rate;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010208:	625a      	str	r2, [r3, #36]	; 0x24
    			 pitch_bias = angle_bias;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801020e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    			 pitch_acc = angle_acc ;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010216:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    			 S11_pitch = S11_angle;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801021e:	62da      	str	r2, [r3, #44]	; 0x2c
    			 S12_pitch = S12_angle;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010224:	631a      	str	r2, [r3, #48]	; 0x30
    			 S13_pitch = S13_angle;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801022a:	63da      	str	r2, [r3, #60]	; 0x3c
    			 S21_pitch = S21_angle;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010230:	635a      	str	r2, [r3, #52]	; 0x34
    			 S22_pitch = S22_angle;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010236:	639a      	str	r2, [r3, #56]	; 0x38
    			 S23_pitch = S23_angle;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801023c:	641a      	str	r2, [r3, #64]	; 0x40
    			 S31_pitch = S31_angle;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010242:	645a      	str	r2, [r3, #68]	; 0x44
    			 S32_pitch = S32_angle;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010248:	649a      	str	r2, [r3, #72]	; 0x48
    			 S33_pitch = S33_angle;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801024e:	64da      	str	r2, [r3, #76]	; 0x4c
    			break;
 8010250:	e032      	b.n	80102b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xed0>
    			 yaw_ekf = angle_ekf ;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010256:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 yaw_rate = angle_rate;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801025e:	629a      	str	r2, [r3, #40]	; 0x28
    			 yaw_bias = angle_bias;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 yaw_acc = angle_acc ;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801026c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 S11_yaw = S11_angle;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010274:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S12_yaw = S12_angle;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801027a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			 S13_yaw = S13_angle;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    			 S21_yaw = S21_angle;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801028a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S22_yaw = S22_angle;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			 S23_yaw = S23_angle;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801029a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    			 S31_yaw = S31_angle;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    			 S32_yaw = S32_angle;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    			 S33_yaw = S33_angle;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    			break;
 80102b6:	bf00      	nop
}
 80102b8:	bf00      	nop
 80102ba:	3778      	adds	r7, #120	; 0x78
 80102bc:	46bd      	mov	sp, r7
 80102be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102c2:	bf00      	nop
 80102c4:	0000      	movs	r0, r0
	...

080102c8 <_ZN15Kalman_Filtresi8NED2BodyEv>:
	  S22_x = S22_x - S12_x*(Kt21);


}
*/
void Kalman_Filtresi::NED2Body() {
 80102c8:	b590      	push	{r4, r7, lr}
 80102ca:	b089      	sub	sp, #36	; 0x24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
	float deg2rad = M_PI/180.0;
 80102d0:	4b55      	ldr	r3, [pc, #340]	; (8010428 <_ZN15Kalman_Filtresi8NED2BodyEv+0x160>)
 80102d2:	61fb      	str	r3, [r7, #28]

	float yaw   = -yaw_ekf*deg2rad;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80102da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80102de:	4619      	mov	r1, r3
 80102e0:	69f8      	ldr	r0, [r7, #28]
 80102e2:	f7f0 fd2f 	bl	8000d44 <__aeabi_fmul>
 80102e6:	4603      	mov	r3, r0
 80102e8:	61bb      	str	r3, [r7, #24]
	//float roll  = roll_ekf*deg2rad;
	//float pitch = pitch_ekf*deg2rad;

	float DCM11 = cos(yaw);
 80102ea:	69b8      	ldr	r0, [r7, #24]
 80102ec:	f7f2 f9b8 	bl	8002660 <_ZSt3cosf>
 80102f0:	6178      	str	r0, [r7, #20]
	float DCM22 = DCM11;
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	613b      	str	r3, [r7, #16]

	float DCM12 = sin(yaw);
 80102f6:	69b8      	ldr	r0, [r7, #24]
 80102f8:	f7f2 f9be 	bl	8002678 <_ZSt3sinf>
 80102fc:	60f8      	str	r0, [r7, #12]
	float DCM21 = -DCM12;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8010304:	60bb      	str	r3, [r7, #8]

	_xbody = xbody;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	_ybody = ybody;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	xbody = DCM11*xned + DCM21*yned;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010324:	6979      	ldr	r1, [r7, #20]
 8010326:	4618      	mov	r0, r3
 8010328:	f7f0 fd0c 	bl	8000d44 <__aeabi_fmul>
 801032c:	4603      	mov	r3, r0
 801032e:	461c      	mov	r4, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010336:	68b9      	ldr	r1, [r7, #8]
 8010338:	4618      	mov	r0, r3
 801033a:	f7f0 fd03 	bl	8000d44 <__aeabi_fmul>
 801033e:	4603      	mov	r3, r0
 8010340:	4619      	mov	r1, r3
 8010342:	4620      	mov	r0, r4
 8010344:	f7f0 fbf6 	bl	8000b34 <__addsf3>
 8010348:	4603      	mov	r3, r0
 801034a:	461a      	mov	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ybody = DCM12*xned + DCM22*yned;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010358:	68f9      	ldr	r1, [r7, #12]
 801035a:	4618      	mov	r0, r3
 801035c:	f7f0 fcf2 	bl	8000d44 <__aeabi_fmul>
 8010360:	4603      	mov	r3, r0
 8010362:	461c      	mov	r4, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801036a:	6939      	ldr	r1, [r7, #16]
 801036c:	4618      	mov	r0, r3
 801036e:	f7f0 fce9 	bl	8000d44 <__aeabi_fmul>
 8010372:	4603      	mov	r3, r0
 8010374:	4619      	mov	r1, r3
 8010376:	4620      	mov	r0, r4
 8010378:	f7f0 fbdc 	bl	8000b34 <__addsf3>
 801037c:	4603      	mov	r3, r0
 801037e:	461a      	mov	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	/*
	vgpsx = DCM11*vgpsxned + DCM21*vgpsyned;
	vgpsy = DCM12*vgpsxned + DCM22*vgpsyned;
	*/

	vgpsx = (xbody - _xbody) / 0.2;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8010392:	4619      	mov	r1, r3
 8010394:	4610      	mov	r0, r2
 8010396:	f7f0 fbcb 	bl	8000b30 <__aeabi_fsub>
 801039a:	4603      	mov	r3, r0
 801039c:	4618      	mov	r0, r3
 801039e:	f7f0 f843 	bl	8000428 <__aeabi_f2d>
 80103a2:	a31f      	add	r3, pc, #124	; (adr r3, 8010420 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	f7f0 f9c0 	bl	800072c <__aeabi_ddiv>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4610      	mov	r0, r2
 80103b2:	4619      	mov	r1, r3
 80103b4:	f7f0 fb68 	bl	8000a88 <__aeabi_d2f>
 80103b8:	4602      	mov	r2, r0
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	vgpsy = (ybody - _ybody) / 0.2;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7f0 fbae 	bl	8000b30 <__aeabi_fsub>
 80103d4:	4603      	mov	r3, r0
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f0 f826 	bl	8000428 <__aeabi_f2d>
 80103dc:	a310      	add	r3, pc, #64	; (adr r3, 8010420 <_ZN15Kalman_Filtresi8NED2BodyEv+0x158>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7f0 f9a3 	bl	800072c <__aeabi_ddiv>
 80103e6:	4602      	mov	r2, r0
 80103e8:	460b      	mov	r3, r1
 80103ea:	4610      	mov	r0, r2
 80103ec:	4619      	mov	r1, r3
 80103ee:	f7f0 fb4b 	bl	8000a88 <__aeabi_d2f>
 80103f2:	4602      	mov	r2, r0
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	//vgpsx = vel_gps_filt.Run(vgpsx);
	//vgpsy = vel_gps_filt.Run(vgpsy);

	xgps = xbody;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	ygps = ybody;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

}
 8010412:	bf00      	nop
 8010414:	3724      	adds	r7, #36	; 0x24
 8010416:	46bd      	mov	sp, r7
 8010418:	bd90      	pop	{r4, r7, pc}
 801041a:	bf00      	nop
 801041c:	f3af 8000 	nop.w
 8010420:	9999999a 	.word	0x9999999a
 8010424:	3fc99999 	.word	0x3fc99999
 8010428:	3c8efa35 	.word	0x3c8efa35

0801042c <_ZN15Kalman_Filtresi3RunEv>:
void Kalman_Filtresi::Run() {
 801042c:	b580      	push	{r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 801043e:	4619      	mov	r1, r3
 8010440:	4610      	mov	r0, r2
 8010442:	f7f0 fb77 	bl	8000b34 <__addsf3>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	601a      	str	r2, [r3, #0]
  float accX = acc[0];
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010454:	617b      	str	r3, [r7, #20]
  float accY = acc[1];
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801045c:	613b      	str	r3, [r7, #16]
  float accZ = acc[2];
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010464:	60fb      	str	r3, [r7, #12]




    if(gyro_ready) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801046c:	2b00      	cmp	r3, #0
 801046e:	d014      	beq.n	801049a <_ZN15Kalman_Filtresi3RunEv+0x6e>

    pos_ekf_counter++;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	605a      	str	r2, [r3, #4]
    EKF_Attitude(ROLL);
 801047a:	2100      	movs	r1, #0
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7fe ffb3 	bl	800f3e8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 8010482:	2101      	movs	r1, #1
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7fe ffaf 	bl	800f3e8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 801048a:	2102      	movs	r1, #2
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7fe ffab 	bl	800f3e8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>

    //EKF_Alt();
    EKF_Pos();
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7fe ff50 	bl	800f338 <_ZN15Kalman_Filtresi7EKF_PosEv>
 8010498:	e003      	b.n	80104a2 <_ZN15Kalman_Filtresi3RunEv+0x76>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
    	*/
    	gyro_ready = true;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    state.angles[1] = pitch_ekf;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    state.angles[2] = -1*yaw_ekf;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80104c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    state.rates[0] = roll_rate;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6a1a      	ldr	r2, [r3, #32]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.rates[1] = pitch_rate;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    state.rates[2] = yaw_rate;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

    state.bias[0] = roll_bias;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.bias[1] = pitch_bias;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    state.bias[2] = yaw_bias;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

}
 801050c:	bf00      	nop
 801050e:	3718      	adds	r7, #24
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010522:	4618      	mov	r0, r3
 8010524:	f000 fc8b 	bl	8010e3e <_ZN3lpfD1Ev>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801052e:	4618      	mov	r0, r3
 8010530:	f000 fc85 	bl	8010e3e <_ZN3lpfD1Ev>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801053a:	4618      	mov	r0, r3
 801053c:	f000 fc7f 	bl	8010e3e <_ZN3lpfD1Ev>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	0000      	movs	r0, r0
 801054c:	0000      	movs	r0, r0
	...

08010550 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 8010550:	b580      	push	{r7, lr}
 8010552:	b086      	sub	sp, #24
 8010554:	af04      	add	r7, sp, #16
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4a27      	ldr	r2, [pc, #156]	; (80105f8 <_ZN3PIDC1Ev+0xa8>)
 801055c:	609a      	str	r2, [r3, #8]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4a26      	ldr	r2, [pc, #152]	; (80105fc <_ZN3PIDC1Ev+0xac>)
 8010562:	60da      	str	r2, [r3, #12]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a26      	ldr	r2, [pc, #152]	; (8010600 <_ZN3PIDC1Ev+0xb0>)
 8010568:	611a      	str	r2, [r3, #16]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	22c8      	movs	r2, #200	; 0xc8
 801056e:	615a      	str	r2, [r3, #20]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	695b      	ldr	r3, [r3, #20]
 8010574:	4618      	mov	r0, r3
 8010576:	f7f0 fb91 	bl	8000c9c <__aeabi_i2f>
 801057a:	4603      	mov	r3, r0
 801057c:	4619      	mov	r1, r3
 801057e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010582:	f7f0 fc93 	bl	8000eac <__aeabi_fdiv>
 8010586:	4603      	mov	r3, r0
 8010588:	461a      	mov	r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	619a      	str	r2, [r3, #24]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a1c      	ldr	r2, [pc, #112]	; (8010604 <_ZN3PIDC1Ev+0xb4>)
 8010592:	61da      	str	r2, [r3, #28]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	69da      	ldr	r2, [r3, #28]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	699b      	ldr	r3, [r3, #24]
 801059c:	4619      	mov	r1, r3
 801059e:	4610      	mov	r0, r2
 80105a0:	f7f0 fbd0 	bl	8000d44 <__aeabi_fmul>
 80105a4:	4603      	mov	r3, r0
 80105a6:	461a      	mov	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	621a      	str	r2, [r3, #32]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105b2:	a30d      	add	r3, pc, #52	; (adr r3, 80105e8 <_ZN3PIDC1Ev+0x98>)
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105bc:	a30a      	add	r3, pc, #40	; (adr r3, 80105e8 <_ZN3PIDC1Ev+0x98>)
 80105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c2:	e9cd 2300 	strd	r2, r3, [sp]
 80105c6:	a30a      	add	r3, pc, #40	; (adr r3, 80105f0 <_ZN3PIDC1Ev+0xa0>)
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	4608      	mov	r0, r1
 80105ce:	f000 fbc5 	bl	8010d5c <_ZN3lpfC1Eddd>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80105d8:	669a      	str	r2, [r3, #104]	; 0x68
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	4618      	mov	r0, r3
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	f3af 8000 	nop.w
 80105e8:	de7ea5f8 	.word	0xde7ea5f8
 80105ec:	3fb2a454 	.word	0x3fb2a454
 80105f0:	ab367a10 	.word	0xab367a10
 80105f4:	3feb573e 	.word	0x3feb573e
 80105f8:	3d4ccccd 	.word	0x3d4ccccd
 80105fc:	42f00000 	.word	0x42f00000
 8010600:	c2f00000 	.word	0xc2f00000
 8010604:	3e99999a 	.word	0x3e99999a

08010608 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 8010608:	b590      	push	{r4, r7, lr}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]
 8010614:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 8010616:	6879      	ldr	r1, [r7, #4]
 8010618:	68b8      	ldr	r0, [r7, #8]
 801061a:	f7f0 fa89 	bl	8000b30 <__aeabi_fsub>
 801061e:	4603      	mov	r3, r0
 8010620:	461a      	mov	r2, r3
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	4619      	mov	r1, r3
 8010638:	4610      	mov	r0, r2
 801063a:	f7f0 fb83 	bl	8000d44 <__aeabi_fmul>
 801063e:	4603      	mov	r3, r0
 8010640:	4619      	mov	r1, r3
 8010642:	4620      	mov	r0, r4
 8010644:	f7f0 fa76 	bl	8000b34 <__addsf3>
 8010648:	4603      	mov	r3, r0
 801064a:	461a      	mov	r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010656:	4619      	mov	r1, r3
 8010658:	6838      	ldr	r0, [r7, #0]
 801065a:	f7f0 fb73 	bl	8000d44 <__aeabi_fmul>
 801065e:	4603      	mov	r3, r0
 8010660:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010666:	4619      	mov	r1, r3
 8010668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801066a:	f7f0 fb6b 	bl	8000d44 <__aeabi_fmul>
 801066e:	4603      	mov	r3, r0
 8010670:	613b      	str	r3, [r7, #16]
    return P+I;
 8010672:	6939      	ldr	r1, [r7, #16]
 8010674:	6978      	ldr	r0, [r7, #20]
 8010676:	f7f0 fa5d 	bl	8000b34 <__addsf3>
 801067a:	4603      	mov	r3, r0

}
 801067c:	4618      	mov	r0, r3
 801067e:	371c      	adds	r7, #28
 8010680:	46bd      	mov	sp, r7
 8010682:	bd90      	pop	{r4, r7, pc}

08010684 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 8010684:	b580      	push	{r7, lr}
 8010686:	b08a      	sub	sp, #40	; 0x28
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 8010692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010694:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8010698:	4293      	cmp	r3, r2
 801069a:	d90e      	bls.n	80106ba <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6a1b      	ldr	r3, [r3, #32]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7f0 fa46 	bl	8000b34 <__addsf3>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	69db      	ldr	r3, [r3, #28]
 80106b6:	627b      	str	r3, [r7, #36]	; 0x24
 80106b8:	e01c      	b.n	80106f4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	f240 5213 	movw	r2, #1299	; 0x513
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d810      	bhi.n	80106e6 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	4619      	mov	r1, r3
 80106ca:	68b8      	ldr	r0, [r7, #8]
 80106cc:	f7f0 fa30 	bl	8000b30 <__aeabi_fsub>
 80106d0:	4603      	mov	r3, r0
 80106d2:	461a      	mov	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	69db      	ldr	r3, [r3, #28]
 80106de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80106e2:	627b      	str	r3, [r7, #36]	; 0x24
 80106e4:	e006      	b.n	80106f4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 80106ee:	f04f 0300 	mov.w	r3, #0
 80106f2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106f8:	f7f0 fa1a 	bl	8000b30 <__aeabi_fsub>
 80106fc:	4603      	mov	r3, r0
 80106fe:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 8010700:	6a39      	ldr	r1, [r7, #32]
 8010702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010704:	f7f0 fb1e 	bl	8000d44 <__aeabi_fmul>
 8010708:	4603      	mov	r3, r0
 801070a:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 801070c:	6879      	ldr	r1, [r7, #4]
 801070e:	68b8      	ldr	r0, [r7, #8]
 8010710:	f7f0 fa0e 	bl	8000b30 <__aeabi_fsub>
 8010714:	4603      	mov	r3, r0
 8010716:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 8010718:	69b9      	ldr	r1, [r7, #24]
 801071a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801071c:	f7f0 fb12 	bl	8000d44 <__aeabi_fmul>
 8010720:	4603      	mov	r3, r0
 8010722:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 8010724:	6979      	ldr	r1, [r7, #20]
 8010726:	69f8      	ldr	r0, [r7, #28]
 8010728:	f7f0 fa04 	bl	8000b34 <__addsf3>
 801072c:	4603      	mov	r3, r0
 801072e:	613b      	str	r3, [r7, #16]
    return PI;
 8010730:	693b      	ldr	r3, [r7, #16]

}
 8010732:	4618      	mov	r0, r3
 8010734:	3728      	adds	r7, #40	; 0x28
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	0000      	movs	r0, r0
 801073c:	0000      	movs	r0, r0
	...

08010740 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 8010740:	b5b0      	push	{r4, r5, r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801074e:	4618      	mov	r0, r3
 8010750:	f7ef fe6a 	bl	8000428 <__aeabi_f2d>
 8010754:	a31e      	add	r3, pc, #120	; (adr r3, 80107d0 <_ZN3PID6RateFFEf+0x90>)
 8010756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075a:	f7ef febd 	bl	80004d8 <__aeabi_dmul>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4614      	mov	r4, r2
 8010764:	461d      	mov	r5, r3
 8010766:	6838      	ldr	r0, [r7, #0]
 8010768:	f7ef fe5e 	bl	8000428 <__aeabi_f2d>
 801076c:	a31a      	add	r3, pc, #104	; (adr r3, 80107d8 <_ZN3PID6RateFFEf+0x98>)
 801076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010772:	f7ef feb1 	bl	80004d8 <__aeabi_dmul>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
 801077a:	4620      	mov	r0, r4
 801077c:	4629      	mov	r1, r5
 801077e:	f7ef fcf5 	bl	800016c <__adddf3>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	4614      	mov	r4, r2
 8010788:	461d      	mov	r5, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801078e:	4618      	mov	r0, r3
 8010790:	f7ef fe4a 	bl	8000428 <__aeabi_f2d>
 8010794:	a310      	add	r3, pc, #64	; (adr r3, 80107d8 <_ZN3PID6RateFFEf+0x98>)
 8010796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079a:	f7ef fe9d 	bl	80004d8 <__aeabi_dmul>
 801079e:	4602      	mov	r2, r0
 80107a0:	460b      	mov	r3, r1
 80107a2:	4620      	mov	r0, r4
 80107a4:	4629      	mov	r1, r5
 80107a6:	f7ef fcdf 	bl	8000168 <__aeabi_dsub>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	4610      	mov	r0, r2
 80107b0:	4619      	mov	r1, r3
 80107b2:	f7f0 f969 	bl	8000a88 <__aeabi_d2f>
 80107b6:	4603      	mov	r3, r0
 80107b8:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107be:	68f9      	ldr	r1, [r7, #12]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f0 fabf 	bl	8000d44 <__aeabi_fmul>
 80107c6:	4603      	mov	r3, r0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bdb0      	pop	{r4, r5, r7, pc}
 80107d0:	1eb851ec 	.word	0x1eb851ec
 80107d4:	3fefeb85 	.word	0x3fefeb85
 80107d8:	538ef34d 	.word	0x538ef34d
 80107dc:	3fb72474 	.word	0x3fb72474

080107e0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 80107e0:	b590      	push	{r4, r7, lr}
 80107e2:	b087      	sub	sp, #28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	68b8      	ldr	r0, [r7, #8]
 80107f2:	f7f0 f99d 	bl	8000b30 <__aeabi_fsub>
 80107f6:	4603      	mov	r3, r0
 80107f8:	461a      	mov	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	699b      	ldr	r3, [r3, #24]
 801080c:	4619      	mov	r1, r3
 801080e:	4610      	mov	r0, r2
 8010810:	f7f0 fa98 	bl	8000d44 <__aeabi_fmul>
 8010814:	4603      	mov	r3, r0
 8010816:	4619      	mov	r1, r3
 8010818:	4620      	mov	r0, r4
 801081a:	f7f0 f98b 	bl	8000b34 <__addsf3>
 801081e:	4603      	mov	r3, r0
 8010820:	461a      	mov	r2, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801082e:	4618      	mov	r0, r3
 8010830:	f7f0 fa88 	bl	8000d44 <__aeabi_fmul>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010846:	4618      	mov	r0, r3
 8010848:	f7f0 fa7c 	bl	8000d44 <__aeabi_fmul>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	4619      	mov	r1, r3
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7f0 f967 	bl	8000b30 <__aeabi_fsub>
 8010862:	4603      	mov	r3, r0
 8010864:	461a      	mov	r2, r3
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	4619      	mov	r1, r3
 801086c:	4610      	mov	r0, r2
 801086e:	f7f0 fb1d 	bl	8000eac <__aeabi_fdiv>
 8010872:	4603      	mov	r3, r0
 8010874:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3338      	adds	r3, #56	; 0x38
 801087a:	6979      	ldr	r1, [r7, #20]
 801087c:	4618      	mov	r0, r3
 801087e:	f000 fa88 	bl	8010d92 <_ZN3lpf3RunEf>
 8010882:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801088a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801088c:	4618      	mov	r0, r3
 801088e:	f7f0 fa59 	bl	8000d44 <__aeabi_fmul>
 8010892:	4603      	mov	r3, r0
 8010894:	6979      	ldr	r1, [r7, #20]
 8010896:	4618      	mov	r0, r3
 8010898:	f7f0 f94a 	bl	8000b30 <__aeabi_fsub>
 801089c:	4603      	mov	r3, r0
 801089e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f0 fa4f 	bl	8000d44 <__aeabi_fmul>
 80108a6:	4603      	mov	r3, r0
 80108a8:	461a      	mov	r2, r3
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7f0 f938 	bl	8000b34 <__addsf3>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461a      	mov	r2, r3
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80108ce:	4619      	mov	r1, r3
 80108d0:	4610      	mov	r0, r2
 80108d2:	f7f0 f92f 	bl	8000b34 <__addsf3>
 80108d6:	4603      	mov	r3, r0
 80108d8:	461a      	mov	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80108f0:	4b0e      	ldr	r3, [pc, #56]	; (801092c <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 80108f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f000 f9ba 	bl	8010c70 <_ZN3PID3SatEfii>
 80108fc:	4602      	mov	r2, r0
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 8010922:	4618      	mov	r0, r3
 8010924:	371c      	adds	r7, #28
 8010926:	46bd      	mov	sp, r7
 8010928:	bd90      	pop	{r4, r7, pc}
 801092a:	bf00      	nop
 801092c:	fffffed4 	.word	0xfffffed4

08010930 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 8010930:	b580      	push	{r7, lr}
 8010932:	b088      	sub	sp, #32
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
 801093c:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 8010946:	6879      	ldr	r1, [r7, #4]
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f7f0 f8f1 	bl	8000b30 <__aeabi_fsub>
 801094e:	4603      	mov	r3, r0
 8010950:	461a      	mov	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	4619      	mov	r1, r3
 801095c:	6838      	ldr	r0, [r7, #0]
 801095e:	f7f0 f9f1 	bl	8000d44 <__aeabi_fmul>
 8010962:	4603      	mov	r3, r0
 8010964:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	685a      	ldr	r2, [r3, #4]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	4619      	mov	r1, r3
 8010970:	4610      	mov	r0, r2
 8010972:	f7f0 f8dd 	bl	8000b30 <__aeabi_fsub>
 8010976:	4603      	mov	r3, r0
 8010978:	461a      	mov	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	4619      	mov	r1, r3
 8010980:	4610      	mov	r0, r2
 8010982:	f7f0 fa93 	bl	8000eac <__aeabi_fdiv>
 8010986:	4603      	mov	r3, r0
 8010988:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 801098a:	69b9      	ldr	r1, [r7, #24]
 801098c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801098e:	f7f0 f9d9 	bl	8000d44 <__aeabi_fmul>
 8010992:	4603      	mov	r3, r0
 8010994:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 8010996:	6979      	ldr	r1, [r7, #20]
 8010998:	69f8      	ldr	r0, [r7, #28]
 801099a:	f7f0 f8cb 	bl	8000b34 <__addsf3>
 801099e:	4603      	mov	r3, r0
 80109a0:	613b      	str	r3, [r7, #16]
	return pd;
 80109a2:	693b      	ldr	r3, [r7, #16]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 80109ac:	b590      	push	{r4, r7, lr}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 80109ba:	6879      	ldr	r1, [r7, #4]
 80109bc:	68b8      	ldr	r0, [r7, #8]
 80109be:	f7f0 f8b7 	bl	8000b30 <__aeabi_fsub>
 80109c2:	4603      	mov	r3, r0
 80109c4:	461a      	mov	r2, r3
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80109d0:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109d6:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109dc:	4618      	mov	r0, r3
 80109de:	f7f0 fb8d 	bl	80010fc <__aeabi_f2iz>
 80109e2:	4604      	mov	r4, r0
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7f0 fb86 	bl	80010fc <__aeabi_f2iz>
 80109f0:	4603      	mov	r3, r0
 80109f2:	429c      	cmp	r4, r3
 80109f4:	d019      	beq.n	8010a2a <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109fa:	4619      	mov	r1, r3
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f000 f8df 	bl	8010bc0 <_ZN3PID3sgnEf>
 8010a02:	4603      	mov	r3, r0
 8010a04:	461c      	mov	r4, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 f8d6 	bl	8010bc0 <_ZN3PID3sgnEf>
 8010a14:	4603      	mov	r3, r0
 8010a16:	429c      	cmp	r4, r3
 8010a18:	bf0c      	ite	eq
 8010a1a:	2301      	moveq	r3, #1
 8010a1c:	2300      	movne	r3, #0
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d002      	beq.n	8010a2a <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 8010a24:	f04f 0300 	mov.w	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f0 f987 	bl	8000d44 <__aeabi_fmul>
 8010a36:	4603      	mov	r3, r0
 8010a38:	461a      	mov	r2, r3
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010a40:	4619      	mov	r1, r3
 8010a42:	4610      	mov	r0, r2
 8010a44:	f7f0 f874 	bl	8000b30 <__aeabi_fsub>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	494d      	ldr	r1, [pc, #308]	; (8010b80 <_ZN3PID7PD_RateEfffff+0x1d4>)
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f0 f979 	bl	8000d44 <__aeabi_fmul>
 8010a52:	4603      	mov	r3, r0
 8010a54:	461a      	mov	r2, r3
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7f0 f968 	bl	8000d44 <__aeabi_fmul>
 8010a74:	4603      	mov	r3, r0
 8010a76:	4619      	mov	r1, r3
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f7f0 f85b 	bl	8000b34 <__addsf3>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	461a      	mov	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a90:	4619      	mov	r1, r3
 8010a92:	4610      	mov	r0, r2
 8010a94:	f7f0 f84c 	bl	8000b30 <__aeabi_fsub>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	699b      	ldr	r3, [r3, #24]
 8010ab2:	6979      	ldr	r1, [r7, #20]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7f0 f945 	bl	8000d44 <__aeabi_fmul>
 8010aba:	4603      	mov	r3, r0
 8010abc:	4619      	mov	r1, r3
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f7f0 f838 	bl	8000b34 <__addsf3>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7f0 f931 	bl	8000d44 <__aeabi_fmul>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7f0 f91f 	bl	8000d44 <__aeabi_fmul>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4610      	mov	r0, r2
 8010b20:	f7f0 f808 	bl	8000b34 <__addsf3>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010b2e:	4619      	mov	r1, r3
 8010b30:	4610      	mov	r0, r2
 8010b32:	f7ef ffff 	bl	8000b34 <__addsf3>
 8010b36:	4603      	mov	r3, r0
 8010b38:	461a      	mov	r2, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010b50:	4b0c      	ldr	r3, [pc, #48]	; (8010b84 <_ZN3PID7PD_RateEfffff+0x1d8>)
 8010b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	f000 f88a 	bl	8010c70 <_ZN3PID3SatEfii>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 8010b76:	4618      	mov	r0, r3
 8010b78:	371c      	adds	r7, #28
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd90      	pop	{r4, r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	42c80000 	.word	0x42c80000
 8010b84:	fffffed4 	.word	0xfffffed4

08010b88 <_ZN3PID5resetEv>:

void PID::reset() {
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f04f 0200 	mov.w	r2, #0
 8010b96:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f04f 0200 	mov.w	r2, #0
 8010b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f04f 0200 	mov.w	r2, #0
 8010ba8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f04f 0200 	mov.w	r2, #0
 8010bb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8010bb6:	bf00      	nop
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bc80      	pop	{r7}
 8010bbe:	4770      	bx	lr

08010bc0 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 8010bca:	f04f 0100 	mov.w	r1, #0
 8010bce:	6838      	ldr	r0, [r7, #0]
 8010bd0:	f7f0 fa56 	bl	8001080 <__aeabi_fcmplt>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d001      	beq.n	8010bde <_ZN3PID3sgnEf+0x1e>
 8010bda:	23ff      	movs	r3, #255	; 0xff
 8010bdc:	e00a      	b.n	8010bf4 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 8010bde:	f04f 0100 	mov.w	r1, #0
 8010be2:	6838      	ldr	r0, [r7, #0]
 8010be4:	f7f0 fa6a 	bl	80010bc <__aeabi_fcmpgt>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <_ZN3PID3sgnEf+0x32>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e000      	b.n	8010bf4 <_ZN3PID3sgnEf+0x34>
  return 0;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8010c10:	dd24      	ble.n	8010c5c <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7f0 f842 	bl	8000c9c <__aeabi_i2f>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	68b8      	ldr	r0, [r7, #8]
 8010c1e:	f7f0 fa4d 	bl	80010bc <__aeabi_fcmpgt>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d005      	beq.n	8010c34 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7f0 f837 	bl	8000c9c <__aeabi_i2f>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	617b      	str	r3, [r7, #20]
 8010c32:	e015      	b.n	8010c60 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 8010c34:	6838      	ldr	r0, [r7, #0]
 8010c36:	f7f0 f831 	bl	8000c9c <__aeabi_i2f>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	68b8      	ldr	r0, [r7, #8]
 8010c40:	f7f0 fa1e 	bl	8001080 <__aeabi_fcmplt>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d005      	beq.n	8010c56 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 8010c4a:	6838      	ldr	r0, [r7, #0]
 8010c4c:	f7f0 f826 	bl	8000c9c <__aeabi_i2f>
 8010c50:	4603      	mov	r3, r0
 8010c52:	617b      	str	r3, [r7, #20]
 8010c54:	e004      	b.n	8010c60 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	617b      	str	r3, [r7, #20]
 8010c5a:	e001      	b.n	8010c60 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 8010c5c:	4b03      	ldr	r3, [pc, #12]	; (8010c6c <_ZN3PID3SatEfiii+0x70>)
 8010c5e:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 8010c60:	697b      	ldr	r3, [r7, #20]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	447a0000 	.word	0x447a0000

08010c70 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
 8010c7c:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f7f0 f80c 	bl	8000c9c <__aeabi_i2f>
 8010c84:	4603      	mov	r3, r0
 8010c86:	4619      	mov	r1, r3
 8010c88:	68b8      	ldr	r0, [r7, #8]
 8010c8a:	f7f0 fa17 	bl	80010bc <__aeabi_fcmpgt>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d005      	beq.n	8010ca0 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7f0 f801 	bl	8000c9c <__aeabi_i2f>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	617b      	str	r3, [r7, #20]
 8010c9e:	e012      	b.n	8010cc6 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 8010ca0:	6838      	ldr	r0, [r7, #0]
 8010ca2:	f7ef fffb 	bl	8000c9c <__aeabi_i2f>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	4619      	mov	r1, r3
 8010caa:	68b8      	ldr	r0, [r7, #8]
 8010cac:	f7f0 f9e8 	bl	8001080 <__aeabi_fcmplt>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d005      	beq.n	8010cc2 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 8010cb6:	6838      	ldr	r0, [r7, #0]
 8010cb8:	f7ef fff0 	bl	8000c9c <__aeabi_i2f>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e001      	b.n	8010cc6 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 8010cc6:	697b      	ldr	r3, [r7, #20]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3718      	adds	r7, #24
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 8010cda:	4b16      	ldr	r3, [pc, #88]	; (8010d34 <_ZN3PID5F2thrEf+0x64>)
 8010cdc:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 8010cde:	4b16      	ldr	r3, [pc, #88]	; (8010d38 <_ZN3PID5F2thrEf+0x68>)
 8010ce0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 8010ce2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8010ce6:	6838      	ldr	r0, [r7, #0]
 8010ce8:	f7f0 f8e0 	bl	8000eac <__aeabi_fdiv>
 8010cec:	4603      	mov	r3, r0
 8010cee:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 8010cf0:	69f9      	ldr	r1, [r7, #28]
 8010cf2:	6978      	ldr	r0, [r7, #20]
 8010cf4:	f7f0 f8da 	bl	8000eac <__aeabi_fdiv>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f1 ffca 	bl	8002c94 <_ZSt4sqrtf>
 8010d00:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 8010d02:	490e      	ldr	r1, [pc, #56]	; (8010d3c <_ZN3PID5F2thrEf+0x6c>)
 8010d04:	6938      	ldr	r0, [r7, #16]
 8010d06:	f7f0 f81d 	bl	8000d44 <__aeabi_fmul>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	69b9      	ldr	r1, [r7, #24]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7f0 f8cc 	bl	8000eac <__aeabi_fdiv>
 8010d14:	4603      	mov	r3, r0
 8010d16:	4909      	ldr	r1, [pc, #36]	; (8010d3c <_ZN3PID5F2thrEf+0x6c>)
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ef ff0b 	bl	8000b34 <__addsf3>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f0 fa11 	bl	8001148 <__aeabi_f2uiz>
 8010d26:	4603      	mov	r3, r0
 8010d28:	60fb      	str	r3, [r7, #12]
	return thr;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3720      	adds	r7, #32
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	3359f513 	.word	0x3359f513
 8010d38:	46896e00 	.word	0x46896e00
 8010d3c:	447a0000 	.word	0x447a0000

08010d40 <_ZN3PIDD1Ev>:

PID::~PID() {};
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	3338      	adds	r3, #56	; 0x38
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 f876 	bl	8010e3e <_ZN3lpfD1Ev>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	4618      	mov	r0, r3
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 8010d5c:	b480      	push	{r7}
 8010d5e:	b085      	sub	sp, #20
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 8010d68:	68f9      	ldr	r1, [r7, #12]
 8010d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 8010d72:	68f9      	ldr	r1, [r7, #12]
 8010d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010d78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 8010d7c:	68f9      	ldr	r1, [r7, #12]
 8010d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010d82:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3714      	adds	r7, #20
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bc80      	pop	{r7}
 8010d90:	4770      	bx	lr

08010d92 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 8010d92:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ef fb3d 	bl	8000428 <__aeabi_f2d>
 8010dae:	4602      	mov	r2, r0
 8010db0:	460b      	mov	r3, r1
 8010db2:	4620      	mov	r0, r4
 8010db4:	4629      	mov	r1, r5
 8010db6:	f7ef fb8f 	bl	80004d8 <__aeabi_dmul>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	4690      	mov	r8, r2
 8010dc0:	4699      	mov	r9, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8010dc8:	6838      	ldr	r0, [r7, #0]
 8010dca:	f7ef fb2d 	bl	8000428 <__aeabi_f2d>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	f7ef fb7f 	bl	80004d8 <__aeabi_dmul>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	4640      	mov	r0, r8
 8010de0:	4649      	mov	r1, r9
 8010de2:	f7ef f9c3 	bl	800016c <__adddf3>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	4690      	mov	r8, r2
 8010dec:	4699      	mov	r9, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ef fb15 	bl	8000428 <__aeabi_f2d>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	460b      	mov	r3, r1
 8010e02:	4620      	mov	r0, r4
 8010e04:	4629      	mov	r1, r5
 8010e06:	f7ef fb67 	bl	80004d8 <__aeabi_dmul>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef f9ab 	bl	800016c <__adddf3>
 8010e16:	4602      	mov	r2, r0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	f7ef fe33 	bl	8000a88 <__aeabi_d2f>
 8010e22:	4603      	mov	r3, r0
 8010e24:	60fb      	str	r3, [r7, #12]
	x_ = x;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	601a      	str	r2, [r3, #0]
	y_ = y;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	68fa      	ldr	r2, [r7, #12]
 8010e30:	605a      	str	r2, [r3, #4]
	return y;
 8010e32:	68fb      	ldr	r3, [r7, #12]

}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08010e3e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bc80      	pop	{r7}
 8010e50:	4770      	bx	lr
	...

08010e54 <atanf>:
 8010e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e58:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8010e5c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8010e60:	4604      	mov	r4, r0
 8010e62:	4680      	mov	r8, r0
 8010e64:	db0e      	blt.n	8010e84 <atanf+0x30>
 8010e66:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010e6a:	dd04      	ble.n	8010e76 <atanf+0x22>
 8010e6c:	4601      	mov	r1, r0
 8010e6e:	f7ef fe61 	bl	8000b34 <__addsf3>
 8010e72:	4604      	mov	r4, r0
 8010e74:	e003      	b.n	8010e7e <atanf+0x2a>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	f300 80ce 	bgt.w	8011018 <atanf+0x1c4>
 8010e7c:	4c67      	ldr	r4, [pc, #412]	; (801101c <atanf+0x1c8>)
 8010e7e:	4620      	mov	r0, r4
 8010e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e84:	4b66      	ldr	r3, [pc, #408]	; (8011020 <atanf+0x1cc>)
 8010e86:	429d      	cmp	r5, r3
 8010e88:	dc0e      	bgt.n	8010ea8 <atanf+0x54>
 8010e8a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8010e8e:	da08      	bge.n	8010ea2 <atanf+0x4e>
 8010e90:	4964      	ldr	r1, [pc, #400]	; (8011024 <atanf+0x1d0>)
 8010e92:	f7ef fe4f 	bl	8000b34 <__addsf3>
 8010e96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010e9a:	f7f0 f90f 	bl	80010bc <__aeabi_fcmpgt>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d1ed      	bne.n	8010e7e <atanf+0x2a>
 8010ea2:	f04f 36ff 	mov.w	r6, #4294967295
 8010ea6:	e01c      	b.n	8010ee2 <atanf+0x8e>
 8010ea8:	f000 f914 	bl	80110d4 <fabsf>
 8010eac:	4b5e      	ldr	r3, [pc, #376]	; (8011028 <atanf+0x1d4>)
 8010eae:	4604      	mov	r4, r0
 8010eb0:	429d      	cmp	r5, r3
 8010eb2:	dc7c      	bgt.n	8010fae <atanf+0x15a>
 8010eb4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010eb8:	429d      	cmp	r5, r3
 8010eba:	dc67      	bgt.n	8010f8c <atanf+0x138>
 8010ebc:	4601      	mov	r1, r0
 8010ebe:	f7ef fe39 	bl	8000b34 <__addsf3>
 8010ec2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010ec6:	f7ef fe33 	bl	8000b30 <__aeabi_fsub>
 8010eca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010ece:	4605      	mov	r5, r0
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f7ef fe2f 	bl	8000b34 <__addsf3>
 8010ed6:	4601      	mov	r1, r0
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f7ef ffe7 	bl	8000eac <__aeabi_fdiv>
 8010ede:	2600      	movs	r6, #0
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f7ef ff2d 	bl	8000d44 <__aeabi_fmul>
 8010eea:	4601      	mov	r1, r0
 8010eec:	4607      	mov	r7, r0
 8010eee:	f7ef ff29 	bl	8000d44 <__aeabi_fmul>
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	494d      	ldr	r1, [pc, #308]	; (801102c <atanf+0x1d8>)
 8010ef6:	f7ef ff25 	bl	8000d44 <__aeabi_fmul>
 8010efa:	494d      	ldr	r1, [pc, #308]	; (8011030 <atanf+0x1dc>)
 8010efc:	f7ef fe1a 	bl	8000b34 <__addsf3>
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef ff1f 	bl	8000d44 <__aeabi_fmul>
 8010f06:	494b      	ldr	r1, [pc, #300]	; (8011034 <atanf+0x1e0>)
 8010f08:	f7ef fe14 	bl	8000b34 <__addsf3>
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	f7ef ff19 	bl	8000d44 <__aeabi_fmul>
 8010f12:	4949      	ldr	r1, [pc, #292]	; (8011038 <atanf+0x1e4>)
 8010f14:	f7ef fe0e 	bl	8000b34 <__addsf3>
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ef ff13 	bl	8000d44 <__aeabi_fmul>
 8010f1e:	4947      	ldr	r1, [pc, #284]	; (801103c <atanf+0x1e8>)
 8010f20:	f7ef fe08 	bl	8000b34 <__addsf3>
 8010f24:	4629      	mov	r1, r5
 8010f26:	f7ef ff0d 	bl	8000d44 <__aeabi_fmul>
 8010f2a:	4945      	ldr	r1, [pc, #276]	; (8011040 <atanf+0x1ec>)
 8010f2c:	f7ef fe02 	bl	8000b34 <__addsf3>
 8010f30:	4639      	mov	r1, r7
 8010f32:	f7ef ff07 	bl	8000d44 <__aeabi_fmul>
 8010f36:	4943      	ldr	r1, [pc, #268]	; (8011044 <atanf+0x1f0>)
 8010f38:	4607      	mov	r7, r0
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	f7ef ff02 	bl	8000d44 <__aeabi_fmul>
 8010f40:	4941      	ldr	r1, [pc, #260]	; (8011048 <atanf+0x1f4>)
 8010f42:	f7ef fdf5 	bl	8000b30 <__aeabi_fsub>
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7ef fefc 	bl	8000d44 <__aeabi_fmul>
 8010f4c:	493f      	ldr	r1, [pc, #252]	; (801104c <atanf+0x1f8>)
 8010f4e:	f7ef fdef 	bl	8000b30 <__aeabi_fsub>
 8010f52:	4629      	mov	r1, r5
 8010f54:	f7ef fef6 	bl	8000d44 <__aeabi_fmul>
 8010f58:	493d      	ldr	r1, [pc, #244]	; (8011050 <atanf+0x1fc>)
 8010f5a:	f7ef fde9 	bl	8000b30 <__aeabi_fsub>
 8010f5e:	4629      	mov	r1, r5
 8010f60:	f7ef fef0 	bl	8000d44 <__aeabi_fmul>
 8010f64:	493b      	ldr	r1, [pc, #236]	; (8011054 <atanf+0x200>)
 8010f66:	f7ef fde3 	bl	8000b30 <__aeabi_fsub>
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	f7ef feea 	bl	8000d44 <__aeabi_fmul>
 8010f70:	4601      	mov	r1, r0
 8010f72:	4638      	mov	r0, r7
 8010f74:	f7ef fdde 	bl	8000b34 <__addsf3>
 8010f78:	4621      	mov	r1, r4
 8010f7a:	f7ef fee3 	bl	8000d44 <__aeabi_fmul>
 8010f7e:	1c73      	adds	r3, r6, #1
 8010f80:	4601      	mov	r1, r0
 8010f82:	d133      	bne.n	8010fec <atanf+0x198>
 8010f84:	4620      	mov	r0, r4
 8010f86:	f7ef fdd3 	bl	8000b30 <__aeabi_fsub>
 8010f8a:	e772      	b.n	8010e72 <atanf+0x1e>
 8010f8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010f90:	f7ef fdce 	bl	8000b30 <__aeabi_fsub>
 8010f94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010f98:	4605      	mov	r5, r0
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ef fdca 	bl	8000b34 <__addsf3>
 8010fa0:	4601      	mov	r1, r0
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f7ef ff82 	bl	8000eac <__aeabi_fdiv>
 8010fa8:	2601      	movs	r6, #1
 8010faa:	4604      	mov	r4, r0
 8010fac:	e799      	b.n	8010ee2 <atanf+0x8e>
 8010fae:	4b2a      	ldr	r3, [pc, #168]	; (8011058 <atanf+0x204>)
 8010fb0:	429d      	cmp	r5, r3
 8010fb2:	dc14      	bgt.n	8010fde <atanf+0x18a>
 8010fb4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010fb8:	f7ef fdba 	bl	8000b30 <__aeabi_fsub>
 8010fbc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f7ef febe 	bl	8000d44 <__aeabi_fmul>
 8010fc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010fcc:	f7ef fdb2 	bl	8000b34 <__addsf3>
 8010fd0:	4601      	mov	r1, r0
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f7ef ff6a 	bl	8000eac <__aeabi_fdiv>
 8010fd8:	2602      	movs	r6, #2
 8010fda:	4604      	mov	r4, r0
 8010fdc:	e781      	b.n	8010ee2 <atanf+0x8e>
 8010fde:	4601      	mov	r1, r0
 8010fe0:	481e      	ldr	r0, [pc, #120]	; (801105c <atanf+0x208>)
 8010fe2:	f7ef ff63 	bl	8000eac <__aeabi_fdiv>
 8010fe6:	2603      	movs	r6, #3
 8010fe8:	4604      	mov	r4, r0
 8010fea:	e77a      	b.n	8010ee2 <atanf+0x8e>
 8010fec:	4b1c      	ldr	r3, [pc, #112]	; (8011060 <atanf+0x20c>)
 8010fee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8010ff2:	f7ef fd9d 	bl	8000b30 <__aeabi_fsub>
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	f7ef fd9a 	bl	8000b30 <__aeabi_fsub>
 8010ffc:	4b19      	ldr	r3, [pc, #100]	; (8011064 <atanf+0x210>)
 8010ffe:	4601      	mov	r1, r0
 8011000:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011004:	f7ef fd94 	bl	8000b30 <__aeabi_fsub>
 8011008:	f1b8 0f00 	cmp.w	r8, #0
 801100c:	4604      	mov	r4, r0
 801100e:	f6bf af36 	bge.w	8010e7e <atanf+0x2a>
 8011012:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011016:	e72c      	b.n	8010e72 <atanf+0x1e>
 8011018:	4c13      	ldr	r4, [pc, #76]	; (8011068 <atanf+0x214>)
 801101a:	e730      	b.n	8010e7e <atanf+0x2a>
 801101c:	bfc90fdb 	.word	0xbfc90fdb
 8011020:	3edfffff 	.word	0x3edfffff
 8011024:	7149f2ca 	.word	0x7149f2ca
 8011028:	3f97ffff 	.word	0x3f97ffff
 801102c:	3c8569d7 	.word	0x3c8569d7
 8011030:	3d4bda59 	.word	0x3d4bda59
 8011034:	3d886b35 	.word	0x3d886b35
 8011038:	3dba2e6e 	.word	0x3dba2e6e
 801103c:	3e124925 	.word	0x3e124925
 8011040:	3eaaaaab 	.word	0x3eaaaaab
 8011044:	bd15a221 	.word	0xbd15a221
 8011048:	3d6ef16b 	.word	0x3d6ef16b
 801104c:	3d9d8795 	.word	0x3d9d8795
 8011050:	3de38e38 	.word	0x3de38e38
 8011054:	3e4ccccd 	.word	0x3e4ccccd
 8011058:	401bffff 	.word	0x401bffff
 801105c:	bf800000 	.word	0xbf800000
 8011060:	0801438c 	.word	0x0801438c
 8011064:	0801437c 	.word	0x0801437c
 8011068:	3fc90fdb 	.word	0x3fc90fdb

0801106c <cosf>:
 801106c:	b507      	push	{r0, r1, r2, lr}
 801106e:	4a18      	ldr	r2, [pc, #96]	; (80110d0 <cosf+0x64>)
 8011070:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011074:	4293      	cmp	r3, r2
 8011076:	4601      	mov	r1, r0
 8011078:	dc03      	bgt.n	8011082 <cosf+0x16>
 801107a:	2100      	movs	r1, #0
 801107c:	f001 fac4 	bl	8012608 <__kernel_cosf>
 8011080:	e004      	b.n	801108c <cosf+0x20>
 8011082:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011086:	db04      	blt.n	8011092 <cosf+0x26>
 8011088:	f7ef fd52 	bl	8000b30 <__aeabi_fsub>
 801108c:	b003      	add	sp, #12
 801108e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011092:	4669      	mov	r1, sp
 8011094:	f001 f908 	bl	80122a8 <__ieee754_rem_pio2f>
 8011098:	f000 0203 	and.w	r2, r0, #3
 801109c:	2a01      	cmp	r2, #1
 801109e:	d005      	beq.n	80110ac <cosf+0x40>
 80110a0:	2a02      	cmp	r2, #2
 80110a2:	d00a      	beq.n	80110ba <cosf+0x4e>
 80110a4:	b972      	cbnz	r2, 80110c4 <cosf+0x58>
 80110a6:	9901      	ldr	r1, [sp, #4]
 80110a8:	9800      	ldr	r0, [sp, #0]
 80110aa:	e7e7      	b.n	801107c <cosf+0x10>
 80110ac:	9901      	ldr	r1, [sp, #4]
 80110ae:	9800      	ldr	r0, [sp, #0]
 80110b0:	f001 fde0 	bl	8012c74 <__kernel_sinf>
 80110b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80110b8:	e7e8      	b.n	801108c <cosf+0x20>
 80110ba:	9901      	ldr	r1, [sp, #4]
 80110bc:	9800      	ldr	r0, [sp, #0]
 80110be:	f001 faa3 	bl	8012608 <__kernel_cosf>
 80110c2:	e7f7      	b.n	80110b4 <cosf+0x48>
 80110c4:	2201      	movs	r2, #1
 80110c6:	9901      	ldr	r1, [sp, #4]
 80110c8:	9800      	ldr	r0, [sp, #0]
 80110ca:	f001 fdd3 	bl	8012c74 <__kernel_sinf>
 80110ce:	e7dd      	b.n	801108c <cosf+0x20>
 80110d0:	3f490fd8 	.word	0x3f490fd8

080110d4 <fabsf>:
 80110d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80110d8:	4770      	bx	lr
	...

080110dc <sinf>:
 80110dc:	b507      	push	{r0, r1, r2, lr}
 80110de:	4a19      	ldr	r2, [pc, #100]	; (8011144 <sinf+0x68>)
 80110e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80110e4:	4293      	cmp	r3, r2
 80110e6:	4601      	mov	r1, r0
 80110e8:	dc04      	bgt.n	80110f4 <sinf+0x18>
 80110ea:	2200      	movs	r2, #0
 80110ec:	2100      	movs	r1, #0
 80110ee:	f001 fdc1 	bl	8012c74 <__kernel_sinf>
 80110f2:	e004      	b.n	80110fe <sinf+0x22>
 80110f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80110f8:	db04      	blt.n	8011104 <sinf+0x28>
 80110fa:	f7ef fd19 	bl	8000b30 <__aeabi_fsub>
 80110fe:	b003      	add	sp, #12
 8011100:	f85d fb04 	ldr.w	pc, [sp], #4
 8011104:	4669      	mov	r1, sp
 8011106:	f001 f8cf 	bl	80122a8 <__ieee754_rem_pio2f>
 801110a:	f000 0003 	and.w	r0, r0, #3
 801110e:	2801      	cmp	r0, #1
 8011110:	d006      	beq.n	8011120 <sinf+0x44>
 8011112:	2802      	cmp	r0, #2
 8011114:	d009      	beq.n	801112a <sinf+0x4e>
 8011116:	b980      	cbnz	r0, 801113a <sinf+0x5e>
 8011118:	2201      	movs	r2, #1
 801111a:	9901      	ldr	r1, [sp, #4]
 801111c:	9800      	ldr	r0, [sp, #0]
 801111e:	e7e6      	b.n	80110ee <sinf+0x12>
 8011120:	9901      	ldr	r1, [sp, #4]
 8011122:	9800      	ldr	r0, [sp, #0]
 8011124:	f001 fa70 	bl	8012608 <__kernel_cosf>
 8011128:	e7e9      	b.n	80110fe <sinf+0x22>
 801112a:	2201      	movs	r2, #1
 801112c:	9901      	ldr	r1, [sp, #4]
 801112e:	9800      	ldr	r0, [sp, #0]
 8011130:	f001 fda0 	bl	8012c74 <__kernel_sinf>
 8011134:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011138:	e7e1      	b.n	80110fe <sinf+0x22>
 801113a:	9901      	ldr	r1, [sp, #4]
 801113c:	9800      	ldr	r0, [sp, #0]
 801113e:	f001 fa63 	bl	8012608 <__kernel_cosf>
 8011142:	e7f7      	b.n	8011134 <sinf+0x58>
 8011144:	3f490fd8 	.word	0x3f490fd8

08011148 <pow>:
 8011148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801114c:	461f      	mov	r7, r3
 801114e:	4680      	mov	r8, r0
 8011150:	4689      	mov	r9, r1
 8011152:	4616      	mov	r6, r2
 8011154:	f000 f91c 	bl	8011390 <__ieee754_pow>
 8011158:	4b4d      	ldr	r3, [pc, #308]	; (8011290 <pow+0x148>)
 801115a:	4604      	mov	r4, r0
 801115c:	f993 3000 	ldrsb.w	r3, [r3]
 8011160:	460d      	mov	r5, r1
 8011162:	3301      	adds	r3, #1
 8011164:	d015      	beq.n	8011192 <pow+0x4a>
 8011166:	4632      	mov	r2, r6
 8011168:	463b      	mov	r3, r7
 801116a:	4630      	mov	r0, r6
 801116c:	4639      	mov	r1, r7
 801116e:	f7ef fc4d 	bl	8000a0c <__aeabi_dcmpun>
 8011172:	b970      	cbnz	r0, 8011192 <pow+0x4a>
 8011174:	4642      	mov	r2, r8
 8011176:	464b      	mov	r3, r9
 8011178:	4640      	mov	r0, r8
 801117a:	4649      	mov	r1, r9
 801117c:	f7ef fc46 	bl	8000a0c <__aeabi_dcmpun>
 8011180:	2200      	movs	r2, #0
 8011182:	2300      	movs	r3, #0
 8011184:	b148      	cbz	r0, 801119a <pow+0x52>
 8011186:	4630      	mov	r0, r6
 8011188:	4639      	mov	r1, r7
 801118a:	f7ef fc0d 	bl	80009a8 <__aeabi_dcmpeq>
 801118e:	2800      	cmp	r0, #0
 8011190:	d17b      	bne.n	801128a <pow+0x142>
 8011192:	4620      	mov	r0, r4
 8011194:	4629      	mov	r1, r5
 8011196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801119a:	4640      	mov	r0, r8
 801119c:	4649      	mov	r1, r9
 801119e:	f7ef fc03 	bl	80009a8 <__aeabi_dcmpeq>
 80111a2:	b1e0      	cbz	r0, 80111de <pow+0x96>
 80111a4:	2200      	movs	r2, #0
 80111a6:	2300      	movs	r3, #0
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d16a      	bne.n	801128a <pow+0x142>
 80111b4:	4630      	mov	r0, r6
 80111b6:	4639      	mov	r1, r7
 80111b8:	f001 fdd5 	bl	8012d66 <finite>
 80111bc:	2800      	cmp	r0, #0
 80111be:	d0e8      	beq.n	8011192 <pow+0x4a>
 80111c0:	2200      	movs	r2, #0
 80111c2:	2300      	movs	r3, #0
 80111c4:	4630      	mov	r0, r6
 80111c6:	4639      	mov	r1, r7
 80111c8:	f7ef fbf8 	bl	80009bc <__aeabi_dcmplt>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d0e0      	beq.n	8011192 <pow+0x4a>
 80111d0:	f001 ff7e 	bl	80130d0 <__errno>
 80111d4:	2321      	movs	r3, #33	; 0x21
 80111d6:	2400      	movs	r4, #0
 80111d8:	6003      	str	r3, [r0, #0]
 80111da:	4d2e      	ldr	r5, [pc, #184]	; (8011294 <pow+0x14c>)
 80111dc:	e7d9      	b.n	8011192 <pow+0x4a>
 80111de:	4620      	mov	r0, r4
 80111e0:	4629      	mov	r1, r5
 80111e2:	f001 fdc0 	bl	8012d66 <finite>
 80111e6:	bba8      	cbnz	r0, 8011254 <pow+0x10c>
 80111e8:	4640      	mov	r0, r8
 80111ea:	4649      	mov	r1, r9
 80111ec:	f001 fdbb 	bl	8012d66 <finite>
 80111f0:	b380      	cbz	r0, 8011254 <pow+0x10c>
 80111f2:	4630      	mov	r0, r6
 80111f4:	4639      	mov	r1, r7
 80111f6:	f001 fdb6 	bl	8012d66 <finite>
 80111fa:	b358      	cbz	r0, 8011254 <pow+0x10c>
 80111fc:	4622      	mov	r2, r4
 80111fe:	462b      	mov	r3, r5
 8011200:	4620      	mov	r0, r4
 8011202:	4629      	mov	r1, r5
 8011204:	f7ef fc02 	bl	8000a0c <__aeabi_dcmpun>
 8011208:	b160      	cbz	r0, 8011224 <pow+0xdc>
 801120a:	f001 ff61 	bl	80130d0 <__errno>
 801120e:	2321      	movs	r3, #33	; 0x21
 8011210:	2200      	movs	r2, #0
 8011212:	6003      	str	r3, [r0, #0]
 8011214:	2300      	movs	r3, #0
 8011216:	4610      	mov	r0, r2
 8011218:	4619      	mov	r1, r3
 801121a:	f7ef fa87 	bl	800072c <__aeabi_ddiv>
 801121e:	4604      	mov	r4, r0
 8011220:	460d      	mov	r5, r1
 8011222:	e7b6      	b.n	8011192 <pow+0x4a>
 8011224:	f001 ff54 	bl	80130d0 <__errno>
 8011228:	2322      	movs	r3, #34	; 0x22
 801122a:	2200      	movs	r2, #0
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	4649      	mov	r1, r9
 8011230:	2300      	movs	r3, #0
 8011232:	4640      	mov	r0, r8
 8011234:	f7ef fbc2 	bl	80009bc <__aeabi_dcmplt>
 8011238:	2400      	movs	r4, #0
 801123a:	b148      	cbz	r0, 8011250 <pow+0x108>
 801123c:	4630      	mov	r0, r6
 801123e:	4639      	mov	r1, r7
 8011240:	f001 fd9e 	bl	8012d80 <rint>
 8011244:	4632      	mov	r2, r6
 8011246:	463b      	mov	r3, r7
 8011248:	f7ef fbae 	bl	80009a8 <__aeabi_dcmpeq>
 801124c:	2800      	cmp	r0, #0
 801124e:	d0c4      	beq.n	80111da <pow+0x92>
 8011250:	4d11      	ldr	r5, [pc, #68]	; (8011298 <pow+0x150>)
 8011252:	e79e      	b.n	8011192 <pow+0x4a>
 8011254:	2200      	movs	r2, #0
 8011256:	2300      	movs	r3, #0
 8011258:	4620      	mov	r0, r4
 801125a:	4629      	mov	r1, r5
 801125c:	f7ef fba4 	bl	80009a8 <__aeabi_dcmpeq>
 8011260:	2800      	cmp	r0, #0
 8011262:	d096      	beq.n	8011192 <pow+0x4a>
 8011264:	4640      	mov	r0, r8
 8011266:	4649      	mov	r1, r9
 8011268:	f001 fd7d 	bl	8012d66 <finite>
 801126c:	2800      	cmp	r0, #0
 801126e:	d090      	beq.n	8011192 <pow+0x4a>
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f001 fd77 	bl	8012d66 <finite>
 8011278:	2800      	cmp	r0, #0
 801127a:	d08a      	beq.n	8011192 <pow+0x4a>
 801127c:	f001 ff28 	bl	80130d0 <__errno>
 8011280:	2322      	movs	r3, #34	; 0x22
 8011282:	2400      	movs	r4, #0
 8011284:	2500      	movs	r5, #0
 8011286:	6003      	str	r3, [r0, #0]
 8011288:	e783      	b.n	8011192 <pow+0x4a>
 801128a:	2400      	movs	r4, #0
 801128c:	4d03      	ldr	r5, [pc, #12]	; (801129c <pow+0x154>)
 801128e:	e780      	b.n	8011192 <pow+0x4a>
 8011290:	2000000d 	.word	0x2000000d
 8011294:	fff00000 	.word	0xfff00000
 8011298:	7ff00000 	.word	0x7ff00000
 801129c:	3ff00000 	.word	0x3ff00000

080112a0 <sqrt>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	4606      	mov	r6, r0
 80112a4:	460f      	mov	r7, r1
 80112a6:	f000 fd89 	bl	8011dbc <__ieee754_sqrt>
 80112aa:	4b12      	ldr	r3, [pc, #72]	; (80112f4 <sqrt+0x54>)
 80112ac:	4604      	mov	r4, r0
 80112ae:	f993 3000 	ldrsb.w	r3, [r3]
 80112b2:	460d      	mov	r5, r1
 80112b4:	3301      	adds	r3, #1
 80112b6:	d019      	beq.n	80112ec <sqrt+0x4c>
 80112b8:	4632      	mov	r2, r6
 80112ba:	463b      	mov	r3, r7
 80112bc:	4630      	mov	r0, r6
 80112be:	4639      	mov	r1, r7
 80112c0:	f7ef fba4 	bl	8000a0c <__aeabi_dcmpun>
 80112c4:	b990      	cbnz	r0, 80112ec <sqrt+0x4c>
 80112c6:	2200      	movs	r2, #0
 80112c8:	2300      	movs	r3, #0
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ef fb75 	bl	80009bc <__aeabi_dcmplt>
 80112d2:	b158      	cbz	r0, 80112ec <sqrt+0x4c>
 80112d4:	f001 fefc 	bl	80130d0 <__errno>
 80112d8:	2321      	movs	r3, #33	; 0x21
 80112da:	2200      	movs	r2, #0
 80112dc:	6003      	str	r3, [r0, #0]
 80112de:	2300      	movs	r3, #0
 80112e0:	4610      	mov	r0, r2
 80112e2:	4619      	mov	r1, r3
 80112e4:	f7ef fa22 	bl	800072c <__aeabi_ddiv>
 80112e8:	4604      	mov	r4, r0
 80112ea:	460d      	mov	r5, r1
 80112ec:	4620      	mov	r0, r4
 80112ee:	4629      	mov	r1, r5
 80112f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f2:	bf00      	nop
 80112f4:	2000000d 	.word	0x2000000d

080112f8 <asinf>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	4604      	mov	r4, r0
 80112fc:	f000 fe0a 	bl	8011f14 <__ieee754_asinf>
 8011300:	4b0e      	ldr	r3, [pc, #56]	; (801133c <asinf+0x44>)
 8011302:	4605      	mov	r5, r0
 8011304:	f993 3000 	ldrsb.w	r3, [r3]
 8011308:	3301      	adds	r3, #1
 801130a:	d015      	beq.n	8011338 <asinf+0x40>
 801130c:	4621      	mov	r1, r4
 801130e:	4620      	mov	r0, r4
 8011310:	f7ef fede 	bl	80010d0 <__aeabi_fcmpun>
 8011314:	b980      	cbnz	r0, 8011338 <asinf+0x40>
 8011316:	4620      	mov	r0, r4
 8011318:	f7ff fedc 	bl	80110d4 <fabsf>
 801131c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011320:	f7ef fecc 	bl	80010bc <__aeabi_fcmpgt>
 8011324:	b140      	cbz	r0, 8011338 <asinf+0x40>
 8011326:	f001 fed3 	bl	80130d0 <__errno>
 801132a:	2321      	movs	r3, #33	; 0x21
 801132c:	6003      	str	r3, [r0, #0]
 801132e:	4804      	ldr	r0, [pc, #16]	; (8011340 <asinf+0x48>)
 8011330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011334:	f001 be78 	b.w	8013028 <nanf>
 8011338:	4628      	mov	r0, r5
 801133a:	bd38      	pop	{r3, r4, r5, pc}
 801133c:	2000000d 	.word	0x2000000d
 8011340:	0801487f 	.word	0x0801487f

08011344 <atan2f>:
 8011344:	f000 bf2a 	b.w	801219c <__ieee754_atan2f>

08011348 <sqrtf>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4605      	mov	r5, r0
 801134c:	f001 f90a 	bl	8012564 <__ieee754_sqrtf>
 8011350:	4b0d      	ldr	r3, [pc, #52]	; (8011388 <sqrtf+0x40>)
 8011352:	4604      	mov	r4, r0
 8011354:	f993 3000 	ldrsb.w	r3, [r3]
 8011358:	3301      	adds	r3, #1
 801135a:	d012      	beq.n	8011382 <sqrtf+0x3a>
 801135c:	4629      	mov	r1, r5
 801135e:	4628      	mov	r0, r5
 8011360:	f7ef feb6 	bl	80010d0 <__aeabi_fcmpun>
 8011364:	b968      	cbnz	r0, 8011382 <sqrtf+0x3a>
 8011366:	2100      	movs	r1, #0
 8011368:	4628      	mov	r0, r5
 801136a:	f7ef fe89 	bl	8001080 <__aeabi_fcmplt>
 801136e:	b140      	cbz	r0, 8011382 <sqrtf+0x3a>
 8011370:	f001 feae 	bl	80130d0 <__errno>
 8011374:	2321      	movs	r3, #33	; 0x21
 8011376:	2100      	movs	r1, #0
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	4608      	mov	r0, r1
 801137c:	f7ef fd96 	bl	8000eac <__aeabi_fdiv>
 8011380:	4604      	mov	r4, r0
 8011382:	4620      	mov	r0, r4
 8011384:	bd38      	pop	{r3, r4, r5, pc}
 8011386:	bf00      	nop
 8011388:	2000000d 	.word	0x2000000d
 801138c:	00000000 	.word	0x00000000

08011390 <__ieee754_pow>:
 8011390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011394:	b093      	sub	sp, #76	; 0x4c
 8011396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801139a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801139e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80113a2:	ea55 0302 	orrs.w	r3, r5, r2
 80113a6:	4607      	mov	r7, r0
 80113a8:	4688      	mov	r8, r1
 80113aa:	f000 84bf 	beq.w	8011d2c <__ieee754_pow+0x99c>
 80113ae:	4b7e      	ldr	r3, [pc, #504]	; (80115a8 <__ieee754_pow+0x218>)
 80113b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80113b4:	429c      	cmp	r4, r3
 80113b6:	4689      	mov	r9, r1
 80113b8:	4682      	mov	sl, r0
 80113ba:	dc09      	bgt.n	80113d0 <__ieee754_pow+0x40>
 80113bc:	d103      	bne.n	80113c6 <__ieee754_pow+0x36>
 80113be:	b978      	cbnz	r0, 80113e0 <__ieee754_pow+0x50>
 80113c0:	42a5      	cmp	r5, r4
 80113c2:	dd02      	ble.n	80113ca <__ieee754_pow+0x3a>
 80113c4:	e00c      	b.n	80113e0 <__ieee754_pow+0x50>
 80113c6:	429d      	cmp	r5, r3
 80113c8:	dc02      	bgt.n	80113d0 <__ieee754_pow+0x40>
 80113ca:	429d      	cmp	r5, r3
 80113cc:	d10e      	bne.n	80113ec <__ieee754_pow+0x5c>
 80113ce:	b16a      	cbz	r2, 80113ec <__ieee754_pow+0x5c>
 80113d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80113d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80113d8:	ea54 030a 	orrs.w	r3, r4, sl
 80113dc:	f000 84a6 	beq.w	8011d2c <__ieee754_pow+0x99c>
 80113e0:	4872      	ldr	r0, [pc, #456]	; (80115ac <__ieee754_pow+0x21c>)
 80113e2:	b013      	add	sp, #76	; 0x4c
 80113e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e8:	f001 bcc4 	b.w	8012d74 <nan>
 80113ec:	f1b9 0f00 	cmp.w	r9, #0
 80113f0:	da39      	bge.n	8011466 <__ieee754_pow+0xd6>
 80113f2:	4b6f      	ldr	r3, [pc, #444]	; (80115b0 <__ieee754_pow+0x220>)
 80113f4:	429d      	cmp	r5, r3
 80113f6:	dc54      	bgt.n	80114a2 <__ieee754_pow+0x112>
 80113f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80113fc:	429d      	cmp	r5, r3
 80113fe:	f340 84a6 	ble.w	8011d4e <__ieee754_pow+0x9be>
 8011402:	152b      	asrs	r3, r5, #20
 8011404:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011408:	2b14      	cmp	r3, #20
 801140a:	dd0f      	ble.n	801142c <__ieee754_pow+0x9c>
 801140c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011410:	fa22 f103 	lsr.w	r1, r2, r3
 8011414:	fa01 f303 	lsl.w	r3, r1, r3
 8011418:	4293      	cmp	r3, r2
 801141a:	f040 8498 	bne.w	8011d4e <__ieee754_pow+0x9be>
 801141e:	f001 0101 	and.w	r1, r1, #1
 8011422:	f1c1 0302 	rsb	r3, r1, #2
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	b182      	cbz	r2, 801144c <__ieee754_pow+0xbc>
 801142a:	e05e      	b.n	80114ea <__ieee754_pow+0x15a>
 801142c:	2a00      	cmp	r2, #0
 801142e:	d15a      	bne.n	80114e6 <__ieee754_pow+0x156>
 8011430:	f1c3 0314 	rsb	r3, r3, #20
 8011434:	fa45 f103 	asr.w	r1, r5, r3
 8011438:	fa01 f303 	lsl.w	r3, r1, r3
 801143c:	42ab      	cmp	r3, r5
 801143e:	f040 8483 	bne.w	8011d48 <__ieee754_pow+0x9b8>
 8011442:	f001 0101 	and.w	r1, r1, #1
 8011446:	f1c1 0302 	rsb	r3, r1, #2
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	4b59      	ldr	r3, [pc, #356]	; (80115b4 <__ieee754_pow+0x224>)
 801144e:	429d      	cmp	r5, r3
 8011450:	d130      	bne.n	80114b4 <__ieee754_pow+0x124>
 8011452:	2e00      	cmp	r6, #0
 8011454:	f280 8474 	bge.w	8011d40 <__ieee754_pow+0x9b0>
 8011458:	463a      	mov	r2, r7
 801145a:	4643      	mov	r3, r8
 801145c:	2000      	movs	r0, #0
 801145e:	4955      	ldr	r1, [pc, #340]	; (80115b4 <__ieee754_pow+0x224>)
 8011460:	f7ef f964 	bl	800072c <__aeabi_ddiv>
 8011464:	e02f      	b.n	80114c6 <__ieee754_pow+0x136>
 8011466:	2300      	movs	r3, #0
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	2a00      	cmp	r2, #0
 801146c:	d13d      	bne.n	80114ea <__ieee754_pow+0x15a>
 801146e:	4b4e      	ldr	r3, [pc, #312]	; (80115a8 <__ieee754_pow+0x218>)
 8011470:	429d      	cmp	r5, r3
 8011472:	d1eb      	bne.n	801144c <__ieee754_pow+0xbc>
 8011474:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011478:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801147c:	ea53 030a 	orrs.w	r3, r3, sl
 8011480:	f000 8454 	beq.w	8011d2c <__ieee754_pow+0x99c>
 8011484:	4b4c      	ldr	r3, [pc, #304]	; (80115b8 <__ieee754_pow+0x228>)
 8011486:	429c      	cmp	r4, r3
 8011488:	dd0d      	ble.n	80114a6 <__ieee754_pow+0x116>
 801148a:	2e00      	cmp	r6, #0
 801148c:	f280 8454 	bge.w	8011d38 <__ieee754_pow+0x9a8>
 8011490:	f04f 0b00 	mov.w	fp, #0
 8011494:	f04f 0c00 	mov.w	ip, #0
 8011498:	4658      	mov	r0, fp
 801149a:	4661      	mov	r1, ip
 801149c:	b013      	add	sp, #76	; 0x4c
 801149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a2:	2302      	movs	r3, #2
 80114a4:	e7e0      	b.n	8011468 <__ieee754_pow+0xd8>
 80114a6:	2e00      	cmp	r6, #0
 80114a8:	daf2      	bge.n	8011490 <__ieee754_pow+0x100>
 80114aa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80114ae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80114b2:	e7f1      	b.n	8011498 <__ieee754_pow+0x108>
 80114b4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80114b8:	d108      	bne.n	80114cc <__ieee754_pow+0x13c>
 80114ba:	463a      	mov	r2, r7
 80114bc:	4643      	mov	r3, r8
 80114be:	4638      	mov	r0, r7
 80114c0:	4641      	mov	r1, r8
 80114c2:	f7ef f809 	bl	80004d8 <__aeabi_dmul>
 80114c6:	4683      	mov	fp, r0
 80114c8:	468c      	mov	ip, r1
 80114ca:	e7e5      	b.n	8011498 <__ieee754_pow+0x108>
 80114cc:	4b3b      	ldr	r3, [pc, #236]	; (80115bc <__ieee754_pow+0x22c>)
 80114ce:	429e      	cmp	r6, r3
 80114d0:	d10b      	bne.n	80114ea <__ieee754_pow+0x15a>
 80114d2:	f1b9 0f00 	cmp.w	r9, #0
 80114d6:	db08      	blt.n	80114ea <__ieee754_pow+0x15a>
 80114d8:	4638      	mov	r0, r7
 80114da:	4641      	mov	r1, r8
 80114dc:	b013      	add	sp, #76	; 0x4c
 80114de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e2:	f000 bc6b 	b.w	8011dbc <__ieee754_sqrt>
 80114e6:	2300      	movs	r3, #0
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	4638      	mov	r0, r7
 80114ec:	4641      	mov	r1, r8
 80114ee:	f001 fc37 	bl	8012d60 <fabs>
 80114f2:	4683      	mov	fp, r0
 80114f4:	468c      	mov	ip, r1
 80114f6:	f1ba 0f00 	cmp.w	sl, #0
 80114fa:	d129      	bne.n	8011550 <__ieee754_pow+0x1c0>
 80114fc:	b124      	cbz	r4, 8011508 <__ieee754_pow+0x178>
 80114fe:	4b2d      	ldr	r3, [pc, #180]	; (80115b4 <__ieee754_pow+0x224>)
 8011500:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8011504:	429a      	cmp	r2, r3
 8011506:	d123      	bne.n	8011550 <__ieee754_pow+0x1c0>
 8011508:	2e00      	cmp	r6, #0
 801150a:	da07      	bge.n	801151c <__ieee754_pow+0x18c>
 801150c:	465a      	mov	r2, fp
 801150e:	4663      	mov	r3, ip
 8011510:	2000      	movs	r0, #0
 8011512:	4928      	ldr	r1, [pc, #160]	; (80115b4 <__ieee754_pow+0x224>)
 8011514:	f7ef f90a 	bl	800072c <__aeabi_ddiv>
 8011518:	4683      	mov	fp, r0
 801151a:	468c      	mov	ip, r1
 801151c:	f1b9 0f00 	cmp.w	r9, #0
 8011520:	daba      	bge.n	8011498 <__ieee754_pow+0x108>
 8011522:	9b00      	ldr	r3, [sp, #0]
 8011524:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011528:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801152c:	4323      	orrs	r3, r4
 801152e:	d108      	bne.n	8011542 <__ieee754_pow+0x1b2>
 8011530:	465a      	mov	r2, fp
 8011532:	4663      	mov	r3, ip
 8011534:	4658      	mov	r0, fp
 8011536:	4661      	mov	r1, ip
 8011538:	f7ee fe16 	bl	8000168 <__aeabi_dsub>
 801153c:	4602      	mov	r2, r0
 801153e:	460b      	mov	r3, r1
 8011540:	e78e      	b.n	8011460 <__ieee754_pow+0xd0>
 8011542:	9b00      	ldr	r3, [sp, #0]
 8011544:	2b01      	cmp	r3, #1
 8011546:	d1a7      	bne.n	8011498 <__ieee754_pow+0x108>
 8011548:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801154c:	469c      	mov	ip, r3
 801154e:	e7a3      	b.n	8011498 <__ieee754_pow+0x108>
 8011550:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8011554:	3b01      	subs	r3, #1
 8011556:	930c      	str	r3, [sp, #48]	; 0x30
 8011558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801155a:	9b00      	ldr	r3, [sp, #0]
 801155c:	4313      	orrs	r3, r2
 801155e:	d104      	bne.n	801156a <__ieee754_pow+0x1da>
 8011560:	463a      	mov	r2, r7
 8011562:	4643      	mov	r3, r8
 8011564:	4638      	mov	r0, r7
 8011566:	4641      	mov	r1, r8
 8011568:	e7e6      	b.n	8011538 <__ieee754_pow+0x1a8>
 801156a:	4b15      	ldr	r3, [pc, #84]	; (80115c0 <__ieee754_pow+0x230>)
 801156c:	429d      	cmp	r5, r3
 801156e:	f340 80f9 	ble.w	8011764 <__ieee754_pow+0x3d4>
 8011572:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011576:	429d      	cmp	r5, r3
 8011578:	4b0f      	ldr	r3, [pc, #60]	; (80115b8 <__ieee754_pow+0x228>)
 801157a:	dd09      	ble.n	8011590 <__ieee754_pow+0x200>
 801157c:	429c      	cmp	r4, r3
 801157e:	dc0c      	bgt.n	801159a <__ieee754_pow+0x20a>
 8011580:	2e00      	cmp	r6, #0
 8011582:	da85      	bge.n	8011490 <__ieee754_pow+0x100>
 8011584:	a306      	add	r3, pc, #24	; (adr r3, 80115a0 <__ieee754_pow+0x210>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	4610      	mov	r0, r2
 801158c:	4619      	mov	r1, r3
 801158e:	e798      	b.n	80114c2 <__ieee754_pow+0x132>
 8011590:	429c      	cmp	r4, r3
 8011592:	dbf5      	blt.n	8011580 <__ieee754_pow+0x1f0>
 8011594:	4b07      	ldr	r3, [pc, #28]	; (80115b4 <__ieee754_pow+0x224>)
 8011596:	429c      	cmp	r4, r3
 8011598:	dd14      	ble.n	80115c4 <__ieee754_pow+0x234>
 801159a:	2e00      	cmp	r6, #0
 801159c:	dcf2      	bgt.n	8011584 <__ieee754_pow+0x1f4>
 801159e:	e777      	b.n	8011490 <__ieee754_pow+0x100>
 80115a0:	8800759c 	.word	0x8800759c
 80115a4:	7e37e43c 	.word	0x7e37e43c
 80115a8:	7ff00000 	.word	0x7ff00000
 80115ac:	0801487f 	.word	0x0801487f
 80115b0:	433fffff 	.word	0x433fffff
 80115b4:	3ff00000 	.word	0x3ff00000
 80115b8:	3fefffff 	.word	0x3fefffff
 80115bc:	3fe00000 	.word	0x3fe00000
 80115c0:	41e00000 	.word	0x41e00000
 80115c4:	4661      	mov	r1, ip
 80115c6:	2200      	movs	r2, #0
 80115c8:	4658      	mov	r0, fp
 80115ca:	4b61      	ldr	r3, [pc, #388]	; (8011750 <__ieee754_pow+0x3c0>)
 80115cc:	f7ee fdcc 	bl	8000168 <__aeabi_dsub>
 80115d0:	a355      	add	r3, pc, #340	; (adr r3, 8011728 <__ieee754_pow+0x398>)
 80115d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d6:	4604      	mov	r4, r0
 80115d8:	460d      	mov	r5, r1
 80115da:	f7ee ff7d 	bl	80004d8 <__aeabi_dmul>
 80115de:	a354      	add	r3, pc, #336	; (adr r3, 8011730 <__ieee754_pow+0x3a0>)
 80115e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e4:	4606      	mov	r6, r0
 80115e6:	460f      	mov	r7, r1
 80115e8:	4620      	mov	r0, r4
 80115ea:	4629      	mov	r1, r5
 80115ec:	f7ee ff74 	bl	80004d8 <__aeabi_dmul>
 80115f0:	2200      	movs	r2, #0
 80115f2:	4682      	mov	sl, r0
 80115f4:	468b      	mov	fp, r1
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	4b56      	ldr	r3, [pc, #344]	; (8011754 <__ieee754_pow+0x3c4>)
 80115fc:	f7ee ff6c 	bl	80004d8 <__aeabi_dmul>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	a14c      	add	r1, pc, #304	; (adr r1, 8011738 <__ieee754_pow+0x3a8>)
 8011606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801160a:	f7ee fdad 	bl	8000168 <__aeabi_dsub>
 801160e:	4622      	mov	r2, r4
 8011610:	462b      	mov	r3, r5
 8011612:	f7ee ff61 	bl	80004d8 <__aeabi_dmul>
 8011616:	4602      	mov	r2, r0
 8011618:	460b      	mov	r3, r1
 801161a:	2000      	movs	r0, #0
 801161c:	494e      	ldr	r1, [pc, #312]	; (8011758 <__ieee754_pow+0x3c8>)
 801161e:	f7ee fda3 	bl	8000168 <__aeabi_dsub>
 8011622:	4622      	mov	r2, r4
 8011624:	462b      	mov	r3, r5
 8011626:	4680      	mov	r8, r0
 8011628:	4689      	mov	r9, r1
 801162a:	4620      	mov	r0, r4
 801162c:	4629      	mov	r1, r5
 801162e:	f7ee ff53 	bl	80004d8 <__aeabi_dmul>
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	4640      	mov	r0, r8
 8011638:	4649      	mov	r1, r9
 801163a:	f7ee ff4d 	bl	80004d8 <__aeabi_dmul>
 801163e:	a340      	add	r3, pc, #256	; (adr r3, 8011740 <__ieee754_pow+0x3b0>)
 8011640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011644:	f7ee ff48 	bl	80004d8 <__aeabi_dmul>
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4650      	mov	r0, sl
 801164e:	4659      	mov	r1, fp
 8011650:	f7ee fd8a 	bl	8000168 <__aeabi_dsub>
 8011654:	f04f 0a00 	mov.w	sl, #0
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	4604      	mov	r4, r0
 801165e:	460d      	mov	r5, r1
 8011660:	4630      	mov	r0, r6
 8011662:	4639      	mov	r1, r7
 8011664:	f7ee fd82 	bl	800016c <__adddf3>
 8011668:	4632      	mov	r2, r6
 801166a:	463b      	mov	r3, r7
 801166c:	4650      	mov	r0, sl
 801166e:	468b      	mov	fp, r1
 8011670:	f7ee fd7a 	bl	8000168 <__aeabi_dsub>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	4620      	mov	r0, r4
 801167a:	4629      	mov	r1, r5
 801167c:	f7ee fd74 	bl	8000168 <__aeabi_dsub>
 8011680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011684:	9b00      	ldr	r3, [sp, #0]
 8011686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011688:	3b01      	subs	r3, #1
 801168a:	4313      	orrs	r3, r2
 801168c:	f04f 0600 	mov.w	r6, #0
 8011690:	f04f 0200 	mov.w	r2, #0
 8011694:	bf0c      	ite	eq
 8011696:	4b31      	ldreq	r3, [pc, #196]	; (801175c <__ieee754_pow+0x3cc>)
 8011698:	4b2d      	ldrne	r3, [pc, #180]	; (8011750 <__ieee754_pow+0x3c0>)
 801169a:	4604      	mov	r4, r0
 801169c:	460d      	mov	r5, r1
 801169e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116a2:	e9cd 2300 	strd	r2, r3, [sp]
 80116a6:	4632      	mov	r2, r6
 80116a8:	463b      	mov	r3, r7
 80116aa:	f7ee fd5d 	bl	8000168 <__aeabi_dsub>
 80116ae:	4652      	mov	r2, sl
 80116b0:	465b      	mov	r3, fp
 80116b2:	f7ee ff11 	bl	80004d8 <__aeabi_dmul>
 80116b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116ba:	4680      	mov	r8, r0
 80116bc:	4689      	mov	r9, r1
 80116be:	4620      	mov	r0, r4
 80116c0:	4629      	mov	r1, r5
 80116c2:	f7ee ff09 	bl	80004d8 <__aeabi_dmul>
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	4640      	mov	r0, r8
 80116cc:	4649      	mov	r1, r9
 80116ce:	f7ee fd4d 	bl	800016c <__adddf3>
 80116d2:	4632      	mov	r2, r6
 80116d4:	463b      	mov	r3, r7
 80116d6:	4680      	mov	r8, r0
 80116d8:	4689      	mov	r9, r1
 80116da:	4650      	mov	r0, sl
 80116dc:	4659      	mov	r1, fp
 80116de:	f7ee fefb 	bl	80004d8 <__aeabi_dmul>
 80116e2:	4604      	mov	r4, r0
 80116e4:	460d      	mov	r5, r1
 80116e6:	460b      	mov	r3, r1
 80116e8:	4602      	mov	r2, r0
 80116ea:	4649      	mov	r1, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80116f2:	f7ee fd3b 	bl	800016c <__adddf3>
 80116f6:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <__ieee754_pow+0x3d0>)
 80116f8:	4682      	mov	sl, r0
 80116fa:	4299      	cmp	r1, r3
 80116fc:	460f      	mov	r7, r1
 80116fe:	460e      	mov	r6, r1
 8011700:	f340 82ed 	ble.w	8011cde <__ieee754_pow+0x94e>
 8011704:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011708:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801170c:	4303      	orrs	r3, r0
 801170e:	f000 81e7 	beq.w	8011ae0 <__ieee754_pow+0x750>
 8011712:	a30d      	add	r3, pc, #52	; (adr r3, 8011748 <__ieee754_pow+0x3b8>)
 8011714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011718:	e9dd 0100 	ldrd	r0, r1, [sp]
 801171c:	f7ee fedc 	bl	80004d8 <__aeabi_dmul>
 8011720:	a309      	add	r3, pc, #36	; (adr r3, 8011748 <__ieee754_pow+0x3b8>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	e6cc      	b.n	80114c2 <__ieee754_pow+0x132>
 8011728:	60000000 	.word	0x60000000
 801172c:	3ff71547 	.word	0x3ff71547
 8011730:	f85ddf44 	.word	0xf85ddf44
 8011734:	3e54ae0b 	.word	0x3e54ae0b
 8011738:	55555555 	.word	0x55555555
 801173c:	3fd55555 	.word	0x3fd55555
 8011740:	652b82fe 	.word	0x652b82fe
 8011744:	3ff71547 	.word	0x3ff71547
 8011748:	8800759c 	.word	0x8800759c
 801174c:	7e37e43c 	.word	0x7e37e43c
 8011750:	3ff00000 	.word	0x3ff00000
 8011754:	3fd00000 	.word	0x3fd00000
 8011758:	3fe00000 	.word	0x3fe00000
 801175c:	bff00000 	.word	0xbff00000
 8011760:	408fffff 	.word	0x408fffff
 8011764:	4bd4      	ldr	r3, [pc, #848]	; (8011ab8 <__ieee754_pow+0x728>)
 8011766:	2200      	movs	r2, #0
 8011768:	ea09 0303 	and.w	r3, r9, r3
 801176c:	b943      	cbnz	r3, 8011780 <__ieee754_pow+0x3f0>
 801176e:	4658      	mov	r0, fp
 8011770:	4661      	mov	r1, ip
 8011772:	4bd2      	ldr	r3, [pc, #840]	; (8011abc <__ieee754_pow+0x72c>)
 8011774:	f7ee feb0 	bl	80004d8 <__aeabi_dmul>
 8011778:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801177c:	4683      	mov	fp, r0
 801177e:	460c      	mov	r4, r1
 8011780:	1523      	asrs	r3, r4, #20
 8011782:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011786:	4413      	add	r3, r2
 8011788:	930b      	str	r3, [sp, #44]	; 0x2c
 801178a:	4bcd      	ldr	r3, [pc, #820]	; (8011ac0 <__ieee754_pow+0x730>)
 801178c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011790:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011794:	429c      	cmp	r4, r3
 8011796:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801179a:	dd08      	ble.n	80117ae <__ieee754_pow+0x41e>
 801179c:	4bc9      	ldr	r3, [pc, #804]	; (8011ac4 <__ieee754_pow+0x734>)
 801179e:	429c      	cmp	r4, r3
 80117a0:	f340 819c 	ble.w	8011adc <__ieee754_pow+0x74c>
 80117a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80117aa:	3301      	adds	r3, #1
 80117ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80117ae:	2600      	movs	r6, #0
 80117b0:	00f3      	lsls	r3, r6, #3
 80117b2:	930d      	str	r3, [sp, #52]	; 0x34
 80117b4:	4bc4      	ldr	r3, [pc, #784]	; (8011ac8 <__ieee754_pow+0x738>)
 80117b6:	4658      	mov	r0, fp
 80117b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80117bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80117c0:	4629      	mov	r1, r5
 80117c2:	461a      	mov	r2, r3
 80117c4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80117c8:	4623      	mov	r3, r4
 80117ca:	f7ee fccd 	bl	8000168 <__aeabi_dsub>
 80117ce:	46da      	mov	sl, fp
 80117d0:	462b      	mov	r3, r5
 80117d2:	4652      	mov	r2, sl
 80117d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80117d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80117dc:	f7ee fcc6 	bl	800016c <__adddf3>
 80117e0:	4602      	mov	r2, r0
 80117e2:	460b      	mov	r3, r1
 80117e4:	2000      	movs	r0, #0
 80117e6:	49b9      	ldr	r1, [pc, #740]	; (8011acc <__ieee754_pow+0x73c>)
 80117e8:	f7ee ffa0 	bl	800072c <__aeabi_ddiv>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80117f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80117f8:	f7ee fe6e 	bl	80004d8 <__aeabi_dmul>
 80117fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011800:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011804:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011808:	2300      	movs	r3, #0
 801180a:	2200      	movs	r2, #0
 801180c:	46ab      	mov	fp, r5
 801180e:	106d      	asrs	r5, r5, #1
 8011810:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011814:	9304      	str	r3, [sp, #16]
 8011816:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801181a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801181e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8011822:	4640      	mov	r0, r8
 8011824:	4649      	mov	r1, r9
 8011826:	4614      	mov	r4, r2
 8011828:	461d      	mov	r5, r3
 801182a:	f7ee fe55 	bl	80004d8 <__aeabi_dmul>
 801182e:	4602      	mov	r2, r0
 8011830:	460b      	mov	r3, r1
 8011832:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011836:	f7ee fc97 	bl	8000168 <__aeabi_dsub>
 801183a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801183e:	4606      	mov	r6, r0
 8011840:	460f      	mov	r7, r1
 8011842:	4620      	mov	r0, r4
 8011844:	4629      	mov	r1, r5
 8011846:	f7ee fc8f 	bl	8000168 <__aeabi_dsub>
 801184a:	4602      	mov	r2, r0
 801184c:	460b      	mov	r3, r1
 801184e:	4650      	mov	r0, sl
 8011850:	4659      	mov	r1, fp
 8011852:	f7ee fc89 	bl	8000168 <__aeabi_dsub>
 8011856:	4642      	mov	r2, r8
 8011858:	464b      	mov	r3, r9
 801185a:	f7ee fe3d 	bl	80004d8 <__aeabi_dmul>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	4630      	mov	r0, r6
 8011864:	4639      	mov	r1, r7
 8011866:	f7ee fc7f 	bl	8000168 <__aeabi_dsub>
 801186a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801186e:	f7ee fe33 	bl	80004d8 <__aeabi_dmul>
 8011872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801187a:	4610      	mov	r0, r2
 801187c:	4619      	mov	r1, r3
 801187e:	f7ee fe2b 	bl	80004d8 <__aeabi_dmul>
 8011882:	a37b      	add	r3, pc, #492	; (adr r3, 8011a70 <__ieee754_pow+0x6e0>)
 8011884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011888:	4604      	mov	r4, r0
 801188a:	460d      	mov	r5, r1
 801188c:	f7ee fe24 	bl	80004d8 <__aeabi_dmul>
 8011890:	a379      	add	r3, pc, #484	; (adr r3, 8011a78 <__ieee754_pow+0x6e8>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ee fc69 	bl	800016c <__adddf3>
 801189a:	4622      	mov	r2, r4
 801189c:	462b      	mov	r3, r5
 801189e:	f7ee fe1b 	bl	80004d8 <__aeabi_dmul>
 80118a2:	a377      	add	r3, pc, #476	; (adr r3, 8011a80 <__ieee754_pow+0x6f0>)
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f7ee fc60 	bl	800016c <__adddf3>
 80118ac:	4622      	mov	r2, r4
 80118ae:	462b      	mov	r3, r5
 80118b0:	f7ee fe12 	bl	80004d8 <__aeabi_dmul>
 80118b4:	a374      	add	r3, pc, #464	; (adr r3, 8011a88 <__ieee754_pow+0x6f8>)
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	f7ee fc57 	bl	800016c <__adddf3>
 80118be:	4622      	mov	r2, r4
 80118c0:	462b      	mov	r3, r5
 80118c2:	f7ee fe09 	bl	80004d8 <__aeabi_dmul>
 80118c6:	a372      	add	r3, pc, #456	; (adr r3, 8011a90 <__ieee754_pow+0x700>)
 80118c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118cc:	f7ee fc4e 	bl	800016c <__adddf3>
 80118d0:	4622      	mov	r2, r4
 80118d2:	462b      	mov	r3, r5
 80118d4:	f7ee fe00 	bl	80004d8 <__aeabi_dmul>
 80118d8:	a36f      	add	r3, pc, #444	; (adr r3, 8011a98 <__ieee754_pow+0x708>)
 80118da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118de:	f7ee fc45 	bl	800016c <__adddf3>
 80118e2:	4622      	mov	r2, r4
 80118e4:	4606      	mov	r6, r0
 80118e6:	460f      	mov	r7, r1
 80118e8:	462b      	mov	r3, r5
 80118ea:	4620      	mov	r0, r4
 80118ec:	4629      	mov	r1, r5
 80118ee:	f7ee fdf3 	bl	80004d8 <__aeabi_dmul>
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	4630      	mov	r0, r6
 80118f8:	4639      	mov	r1, r7
 80118fa:	f7ee fded 	bl	80004d8 <__aeabi_dmul>
 80118fe:	4604      	mov	r4, r0
 8011900:	460d      	mov	r5, r1
 8011902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011906:	4642      	mov	r2, r8
 8011908:	464b      	mov	r3, r9
 801190a:	f7ee fc2f 	bl	800016c <__adddf3>
 801190e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011912:	f7ee fde1 	bl	80004d8 <__aeabi_dmul>
 8011916:	4622      	mov	r2, r4
 8011918:	462b      	mov	r3, r5
 801191a:	f7ee fc27 	bl	800016c <__adddf3>
 801191e:	4642      	mov	r2, r8
 8011920:	4606      	mov	r6, r0
 8011922:	460f      	mov	r7, r1
 8011924:	464b      	mov	r3, r9
 8011926:	4640      	mov	r0, r8
 8011928:	4649      	mov	r1, r9
 801192a:	f7ee fdd5 	bl	80004d8 <__aeabi_dmul>
 801192e:	2200      	movs	r2, #0
 8011930:	4b67      	ldr	r3, [pc, #412]	; (8011ad0 <__ieee754_pow+0x740>)
 8011932:	4682      	mov	sl, r0
 8011934:	468b      	mov	fp, r1
 8011936:	f7ee fc19 	bl	800016c <__adddf3>
 801193a:	4632      	mov	r2, r6
 801193c:	463b      	mov	r3, r7
 801193e:	f7ee fc15 	bl	800016c <__adddf3>
 8011942:	9c04      	ldr	r4, [sp, #16]
 8011944:	460d      	mov	r5, r1
 8011946:	4622      	mov	r2, r4
 8011948:	460b      	mov	r3, r1
 801194a:	4640      	mov	r0, r8
 801194c:	4649      	mov	r1, r9
 801194e:	f7ee fdc3 	bl	80004d8 <__aeabi_dmul>
 8011952:	2200      	movs	r2, #0
 8011954:	4680      	mov	r8, r0
 8011956:	4689      	mov	r9, r1
 8011958:	4620      	mov	r0, r4
 801195a:	4629      	mov	r1, r5
 801195c:	4b5c      	ldr	r3, [pc, #368]	; (8011ad0 <__ieee754_pow+0x740>)
 801195e:	f7ee fc03 	bl	8000168 <__aeabi_dsub>
 8011962:	4652      	mov	r2, sl
 8011964:	465b      	mov	r3, fp
 8011966:	f7ee fbff 	bl	8000168 <__aeabi_dsub>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	4630      	mov	r0, r6
 8011970:	4639      	mov	r1, r7
 8011972:	f7ee fbf9 	bl	8000168 <__aeabi_dsub>
 8011976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801197a:	f7ee fdad 	bl	80004d8 <__aeabi_dmul>
 801197e:	4622      	mov	r2, r4
 8011980:	4606      	mov	r6, r0
 8011982:	460f      	mov	r7, r1
 8011984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011988:	462b      	mov	r3, r5
 801198a:	f7ee fda5 	bl	80004d8 <__aeabi_dmul>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	4630      	mov	r0, r6
 8011994:	4639      	mov	r1, r7
 8011996:	f7ee fbe9 	bl	800016c <__adddf3>
 801199a:	4606      	mov	r6, r0
 801199c:	460f      	mov	r7, r1
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4640      	mov	r0, r8
 80119a4:	4649      	mov	r1, r9
 80119a6:	f7ee fbe1 	bl	800016c <__adddf3>
 80119aa:	a33d      	add	r3, pc, #244	; (adr r3, 8011aa0 <__ieee754_pow+0x710>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	9c04      	ldr	r4, [sp, #16]
 80119b2:	460d      	mov	r5, r1
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7ee fd8f 	bl	80004d8 <__aeabi_dmul>
 80119ba:	4642      	mov	r2, r8
 80119bc:	464b      	mov	r3, r9
 80119be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80119c2:	4620      	mov	r0, r4
 80119c4:	4629      	mov	r1, r5
 80119c6:	f7ee fbcf 	bl	8000168 <__aeabi_dsub>
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	4630      	mov	r0, r6
 80119d0:	4639      	mov	r1, r7
 80119d2:	f7ee fbc9 	bl	8000168 <__aeabi_dsub>
 80119d6:	a334      	add	r3, pc, #208	; (adr r3, 8011aa8 <__ieee754_pow+0x718>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	f7ee fd7c 	bl	80004d8 <__aeabi_dmul>
 80119e0:	a333      	add	r3, pc, #204	; (adr r3, 8011ab0 <__ieee754_pow+0x720>)
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	4606      	mov	r6, r0
 80119e8:	460f      	mov	r7, r1
 80119ea:	4620      	mov	r0, r4
 80119ec:	4629      	mov	r1, r5
 80119ee:	f7ee fd73 	bl	80004d8 <__aeabi_dmul>
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4630      	mov	r0, r6
 80119f8:	4639      	mov	r1, r7
 80119fa:	f7ee fbb7 	bl	800016c <__adddf3>
 80119fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a00:	4b34      	ldr	r3, [pc, #208]	; (8011ad4 <__ieee754_pow+0x744>)
 8011a02:	4413      	add	r3, r2
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	f7ee fbb0 	bl	800016c <__adddf3>
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011a10:	4689      	mov	r9, r1
 8011a12:	f7ee fcf7 	bl	8000404 <__aeabi_i2d>
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a1c:	4b2e      	ldr	r3, [pc, #184]	; (8011ad8 <__ieee754_pow+0x748>)
 8011a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a22:	4413      	add	r3, r2
 8011a24:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011a28:	4642      	mov	r2, r8
 8011a2a:	464b      	mov	r3, r9
 8011a2c:	f7ee fb9e 	bl	800016c <__adddf3>
 8011a30:	4632      	mov	r2, r6
 8011a32:	463b      	mov	r3, r7
 8011a34:	f7ee fb9a 	bl	800016c <__adddf3>
 8011a38:	4622      	mov	r2, r4
 8011a3a:	462b      	mov	r3, r5
 8011a3c:	f7ee fb96 	bl	800016c <__adddf3>
 8011a40:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011a44:	4622      	mov	r2, r4
 8011a46:	462b      	mov	r3, r5
 8011a48:	4650      	mov	r0, sl
 8011a4a:	468b      	mov	fp, r1
 8011a4c:	f7ee fb8c 	bl	8000168 <__aeabi_dsub>
 8011a50:	4632      	mov	r2, r6
 8011a52:	463b      	mov	r3, r7
 8011a54:	f7ee fb88 	bl	8000168 <__aeabi_dsub>
 8011a58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a5c:	f7ee fb84 	bl	8000168 <__aeabi_dsub>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	e608      	b.n	801167c <__ieee754_pow+0x2ec>
 8011a6a:	bf00      	nop
 8011a6c:	f3af 8000 	nop.w
 8011a70:	4a454eef 	.word	0x4a454eef
 8011a74:	3fca7e28 	.word	0x3fca7e28
 8011a78:	93c9db65 	.word	0x93c9db65
 8011a7c:	3fcd864a 	.word	0x3fcd864a
 8011a80:	a91d4101 	.word	0xa91d4101
 8011a84:	3fd17460 	.word	0x3fd17460
 8011a88:	518f264d 	.word	0x518f264d
 8011a8c:	3fd55555 	.word	0x3fd55555
 8011a90:	db6fabff 	.word	0xdb6fabff
 8011a94:	3fdb6db6 	.word	0x3fdb6db6
 8011a98:	33333303 	.word	0x33333303
 8011a9c:	3fe33333 	.word	0x3fe33333
 8011aa0:	e0000000 	.word	0xe0000000
 8011aa4:	3feec709 	.word	0x3feec709
 8011aa8:	dc3a03fd 	.word	0xdc3a03fd
 8011aac:	3feec709 	.word	0x3feec709
 8011ab0:	145b01f5 	.word	0x145b01f5
 8011ab4:	be3e2fe0 	.word	0xbe3e2fe0
 8011ab8:	7ff00000 	.word	0x7ff00000
 8011abc:	43400000 	.word	0x43400000
 8011ac0:	0003988e 	.word	0x0003988e
 8011ac4:	000bb679 	.word	0x000bb679
 8011ac8:	080143a0 	.word	0x080143a0
 8011acc:	3ff00000 	.word	0x3ff00000
 8011ad0:	40080000 	.word	0x40080000
 8011ad4:	080143c0 	.word	0x080143c0
 8011ad8:	080143b0 	.word	0x080143b0
 8011adc:	2601      	movs	r6, #1
 8011ade:	e667      	b.n	80117b0 <__ieee754_pow+0x420>
 8011ae0:	a39d      	add	r3, pc, #628	; (adr r3, 8011d58 <__ieee754_pow+0x9c8>)
 8011ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	4649      	mov	r1, r9
 8011aea:	f7ee fb3f 	bl	800016c <__adddf3>
 8011aee:	4622      	mov	r2, r4
 8011af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011af4:	462b      	mov	r3, r5
 8011af6:	4650      	mov	r0, sl
 8011af8:	4639      	mov	r1, r7
 8011afa:	f7ee fb35 	bl	8000168 <__aeabi_dsub>
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b06:	f7ee ff77 	bl	80009f8 <__aeabi_dcmpgt>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	f47f ae01 	bne.w	8011712 <__ieee754_pow+0x382>
 8011b10:	4aa5      	ldr	r2, [pc, #660]	; (8011da8 <__ieee754_pow+0xa18>)
 8011b12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8011b16:	4293      	cmp	r3, r2
 8011b18:	f340 8103 	ble.w	8011d22 <__ieee754_pow+0x992>
 8011b1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011b20:	2000      	movs	r0, #0
 8011b22:	151b      	asrs	r3, r3, #20
 8011b24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011b28:	fa4a f303 	asr.w	r3, sl, r3
 8011b2c:	4433      	add	r3, r6
 8011b2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011b32:	4f9e      	ldr	r7, [pc, #632]	; (8011dac <__ieee754_pow+0xa1c>)
 8011b34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011b38:	4117      	asrs	r7, r2
 8011b3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011b3e:	ea23 0107 	bic.w	r1, r3, r7
 8011b42:	f1c2 0214 	rsb	r2, r2, #20
 8011b46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	fa4a fa02 	asr.w	sl, sl, r2
 8011b50:	2e00      	cmp	r6, #0
 8011b52:	4602      	mov	r2, r0
 8011b54:	4629      	mov	r1, r5
 8011b56:	4620      	mov	r0, r4
 8011b58:	bfb8      	it	lt
 8011b5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8011b5e:	f7ee fb03 	bl	8000168 <__aeabi_dsub>
 8011b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b6a:	2400      	movs	r4, #0
 8011b6c:	4642      	mov	r2, r8
 8011b6e:	464b      	mov	r3, r9
 8011b70:	f7ee fafc 	bl	800016c <__adddf3>
 8011b74:	a37a      	add	r3, pc, #488	; (adr r3, 8011d60 <__ieee754_pow+0x9d0>)
 8011b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	460d      	mov	r5, r1
 8011b7e:	f7ee fcab 	bl	80004d8 <__aeabi_dmul>
 8011b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b86:	4606      	mov	r6, r0
 8011b88:	460f      	mov	r7, r1
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	f7ee faeb 	bl	8000168 <__aeabi_dsub>
 8011b92:	4602      	mov	r2, r0
 8011b94:	460b      	mov	r3, r1
 8011b96:	4640      	mov	r0, r8
 8011b98:	4649      	mov	r1, r9
 8011b9a:	f7ee fae5 	bl	8000168 <__aeabi_dsub>
 8011b9e:	a372      	add	r3, pc, #456	; (adr r3, 8011d68 <__ieee754_pow+0x9d8>)
 8011ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba4:	f7ee fc98 	bl	80004d8 <__aeabi_dmul>
 8011ba8:	a371      	add	r3, pc, #452	; (adr r3, 8011d70 <__ieee754_pow+0x9e0>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	4680      	mov	r8, r0
 8011bb0:	4689      	mov	r9, r1
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	f7ee fc8f 	bl	80004d8 <__aeabi_dmul>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	4640      	mov	r0, r8
 8011bc0:	4649      	mov	r1, r9
 8011bc2:	f7ee fad3 	bl	800016c <__adddf3>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	460d      	mov	r5, r1
 8011bca:	4602      	mov	r2, r0
 8011bcc:	460b      	mov	r3, r1
 8011bce:	4630      	mov	r0, r6
 8011bd0:	4639      	mov	r1, r7
 8011bd2:	f7ee facb 	bl	800016c <__adddf3>
 8011bd6:	4632      	mov	r2, r6
 8011bd8:	463b      	mov	r3, r7
 8011bda:	4680      	mov	r8, r0
 8011bdc:	4689      	mov	r9, r1
 8011bde:	f7ee fac3 	bl	8000168 <__aeabi_dsub>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	4620      	mov	r0, r4
 8011be8:	4629      	mov	r1, r5
 8011bea:	f7ee fabd 	bl	8000168 <__aeabi_dsub>
 8011bee:	4642      	mov	r2, r8
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	460f      	mov	r7, r1
 8011bf4:	464b      	mov	r3, r9
 8011bf6:	4640      	mov	r0, r8
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	f7ee fc6d 	bl	80004d8 <__aeabi_dmul>
 8011bfe:	a35e      	add	r3, pc, #376	; (adr r3, 8011d78 <__ieee754_pow+0x9e8>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	4604      	mov	r4, r0
 8011c06:	460d      	mov	r5, r1
 8011c08:	f7ee fc66 	bl	80004d8 <__aeabi_dmul>
 8011c0c:	a35c      	add	r3, pc, #368	; (adr r3, 8011d80 <__ieee754_pow+0x9f0>)
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	f7ee faa9 	bl	8000168 <__aeabi_dsub>
 8011c16:	4622      	mov	r2, r4
 8011c18:	462b      	mov	r3, r5
 8011c1a:	f7ee fc5d 	bl	80004d8 <__aeabi_dmul>
 8011c1e:	a35a      	add	r3, pc, #360	; (adr r3, 8011d88 <__ieee754_pow+0x9f8>)
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	f7ee faa2 	bl	800016c <__adddf3>
 8011c28:	4622      	mov	r2, r4
 8011c2a:	462b      	mov	r3, r5
 8011c2c:	f7ee fc54 	bl	80004d8 <__aeabi_dmul>
 8011c30:	a357      	add	r3, pc, #348	; (adr r3, 8011d90 <__ieee754_pow+0xa00>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	f7ee fa97 	bl	8000168 <__aeabi_dsub>
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	462b      	mov	r3, r5
 8011c3e:	f7ee fc4b 	bl	80004d8 <__aeabi_dmul>
 8011c42:	a355      	add	r3, pc, #340	; (adr r3, 8011d98 <__ieee754_pow+0xa08>)
 8011c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c48:	f7ee fa90 	bl	800016c <__adddf3>
 8011c4c:	4622      	mov	r2, r4
 8011c4e:	462b      	mov	r3, r5
 8011c50:	f7ee fc42 	bl	80004d8 <__aeabi_dmul>
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	4640      	mov	r0, r8
 8011c5a:	4649      	mov	r1, r9
 8011c5c:	f7ee fa84 	bl	8000168 <__aeabi_dsub>
 8011c60:	4604      	mov	r4, r0
 8011c62:	460d      	mov	r5, r1
 8011c64:	4602      	mov	r2, r0
 8011c66:	460b      	mov	r3, r1
 8011c68:	4640      	mov	r0, r8
 8011c6a:	4649      	mov	r1, r9
 8011c6c:	f7ee fc34 	bl	80004d8 <__aeabi_dmul>
 8011c70:	2200      	movs	r2, #0
 8011c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	f7ee fa73 	bl	8000168 <__aeabi_dsub>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c8a:	f7ee fd4f 	bl	800072c <__aeabi_ddiv>
 8011c8e:	4632      	mov	r2, r6
 8011c90:	4604      	mov	r4, r0
 8011c92:	460d      	mov	r5, r1
 8011c94:	463b      	mov	r3, r7
 8011c96:	4640      	mov	r0, r8
 8011c98:	4649      	mov	r1, r9
 8011c9a:	f7ee fc1d 	bl	80004d8 <__aeabi_dmul>
 8011c9e:	4632      	mov	r2, r6
 8011ca0:	463b      	mov	r3, r7
 8011ca2:	f7ee fa63 	bl	800016c <__adddf3>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4620      	mov	r0, r4
 8011cac:	4629      	mov	r1, r5
 8011cae:	f7ee fa5b 	bl	8000168 <__aeabi_dsub>
 8011cb2:	4642      	mov	r2, r8
 8011cb4:	464b      	mov	r3, r9
 8011cb6:	f7ee fa57 	bl	8000168 <__aeabi_dsub>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	493b      	ldr	r1, [pc, #236]	; (8011db0 <__ieee754_pow+0xa20>)
 8011cc2:	f7ee fa51 	bl	8000168 <__aeabi_dsub>
 8011cc6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011cca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011cce:	da2b      	bge.n	8011d28 <__ieee754_pow+0x998>
 8011cd0:	4652      	mov	r2, sl
 8011cd2:	f001 f8e1 	bl	8012e98 <scalbn>
 8011cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cda:	f7ff bbf2 	b.w	80114c2 <__ieee754_pow+0x132>
 8011cde:	4b35      	ldr	r3, [pc, #212]	; (8011db4 <__ieee754_pow+0xa24>)
 8011ce0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011ce4:	429f      	cmp	r7, r3
 8011ce6:	f77f af13 	ble.w	8011b10 <__ieee754_pow+0x780>
 8011cea:	4b33      	ldr	r3, [pc, #204]	; (8011db8 <__ieee754_pow+0xa28>)
 8011cec:	440b      	add	r3, r1
 8011cee:	4303      	orrs	r3, r0
 8011cf0:	d00b      	beq.n	8011d0a <__ieee754_pow+0x97a>
 8011cf2:	a32b      	add	r3, pc, #172	; (adr r3, 8011da0 <__ieee754_pow+0xa10>)
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cfc:	f7ee fbec 	bl	80004d8 <__aeabi_dmul>
 8011d00:	a327      	add	r3, pc, #156	; (adr r3, 8011da0 <__ieee754_pow+0xa10>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	f7ff bbdc 	b.w	80114c2 <__ieee754_pow+0x132>
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	462b      	mov	r3, r5
 8011d0e:	f7ee fa2b 	bl	8000168 <__aeabi_dsub>
 8011d12:	4642      	mov	r2, r8
 8011d14:	464b      	mov	r3, r9
 8011d16:	f7ee fe65 	bl	80009e4 <__aeabi_dcmpge>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	f43f aef8 	beq.w	8011b10 <__ieee754_pow+0x780>
 8011d20:	e7e7      	b.n	8011cf2 <__ieee754_pow+0x962>
 8011d22:	f04f 0a00 	mov.w	sl, #0
 8011d26:	e71e      	b.n	8011b66 <__ieee754_pow+0x7d6>
 8011d28:	4621      	mov	r1, r4
 8011d2a:	e7d4      	b.n	8011cd6 <__ieee754_pow+0x946>
 8011d2c:	f04f 0b00 	mov.w	fp, #0
 8011d30:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011db0 <__ieee754_pow+0xa20>
 8011d34:	f7ff bbb0 	b.w	8011498 <__ieee754_pow+0x108>
 8011d38:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8011d3c:	f7ff bbac 	b.w	8011498 <__ieee754_pow+0x108>
 8011d40:	4638      	mov	r0, r7
 8011d42:	4641      	mov	r1, r8
 8011d44:	f7ff bbbf 	b.w	80114c6 <__ieee754_pow+0x136>
 8011d48:	9200      	str	r2, [sp, #0]
 8011d4a:	f7ff bb7f 	b.w	801144c <__ieee754_pow+0xbc>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f7ff bb69 	b.w	8011426 <__ieee754_pow+0x96>
 8011d54:	f3af 8000 	nop.w
 8011d58:	652b82fe 	.word	0x652b82fe
 8011d5c:	3c971547 	.word	0x3c971547
 8011d60:	00000000 	.word	0x00000000
 8011d64:	3fe62e43 	.word	0x3fe62e43
 8011d68:	fefa39ef 	.word	0xfefa39ef
 8011d6c:	3fe62e42 	.word	0x3fe62e42
 8011d70:	0ca86c39 	.word	0x0ca86c39
 8011d74:	be205c61 	.word	0xbe205c61
 8011d78:	72bea4d0 	.word	0x72bea4d0
 8011d7c:	3e663769 	.word	0x3e663769
 8011d80:	c5d26bf1 	.word	0xc5d26bf1
 8011d84:	3ebbbd41 	.word	0x3ebbbd41
 8011d88:	af25de2c 	.word	0xaf25de2c
 8011d8c:	3f11566a 	.word	0x3f11566a
 8011d90:	16bebd93 	.word	0x16bebd93
 8011d94:	3f66c16c 	.word	0x3f66c16c
 8011d98:	5555553e 	.word	0x5555553e
 8011d9c:	3fc55555 	.word	0x3fc55555
 8011da0:	c2f8f359 	.word	0xc2f8f359
 8011da4:	01a56e1f 	.word	0x01a56e1f
 8011da8:	3fe00000 	.word	0x3fe00000
 8011dac:	000fffff 	.word	0x000fffff
 8011db0:	3ff00000 	.word	0x3ff00000
 8011db4:	4090cbff 	.word	0x4090cbff
 8011db8:	3f6f3400 	.word	0x3f6f3400

08011dbc <__ieee754_sqrt>:
 8011dbc:	f8df c150 	ldr.w	ip, [pc, #336]	; 8011f10 <__ieee754_sqrt+0x154>
 8011dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc4:	ea3c 0c01 	bics.w	ip, ip, r1
 8011dc8:	460b      	mov	r3, r1
 8011dca:	4606      	mov	r6, r0
 8011dcc:	460d      	mov	r5, r1
 8011dce:	460a      	mov	r2, r1
 8011dd0:	4607      	mov	r7, r0
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	d10e      	bne.n	8011df4 <__ieee754_sqrt+0x38>
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	f7ee fb7e 	bl	80004d8 <__aeabi_dmul>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	460b      	mov	r3, r1
 8011de0:	4630      	mov	r0, r6
 8011de2:	4629      	mov	r1, r5
 8011de4:	f7ee f9c2 	bl	800016c <__adddf3>
 8011de8:	4606      	mov	r6, r0
 8011dea:	460d      	mov	r5, r1
 8011dec:	4630      	mov	r0, r6
 8011dee:	4629      	mov	r1, r5
 8011df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df4:	2900      	cmp	r1, #0
 8011df6:	dc0d      	bgt.n	8011e14 <__ieee754_sqrt+0x58>
 8011df8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8011dfc:	ea5c 0707 	orrs.w	r7, ip, r7
 8011e00:	d0f4      	beq.n	8011dec <__ieee754_sqrt+0x30>
 8011e02:	b139      	cbz	r1, 8011e14 <__ieee754_sqrt+0x58>
 8011e04:	4602      	mov	r2, r0
 8011e06:	f7ee f9af 	bl	8000168 <__aeabi_dsub>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	f7ee fc8d 	bl	800072c <__aeabi_ddiv>
 8011e12:	e7e9      	b.n	8011de8 <__ieee754_sqrt+0x2c>
 8011e14:	1512      	asrs	r2, r2, #20
 8011e16:	d074      	beq.n	8011f02 <__ieee754_sqrt+0x146>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	07d5      	lsls	r5, r2, #31
 8011e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e20:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8011e24:	bf5e      	ittt	pl
 8011e26:	0fe3      	lsrpl	r3, r4, #31
 8011e28:	0064      	lslpl	r4, r4, #1
 8011e2a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8011e2e:	0fe3      	lsrs	r3, r4, #31
 8011e30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011e34:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011e38:	2516      	movs	r5, #22
 8011e3a:	4601      	mov	r1, r0
 8011e3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011e40:	1076      	asrs	r6, r6, #1
 8011e42:	0064      	lsls	r4, r4, #1
 8011e44:	188f      	adds	r7, r1, r2
 8011e46:	429f      	cmp	r7, r3
 8011e48:	bfde      	ittt	le
 8011e4a:	1bdb      	suble	r3, r3, r7
 8011e4c:	18b9      	addle	r1, r7, r2
 8011e4e:	1880      	addle	r0, r0, r2
 8011e50:	005b      	lsls	r3, r3, #1
 8011e52:	3d01      	subs	r5, #1
 8011e54:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011e58:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011e5c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011e60:	d1f0      	bne.n	8011e44 <__ieee754_sqrt+0x88>
 8011e62:	462a      	mov	r2, r5
 8011e64:	f04f 0e20 	mov.w	lr, #32
 8011e68:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011e6c:	428b      	cmp	r3, r1
 8011e6e:	eb07 0c05 	add.w	ip, r7, r5
 8011e72:	dc02      	bgt.n	8011e7a <__ieee754_sqrt+0xbe>
 8011e74:	d113      	bne.n	8011e9e <__ieee754_sqrt+0xe2>
 8011e76:	45a4      	cmp	ip, r4
 8011e78:	d811      	bhi.n	8011e9e <__ieee754_sqrt+0xe2>
 8011e7a:	f1bc 0f00 	cmp.w	ip, #0
 8011e7e:	eb0c 0507 	add.w	r5, ip, r7
 8011e82:	da43      	bge.n	8011f0c <__ieee754_sqrt+0x150>
 8011e84:	2d00      	cmp	r5, #0
 8011e86:	db41      	blt.n	8011f0c <__ieee754_sqrt+0x150>
 8011e88:	f101 0801 	add.w	r8, r1, #1
 8011e8c:	1a5b      	subs	r3, r3, r1
 8011e8e:	4641      	mov	r1, r8
 8011e90:	45a4      	cmp	ip, r4
 8011e92:	bf88      	it	hi
 8011e94:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011e98:	eba4 040c 	sub.w	r4, r4, ip
 8011e9c:	443a      	add	r2, r7
 8011e9e:	005b      	lsls	r3, r3, #1
 8011ea0:	f1be 0e01 	subs.w	lr, lr, #1
 8011ea4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011ea8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8011eac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011eb0:	d1dc      	bne.n	8011e6c <__ieee754_sqrt+0xb0>
 8011eb2:	4323      	orrs	r3, r4
 8011eb4:	d006      	beq.n	8011ec4 <__ieee754_sqrt+0x108>
 8011eb6:	1c54      	adds	r4, r2, #1
 8011eb8:	bf0b      	itete	eq
 8011eba:	4672      	moveq	r2, lr
 8011ebc:	3201      	addne	r2, #1
 8011ebe:	3001      	addeq	r0, #1
 8011ec0:	f022 0201 	bicne.w	r2, r2, #1
 8011ec4:	1043      	asrs	r3, r0, #1
 8011ec6:	07c1      	lsls	r1, r0, #31
 8011ec8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011ecc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011ed0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011ed4:	bf48      	it	mi
 8011ed6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011eda:	4610      	mov	r0, r2
 8011edc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8011ee0:	e782      	b.n	8011de8 <__ieee754_sqrt+0x2c>
 8011ee2:	0ae3      	lsrs	r3, r4, #11
 8011ee4:	3915      	subs	r1, #21
 8011ee6:	0564      	lsls	r4, r4, #21
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d0fa      	beq.n	8011ee2 <__ieee754_sqrt+0x126>
 8011eec:	02de      	lsls	r6, r3, #11
 8011eee:	d50a      	bpl.n	8011f06 <__ieee754_sqrt+0x14a>
 8011ef0:	f1c2 0020 	rsb	r0, r2, #32
 8011ef4:	fa24 f000 	lsr.w	r0, r4, r0
 8011ef8:	1e55      	subs	r5, r2, #1
 8011efa:	4094      	lsls	r4, r2
 8011efc:	4303      	orrs	r3, r0
 8011efe:	1b4a      	subs	r2, r1, r5
 8011f00:	e78a      	b.n	8011e18 <__ieee754_sqrt+0x5c>
 8011f02:	4611      	mov	r1, r2
 8011f04:	e7f0      	b.n	8011ee8 <__ieee754_sqrt+0x12c>
 8011f06:	005b      	lsls	r3, r3, #1
 8011f08:	3201      	adds	r2, #1
 8011f0a:	e7ef      	b.n	8011eec <__ieee754_sqrt+0x130>
 8011f0c:	4688      	mov	r8, r1
 8011f0e:	e7bd      	b.n	8011e8c <__ieee754_sqrt+0xd0>
 8011f10:	7ff00000 	.word	0x7ff00000

08011f14 <__ieee754_asinf>:
 8011f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f18:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8011f1c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011f20:	4604      	mov	r4, r0
 8011f22:	4605      	mov	r5, r0
 8011f24:	d10c      	bne.n	8011f40 <__ieee754_asinf+0x2c>
 8011f26:	498d      	ldr	r1, [pc, #564]	; (801215c <__ieee754_asinf+0x248>)
 8011f28:	f7ee ff0c 	bl	8000d44 <__aeabi_fmul>
 8011f2c:	498c      	ldr	r1, [pc, #560]	; (8012160 <__ieee754_asinf+0x24c>)
 8011f2e:	4605      	mov	r5, r0
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7ee ff07 	bl	8000d44 <__aeabi_fmul>
 8011f36:	4601      	mov	r1, r0
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f7ee fdfb 	bl	8000b34 <__addsf3>
 8011f3e:	e006      	b.n	8011f4e <__ieee754_asinf+0x3a>
 8011f40:	dd07      	ble.n	8011f52 <__ieee754_asinf+0x3e>
 8011f42:	4601      	mov	r1, r0
 8011f44:	f7ee fdf4 	bl	8000b30 <__aeabi_fsub>
 8011f48:	4601      	mov	r1, r0
 8011f4a:	f7ee ffaf 	bl	8000eac <__aeabi_fdiv>
 8011f4e:	4604      	mov	r4, r0
 8011f50:	e00e      	b.n	8011f70 <__ieee754_asinf+0x5c>
 8011f52:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8011f56:	da58      	bge.n	801200a <__ieee754_asinf+0xf6>
 8011f58:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8011f5c:	da0b      	bge.n	8011f76 <__ieee754_asinf+0x62>
 8011f5e:	4981      	ldr	r1, [pc, #516]	; (8012164 <__ieee754_asinf+0x250>)
 8011f60:	f7ee fde8 	bl	8000b34 <__addsf3>
 8011f64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011f68:	f7ef f8a8 	bl	80010bc <__aeabi_fcmpgt>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d04c      	beq.n	801200a <__ieee754_asinf+0xf6>
 8011f70:	4620      	mov	r0, r4
 8011f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f76:	4601      	mov	r1, r0
 8011f78:	f7ee fee4 	bl	8000d44 <__aeabi_fmul>
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	497a      	ldr	r1, [pc, #488]	; (8012168 <__ieee754_asinf+0x254>)
 8011f80:	f7ee fee0 	bl	8000d44 <__aeabi_fmul>
 8011f84:	4979      	ldr	r1, [pc, #484]	; (801216c <__ieee754_asinf+0x258>)
 8011f86:	f7ee fdd5 	bl	8000b34 <__addsf3>
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee feda 	bl	8000d44 <__aeabi_fmul>
 8011f90:	4977      	ldr	r1, [pc, #476]	; (8012170 <__ieee754_asinf+0x25c>)
 8011f92:	f7ee fdcd 	bl	8000b30 <__aeabi_fsub>
 8011f96:	4629      	mov	r1, r5
 8011f98:	f7ee fed4 	bl	8000d44 <__aeabi_fmul>
 8011f9c:	4975      	ldr	r1, [pc, #468]	; (8012174 <__ieee754_asinf+0x260>)
 8011f9e:	f7ee fdc9 	bl	8000b34 <__addsf3>
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f7ee fece 	bl	8000d44 <__aeabi_fmul>
 8011fa8:	4973      	ldr	r1, [pc, #460]	; (8012178 <__ieee754_asinf+0x264>)
 8011faa:	f7ee fdc1 	bl	8000b30 <__aeabi_fsub>
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f7ee fec8 	bl	8000d44 <__aeabi_fmul>
 8011fb4:	4971      	ldr	r1, [pc, #452]	; (801217c <__ieee754_asinf+0x268>)
 8011fb6:	f7ee fdbd 	bl	8000b34 <__addsf3>
 8011fba:	4629      	mov	r1, r5
 8011fbc:	f7ee fec2 	bl	8000d44 <__aeabi_fmul>
 8011fc0:	496f      	ldr	r1, [pc, #444]	; (8012180 <__ieee754_asinf+0x26c>)
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	f7ee febd 	bl	8000d44 <__aeabi_fmul>
 8011fca:	496e      	ldr	r1, [pc, #440]	; (8012184 <__ieee754_asinf+0x270>)
 8011fcc:	f7ee fdb0 	bl	8000b30 <__aeabi_fsub>
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	f7ee feb7 	bl	8000d44 <__aeabi_fmul>
 8011fd6:	496c      	ldr	r1, [pc, #432]	; (8012188 <__ieee754_asinf+0x274>)
 8011fd8:	f7ee fdac 	bl	8000b34 <__addsf3>
 8011fdc:	4629      	mov	r1, r5
 8011fde:	f7ee feb1 	bl	8000d44 <__aeabi_fmul>
 8011fe2:	496a      	ldr	r1, [pc, #424]	; (801218c <__ieee754_asinf+0x278>)
 8011fe4:	f7ee fda4 	bl	8000b30 <__aeabi_fsub>
 8011fe8:	4629      	mov	r1, r5
 8011fea:	f7ee feab 	bl	8000d44 <__aeabi_fmul>
 8011fee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011ff2:	f7ee fd9f 	bl	8000b34 <__addsf3>
 8011ff6:	4601      	mov	r1, r0
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	f7ee ff57 	bl	8000eac <__aeabi_fdiv>
 8011ffe:	4621      	mov	r1, r4
 8012000:	f7ee fea0 	bl	8000d44 <__aeabi_fmul>
 8012004:	4601      	mov	r1, r0
 8012006:	4620      	mov	r0, r4
 8012008:	e797      	b.n	8011f3a <__ieee754_asinf+0x26>
 801200a:	4620      	mov	r0, r4
 801200c:	f7ff f862 	bl	80110d4 <fabsf>
 8012010:	4601      	mov	r1, r0
 8012012:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012016:	f7ee fd8b 	bl	8000b30 <__aeabi_fsub>
 801201a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801201e:	f7ee fe91 	bl	8000d44 <__aeabi_fmul>
 8012022:	4606      	mov	r6, r0
 8012024:	4950      	ldr	r1, [pc, #320]	; (8012168 <__ieee754_asinf+0x254>)
 8012026:	f7ee fe8d 	bl	8000d44 <__aeabi_fmul>
 801202a:	4950      	ldr	r1, [pc, #320]	; (801216c <__ieee754_asinf+0x258>)
 801202c:	f7ee fd82 	bl	8000b34 <__addsf3>
 8012030:	4631      	mov	r1, r6
 8012032:	f7ee fe87 	bl	8000d44 <__aeabi_fmul>
 8012036:	494e      	ldr	r1, [pc, #312]	; (8012170 <__ieee754_asinf+0x25c>)
 8012038:	f7ee fd7a 	bl	8000b30 <__aeabi_fsub>
 801203c:	4631      	mov	r1, r6
 801203e:	f7ee fe81 	bl	8000d44 <__aeabi_fmul>
 8012042:	494c      	ldr	r1, [pc, #304]	; (8012174 <__ieee754_asinf+0x260>)
 8012044:	f7ee fd76 	bl	8000b34 <__addsf3>
 8012048:	4631      	mov	r1, r6
 801204a:	f7ee fe7b 	bl	8000d44 <__aeabi_fmul>
 801204e:	494a      	ldr	r1, [pc, #296]	; (8012178 <__ieee754_asinf+0x264>)
 8012050:	f7ee fd6e 	bl	8000b30 <__aeabi_fsub>
 8012054:	4631      	mov	r1, r6
 8012056:	f7ee fe75 	bl	8000d44 <__aeabi_fmul>
 801205a:	4948      	ldr	r1, [pc, #288]	; (801217c <__ieee754_asinf+0x268>)
 801205c:	f7ee fd6a 	bl	8000b34 <__addsf3>
 8012060:	4631      	mov	r1, r6
 8012062:	f7ee fe6f 	bl	8000d44 <__aeabi_fmul>
 8012066:	4946      	ldr	r1, [pc, #280]	; (8012180 <__ieee754_asinf+0x26c>)
 8012068:	4681      	mov	r9, r0
 801206a:	4630      	mov	r0, r6
 801206c:	f7ee fe6a 	bl	8000d44 <__aeabi_fmul>
 8012070:	4944      	ldr	r1, [pc, #272]	; (8012184 <__ieee754_asinf+0x270>)
 8012072:	f7ee fd5d 	bl	8000b30 <__aeabi_fsub>
 8012076:	4631      	mov	r1, r6
 8012078:	f7ee fe64 	bl	8000d44 <__aeabi_fmul>
 801207c:	4942      	ldr	r1, [pc, #264]	; (8012188 <__ieee754_asinf+0x274>)
 801207e:	f7ee fd59 	bl	8000b34 <__addsf3>
 8012082:	4631      	mov	r1, r6
 8012084:	f7ee fe5e 	bl	8000d44 <__aeabi_fmul>
 8012088:	4940      	ldr	r1, [pc, #256]	; (801218c <__ieee754_asinf+0x278>)
 801208a:	f7ee fd51 	bl	8000b30 <__aeabi_fsub>
 801208e:	4631      	mov	r1, r6
 8012090:	f7ee fe58 	bl	8000d44 <__aeabi_fmul>
 8012094:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012098:	f7ee fd4c 	bl	8000b34 <__addsf3>
 801209c:	4682      	mov	sl, r0
 801209e:	4630      	mov	r0, r6
 80120a0:	f000 fa60 	bl	8012564 <__ieee754_sqrtf>
 80120a4:	4b3a      	ldr	r3, [pc, #232]	; (8012190 <__ieee754_asinf+0x27c>)
 80120a6:	4607      	mov	r7, r0
 80120a8:	4598      	cmp	r8, r3
 80120aa:	dd1a      	ble.n	80120e2 <__ieee754_asinf+0x1ce>
 80120ac:	4651      	mov	r1, sl
 80120ae:	4648      	mov	r0, r9
 80120b0:	f7ee fefc 	bl	8000eac <__aeabi_fdiv>
 80120b4:	4639      	mov	r1, r7
 80120b6:	f7ee fe45 	bl	8000d44 <__aeabi_fmul>
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee fd3a 	bl	8000b34 <__addsf3>
 80120c0:	4601      	mov	r1, r0
 80120c2:	f7ee fd37 	bl	8000b34 <__addsf3>
 80120c6:	4933      	ldr	r1, [pc, #204]	; (8012194 <__ieee754_asinf+0x280>)
 80120c8:	f7ee fd34 	bl	8000b34 <__addsf3>
 80120cc:	4601      	mov	r1, r0
 80120ce:	4823      	ldr	r0, [pc, #140]	; (801215c <__ieee754_asinf+0x248>)
 80120d0:	f7ee fd2e 	bl	8000b30 <__aeabi_fsub>
 80120d4:	2d00      	cmp	r5, #0
 80120d6:	4604      	mov	r4, r0
 80120d8:	f73f af4a 	bgt.w	8011f70 <__ieee754_asinf+0x5c>
 80120dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80120e0:	e735      	b.n	8011f4e <__ieee754_asinf+0x3a>
 80120e2:	4601      	mov	r1, r0
 80120e4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80120e8:	f7ee fd24 	bl	8000b34 <__addsf3>
 80120ec:	4651      	mov	r1, sl
 80120ee:	4604      	mov	r4, r0
 80120f0:	4648      	mov	r0, r9
 80120f2:	f7ee fedb 	bl	8000eac <__aeabi_fdiv>
 80120f6:	4601      	mov	r1, r0
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7ee fe23 	bl	8000d44 <__aeabi_fmul>
 80120fe:	f028 080f 	bic.w	r8, r8, #15
 8012102:	4681      	mov	r9, r0
 8012104:	4641      	mov	r1, r8
 8012106:	4640      	mov	r0, r8
 8012108:	f7ee fe1c 	bl	8000d44 <__aeabi_fmul>
 801210c:	4601      	mov	r1, r0
 801210e:	4630      	mov	r0, r6
 8012110:	f7ee fd0e 	bl	8000b30 <__aeabi_fsub>
 8012114:	4641      	mov	r1, r8
 8012116:	4604      	mov	r4, r0
 8012118:	4638      	mov	r0, r7
 801211a:	f7ee fd0b 	bl	8000b34 <__addsf3>
 801211e:	4601      	mov	r1, r0
 8012120:	4620      	mov	r0, r4
 8012122:	f7ee fec3 	bl	8000eac <__aeabi_fdiv>
 8012126:	4601      	mov	r1, r0
 8012128:	f7ee fd04 	bl	8000b34 <__addsf3>
 801212c:	4601      	mov	r1, r0
 801212e:	480c      	ldr	r0, [pc, #48]	; (8012160 <__ieee754_asinf+0x24c>)
 8012130:	f7ee fcfe 	bl	8000b30 <__aeabi_fsub>
 8012134:	4601      	mov	r1, r0
 8012136:	4648      	mov	r0, r9
 8012138:	f7ee fcfa 	bl	8000b30 <__aeabi_fsub>
 801213c:	4641      	mov	r1, r8
 801213e:	4604      	mov	r4, r0
 8012140:	4640      	mov	r0, r8
 8012142:	f7ee fcf7 	bl	8000b34 <__addsf3>
 8012146:	4601      	mov	r1, r0
 8012148:	4813      	ldr	r0, [pc, #76]	; (8012198 <__ieee754_asinf+0x284>)
 801214a:	f7ee fcf1 	bl	8000b30 <__aeabi_fsub>
 801214e:	4601      	mov	r1, r0
 8012150:	4620      	mov	r0, r4
 8012152:	f7ee fced 	bl	8000b30 <__aeabi_fsub>
 8012156:	4601      	mov	r1, r0
 8012158:	480f      	ldr	r0, [pc, #60]	; (8012198 <__ieee754_asinf+0x284>)
 801215a:	e7b9      	b.n	80120d0 <__ieee754_asinf+0x1bc>
 801215c:	3fc90fdb 	.word	0x3fc90fdb
 8012160:	b33bbd2e 	.word	0xb33bbd2e
 8012164:	7149f2ca 	.word	0x7149f2ca
 8012168:	3811ef08 	.word	0x3811ef08
 801216c:	3a4f7f04 	.word	0x3a4f7f04
 8012170:	3d241146 	.word	0x3d241146
 8012174:	3e4e0aa8 	.word	0x3e4e0aa8
 8012178:	3ea6b090 	.word	0x3ea6b090
 801217c:	3e2aaaab 	.word	0x3e2aaaab
 8012180:	3d9dc62e 	.word	0x3d9dc62e
 8012184:	3f303361 	.word	0x3f303361
 8012188:	4001572d 	.word	0x4001572d
 801218c:	4019d139 	.word	0x4019d139
 8012190:	3f799999 	.word	0x3f799999
 8012194:	333bbd2e 	.word	0x333bbd2e
 8012198:	3f490fdb 	.word	0x3f490fdb

0801219c <__ieee754_atan2f>:
 801219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80121a2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80121a6:	4603      	mov	r3, r0
 80121a8:	dc05      	bgt.n	80121b6 <__ieee754_atan2f+0x1a>
 80121aa:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80121ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80121b2:	4607      	mov	r7, r0
 80121b4:	dd04      	ble.n	80121c0 <__ieee754_atan2f+0x24>
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7ee fcbc 	bl	8000b34 <__addsf3>
 80121bc:	4603      	mov	r3, r0
 80121be:	e011      	b.n	80121e4 <__ieee754_atan2f+0x48>
 80121c0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80121c4:	d103      	bne.n	80121ce <__ieee754_atan2f+0x32>
 80121c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80121ca:	f7fe be43 	b.w	8010e54 <atanf>
 80121ce:	178c      	asrs	r4, r1, #30
 80121d0:	f004 0402 	and.w	r4, r4, #2
 80121d4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80121d8:	b932      	cbnz	r2, 80121e8 <__ieee754_atan2f+0x4c>
 80121da:	2c02      	cmp	r4, #2
 80121dc:	d04c      	beq.n	8012278 <__ieee754_atan2f+0xdc>
 80121de:	2c03      	cmp	r4, #3
 80121e0:	d100      	bne.n	80121e4 <__ieee754_atan2f+0x48>
 80121e2:	4b29      	ldr	r3, [pc, #164]	; (8012288 <__ieee754_atan2f+0xec>)
 80121e4:	4618      	mov	r0, r3
 80121e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e8:	b91e      	cbnz	r6, 80121f2 <__ieee754_atan2f+0x56>
 80121ea:	2f00      	cmp	r7, #0
 80121ec:	da4a      	bge.n	8012284 <__ieee754_atan2f+0xe8>
 80121ee:	4b27      	ldr	r3, [pc, #156]	; (801228c <__ieee754_atan2f+0xf0>)
 80121f0:	e7f8      	b.n	80121e4 <__ieee754_atan2f+0x48>
 80121f2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80121f6:	d10e      	bne.n	8012216 <__ieee754_atan2f+0x7a>
 80121f8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80121fc:	f104 34ff 	add.w	r4, r4, #4294967295
 8012200:	d105      	bne.n	801220e <__ieee754_atan2f+0x72>
 8012202:	2c02      	cmp	r4, #2
 8012204:	d83a      	bhi.n	801227c <__ieee754_atan2f+0xe0>
 8012206:	4b22      	ldr	r3, [pc, #136]	; (8012290 <__ieee754_atan2f+0xf4>)
 8012208:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801220c:	e7ea      	b.n	80121e4 <__ieee754_atan2f+0x48>
 801220e:	2c02      	cmp	r4, #2
 8012210:	d836      	bhi.n	8012280 <__ieee754_atan2f+0xe4>
 8012212:	4b20      	ldr	r3, [pc, #128]	; (8012294 <__ieee754_atan2f+0xf8>)
 8012214:	e7f8      	b.n	8012208 <__ieee754_atan2f+0x6c>
 8012216:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801221a:	d0e6      	beq.n	80121ea <__ieee754_atan2f+0x4e>
 801221c:	1b92      	subs	r2, r2, r6
 801221e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8012222:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8012226:	da17      	bge.n	8012258 <__ieee754_atan2f+0xbc>
 8012228:	2900      	cmp	r1, #0
 801222a:	da01      	bge.n	8012230 <__ieee754_atan2f+0x94>
 801222c:	303c      	adds	r0, #60	; 0x3c
 801222e:	db15      	blt.n	801225c <__ieee754_atan2f+0xc0>
 8012230:	4618      	mov	r0, r3
 8012232:	f7ee fe3b 	bl	8000eac <__aeabi_fdiv>
 8012236:	f7fe ff4d 	bl	80110d4 <fabsf>
 801223a:	f7fe fe0b 	bl	8010e54 <atanf>
 801223e:	4603      	mov	r3, r0
 8012240:	2c01      	cmp	r4, #1
 8012242:	d00d      	beq.n	8012260 <__ieee754_atan2f+0xc4>
 8012244:	2c02      	cmp	r4, #2
 8012246:	d00e      	beq.n	8012266 <__ieee754_atan2f+0xca>
 8012248:	2c00      	cmp	r4, #0
 801224a:	d0cb      	beq.n	80121e4 <__ieee754_atan2f+0x48>
 801224c:	4912      	ldr	r1, [pc, #72]	; (8012298 <__ieee754_atan2f+0xfc>)
 801224e:	4618      	mov	r0, r3
 8012250:	f7ee fc70 	bl	8000b34 <__addsf3>
 8012254:	4911      	ldr	r1, [pc, #68]	; (801229c <__ieee754_atan2f+0x100>)
 8012256:	e00c      	b.n	8012272 <__ieee754_atan2f+0xd6>
 8012258:	4b11      	ldr	r3, [pc, #68]	; (80122a0 <__ieee754_atan2f+0x104>)
 801225a:	e7f1      	b.n	8012240 <__ieee754_atan2f+0xa4>
 801225c:	2300      	movs	r3, #0
 801225e:	e7ef      	b.n	8012240 <__ieee754_atan2f+0xa4>
 8012260:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012264:	e7be      	b.n	80121e4 <__ieee754_atan2f+0x48>
 8012266:	490c      	ldr	r1, [pc, #48]	; (8012298 <__ieee754_atan2f+0xfc>)
 8012268:	4618      	mov	r0, r3
 801226a:	f7ee fc63 	bl	8000b34 <__addsf3>
 801226e:	4601      	mov	r1, r0
 8012270:	480a      	ldr	r0, [pc, #40]	; (801229c <__ieee754_atan2f+0x100>)
 8012272:	f7ee fc5d 	bl	8000b30 <__aeabi_fsub>
 8012276:	e7a1      	b.n	80121bc <__ieee754_atan2f+0x20>
 8012278:	4b08      	ldr	r3, [pc, #32]	; (801229c <__ieee754_atan2f+0x100>)
 801227a:	e7b3      	b.n	80121e4 <__ieee754_atan2f+0x48>
 801227c:	4b09      	ldr	r3, [pc, #36]	; (80122a4 <__ieee754_atan2f+0x108>)
 801227e:	e7b1      	b.n	80121e4 <__ieee754_atan2f+0x48>
 8012280:	2300      	movs	r3, #0
 8012282:	e7af      	b.n	80121e4 <__ieee754_atan2f+0x48>
 8012284:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <__ieee754_atan2f+0x104>)
 8012286:	e7ad      	b.n	80121e4 <__ieee754_atan2f+0x48>
 8012288:	c0490fdb 	.word	0xc0490fdb
 801228c:	bfc90fdb 	.word	0xbfc90fdb
 8012290:	080143d0 	.word	0x080143d0
 8012294:	080143dc 	.word	0x080143dc
 8012298:	33bbbd2e 	.word	0x33bbbd2e
 801229c:	40490fdb 	.word	0x40490fdb
 80122a0:	3fc90fdb 	.word	0x3fc90fdb
 80122a4:	3f490fdb 	.word	0x3f490fdb

080122a8 <__ieee754_rem_pio2f>:
 80122a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ac:	4aa0      	ldr	r2, [pc, #640]	; (8012530 <__ieee754_rem_pio2f+0x288>)
 80122ae:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80122b2:	4296      	cmp	r6, r2
 80122b4:	460c      	mov	r4, r1
 80122b6:	4682      	mov	sl, r0
 80122b8:	b087      	sub	sp, #28
 80122ba:	dc04      	bgt.n	80122c6 <__ieee754_rem_pio2f+0x1e>
 80122bc:	2300      	movs	r3, #0
 80122be:	6008      	str	r0, [r1, #0]
 80122c0:	604b      	str	r3, [r1, #4]
 80122c2:	2500      	movs	r5, #0
 80122c4:	e01a      	b.n	80122fc <__ieee754_rem_pio2f+0x54>
 80122c6:	4a9b      	ldr	r2, [pc, #620]	; (8012534 <__ieee754_rem_pio2f+0x28c>)
 80122c8:	4296      	cmp	r6, r2
 80122ca:	dc4b      	bgt.n	8012364 <__ieee754_rem_pio2f+0xbc>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	499a      	ldr	r1, [pc, #616]	; (8012538 <__ieee754_rem_pio2f+0x290>)
 80122d0:	4f9a      	ldr	r7, [pc, #616]	; (801253c <__ieee754_rem_pio2f+0x294>)
 80122d2:	f026 060f 	bic.w	r6, r6, #15
 80122d6:	dd23      	ble.n	8012320 <__ieee754_rem_pio2f+0x78>
 80122d8:	f7ee fc2a 	bl	8000b30 <__aeabi_fsub>
 80122dc:	42be      	cmp	r6, r7
 80122de:	4605      	mov	r5, r0
 80122e0:	d010      	beq.n	8012304 <__ieee754_rem_pio2f+0x5c>
 80122e2:	4997      	ldr	r1, [pc, #604]	; (8012540 <__ieee754_rem_pio2f+0x298>)
 80122e4:	f7ee fc24 	bl	8000b30 <__aeabi_fsub>
 80122e8:	4601      	mov	r1, r0
 80122ea:	6020      	str	r0, [r4, #0]
 80122ec:	4628      	mov	r0, r5
 80122ee:	f7ee fc1f 	bl	8000b30 <__aeabi_fsub>
 80122f2:	4993      	ldr	r1, [pc, #588]	; (8012540 <__ieee754_rem_pio2f+0x298>)
 80122f4:	f7ee fc1c 	bl	8000b30 <__aeabi_fsub>
 80122f8:	2501      	movs	r5, #1
 80122fa:	6060      	str	r0, [r4, #4]
 80122fc:	4628      	mov	r0, r5
 80122fe:	b007      	add	sp, #28
 8012300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012304:	498f      	ldr	r1, [pc, #572]	; (8012544 <__ieee754_rem_pio2f+0x29c>)
 8012306:	f7ee fc13 	bl	8000b30 <__aeabi_fsub>
 801230a:	498f      	ldr	r1, [pc, #572]	; (8012548 <__ieee754_rem_pio2f+0x2a0>)
 801230c:	4605      	mov	r5, r0
 801230e:	f7ee fc0f 	bl	8000b30 <__aeabi_fsub>
 8012312:	4601      	mov	r1, r0
 8012314:	6020      	str	r0, [r4, #0]
 8012316:	4628      	mov	r0, r5
 8012318:	f7ee fc0a 	bl	8000b30 <__aeabi_fsub>
 801231c:	498a      	ldr	r1, [pc, #552]	; (8012548 <__ieee754_rem_pio2f+0x2a0>)
 801231e:	e7e9      	b.n	80122f4 <__ieee754_rem_pio2f+0x4c>
 8012320:	f7ee fc08 	bl	8000b34 <__addsf3>
 8012324:	42be      	cmp	r6, r7
 8012326:	4605      	mov	r5, r0
 8012328:	d00e      	beq.n	8012348 <__ieee754_rem_pio2f+0xa0>
 801232a:	4985      	ldr	r1, [pc, #532]	; (8012540 <__ieee754_rem_pio2f+0x298>)
 801232c:	f7ee fc02 	bl	8000b34 <__addsf3>
 8012330:	4601      	mov	r1, r0
 8012332:	6020      	str	r0, [r4, #0]
 8012334:	4628      	mov	r0, r5
 8012336:	f7ee fbfb 	bl	8000b30 <__aeabi_fsub>
 801233a:	4981      	ldr	r1, [pc, #516]	; (8012540 <__ieee754_rem_pio2f+0x298>)
 801233c:	f7ee fbfa 	bl	8000b34 <__addsf3>
 8012340:	f04f 35ff 	mov.w	r5, #4294967295
 8012344:	6060      	str	r0, [r4, #4]
 8012346:	e7d9      	b.n	80122fc <__ieee754_rem_pio2f+0x54>
 8012348:	497e      	ldr	r1, [pc, #504]	; (8012544 <__ieee754_rem_pio2f+0x29c>)
 801234a:	f7ee fbf3 	bl	8000b34 <__addsf3>
 801234e:	497e      	ldr	r1, [pc, #504]	; (8012548 <__ieee754_rem_pio2f+0x2a0>)
 8012350:	4605      	mov	r5, r0
 8012352:	f7ee fbef 	bl	8000b34 <__addsf3>
 8012356:	4601      	mov	r1, r0
 8012358:	6020      	str	r0, [r4, #0]
 801235a:	4628      	mov	r0, r5
 801235c:	f7ee fbe8 	bl	8000b30 <__aeabi_fsub>
 8012360:	4979      	ldr	r1, [pc, #484]	; (8012548 <__ieee754_rem_pio2f+0x2a0>)
 8012362:	e7eb      	b.n	801233c <__ieee754_rem_pio2f+0x94>
 8012364:	4a79      	ldr	r2, [pc, #484]	; (801254c <__ieee754_rem_pio2f+0x2a4>)
 8012366:	4296      	cmp	r6, r2
 8012368:	f300 8091 	bgt.w	801248e <__ieee754_rem_pio2f+0x1e6>
 801236c:	f7fe feb2 	bl	80110d4 <fabsf>
 8012370:	4977      	ldr	r1, [pc, #476]	; (8012550 <__ieee754_rem_pio2f+0x2a8>)
 8012372:	4607      	mov	r7, r0
 8012374:	f7ee fce6 	bl	8000d44 <__aeabi_fmul>
 8012378:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801237c:	f7ee fbda 	bl	8000b34 <__addsf3>
 8012380:	f7ee febc 	bl	80010fc <__aeabi_f2iz>
 8012384:	4605      	mov	r5, r0
 8012386:	f7ee fc89 	bl	8000c9c <__aeabi_i2f>
 801238a:	496b      	ldr	r1, [pc, #428]	; (8012538 <__ieee754_rem_pio2f+0x290>)
 801238c:	4681      	mov	r9, r0
 801238e:	f7ee fcd9 	bl	8000d44 <__aeabi_fmul>
 8012392:	4601      	mov	r1, r0
 8012394:	4638      	mov	r0, r7
 8012396:	f7ee fbcb 	bl	8000b30 <__aeabi_fsub>
 801239a:	4969      	ldr	r1, [pc, #420]	; (8012540 <__ieee754_rem_pio2f+0x298>)
 801239c:	4680      	mov	r8, r0
 801239e:	4648      	mov	r0, r9
 80123a0:	f7ee fcd0 	bl	8000d44 <__aeabi_fmul>
 80123a4:	2d1f      	cmp	r5, #31
 80123a6:	4607      	mov	r7, r0
 80123a8:	dc0c      	bgt.n	80123c4 <__ieee754_rem_pio2f+0x11c>
 80123aa:	4a6a      	ldr	r2, [pc, #424]	; (8012554 <__ieee754_rem_pio2f+0x2ac>)
 80123ac:	1e69      	subs	r1, r5, #1
 80123ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80123b2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d004      	beq.n	80123c4 <__ieee754_rem_pio2f+0x11c>
 80123ba:	4639      	mov	r1, r7
 80123bc:	4640      	mov	r0, r8
 80123be:	f7ee fbb7 	bl	8000b30 <__aeabi_fsub>
 80123c2:	e00b      	b.n	80123dc <__ieee754_rem_pio2f+0x134>
 80123c4:	4639      	mov	r1, r7
 80123c6:	4640      	mov	r0, r8
 80123c8:	f7ee fbb2 	bl	8000b30 <__aeabi_fsub>
 80123cc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80123d0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80123d4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80123d8:	2e08      	cmp	r6, #8
 80123da:	dc01      	bgt.n	80123e0 <__ieee754_rem_pio2f+0x138>
 80123dc:	6020      	str	r0, [r4, #0]
 80123de:	e026      	b.n	801242e <__ieee754_rem_pio2f+0x186>
 80123e0:	4958      	ldr	r1, [pc, #352]	; (8012544 <__ieee754_rem_pio2f+0x29c>)
 80123e2:	4648      	mov	r0, r9
 80123e4:	f7ee fcae 	bl	8000d44 <__aeabi_fmul>
 80123e8:	4607      	mov	r7, r0
 80123ea:	4601      	mov	r1, r0
 80123ec:	4640      	mov	r0, r8
 80123ee:	f7ee fb9f 	bl	8000b30 <__aeabi_fsub>
 80123f2:	4601      	mov	r1, r0
 80123f4:	4606      	mov	r6, r0
 80123f6:	4640      	mov	r0, r8
 80123f8:	f7ee fb9a 	bl	8000b30 <__aeabi_fsub>
 80123fc:	4639      	mov	r1, r7
 80123fe:	f7ee fb97 	bl	8000b30 <__aeabi_fsub>
 8012402:	4607      	mov	r7, r0
 8012404:	4950      	ldr	r1, [pc, #320]	; (8012548 <__ieee754_rem_pio2f+0x2a0>)
 8012406:	4648      	mov	r0, r9
 8012408:	f7ee fc9c 	bl	8000d44 <__aeabi_fmul>
 801240c:	4639      	mov	r1, r7
 801240e:	f7ee fb8f 	bl	8000b30 <__aeabi_fsub>
 8012412:	4601      	mov	r1, r0
 8012414:	4607      	mov	r7, r0
 8012416:	4630      	mov	r0, r6
 8012418:	f7ee fb8a 	bl	8000b30 <__aeabi_fsub>
 801241c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012420:	ebab 0b03 	sub.w	fp, fp, r3
 8012424:	f1bb 0f19 	cmp.w	fp, #25
 8012428:	dc16      	bgt.n	8012458 <__ieee754_rem_pio2f+0x1b0>
 801242a:	46b0      	mov	r8, r6
 801242c:	6020      	str	r0, [r4, #0]
 801242e:	6826      	ldr	r6, [r4, #0]
 8012430:	4640      	mov	r0, r8
 8012432:	4631      	mov	r1, r6
 8012434:	f7ee fb7c 	bl	8000b30 <__aeabi_fsub>
 8012438:	4639      	mov	r1, r7
 801243a:	f7ee fb79 	bl	8000b30 <__aeabi_fsub>
 801243e:	f1ba 0f00 	cmp.w	sl, #0
 8012442:	6060      	str	r0, [r4, #4]
 8012444:	f6bf af5a 	bge.w	80122fc <__ieee754_rem_pio2f+0x54>
 8012448:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801244c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012450:	6026      	str	r6, [r4, #0]
 8012452:	6060      	str	r0, [r4, #4]
 8012454:	426d      	negs	r5, r5
 8012456:	e751      	b.n	80122fc <__ieee754_rem_pio2f+0x54>
 8012458:	493f      	ldr	r1, [pc, #252]	; (8012558 <__ieee754_rem_pio2f+0x2b0>)
 801245a:	4648      	mov	r0, r9
 801245c:	f7ee fc72 	bl	8000d44 <__aeabi_fmul>
 8012460:	4607      	mov	r7, r0
 8012462:	4601      	mov	r1, r0
 8012464:	4630      	mov	r0, r6
 8012466:	f7ee fb63 	bl	8000b30 <__aeabi_fsub>
 801246a:	4601      	mov	r1, r0
 801246c:	4680      	mov	r8, r0
 801246e:	4630      	mov	r0, r6
 8012470:	f7ee fb5e 	bl	8000b30 <__aeabi_fsub>
 8012474:	4639      	mov	r1, r7
 8012476:	f7ee fb5b 	bl	8000b30 <__aeabi_fsub>
 801247a:	4606      	mov	r6, r0
 801247c:	4937      	ldr	r1, [pc, #220]	; (801255c <__ieee754_rem_pio2f+0x2b4>)
 801247e:	4648      	mov	r0, r9
 8012480:	f7ee fc60 	bl	8000d44 <__aeabi_fmul>
 8012484:	4631      	mov	r1, r6
 8012486:	f7ee fb53 	bl	8000b30 <__aeabi_fsub>
 801248a:	4607      	mov	r7, r0
 801248c:	e795      	b.n	80123ba <__ieee754_rem_pio2f+0x112>
 801248e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8012492:	db05      	blt.n	80124a0 <__ieee754_rem_pio2f+0x1f8>
 8012494:	4601      	mov	r1, r0
 8012496:	f7ee fb4b 	bl	8000b30 <__aeabi_fsub>
 801249a:	6060      	str	r0, [r4, #4]
 801249c:	6020      	str	r0, [r4, #0]
 801249e:	e710      	b.n	80122c2 <__ieee754_rem_pio2f+0x1a>
 80124a0:	15f7      	asrs	r7, r6, #23
 80124a2:	3f86      	subs	r7, #134	; 0x86
 80124a4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80124a8:	4630      	mov	r0, r6
 80124aa:	f7ee fe27 	bl	80010fc <__aeabi_f2iz>
 80124ae:	f7ee fbf5 	bl	8000c9c <__aeabi_i2f>
 80124b2:	4601      	mov	r1, r0
 80124b4:	9003      	str	r0, [sp, #12]
 80124b6:	4630      	mov	r0, r6
 80124b8:	f7ee fb3a 	bl	8000b30 <__aeabi_fsub>
 80124bc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80124c0:	f7ee fc40 	bl	8000d44 <__aeabi_fmul>
 80124c4:	4606      	mov	r6, r0
 80124c6:	f7ee fe19 	bl	80010fc <__aeabi_f2iz>
 80124ca:	f7ee fbe7 	bl	8000c9c <__aeabi_i2f>
 80124ce:	4601      	mov	r1, r0
 80124d0:	9004      	str	r0, [sp, #16]
 80124d2:	4605      	mov	r5, r0
 80124d4:	4630      	mov	r0, r6
 80124d6:	f7ee fb2b 	bl	8000b30 <__aeabi_fsub>
 80124da:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80124de:	f7ee fc31 	bl	8000d44 <__aeabi_fmul>
 80124e2:	2100      	movs	r1, #0
 80124e4:	9005      	str	r0, [sp, #20]
 80124e6:	f7ee fdc1 	bl	800106c <__aeabi_fcmpeq>
 80124ea:	b1f0      	cbz	r0, 801252a <__ieee754_rem_pio2f+0x282>
 80124ec:	2100      	movs	r1, #0
 80124ee:	4628      	mov	r0, r5
 80124f0:	f7ee fdbc 	bl	800106c <__aeabi_fcmpeq>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	bf14      	ite	ne
 80124f8:	2301      	movne	r3, #1
 80124fa:	2302      	moveq	r3, #2
 80124fc:	4a18      	ldr	r2, [pc, #96]	; (8012560 <__ieee754_rem_pio2f+0x2b8>)
 80124fe:	4621      	mov	r1, r4
 8012500:	9201      	str	r2, [sp, #4]
 8012502:	2202      	movs	r2, #2
 8012504:	a803      	add	r0, sp, #12
 8012506:	9200      	str	r2, [sp, #0]
 8012508:	463a      	mov	r2, r7
 801250a:	f000 f8fd 	bl	8012708 <__kernel_rem_pio2f>
 801250e:	f1ba 0f00 	cmp.w	sl, #0
 8012512:	4605      	mov	r5, r0
 8012514:	f6bf aef2 	bge.w	80122fc <__ieee754_rem_pio2f+0x54>
 8012518:	6823      	ldr	r3, [r4, #0]
 801251a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801251e:	6023      	str	r3, [r4, #0]
 8012520:	6863      	ldr	r3, [r4, #4]
 8012522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012526:	6063      	str	r3, [r4, #4]
 8012528:	e794      	b.n	8012454 <__ieee754_rem_pio2f+0x1ac>
 801252a:	2303      	movs	r3, #3
 801252c:	e7e6      	b.n	80124fc <__ieee754_rem_pio2f+0x254>
 801252e:	bf00      	nop
 8012530:	3f490fd8 	.word	0x3f490fd8
 8012534:	4016cbe3 	.word	0x4016cbe3
 8012538:	3fc90f80 	.word	0x3fc90f80
 801253c:	3fc90fd0 	.word	0x3fc90fd0
 8012540:	37354443 	.word	0x37354443
 8012544:	37354400 	.word	0x37354400
 8012548:	2e85a308 	.word	0x2e85a308
 801254c:	43490f80 	.word	0x43490f80
 8012550:	3f22f984 	.word	0x3f22f984
 8012554:	080143e8 	.word	0x080143e8
 8012558:	2e85a300 	.word	0x2e85a300
 801255c:	248d3132 	.word	0x248d3132
 8012560:	08014468 	.word	0x08014468

08012564 <__ieee754_sqrtf>:
 8012564:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012568:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4603      	mov	r3, r0
 8012570:	4604      	mov	r4, r0
 8012572:	d309      	bcc.n	8012588 <__ieee754_sqrtf+0x24>
 8012574:	4601      	mov	r1, r0
 8012576:	f7ee fbe5 	bl	8000d44 <__aeabi_fmul>
 801257a:	4601      	mov	r1, r0
 801257c:	4620      	mov	r0, r4
 801257e:	f7ee fad9 	bl	8000b34 <__addsf3>
 8012582:	4604      	mov	r4, r0
 8012584:	4620      	mov	r0, r4
 8012586:	bd70      	pop	{r4, r5, r6, pc}
 8012588:	2a00      	cmp	r2, #0
 801258a:	d0fb      	beq.n	8012584 <__ieee754_sqrtf+0x20>
 801258c:	2800      	cmp	r0, #0
 801258e:	da06      	bge.n	801259e <__ieee754_sqrtf+0x3a>
 8012590:	4601      	mov	r1, r0
 8012592:	f7ee facd 	bl	8000b30 <__aeabi_fsub>
 8012596:	4601      	mov	r1, r0
 8012598:	f7ee fc88 	bl	8000eac <__aeabi_fdiv>
 801259c:	e7f1      	b.n	8012582 <__ieee754_sqrtf+0x1e>
 801259e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80125a2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80125a6:	d029      	beq.n	80125fc <__ieee754_sqrtf+0x98>
 80125a8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80125ac:	07cb      	lsls	r3, r1, #31
 80125ae:	f04f 0300 	mov.w	r3, #0
 80125b2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80125b6:	f04f 0419 	mov.w	r4, #25
 80125ba:	461e      	mov	r6, r3
 80125bc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80125c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80125c4:	bf58      	it	pl
 80125c6:	0052      	lslpl	r2, r2, #1
 80125c8:	1040      	asrs	r0, r0, #1
 80125ca:	0052      	lsls	r2, r2, #1
 80125cc:	1875      	adds	r5, r6, r1
 80125ce:	4295      	cmp	r5, r2
 80125d0:	bfde      	ittt	le
 80125d2:	186e      	addle	r6, r5, r1
 80125d4:	1b52      	suble	r2, r2, r5
 80125d6:	185b      	addle	r3, r3, r1
 80125d8:	3c01      	subs	r4, #1
 80125da:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80125de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80125e2:	d1f3      	bne.n	80125cc <__ieee754_sqrtf+0x68>
 80125e4:	b112      	cbz	r2, 80125ec <__ieee754_sqrtf+0x88>
 80125e6:	3301      	adds	r3, #1
 80125e8:	f023 0301 	bic.w	r3, r3, #1
 80125ec:	105c      	asrs	r4, r3, #1
 80125ee:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80125f2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80125f6:	e7c5      	b.n	8012584 <__ieee754_sqrtf+0x20>
 80125f8:	005b      	lsls	r3, r3, #1
 80125fa:	3201      	adds	r2, #1
 80125fc:	0218      	lsls	r0, r3, #8
 80125fe:	d5fb      	bpl.n	80125f8 <__ieee754_sqrtf+0x94>
 8012600:	3a01      	subs	r2, #1
 8012602:	1a89      	subs	r1, r1, r2
 8012604:	e7d0      	b.n	80125a8 <__ieee754_sqrtf+0x44>
	...

08012608 <__kernel_cosf>:
 8012608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801260c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8012610:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012614:	4606      	mov	r6, r0
 8012616:	4688      	mov	r8, r1
 8012618:	da03      	bge.n	8012622 <__kernel_cosf+0x1a>
 801261a:	f7ee fd6f 	bl	80010fc <__aeabi_f2iz>
 801261e:	2800      	cmp	r0, #0
 8012620:	d05c      	beq.n	80126dc <__kernel_cosf+0xd4>
 8012622:	4631      	mov	r1, r6
 8012624:	4630      	mov	r0, r6
 8012626:	f7ee fb8d 	bl	8000d44 <__aeabi_fmul>
 801262a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801262e:	4605      	mov	r5, r0
 8012630:	f7ee fb88 	bl	8000d44 <__aeabi_fmul>
 8012634:	492b      	ldr	r1, [pc, #172]	; (80126e4 <__kernel_cosf+0xdc>)
 8012636:	4607      	mov	r7, r0
 8012638:	4628      	mov	r0, r5
 801263a:	f7ee fb83 	bl	8000d44 <__aeabi_fmul>
 801263e:	492a      	ldr	r1, [pc, #168]	; (80126e8 <__kernel_cosf+0xe0>)
 8012640:	f7ee fa78 	bl	8000b34 <__addsf3>
 8012644:	4629      	mov	r1, r5
 8012646:	f7ee fb7d 	bl	8000d44 <__aeabi_fmul>
 801264a:	4928      	ldr	r1, [pc, #160]	; (80126ec <__kernel_cosf+0xe4>)
 801264c:	f7ee fa70 	bl	8000b30 <__aeabi_fsub>
 8012650:	4629      	mov	r1, r5
 8012652:	f7ee fb77 	bl	8000d44 <__aeabi_fmul>
 8012656:	4926      	ldr	r1, [pc, #152]	; (80126f0 <__kernel_cosf+0xe8>)
 8012658:	f7ee fa6c 	bl	8000b34 <__addsf3>
 801265c:	4629      	mov	r1, r5
 801265e:	f7ee fb71 	bl	8000d44 <__aeabi_fmul>
 8012662:	4924      	ldr	r1, [pc, #144]	; (80126f4 <__kernel_cosf+0xec>)
 8012664:	f7ee fa64 	bl	8000b30 <__aeabi_fsub>
 8012668:	4629      	mov	r1, r5
 801266a:	f7ee fb6b 	bl	8000d44 <__aeabi_fmul>
 801266e:	4922      	ldr	r1, [pc, #136]	; (80126f8 <__kernel_cosf+0xf0>)
 8012670:	f7ee fa60 	bl	8000b34 <__addsf3>
 8012674:	4629      	mov	r1, r5
 8012676:	f7ee fb65 	bl	8000d44 <__aeabi_fmul>
 801267a:	4629      	mov	r1, r5
 801267c:	f7ee fb62 	bl	8000d44 <__aeabi_fmul>
 8012680:	4641      	mov	r1, r8
 8012682:	4605      	mov	r5, r0
 8012684:	4630      	mov	r0, r6
 8012686:	f7ee fb5d 	bl	8000d44 <__aeabi_fmul>
 801268a:	4601      	mov	r1, r0
 801268c:	4628      	mov	r0, r5
 801268e:	f7ee fa4f 	bl	8000b30 <__aeabi_fsub>
 8012692:	4b1a      	ldr	r3, [pc, #104]	; (80126fc <__kernel_cosf+0xf4>)
 8012694:	4605      	mov	r5, r0
 8012696:	429c      	cmp	r4, r3
 8012698:	dc0a      	bgt.n	80126b0 <__kernel_cosf+0xa8>
 801269a:	4601      	mov	r1, r0
 801269c:	4638      	mov	r0, r7
 801269e:	f7ee fa47 	bl	8000b30 <__aeabi_fsub>
 80126a2:	4601      	mov	r1, r0
 80126a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80126a8:	f7ee fa42 	bl	8000b30 <__aeabi_fsub>
 80126ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126b0:	4b13      	ldr	r3, [pc, #76]	; (8012700 <__kernel_cosf+0xf8>)
 80126b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80126b6:	429c      	cmp	r4, r3
 80126b8:	bfcc      	ite	gt
 80126ba:	4c12      	ldrgt	r4, [pc, #72]	; (8012704 <__kernel_cosf+0xfc>)
 80126bc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80126c0:	4621      	mov	r1, r4
 80126c2:	f7ee fa35 	bl	8000b30 <__aeabi_fsub>
 80126c6:	4621      	mov	r1, r4
 80126c8:	4606      	mov	r6, r0
 80126ca:	4638      	mov	r0, r7
 80126cc:	f7ee fa30 	bl	8000b30 <__aeabi_fsub>
 80126d0:	4629      	mov	r1, r5
 80126d2:	f7ee fa2d 	bl	8000b30 <__aeabi_fsub>
 80126d6:	4601      	mov	r1, r0
 80126d8:	4630      	mov	r0, r6
 80126da:	e7e5      	b.n	80126a8 <__kernel_cosf+0xa0>
 80126dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80126e0:	e7e4      	b.n	80126ac <__kernel_cosf+0xa4>
 80126e2:	bf00      	nop
 80126e4:	ad47d74e 	.word	0xad47d74e
 80126e8:	310f74f6 	.word	0x310f74f6
 80126ec:	3493f27c 	.word	0x3493f27c
 80126f0:	37d00d01 	.word	0x37d00d01
 80126f4:	3ab60b61 	.word	0x3ab60b61
 80126f8:	3d2aaaab 	.word	0x3d2aaaab
 80126fc:	3e999999 	.word	0x3e999999
 8012700:	3f480000 	.word	0x3f480000
 8012704:	3e900000 	.word	0x3e900000

08012708 <__kernel_rem_pio2f>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	b0db      	sub	sp, #364	; 0x16c
 801270e:	9202      	str	r2, [sp, #8]
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012714:	4bc5      	ldr	r3, [pc, #788]	; (8012a2c <__kernel_rem_pio2f+0x324>)
 8012716:	9005      	str	r0, [sp, #20]
 8012718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801271c:	9100      	str	r1, [sp, #0]
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	9b04      	ldr	r3, [sp, #16]
 8012722:	3b01      	subs	r3, #1
 8012724:	9303      	str	r3, [sp, #12]
 8012726:	9b02      	ldr	r3, [sp, #8]
 8012728:	1d1a      	adds	r2, r3, #4
 801272a:	f2c0 809b 	blt.w	8012864 <__kernel_rem_pio2f+0x15c>
 801272e:	1edc      	subs	r4, r3, #3
 8012730:	bf48      	it	mi
 8012732:	1d1c      	addmi	r4, r3, #4
 8012734:	10e4      	asrs	r4, r4, #3
 8012736:	2500      	movs	r5, #0
 8012738:	f04f 0a00 	mov.w	sl, #0
 801273c:	1c67      	adds	r7, r4, #1
 801273e:	00fb      	lsls	r3, r7, #3
 8012740:	9306      	str	r3, [sp, #24]
 8012742:	9b02      	ldr	r3, [sp, #8]
 8012744:	9a03      	ldr	r2, [sp, #12]
 8012746:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 801274a:	9b01      	ldr	r3, [sp, #4]
 801274c:	1aa6      	subs	r6, r4, r2
 801274e:	eb03 0802 	add.w	r8, r3, r2
 8012752:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8012754:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8012758:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 801275c:	4545      	cmp	r5, r8
 801275e:	f340 8083 	ble.w	8012868 <__kernel_rem_pio2f+0x160>
 8012762:	f04f 0800 	mov.w	r8, #0
 8012766:	f04f 0b00 	mov.w	fp, #0
 801276a:	9b04      	ldr	r3, [sp, #16]
 801276c:	aa1e      	add	r2, sp, #120	; 0x78
 801276e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012772:	ab46      	add	r3, sp, #280	; 0x118
 8012774:	9a01      	ldr	r2, [sp, #4]
 8012776:	4590      	cmp	r8, r2
 8012778:	f340 809c 	ble.w	80128b4 <__kernel_rem_pio2f+0x1ac>
 801277c:	4613      	mov	r3, r2
 801277e:	aa0a      	add	r2, sp, #40	; 0x28
 8012780:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012784:	9308      	str	r3, [sp, #32]
 8012786:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8012788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801278c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012790:	9307      	str	r3, [sp, #28]
 8012792:	ad0a      	add	r5, sp, #40	; 0x28
 8012794:	462e      	mov	r6, r5
 8012796:	46c3      	mov	fp, r8
 8012798:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 801279c:	ab5a      	add	r3, sp, #360	; 0x168
 801279e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80127a2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80127a6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80127aa:	f1bb 0f00 	cmp.w	fp, #0
 80127ae:	f300 8086 	bgt.w	80128be <__kernel_rem_pio2f+0x1b6>
 80127b2:	4639      	mov	r1, r7
 80127b4:	4620      	mov	r0, r4
 80127b6:	f000 fc3b 	bl	8013030 <scalbnf>
 80127ba:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80127be:	4604      	mov	r4, r0
 80127c0:	f7ee fac0 	bl	8000d44 <__aeabi_fmul>
 80127c4:	f000 fbee 	bl	8012fa4 <floorf>
 80127c8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80127cc:	f7ee faba 	bl	8000d44 <__aeabi_fmul>
 80127d0:	4601      	mov	r1, r0
 80127d2:	4620      	mov	r0, r4
 80127d4:	f7ee f9ac 	bl	8000b30 <__aeabi_fsub>
 80127d8:	4604      	mov	r4, r0
 80127da:	f7ee fc8f 	bl	80010fc <__aeabi_f2iz>
 80127de:	4606      	mov	r6, r0
 80127e0:	f7ee fa5c 	bl	8000c9c <__aeabi_i2f>
 80127e4:	4601      	mov	r1, r0
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ee f9a2 	bl	8000b30 <__aeabi_fsub>
 80127ec:	2f00      	cmp	r7, #0
 80127ee:	4681      	mov	r9, r0
 80127f0:	f340 8084 	ble.w	80128fc <__kernel_rem_pio2f+0x1f4>
 80127f4:	f108 32ff 	add.w	r2, r8, #4294967295
 80127f8:	ab0a      	add	r3, sp, #40	; 0x28
 80127fa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80127fe:	f1c7 0108 	rsb	r1, r7, #8
 8012802:	fa44 f301 	asr.w	r3, r4, r1
 8012806:	441e      	add	r6, r3
 8012808:	408b      	lsls	r3, r1
 801280a:	1ae4      	subs	r4, r4, r3
 801280c:	f1c7 0007 	rsb	r0, r7, #7
 8012810:	ab0a      	add	r3, sp, #40	; 0x28
 8012812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012816:	4104      	asrs	r4, r0
 8012818:	2c00      	cmp	r4, #0
 801281a:	dd7e      	ble.n	801291a <__kernel_rem_pio2f+0x212>
 801281c:	2200      	movs	r2, #0
 801281e:	4692      	mov	sl, r2
 8012820:	3601      	adds	r6, #1
 8012822:	4590      	cmp	r8, r2
 8012824:	f300 80b0 	bgt.w	8012988 <__kernel_rem_pio2f+0x280>
 8012828:	2f00      	cmp	r7, #0
 801282a:	dd05      	ble.n	8012838 <__kernel_rem_pio2f+0x130>
 801282c:	2f01      	cmp	r7, #1
 801282e:	f000 80bd 	beq.w	80129ac <__kernel_rem_pio2f+0x2a4>
 8012832:	2f02      	cmp	r7, #2
 8012834:	f000 80c5 	beq.w	80129c2 <__kernel_rem_pio2f+0x2ba>
 8012838:	2c02      	cmp	r4, #2
 801283a:	d16e      	bne.n	801291a <__kernel_rem_pio2f+0x212>
 801283c:	4649      	mov	r1, r9
 801283e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012842:	f7ee f975 	bl	8000b30 <__aeabi_fsub>
 8012846:	4681      	mov	r9, r0
 8012848:	f1ba 0f00 	cmp.w	sl, #0
 801284c:	d065      	beq.n	801291a <__kernel_rem_pio2f+0x212>
 801284e:	4639      	mov	r1, r7
 8012850:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012854:	f000 fbec 	bl	8013030 <scalbnf>
 8012858:	4601      	mov	r1, r0
 801285a:	4648      	mov	r0, r9
 801285c:	f7ee f968 	bl	8000b30 <__aeabi_fsub>
 8012860:	4681      	mov	r9, r0
 8012862:	e05a      	b.n	801291a <__kernel_rem_pio2f+0x212>
 8012864:	2400      	movs	r4, #0
 8012866:	e766      	b.n	8012736 <__kernel_rem_pio2f+0x2e>
 8012868:	42ee      	cmn	r6, r5
 801286a:	d407      	bmi.n	801287c <__kernel_rem_pio2f+0x174>
 801286c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012870:	f7ee fa14 	bl	8000c9c <__aeabi_i2f>
 8012874:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8012878:	3501      	adds	r5, #1
 801287a:	e76f      	b.n	801275c <__kernel_rem_pio2f+0x54>
 801287c:	4650      	mov	r0, sl
 801287e:	e7f9      	b.n	8012874 <__kernel_rem_pio2f+0x16c>
 8012880:	9b05      	ldr	r3, [sp, #20]
 8012882:	f8da 1000 	ldr.w	r1, [sl]
 8012886:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801288a:	f7ee fa5b 	bl	8000d44 <__aeabi_fmul>
 801288e:	4601      	mov	r1, r0
 8012890:	4630      	mov	r0, r6
 8012892:	f7ee f94f 	bl	8000b34 <__addsf3>
 8012896:	4606      	mov	r6, r0
 8012898:	f109 0901 	add.w	r9, r9, #1
 801289c:	ab46      	add	r3, sp, #280	; 0x118
 801289e:	9a03      	ldr	r2, [sp, #12]
 80128a0:	f1aa 0a04 	sub.w	sl, sl, #4
 80128a4:	4591      	cmp	r9, r2
 80128a6:	ddeb      	ble.n	8012880 <__kernel_rem_pio2f+0x178>
 80128a8:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80128ac:	3504      	adds	r5, #4
 80128ae:	f108 0801 	add.w	r8, r8, #1
 80128b2:	e75f      	b.n	8012774 <__kernel_rem_pio2f+0x6c>
 80128b4:	46aa      	mov	sl, r5
 80128b6:	465e      	mov	r6, fp
 80128b8:	f04f 0900 	mov.w	r9, #0
 80128bc:	e7ef      	b.n	801289e <__kernel_rem_pio2f+0x196>
 80128be:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80128c2:	4620      	mov	r0, r4
 80128c4:	f7ee fa3e 	bl	8000d44 <__aeabi_fmul>
 80128c8:	f7ee fc18 	bl	80010fc <__aeabi_f2iz>
 80128cc:	f7ee f9e6 	bl	8000c9c <__aeabi_i2f>
 80128d0:	4649      	mov	r1, r9
 80128d2:	9009      	str	r0, [sp, #36]	; 0x24
 80128d4:	f7ee fa36 	bl	8000d44 <__aeabi_fmul>
 80128d8:	4601      	mov	r1, r0
 80128da:	4620      	mov	r0, r4
 80128dc:	f7ee f928 	bl	8000b30 <__aeabi_fsub>
 80128e0:	f7ee fc0c 	bl	80010fc <__aeabi_f2iz>
 80128e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128ea:	f846 0b04 	str.w	r0, [r6], #4
 80128ee:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ee f91e 	bl	8000b34 <__addsf3>
 80128f8:	4604      	mov	r4, r0
 80128fa:	e756      	b.n	80127aa <__kernel_rem_pio2f+0xa2>
 80128fc:	d106      	bne.n	801290c <__kernel_rem_pio2f+0x204>
 80128fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8012902:	aa0a      	add	r2, sp, #40	; 0x28
 8012904:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012908:	1224      	asrs	r4, r4, #8
 801290a:	e785      	b.n	8012818 <__kernel_rem_pio2f+0x110>
 801290c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012910:	f7ee fbca 	bl	80010a8 <__aeabi_fcmpge>
 8012914:	4604      	mov	r4, r0
 8012916:	2800      	cmp	r0, #0
 8012918:	d134      	bne.n	8012984 <__kernel_rem_pio2f+0x27c>
 801291a:	2100      	movs	r1, #0
 801291c:	4648      	mov	r0, r9
 801291e:	f7ee fba5 	bl	800106c <__aeabi_fcmpeq>
 8012922:	2800      	cmp	r0, #0
 8012924:	f000 809a 	beq.w	8012a5c <__kernel_rem_pio2f+0x354>
 8012928:	f108 35ff 	add.w	r5, r8, #4294967295
 801292c:	462b      	mov	r3, r5
 801292e:	2200      	movs	r2, #0
 8012930:	9901      	ldr	r1, [sp, #4]
 8012932:	428b      	cmp	r3, r1
 8012934:	da4d      	bge.n	80129d2 <__kernel_rem_pio2f+0x2ca>
 8012936:	2a00      	cmp	r2, #0
 8012938:	d07c      	beq.n	8012a34 <__kernel_rem_pio2f+0x32c>
 801293a:	ab0a      	add	r3, sp, #40	; 0x28
 801293c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012940:	3f08      	subs	r7, #8
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 8088 	beq.w	8012a58 <__kernel_rem_pio2f+0x350>
 8012948:	4639      	mov	r1, r7
 801294a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801294e:	f000 fb6f 	bl	8013030 <scalbnf>
 8012952:	46aa      	mov	sl, r5
 8012954:	4681      	mov	r9, r0
 8012956:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 801295a:	af46      	add	r7, sp, #280	; 0x118
 801295c:	f1ba 0f00 	cmp.w	sl, #0
 8012960:	f280 80b1 	bge.w	8012ac6 <__kernel_rem_pio2f+0x3be>
 8012964:	46a9      	mov	r9, r5
 8012966:	f04f 0a00 	mov.w	sl, #0
 801296a:	2200      	movs	r2, #0
 801296c:	f1b9 0f00 	cmp.w	r9, #0
 8012970:	f2c0 80db 	blt.w	8012b2a <__kernel_rem_pio2f+0x422>
 8012974:	a946      	add	r1, sp, #280	; 0x118
 8012976:	4617      	mov	r7, r2
 8012978:	f04f 0800 	mov.w	r8, #0
 801297c:	4b2c      	ldr	r3, [pc, #176]	; (8012a30 <__kernel_rem_pio2f+0x328>)
 801297e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8012982:	e0c3      	b.n	8012b0c <__kernel_rem_pio2f+0x404>
 8012984:	2402      	movs	r4, #2
 8012986:	e749      	b.n	801281c <__kernel_rem_pio2f+0x114>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	f1ba 0f00 	cmp.w	sl, #0
 801298e:	d108      	bne.n	80129a2 <__kernel_rem_pio2f+0x29a>
 8012990:	b11b      	cbz	r3, 801299a <__kernel_rem_pio2f+0x292>
 8012992:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8012996:	602b      	str	r3, [r5, #0]
 8012998:	2301      	movs	r3, #1
 801299a:	469a      	mov	sl, r3
 801299c:	3201      	adds	r2, #1
 801299e:	3504      	adds	r5, #4
 80129a0:	e73f      	b.n	8012822 <__kernel_rem_pio2f+0x11a>
 80129a2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80129a6:	602b      	str	r3, [r5, #0]
 80129a8:	4653      	mov	r3, sl
 80129aa:	e7f6      	b.n	801299a <__kernel_rem_pio2f+0x292>
 80129ac:	f108 32ff 	add.w	r2, r8, #4294967295
 80129b0:	ab0a      	add	r3, sp, #40	; 0x28
 80129b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129ba:	a90a      	add	r1, sp, #40	; 0x28
 80129bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80129c0:	e73a      	b.n	8012838 <__kernel_rem_pio2f+0x130>
 80129c2:	f108 32ff 	add.w	r2, r8, #4294967295
 80129c6:	ab0a      	add	r3, sp, #40	; 0x28
 80129c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129d0:	e7f3      	b.n	80129ba <__kernel_rem_pio2f+0x2b2>
 80129d2:	a90a      	add	r1, sp, #40	; 0x28
 80129d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80129d8:	3b01      	subs	r3, #1
 80129da:	430a      	orrs	r2, r1
 80129dc:	e7a8      	b.n	8012930 <__kernel_rem_pio2f+0x228>
 80129de:	3301      	adds	r3, #1
 80129e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80129e4:	2900      	cmp	r1, #0
 80129e6:	d0fa      	beq.n	80129de <__kernel_rem_pio2f+0x2d6>
 80129e8:	9a04      	ldr	r2, [sp, #16]
 80129ea:	f108 0501 	add.w	r5, r8, #1
 80129ee:	eb08 0402 	add.w	r4, r8, r2
 80129f2:	aa1e      	add	r2, sp, #120	; 0x78
 80129f4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129f8:	4498      	add	r8, r3
 80129fa:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80129fe:	45a8      	cmp	r8, r5
 8012a00:	f6ff aec7 	blt.w	8012792 <__kernel_rem_pio2f+0x8a>
 8012a04:	9b07      	ldr	r3, [sp, #28]
 8012a06:	46a3      	mov	fp, r4
 8012a08:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a0c:	f7ee f946 	bl	8000c9c <__aeabi_i2f>
 8012a10:	f04f 0a00 	mov.w	sl, #0
 8012a14:	2600      	movs	r6, #0
 8012a16:	f84b 0b04 	str.w	r0, [fp], #4
 8012a1a:	9b03      	ldr	r3, [sp, #12]
 8012a1c:	459a      	cmp	sl, r3
 8012a1e:	dd0c      	ble.n	8012a3a <__kernel_rem_pio2f+0x332>
 8012a20:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8012a24:	465c      	mov	r4, fp
 8012a26:	3501      	adds	r5, #1
 8012a28:	e7e9      	b.n	80129fe <__kernel_rem_pio2f+0x2f6>
 8012a2a:	bf00      	nop
 8012a2c:	080147ac 	.word	0x080147ac
 8012a30:	08014780 	.word	0x08014780
 8012a34:	2301      	movs	r3, #1
 8012a36:	9a08      	ldr	r2, [sp, #32]
 8012a38:	e7d2      	b.n	80129e0 <__kernel_rem_pio2f+0x2d8>
 8012a3a:	9b05      	ldr	r3, [sp, #20]
 8012a3c:	f854 0904 	ldr.w	r0, [r4], #-4
 8012a40:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8012a44:	f7ee f97e 	bl	8000d44 <__aeabi_fmul>
 8012a48:	4601      	mov	r1, r0
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f7ee f872 	bl	8000b34 <__addsf3>
 8012a50:	f10a 0a01 	add.w	sl, sl, #1
 8012a54:	4606      	mov	r6, r0
 8012a56:	e7e0      	b.n	8012a1a <__kernel_rem_pio2f+0x312>
 8012a58:	3d01      	subs	r5, #1
 8012a5a:	e76e      	b.n	801293a <__kernel_rem_pio2f+0x232>
 8012a5c:	9b06      	ldr	r3, [sp, #24]
 8012a5e:	9a02      	ldr	r2, [sp, #8]
 8012a60:	4648      	mov	r0, r9
 8012a62:	1a99      	subs	r1, r3, r2
 8012a64:	f000 fae4 	bl	8013030 <scalbnf>
 8012a68:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8012a6c:	4605      	mov	r5, r0
 8012a6e:	f7ee fb1b 	bl	80010a8 <__aeabi_fcmpge>
 8012a72:	b300      	cbz	r0, 8012ab6 <__kernel_rem_pio2f+0x3ae>
 8012a74:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8012a78:	4628      	mov	r0, r5
 8012a7a:	f7ee f963 	bl	8000d44 <__aeabi_fmul>
 8012a7e:	f7ee fb3d 	bl	80010fc <__aeabi_f2iz>
 8012a82:	f7ee f90b 	bl	8000c9c <__aeabi_i2f>
 8012a86:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8012a8a:	4681      	mov	r9, r0
 8012a8c:	f7ee f95a 	bl	8000d44 <__aeabi_fmul>
 8012a90:	4601      	mov	r1, r0
 8012a92:	4628      	mov	r0, r5
 8012a94:	f7ee f84c 	bl	8000b30 <__aeabi_fsub>
 8012a98:	f7ee fb30 	bl	80010fc <__aeabi_f2iz>
 8012a9c:	ab0a      	add	r3, sp, #40	; 0x28
 8012a9e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012aa2:	4648      	mov	r0, r9
 8012aa4:	f7ee fb2a 	bl	80010fc <__aeabi_f2iz>
 8012aa8:	f108 0501 	add.w	r5, r8, #1
 8012aac:	ab0a      	add	r3, sp, #40	; 0x28
 8012aae:	3708      	adds	r7, #8
 8012ab0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012ab4:	e748      	b.n	8012948 <__kernel_rem_pio2f+0x240>
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	f7ee fb20 	bl	80010fc <__aeabi_f2iz>
 8012abc:	ab0a      	add	r3, sp, #40	; 0x28
 8012abe:	4645      	mov	r5, r8
 8012ac0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012ac4:	e740      	b.n	8012948 <__kernel_rem_pio2f+0x240>
 8012ac6:	ab0a      	add	r3, sp, #40	; 0x28
 8012ac8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012acc:	f7ee f8e6 	bl	8000c9c <__aeabi_i2f>
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	f7ee f937 	bl	8000d44 <__aeabi_fmul>
 8012ad6:	4641      	mov	r1, r8
 8012ad8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8012adc:	4648      	mov	r0, r9
 8012ade:	f7ee f931 	bl	8000d44 <__aeabi_fmul>
 8012ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ae6:	4681      	mov	r9, r0
 8012ae8:	e738      	b.n	801295c <__kernel_rem_pio2f+0x254>
 8012aea:	f853 0b04 	ldr.w	r0, [r3], #4
 8012aee:	f85b 1b04 	ldr.w	r1, [fp], #4
 8012af2:	9203      	str	r2, [sp, #12]
 8012af4:	9302      	str	r3, [sp, #8]
 8012af6:	f7ee f925 	bl	8000d44 <__aeabi_fmul>
 8012afa:	4601      	mov	r1, r0
 8012afc:	4638      	mov	r0, r7
 8012afe:	f7ee f819 	bl	8000b34 <__addsf3>
 8012b02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012b06:	4607      	mov	r7, r0
 8012b08:	f108 0801 	add.w	r8, r8, #1
 8012b0c:	9901      	ldr	r1, [sp, #4]
 8012b0e:	4588      	cmp	r8, r1
 8012b10:	dc01      	bgt.n	8012b16 <__kernel_rem_pio2f+0x40e>
 8012b12:	45c2      	cmp	sl, r8
 8012b14:	dae9      	bge.n	8012aea <__kernel_rem_pio2f+0x3e2>
 8012b16:	ab5a      	add	r3, sp, #360	; 0x168
 8012b18:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012b1c:	f843 7ca0 	str.w	r7, [r3, #-160]
 8012b20:	f109 39ff 	add.w	r9, r9, #4294967295
 8012b24:	f10a 0a01 	add.w	sl, sl, #1
 8012b28:	e720      	b.n	801296c <__kernel_rem_pio2f+0x264>
 8012b2a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	dc07      	bgt.n	8012b40 <__kernel_rem_pio2f+0x438>
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	dc4d      	bgt.n	8012bd0 <__kernel_rem_pio2f+0x4c8>
 8012b34:	d02e      	beq.n	8012b94 <__kernel_rem_pio2f+0x48c>
 8012b36:	f006 0007 	and.w	r0, r6, #7
 8012b3a:	b05b      	add	sp, #364	; 0x16c
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012b42:	2b03      	cmp	r3, #3
 8012b44:	d1f7      	bne.n	8012b36 <__kernel_rem_pio2f+0x42e>
 8012b46:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8012b4a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8012b4e:	46b8      	mov	r8, r7
 8012b50:	46aa      	mov	sl, r5
 8012b52:	f1ba 0f00 	cmp.w	sl, #0
 8012b56:	dc48      	bgt.n	8012bea <__kernel_rem_pio2f+0x4e2>
 8012b58:	46a9      	mov	r9, r5
 8012b5a:	f1b9 0f01 	cmp.w	r9, #1
 8012b5e:	dc5f      	bgt.n	8012c20 <__kernel_rem_pio2f+0x518>
 8012b60:	2000      	movs	r0, #0
 8012b62:	2d01      	cmp	r5, #1
 8012b64:	dc75      	bgt.n	8012c52 <__kernel_rem_pio2f+0x54a>
 8012b66:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8012b68:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	d177      	bne.n	8012c5e <__kernel_rem_pio2f+0x556>
 8012b6e:	9900      	ldr	r1, [sp, #0]
 8012b70:	600a      	str	r2, [r1, #0]
 8012b72:	460a      	mov	r2, r1
 8012b74:	604b      	str	r3, [r1, #4]
 8012b76:	6090      	str	r0, [r2, #8]
 8012b78:	e7dd      	b.n	8012b36 <__kernel_rem_pio2f+0x42e>
 8012b7a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8012b7e:	f7ed ffd9 	bl	8000b34 <__addsf3>
 8012b82:	3d01      	subs	r5, #1
 8012b84:	2d00      	cmp	r5, #0
 8012b86:	daf8      	bge.n	8012b7a <__kernel_rem_pio2f+0x472>
 8012b88:	b10c      	cbz	r4, 8012b8e <__kernel_rem_pio2f+0x486>
 8012b8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012b8e:	9b00      	ldr	r3, [sp, #0]
 8012b90:	6018      	str	r0, [r3, #0]
 8012b92:	e7d0      	b.n	8012b36 <__kernel_rem_pio2f+0x42e>
 8012b94:	2000      	movs	r0, #0
 8012b96:	af32      	add	r7, sp, #200	; 0xc8
 8012b98:	e7f4      	b.n	8012b84 <__kernel_rem_pio2f+0x47c>
 8012b9a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8012b9e:	f7ed ffc9 	bl	8000b34 <__addsf3>
 8012ba2:	3f01      	subs	r7, #1
 8012ba4:	2f00      	cmp	r7, #0
 8012ba6:	daf8      	bge.n	8012b9a <__kernel_rem_pio2f+0x492>
 8012ba8:	b1bc      	cbz	r4, 8012bda <__kernel_rem_pio2f+0x4d2>
 8012baa:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8012bae:	9a00      	ldr	r2, [sp, #0]
 8012bb0:	4601      	mov	r1, r0
 8012bb2:	6013      	str	r3, [r2, #0]
 8012bb4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8012bb6:	f7ed ffbb 	bl	8000b30 <__aeabi_fsub>
 8012bba:	2701      	movs	r7, #1
 8012bbc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012bc0:	42bd      	cmp	r5, r7
 8012bc2:	da0c      	bge.n	8012bde <__kernel_rem_pio2f+0x4d6>
 8012bc4:	b10c      	cbz	r4, 8012bca <__kernel_rem_pio2f+0x4c2>
 8012bc6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012bca:	9b00      	ldr	r3, [sp, #0]
 8012bcc:	6058      	str	r0, [r3, #4]
 8012bce:	e7b2      	b.n	8012b36 <__kernel_rem_pio2f+0x42e>
 8012bd0:	462f      	mov	r7, r5
 8012bd2:	2000      	movs	r0, #0
 8012bd4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012bd8:	e7e4      	b.n	8012ba4 <__kernel_rem_pio2f+0x49c>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	e7e7      	b.n	8012bae <__kernel_rem_pio2f+0x4a6>
 8012bde:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8012be2:	f7ed ffa7 	bl	8000b34 <__addsf3>
 8012be6:	3701      	adds	r7, #1
 8012be8:	e7ea      	b.n	8012bc0 <__kernel_rem_pio2f+0x4b8>
 8012bea:	f8d8 3000 	ldr.w	r3, [r8]
 8012bee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	4610      	mov	r0, r2
 8012bf6:	9302      	str	r3, [sp, #8]
 8012bf8:	9201      	str	r2, [sp, #4]
 8012bfa:	f7ed ff9b 	bl	8000b34 <__addsf3>
 8012bfe:	9a01      	ldr	r2, [sp, #4]
 8012c00:	4601      	mov	r1, r0
 8012c02:	4681      	mov	r9, r0
 8012c04:	4610      	mov	r0, r2
 8012c06:	f7ed ff93 	bl	8000b30 <__aeabi_fsub>
 8012c0a:	9b02      	ldr	r3, [sp, #8]
 8012c0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c10:	4619      	mov	r1, r3
 8012c12:	f7ed ff8f 	bl	8000b34 <__addsf3>
 8012c16:	f848 0904 	str.w	r0, [r8], #-4
 8012c1a:	f8c8 9000 	str.w	r9, [r8]
 8012c1e:	e798      	b.n	8012b52 <__kernel_rem_pio2f+0x44a>
 8012c20:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8012c24:	f8d7 a000 	ldr.w	sl, [r7]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	4651      	mov	r1, sl
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	f7ed ff81 	bl	8000b34 <__addsf3>
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	4601      	mov	r1, r0
 8012c36:	4680      	mov	r8, r0
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ed ff79 	bl	8000b30 <__aeabi_fsub>
 8012c3e:	4651      	mov	r1, sl
 8012c40:	f7ed ff78 	bl	8000b34 <__addsf3>
 8012c44:	f847 0904 	str.w	r0, [r7], #-4
 8012c48:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c4c:	f8c7 8000 	str.w	r8, [r7]
 8012c50:	e783      	b.n	8012b5a <__kernel_rem_pio2f+0x452>
 8012c52:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8012c56:	f7ed ff6d 	bl	8000b34 <__addsf3>
 8012c5a:	3d01      	subs	r5, #1
 8012c5c:	e781      	b.n	8012b62 <__kernel_rem_pio2f+0x45a>
 8012c5e:	9900      	ldr	r1, [sp, #0]
 8012c60:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8012c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012c68:	600a      	str	r2, [r1, #0]
 8012c6a:	604b      	str	r3, [r1, #4]
 8012c6c:	460a      	mov	r2, r1
 8012c6e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012c72:	e780      	b.n	8012b76 <__kernel_rem_pio2f+0x46e>

08012c74 <__kernel_sinf>:
 8012c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c78:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012c7c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012c80:	4604      	mov	r4, r0
 8012c82:	460f      	mov	r7, r1
 8012c84:	4691      	mov	r9, r2
 8012c86:	da03      	bge.n	8012c90 <__kernel_sinf+0x1c>
 8012c88:	f7ee fa38 	bl	80010fc <__aeabi_f2iz>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d035      	beq.n	8012cfc <__kernel_sinf+0x88>
 8012c90:	4621      	mov	r1, r4
 8012c92:	4620      	mov	r0, r4
 8012c94:	f7ee f856 	bl	8000d44 <__aeabi_fmul>
 8012c98:	4605      	mov	r5, r0
 8012c9a:	4601      	mov	r1, r0
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f7ee f851 	bl	8000d44 <__aeabi_fmul>
 8012ca2:	4929      	ldr	r1, [pc, #164]	; (8012d48 <__kernel_sinf+0xd4>)
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	f7ee f84c 	bl	8000d44 <__aeabi_fmul>
 8012cac:	4927      	ldr	r1, [pc, #156]	; (8012d4c <__kernel_sinf+0xd8>)
 8012cae:	f7ed ff3f 	bl	8000b30 <__aeabi_fsub>
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	f7ee f846 	bl	8000d44 <__aeabi_fmul>
 8012cb8:	4925      	ldr	r1, [pc, #148]	; (8012d50 <__kernel_sinf+0xdc>)
 8012cba:	f7ed ff3b 	bl	8000b34 <__addsf3>
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	f7ee f840 	bl	8000d44 <__aeabi_fmul>
 8012cc4:	4923      	ldr	r1, [pc, #140]	; (8012d54 <__kernel_sinf+0xe0>)
 8012cc6:	f7ed ff33 	bl	8000b30 <__aeabi_fsub>
 8012cca:	4629      	mov	r1, r5
 8012ccc:	f7ee f83a 	bl	8000d44 <__aeabi_fmul>
 8012cd0:	4921      	ldr	r1, [pc, #132]	; (8012d58 <__kernel_sinf+0xe4>)
 8012cd2:	f7ed ff2f 	bl	8000b34 <__addsf3>
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	f1b9 0f00 	cmp.w	r9, #0
 8012cdc:	d111      	bne.n	8012d02 <__kernel_sinf+0x8e>
 8012cde:	4601      	mov	r1, r0
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f7ee f82f 	bl	8000d44 <__aeabi_fmul>
 8012ce6:	491d      	ldr	r1, [pc, #116]	; (8012d5c <__kernel_sinf+0xe8>)
 8012ce8:	f7ed ff22 	bl	8000b30 <__aeabi_fsub>
 8012cec:	4631      	mov	r1, r6
 8012cee:	f7ee f829 	bl	8000d44 <__aeabi_fmul>
 8012cf2:	4601      	mov	r1, r0
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	f7ed ff1d 	bl	8000b34 <__addsf3>
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012d06:	4638      	mov	r0, r7
 8012d08:	f7ee f81c 	bl	8000d44 <__aeabi_fmul>
 8012d0c:	4641      	mov	r1, r8
 8012d0e:	4681      	mov	r9, r0
 8012d10:	4630      	mov	r0, r6
 8012d12:	f7ee f817 	bl	8000d44 <__aeabi_fmul>
 8012d16:	4601      	mov	r1, r0
 8012d18:	4648      	mov	r0, r9
 8012d1a:	f7ed ff09 	bl	8000b30 <__aeabi_fsub>
 8012d1e:	4629      	mov	r1, r5
 8012d20:	f7ee f810 	bl	8000d44 <__aeabi_fmul>
 8012d24:	4639      	mov	r1, r7
 8012d26:	f7ed ff03 	bl	8000b30 <__aeabi_fsub>
 8012d2a:	490c      	ldr	r1, [pc, #48]	; (8012d5c <__kernel_sinf+0xe8>)
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f7ee f808 	bl	8000d44 <__aeabi_fmul>
 8012d34:	4601      	mov	r1, r0
 8012d36:	4628      	mov	r0, r5
 8012d38:	f7ed fefc 	bl	8000b34 <__addsf3>
 8012d3c:	4601      	mov	r1, r0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f7ed fef6 	bl	8000b30 <__aeabi_fsub>
 8012d44:	e7d9      	b.n	8012cfa <__kernel_sinf+0x86>
 8012d46:	bf00      	nop
 8012d48:	2f2ec9d3 	.word	0x2f2ec9d3
 8012d4c:	32d72f34 	.word	0x32d72f34
 8012d50:	3638ef1b 	.word	0x3638ef1b
 8012d54:	39500d01 	.word	0x39500d01
 8012d58:	3c088889 	.word	0x3c088889
 8012d5c:	3e2aaaab 	.word	0x3e2aaaab

08012d60 <fabs>:
 8012d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d64:	4770      	bx	lr

08012d66 <finite>:
 8012d66:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8012d6a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012d6e:	0fc0      	lsrs	r0, r0, #31
 8012d70:	4770      	bx	lr
	...

08012d74 <nan>:
 8012d74:	2000      	movs	r0, #0
 8012d76:	4901      	ldr	r1, [pc, #4]	; (8012d7c <nan+0x8>)
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop
 8012d7c:	7ff80000 	.word	0x7ff80000

08012d80 <rint>:
 8012d80:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8012d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d86:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8012d8a:	2f13      	cmp	r7, #19
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	460b      	mov	r3, r1
 8012d90:	460c      	mov	r4, r1
 8012d92:	4605      	mov	r5, r0
 8012d94:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8012d98:	dc59      	bgt.n	8012e4e <rint+0xce>
 8012d9a:	2f00      	cmp	r7, #0
 8012d9c:	da2a      	bge.n	8012df4 <rint+0x74>
 8012d9e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012da2:	4301      	orrs	r1, r0
 8012da4:	d022      	beq.n	8012dec <rint+0x6c>
 8012da6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8012daa:	4301      	orrs	r1, r0
 8012dac:	424d      	negs	r5, r1
 8012dae:	430d      	orrs	r5, r1
 8012db0:	4936      	ldr	r1, [pc, #216]	; (8012e8c <rint+0x10c>)
 8012db2:	0c5c      	lsrs	r4, r3, #17
 8012db4:	0b2d      	lsrs	r5, r5, #12
 8012db6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8012dba:	0464      	lsls	r4, r4, #17
 8012dbc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012dc0:	ea45 0304 	orr.w	r3, r5, r4
 8012dc4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	4629      	mov	r1, r5
 8012dcc:	f7ed f9ce 	bl	800016c <__adddf3>
 8012dd0:	e9cd 0100 	strd	r0, r1, [sp]
 8012dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012dd8:	462b      	mov	r3, r5
 8012dda:	4622      	mov	r2, r4
 8012ddc:	f7ed f9c4 	bl	8000168 <__aeabi_dsub>
 8012de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012de4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	4610      	mov	r0, r2
 8012dee:	4619      	mov	r1, r3
 8012df0:	b003      	add	sp, #12
 8012df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012df4:	4926      	ldr	r1, [pc, #152]	; (8012e90 <rint+0x110>)
 8012df6:	4139      	asrs	r1, r7
 8012df8:	ea03 0001 	and.w	r0, r3, r1
 8012dfc:	4310      	orrs	r0, r2
 8012dfe:	d0f5      	beq.n	8012dec <rint+0x6c>
 8012e00:	084b      	lsrs	r3, r1, #1
 8012e02:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8012e06:	ea52 0501 	orrs.w	r5, r2, r1
 8012e0a:	d00c      	beq.n	8012e26 <rint+0xa6>
 8012e0c:	ea24 0303 	bic.w	r3, r4, r3
 8012e10:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8012e14:	2f13      	cmp	r7, #19
 8012e16:	bf0c      	ite	eq
 8012e18:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8012e1c:	2500      	movne	r5, #0
 8012e1e:	fa44 f707 	asr.w	r7, r4, r7
 8012e22:	ea43 0407 	orr.w	r4, r3, r7
 8012e26:	4919      	ldr	r1, [pc, #100]	; (8012e8c <rint+0x10c>)
 8012e28:	4623      	mov	r3, r4
 8012e2a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8012e2e:	462a      	mov	r2, r5
 8012e30:	e9d6 4500 	ldrd	r4, r5, [r6]
 8012e34:	4620      	mov	r0, r4
 8012e36:	4629      	mov	r1, r5
 8012e38:	f7ed f998 	bl	800016c <__adddf3>
 8012e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8012e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e44:	4622      	mov	r2, r4
 8012e46:	462b      	mov	r3, r5
 8012e48:	f7ed f98e 	bl	8000168 <__aeabi_dsub>
 8012e4c:	e7cc      	b.n	8012de8 <rint+0x68>
 8012e4e:	2f33      	cmp	r7, #51	; 0x33
 8012e50:	dd05      	ble.n	8012e5e <rint+0xde>
 8012e52:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8012e56:	d1c9      	bne.n	8012dec <rint+0x6c>
 8012e58:	f7ed f988 	bl	800016c <__adddf3>
 8012e5c:	e7c4      	b.n	8012de8 <rint+0x68>
 8012e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8012e62:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8012e66:	fa21 f10c 	lsr.w	r1, r1, ip
 8012e6a:	4208      	tst	r0, r1
 8012e6c:	d0be      	beq.n	8012dec <rint+0x6c>
 8012e6e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8012e72:	bf18      	it	ne
 8012e74:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8012e78:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8012e7c:	bf1e      	ittt	ne
 8012e7e:	ea20 0303 	bicne.w	r3, r0, r3
 8012e82:	fa45 fc0c 	asrne.w	ip, r5, ip
 8012e86:	ea43 050c 	orrne.w	r5, r3, ip
 8012e8a:	e7cc      	b.n	8012e26 <rint+0xa6>
 8012e8c:	080147b8 	.word	0x080147b8
 8012e90:	000fffff 	.word	0x000fffff
 8012e94:	00000000 	.word	0x00000000

08012e98 <scalbn>:
 8012e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e9a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	460d      	mov	r5, r1
 8012ea2:	4617      	mov	r7, r2
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	b996      	cbnz	r6, 8012ece <scalbn+0x36>
 8012ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012eac:	4303      	orrs	r3, r0
 8012eae:	d039      	beq.n	8012f24 <scalbn+0x8c>
 8012eb0:	4b35      	ldr	r3, [pc, #212]	; (8012f88 <scalbn+0xf0>)
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f7ed fb10 	bl	80004d8 <__aeabi_dmul>
 8012eb8:	4b34      	ldr	r3, [pc, #208]	; (8012f8c <scalbn+0xf4>)
 8012eba:	4604      	mov	r4, r0
 8012ebc:	429f      	cmp	r7, r3
 8012ebe:	460d      	mov	r5, r1
 8012ec0:	da0f      	bge.n	8012ee2 <scalbn+0x4a>
 8012ec2:	a32d      	add	r3, pc, #180	; (adr r3, 8012f78 <scalbn+0xe0>)
 8012ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec8:	f7ed fb06 	bl	80004d8 <__aeabi_dmul>
 8012ecc:	e006      	b.n	8012edc <scalbn+0x44>
 8012ece:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012ed2:	4296      	cmp	r6, r2
 8012ed4:	d10a      	bne.n	8012eec <scalbn+0x54>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	f7ed f948 	bl	800016c <__adddf3>
 8012edc:	4604      	mov	r4, r0
 8012ede:	460d      	mov	r5, r1
 8012ee0:	e020      	b.n	8012f24 <scalbn+0x8c>
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012ee8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8012eec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012ef0:	19b9      	adds	r1, r7, r6
 8012ef2:	4291      	cmp	r1, r2
 8012ef4:	dd0e      	ble.n	8012f14 <scalbn+0x7c>
 8012ef6:	a322      	add	r3, pc, #136	; (adr r3, 8012f80 <scalbn+0xe8>)
 8012ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012f00:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8012f04:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012f08:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012f0c:	4820      	ldr	r0, [pc, #128]	; (8012f90 <scalbn+0xf8>)
 8012f0e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8012f12:	e7d9      	b.n	8012ec8 <scalbn+0x30>
 8012f14:	2900      	cmp	r1, #0
 8012f16:	dd08      	ble.n	8012f2a <scalbn+0x92>
 8012f18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f20:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012f24:	4620      	mov	r0, r4
 8012f26:	4629      	mov	r1, r5
 8012f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f2a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8012f2e:	da16      	bge.n	8012f5e <scalbn+0xc6>
 8012f30:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012f34:	429f      	cmp	r7, r3
 8012f36:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8012f3a:	dd08      	ble.n	8012f4e <scalbn+0xb6>
 8012f3c:	4c15      	ldr	r4, [pc, #84]	; (8012f94 <scalbn+0xfc>)
 8012f3e:	4814      	ldr	r0, [pc, #80]	; (8012f90 <scalbn+0xf8>)
 8012f40:	f363 74df 	bfi	r4, r3, #31, #1
 8012f44:	a30e      	add	r3, pc, #56	; (adr r3, 8012f80 <scalbn+0xe8>)
 8012f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4a:	4621      	mov	r1, r4
 8012f4c:	e7bc      	b.n	8012ec8 <scalbn+0x30>
 8012f4e:	4c12      	ldr	r4, [pc, #72]	; (8012f98 <scalbn+0x100>)
 8012f50:	4812      	ldr	r0, [pc, #72]	; (8012f9c <scalbn+0x104>)
 8012f52:	f363 74df 	bfi	r4, r3, #31, #1
 8012f56:	a308      	add	r3, pc, #32	; (adr r3, 8012f78 <scalbn+0xe0>)
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	e7f5      	b.n	8012f4a <scalbn+0xb2>
 8012f5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f62:	3136      	adds	r1, #54	; 0x36
 8012f64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	2200      	movs	r2, #0
 8012f72:	4b0b      	ldr	r3, [pc, #44]	; (8012fa0 <scalbn+0x108>)
 8012f74:	e7a8      	b.n	8012ec8 <scalbn+0x30>
 8012f76:	bf00      	nop
 8012f78:	c2f8f359 	.word	0xc2f8f359
 8012f7c:	01a56e1f 	.word	0x01a56e1f
 8012f80:	8800759c 	.word	0x8800759c
 8012f84:	7e37e43c 	.word	0x7e37e43c
 8012f88:	43500000 	.word	0x43500000
 8012f8c:	ffff3cb0 	.word	0xffff3cb0
 8012f90:	8800759c 	.word	0x8800759c
 8012f94:	7e37e43c 	.word	0x7e37e43c
 8012f98:	01a56e1f 	.word	0x01a56e1f
 8012f9c:	c2f8f359 	.word	0xc2f8f359
 8012fa0:	3c900000 	.word	0x3c900000

08012fa4 <floorf>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8012faa:	3d7f      	subs	r5, #127	; 0x7f
 8012fac:	2d16      	cmp	r5, #22
 8012fae:	4601      	mov	r1, r0
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8012fb6:	dc26      	bgt.n	8013006 <floorf+0x62>
 8012fb8:	2d00      	cmp	r5, #0
 8012fba:	da0e      	bge.n	8012fda <floorf+0x36>
 8012fbc:	4917      	ldr	r1, [pc, #92]	; (801301c <floorf+0x78>)
 8012fbe:	f7ed fdb9 	bl	8000b34 <__addsf3>
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	f7ee f87a 	bl	80010bc <__aeabi_fcmpgt>
 8012fc8:	b128      	cbz	r0, 8012fd6 <floorf+0x32>
 8012fca:	2c00      	cmp	r4, #0
 8012fcc:	da23      	bge.n	8013016 <floorf+0x72>
 8012fce:	4b14      	ldr	r3, [pc, #80]	; (8013020 <floorf+0x7c>)
 8012fd0:	2e00      	cmp	r6, #0
 8012fd2:	bf18      	it	ne
 8012fd4:	461c      	movne	r4, r3
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	e01b      	b.n	8013012 <floorf+0x6e>
 8012fda:	4e12      	ldr	r6, [pc, #72]	; (8013024 <floorf+0x80>)
 8012fdc:	412e      	asrs	r6, r5
 8012fde:	4230      	tst	r0, r6
 8012fe0:	d017      	beq.n	8013012 <floorf+0x6e>
 8012fe2:	490e      	ldr	r1, [pc, #56]	; (801301c <floorf+0x78>)
 8012fe4:	f7ed fda6 	bl	8000b34 <__addsf3>
 8012fe8:	2100      	movs	r1, #0
 8012fea:	f7ee f867 	bl	80010bc <__aeabi_fcmpgt>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d0f1      	beq.n	8012fd6 <floorf+0x32>
 8012ff2:	2c00      	cmp	r4, #0
 8012ff4:	bfbe      	ittt	lt
 8012ff6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8012ffa:	fa43 f505 	asrlt.w	r5, r3, r5
 8012ffe:	1964      	addlt	r4, r4, r5
 8013000:	ea24 0406 	bic.w	r4, r4, r6
 8013004:	e7e7      	b.n	8012fd6 <floorf+0x32>
 8013006:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801300a:	d302      	bcc.n	8013012 <floorf+0x6e>
 801300c:	f7ed fd92 	bl	8000b34 <__addsf3>
 8013010:	4601      	mov	r1, r0
 8013012:	4608      	mov	r0, r1
 8013014:	bd70      	pop	{r4, r5, r6, pc}
 8013016:	2400      	movs	r4, #0
 8013018:	e7dd      	b.n	8012fd6 <floorf+0x32>
 801301a:	bf00      	nop
 801301c:	7149f2ca 	.word	0x7149f2ca
 8013020:	bf800000 	.word	0xbf800000
 8013024:	007fffff 	.word	0x007fffff

08013028 <nanf>:
 8013028:	4800      	ldr	r0, [pc, #0]	; (801302c <nanf+0x4>)
 801302a:	4770      	bx	lr
 801302c:	7fc00000 	.word	0x7fc00000

08013030 <scalbnf>:
 8013030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4603      	mov	r3, r0
 8013038:	460d      	mov	r5, r1
 801303a:	4604      	mov	r4, r0
 801303c:	d02a      	beq.n	8013094 <scalbnf+0x64>
 801303e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013042:	d304      	bcc.n	801304e <scalbnf+0x1e>
 8013044:	4601      	mov	r1, r0
 8013046:	f7ed fd75 	bl	8000b34 <__addsf3>
 801304a:	4603      	mov	r3, r0
 801304c:	e022      	b.n	8013094 <scalbnf+0x64>
 801304e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8013052:	d117      	bne.n	8013084 <scalbnf+0x54>
 8013054:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8013058:	f7ed fe74 	bl	8000d44 <__aeabi_fmul>
 801305c:	4a17      	ldr	r2, [pc, #92]	; (80130bc <scalbnf+0x8c>)
 801305e:	4603      	mov	r3, r0
 8013060:	4295      	cmp	r5, r2
 8013062:	db0b      	blt.n	801307c <scalbnf+0x4c>
 8013064:	4604      	mov	r4, r0
 8013066:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801306a:	3a19      	subs	r2, #25
 801306c:	442a      	add	r2, r5
 801306e:	2afe      	cmp	r2, #254	; 0xfe
 8013070:	dd0a      	ble.n	8013088 <scalbnf+0x58>
 8013072:	4913      	ldr	r1, [pc, #76]	; (80130c0 <scalbnf+0x90>)
 8013074:	4618      	mov	r0, r3
 8013076:	f361 001e 	bfi	r0, r1, #0, #31
 801307a:	e000      	b.n	801307e <scalbnf+0x4e>
 801307c:	4911      	ldr	r1, [pc, #68]	; (80130c4 <scalbnf+0x94>)
 801307e:	f7ed fe61 	bl	8000d44 <__aeabi_fmul>
 8013082:	e7e2      	b.n	801304a <scalbnf+0x1a>
 8013084:	0dd2      	lsrs	r2, r2, #23
 8013086:	e7f1      	b.n	801306c <scalbnf+0x3c>
 8013088:	2a00      	cmp	r2, #0
 801308a:	dd05      	ble.n	8013098 <scalbnf+0x68>
 801308c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8013090:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8013094:	4618      	mov	r0, r3
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	f112 0f16 	cmn.w	r2, #22
 801309c:	da05      	bge.n	80130aa <scalbnf+0x7a>
 801309e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80130a2:	4295      	cmp	r5, r2
 80130a4:	dce5      	bgt.n	8013072 <scalbnf+0x42>
 80130a6:	4907      	ldr	r1, [pc, #28]	; (80130c4 <scalbnf+0x94>)
 80130a8:	e7e4      	b.n	8013074 <scalbnf+0x44>
 80130aa:	3219      	adds	r2, #25
 80130ac:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80130b0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80130b4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80130b8:	e7e1      	b.n	801307e <scalbnf+0x4e>
 80130ba:	bf00      	nop
 80130bc:	ffff3cb0 	.word	0xffff3cb0
 80130c0:	7149f2ca 	.word	0x7149f2ca
 80130c4:	0da24260 	.word	0x0da24260

080130c8 <atoi>:
 80130c8:	220a      	movs	r2, #10
 80130ca:	2100      	movs	r1, #0
 80130cc:	f000 b9f0 	b.w	80134b0 <strtol>

080130d0 <__errno>:
 80130d0:	4b01      	ldr	r3, [pc, #4]	; (80130d8 <__errno+0x8>)
 80130d2:	6818      	ldr	r0, [r3, #0]
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	20000010 	.word	0x20000010

080130dc <__libc_init_array>:
 80130dc:	b570      	push	{r4, r5, r6, lr}
 80130de:	2600      	movs	r6, #0
 80130e0:	4d0c      	ldr	r5, [pc, #48]	; (8013114 <__libc_init_array+0x38>)
 80130e2:	4c0d      	ldr	r4, [pc, #52]	; (8013118 <__libc_init_array+0x3c>)
 80130e4:	1b64      	subs	r4, r4, r5
 80130e6:	10a4      	asrs	r4, r4, #2
 80130e8:	42a6      	cmp	r6, r4
 80130ea:	d109      	bne.n	8013100 <__libc_init_array+0x24>
 80130ec:	f001 f8f8 	bl	80142e0 <_init>
 80130f0:	2600      	movs	r6, #0
 80130f2:	4d0a      	ldr	r5, [pc, #40]	; (801311c <__libc_init_array+0x40>)
 80130f4:	4c0a      	ldr	r4, [pc, #40]	; (8013120 <__libc_init_array+0x44>)
 80130f6:	1b64      	subs	r4, r4, r5
 80130f8:	10a4      	asrs	r4, r4, #2
 80130fa:	42a6      	cmp	r6, r4
 80130fc:	d105      	bne.n	801310a <__libc_init_array+0x2e>
 80130fe:	bd70      	pop	{r4, r5, r6, pc}
 8013100:	f855 3b04 	ldr.w	r3, [r5], #4
 8013104:	4798      	blx	r3
 8013106:	3601      	adds	r6, #1
 8013108:	e7ee      	b.n	80130e8 <__libc_init_array+0xc>
 801310a:	f855 3b04 	ldr.w	r3, [r5], #4
 801310e:	4798      	blx	r3
 8013110:	3601      	adds	r6, #1
 8013112:	e7f2      	b.n	80130fa <__libc_init_array+0x1e>
 8013114:	08014a18 	.word	0x08014a18
 8013118:	08014a18 	.word	0x08014a18
 801311c:	08014a18 	.word	0x08014a18
 8013120:	08014a20 	.word	0x08014a20

08013124 <malloc>:
 8013124:	4b02      	ldr	r3, [pc, #8]	; (8013130 <malloc+0xc>)
 8013126:	4601      	mov	r1, r0
 8013128:	6818      	ldr	r0, [r3, #0]
 801312a:	f000 b86d 	b.w	8013208 <_malloc_r>
 801312e:	bf00      	nop
 8013130:	20000010 	.word	0x20000010

08013134 <free>:
 8013134:	4b02      	ldr	r3, [pc, #8]	; (8013140 <free+0xc>)
 8013136:	4601      	mov	r1, r0
 8013138:	6818      	ldr	r0, [r3, #0]
 801313a:	f000 b819 	b.w	8013170 <_free_r>
 801313e:	bf00      	nop
 8013140:	20000010 	.word	0x20000010

08013144 <memcpy>:
 8013144:	440a      	add	r2, r1
 8013146:	4291      	cmp	r1, r2
 8013148:	f100 33ff 	add.w	r3, r0, #4294967295
 801314c:	d100      	bne.n	8013150 <memcpy+0xc>
 801314e:	4770      	bx	lr
 8013150:	b510      	push	{r4, lr}
 8013152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013156:	4291      	cmp	r1, r2
 8013158:	f803 4f01 	strb.w	r4, [r3, #1]!
 801315c:	d1f9      	bne.n	8013152 <memcpy+0xe>
 801315e:	bd10      	pop	{r4, pc}

08013160 <memset>:
 8013160:	4603      	mov	r3, r0
 8013162:	4402      	add	r2, r0
 8013164:	4293      	cmp	r3, r2
 8013166:	d100      	bne.n	801316a <memset+0xa>
 8013168:	4770      	bx	lr
 801316a:	f803 1b01 	strb.w	r1, [r3], #1
 801316e:	e7f9      	b.n	8013164 <memset+0x4>

08013170 <_free_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4605      	mov	r5, r0
 8013174:	2900      	cmp	r1, #0
 8013176:	d043      	beq.n	8013200 <_free_r+0x90>
 8013178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801317c:	1f0c      	subs	r4, r1, #4
 801317e:	2b00      	cmp	r3, #0
 8013180:	bfb8      	it	lt
 8013182:	18e4      	addlt	r4, r4, r3
 8013184:	f000 fac6 	bl	8013714 <__malloc_lock>
 8013188:	4a1e      	ldr	r2, [pc, #120]	; (8013204 <_free_r+0x94>)
 801318a:	6813      	ldr	r3, [r2, #0]
 801318c:	4610      	mov	r0, r2
 801318e:	b933      	cbnz	r3, 801319e <_free_r+0x2e>
 8013190:	6063      	str	r3, [r4, #4]
 8013192:	6014      	str	r4, [r2, #0]
 8013194:	4628      	mov	r0, r5
 8013196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801319a:	f000 bac1 	b.w	8013720 <__malloc_unlock>
 801319e:	42a3      	cmp	r3, r4
 80131a0:	d90a      	bls.n	80131b8 <_free_r+0x48>
 80131a2:	6821      	ldr	r1, [r4, #0]
 80131a4:	1862      	adds	r2, r4, r1
 80131a6:	4293      	cmp	r3, r2
 80131a8:	bf01      	itttt	eq
 80131aa:	681a      	ldreq	r2, [r3, #0]
 80131ac:	685b      	ldreq	r3, [r3, #4]
 80131ae:	1852      	addeq	r2, r2, r1
 80131b0:	6022      	streq	r2, [r4, #0]
 80131b2:	6063      	str	r3, [r4, #4]
 80131b4:	6004      	str	r4, [r0, #0]
 80131b6:	e7ed      	b.n	8013194 <_free_r+0x24>
 80131b8:	461a      	mov	r2, r3
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	b10b      	cbz	r3, 80131c2 <_free_r+0x52>
 80131be:	42a3      	cmp	r3, r4
 80131c0:	d9fa      	bls.n	80131b8 <_free_r+0x48>
 80131c2:	6811      	ldr	r1, [r2, #0]
 80131c4:	1850      	adds	r0, r2, r1
 80131c6:	42a0      	cmp	r0, r4
 80131c8:	d10b      	bne.n	80131e2 <_free_r+0x72>
 80131ca:	6820      	ldr	r0, [r4, #0]
 80131cc:	4401      	add	r1, r0
 80131ce:	1850      	adds	r0, r2, r1
 80131d0:	4283      	cmp	r3, r0
 80131d2:	6011      	str	r1, [r2, #0]
 80131d4:	d1de      	bne.n	8013194 <_free_r+0x24>
 80131d6:	6818      	ldr	r0, [r3, #0]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4401      	add	r1, r0
 80131dc:	6011      	str	r1, [r2, #0]
 80131de:	6053      	str	r3, [r2, #4]
 80131e0:	e7d8      	b.n	8013194 <_free_r+0x24>
 80131e2:	d902      	bls.n	80131ea <_free_r+0x7a>
 80131e4:	230c      	movs	r3, #12
 80131e6:	602b      	str	r3, [r5, #0]
 80131e8:	e7d4      	b.n	8013194 <_free_r+0x24>
 80131ea:	6820      	ldr	r0, [r4, #0]
 80131ec:	1821      	adds	r1, r4, r0
 80131ee:	428b      	cmp	r3, r1
 80131f0:	bf01      	itttt	eq
 80131f2:	6819      	ldreq	r1, [r3, #0]
 80131f4:	685b      	ldreq	r3, [r3, #4]
 80131f6:	1809      	addeq	r1, r1, r0
 80131f8:	6021      	streq	r1, [r4, #0]
 80131fa:	6063      	str	r3, [r4, #4]
 80131fc:	6054      	str	r4, [r2, #4]
 80131fe:	e7c9      	b.n	8013194 <_free_r+0x24>
 8013200:	bd38      	pop	{r3, r4, r5, pc}
 8013202:	bf00      	nop
 8013204:	20001710 	.word	0x20001710

08013208 <_malloc_r>:
 8013208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320a:	1ccd      	adds	r5, r1, #3
 801320c:	f025 0503 	bic.w	r5, r5, #3
 8013210:	3508      	adds	r5, #8
 8013212:	2d0c      	cmp	r5, #12
 8013214:	bf38      	it	cc
 8013216:	250c      	movcc	r5, #12
 8013218:	2d00      	cmp	r5, #0
 801321a:	4606      	mov	r6, r0
 801321c:	db01      	blt.n	8013222 <_malloc_r+0x1a>
 801321e:	42a9      	cmp	r1, r5
 8013220:	d903      	bls.n	801322a <_malloc_r+0x22>
 8013222:	230c      	movs	r3, #12
 8013224:	6033      	str	r3, [r6, #0]
 8013226:	2000      	movs	r0, #0
 8013228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801322a:	f000 fa73 	bl	8013714 <__malloc_lock>
 801322e:	4921      	ldr	r1, [pc, #132]	; (80132b4 <_malloc_r+0xac>)
 8013230:	680a      	ldr	r2, [r1, #0]
 8013232:	4614      	mov	r4, r2
 8013234:	b99c      	cbnz	r4, 801325e <_malloc_r+0x56>
 8013236:	4f20      	ldr	r7, [pc, #128]	; (80132b8 <_malloc_r+0xb0>)
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	b923      	cbnz	r3, 8013246 <_malloc_r+0x3e>
 801323c:	4621      	mov	r1, r4
 801323e:	4630      	mov	r0, r6
 8013240:	f000 f83c 	bl	80132bc <_sbrk_r>
 8013244:	6038      	str	r0, [r7, #0]
 8013246:	4629      	mov	r1, r5
 8013248:	4630      	mov	r0, r6
 801324a:	f000 f837 	bl	80132bc <_sbrk_r>
 801324e:	1c43      	adds	r3, r0, #1
 8013250:	d123      	bne.n	801329a <_malloc_r+0x92>
 8013252:	230c      	movs	r3, #12
 8013254:	4630      	mov	r0, r6
 8013256:	6033      	str	r3, [r6, #0]
 8013258:	f000 fa62 	bl	8013720 <__malloc_unlock>
 801325c:	e7e3      	b.n	8013226 <_malloc_r+0x1e>
 801325e:	6823      	ldr	r3, [r4, #0]
 8013260:	1b5b      	subs	r3, r3, r5
 8013262:	d417      	bmi.n	8013294 <_malloc_r+0x8c>
 8013264:	2b0b      	cmp	r3, #11
 8013266:	d903      	bls.n	8013270 <_malloc_r+0x68>
 8013268:	6023      	str	r3, [r4, #0]
 801326a:	441c      	add	r4, r3
 801326c:	6025      	str	r5, [r4, #0]
 801326e:	e004      	b.n	801327a <_malloc_r+0x72>
 8013270:	6863      	ldr	r3, [r4, #4]
 8013272:	42a2      	cmp	r2, r4
 8013274:	bf0c      	ite	eq
 8013276:	600b      	streq	r3, [r1, #0]
 8013278:	6053      	strne	r3, [r2, #4]
 801327a:	4630      	mov	r0, r6
 801327c:	f000 fa50 	bl	8013720 <__malloc_unlock>
 8013280:	f104 000b 	add.w	r0, r4, #11
 8013284:	1d23      	adds	r3, r4, #4
 8013286:	f020 0007 	bic.w	r0, r0, #7
 801328a:	1ac2      	subs	r2, r0, r3
 801328c:	d0cc      	beq.n	8013228 <_malloc_r+0x20>
 801328e:	1a1b      	subs	r3, r3, r0
 8013290:	50a3      	str	r3, [r4, r2]
 8013292:	e7c9      	b.n	8013228 <_malloc_r+0x20>
 8013294:	4622      	mov	r2, r4
 8013296:	6864      	ldr	r4, [r4, #4]
 8013298:	e7cc      	b.n	8013234 <_malloc_r+0x2c>
 801329a:	1cc4      	adds	r4, r0, #3
 801329c:	f024 0403 	bic.w	r4, r4, #3
 80132a0:	42a0      	cmp	r0, r4
 80132a2:	d0e3      	beq.n	801326c <_malloc_r+0x64>
 80132a4:	1a21      	subs	r1, r4, r0
 80132a6:	4630      	mov	r0, r6
 80132a8:	f000 f808 	bl	80132bc <_sbrk_r>
 80132ac:	3001      	adds	r0, #1
 80132ae:	d1dd      	bne.n	801326c <_malloc_r+0x64>
 80132b0:	e7cf      	b.n	8013252 <_malloc_r+0x4a>
 80132b2:	bf00      	nop
 80132b4:	20001710 	.word	0x20001710
 80132b8:	20001714 	.word	0x20001714

080132bc <_sbrk_r>:
 80132bc:	b538      	push	{r3, r4, r5, lr}
 80132be:	2300      	movs	r3, #0
 80132c0:	4d05      	ldr	r5, [pc, #20]	; (80132d8 <_sbrk_r+0x1c>)
 80132c2:	4604      	mov	r4, r0
 80132c4:	4608      	mov	r0, r1
 80132c6:	602b      	str	r3, [r5, #0]
 80132c8:	f7f2 f9de 	bl	8005688 <_sbrk>
 80132cc:	1c43      	adds	r3, r0, #1
 80132ce:	d102      	bne.n	80132d6 <_sbrk_r+0x1a>
 80132d0:	682b      	ldr	r3, [r5, #0]
 80132d2:	b103      	cbz	r3, 80132d6 <_sbrk_r+0x1a>
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	20001a34 	.word	0x20001a34

080132dc <strcpy>:
 80132dc:	4603      	mov	r3, r0
 80132de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132e2:	f803 2b01 	strb.w	r2, [r3], #1
 80132e6:	2a00      	cmp	r2, #0
 80132e8:	d1f9      	bne.n	80132de <strcpy+0x2>
 80132ea:	4770      	bx	lr

080132ec <strtok>:
 80132ec:	4b16      	ldr	r3, [pc, #88]	; (8013348 <strtok+0x5c>)
 80132ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f2:	681f      	ldr	r7, [r3, #0]
 80132f4:	4605      	mov	r5, r0
 80132f6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80132f8:	460e      	mov	r6, r1
 80132fa:	b9ec      	cbnz	r4, 8013338 <strtok+0x4c>
 80132fc:	2050      	movs	r0, #80	; 0x50
 80132fe:	f7ff ff11 	bl	8013124 <malloc>
 8013302:	4602      	mov	r2, r0
 8013304:	65b8      	str	r0, [r7, #88]	; 0x58
 8013306:	b920      	cbnz	r0, 8013312 <strtok+0x26>
 8013308:	2157      	movs	r1, #87	; 0x57
 801330a:	4b10      	ldr	r3, [pc, #64]	; (801334c <strtok+0x60>)
 801330c:	4810      	ldr	r0, [pc, #64]	; (8013350 <strtok+0x64>)
 801330e:	f000 f8d9 	bl	80134c4 <__assert_func>
 8013312:	e9c0 4400 	strd	r4, r4, [r0]
 8013316:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801331a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801331e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013322:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013326:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801332a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801332e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013332:	6184      	str	r4, [r0, #24]
 8013334:	7704      	strb	r4, [r0, #28]
 8013336:	6244      	str	r4, [r0, #36]	; 0x24
 8013338:	4631      	mov	r1, r6
 801333a:	4628      	mov	r0, r5
 801333c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801333e:	2301      	movs	r3, #1
 8013340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	f000 b806 	b.w	8013354 <__strtok_r>
 8013348:	20000010 	.word	0x20000010
 801334c:	080147cc 	.word	0x080147cc
 8013350:	080147e3 	.word	0x080147e3

08013354 <__strtok_r>:
 8013354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013356:	b908      	cbnz	r0, 801335c <__strtok_r+0x8>
 8013358:	6810      	ldr	r0, [r2, #0]
 801335a:	b188      	cbz	r0, 8013380 <__strtok_r+0x2c>
 801335c:	4604      	mov	r4, r0
 801335e:	460f      	mov	r7, r1
 8013360:	4620      	mov	r0, r4
 8013362:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013366:	f817 6b01 	ldrb.w	r6, [r7], #1
 801336a:	b91e      	cbnz	r6, 8013374 <__strtok_r+0x20>
 801336c:	b965      	cbnz	r5, 8013388 <__strtok_r+0x34>
 801336e:	4628      	mov	r0, r5
 8013370:	6015      	str	r5, [r2, #0]
 8013372:	e005      	b.n	8013380 <__strtok_r+0x2c>
 8013374:	42b5      	cmp	r5, r6
 8013376:	d1f6      	bne.n	8013366 <__strtok_r+0x12>
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1f0      	bne.n	801335e <__strtok_r+0xa>
 801337c:	6014      	str	r4, [r2, #0]
 801337e:	7003      	strb	r3, [r0, #0]
 8013380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013382:	461c      	mov	r4, r3
 8013384:	e00c      	b.n	80133a0 <__strtok_r+0x4c>
 8013386:	b915      	cbnz	r5, 801338e <__strtok_r+0x3a>
 8013388:	460e      	mov	r6, r1
 801338a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801338e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013392:	42ab      	cmp	r3, r5
 8013394:	d1f7      	bne.n	8013386 <__strtok_r+0x32>
 8013396:	2b00      	cmp	r3, #0
 8013398:	d0f3      	beq.n	8013382 <__strtok_r+0x2e>
 801339a:	2300      	movs	r3, #0
 801339c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80133a0:	6014      	str	r4, [r2, #0]
 80133a2:	e7ed      	b.n	8013380 <__strtok_r+0x2c>

080133a4 <_strtol_l.isra.0>:
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133aa:	4686      	mov	lr, r0
 80133ac:	d001      	beq.n	80133b2 <_strtol_l.isra.0+0xe>
 80133ae:	2b24      	cmp	r3, #36	; 0x24
 80133b0:	d906      	bls.n	80133c0 <_strtol_l.isra.0+0x1c>
 80133b2:	f7ff fe8d 	bl	80130d0 <__errno>
 80133b6:	2316      	movs	r3, #22
 80133b8:	6003      	str	r3, [r0, #0]
 80133ba:	2000      	movs	r0, #0
 80133bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c0:	468c      	mov	ip, r1
 80133c2:	4e3a      	ldr	r6, [pc, #232]	; (80134ac <_strtol_l.isra.0+0x108>)
 80133c4:	4660      	mov	r0, ip
 80133c6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80133ca:	5da5      	ldrb	r5, [r4, r6]
 80133cc:	f015 0508 	ands.w	r5, r5, #8
 80133d0:	d1f8      	bne.n	80133c4 <_strtol_l.isra.0+0x20>
 80133d2:	2c2d      	cmp	r4, #45	; 0x2d
 80133d4:	d133      	bne.n	801343e <_strtol_l.isra.0+0x9a>
 80133d6:	f04f 0801 	mov.w	r8, #1
 80133da:	f89c 4000 	ldrb.w	r4, [ip]
 80133de:	f100 0c02 	add.w	ip, r0, #2
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d05d      	beq.n	80134a2 <_strtol_l.isra.0+0xfe>
 80133e6:	2b10      	cmp	r3, #16
 80133e8:	d10c      	bne.n	8013404 <_strtol_l.isra.0+0x60>
 80133ea:	2c30      	cmp	r4, #48	; 0x30
 80133ec:	d10a      	bne.n	8013404 <_strtol_l.isra.0+0x60>
 80133ee:	f89c 0000 	ldrb.w	r0, [ip]
 80133f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80133f6:	2858      	cmp	r0, #88	; 0x58
 80133f8:	d14e      	bne.n	8013498 <_strtol_l.isra.0+0xf4>
 80133fa:	2310      	movs	r3, #16
 80133fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013400:	f10c 0c02 	add.w	ip, ip, #2
 8013404:	2500      	movs	r5, #0
 8013406:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801340a:	3f01      	subs	r7, #1
 801340c:	fbb7 f9f3 	udiv	r9, r7, r3
 8013410:	4628      	mov	r0, r5
 8013412:	fb03 7a19 	mls	sl, r3, r9, r7
 8013416:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801341a:	2e09      	cmp	r6, #9
 801341c:	d818      	bhi.n	8013450 <_strtol_l.isra.0+0xac>
 801341e:	4634      	mov	r4, r6
 8013420:	42a3      	cmp	r3, r4
 8013422:	dd24      	ble.n	801346e <_strtol_l.isra.0+0xca>
 8013424:	2d00      	cmp	r5, #0
 8013426:	db1f      	blt.n	8013468 <_strtol_l.isra.0+0xc4>
 8013428:	4581      	cmp	r9, r0
 801342a:	d31d      	bcc.n	8013468 <_strtol_l.isra.0+0xc4>
 801342c:	d101      	bne.n	8013432 <_strtol_l.isra.0+0x8e>
 801342e:	45a2      	cmp	sl, r4
 8013430:	db1a      	blt.n	8013468 <_strtol_l.isra.0+0xc4>
 8013432:	2501      	movs	r5, #1
 8013434:	fb00 4003 	mla	r0, r0, r3, r4
 8013438:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801343c:	e7eb      	b.n	8013416 <_strtol_l.isra.0+0x72>
 801343e:	2c2b      	cmp	r4, #43	; 0x2b
 8013440:	bf08      	it	eq
 8013442:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013446:	46a8      	mov	r8, r5
 8013448:	bf08      	it	eq
 801344a:	f100 0c02 	addeq.w	ip, r0, #2
 801344e:	e7c8      	b.n	80133e2 <_strtol_l.isra.0+0x3e>
 8013450:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013454:	2e19      	cmp	r6, #25
 8013456:	d801      	bhi.n	801345c <_strtol_l.isra.0+0xb8>
 8013458:	3c37      	subs	r4, #55	; 0x37
 801345a:	e7e1      	b.n	8013420 <_strtol_l.isra.0+0x7c>
 801345c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013460:	2e19      	cmp	r6, #25
 8013462:	d804      	bhi.n	801346e <_strtol_l.isra.0+0xca>
 8013464:	3c57      	subs	r4, #87	; 0x57
 8013466:	e7db      	b.n	8013420 <_strtol_l.isra.0+0x7c>
 8013468:	f04f 35ff 	mov.w	r5, #4294967295
 801346c:	e7e4      	b.n	8013438 <_strtol_l.isra.0+0x94>
 801346e:	2d00      	cmp	r5, #0
 8013470:	da08      	bge.n	8013484 <_strtol_l.isra.0+0xe0>
 8013472:	2322      	movs	r3, #34	; 0x22
 8013474:	4638      	mov	r0, r7
 8013476:	f8ce 3000 	str.w	r3, [lr]
 801347a:	2a00      	cmp	r2, #0
 801347c:	d09e      	beq.n	80133bc <_strtol_l.isra.0+0x18>
 801347e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013482:	e007      	b.n	8013494 <_strtol_l.isra.0+0xf0>
 8013484:	f1b8 0f00 	cmp.w	r8, #0
 8013488:	d000      	beq.n	801348c <_strtol_l.isra.0+0xe8>
 801348a:	4240      	negs	r0, r0
 801348c:	2a00      	cmp	r2, #0
 801348e:	d095      	beq.n	80133bc <_strtol_l.isra.0+0x18>
 8013490:	2d00      	cmp	r5, #0
 8013492:	d1f4      	bne.n	801347e <_strtol_l.isra.0+0xda>
 8013494:	6011      	str	r1, [r2, #0]
 8013496:	e791      	b.n	80133bc <_strtol_l.isra.0+0x18>
 8013498:	2430      	movs	r4, #48	; 0x30
 801349a:	2b00      	cmp	r3, #0
 801349c:	d1b2      	bne.n	8013404 <_strtol_l.isra.0+0x60>
 801349e:	2308      	movs	r3, #8
 80134a0:	e7b0      	b.n	8013404 <_strtol_l.isra.0+0x60>
 80134a2:	2c30      	cmp	r4, #48	; 0x30
 80134a4:	d0a3      	beq.n	80133ee <_strtol_l.isra.0+0x4a>
 80134a6:	230a      	movs	r3, #10
 80134a8:	e7ac      	b.n	8013404 <_strtol_l.isra.0+0x60>
 80134aa:	bf00      	nop
 80134ac:	08014881 	.word	0x08014881

080134b0 <strtol>:
 80134b0:	4613      	mov	r3, r2
 80134b2:	460a      	mov	r2, r1
 80134b4:	4601      	mov	r1, r0
 80134b6:	4802      	ldr	r0, [pc, #8]	; (80134c0 <strtol+0x10>)
 80134b8:	6800      	ldr	r0, [r0, #0]
 80134ba:	f7ff bf73 	b.w	80133a4 <_strtol_l.isra.0>
 80134be:	bf00      	nop
 80134c0:	20000010 	.word	0x20000010

080134c4 <__assert_func>:
 80134c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134c6:	4614      	mov	r4, r2
 80134c8:	461a      	mov	r2, r3
 80134ca:	4b09      	ldr	r3, [pc, #36]	; (80134f0 <__assert_func+0x2c>)
 80134cc:	4605      	mov	r5, r0
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	68d8      	ldr	r0, [r3, #12]
 80134d2:	b14c      	cbz	r4, 80134e8 <__assert_func+0x24>
 80134d4:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <__assert_func+0x30>)
 80134d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80134da:	9100      	str	r1, [sp, #0]
 80134dc:	462b      	mov	r3, r5
 80134de:	4906      	ldr	r1, [pc, #24]	; (80134f8 <__assert_func+0x34>)
 80134e0:	f000 f8e4 	bl	80136ac <fiprintf>
 80134e4:	f000 fd26 	bl	8013f34 <abort>
 80134e8:	4b04      	ldr	r3, [pc, #16]	; (80134fc <__assert_func+0x38>)
 80134ea:	461c      	mov	r4, r3
 80134ec:	e7f3      	b.n	80134d6 <__assert_func+0x12>
 80134ee:	bf00      	nop
 80134f0:	20000010 	.word	0x20000010
 80134f4:	08014844 	.word	0x08014844
 80134f8:	08014851 	.word	0x08014851
 80134fc:	0801487f 	.word	0x0801487f

08013500 <std>:
 8013500:	2300      	movs	r3, #0
 8013502:	b510      	push	{r4, lr}
 8013504:	4604      	mov	r4, r0
 8013506:	e9c0 3300 	strd	r3, r3, [r0]
 801350a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801350e:	6083      	str	r3, [r0, #8]
 8013510:	8181      	strh	r1, [r0, #12]
 8013512:	6643      	str	r3, [r0, #100]	; 0x64
 8013514:	81c2      	strh	r2, [r0, #14]
 8013516:	6183      	str	r3, [r0, #24]
 8013518:	4619      	mov	r1, r3
 801351a:	2208      	movs	r2, #8
 801351c:	305c      	adds	r0, #92	; 0x5c
 801351e:	f7ff fe1f 	bl	8013160 <memset>
 8013522:	4b05      	ldr	r3, [pc, #20]	; (8013538 <std+0x38>)
 8013524:	6224      	str	r4, [r4, #32]
 8013526:	6263      	str	r3, [r4, #36]	; 0x24
 8013528:	4b04      	ldr	r3, [pc, #16]	; (801353c <std+0x3c>)
 801352a:	62a3      	str	r3, [r4, #40]	; 0x28
 801352c:	4b04      	ldr	r3, [pc, #16]	; (8013540 <std+0x40>)
 801352e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013530:	4b04      	ldr	r3, [pc, #16]	; (8013544 <std+0x44>)
 8013532:	6323      	str	r3, [r4, #48]	; 0x30
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop
 8013538:	08013d09 	.word	0x08013d09
 801353c:	08013d2b 	.word	0x08013d2b
 8013540:	08013d63 	.word	0x08013d63
 8013544:	08013d87 	.word	0x08013d87

08013548 <_cleanup_r>:
 8013548:	4901      	ldr	r1, [pc, #4]	; (8013550 <_cleanup_r+0x8>)
 801354a:	f000 b8c1 	b.w	80136d0 <_fwalk_reent>
 801354e:	bf00      	nop
 8013550:	08014071 	.word	0x08014071

08013554 <__sfmoreglue>:
 8013554:	b570      	push	{r4, r5, r6, lr}
 8013556:	2568      	movs	r5, #104	; 0x68
 8013558:	1e4a      	subs	r2, r1, #1
 801355a:	4355      	muls	r5, r2
 801355c:	460e      	mov	r6, r1
 801355e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013562:	f7ff fe51 	bl	8013208 <_malloc_r>
 8013566:	4604      	mov	r4, r0
 8013568:	b140      	cbz	r0, 801357c <__sfmoreglue+0x28>
 801356a:	2100      	movs	r1, #0
 801356c:	e9c0 1600 	strd	r1, r6, [r0]
 8013570:	300c      	adds	r0, #12
 8013572:	60a0      	str	r0, [r4, #8]
 8013574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013578:	f7ff fdf2 	bl	8013160 <memset>
 801357c:	4620      	mov	r0, r4
 801357e:	bd70      	pop	{r4, r5, r6, pc}

08013580 <__sfp_lock_acquire>:
 8013580:	4801      	ldr	r0, [pc, #4]	; (8013588 <__sfp_lock_acquire+0x8>)
 8013582:	f000 b8c5 	b.w	8013710 <__retarget_lock_acquire_recursive>
 8013586:	bf00      	nop
 8013588:	20001a30 	.word	0x20001a30

0801358c <__sfp_lock_release>:
 801358c:	4801      	ldr	r0, [pc, #4]	; (8013594 <__sfp_lock_release+0x8>)
 801358e:	f000 b8c0 	b.w	8013712 <__retarget_lock_release_recursive>
 8013592:	bf00      	nop
 8013594:	20001a30 	.word	0x20001a30

08013598 <__sinit_lock_acquire>:
 8013598:	4801      	ldr	r0, [pc, #4]	; (80135a0 <__sinit_lock_acquire+0x8>)
 801359a:	f000 b8b9 	b.w	8013710 <__retarget_lock_acquire_recursive>
 801359e:	bf00      	nop
 80135a0:	20001a2b 	.word	0x20001a2b

080135a4 <__sinit_lock_release>:
 80135a4:	4801      	ldr	r0, [pc, #4]	; (80135ac <__sinit_lock_release+0x8>)
 80135a6:	f000 b8b4 	b.w	8013712 <__retarget_lock_release_recursive>
 80135aa:	bf00      	nop
 80135ac:	20001a2b 	.word	0x20001a2b

080135b0 <__sinit>:
 80135b0:	b510      	push	{r4, lr}
 80135b2:	4604      	mov	r4, r0
 80135b4:	f7ff fff0 	bl	8013598 <__sinit_lock_acquire>
 80135b8:	69a3      	ldr	r3, [r4, #24]
 80135ba:	b11b      	cbz	r3, 80135c4 <__sinit+0x14>
 80135bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135c0:	f7ff bff0 	b.w	80135a4 <__sinit_lock_release>
 80135c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80135c8:	6523      	str	r3, [r4, #80]	; 0x50
 80135ca:	4b13      	ldr	r3, [pc, #76]	; (8013618 <__sinit+0x68>)
 80135cc:	4a13      	ldr	r2, [pc, #76]	; (801361c <__sinit+0x6c>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80135d2:	42a3      	cmp	r3, r4
 80135d4:	bf08      	it	eq
 80135d6:	2301      	moveq	r3, #1
 80135d8:	4620      	mov	r0, r4
 80135da:	bf08      	it	eq
 80135dc:	61a3      	streq	r3, [r4, #24]
 80135de:	f000 f81f 	bl	8013620 <__sfp>
 80135e2:	6060      	str	r0, [r4, #4]
 80135e4:	4620      	mov	r0, r4
 80135e6:	f000 f81b 	bl	8013620 <__sfp>
 80135ea:	60a0      	str	r0, [r4, #8]
 80135ec:	4620      	mov	r0, r4
 80135ee:	f000 f817 	bl	8013620 <__sfp>
 80135f2:	2200      	movs	r2, #0
 80135f4:	2104      	movs	r1, #4
 80135f6:	60e0      	str	r0, [r4, #12]
 80135f8:	6860      	ldr	r0, [r4, #4]
 80135fa:	f7ff ff81 	bl	8013500 <std>
 80135fe:	2201      	movs	r2, #1
 8013600:	2109      	movs	r1, #9
 8013602:	68a0      	ldr	r0, [r4, #8]
 8013604:	f7ff ff7c 	bl	8013500 <std>
 8013608:	2202      	movs	r2, #2
 801360a:	2112      	movs	r1, #18
 801360c:	68e0      	ldr	r0, [r4, #12]
 801360e:	f7ff ff77 	bl	8013500 <std>
 8013612:	2301      	movs	r3, #1
 8013614:	61a3      	str	r3, [r4, #24]
 8013616:	e7d1      	b.n	80135bc <__sinit+0xc>
 8013618:	080147c8 	.word	0x080147c8
 801361c:	08013549 	.word	0x08013549

08013620 <__sfp>:
 8013620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013622:	4607      	mov	r7, r0
 8013624:	f7ff ffac 	bl	8013580 <__sfp_lock_acquire>
 8013628:	4b1e      	ldr	r3, [pc, #120]	; (80136a4 <__sfp+0x84>)
 801362a:	681e      	ldr	r6, [r3, #0]
 801362c:	69b3      	ldr	r3, [r6, #24]
 801362e:	b913      	cbnz	r3, 8013636 <__sfp+0x16>
 8013630:	4630      	mov	r0, r6
 8013632:	f7ff ffbd 	bl	80135b0 <__sinit>
 8013636:	3648      	adds	r6, #72	; 0x48
 8013638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801363c:	3b01      	subs	r3, #1
 801363e:	d503      	bpl.n	8013648 <__sfp+0x28>
 8013640:	6833      	ldr	r3, [r6, #0]
 8013642:	b30b      	cbz	r3, 8013688 <__sfp+0x68>
 8013644:	6836      	ldr	r6, [r6, #0]
 8013646:	e7f7      	b.n	8013638 <__sfp+0x18>
 8013648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801364c:	b9d5      	cbnz	r5, 8013684 <__sfp+0x64>
 801364e:	4b16      	ldr	r3, [pc, #88]	; (80136a8 <__sfp+0x88>)
 8013650:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013654:	60e3      	str	r3, [r4, #12]
 8013656:	6665      	str	r5, [r4, #100]	; 0x64
 8013658:	f000 f859 	bl	801370e <__retarget_lock_init_recursive>
 801365c:	f7ff ff96 	bl	801358c <__sfp_lock_release>
 8013660:	2208      	movs	r2, #8
 8013662:	4629      	mov	r1, r5
 8013664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801366c:	6025      	str	r5, [r4, #0]
 801366e:	61a5      	str	r5, [r4, #24]
 8013670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013674:	f7ff fd74 	bl	8013160 <memset>
 8013678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801367c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013680:	4620      	mov	r0, r4
 8013682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013684:	3468      	adds	r4, #104	; 0x68
 8013686:	e7d9      	b.n	801363c <__sfp+0x1c>
 8013688:	2104      	movs	r1, #4
 801368a:	4638      	mov	r0, r7
 801368c:	f7ff ff62 	bl	8013554 <__sfmoreglue>
 8013690:	4604      	mov	r4, r0
 8013692:	6030      	str	r0, [r6, #0]
 8013694:	2800      	cmp	r0, #0
 8013696:	d1d5      	bne.n	8013644 <__sfp+0x24>
 8013698:	f7ff ff78 	bl	801358c <__sfp_lock_release>
 801369c:	230c      	movs	r3, #12
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	e7ee      	b.n	8013680 <__sfp+0x60>
 80136a2:	bf00      	nop
 80136a4:	080147c8 	.word	0x080147c8
 80136a8:	ffff0001 	.word	0xffff0001

080136ac <fiprintf>:
 80136ac:	b40e      	push	{r1, r2, r3}
 80136ae:	b503      	push	{r0, r1, lr}
 80136b0:	4601      	mov	r1, r0
 80136b2:	ab03      	add	r3, sp, #12
 80136b4:	4805      	ldr	r0, [pc, #20]	; (80136cc <fiprintf+0x20>)
 80136b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ba:	6800      	ldr	r0, [r0, #0]
 80136bc:	9301      	str	r3, [sp, #4]
 80136be:	f000 f85d 	bl	801377c <_vfiprintf_r>
 80136c2:	b002      	add	sp, #8
 80136c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80136c8:	b003      	add	sp, #12
 80136ca:	4770      	bx	lr
 80136cc:	20000010 	.word	0x20000010

080136d0 <_fwalk_reent>:
 80136d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136d4:	4606      	mov	r6, r0
 80136d6:	4688      	mov	r8, r1
 80136d8:	2700      	movs	r7, #0
 80136da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80136de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136e2:	f1b9 0901 	subs.w	r9, r9, #1
 80136e6:	d505      	bpl.n	80136f4 <_fwalk_reent+0x24>
 80136e8:	6824      	ldr	r4, [r4, #0]
 80136ea:	2c00      	cmp	r4, #0
 80136ec:	d1f7      	bne.n	80136de <_fwalk_reent+0xe>
 80136ee:	4638      	mov	r0, r7
 80136f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f4:	89ab      	ldrh	r3, [r5, #12]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d907      	bls.n	801370a <_fwalk_reent+0x3a>
 80136fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136fe:	3301      	adds	r3, #1
 8013700:	d003      	beq.n	801370a <_fwalk_reent+0x3a>
 8013702:	4629      	mov	r1, r5
 8013704:	4630      	mov	r0, r6
 8013706:	47c0      	blx	r8
 8013708:	4307      	orrs	r7, r0
 801370a:	3568      	adds	r5, #104	; 0x68
 801370c:	e7e9      	b.n	80136e2 <_fwalk_reent+0x12>

0801370e <__retarget_lock_init_recursive>:
 801370e:	4770      	bx	lr

08013710 <__retarget_lock_acquire_recursive>:
 8013710:	4770      	bx	lr

08013712 <__retarget_lock_release_recursive>:
 8013712:	4770      	bx	lr

08013714 <__malloc_lock>:
 8013714:	4801      	ldr	r0, [pc, #4]	; (801371c <__malloc_lock+0x8>)
 8013716:	f7ff bffb 	b.w	8013710 <__retarget_lock_acquire_recursive>
 801371a:	bf00      	nop
 801371c:	20001a2c 	.word	0x20001a2c

08013720 <__malloc_unlock>:
 8013720:	4801      	ldr	r0, [pc, #4]	; (8013728 <__malloc_unlock+0x8>)
 8013722:	f7ff bff6 	b.w	8013712 <__retarget_lock_release_recursive>
 8013726:	bf00      	nop
 8013728:	20001a2c 	.word	0x20001a2c

0801372c <__sfputc_r>:
 801372c:	6893      	ldr	r3, [r2, #8]
 801372e:	b410      	push	{r4}
 8013730:	3b01      	subs	r3, #1
 8013732:	2b00      	cmp	r3, #0
 8013734:	6093      	str	r3, [r2, #8]
 8013736:	da07      	bge.n	8013748 <__sfputc_r+0x1c>
 8013738:	6994      	ldr	r4, [r2, #24]
 801373a:	42a3      	cmp	r3, r4
 801373c:	db01      	blt.n	8013742 <__sfputc_r+0x16>
 801373e:	290a      	cmp	r1, #10
 8013740:	d102      	bne.n	8013748 <__sfputc_r+0x1c>
 8013742:	bc10      	pop	{r4}
 8013744:	f000 bb24 	b.w	8013d90 <__swbuf_r>
 8013748:	6813      	ldr	r3, [r2, #0]
 801374a:	1c58      	adds	r0, r3, #1
 801374c:	6010      	str	r0, [r2, #0]
 801374e:	7019      	strb	r1, [r3, #0]
 8013750:	4608      	mov	r0, r1
 8013752:	bc10      	pop	{r4}
 8013754:	4770      	bx	lr

08013756 <__sfputs_r>:
 8013756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013758:	4606      	mov	r6, r0
 801375a:	460f      	mov	r7, r1
 801375c:	4614      	mov	r4, r2
 801375e:	18d5      	adds	r5, r2, r3
 8013760:	42ac      	cmp	r4, r5
 8013762:	d101      	bne.n	8013768 <__sfputs_r+0x12>
 8013764:	2000      	movs	r0, #0
 8013766:	e007      	b.n	8013778 <__sfputs_r+0x22>
 8013768:	463a      	mov	r2, r7
 801376a:	4630      	mov	r0, r6
 801376c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013770:	f7ff ffdc 	bl	801372c <__sfputc_r>
 8013774:	1c43      	adds	r3, r0, #1
 8013776:	d1f3      	bne.n	8013760 <__sfputs_r+0xa>
 8013778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801377c <_vfiprintf_r>:
 801377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013780:	460d      	mov	r5, r1
 8013782:	4614      	mov	r4, r2
 8013784:	4698      	mov	r8, r3
 8013786:	4606      	mov	r6, r0
 8013788:	b09d      	sub	sp, #116	; 0x74
 801378a:	b118      	cbz	r0, 8013794 <_vfiprintf_r+0x18>
 801378c:	6983      	ldr	r3, [r0, #24]
 801378e:	b90b      	cbnz	r3, 8013794 <_vfiprintf_r+0x18>
 8013790:	f7ff ff0e 	bl	80135b0 <__sinit>
 8013794:	4b89      	ldr	r3, [pc, #548]	; (80139bc <_vfiprintf_r+0x240>)
 8013796:	429d      	cmp	r5, r3
 8013798:	d11b      	bne.n	80137d2 <_vfiprintf_r+0x56>
 801379a:	6875      	ldr	r5, [r6, #4]
 801379c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801379e:	07d9      	lsls	r1, r3, #31
 80137a0:	d405      	bmi.n	80137ae <_vfiprintf_r+0x32>
 80137a2:	89ab      	ldrh	r3, [r5, #12]
 80137a4:	059a      	lsls	r2, r3, #22
 80137a6:	d402      	bmi.n	80137ae <_vfiprintf_r+0x32>
 80137a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137aa:	f7ff ffb1 	bl	8013710 <__retarget_lock_acquire_recursive>
 80137ae:	89ab      	ldrh	r3, [r5, #12]
 80137b0:	071b      	lsls	r3, r3, #28
 80137b2:	d501      	bpl.n	80137b8 <_vfiprintf_r+0x3c>
 80137b4:	692b      	ldr	r3, [r5, #16]
 80137b6:	b9eb      	cbnz	r3, 80137f4 <_vfiprintf_r+0x78>
 80137b8:	4629      	mov	r1, r5
 80137ba:	4630      	mov	r0, r6
 80137bc:	f000 fb4c 	bl	8013e58 <__swsetup_r>
 80137c0:	b1c0      	cbz	r0, 80137f4 <_vfiprintf_r+0x78>
 80137c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137c4:	07dc      	lsls	r4, r3, #31
 80137c6:	d50e      	bpl.n	80137e6 <_vfiprintf_r+0x6a>
 80137c8:	f04f 30ff 	mov.w	r0, #4294967295
 80137cc:	b01d      	add	sp, #116	; 0x74
 80137ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d2:	4b7b      	ldr	r3, [pc, #492]	; (80139c0 <_vfiprintf_r+0x244>)
 80137d4:	429d      	cmp	r5, r3
 80137d6:	d101      	bne.n	80137dc <_vfiprintf_r+0x60>
 80137d8:	68b5      	ldr	r5, [r6, #8]
 80137da:	e7df      	b.n	801379c <_vfiprintf_r+0x20>
 80137dc:	4b79      	ldr	r3, [pc, #484]	; (80139c4 <_vfiprintf_r+0x248>)
 80137de:	429d      	cmp	r5, r3
 80137e0:	bf08      	it	eq
 80137e2:	68f5      	ldreq	r5, [r6, #12]
 80137e4:	e7da      	b.n	801379c <_vfiprintf_r+0x20>
 80137e6:	89ab      	ldrh	r3, [r5, #12]
 80137e8:	0598      	lsls	r0, r3, #22
 80137ea:	d4ed      	bmi.n	80137c8 <_vfiprintf_r+0x4c>
 80137ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ee:	f7ff ff90 	bl	8013712 <__retarget_lock_release_recursive>
 80137f2:	e7e9      	b.n	80137c8 <_vfiprintf_r+0x4c>
 80137f4:	2300      	movs	r3, #0
 80137f6:	9309      	str	r3, [sp, #36]	; 0x24
 80137f8:	2320      	movs	r3, #32
 80137fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137fe:	2330      	movs	r3, #48	; 0x30
 8013800:	f04f 0901 	mov.w	r9, #1
 8013804:	f8cd 800c 	str.w	r8, [sp, #12]
 8013808:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80139c8 <_vfiprintf_r+0x24c>
 801380c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013810:	4623      	mov	r3, r4
 8013812:	469a      	mov	sl, r3
 8013814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013818:	b10a      	cbz	r2, 801381e <_vfiprintf_r+0xa2>
 801381a:	2a25      	cmp	r2, #37	; 0x25
 801381c:	d1f9      	bne.n	8013812 <_vfiprintf_r+0x96>
 801381e:	ebba 0b04 	subs.w	fp, sl, r4
 8013822:	d00b      	beq.n	801383c <_vfiprintf_r+0xc0>
 8013824:	465b      	mov	r3, fp
 8013826:	4622      	mov	r2, r4
 8013828:	4629      	mov	r1, r5
 801382a:	4630      	mov	r0, r6
 801382c:	f7ff ff93 	bl	8013756 <__sfputs_r>
 8013830:	3001      	adds	r0, #1
 8013832:	f000 80aa 	beq.w	801398a <_vfiprintf_r+0x20e>
 8013836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013838:	445a      	add	r2, fp
 801383a:	9209      	str	r2, [sp, #36]	; 0x24
 801383c:	f89a 3000 	ldrb.w	r3, [sl]
 8013840:	2b00      	cmp	r3, #0
 8013842:	f000 80a2 	beq.w	801398a <_vfiprintf_r+0x20e>
 8013846:	2300      	movs	r3, #0
 8013848:	f04f 32ff 	mov.w	r2, #4294967295
 801384c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013850:	f10a 0a01 	add.w	sl, sl, #1
 8013854:	9304      	str	r3, [sp, #16]
 8013856:	9307      	str	r3, [sp, #28]
 8013858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801385c:	931a      	str	r3, [sp, #104]	; 0x68
 801385e:	4654      	mov	r4, sl
 8013860:	2205      	movs	r2, #5
 8013862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013866:	4858      	ldr	r0, [pc, #352]	; (80139c8 <_vfiprintf_r+0x24c>)
 8013868:	f000 fcb4 	bl	80141d4 <memchr>
 801386c:	9a04      	ldr	r2, [sp, #16]
 801386e:	b9d8      	cbnz	r0, 80138a8 <_vfiprintf_r+0x12c>
 8013870:	06d1      	lsls	r1, r2, #27
 8013872:	bf44      	itt	mi
 8013874:	2320      	movmi	r3, #32
 8013876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801387a:	0713      	lsls	r3, r2, #28
 801387c:	bf44      	itt	mi
 801387e:	232b      	movmi	r3, #43	; 0x2b
 8013880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013884:	f89a 3000 	ldrb.w	r3, [sl]
 8013888:	2b2a      	cmp	r3, #42	; 0x2a
 801388a:	d015      	beq.n	80138b8 <_vfiprintf_r+0x13c>
 801388c:	4654      	mov	r4, sl
 801388e:	2000      	movs	r0, #0
 8013890:	f04f 0c0a 	mov.w	ip, #10
 8013894:	9a07      	ldr	r2, [sp, #28]
 8013896:	4621      	mov	r1, r4
 8013898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801389c:	3b30      	subs	r3, #48	; 0x30
 801389e:	2b09      	cmp	r3, #9
 80138a0:	d94e      	bls.n	8013940 <_vfiprintf_r+0x1c4>
 80138a2:	b1b0      	cbz	r0, 80138d2 <_vfiprintf_r+0x156>
 80138a4:	9207      	str	r2, [sp, #28]
 80138a6:	e014      	b.n	80138d2 <_vfiprintf_r+0x156>
 80138a8:	eba0 0308 	sub.w	r3, r0, r8
 80138ac:	fa09 f303 	lsl.w	r3, r9, r3
 80138b0:	4313      	orrs	r3, r2
 80138b2:	46a2      	mov	sl, r4
 80138b4:	9304      	str	r3, [sp, #16]
 80138b6:	e7d2      	b.n	801385e <_vfiprintf_r+0xe2>
 80138b8:	9b03      	ldr	r3, [sp, #12]
 80138ba:	1d19      	adds	r1, r3, #4
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	9103      	str	r1, [sp, #12]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	bfbb      	ittet	lt
 80138c4:	425b      	neglt	r3, r3
 80138c6:	f042 0202 	orrlt.w	r2, r2, #2
 80138ca:	9307      	strge	r3, [sp, #28]
 80138cc:	9307      	strlt	r3, [sp, #28]
 80138ce:	bfb8      	it	lt
 80138d0:	9204      	strlt	r2, [sp, #16]
 80138d2:	7823      	ldrb	r3, [r4, #0]
 80138d4:	2b2e      	cmp	r3, #46	; 0x2e
 80138d6:	d10c      	bne.n	80138f2 <_vfiprintf_r+0x176>
 80138d8:	7863      	ldrb	r3, [r4, #1]
 80138da:	2b2a      	cmp	r3, #42	; 0x2a
 80138dc:	d135      	bne.n	801394a <_vfiprintf_r+0x1ce>
 80138de:	9b03      	ldr	r3, [sp, #12]
 80138e0:	3402      	adds	r4, #2
 80138e2:	1d1a      	adds	r2, r3, #4
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	9203      	str	r2, [sp, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	bfb8      	it	lt
 80138ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80138f0:	9305      	str	r3, [sp, #20]
 80138f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139d8 <_vfiprintf_r+0x25c>
 80138f6:	2203      	movs	r2, #3
 80138f8:	4650      	mov	r0, sl
 80138fa:	7821      	ldrb	r1, [r4, #0]
 80138fc:	f000 fc6a 	bl	80141d4 <memchr>
 8013900:	b140      	cbz	r0, 8013914 <_vfiprintf_r+0x198>
 8013902:	2340      	movs	r3, #64	; 0x40
 8013904:	eba0 000a 	sub.w	r0, r0, sl
 8013908:	fa03 f000 	lsl.w	r0, r3, r0
 801390c:	9b04      	ldr	r3, [sp, #16]
 801390e:	3401      	adds	r4, #1
 8013910:	4303      	orrs	r3, r0
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013918:	2206      	movs	r2, #6
 801391a:	482c      	ldr	r0, [pc, #176]	; (80139cc <_vfiprintf_r+0x250>)
 801391c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013920:	f000 fc58 	bl	80141d4 <memchr>
 8013924:	2800      	cmp	r0, #0
 8013926:	d03f      	beq.n	80139a8 <_vfiprintf_r+0x22c>
 8013928:	4b29      	ldr	r3, [pc, #164]	; (80139d0 <_vfiprintf_r+0x254>)
 801392a:	bb1b      	cbnz	r3, 8013974 <_vfiprintf_r+0x1f8>
 801392c:	9b03      	ldr	r3, [sp, #12]
 801392e:	3307      	adds	r3, #7
 8013930:	f023 0307 	bic.w	r3, r3, #7
 8013934:	3308      	adds	r3, #8
 8013936:	9303      	str	r3, [sp, #12]
 8013938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801393a:	443b      	add	r3, r7
 801393c:	9309      	str	r3, [sp, #36]	; 0x24
 801393e:	e767      	b.n	8013810 <_vfiprintf_r+0x94>
 8013940:	460c      	mov	r4, r1
 8013942:	2001      	movs	r0, #1
 8013944:	fb0c 3202 	mla	r2, ip, r2, r3
 8013948:	e7a5      	b.n	8013896 <_vfiprintf_r+0x11a>
 801394a:	2300      	movs	r3, #0
 801394c:	f04f 0c0a 	mov.w	ip, #10
 8013950:	4619      	mov	r1, r3
 8013952:	3401      	adds	r4, #1
 8013954:	9305      	str	r3, [sp, #20]
 8013956:	4620      	mov	r0, r4
 8013958:	f810 2b01 	ldrb.w	r2, [r0], #1
 801395c:	3a30      	subs	r2, #48	; 0x30
 801395e:	2a09      	cmp	r2, #9
 8013960:	d903      	bls.n	801396a <_vfiprintf_r+0x1ee>
 8013962:	2b00      	cmp	r3, #0
 8013964:	d0c5      	beq.n	80138f2 <_vfiprintf_r+0x176>
 8013966:	9105      	str	r1, [sp, #20]
 8013968:	e7c3      	b.n	80138f2 <_vfiprintf_r+0x176>
 801396a:	4604      	mov	r4, r0
 801396c:	2301      	movs	r3, #1
 801396e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013972:	e7f0      	b.n	8013956 <_vfiprintf_r+0x1da>
 8013974:	ab03      	add	r3, sp, #12
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	462a      	mov	r2, r5
 801397a:	4630      	mov	r0, r6
 801397c:	4b15      	ldr	r3, [pc, #84]	; (80139d4 <_vfiprintf_r+0x258>)
 801397e:	a904      	add	r1, sp, #16
 8013980:	f3af 8000 	nop.w
 8013984:	4607      	mov	r7, r0
 8013986:	1c78      	adds	r0, r7, #1
 8013988:	d1d6      	bne.n	8013938 <_vfiprintf_r+0x1bc>
 801398a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801398c:	07d9      	lsls	r1, r3, #31
 801398e:	d405      	bmi.n	801399c <_vfiprintf_r+0x220>
 8013990:	89ab      	ldrh	r3, [r5, #12]
 8013992:	059a      	lsls	r2, r3, #22
 8013994:	d402      	bmi.n	801399c <_vfiprintf_r+0x220>
 8013996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013998:	f7ff febb 	bl	8013712 <__retarget_lock_release_recursive>
 801399c:	89ab      	ldrh	r3, [r5, #12]
 801399e:	065b      	lsls	r3, r3, #25
 80139a0:	f53f af12 	bmi.w	80137c8 <_vfiprintf_r+0x4c>
 80139a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139a6:	e711      	b.n	80137cc <_vfiprintf_r+0x50>
 80139a8:	ab03      	add	r3, sp, #12
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	462a      	mov	r2, r5
 80139ae:	4630      	mov	r0, r6
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <_vfiprintf_r+0x258>)
 80139b2:	a904      	add	r1, sp, #16
 80139b4:	f000 f882 	bl	8013abc <_printf_i>
 80139b8:	e7e4      	b.n	8013984 <_vfiprintf_r+0x208>
 80139ba:	bf00      	nop
 80139bc:	080149a4 	.word	0x080149a4
 80139c0:	080149c4 	.word	0x080149c4
 80139c4:	08014984 	.word	0x08014984
 80139c8:	080149e4 	.word	0x080149e4
 80139cc:	080149ee 	.word	0x080149ee
 80139d0:	00000000 	.word	0x00000000
 80139d4:	08013757 	.word	0x08013757
 80139d8:	080149ea 	.word	0x080149ea

080139dc <_printf_common>:
 80139dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139e0:	4616      	mov	r6, r2
 80139e2:	4699      	mov	r9, r3
 80139e4:	688a      	ldr	r2, [r1, #8]
 80139e6:	690b      	ldr	r3, [r1, #16]
 80139e8:	4607      	mov	r7, r0
 80139ea:	4293      	cmp	r3, r2
 80139ec:	bfb8      	it	lt
 80139ee:	4613      	movlt	r3, r2
 80139f0:	6033      	str	r3, [r6, #0]
 80139f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139f6:	460c      	mov	r4, r1
 80139f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139fc:	b10a      	cbz	r2, 8013a02 <_printf_common+0x26>
 80139fe:	3301      	adds	r3, #1
 8013a00:	6033      	str	r3, [r6, #0]
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	0699      	lsls	r1, r3, #26
 8013a06:	bf42      	ittt	mi
 8013a08:	6833      	ldrmi	r3, [r6, #0]
 8013a0a:	3302      	addmi	r3, #2
 8013a0c:	6033      	strmi	r3, [r6, #0]
 8013a0e:	6825      	ldr	r5, [r4, #0]
 8013a10:	f015 0506 	ands.w	r5, r5, #6
 8013a14:	d106      	bne.n	8013a24 <_printf_common+0x48>
 8013a16:	f104 0a19 	add.w	sl, r4, #25
 8013a1a:	68e3      	ldr	r3, [r4, #12]
 8013a1c:	6832      	ldr	r2, [r6, #0]
 8013a1e:	1a9b      	subs	r3, r3, r2
 8013a20:	42ab      	cmp	r3, r5
 8013a22:	dc28      	bgt.n	8013a76 <_printf_common+0x9a>
 8013a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a28:	1e13      	subs	r3, r2, #0
 8013a2a:	6822      	ldr	r2, [r4, #0]
 8013a2c:	bf18      	it	ne
 8013a2e:	2301      	movne	r3, #1
 8013a30:	0692      	lsls	r2, r2, #26
 8013a32:	d42d      	bmi.n	8013a90 <_printf_common+0xb4>
 8013a34:	4649      	mov	r1, r9
 8013a36:	4638      	mov	r0, r7
 8013a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a3c:	47c0      	blx	r8
 8013a3e:	3001      	adds	r0, #1
 8013a40:	d020      	beq.n	8013a84 <_printf_common+0xa8>
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	68e5      	ldr	r5, [r4, #12]
 8013a46:	f003 0306 	and.w	r3, r3, #6
 8013a4a:	2b04      	cmp	r3, #4
 8013a4c:	bf18      	it	ne
 8013a4e:	2500      	movne	r5, #0
 8013a50:	6832      	ldr	r2, [r6, #0]
 8013a52:	f04f 0600 	mov.w	r6, #0
 8013a56:	68a3      	ldr	r3, [r4, #8]
 8013a58:	bf08      	it	eq
 8013a5a:	1aad      	subeq	r5, r5, r2
 8013a5c:	6922      	ldr	r2, [r4, #16]
 8013a5e:	bf08      	it	eq
 8013a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a64:	4293      	cmp	r3, r2
 8013a66:	bfc4      	itt	gt
 8013a68:	1a9b      	subgt	r3, r3, r2
 8013a6a:	18ed      	addgt	r5, r5, r3
 8013a6c:	341a      	adds	r4, #26
 8013a6e:	42b5      	cmp	r5, r6
 8013a70:	d11a      	bne.n	8013aa8 <_printf_common+0xcc>
 8013a72:	2000      	movs	r0, #0
 8013a74:	e008      	b.n	8013a88 <_printf_common+0xac>
 8013a76:	2301      	movs	r3, #1
 8013a78:	4652      	mov	r2, sl
 8013a7a:	4649      	mov	r1, r9
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	47c0      	blx	r8
 8013a80:	3001      	adds	r0, #1
 8013a82:	d103      	bne.n	8013a8c <_printf_common+0xb0>
 8013a84:	f04f 30ff 	mov.w	r0, #4294967295
 8013a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a8c:	3501      	adds	r5, #1
 8013a8e:	e7c4      	b.n	8013a1a <_printf_common+0x3e>
 8013a90:	2030      	movs	r0, #48	; 0x30
 8013a92:	18e1      	adds	r1, r4, r3
 8013a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a98:	1c5a      	adds	r2, r3, #1
 8013a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a9e:	4422      	add	r2, r4
 8013aa0:	3302      	adds	r3, #2
 8013aa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013aa6:	e7c5      	b.n	8013a34 <_printf_common+0x58>
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	4622      	mov	r2, r4
 8013aac:	4649      	mov	r1, r9
 8013aae:	4638      	mov	r0, r7
 8013ab0:	47c0      	blx	r8
 8013ab2:	3001      	adds	r0, #1
 8013ab4:	d0e6      	beq.n	8013a84 <_printf_common+0xa8>
 8013ab6:	3601      	adds	r6, #1
 8013ab8:	e7d9      	b.n	8013a6e <_printf_common+0x92>
	...

08013abc <_printf_i>:
 8013abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac0:	460c      	mov	r4, r1
 8013ac2:	7e27      	ldrb	r7, [r4, #24]
 8013ac4:	4691      	mov	r9, r2
 8013ac6:	2f78      	cmp	r7, #120	; 0x78
 8013ac8:	4680      	mov	r8, r0
 8013aca:	469a      	mov	sl, r3
 8013acc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ad2:	d807      	bhi.n	8013ae4 <_printf_i+0x28>
 8013ad4:	2f62      	cmp	r7, #98	; 0x62
 8013ad6:	d80a      	bhi.n	8013aee <_printf_i+0x32>
 8013ad8:	2f00      	cmp	r7, #0
 8013ada:	f000 80d9 	beq.w	8013c90 <_printf_i+0x1d4>
 8013ade:	2f58      	cmp	r7, #88	; 0x58
 8013ae0:	f000 80a4 	beq.w	8013c2c <_printf_i+0x170>
 8013ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013aec:	e03a      	b.n	8013b64 <_printf_i+0xa8>
 8013aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013af2:	2b15      	cmp	r3, #21
 8013af4:	d8f6      	bhi.n	8013ae4 <_printf_i+0x28>
 8013af6:	a001      	add	r0, pc, #4	; (adr r0, 8013afc <_printf_i+0x40>)
 8013af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013afc:	08013b55 	.word	0x08013b55
 8013b00:	08013b69 	.word	0x08013b69
 8013b04:	08013ae5 	.word	0x08013ae5
 8013b08:	08013ae5 	.word	0x08013ae5
 8013b0c:	08013ae5 	.word	0x08013ae5
 8013b10:	08013ae5 	.word	0x08013ae5
 8013b14:	08013b69 	.word	0x08013b69
 8013b18:	08013ae5 	.word	0x08013ae5
 8013b1c:	08013ae5 	.word	0x08013ae5
 8013b20:	08013ae5 	.word	0x08013ae5
 8013b24:	08013ae5 	.word	0x08013ae5
 8013b28:	08013c77 	.word	0x08013c77
 8013b2c:	08013b99 	.word	0x08013b99
 8013b30:	08013c59 	.word	0x08013c59
 8013b34:	08013ae5 	.word	0x08013ae5
 8013b38:	08013ae5 	.word	0x08013ae5
 8013b3c:	08013c99 	.word	0x08013c99
 8013b40:	08013ae5 	.word	0x08013ae5
 8013b44:	08013b99 	.word	0x08013b99
 8013b48:	08013ae5 	.word	0x08013ae5
 8013b4c:	08013ae5 	.word	0x08013ae5
 8013b50:	08013c61 	.word	0x08013c61
 8013b54:	680b      	ldr	r3, [r1, #0]
 8013b56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013b5a:	1d1a      	adds	r2, r3, #4
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	600a      	str	r2, [r1, #0]
 8013b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b64:	2301      	movs	r3, #1
 8013b66:	e0a4      	b.n	8013cb2 <_printf_i+0x1f6>
 8013b68:	6825      	ldr	r5, [r4, #0]
 8013b6a:	6808      	ldr	r0, [r1, #0]
 8013b6c:	062e      	lsls	r6, r5, #24
 8013b6e:	f100 0304 	add.w	r3, r0, #4
 8013b72:	d50a      	bpl.n	8013b8a <_printf_i+0xce>
 8013b74:	6805      	ldr	r5, [r0, #0]
 8013b76:	600b      	str	r3, [r1, #0]
 8013b78:	2d00      	cmp	r5, #0
 8013b7a:	da03      	bge.n	8013b84 <_printf_i+0xc8>
 8013b7c:	232d      	movs	r3, #45	; 0x2d
 8013b7e:	426d      	negs	r5, r5
 8013b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b84:	230a      	movs	r3, #10
 8013b86:	485e      	ldr	r0, [pc, #376]	; (8013d00 <_printf_i+0x244>)
 8013b88:	e019      	b.n	8013bbe <_printf_i+0x102>
 8013b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013b8e:	6805      	ldr	r5, [r0, #0]
 8013b90:	600b      	str	r3, [r1, #0]
 8013b92:	bf18      	it	ne
 8013b94:	b22d      	sxthne	r5, r5
 8013b96:	e7ef      	b.n	8013b78 <_printf_i+0xbc>
 8013b98:	680b      	ldr	r3, [r1, #0]
 8013b9a:	6825      	ldr	r5, [r4, #0]
 8013b9c:	1d18      	adds	r0, r3, #4
 8013b9e:	6008      	str	r0, [r1, #0]
 8013ba0:	0628      	lsls	r0, r5, #24
 8013ba2:	d501      	bpl.n	8013ba8 <_printf_i+0xec>
 8013ba4:	681d      	ldr	r5, [r3, #0]
 8013ba6:	e002      	b.n	8013bae <_printf_i+0xf2>
 8013ba8:	0669      	lsls	r1, r5, #25
 8013baa:	d5fb      	bpl.n	8013ba4 <_printf_i+0xe8>
 8013bac:	881d      	ldrh	r5, [r3, #0]
 8013bae:	2f6f      	cmp	r7, #111	; 0x6f
 8013bb0:	bf0c      	ite	eq
 8013bb2:	2308      	moveq	r3, #8
 8013bb4:	230a      	movne	r3, #10
 8013bb6:	4852      	ldr	r0, [pc, #328]	; (8013d00 <_printf_i+0x244>)
 8013bb8:	2100      	movs	r1, #0
 8013bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bbe:	6866      	ldr	r6, [r4, #4]
 8013bc0:	2e00      	cmp	r6, #0
 8013bc2:	bfa8      	it	ge
 8013bc4:	6821      	ldrge	r1, [r4, #0]
 8013bc6:	60a6      	str	r6, [r4, #8]
 8013bc8:	bfa4      	itt	ge
 8013bca:	f021 0104 	bicge.w	r1, r1, #4
 8013bce:	6021      	strge	r1, [r4, #0]
 8013bd0:	b90d      	cbnz	r5, 8013bd6 <_printf_i+0x11a>
 8013bd2:	2e00      	cmp	r6, #0
 8013bd4:	d04d      	beq.n	8013c72 <_printf_i+0x1b6>
 8013bd6:	4616      	mov	r6, r2
 8013bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8013bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8013be0:	5dc7      	ldrb	r7, [r0, r7]
 8013be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013be6:	462f      	mov	r7, r5
 8013be8:	42bb      	cmp	r3, r7
 8013bea:	460d      	mov	r5, r1
 8013bec:	d9f4      	bls.n	8013bd8 <_printf_i+0x11c>
 8013bee:	2b08      	cmp	r3, #8
 8013bf0:	d10b      	bne.n	8013c0a <_printf_i+0x14e>
 8013bf2:	6823      	ldr	r3, [r4, #0]
 8013bf4:	07df      	lsls	r7, r3, #31
 8013bf6:	d508      	bpl.n	8013c0a <_printf_i+0x14e>
 8013bf8:	6923      	ldr	r3, [r4, #16]
 8013bfa:	6861      	ldr	r1, [r4, #4]
 8013bfc:	4299      	cmp	r1, r3
 8013bfe:	bfde      	ittt	le
 8013c00:	2330      	movle	r3, #48	; 0x30
 8013c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013c0a:	1b92      	subs	r2, r2, r6
 8013c0c:	6122      	str	r2, [r4, #16]
 8013c0e:	464b      	mov	r3, r9
 8013c10:	4621      	mov	r1, r4
 8013c12:	4640      	mov	r0, r8
 8013c14:	f8cd a000 	str.w	sl, [sp]
 8013c18:	aa03      	add	r2, sp, #12
 8013c1a:	f7ff fedf 	bl	80139dc <_printf_common>
 8013c1e:	3001      	adds	r0, #1
 8013c20:	d14c      	bne.n	8013cbc <_printf_i+0x200>
 8013c22:	f04f 30ff 	mov.w	r0, #4294967295
 8013c26:	b004      	add	sp, #16
 8013c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c2c:	4834      	ldr	r0, [pc, #208]	; (8013d00 <_printf_i+0x244>)
 8013c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013c32:	680e      	ldr	r6, [r1, #0]
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8013c3a:	061f      	lsls	r7, r3, #24
 8013c3c:	600e      	str	r6, [r1, #0]
 8013c3e:	d514      	bpl.n	8013c6a <_printf_i+0x1ae>
 8013c40:	07d9      	lsls	r1, r3, #31
 8013c42:	bf44      	itt	mi
 8013c44:	f043 0320 	orrmi.w	r3, r3, #32
 8013c48:	6023      	strmi	r3, [r4, #0]
 8013c4a:	b91d      	cbnz	r5, 8013c54 <_printf_i+0x198>
 8013c4c:	6823      	ldr	r3, [r4, #0]
 8013c4e:	f023 0320 	bic.w	r3, r3, #32
 8013c52:	6023      	str	r3, [r4, #0]
 8013c54:	2310      	movs	r3, #16
 8013c56:	e7af      	b.n	8013bb8 <_printf_i+0xfc>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	f043 0320 	orr.w	r3, r3, #32
 8013c5e:	6023      	str	r3, [r4, #0]
 8013c60:	2378      	movs	r3, #120	; 0x78
 8013c62:	4828      	ldr	r0, [pc, #160]	; (8013d04 <_printf_i+0x248>)
 8013c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c68:	e7e3      	b.n	8013c32 <_printf_i+0x176>
 8013c6a:	065e      	lsls	r6, r3, #25
 8013c6c:	bf48      	it	mi
 8013c6e:	b2ad      	uxthmi	r5, r5
 8013c70:	e7e6      	b.n	8013c40 <_printf_i+0x184>
 8013c72:	4616      	mov	r6, r2
 8013c74:	e7bb      	b.n	8013bee <_printf_i+0x132>
 8013c76:	680b      	ldr	r3, [r1, #0]
 8013c78:	6826      	ldr	r6, [r4, #0]
 8013c7a:	1d1d      	adds	r5, r3, #4
 8013c7c:	6960      	ldr	r0, [r4, #20]
 8013c7e:	600d      	str	r5, [r1, #0]
 8013c80:	0635      	lsls	r5, r6, #24
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	d501      	bpl.n	8013c8a <_printf_i+0x1ce>
 8013c86:	6018      	str	r0, [r3, #0]
 8013c88:	e002      	b.n	8013c90 <_printf_i+0x1d4>
 8013c8a:	0671      	lsls	r1, r6, #25
 8013c8c:	d5fb      	bpl.n	8013c86 <_printf_i+0x1ca>
 8013c8e:	8018      	strh	r0, [r3, #0]
 8013c90:	2300      	movs	r3, #0
 8013c92:	4616      	mov	r6, r2
 8013c94:	6123      	str	r3, [r4, #16]
 8013c96:	e7ba      	b.n	8013c0e <_printf_i+0x152>
 8013c98:	680b      	ldr	r3, [r1, #0]
 8013c9a:	1d1a      	adds	r2, r3, #4
 8013c9c:	600a      	str	r2, [r1, #0]
 8013c9e:	681e      	ldr	r6, [r3, #0]
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	6862      	ldr	r2, [r4, #4]
 8013ca6:	f000 fa95 	bl	80141d4 <memchr>
 8013caa:	b108      	cbz	r0, 8013cb0 <_printf_i+0x1f4>
 8013cac:	1b80      	subs	r0, r0, r6
 8013cae:	6060      	str	r0, [r4, #4]
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	6123      	str	r3, [r4, #16]
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cba:	e7a8      	b.n	8013c0e <_printf_i+0x152>
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	4649      	mov	r1, r9
 8013cc0:	4640      	mov	r0, r8
 8013cc2:	6923      	ldr	r3, [r4, #16]
 8013cc4:	47d0      	blx	sl
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	d0ab      	beq.n	8013c22 <_printf_i+0x166>
 8013cca:	6823      	ldr	r3, [r4, #0]
 8013ccc:	079b      	lsls	r3, r3, #30
 8013cce:	d413      	bmi.n	8013cf8 <_printf_i+0x23c>
 8013cd0:	68e0      	ldr	r0, [r4, #12]
 8013cd2:	9b03      	ldr	r3, [sp, #12]
 8013cd4:	4298      	cmp	r0, r3
 8013cd6:	bfb8      	it	lt
 8013cd8:	4618      	movlt	r0, r3
 8013cda:	e7a4      	b.n	8013c26 <_printf_i+0x16a>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	4632      	mov	r2, r6
 8013ce0:	4649      	mov	r1, r9
 8013ce2:	4640      	mov	r0, r8
 8013ce4:	47d0      	blx	sl
 8013ce6:	3001      	adds	r0, #1
 8013ce8:	d09b      	beq.n	8013c22 <_printf_i+0x166>
 8013cea:	3501      	adds	r5, #1
 8013cec:	68e3      	ldr	r3, [r4, #12]
 8013cee:	9903      	ldr	r1, [sp, #12]
 8013cf0:	1a5b      	subs	r3, r3, r1
 8013cf2:	42ab      	cmp	r3, r5
 8013cf4:	dcf2      	bgt.n	8013cdc <_printf_i+0x220>
 8013cf6:	e7eb      	b.n	8013cd0 <_printf_i+0x214>
 8013cf8:	2500      	movs	r5, #0
 8013cfa:	f104 0619 	add.w	r6, r4, #25
 8013cfe:	e7f5      	b.n	8013cec <_printf_i+0x230>
 8013d00:	080149f5 	.word	0x080149f5
 8013d04:	08014a06 	.word	0x08014a06

08013d08 <__sread>:
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d10:	f000 fa6e 	bl	80141f0 <_read_r>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	bfab      	itete	ge
 8013d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8013d1c:	181b      	addge	r3, r3, r0
 8013d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d22:	bfac      	ite	ge
 8013d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d26:	81a3      	strhlt	r3, [r4, #12]
 8013d28:	bd10      	pop	{r4, pc}

08013d2a <__swrite>:
 8013d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2e:	461f      	mov	r7, r3
 8013d30:	898b      	ldrh	r3, [r1, #12]
 8013d32:	4605      	mov	r5, r0
 8013d34:	05db      	lsls	r3, r3, #23
 8013d36:	460c      	mov	r4, r1
 8013d38:	4616      	mov	r6, r2
 8013d3a:	d505      	bpl.n	8013d48 <__swrite+0x1e>
 8013d3c:	2302      	movs	r3, #2
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d44:	f000 f9d0 	bl	80140e8 <_lseek_r>
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d50:	81a3      	strh	r3, [r4, #12]
 8013d52:	4628      	mov	r0, r5
 8013d54:	463b      	mov	r3, r7
 8013d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5e:	f000 b869 	b.w	8013e34 <_write_r>

08013d62 <__sseek>:
 8013d62:	b510      	push	{r4, lr}
 8013d64:	460c      	mov	r4, r1
 8013d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d6a:	f000 f9bd 	bl	80140e8 <_lseek_r>
 8013d6e:	1c43      	adds	r3, r0, #1
 8013d70:	89a3      	ldrh	r3, [r4, #12]
 8013d72:	bf15      	itete	ne
 8013d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d7e:	81a3      	strheq	r3, [r4, #12]
 8013d80:	bf18      	it	ne
 8013d82:	81a3      	strhne	r3, [r4, #12]
 8013d84:	bd10      	pop	{r4, pc}

08013d86 <__sclose>:
 8013d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d8a:	f000 b8db 	b.w	8013f44 <_close_r>
	...

08013d90 <__swbuf_r>:
 8013d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d92:	460e      	mov	r6, r1
 8013d94:	4614      	mov	r4, r2
 8013d96:	4605      	mov	r5, r0
 8013d98:	b118      	cbz	r0, 8013da2 <__swbuf_r+0x12>
 8013d9a:	6983      	ldr	r3, [r0, #24]
 8013d9c:	b90b      	cbnz	r3, 8013da2 <__swbuf_r+0x12>
 8013d9e:	f7ff fc07 	bl	80135b0 <__sinit>
 8013da2:	4b21      	ldr	r3, [pc, #132]	; (8013e28 <__swbuf_r+0x98>)
 8013da4:	429c      	cmp	r4, r3
 8013da6:	d12b      	bne.n	8013e00 <__swbuf_r+0x70>
 8013da8:	686c      	ldr	r4, [r5, #4]
 8013daa:	69a3      	ldr	r3, [r4, #24]
 8013dac:	60a3      	str	r3, [r4, #8]
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	071a      	lsls	r2, r3, #28
 8013db2:	d52f      	bpl.n	8013e14 <__swbuf_r+0x84>
 8013db4:	6923      	ldr	r3, [r4, #16]
 8013db6:	b36b      	cbz	r3, 8013e14 <__swbuf_r+0x84>
 8013db8:	6923      	ldr	r3, [r4, #16]
 8013dba:	6820      	ldr	r0, [r4, #0]
 8013dbc:	b2f6      	uxtb	r6, r6
 8013dbe:	1ac0      	subs	r0, r0, r3
 8013dc0:	6963      	ldr	r3, [r4, #20]
 8013dc2:	4637      	mov	r7, r6
 8013dc4:	4283      	cmp	r3, r0
 8013dc6:	dc04      	bgt.n	8013dd2 <__swbuf_r+0x42>
 8013dc8:	4621      	mov	r1, r4
 8013dca:	4628      	mov	r0, r5
 8013dcc:	f000 f950 	bl	8014070 <_fflush_r>
 8013dd0:	bb30      	cbnz	r0, 8013e20 <__swbuf_r+0x90>
 8013dd2:	68a3      	ldr	r3, [r4, #8]
 8013dd4:	3001      	adds	r0, #1
 8013dd6:	3b01      	subs	r3, #1
 8013dd8:	60a3      	str	r3, [r4, #8]
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	1c5a      	adds	r2, r3, #1
 8013dde:	6022      	str	r2, [r4, #0]
 8013de0:	701e      	strb	r6, [r3, #0]
 8013de2:	6963      	ldr	r3, [r4, #20]
 8013de4:	4283      	cmp	r3, r0
 8013de6:	d004      	beq.n	8013df2 <__swbuf_r+0x62>
 8013de8:	89a3      	ldrh	r3, [r4, #12]
 8013dea:	07db      	lsls	r3, r3, #31
 8013dec:	d506      	bpl.n	8013dfc <__swbuf_r+0x6c>
 8013dee:	2e0a      	cmp	r6, #10
 8013df0:	d104      	bne.n	8013dfc <__swbuf_r+0x6c>
 8013df2:	4621      	mov	r1, r4
 8013df4:	4628      	mov	r0, r5
 8013df6:	f000 f93b 	bl	8014070 <_fflush_r>
 8013dfa:	b988      	cbnz	r0, 8013e20 <__swbuf_r+0x90>
 8013dfc:	4638      	mov	r0, r7
 8013dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e00:	4b0a      	ldr	r3, [pc, #40]	; (8013e2c <__swbuf_r+0x9c>)
 8013e02:	429c      	cmp	r4, r3
 8013e04:	d101      	bne.n	8013e0a <__swbuf_r+0x7a>
 8013e06:	68ac      	ldr	r4, [r5, #8]
 8013e08:	e7cf      	b.n	8013daa <__swbuf_r+0x1a>
 8013e0a:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <__swbuf_r+0xa0>)
 8013e0c:	429c      	cmp	r4, r3
 8013e0e:	bf08      	it	eq
 8013e10:	68ec      	ldreq	r4, [r5, #12]
 8013e12:	e7ca      	b.n	8013daa <__swbuf_r+0x1a>
 8013e14:	4621      	mov	r1, r4
 8013e16:	4628      	mov	r0, r5
 8013e18:	f000 f81e 	bl	8013e58 <__swsetup_r>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	d0cb      	beq.n	8013db8 <__swbuf_r+0x28>
 8013e20:	f04f 37ff 	mov.w	r7, #4294967295
 8013e24:	e7ea      	b.n	8013dfc <__swbuf_r+0x6c>
 8013e26:	bf00      	nop
 8013e28:	080149a4 	.word	0x080149a4
 8013e2c:	080149c4 	.word	0x080149c4
 8013e30:	08014984 	.word	0x08014984

08013e34 <_write_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	4604      	mov	r4, r0
 8013e38:	4608      	mov	r0, r1
 8013e3a:	4611      	mov	r1, r2
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	4d05      	ldr	r5, [pc, #20]	; (8013e54 <_write_r+0x20>)
 8013e40:	602a      	str	r2, [r5, #0]
 8013e42:	461a      	mov	r2, r3
 8013e44:	f7f1 fbd4 	bl	80055f0 <_write>
 8013e48:	1c43      	adds	r3, r0, #1
 8013e4a:	d102      	bne.n	8013e52 <_write_r+0x1e>
 8013e4c:	682b      	ldr	r3, [r5, #0]
 8013e4e:	b103      	cbz	r3, 8013e52 <_write_r+0x1e>
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	bd38      	pop	{r3, r4, r5, pc}
 8013e54:	20001a34 	.word	0x20001a34

08013e58 <__swsetup_r>:
 8013e58:	4b32      	ldr	r3, [pc, #200]	; (8013f24 <__swsetup_r+0xcc>)
 8013e5a:	b570      	push	{r4, r5, r6, lr}
 8013e5c:	681d      	ldr	r5, [r3, #0]
 8013e5e:	4606      	mov	r6, r0
 8013e60:	460c      	mov	r4, r1
 8013e62:	b125      	cbz	r5, 8013e6e <__swsetup_r+0x16>
 8013e64:	69ab      	ldr	r3, [r5, #24]
 8013e66:	b913      	cbnz	r3, 8013e6e <__swsetup_r+0x16>
 8013e68:	4628      	mov	r0, r5
 8013e6a:	f7ff fba1 	bl	80135b0 <__sinit>
 8013e6e:	4b2e      	ldr	r3, [pc, #184]	; (8013f28 <__swsetup_r+0xd0>)
 8013e70:	429c      	cmp	r4, r3
 8013e72:	d10f      	bne.n	8013e94 <__swsetup_r+0x3c>
 8013e74:	686c      	ldr	r4, [r5, #4]
 8013e76:	89a3      	ldrh	r3, [r4, #12]
 8013e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e7c:	0719      	lsls	r1, r3, #28
 8013e7e:	d42c      	bmi.n	8013eda <__swsetup_r+0x82>
 8013e80:	06dd      	lsls	r5, r3, #27
 8013e82:	d411      	bmi.n	8013ea8 <__swsetup_r+0x50>
 8013e84:	2309      	movs	r3, #9
 8013e86:	6033      	str	r3, [r6, #0]
 8013e88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e90:	81a3      	strh	r3, [r4, #12]
 8013e92:	e03e      	b.n	8013f12 <__swsetup_r+0xba>
 8013e94:	4b25      	ldr	r3, [pc, #148]	; (8013f2c <__swsetup_r+0xd4>)
 8013e96:	429c      	cmp	r4, r3
 8013e98:	d101      	bne.n	8013e9e <__swsetup_r+0x46>
 8013e9a:	68ac      	ldr	r4, [r5, #8]
 8013e9c:	e7eb      	b.n	8013e76 <__swsetup_r+0x1e>
 8013e9e:	4b24      	ldr	r3, [pc, #144]	; (8013f30 <__swsetup_r+0xd8>)
 8013ea0:	429c      	cmp	r4, r3
 8013ea2:	bf08      	it	eq
 8013ea4:	68ec      	ldreq	r4, [r5, #12]
 8013ea6:	e7e6      	b.n	8013e76 <__swsetup_r+0x1e>
 8013ea8:	0758      	lsls	r0, r3, #29
 8013eaa:	d512      	bpl.n	8013ed2 <__swsetup_r+0x7a>
 8013eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013eae:	b141      	cbz	r1, 8013ec2 <__swsetup_r+0x6a>
 8013eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013eb4:	4299      	cmp	r1, r3
 8013eb6:	d002      	beq.n	8013ebe <__swsetup_r+0x66>
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f7ff f959 	bl	8013170 <_free_r>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8013ec2:	89a3      	ldrh	r3, [r4, #12]
 8013ec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ec8:	81a3      	strh	r3, [r4, #12]
 8013eca:	2300      	movs	r3, #0
 8013ecc:	6063      	str	r3, [r4, #4]
 8013ece:	6923      	ldr	r3, [r4, #16]
 8013ed0:	6023      	str	r3, [r4, #0]
 8013ed2:	89a3      	ldrh	r3, [r4, #12]
 8013ed4:	f043 0308 	orr.w	r3, r3, #8
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	6923      	ldr	r3, [r4, #16]
 8013edc:	b94b      	cbnz	r3, 8013ef2 <__swsetup_r+0x9a>
 8013ede:	89a3      	ldrh	r3, [r4, #12]
 8013ee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ee8:	d003      	beq.n	8013ef2 <__swsetup_r+0x9a>
 8013eea:	4621      	mov	r1, r4
 8013eec:	4630      	mov	r0, r6
 8013eee:	f000 f931 	bl	8014154 <__smakebuf_r>
 8013ef2:	89a0      	ldrh	r0, [r4, #12]
 8013ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ef8:	f010 0301 	ands.w	r3, r0, #1
 8013efc:	d00a      	beq.n	8013f14 <__swsetup_r+0xbc>
 8013efe:	2300      	movs	r3, #0
 8013f00:	60a3      	str	r3, [r4, #8]
 8013f02:	6963      	ldr	r3, [r4, #20]
 8013f04:	425b      	negs	r3, r3
 8013f06:	61a3      	str	r3, [r4, #24]
 8013f08:	6923      	ldr	r3, [r4, #16]
 8013f0a:	b943      	cbnz	r3, 8013f1e <__swsetup_r+0xc6>
 8013f0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f10:	d1ba      	bne.n	8013e88 <__swsetup_r+0x30>
 8013f12:	bd70      	pop	{r4, r5, r6, pc}
 8013f14:	0781      	lsls	r1, r0, #30
 8013f16:	bf58      	it	pl
 8013f18:	6963      	ldrpl	r3, [r4, #20]
 8013f1a:	60a3      	str	r3, [r4, #8]
 8013f1c:	e7f4      	b.n	8013f08 <__swsetup_r+0xb0>
 8013f1e:	2000      	movs	r0, #0
 8013f20:	e7f7      	b.n	8013f12 <__swsetup_r+0xba>
 8013f22:	bf00      	nop
 8013f24:	20000010 	.word	0x20000010
 8013f28:	080149a4 	.word	0x080149a4
 8013f2c:	080149c4 	.word	0x080149c4
 8013f30:	08014984 	.word	0x08014984

08013f34 <abort>:
 8013f34:	2006      	movs	r0, #6
 8013f36:	b508      	push	{r3, lr}
 8013f38:	f000 f994 	bl	8014264 <raise>
 8013f3c:	2001      	movs	r0, #1
 8013f3e:	f7f1 fb30 	bl	80055a2 <_exit>
	...

08013f44 <_close_r>:
 8013f44:	b538      	push	{r3, r4, r5, lr}
 8013f46:	2300      	movs	r3, #0
 8013f48:	4d05      	ldr	r5, [pc, #20]	; (8013f60 <_close_r+0x1c>)
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	4608      	mov	r0, r1
 8013f4e:	602b      	str	r3, [r5, #0]
 8013f50:	f7f1 fb6a 	bl	8005628 <_close>
 8013f54:	1c43      	adds	r3, r0, #1
 8013f56:	d102      	bne.n	8013f5e <_close_r+0x1a>
 8013f58:	682b      	ldr	r3, [r5, #0]
 8013f5a:	b103      	cbz	r3, 8013f5e <_close_r+0x1a>
 8013f5c:	6023      	str	r3, [r4, #0]
 8013f5e:	bd38      	pop	{r3, r4, r5, pc}
 8013f60:	20001a34 	.word	0x20001a34

08013f64 <__sflush_r>:
 8013f64:	898a      	ldrh	r2, [r1, #12]
 8013f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	0710      	lsls	r0, r2, #28
 8013f6e:	460c      	mov	r4, r1
 8013f70:	d458      	bmi.n	8014024 <__sflush_r+0xc0>
 8013f72:	684b      	ldr	r3, [r1, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	dc05      	bgt.n	8013f84 <__sflush_r+0x20>
 8013f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	dc02      	bgt.n	8013f84 <__sflush_r+0x20>
 8013f7e:	2000      	movs	r0, #0
 8013f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f86:	2e00      	cmp	r6, #0
 8013f88:	d0f9      	beq.n	8013f7e <__sflush_r+0x1a>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f90:	682f      	ldr	r7, [r5, #0]
 8013f92:	602b      	str	r3, [r5, #0]
 8013f94:	d032      	beq.n	8013ffc <__sflush_r+0x98>
 8013f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f98:	89a3      	ldrh	r3, [r4, #12]
 8013f9a:	075a      	lsls	r2, r3, #29
 8013f9c:	d505      	bpl.n	8013faa <__sflush_r+0x46>
 8013f9e:	6863      	ldr	r3, [r4, #4]
 8013fa0:	1ac0      	subs	r0, r0, r3
 8013fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fa4:	b10b      	cbz	r3, 8013faa <__sflush_r+0x46>
 8013fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fa8:	1ac0      	subs	r0, r0, r3
 8013faa:	2300      	movs	r3, #0
 8013fac:	4602      	mov	r2, r0
 8013fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	6a21      	ldr	r1, [r4, #32]
 8013fb4:	47b0      	blx	r6
 8013fb6:	1c43      	adds	r3, r0, #1
 8013fb8:	89a3      	ldrh	r3, [r4, #12]
 8013fba:	d106      	bne.n	8013fca <__sflush_r+0x66>
 8013fbc:	6829      	ldr	r1, [r5, #0]
 8013fbe:	291d      	cmp	r1, #29
 8013fc0:	d82c      	bhi.n	801401c <__sflush_r+0xb8>
 8013fc2:	4a2a      	ldr	r2, [pc, #168]	; (801406c <__sflush_r+0x108>)
 8013fc4:	40ca      	lsrs	r2, r1
 8013fc6:	07d6      	lsls	r6, r2, #31
 8013fc8:	d528      	bpl.n	801401c <__sflush_r+0xb8>
 8013fca:	2200      	movs	r2, #0
 8013fcc:	6062      	str	r2, [r4, #4]
 8013fce:	6922      	ldr	r2, [r4, #16]
 8013fd0:	04d9      	lsls	r1, r3, #19
 8013fd2:	6022      	str	r2, [r4, #0]
 8013fd4:	d504      	bpl.n	8013fe0 <__sflush_r+0x7c>
 8013fd6:	1c42      	adds	r2, r0, #1
 8013fd8:	d101      	bne.n	8013fde <__sflush_r+0x7a>
 8013fda:	682b      	ldr	r3, [r5, #0]
 8013fdc:	b903      	cbnz	r3, 8013fe0 <__sflush_r+0x7c>
 8013fde:	6560      	str	r0, [r4, #84]	; 0x54
 8013fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fe2:	602f      	str	r7, [r5, #0]
 8013fe4:	2900      	cmp	r1, #0
 8013fe6:	d0ca      	beq.n	8013f7e <__sflush_r+0x1a>
 8013fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fec:	4299      	cmp	r1, r3
 8013fee:	d002      	beq.n	8013ff6 <__sflush_r+0x92>
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	f7ff f8bd 	bl	8013170 <_free_r>
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8013ffa:	e7c1      	b.n	8013f80 <__sflush_r+0x1c>
 8013ffc:	6a21      	ldr	r1, [r4, #32]
 8013ffe:	2301      	movs	r3, #1
 8014000:	4628      	mov	r0, r5
 8014002:	47b0      	blx	r6
 8014004:	1c41      	adds	r1, r0, #1
 8014006:	d1c7      	bne.n	8013f98 <__sflush_r+0x34>
 8014008:	682b      	ldr	r3, [r5, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d0c4      	beq.n	8013f98 <__sflush_r+0x34>
 801400e:	2b1d      	cmp	r3, #29
 8014010:	d001      	beq.n	8014016 <__sflush_r+0xb2>
 8014012:	2b16      	cmp	r3, #22
 8014014:	d101      	bne.n	801401a <__sflush_r+0xb6>
 8014016:	602f      	str	r7, [r5, #0]
 8014018:	e7b1      	b.n	8013f7e <__sflush_r+0x1a>
 801401a:	89a3      	ldrh	r3, [r4, #12]
 801401c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014020:	81a3      	strh	r3, [r4, #12]
 8014022:	e7ad      	b.n	8013f80 <__sflush_r+0x1c>
 8014024:	690f      	ldr	r7, [r1, #16]
 8014026:	2f00      	cmp	r7, #0
 8014028:	d0a9      	beq.n	8013f7e <__sflush_r+0x1a>
 801402a:	0793      	lsls	r3, r2, #30
 801402c:	bf18      	it	ne
 801402e:	2300      	movne	r3, #0
 8014030:	680e      	ldr	r6, [r1, #0]
 8014032:	bf08      	it	eq
 8014034:	694b      	ldreq	r3, [r1, #20]
 8014036:	eba6 0807 	sub.w	r8, r6, r7
 801403a:	600f      	str	r7, [r1, #0]
 801403c:	608b      	str	r3, [r1, #8]
 801403e:	f1b8 0f00 	cmp.w	r8, #0
 8014042:	dd9c      	ble.n	8013f7e <__sflush_r+0x1a>
 8014044:	4643      	mov	r3, r8
 8014046:	463a      	mov	r2, r7
 8014048:	4628      	mov	r0, r5
 801404a:	6a21      	ldr	r1, [r4, #32]
 801404c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801404e:	47b0      	blx	r6
 8014050:	2800      	cmp	r0, #0
 8014052:	dc06      	bgt.n	8014062 <__sflush_r+0xfe>
 8014054:	89a3      	ldrh	r3, [r4, #12]
 8014056:	f04f 30ff 	mov.w	r0, #4294967295
 801405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801405e:	81a3      	strh	r3, [r4, #12]
 8014060:	e78e      	b.n	8013f80 <__sflush_r+0x1c>
 8014062:	4407      	add	r7, r0
 8014064:	eba8 0800 	sub.w	r8, r8, r0
 8014068:	e7e9      	b.n	801403e <__sflush_r+0xda>
 801406a:	bf00      	nop
 801406c:	20400001 	.word	0x20400001

08014070 <_fflush_r>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	690b      	ldr	r3, [r1, #16]
 8014074:	4605      	mov	r5, r0
 8014076:	460c      	mov	r4, r1
 8014078:	b913      	cbnz	r3, 8014080 <_fflush_r+0x10>
 801407a:	2500      	movs	r5, #0
 801407c:	4628      	mov	r0, r5
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	b118      	cbz	r0, 801408a <_fflush_r+0x1a>
 8014082:	6983      	ldr	r3, [r0, #24]
 8014084:	b90b      	cbnz	r3, 801408a <_fflush_r+0x1a>
 8014086:	f7ff fa93 	bl	80135b0 <__sinit>
 801408a:	4b14      	ldr	r3, [pc, #80]	; (80140dc <_fflush_r+0x6c>)
 801408c:	429c      	cmp	r4, r3
 801408e:	d11b      	bne.n	80140c8 <_fflush_r+0x58>
 8014090:	686c      	ldr	r4, [r5, #4]
 8014092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d0ef      	beq.n	801407a <_fflush_r+0xa>
 801409a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801409c:	07d0      	lsls	r0, r2, #31
 801409e:	d404      	bmi.n	80140aa <_fflush_r+0x3a>
 80140a0:	0599      	lsls	r1, r3, #22
 80140a2:	d402      	bmi.n	80140aa <_fflush_r+0x3a>
 80140a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140a6:	f7ff fb33 	bl	8013710 <__retarget_lock_acquire_recursive>
 80140aa:	4628      	mov	r0, r5
 80140ac:	4621      	mov	r1, r4
 80140ae:	f7ff ff59 	bl	8013f64 <__sflush_r>
 80140b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140b4:	4605      	mov	r5, r0
 80140b6:	07da      	lsls	r2, r3, #31
 80140b8:	d4e0      	bmi.n	801407c <_fflush_r+0xc>
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	059b      	lsls	r3, r3, #22
 80140be:	d4dd      	bmi.n	801407c <_fflush_r+0xc>
 80140c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140c2:	f7ff fb26 	bl	8013712 <__retarget_lock_release_recursive>
 80140c6:	e7d9      	b.n	801407c <_fflush_r+0xc>
 80140c8:	4b05      	ldr	r3, [pc, #20]	; (80140e0 <_fflush_r+0x70>)
 80140ca:	429c      	cmp	r4, r3
 80140cc:	d101      	bne.n	80140d2 <_fflush_r+0x62>
 80140ce:	68ac      	ldr	r4, [r5, #8]
 80140d0:	e7df      	b.n	8014092 <_fflush_r+0x22>
 80140d2:	4b04      	ldr	r3, [pc, #16]	; (80140e4 <_fflush_r+0x74>)
 80140d4:	429c      	cmp	r4, r3
 80140d6:	bf08      	it	eq
 80140d8:	68ec      	ldreq	r4, [r5, #12]
 80140da:	e7da      	b.n	8014092 <_fflush_r+0x22>
 80140dc:	080149a4 	.word	0x080149a4
 80140e0:	080149c4 	.word	0x080149c4
 80140e4:	08014984 	.word	0x08014984

080140e8 <_lseek_r>:
 80140e8:	b538      	push	{r3, r4, r5, lr}
 80140ea:	4604      	mov	r4, r0
 80140ec:	4608      	mov	r0, r1
 80140ee:	4611      	mov	r1, r2
 80140f0:	2200      	movs	r2, #0
 80140f2:	4d05      	ldr	r5, [pc, #20]	; (8014108 <_lseek_r+0x20>)
 80140f4:	602a      	str	r2, [r5, #0]
 80140f6:	461a      	mov	r2, r3
 80140f8:	f7f1 faba 	bl	8005670 <_lseek>
 80140fc:	1c43      	adds	r3, r0, #1
 80140fe:	d102      	bne.n	8014106 <_lseek_r+0x1e>
 8014100:	682b      	ldr	r3, [r5, #0]
 8014102:	b103      	cbz	r3, 8014106 <_lseek_r+0x1e>
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	bd38      	pop	{r3, r4, r5, pc}
 8014108:	20001a34 	.word	0x20001a34

0801410c <__swhatbuf_r>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	460e      	mov	r6, r1
 8014110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014114:	4614      	mov	r4, r2
 8014116:	2900      	cmp	r1, #0
 8014118:	461d      	mov	r5, r3
 801411a:	b096      	sub	sp, #88	; 0x58
 801411c:	da07      	bge.n	801412e <__swhatbuf_r+0x22>
 801411e:	2300      	movs	r3, #0
 8014120:	602b      	str	r3, [r5, #0]
 8014122:	89b3      	ldrh	r3, [r6, #12]
 8014124:	061a      	lsls	r2, r3, #24
 8014126:	d410      	bmi.n	801414a <__swhatbuf_r+0x3e>
 8014128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801412c:	e00e      	b.n	801414c <__swhatbuf_r+0x40>
 801412e:	466a      	mov	r2, sp
 8014130:	f000 f8b4 	bl	801429c <_fstat_r>
 8014134:	2800      	cmp	r0, #0
 8014136:	dbf2      	blt.n	801411e <__swhatbuf_r+0x12>
 8014138:	9a01      	ldr	r2, [sp, #4]
 801413a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801413e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014142:	425a      	negs	r2, r3
 8014144:	415a      	adcs	r2, r3
 8014146:	602a      	str	r2, [r5, #0]
 8014148:	e7ee      	b.n	8014128 <__swhatbuf_r+0x1c>
 801414a:	2340      	movs	r3, #64	; 0x40
 801414c:	2000      	movs	r0, #0
 801414e:	6023      	str	r3, [r4, #0]
 8014150:	b016      	add	sp, #88	; 0x58
 8014152:	bd70      	pop	{r4, r5, r6, pc}

08014154 <__smakebuf_r>:
 8014154:	898b      	ldrh	r3, [r1, #12]
 8014156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014158:	079d      	lsls	r5, r3, #30
 801415a:	4606      	mov	r6, r0
 801415c:	460c      	mov	r4, r1
 801415e:	d507      	bpl.n	8014170 <__smakebuf_r+0x1c>
 8014160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014164:	6023      	str	r3, [r4, #0]
 8014166:	6123      	str	r3, [r4, #16]
 8014168:	2301      	movs	r3, #1
 801416a:	6163      	str	r3, [r4, #20]
 801416c:	b002      	add	sp, #8
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	466a      	mov	r2, sp
 8014172:	ab01      	add	r3, sp, #4
 8014174:	f7ff ffca 	bl	801410c <__swhatbuf_r>
 8014178:	9900      	ldr	r1, [sp, #0]
 801417a:	4605      	mov	r5, r0
 801417c:	4630      	mov	r0, r6
 801417e:	f7ff f843 	bl	8013208 <_malloc_r>
 8014182:	b948      	cbnz	r0, 8014198 <__smakebuf_r+0x44>
 8014184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014188:	059a      	lsls	r2, r3, #22
 801418a:	d4ef      	bmi.n	801416c <__smakebuf_r+0x18>
 801418c:	f023 0303 	bic.w	r3, r3, #3
 8014190:	f043 0302 	orr.w	r3, r3, #2
 8014194:	81a3      	strh	r3, [r4, #12]
 8014196:	e7e3      	b.n	8014160 <__smakebuf_r+0xc>
 8014198:	4b0d      	ldr	r3, [pc, #52]	; (80141d0 <__smakebuf_r+0x7c>)
 801419a:	62b3      	str	r3, [r6, #40]	; 0x28
 801419c:	89a3      	ldrh	r3, [r4, #12]
 801419e:	6020      	str	r0, [r4, #0]
 80141a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141a4:	81a3      	strh	r3, [r4, #12]
 80141a6:	9b00      	ldr	r3, [sp, #0]
 80141a8:	6120      	str	r0, [r4, #16]
 80141aa:	6163      	str	r3, [r4, #20]
 80141ac:	9b01      	ldr	r3, [sp, #4]
 80141ae:	b15b      	cbz	r3, 80141c8 <__smakebuf_r+0x74>
 80141b0:	4630      	mov	r0, r6
 80141b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141b6:	f000 f883 	bl	80142c0 <_isatty_r>
 80141ba:	b128      	cbz	r0, 80141c8 <__smakebuf_r+0x74>
 80141bc:	89a3      	ldrh	r3, [r4, #12]
 80141be:	f023 0303 	bic.w	r3, r3, #3
 80141c2:	f043 0301 	orr.w	r3, r3, #1
 80141c6:	81a3      	strh	r3, [r4, #12]
 80141c8:	89a0      	ldrh	r0, [r4, #12]
 80141ca:	4305      	orrs	r5, r0
 80141cc:	81a5      	strh	r5, [r4, #12]
 80141ce:	e7cd      	b.n	801416c <__smakebuf_r+0x18>
 80141d0:	08013549 	.word	0x08013549

080141d4 <memchr>:
 80141d4:	4603      	mov	r3, r0
 80141d6:	b510      	push	{r4, lr}
 80141d8:	b2c9      	uxtb	r1, r1
 80141da:	4402      	add	r2, r0
 80141dc:	4293      	cmp	r3, r2
 80141de:	4618      	mov	r0, r3
 80141e0:	d101      	bne.n	80141e6 <memchr+0x12>
 80141e2:	2000      	movs	r0, #0
 80141e4:	e003      	b.n	80141ee <memchr+0x1a>
 80141e6:	7804      	ldrb	r4, [r0, #0]
 80141e8:	3301      	adds	r3, #1
 80141ea:	428c      	cmp	r4, r1
 80141ec:	d1f6      	bne.n	80141dc <memchr+0x8>
 80141ee:	bd10      	pop	{r4, pc}

080141f0 <_read_r>:
 80141f0:	b538      	push	{r3, r4, r5, lr}
 80141f2:	4604      	mov	r4, r0
 80141f4:	4608      	mov	r0, r1
 80141f6:	4611      	mov	r1, r2
 80141f8:	2200      	movs	r2, #0
 80141fa:	4d05      	ldr	r5, [pc, #20]	; (8014210 <_read_r+0x20>)
 80141fc:	602a      	str	r2, [r5, #0]
 80141fe:	461a      	mov	r2, r3
 8014200:	f7f1 f9d9 	bl	80055b6 <_read>
 8014204:	1c43      	adds	r3, r0, #1
 8014206:	d102      	bne.n	801420e <_read_r+0x1e>
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	b103      	cbz	r3, 801420e <_read_r+0x1e>
 801420c:	6023      	str	r3, [r4, #0]
 801420e:	bd38      	pop	{r3, r4, r5, pc}
 8014210:	20001a34 	.word	0x20001a34

08014214 <_raise_r>:
 8014214:	291f      	cmp	r1, #31
 8014216:	b538      	push	{r3, r4, r5, lr}
 8014218:	4604      	mov	r4, r0
 801421a:	460d      	mov	r5, r1
 801421c:	d904      	bls.n	8014228 <_raise_r+0x14>
 801421e:	2316      	movs	r3, #22
 8014220:	6003      	str	r3, [r0, #0]
 8014222:	f04f 30ff 	mov.w	r0, #4294967295
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801422a:	b112      	cbz	r2, 8014232 <_raise_r+0x1e>
 801422c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014230:	b94b      	cbnz	r3, 8014246 <_raise_r+0x32>
 8014232:	4620      	mov	r0, r4
 8014234:	f000 f830 	bl	8014298 <_getpid_r>
 8014238:	462a      	mov	r2, r5
 801423a:	4601      	mov	r1, r0
 801423c:	4620      	mov	r0, r4
 801423e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014242:	f000 b817 	b.w	8014274 <_kill_r>
 8014246:	2b01      	cmp	r3, #1
 8014248:	d00a      	beq.n	8014260 <_raise_r+0x4c>
 801424a:	1c59      	adds	r1, r3, #1
 801424c:	d103      	bne.n	8014256 <_raise_r+0x42>
 801424e:	2316      	movs	r3, #22
 8014250:	6003      	str	r3, [r0, #0]
 8014252:	2001      	movs	r0, #1
 8014254:	e7e7      	b.n	8014226 <_raise_r+0x12>
 8014256:	2400      	movs	r4, #0
 8014258:	4628      	mov	r0, r5
 801425a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801425e:	4798      	blx	r3
 8014260:	2000      	movs	r0, #0
 8014262:	e7e0      	b.n	8014226 <_raise_r+0x12>

08014264 <raise>:
 8014264:	4b02      	ldr	r3, [pc, #8]	; (8014270 <raise+0xc>)
 8014266:	4601      	mov	r1, r0
 8014268:	6818      	ldr	r0, [r3, #0]
 801426a:	f7ff bfd3 	b.w	8014214 <_raise_r>
 801426e:	bf00      	nop
 8014270:	20000010 	.word	0x20000010

08014274 <_kill_r>:
 8014274:	b538      	push	{r3, r4, r5, lr}
 8014276:	2300      	movs	r3, #0
 8014278:	4d06      	ldr	r5, [pc, #24]	; (8014294 <_kill_r+0x20>)
 801427a:	4604      	mov	r4, r0
 801427c:	4608      	mov	r0, r1
 801427e:	4611      	mov	r1, r2
 8014280:	602b      	str	r3, [r5, #0]
 8014282:	f7f1 f97e 	bl	8005582 <_kill>
 8014286:	1c43      	adds	r3, r0, #1
 8014288:	d102      	bne.n	8014290 <_kill_r+0x1c>
 801428a:	682b      	ldr	r3, [r5, #0]
 801428c:	b103      	cbz	r3, 8014290 <_kill_r+0x1c>
 801428e:	6023      	str	r3, [r4, #0]
 8014290:	bd38      	pop	{r3, r4, r5, pc}
 8014292:	bf00      	nop
 8014294:	20001a34 	.word	0x20001a34

08014298 <_getpid_r>:
 8014298:	f7f1 b96c 	b.w	8005574 <_getpid>

0801429c <_fstat_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	2300      	movs	r3, #0
 80142a0:	4d06      	ldr	r5, [pc, #24]	; (80142bc <_fstat_r+0x20>)
 80142a2:	4604      	mov	r4, r0
 80142a4:	4608      	mov	r0, r1
 80142a6:	4611      	mov	r1, r2
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	f7f1 f9c8 	bl	800563e <_fstat>
 80142ae:	1c43      	adds	r3, r0, #1
 80142b0:	d102      	bne.n	80142b8 <_fstat_r+0x1c>
 80142b2:	682b      	ldr	r3, [r5, #0]
 80142b4:	b103      	cbz	r3, 80142b8 <_fstat_r+0x1c>
 80142b6:	6023      	str	r3, [r4, #0]
 80142b8:	bd38      	pop	{r3, r4, r5, pc}
 80142ba:	bf00      	nop
 80142bc:	20001a34 	.word	0x20001a34

080142c0 <_isatty_r>:
 80142c0:	b538      	push	{r3, r4, r5, lr}
 80142c2:	2300      	movs	r3, #0
 80142c4:	4d05      	ldr	r5, [pc, #20]	; (80142dc <_isatty_r+0x1c>)
 80142c6:	4604      	mov	r4, r0
 80142c8:	4608      	mov	r0, r1
 80142ca:	602b      	str	r3, [r5, #0]
 80142cc:	f7f1 f9c6 	bl	800565c <_isatty>
 80142d0:	1c43      	adds	r3, r0, #1
 80142d2:	d102      	bne.n	80142da <_isatty_r+0x1a>
 80142d4:	682b      	ldr	r3, [r5, #0]
 80142d6:	b103      	cbz	r3, 80142da <_isatty_r+0x1a>
 80142d8:	6023      	str	r3, [r4, #0]
 80142da:	bd38      	pop	{r3, r4, r5, pc}
 80142dc:	20001a34 	.word	0x20001a34

080142e0 <_init>:
 80142e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142e2:	bf00      	nop
 80142e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142e6:	bc08      	pop	{r3}
 80142e8:	469e      	mov	lr, r3
 80142ea:	4770      	bx	lr

080142ec <_fini>:
 80142ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ee:	bf00      	nop
 80142f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142f2:	bc08      	pop	{r3}
 80142f4:	469e      	mov	lr, r3
 80142f6:	4770      	bx	lr
